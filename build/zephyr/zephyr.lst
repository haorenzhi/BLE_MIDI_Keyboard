
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
		k_mutex_unlock(&button_handler_mut);
	}
}

static void buttons_scan_fn(struct k_work *work)
{
   0:	20006f80 	.word	0x20006f80
	static uint32_t last_button_scan;
	static bool initial_run = true;
	uint32_t button_scan;

	button_scan = get_buttons();
   4:	00014cad 	.word	0x00014cad
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   8:	0002a8ab 	.word	0x0002a8ab
   c:	00014c81 	.word	0x00014c81
  10:	00014c81 	.word	0x00014c81
  14:	00014c81 	.word	0x00014c81
  18:	00014c81 	.word	0x00014c81
	...
	atomic_set(&my_buttons, (atomic_val_t)button_scan);

	if (!initial_run) {
		if (button_scan != last_button_scan) {
  2c:	0001463d 	.word	0x0001463d
  30:	00014c81 	.word	0x00014c81
	if (button_handler_cb != NULL) {
  34:	00000000 	.word	0x00000000
  38:	000145e9 	.word	0x000145e9
		button_handler_cb(button_state, has_changed);
  3c:	00014c81 	.word	0x00014c81

00000040 <_irq_vector_table>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  40:	000146f5 0002d0ab 000146f5 000146f5     .F.......F...F..
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
  50:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..

		if (err) {
			LOG_ERR("Cannot enable callbacks");
		}
	}
}
  60:	0002d073 000146f5 000146f5 0002d091     s....F...F......
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
  70:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
  80:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
  90:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
  a0:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
  b0:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
  c0:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
			state = STATE_WAITING;
  d0:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
			err = gpio_pin_interrupt_configure(button_devs[i],
  e0:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
  f0:	000146f5 000146f5 000146f5 000146f5     .F...F...F...F..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
		if (err) {
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
			LOG_ERR("Cannot enable callbacks");
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}
     134:	9e08      	ldr	r6, [sp, #32]
			LOG_ERR("Cannot enable callbacks");
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
			__ASSERT_NO_MSG(false);
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
		int err = 0;
     152:	fa05 f302 	lsl.w	r3, r5, r2
}
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_BT_DEVICE_APPEARANCE+0x73>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_BT_DEVICE_APPEARANCE+0x77>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_BT_DEVICE_APPEARANCE+0x9f>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_BT_DEVICE_APPEARANCE+0x6d>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_BT_DEVICE_APPEARANCE+0x9b>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x97>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x97>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0x8f>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0x8f>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x93>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x93>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_BT_DEVICE_APPEARANCE+0x7f>
     38c:	d016      	beq.n	3bc <CONFIG_BT_DEVICE_APPEARANCE+0x7b>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_BT_DEVICE_APPEARANCE+0x67>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_BT_DEVICE_APPEARANCE+0x4d>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_BT_DEVICE_APPEARANCE+0x37>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_BT_DEVICE_APPEARANCE+0xd>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b f9da 	bl	b7cc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000
     428:	2800      	cmp	r0, #0
     42a:	d019      	beq.n	460 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x60>
     42c:	7803      	ldrb	r3, [r0, #0]
     42e:	4913      	ldr	r1, [pc, #76]	; (47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>)
     430:	4a13      	ldr	r2, [pc, #76]	; (480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>)
     432:	b113      	cbz	r3, 43a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3a>
     434:	2b01      	cmp	r3, #1
     436:	d00e      	beq.n	456 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x56>
     438:	e011      	b.n	45e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5e>
     43a:	7903      	ldrb	r3, [r0, #4]
     43c:	2b01      	cmp	r3, #1
     43e:	d000      	beq.n	442 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x42>
     440:	b96b      	cbnz	r3, 45e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5e>
     442:	7943      	ldrb	r3, [r0, #5]
     444:	b10b      	cbz	r3, 44a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x4a>
     446:	2b01      	cmp	r3, #1
     448:	d109      	bne.n	45e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5e>
     44a:	6883      	ldr	r3, [r0, #8]
     44c:	3b64      	subs	r3, #100	; 0x64
     44e:	428b      	cmp	r3, r1
     450:	d205      	bcs.n	45e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5e>
     452:	68c0      	ldr	r0, [r0, #12]
     454:	e00e      	b.n	474 <CONFIG_BT_HCI_ECC_STACK_SIZE>
     456:	7903      	ldrb	r3, [r0, #4]
     458:	2b01      	cmp	r3, #1
     45a:	d002      	beq.n	462 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x62>
     45c:	b10b      	cbz	r3, 462 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x62>
     45e:	2000      	movs	r0, #0
     460:	4770      	bx	lr
     462:	7943      	ldrb	r3, [r0, #5]
     464:	b10b      	cbz	r3, 46a <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x6a>
     466:	2b01      	cmp	r3, #1
     468:	d1f9      	bne.n	45e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5e>
     46a:	68c3      	ldr	r3, [r0, #12]
     46c:	3b64      	subs	r3, #100	; 0x64
     46e:	428b      	cmp	r3, r1
     470:	d2f5      	bcs.n	45e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5e>
     472:	6880      	ldr	r0, [r0, #8]
     474:	4290      	cmp	r0, r2
     476:	d8f2      	bhi.n	45e <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x5e>
     478:	2001      	movs	r0, #1
     47a:	4770      	bx	lr
     47c:	0001863d 	.word	0x0001863d
     480:	07a11fff 	.word	0x07a11fff
     484:	b510      	push	{r4, lr}
     486:	4c05      	ldr	r4, [pc, #20]	; (49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x28>)
     488:	6820      	ldr	r0, [r4, #0]
     48a:	b110      	cbz	r0, 492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     48c:	4780      	blx	r0
     48e:	2000      	movs	r0, #0
     490:	6020      	str	r0, [r4, #0]
     492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     496:	f001 bfd5 	b.w	2444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
     49a:	0000      	.short	0x0000
     49c:	20000008 	.word	0x20000008

000004a0 <mpsl_timeslot_session_open>:
     4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     4a4:	460e      	mov	r6, r1
     4a6:	0005      	movs	r5, r0
     4a8:	d004      	beq.n	4b4 <mpsl_timeslot_session_open+0x14>
     4aa:	f000 f845 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
     4ae:	4607      	mov	r7, r0
     4b0:	2400      	movs	r4, #0
     4b2:	e00a      	b.n	4ca <mpsl_timeslot_session_open+0x2a>
     4b4:	f06f 0015 	mvn.w	r0, #21
     4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4bc:	4620      	mov	r0, r4
     4be:	f000 f841 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4c2:	7880      	ldrb	r0, [r0, #2]
     4c4:	b138      	cbz	r0, 4d6 <mpsl_timeslot_session_open+0x36>
     4c6:	1c64      	adds	r4, r4, #1
     4c8:	b2e4      	uxtb	r4, r4
     4ca:	42bc      	cmp	r4, r7
     4cc:	d3f6      	bcc.n	4bc <mpsl_timeslot_session_open+0x1c>
     4ce:	bf00      	nop
     4d0:	f06f 000b 	mvn.w	r0, #11
     4d4:	e7f0      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     4d6:	4627      	mov	r7, r4
     4d8:	2cff      	cmp	r4, #255	; 0xff
     4da:	d0f9      	beq.n	4d0 <mpsl_timeslot_session_open+0x30>
     4dc:	4620      	mov	r0, r4
     4de:	f000 f831 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
     4e2:	4604      	mov	r4, r0
     4e4:	f00b fb15 	bl	bb12 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
     4e8:	7127      	strb	r7, [r4, #4]
     4ea:	4621      	mov	r1, r4
     4ec:	4807      	ldr	r0, [pc, #28]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4ee:	f001 ff81 	bl	23f4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
     4f2:	70e0      	strb	r0, [r4, #3]
     4f4:	2820      	cmp	r0, #32
     4f6:	d005      	beq.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4f8:	2001      	movs	r0, #1
     4fa:	60a5      	str	r5, [r4, #8]
     4fc:	70a0      	strb	r0, [r4, #2]
     4fe:	7037      	strb	r7, [r6, #0]
     500:	2000      	movs	r0, #0
     502:	e7d9      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     504:	f06f 0022 	mvn.w	r0, #34	; 0x22
     508:	e7d6      	b.n	4b8 <mpsl_timeslot_session_open+0x18>
     50a:	0000      	.short	0x0000
     50c:	0000b873 	.word	0x0000b873

00000510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
     510:	b510      	push	{r4, lr}
     512:	0782      	lsls	r2, r0, #30
     514:	d002      	beq.n	51c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
     516:	f06f 000d 	mvn.w	r0, #13
     51a:	bd10      	pop	{r4, pc}
     51c:	4a05      	ldr	r2, [pc, #20]	; (534 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
     51e:	7011      	strb	r1, [r2, #0]
     520:	6050      	str	r0, [r2, #4]
     522:	b128      	cbz	r0, 530 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
     524:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
     528:	008a      	lsls	r2, r1, #2
     52a:	2100      	movs	r1, #0
     52c:	f00b fd77 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     530:	2000      	movs	r0, #0
     532:	bd10      	pop	{r4, pc}
     534:	2000000c 	.word	0x2000000c

00000538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     538:	4801      	ldr	r0, [pc, #4]	; (540 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     53a:	7800      	ldrb	r0, [r0, #0]
     53c:	4770      	bx	lr
     53e:	0000      	.short	0x0000
     540:	2000000c 	.word	0x2000000c

00000544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     544:	4905      	ldr	r1, [pc, #20]	; (55c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     546:	780a      	ldrb	r2, [r1, #0]
     548:	4290      	cmp	r0, r2
     54a:	d301      	bcc.n	550 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     54c:	2000      	movs	r0, #0
     54e:	4770      	bx	lr
     550:	6849      	ldr	r1, [r1, #4]
     552:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     556:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     55a:	4770      	bx	lr
     55c:	2000000c 	.word	0x2000000c
     560:	b570      	push	{r4, r5, r6, lr}
     562:	4605      	mov	r5, r0
     564:	2a20      	cmp	r2, #32
     566:	d027      	beq.n	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     568:	4819      	ldr	r0, [pc, #100]	; (5d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
     56a:	4c1a      	ldr	r4, [pc, #104]	; (5d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
     56c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     570:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     578:	2920      	cmp	r1, #32
     57a:	d022      	beq.n	5c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
     57c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     580:	7840      	ldrb	r0, [r0, #1]
     582:	784c      	ldrb	r4, [r1, #1]
     584:	7048      	strb	r0, [r1, #1]
     586:	4620      	mov	r0, r4
     588:	4601      	mov	r1, r0
     58a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     58e:	4291      	cmp	r1, r2
     590:	7005      	strb	r5, [r0, #0]
     592:	7840      	ldrb	r0, [r0, #1]
     594:	d1f8      	bne.n	588 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     596:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     59a:	2a20      	cmp	r2, #32
     59c:	bf1a      	itte	ne
     59e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     5a2:	7054      	strbne	r4, [r2, #1]
     5a4:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     5a8:	2220      	movs	r2, #32
     5aa:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     5ae:	f88c 2001 	strb.w	r2, [ip, #1]
     5b2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	f240 217e 	movw	r1, #638	; 0x27e
     5bc:	2070      	movs	r0, #112	; 0x70
     5be:	f003 f999 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5c2:	f893 4020 	ldrb.w	r4, [r3, #32]
     5c6:	7840      	ldrb	r0, [r0, #1]
     5c8:	f883 0020 	strb.w	r0, [r3, #32]
     5cc:	e7db      	b.n	586 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     5ce:	0000      	.short	0x0000
     5d0:	20000f44 	.word	0x20000f44
     5d4:	20000fc4 	.word	0x20000fc4
     5d8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5dc:	b085      	sub	sp, #20
     5de:	4615      	mov	r5, r2
     5e0:	460c      	mov	r4, r1
     5e2:	f002 f8ef 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5e6:	4428      	add	r0, r5
     5e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     5ec:	9002      	str	r0, [sp, #8]
     5ee:	6821      	ldr	r1, [r4, #0]
     5f0:	1a08      	subs	r0, r1, r0
     5f2:	0200      	lsls	r0, r0, #8
     5f4:	17c1      	asrs	r1, r0, #31
     5f6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5fa:	1200      	asrs	r0, r0, #8
     5fc:	2800      	cmp	r0, #0
     5fe:	f300 80d5 	bgt.w	7ac <__data_size+0x3f>
     602:	48ac      	ldr	r0, [pc, #688]	; (8b4 <CONFIG_BT_RX_STACK_SIZE+0x1c>)
     604:	9f08      	ldr	r7, [sp, #32]
     606:	4eac      	ldr	r6, [pc, #688]	; (8b8 <CONFIG_BT_RX_STACK_SIZE+0x20>)
     608:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     60c:	9003      	str	r0, [sp, #12]
     60e:	f890 5020 	ldrb.w	r5, [r0, #32]
     612:	2020      	movs	r0, #32
     614:	46e9      	mov	r9, sp
     616:	f10d 0804 	add.w	r8, sp, #4
     61a:	f88d 0000 	strb.w	r0, [sp]
     61e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     622:	2d20      	cmp	r5, #32
     624:	bf18      	it	ne
     626:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     62a:	d025      	beq.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     62c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     630:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     634:	6822      	ldr	r2, [r4, #0]
     636:	68c1      	ldr	r1, [r0, #12]
     638:	1a51      	subs	r1, r2, r1
     63a:	0209      	lsls	r1, r1, #8
     63c:	17ca      	asrs	r2, r1, #31
     63e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     642:	3008      	adds	r0, #8
     644:	1209      	asrs	r1, r1, #8
     646:	d417      	bmi.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     648:	8961      	ldrh	r1, [r4, #10]
     64a:	b171      	cbz	r1, 66a <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     64c:	8941      	ldrh	r1, [r0, #10]
     64e:	b961      	cbnz	r1, 66a <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     650:	f000 fdb4 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     654:	f002 f8b6 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     658:	6821      	ldr	r1, [r4, #0]
     65a:	1a08      	subs	r0, r1, r0
     65c:	0200      	lsls	r0, r0, #8
     65e:	17c1      	asrs	r1, r0, #31
     660:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     664:	1200      	asrs	r0, r0, #8
     666:	2833      	cmp	r0, #51	; 0x33
     668:	db06      	blt.n	678 <CONFIG_BT_HCI_TX_STACK_SIZE+0x78>
     66a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     66e:	f889 5000 	strb.w	r5, [r9]
     672:	7845      	ldrb	r5, [r0, #1]
     674:	2d20      	cmp	r5, #32
     676:	d1d9      	bne.n	62c <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     678:	f899 0000 	ldrb.w	r0, [r9]
     67c:	f888 0000 	strb.w	r0, [r8]
     680:	46a1      	mov	r9, r4
     682:	2d20      	cmp	r5, #32
     684:	bf1c      	itt	ne
     686:	488d      	ldrne	r0, [pc, #564]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     688:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     68c:	f000 810e 	beq.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     690:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     694:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     698:	f8d9 2004 	ldr.w	r2, [r9, #4]
     69c:	f8da 1008 	ldr.w	r1, [sl, #8]
     6a0:	4648      	mov	r0, r9
     6a2:	1a89      	subs	r1, r1, r2
     6a4:	0209      	lsls	r1, r1, #8
     6a6:	17ca      	asrs	r2, r1, #31
     6a8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6ac:	f10a 0708 	add.w	r7, sl, #8
     6b0:	1209      	asrs	r1, r1, #8
     6b2:	d415      	bmi.n	6e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xe0>
     6b4:	8979      	ldrh	r1, [r7, #10]
     6b6:	2900      	cmp	r1, #0
     6b8:	f000 80f8 	beq.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6bc:	8941      	ldrh	r1, [r0, #10]
     6be:	2900      	cmp	r1, #0
     6c0:	f040 80f4 	bne.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6c4:	f000 fd7a 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     6c8:	f002 f87c 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6cc:	6839      	ldr	r1, [r7, #0]
     6ce:	1a08      	subs	r0, r1, r0
     6d0:	0200      	lsls	r0, r0, #8
     6d2:	17c1      	asrs	r1, r0, #31
     6d4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     6d8:	1200      	asrs	r0, r0, #8
     6da:	2833      	cmp	r0, #51	; 0x33
     6dc:	f280 80e6 	bge.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6e0:	f888 5000 	strb.w	r5, [r8]
     6e4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     6e8:	f899 000c 	ldrb.w	r0, [r9, #12]
     6ec:	4281      	cmp	r1, r0
     6ee:	d906      	bls.n	6fe <CONFIG_BT_HCI_TX_STACK_SIZE+0xfe>
     6f0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     6f4:	7845      	ldrb	r5, [r0, #1]
     6f6:	2d20      	cmp	r5, #32
     6f8:	d1ca      	bne.n	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     6fa:	f000 b8d7 	b.w	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     6fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
     702:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     706:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     70a:	8a68      	ldrh	r0, [r5, #18]
     70c:	68ef      	ldr	r7, [r5, #12]
     70e:	2800      	cmp	r0, #0
     710:	d143      	bne.n	79a <__data_size+0x2d>
     712:	8960      	ldrh	r0, [r4, #10]
     714:	b3e8      	cbz	r0, 792 <__data_size+0x25>
     716:	68a8      	ldr	r0, [r5, #8]
     718:	f00b fa99 	bl	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     71c:	8a69      	ldrh	r1, [r5, #18]
     71e:	7c2a      	ldrb	r2, [r5, #16]
     720:	4b67      	ldr	r3, [pc, #412]	; (8c0 <CONFIG_BT_RX_STACK_SIZE+0x28>)
     722:	4411      	add	r1, r2
     724:	1c49      	adds	r1, r1, #1
     726:	1842      	adds	r2, r0, r1
     728:	4298      	cmp	r0, r3
     72a:	d904      	bls.n	736 <CONFIG_BT_HCI_TX_STACK_SIZE+0x136>
     72c:	f240 6109 	movw	r1, #1545	; 0x609
     730:	2070      	movs	r0, #112	; 0x70
     732:	f003 f8df 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     736:	4863      	ldr	r0, [pc, #396]	; (8c4 <CONFIG_BT_RX_STACK_SIZE+0x2c>)
     738:	4281      	cmp	r1, r0
     73a:	dd04      	ble.n	746 <CONFIG_BT_HCI_TX_STACK_SIZE+0x146>
     73c:	f240 610a 	movw	r1, #1546	; 0x60a
     740:	2070      	movs	r0, #112	; 0x70
     742:	f003 f8d7 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     746:	4860      	ldr	r0, [pc, #384]	; (8c8 <CONFIG_BT_RX_STACK_SIZE+0x30>)
     748:	4281      	cmp	r1, r0
     74a:	da04      	bge.n	756 <CONFIG_BT_HCI_TX_STACK_SIZE+0x156>
     74c:	f240 610b 	movw	r1, #1547	; 0x60b
     750:	2070      	movs	r0, #112	; 0x70
     752:	f003 f8cf 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     756:	485d      	ldr	r0, [pc, #372]	; (8cc <CONFIG_BT_RX_STACK_SIZE+0x34>)
     758:	4290      	cmp	r0, r2
     75a:	bfdc      	itt	le
     75c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     760:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     764:	dd05      	ble.n	772 <__data_size+0x5>
     766:	2a00      	cmp	r2, #0
     768:	bfbc      	itt	lt
     76a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     76e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     772:	4610      	mov	r0, r2
     774:	f002 f826 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     778:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     77c:	1a78      	subs	r0, r7, r1
     77e:	0200      	lsls	r0, r0, #8
     780:	17c2      	asrs	r2, r0, #31
     782:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     786:	1200      	asrs	r0, r0, #8
     788:	2833      	cmp	r0, #51	; 0x33
     78a:	bfb8      	it	lt
     78c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     790:	e000      	b.n	794 <__data_size+0x27>
     792:	e002      	b.n	79a <__data_size+0x2d>
     794:	bfb8      	it	lt
     796:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     79a:	9802      	ldr	r0, [sp, #8]
     79c:	1a38      	subs	r0, r7, r0
     79e:	0200      	lsls	r0, r0, #8
     7a0:	17c1      	asrs	r1, r0, #31
     7a2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     7a6:	1200      	asrs	r0, r0, #8
     7a8:	2800      	cmp	r0, #0
     7aa:	dd03      	ble.n	7b4 <__data_size+0x47>
     7ac:	b009      	add	sp, #36	; 0x24
     7ae:	2000      	movs	r0, #0
     7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b4:	e9d4 1000 	ldrd	r1, r0, [r4]
     7b8:	1a40      	subs	r0, r0, r1
     7ba:	4438      	add	r0, r7
     7bc:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     7c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7c4:	e9c4 1000 	strd	r1, r0, [r4]
     7c8:	9803      	ldr	r0, [sp, #12]
     7ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
     7ce:	466f      	mov	r7, sp
     7d0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7d4:	2020      	movs	r0, #32
     7d6:	f10d 0a04 	add.w	sl, sp, #4
     7da:	f88d 0000 	strb.w	r0, [sp]
     7de:	2d20      	cmp	r5, #32
     7e0:	bf1c      	itt	ne
     7e2:	4836      	ldrne	r0, [pc, #216]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     7e4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     7e8:	d025      	beq.n	836 <CONFIG_HEAP_MEM_POOL_SIZE+0x36>
     7ea:	bf00      	nop
     7ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7f0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     7f4:	6822      	ldr	r2, [r4, #0]
     7f6:	68c1      	ldr	r1, [r0, #12]
     7f8:	1a51      	subs	r1, r2, r1
     7fa:	0209      	lsls	r1, r1, #8
     7fc:	17ca      	asrs	r2, r1, #31
     7fe:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     802:	3008      	adds	r0, #8
     804:	1209      	asrs	r1, r1, #8
     806:	d416      	bmi.n	836 <CONFIG_HEAP_MEM_POOL_SIZE+0x36>
     808:	8961      	ldrh	r1, [r4, #10]
     80a:	b171      	cbz	r1, 82a <CONFIG_HEAP_MEM_POOL_SIZE+0x2a>
     80c:	8941      	ldrh	r1, [r0, #10]
     80e:	b961      	cbnz	r1, 82a <CONFIG_HEAP_MEM_POOL_SIZE+0x2a>
     810:	f000 fcd4 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     814:	f001 ffd6 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     818:	6821      	ldr	r1, [r4, #0]
     81a:	1a08      	subs	r0, r1, r0
     81c:	0200      	lsls	r0, r0, #8
     81e:	17c1      	asrs	r1, r0, #31
     820:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     824:	1200      	asrs	r0, r0, #8
     826:	2833      	cmp	r0, #51	; 0x33
     828:	db05      	blt.n	836 <CONFIG_HEAP_MEM_POOL_SIZE+0x36>
     82a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     82e:	703d      	strb	r5, [r7, #0]
     830:	7845      	ldrb	r5, [r0, #1]
     832:	2d20      	cmp	r5, #32
     834:	d1da      	bne.n	7ec <__data_size+0x7f>
     836:	7838      	ldrb	r0, [r7, #0]
     838:	f88a 0000 	strb.w	r0, [sl]
     83c:	4627      	mov	r7, r4
     83e:	2d20      	cmp	r5, #32
     840:	bf1c      	itt	ne
     842:	481e      	ldrne	r0, [pc, #120]	; (8bc <CONFIG_BT_RX_STACK_SIZE+0x24>)
     844:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     848:	d030      	beq.n	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     84a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     84e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     852:	6879      	ldr	r1, [r7, #4]
     854:	f8d9 2008 	ldr.w	r2, [r9, #8]
     858:	4638      	mov	r0, r7
     85a:	1a51      	subs	r1, r2, r1
     85c:	0209      	lsls	r1, r1, #8
     85e:	17ca      	asrs	r2, r1, #31
     860:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     864:	f109 0808 	add.w	r8, r9, #8
     868:	1209      	asrs	r1, r1, #8
     86a:	d412      	bmi.n	892 <CONFIG_HEAP_MEM_POOL_SIZE+0x92>
     86c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     870:	b1e1      	cbz	r1, 8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     872:	8941      	ldrh	r1, [r0, #10]
     874:	b9d1      	cbnz	r1, 8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     876:	f000 fca1 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     87a:	f001 ffa3 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     87e:	f8d8 1000 	ldr.w	r1, [r8]
     882:	1a08      	subs	r0, r1, r0
     884:	0200      	lsls	r0, r0, #8
     886:	17c1      	asrs	r1, r0, #31
     888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     88c:	1200      	asrs	r0, r0, #8
     88e:	2833      	cmp	r0, #51	; 0x33
     890:	da0c      	bge.n	8ac <CONFIG_BT_RX_STACK_SIZE+0x14>
     892:	f88a 5000 	strb.w	r5, [sl]
     896:	f899 0014 	ldrb.w	r0, [r9, #20]
     89a:	7b39      	ldrb	r1, [r7, #12]
     89c:	4288      	cmp	r0, r1
     89e:	f67f af2e 	bls.w	6fe <CONFIG_BT_HCI_TX_STACK_SIZE+0xfe>
     8a2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     8a6:	7845      	ldrb	r5, [r0, #1]
     8a8:	2d20      	cmp	r5, #32
     8aa:	d1ce      	bne.n	84a <CONFIG_HEAP_MEM_POOL_SIZE+0x4a>
     8ac:	b009      	add	sp, #36	; 0x24
     8ae:	2001      	movs	r0, #1
     8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8b4:	20000fc4 	.word	0x20000fc4
     8b8:	20000c44 	.word	0x20000c44
     8bc:	20000f44 	.word	0x20000f44
     8c0:	1e847fff 	.word	0x1e847fff
     8c4:	07a12000 	.word	0x07a12000
     8c8:	f85ee000 	.word	0xf85ee000
     8cc:	1e848000 	.word	0x1e848000
     8d0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     8d4:	4604      	mov	r4, r0
     8d6:	483c      	ldr	r0, [pc, #240]	; (9c8 <CONFIG_BT_RX_STACK_SIZE+0x130>)
     8d8:	460e      	mov	r6, r1
     8da:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     8de:	4f3b      	ldr	r7, [pc, #236]	; (9cc <CONFIG_BT_RX_STACK_SIZE+0x134>)
     8e0:	f890 5020 	ldrb.w	r5, [r0, #32]
     8e4:	2020      	movs	r0, #32
     8e6:	4698      	mov	r8, r3
     8e8:	4692      	mov	sl, r2
     8ea:	7010      	strb	r0, [r2, #0]
     8ec:	f507 7940 	add.w	r9, r7, #768	; 0x300
     8f0:	2d20      	cmp	r5, #32
     8f2:	bf18      	it	ne
     8f4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     8f8:	d028      	beq.n	94c <CONFIG_BT_RX_STACK_SIZE+0xb4>
     8fa:	bf00      	nop
     8fc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     900:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     904:	f100 0108 	add.w	r1, r0, #8
     908:	68c0      	ldr	r0, [r0, #12]
     90a:	6822      	ldr	r2, [r4, #0]
     90c:	1a10      	subs	r0, r2, r0
     90e:	0200      	lsls	r0, r0, #8
     910:	17c2      	asrs	r2, r0, #31
     912:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     916:	1200      	asrs	r0, r0, #8
     918:	d418      	bmi.n	94c <CONFIG_BT_RX_STACK_SIZE+0xb4>
     91a:	8960      	ldrh	r0, [r4, #10]
     91c:	b178      	cbz	r0, 93e <CONFIG_BT_RX_STACK_SIZE+0xa6>
     91e:	8948      	ldrh	r0, [r1, #10]
     920:	b968      	cbnz	r0, 93e <CONFIG_BT_RX_STACK_SIZE+0xa6>
     922:	4608      	mov	r0, r1
     924:	f000 fc4a 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     928:	f001 ff4c 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     92c:	6821      	ldr	r1, [r4, #0]
     92e:	1a08      	subs	r0, r1, r0
     930:	0200      	lsls	r0, r0, #8
     932:	17c1      	asrs	r1, r0, #31
     934:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     938:	1200      	asrs	r0, r0, #8
     93a:	2833      	cmp	r0, #51	; 0x33
     93c:	db06      	blt.n	94c <CONFIG_BT_RX_STACK_SIZE+0xb4>
     93e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     942:	f88a 5000 	strb.w	r5, [sl]
     946:	7845      	ldrb	r5, [r0, #1]
     948:	2d20      	cmp	r5, #32
     94a:	d1d7      	bne.n	8fc <CONFIG_BT_RX_STACK_SIZE+0x64>
     94c:	f89a 0000 	ldrb.w	r0, [sl]
     950:	f888 0000 	strb.w	r0, [r8]
     954:	2d20      	cmp	r5, #32
     956:	bf18      	it	ne
     958:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     95c:	d030      	beq.n	9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     95e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     962:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     966:	6861      	ldr	r1, [r4, #4]
     968:	f8d9 2008 	ldr.w	r2, [r9, #8]
     96c:	4620      	mov	r0, r4
     96e:	1a51      	subs	r1, r2, r1
     970:	0209      	lsls	r1, r1, #8
     972:	17ca      	asrs	r2, r1, #31
     974:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     978:	f109 0608 	add.w	r6, r9, #8
     97c:	1209      	asrs	r1, r1, #8
     97e:	d410      	bmi.n	9a2 <CONFIG_BT_RX_STACK_SIZE+0x10a>
     980:	8971      	ldrh	r1, [r6, #10]
     982:	b1e9      	cbz	r1, 9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     984:	8941      	ldrh	r1, [r0, #10]
     986:	b9d9      	cbnz	r1, 9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     988:	f000 fc18 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     98c:	f001 ff1a 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     990:	6831      	ldr	r1, [r6, #0]
     992:	1a08      	subs	r0, r1, r0
     994:	0200      	lsls	r0, r0, #8
     996:	17c1      	asrs	r1, r0, #31
     998:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     99c:	1200      	asrs	r0, r0, #8
     99e:	2833      	cmp	r0, #51	; 0x33
     9a0:	da0e      	bge.n	9c0 <CONFIG_BT_RX_STACK_SIZE+0x128>
     9a2:	f888 5000 	strb.w	r5, [r8]
     9a6:	f899 0014 	ldrb.w	r0, [r9, #20]
     9aa:	7b21      	ldrb	r1, [r4, #12]
     9ac:	4288      	cmp	r0, r1
     9ae:	d802      	bhi.n	9b6 <CONFIG_BT_RX_STACK_SIZE+0x11e>
     9b0:	2000      	movs	r0, #0
     9b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9b6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     9ba:	7845      	ldrb	r5, [r0, #1]
     9bc:	2d20      	cmp	r5, #32
     9be:	d1ce      	bne.n	95e <CONFIG_BT_RX_STACK_SIZE+0xc6>
     9c0:	2001      	movs	r0, #1
     9c2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9c6:	0000      	.short	0x0000
     9c8:	20000fc4 	.word	0x20000fc4
     9cc:	20000c44 	.word	0x20000c44
     9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9d4:	b098      	sub	sp, #96	; 0x60
     9d6:	4616      	mov	r6, r2
     9d8:	460d      	mov	r5, r1
     9da:	f04f 0800 	mov.w	r8, #0
     9de:	f04f 0b01 	mov.w	fp, #1
     9e2:	f002 f971 	bl	2cc8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     9e6:	4604      	mov	r4, r0
     9e8:	2d01      	cmp	r5, #1
     9ea:	bf18      	it	ne
     9ec:	2d02      	cmpne	r5, #2
     9ee:	d005      	beq.n	9fc <CONFIG_BT_RX_STACK_SIZE+0x164>
     9f0:	f640 1194 	movw	r1, #2452	; 0x994
     9f4:	f04f 0070 	mov.w	r0, #112	; 0x70
     9f8:	f002 ff7c 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9fc:	49f9      	ldr	r1, [pc, #996]	; (de4 <CONFIG_BT_RX_STACK_SIZE+0x54c>)
     9fe:	2001      	movs	r0, #1
     a00:	6008      	str	r0, [r1, #0]
     a02:	49f9      	ldr	r1, [pc, #996]	; (de8 <CONFIG_BT_RX_STACK_SIZE+0x550>)
     a04:	6889      	ldr	r1, [r1, #8]
     a06:	6008      	str	r0, [r1, #0]
     a08:	2000      	movs	r0, #0
     a0a:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     a0e:	900c      	str	r0, [sp, #48]	; 0x30
     a10:	1e40      	subs	r0, r0, #1
     a12:	900e      	str	r0, [sp, #56]	; 0x38
     a14:	49f5      	ldr	r1, [pc, #980]	; (dec <CONFIG_BT_RX_STACK_SIZE+0x554>)
     a16:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     a1a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     a1e:	3308      	adds	r3, #8
     a20:	af0f      	add	r7, sp, #60	; 0x3c
     a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a24:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a28:	a80f      	add	r0, sp, #60	; 0x3c
     a2a:	f000 fbc7 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
     a2e:	900d      	str	r0, [sp, #52]	; 0x34
     a30:	48ee      	ldr	r0, [pc, #952]	; (dec <CONFIG_BT_RX_STACK_SIZE+0x554>)
     a32:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     a36:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     a3a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     a3e:	f1b9 0f00 	cmp.w	r9, #0
     a42:	bf14      	ite	ne
     a44:	f04f 0a01 	movne.w	sl, #1
     a48:	f04f 0a00 	moveq.w	sl, #0
     a4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a4e:	9014      	str	r0, [sp, #80]	; 0x50
     a50:	f1ba 0f00 	cmp.w	sl, #0
     a54:	d009      	beq.n	a6a <CONFIG_BT_RX_STACK_SIZE+0x1d2>
     a56:	48e6      	ldr	r0, [pc, #920]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     a58:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     a5c:	b928      	cbnz	r0, a6a <CONFIG_BT_RX_STACK_SIZE+0x1d2>
     a5e:	f002 fed1 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     a62:	2800      	cmp	r0, #0
     a64:	bf08      	it	eq
     a66:	2701      	moveq	r7, #1
     a68:	d000      	beq.n	a6c <CONFIG_BT_RX_STACK_SIZE+0x1d4>
     a6a:	2700      	movs	r7, #0
     a6c:	48e1      	ldr	r0, [pc, #900]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     a6e:	2200      	movs	r2, #0
     a70:	9215      	str	r2, [sp, #84]	; 0x54
     a72:	7800      	ldrb	r0, [r0, #0]
     a74:	4616      	mov	r6, r2
     a76:	2801      	cmp	r0, #1
     a78:	bf18      	it	ne
     a7a:	2803      	cmpne	r0, #3
     a7c:	d140      	bne.n	b00 <CONFIG_BT_RX_STACK_SIZE+0x268>
     a7e:	48dd      	ldr	r0, [pc, #884]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     a80:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     a84:	eba8 0009 	sub.w	r0, r8, r9
     a88:	9015      	str	r0, [sp, #84]	; 0x54
     a8a:	45c8      	cmp	r8, r9
     a8c:	d938      	bls.n	b00 <CONFIG_BT_RX_STACK_SIZE+0x268>
     a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     a90:	ea6f 0108 	mvn.w	r1, r8
     a94:	f8df e360 	ldr.w	lr, [pc, #864]	; df8 <CONFIG_BT_RX_STACK_SIZE+0x560>
     a98:	1858      	adds	r0, r3, r1
     a9a:	f10d 0c0c 	add.w	ip, sp, #12
     a9e:	aa17      	add	r2, sp, #92	; 0x5c
     aa0:	4573      	cmp	r3, lr
     aa2:	d904      	bls.n	aae <CONFIG_BT_RX_STACK_SIZE+0x216>
     aa4:	f240 6109 	movw	r1, #1545	; 0x609
     aa8:	2070      	movs	r0, #112	; 0x70
     aaa:	f002 ff23 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aae:	4bd3      	ldr	r3, [pc, #844]	; (dfc <CONFIG_BT_RX_STACK_SIZE+0x564>)
     ab0:	4299      	cmp	r1, r3
     ab2:	dd04      	ble.n	abe <CONFIG_BT_RX_STACK_SIZE+0x226>
     ab4:	f240 610a 	movw	r1, #1546	; 0x60a
     ab8:	2070      	movs	r0, #112	; 0x70
     aba:	f002 ff1b 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     abe:	4bd0      	ldr	r3, [pc, #832]	; (e00 <CONFIG_BT_RX_STACK_SIZE+0x568>)
     ac0:	4299      	cmp	r1, r3
     ac2:	da04      	bge.n	ace <CONFIG_BT_RX_STACK_SIZE+0x236>
     ac4:	f240 610b 	movw	r1, #1547	; 0x60b
     ac8:	2070      	movs	r0, #112	; 0x70
     aca:	f002 ff13 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ace:	49cd      	ldr	r1, [pc, #820]	; (e04 <CONFIG_BT_RX_STACK_SIZE+0x56c>)
     ad0:	4281      	cmp	r1, r0
     ad2:	bfdc      	itt	le
     ad4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     ad8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     adc:	dd05      	ble.n	aea <CONFIG_BT_RX_STACK_SIZE+0x252>
     ade:	2800      	cmp	r0, #0
     ae0:	bfbc      	itt	lt
     ae2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     ae6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     aea:	4661      	mov	r1, ip
     aec:	f001 fe86 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     af0:	9803      	ldr	r0, [sp, #12]
     af2:	990f      	ldr	r1, [sp, #60]	; 0x3c
     af4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     af8:	9003      	str	r0, [sp, #12]
     afa:	1a08      	subs	r0, r1, r0
     afc:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     b00:	2f00      	cmp	r7, #0
     b02:	bf18      	it	ne
     b04:	2632      	movne	r6, #50	; 0x32
     b06:	d104      	bne.n	b12 <CONFIG_BT_RX_STACK_SIZE+0x27a>
     b08:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b0c:	2800      	cmp	r0, #0
     b0e:	bf18      	it	ne
     b10:	2602      	movne	r6, #2
     b12:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b16:	d008      	beq.n	b2a <CONFIG_BT_RX_STACK_SIZE+0x292>
     b18:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b1a:	1b00      	subs	r0, r0, r4
     b1c:	0200      	lsls	r0, r0, #8
     b1e:	17c1      	asrs	r1, r0, #31
     b20:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b24:	1200      	asrs	r0, r0, #8
     b26:	2801      	cmp	r0, #1
     b28:	da02      	bge.n	b30 <CONFIG_BT_RX_STACK_SIZE+0x298>
     b2a:	2004      	movs	r0, #4
     b2c:	9918      	ldr	r1, [sp, #96]	; 0x60
     b2e:	e00b      	b.n	b48 <CONFIG_BT_RX_STACK_SIZE+0x2b0>
     b30:	b147      	cbz	r7, b44 <CONFIG_BT_RX_STACK_SIZE+0x2ac>
     b32:	48af      	ldr	r0, [pc, #700]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     b34:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b38:	b120      	cbz	r0, b44 <CONFIG_BT_RX_STACK_SIZE+0x2ac>
     b3a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b3e:	1c06      	adds	r6, r0, #0
     b40:	bf18      	it	ne
     b42:	2602      	movne	r6, #2
     b44:	4621      	mov	r1, r4
     b46:	2001      	movs	r0, #1
     b48:	f1b9 0f00 	cmp.w	r9, #0
     b4c:	d002      	beq.n	b54 <CONFIG_BT_RX_STACK_SIZE+0x2bc>
     b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b50:	2b1e      	cmp	r3, #30
     b52:	da02      	bge.n	b5a <CONFIG_BT_RX_STACK_SIZE+0x2c2>
     b54:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     b58:	b113      	cbz	r3, b60 <CONFIG_BT_RX_STACK_SIZE+0x2c8>
     b5a:	f04f 0b00 	mov.w	fp, #0
     b5e:	1e40      	subs	r0, r0, #1
     b60:	1983      	adds	r3, r0, r6
     b62:	48a4      	ldr	r0, [pc, #656]	; (df4 <CONFIG_BT_RX_STACK_SIZE+0x55c>)
     b64:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     b68:	7800      	ldrb	r0, [r0, #0]
     b6a:	9015      	str	r0, [sp, #84]	; 0x54
     b6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b6e:	1a80      	subs	r0, r0, r2
     b70:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     b74:	ebac 0001 	sub.w	r0, ip, r1
     b78:	0200      	lsls	r0, r0, #8
     b7a:	17c6      	asrs	r6, r0, #31
     b7c:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     b80:	1200      	asrs	r0, r0, #8
     b82:	4298      	cmp	r0, r3
     b84:	db18      	blt.n	bb8 <CONFIG_BT_RX_STACK_SIZE+0x320>
     b86:	2a00      	cmp	r2, #0
     b88:	bf18      	it	ne
     b8a:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     b8e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     b90:	9705      	str	r7, [sp, #20]
     b92:	2700      	movs	r7, #0
     b94:	f001 ff90 	bl	2ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     b98:	1a30      	subs	r0, r6, r0
     b9a:	0200      	lsls	r0, r0, #8
     b9c:	17c1      	asrs	r1, r0, #31
     b9e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     ba2:	1200      	asrs	r0, r0, #8
     ba4:	283e      	cmp	r0, #62	; 0x3e
     ba6:	da3f      	bge.n	c28 <CONFIG_BT_RX_STACK_SIZE+0x390>
     ba8:	2d01      	cmp	r5, #1
     baa:	d020      	beq.n	bee <CONFIG_BT_RX_STACK_SIZE+0x356>
     bac:	1e70      	subs	r0, r6, #1
     bae:	9905      	ldr	r1, [sp, #20]
     bb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bb4:	b319      	cbz	r1, bfe <CONFIG_BT_RX_STACK_SIZE+0x366>
     bb6:	e02d      	b.n	c14 <CONFIG_BT_RX_STACK_SIZE+0x37c>
     bb8:	b182      	cbz	r2, bdc <CONFIG_BT_RX_STACK_SIZE+0x344>
     bba:	f1be 0f00 	cmp.w	lr, #0
     bbe:	bf04      	itt	eq
     bc0:	9815      	ldreq	r0, [sp, #84]	; 0x54
     bc2:	2803      	cmpeq	r0, #3
     bc4:	d00a      	beq.n	bdc <CONFIG_BT_RX_STACK_SIZE+0x344>
     bc6:	b927      	cbnz	r7, bd2 <CONFIG_BT_RX_STACK_SIZE+0x33a>
     bc8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     bcc:	2800      	cmp	r0, #0
     bce:	bf18      	it	ne
     bd0:	1e9b      	subne	r3, r3, #2
     bd2:	2200      	movs	r2, #0
     bd4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     bd8:	4690      	mov	r8, r2
     bda:	e7c7      	b.n	b6c <CONFIG_BT_RX_STACK_SIZE+0x2d4>
     bdc:	bb07      	cbnz	r7, c20 <CONFIG_BT_RX_STACK_SIZE+0x388>
     bde:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     be2:	b1e8      	cbz	r0, c20 <CONFIG_BT_RX_STACK_SIZE+0x388>
     be4:	2000      	movs	r0, #0
     be6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     bea:	1e9b      	subs	r3, r3, #2
     bec:	e7be      	b.n	b6c <CONFIG_BT_RX_STACK_SIZE+0x2d4>
     bee:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     bf2:	d120      	bne.n	c36 <CONFIG_BT_RX_STACK_SIZE+0x39e>
     bf4:	f640 110d 	movw	r1, #2317	; 0x90d
     bf8:	2070      	movs	r0, #112	; 0x70
     bfa:	f002 fe7b 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bfe:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c02:	d007      	beq.n	c14 <CONFIG_BT_RX_STACK_SIZE+0x37c>
     c04:	1a21      	subs	r1, r4, r0
     c06:	0209      	lsls	r1, r1, #8
     c08:	17ca      	asrs	r2, r1, #31
     c0a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     c0e:	1209      	asrs	r1, r1, #8
     c10:	2904      	cmp	r1, #4
     c12:	dd03      	ble.n	c1c <CONFIG_BT_RX_STACK_SIZE+0x384>
     c14:	4604      	mov	r4, r0
     c16:	f001 ff55 	bl	2ac4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c1a:	e00c      	b.n	c36 <CONFIG_BT_RX_STACK_SIZE+0x39e>
     c1c:	2900      	cmp	r1, #0
     c1e:	dd0a      	ble.n	c36 <CONFIG_BT_RX_STACK_SIZE+0x39e>
     c20:	b01b      	add	sp, #108	; 0x6c
     c22:	2000      	movs	r0, #0
     c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c28:	1e70      	subs	r0, r6, #1
     c2a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c2e:	4620      	mov	r0, r4
     c30:	f001 ff48 	bl	2ac4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c34:	4657      	mov	r7, sl
     c36:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c3a:	d024      	beq.n	c86 <CONFIG_BT_RX_STACK_SIZE+0x3ee>
     c3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     c40:	1b00      	subs	r0, r0, r4
     c42:	1b1b      	subs	r3, r3, r4
     c44:	4a70      	ldr	r2, [pc, #448]	; (e08 <CONFIG_BT_RX_STACK_SIZE+0x570>)
     c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c4e:	4583      	cmp	fp, r0
     c50:	bf98      	it	ls
     c52:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     c56:	d2e3      	bcs.n	c20 <CONFIG_BT_RX_STACK_SIZE+0x388>
     c58:	429a      	cmp	r2, r3
     c5a:	d3e1      	bcc.n	c20 <CONFIG_BT_RX_STACK_SIZE+0x388>
     c5c:	4620      	mov	r0, r4
     c5e:	f00a fff6 	bl	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c62:	4965      	ldr	r1, [pc, #404]	; (df8 <CONFIG_BT_RX_STACK_SIZE+0x560>)
     c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     c66:	1c4b      	adds	r3, r1, #1
     c68:	1a16      	subs	r6, r2, r0
     c6a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     c6e:	bf24      	itt	cs
     c70:	eba0 0c02 	subcs.w	ip, r0, r2
     c74:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     c78:	d310      	bcc.n	c9c <CONFIG_BT_RX_STACK_SIZE+0x404>
     c7a:	42b1      	cmp	r1, r6
     c7c:	d208      	bcs.n	c90 <CONFIG_BT_RX_STACK_SIZE+0x3f8>
     c7e:	1a08      	subs	r0, r1, r0
     c80:	4410      	add	r0, r2
     c82:	1c46      	adds	r6, r0, #1
     c84:	e00a      	b.n	c9c <CONFIG_BT_RX_STACK_SIZE+0x404>
     c86:	f640 212d 	movw	r1, #2605	; 0xa2d
     c8a:	2070      	movs	r0, #112	; 0x70
     c8c:	f002 fe32 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c90:	4561      	cmp	r1, ip
     c92:	d22c      	bcs.n	cee <CONFIG_BT_RX_STACK_SIZE+0x456>
     c94:	1a89      	subs	r1, r1, r2
     c96:	4408      	add	r0, r1
     c98:	1c40      	adds	r0, r0, #1
     c9a:	4246      	negs	r6, r0
     c9c:	4854      	ldr	r0, [pc, #336]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     c9e:	7f80      	ldrb	r0, [r0, #30]
     ca0:	b350      	cbz	r0, cf8 <CONFIG_BT_RX_STACK_SIZE+0x460>
     ca2:	4628      	mov	r0, r5
     ca4:	4645      	mov	r5, r8
     ca6:	f04f 0b00 	mov.w	fp, #0
     caa:	46d8      	mov	r8, fp
     cac:	2801      	cmp	r0, #1
     cae:	d005      	beq.n	cbc <CONFIG_BT_RX_STACK_SIZE+0x424>
     cb0:	2002      	movs	r0, #2
     cb2:	f002 f95f 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cb6:	2001      	movs	r0, #1
     cb8:	f002 f95c 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cbc:	45a9      	cmp	r9, r5
     cbe:	d227      	bcs.n	d10 <CONFIG_BT_RX_STACK_SIZE+0x478>
     cc0:	eba6 0105 	sub.w	r1, r6, r5
     cc4:	f04f 0301 	mov.w	r3, #1
     cc8:	f04f 0203 	mov.w	r2, #3
     ccc:	f04f 0002 	mov.w	r0, #2
     cd0:	f002 f87c 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cd4:	2800      	cmp	r0, #0
     cd6:	bf08      	it	eq
     cd8:	f04f 0801 	moveq.w	r8, #1
     cdc:	f1b9 0f00 	cmp.w	r9, #0
     ce0:	d030      	beq.n	d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     ce2:	2301      	movs	r3, #1
     ce4:	eba6 0109 	sub.w	r1, r6, r9
     ce8:	2203      	movs	r2, #3
     cea:	4618      	mov	r0, r3
     cec:	e01e      	b.n	d2c <CONFIG_BT_RX_STACK_SIZE+0x494>
     cee:	f640 310c 	movw	r1, #2828	; 0xb0c
     cf2:	2070      	movs	r0, #112	; 0x70
     cf4:	f002 fdfe 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cf8:	45c1      	cmp	r9, r8
     cfa:	bf34      	ite	cc
     cfc:	4640      	movcc	r0, r8
     cfe:	4648      	movcs	r0, r9
     d00:	4458      	add	r0, fp
     d02:	42b0      	cmp	r0, r6
     d04:	dbcd      	blt.n	ca2 <CONFIG_BT_RX_STACK_SIZE+0x40a>
     d06:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     d0a:	2070      	movs	r0, #112	; 0x70
     d0c:	f002 fdf2 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d10:	d910      	bls.n	d34 <CONFIG_BT_RX_STACK_SIZE+0x49c>
     d12:	2301      	movs	r3, #1
     d14:	eba6 0109 	sub.w	r1, r6, r9
     d18:	2203      	movs	r2, #3
     d1a:	4618      	mov	r0, r3
     d1c:	f002 f856 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d20:	b328      	cbz	r0, d6e <CONFIG_BT_RX_STACK_SIZE+0x4d6>
     d22:	b17d      	cbz	r5, d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     d24:	1b71      	subs	r1, r6, r5
     d26:	2301      	movs	r3, #1
     d28:	2203      	movs	r2, #3
     d2a:	2002      	movs	r0, #2
     d2c:	f002 f84e 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d30:	b1e8      	cbz	r0, d6e <CONFIG_BT_RX_STACK_SIZE+0x4d6>
     d32:	e007      	b.n	d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     d34:	ea55 0009 	orrs.w	r0, r5, r9
     d38:	d004      	beq.n	d44 <CONFIG_BT_RX_STACK_SIZE+0x4ac>
     d3a:	f640 1177 	movw	r1, #2423	; 0x977
     d3e:	2070      	movs	r0, #112	; 0x70
     d40:	f002 fdd8 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d44:	2301      	movs	r3, #1
     d46:	2203      	movs	r2, #3
     d48:	4631      	mov	r1, r6
     d4a:	2000      	movs	r0, #0
     d4c:	f002 f83e 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d50:	b168      	cbz	r0, d6e <CONFIG_BT_RX_STACK_SIZE+0x4d6>
     d52:	2501      	movs	r5, #1
     d54:	f1b8 0f00 	cmp.w	r8, #0
     d58:	d003      	beq.n	d62 <CONFIG_BT_RX_STACK_SIZE+0x4ca>
     d5a:	9814      	ldr	r0, [sp, #80]	; 0x50
     d5c:	900f      	str	r0, [sp, #60]	; 0x3c
     d5e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     d62:	f8df 80a8 	ldr.w	r8, [pc, #168]	; e0c <CONFIG_BT_RX_STACK_SIZE+0x574>
     d66:	f1ba 0f00 	cmp.w	sl, #0
     d6a:	d10e      	bne.n	d8a <CONFIG_BT_RX_STACK_SIZE+0x4f2>
     d6c:	e009      	b.n	d82 <CONFIG_BT_RX_STACK_SIZE+0x4ea>
     d6e:	2002      	movs	r0, #2
     d70:	f002 f900 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d74:	2001      	movs	r0, #1
     d76:	f002 f8fd 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d7a:	b01b      	add	sp, #108	; 0x6c
     d7c:	2000      	movs	r0, #0
     d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d82:	481b      	ldr	r0, [pc, #108]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     d84:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     d88:	b100      	cbz	r0, d8c <CONFIG_BT_RX_STACK_SIZE+0x4f4>
     d8a:	b34f      	cbz	r7, de0 <CONFIG_BT_RX_STACK_SIZE+0x548>
     d8c:	f8df a060 	ldr.w	sl, [pc, #96]	; df0 <CONFIG_BT_RX_STACK_SIZE+0x558>
     d90:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d94:	b118      	cbz	r0, d9e <CONFIG_BT_RX_STACK_SIZE+0x506>
     d96:	f002 fbdf 	bl	3558 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     d9a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     d9e:	b307      	cbz	r7, de2 <CONFIG_BT_RX_STACK_SIZE+0x54a>
     da0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     da4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     da8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     dac:	f8c8 0000 	str.w	r0, [r8]
     db0:	2300      	movs	r3, #0
     db2:	2203      	movs	r2, #3
     db4:	2005      	movs	r0, #5
     db6:	f002 f809 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     dba:	b368      	cbz	r0, e18 <CONFIG_BT_RX_STACK_SIZE+0x580>
     dbc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     dc0:	2005      	movs	r0, #5
     dc2:	f002 f9bd 	bl	3140 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     dc6:	4912      	ldr	r1, [pc, #72]	; (e10 <CONFIG_BT_RX_STACK_SIZE+0x578>)
     dc8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     dcc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     dd0:	4910      	ldr	r1, [pc, #64]	; (e14 <CONFIG_BT_RX_STACK_SIZE+0x57c>)
     dd2:	12e0      	asrs	r0, r4, #11
     dd4:	6008      	str	r0, [r1, #0]
     dd6:	4c06      	ldr	r4, [pc, #24]	; (df0 <CONFIG_BT_RX_STACK_SIZE+0x558>)
     dd8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ddc:	b3e8      	cbz	r0, e5a <CONFIG_BT_RX_STACK_SIZE+0x5c2>
     dde:	e030      	b.n	e42 <CONFIG_BT_RX_STACK_SIZE+0x5aa>
     de0:	e01b      	b.n	e1a <CONFIG_BT_RX_STACK_SIZE+0x582>
     de2:	e01f      	b.n	e24 <CONFIG_BT_RX_STACK_SIZE+0x58c>
     de4:	40000508 	.word	0x40000508
     de8:	20000014 	.word	0x20000014
     dec:	20000c44 	.word	0x20000c44
     df0:	20000fc4 	.word	0x20000fc4
     df4:	20000016 	.word	0x20000016
     df8:	1e847fff 	.word	0x1e847fff
     dfc:	07a12000 	.word	0x07a12000
     e00:	f85ee000 	.word	0xf85ee000
     e04:	1e848000 	.word	0x1e848000
     e08:	003fffff 	.word	0x003fffff
     e0c:	4001f508 	.word	0x4001f508
     e10:	4001f098 	.word	0x4001f098
     e14:	4001f504 	.word	0x4001f504
     e18:	e025      	b.n	e66 <CONFIG_BT_RX_STACK_SIZE+0x5ce>
     e1a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; ed4 <CONFIG_BT_RX_STACK_SIZE+0x63c>
     e1e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e22:	b1c8      	cbz	r0, e58 <CONFIG_BT_RX_STACK_SIZE+0x5c0>
     e24:	4c2b      	ldr	r4, [pc, #172]	; (ed4 <CONFIG_BT_RX_STACK_SIZE+0x63c>)
     e26:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e2a:	b150      	cbz	r0, e42 <CONFIG_BT_RX_STACK_SIZE+0x5aa>
     e2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e30:	f8c8 0000 	str.w	r0, [r8]
     e34:	2005      	movs	r0, #5
     e36:	f002 f89d 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     e3a:	f002 fbf5 	bl	3628 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     e3e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     e42:	eba6 0009 	sub.w	r0, r6, r9
     e46:	f1a0 0119 	sub.w	r1, r0, #25
     e4a:	2900      	cmp	r1, #0
     e4c:	dc15      	bgt.n	e7a <CONFIG_BT_RX_STACK_SIZE+0x5e2>
     e4e:	f640 2171 	movw	r1, #2673	; 0xa71
     e52:	2070      	movs	r0, #112	; 0x70
     e54:	f002 fd4e 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e58:	e000      	b.n	e5c <CONFIG_BT_RX_STACK_SIZE+0x5c4>
     e5a:	e009      	b.n	e70 <CONFIG_BT_RX_STACK_SIZE+0x5d8>
     e5c:	f002 fb98 	bl	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e60:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e64:	e79b      	b.n	d9e <CONFIG_BT_RX_STACK_SIZE+0x506>
     e66:	f240 313e 	movw	r1, #830	; 0x33e
     e6a:	2070      	movs	r0, #112	; 0x70
     e6c:	f002 fd42 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e70:	f002 fbcc 	bl	360c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     e74:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     e78:	e7e3      	b.n	e42 <CONFIG_BT_RX_STACK_SIZE+0x5aa>
     e7a:	2203      	movs	r2, #3
     e7c:	2301      	movs	r3, #1
     e7e:	4610      	mov	r0, r2
     e80:	f001 ffa4 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     e84:	b308      	cbz	r0, eca <CONFIG_BT_RX_STACK_SIZE+0x632>
     e86:	4814      	ldr	r0, [pc, #80]	; (ed8 <CONFIG_BT_RX_STACK_SIZE+0x640>)
     e88:	6880      	ldr	r0, [r0, #8]
     e8a:	f8c0 b000 	str.w	fp, [r0]
     e8e:	4813      	ldr	r0, [pc, #76]	; (edc <CONFIG_BT_RX_STACK_SIZE+0x644>)
     e90:	f8c0 b000 	str.w	fp, [r0]
     e94:	ac0c      	add	r4, sp, #48	; 0x30
     e96:	4812      	ldr	r0, [pc, #72]	; (ee0 <CONFIG_BT_RX_STACK_SIZE+0x648>)
     e98:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     e9c:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     ea0:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     ea4:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     ea8:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     eac:	ac10      	add	r4, sp, #64	; 0x40
     eae:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     eb2:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     eb6:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     eba:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     ebe:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     ec2:	b01b      	add	sp, #108	; 0x6c
     ec4:	2001      	movs	r0, #1
     ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eca:	f640 2179 	movw	r1, #2681	; 0xa79
     ece:	2070      	movs	r0, #112	; 0x70
     ed0:	f002 fd10 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ed4:	20000fc4 	.word	0x20000fc4
     ed8:	20000014 	.word	0x20000014
     edc:	40000508 	.word	0x40000508
     ee0:	20000c44 	.word	0x20000c44
     ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ee8:	4606      	mov	r6, r0
     eea:	b083      	sub	sp, #12
     eec:	7808      	ldrb	r0, [r1, #0]
     eee:	7390      	strb	r0, [r2, #14]
     ef0:	7acf      	ldrb	r7, [r1, #11]
     ef2:	7357      	strb	r7, [r2, #13]
     ef4:	7a88      	ldrb	r0, [r1, #10]
     ef6:	7310      	strb	r0, [r2, #12]
     ef8:	8908      	ldrh	r0, [r1, #8]
     efa:	4614      	mov	r4, r2
     efc:	8150      	strh	r0, [r2, #10]
     efe:	460d      	mov	r5, r1
     f00:	780a      	ldrb	r2, [r1, #0]
     f02:	495f      	ldr	r1, [pc, #380]	; (1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     f04:	4699      	mov	r9, r3
     f06:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     f0a:	424b      	negs	r3, r1
     f0c:	f1ac 0801 	sub.w	r8, ip, #1
     f10:	b15a      	cbz	r2, f2a <CONFIG_BT_RX_STACK_SIZE+0x692>
     f12:	43c0      	mvns	r0, r0
     f14:	f8d5 8004 	ldr.w	r8, [r5, #4]
     f18:	f104 0208 	add.w	r2, r4, #8
     f1c:	4288      	cmp	r0, r1
     f1e:	dd3d      	ble.n	f9c <CONFIG_BT_RX_STACK_SIZE+0x704>
     f20:	f240 610a 	movw	r1, #1546	; 0x60a
     f24:	2070      	movs	r0, #112	; 0x70
     f26:	f002 fce5 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f2a:	68ee      	ldr	r6, [r5, #12]
     f2c:	686d      	ldr	r5, [r5, #4]
     f2e:	ea6f 0900 	mvn.w	r9, r0
     f32:	f104 0208 	add.w	r2, r4, #8
     f36:	eb06 0009 	add.w	r0, r6, r9
     f3a:	4546      	cmp	r6, r8
     f3c:	d904      	bls.n	f48 <CONFIG_BT_RX_STACK_SIZE+0x6b0>
     f3e:	f240 6109 	movw	r1, #1545	; 0x609
     f42:	2070      	movs	r0, #112	; 0x70
     f44:	f002 fcd6 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f48:	4589      	cmp	r9, r1
     f4a:	dce9      	bgt.n	f20 <CONFIG_BT_RX_STACK_SIZE+0x688>
     f4c:	4599      	cmp	r9, r3
     f4e:	db28      	blt.n	fa2 <CONFIG_BT_RX_STACK_SIZE+0x70a>
     f50:	4584      	cmp	ip, r0
     f52:	bfdc      	itt	le
     f54:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f58:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f5c:	dd05      	ble.n	f6a <CONFIG_BT_RX_STACK_SIZE+0x6d2>
     f5e:	2800      	cmp	r0, #0
     f60:	bfbc      	itt	lt
     f62:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f66:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f6a:	4621      	mov	r1, r4
     f6c:	f001 fc46 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f70:	6820      	ldr	r0, [r4, #0]
     f72:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     f76:	1970      	adds	r0, r6, r5
     f78:	1c40      	adds	r0, r0, #1
     f7a:	6021      	str	r1, [r4, #0]
     f7c:	2f00      	cmp	r7, #0
     f7e:	bf08      	it	eq
     f80:	307a      	addeq	r0, #122	; 0x7a
     f82:	d003      	beq.n	f8c <CONFIG_BT_RX_STACK_SIZE+0x6f4>
     f84:	2f01      	cmp	r7, #1
     f86:	bf08      	it	eq
     f88:	3048      	addeq	r0, #72	; 0x48
     f8a:	d12d      	bne.n	fe8 <CONFIG_BT_RX_STACK_SIZE+0x750>
     f8c:	f001 fc1a 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     f90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f94:	6060      	str	r0, [r4, #4]
     f96:	b003      	add	sp, #12
     f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f9c:	4601      	mov	r1, r0
     f9e:	4298      	cmp	r0, r3
     fa0:	da04      	bge.n	fac <CONFIG_BT_RX_STACK_SIZE+0x714>
     fa2:	f240 610b 	movw	r1, #1547	; 0x60b
     fa6:	2070      	movs	r0, #112	; 0x70
     fa8:	f002 fca4 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fac:	4584      	cmp	ip, r0
     fae:	bfdc      	itt	le
     fb0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     fb4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     fb8:	dd05      	ble.n	fc6 <CONFIG_BT_RX_STACK_SIZE+0x72e>
     fba:	2800      	cmp	r0, #0
     fbc:	bfbc      	itt	lt
     fbe:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     fc2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     fc6:	4621      	mov	r1, r4
     fc8:	f001 fc18 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fcc:	6820      	ldr	r0, [r4, #0]
     fce:	2f00      	cmp	r7, #0
     fd0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fd4:	f108 0001 	add.w	r0, r8, #1
     fd8:	6021      	str	r1, [r4, #0]
     fda:	bf08      	it	eq
     fdc:	307a      	addeq	r0, #122	; 0x7a
     fde:	d008      	beq.n	ff2 <CONFIG_BT_RX_STACK_SIZE+0x75a>
     fe0:	2f01      	cmp	r7, #1
     fe2:	bf08      	it	eq
     fe4:	3048      	addeq	r0, #72	; 0x48
     fe6:	d004      	beq.n	ff2 <CONFIG_BT_RX_STACK_SIZE+0x75a>
     fe8:	f240 61b1 	movw	r1, #1713	; 0x6b1
     fec:	2070      	movs	r0, #112	; 0x70
     fee:	f002 fc81 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ff2:	f001 fbe7 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ff6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ffa:	6061      	str	r1, [r4, #4]
     ffc:	8960      	ldrh	r0, [r4, #10]
     ffe:	aa01      	add	r2, sp, #4
    1000:	4669      	mov	r1, sp
    1002:	f001 fbfb 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1006:	481f      	ldr	r0, [pc, #124]	; (1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>)
    1008:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    100c:	2920      	cmp	r1, #32
    100e:	d023      	beq.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    1010:	6900      	ldr	r0, [r0, #16]
    1012:	1d40      	adds	r0, r0, #5
    1014:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1018:	e9d4 2100 	ldrd	r2, r1, [r4]
    101c:	1a89      	subs	r1, r1, r2
    101e:	6020      	str	r0, [r4, #0]
    1020:	4408      	add	r0, r1
    1022:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1026:	6060      	str	r0, [r4, #4]
    1028:	464b      	mov	r3, r9
    102a:	4632      	mov	r2, r6
    102c:	4621      	mov	r1, r4
    102e:	68e8      	ldr	r0, [r5, #12]
    1030:	f7ff fad2 	bl	5d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1034:	2800      	cmp	r0, #0
    1036:	bf1c      	itt	ne
    1038:	b003      	addne	sp, #12
    103a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    103e:	e9d4 1000 	ldrd	r1, r0, [r4]
    1042:	1a40      	subs	r0, r0, r1
    1044:	4430      	add	r0, r6
    1046:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    104a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    104e:	e9c4 1000 	strd	r1, r0, [r4]
    1052:	b003      	add	sp, #12
    1054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1058:	8960      	ldrh	r0, [r4, #10]
    105a:	f106 0709 	add.w	r7, r6, #9
    105e:	b120      	cbz	r0, 106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    1060:	f002 fbd0 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1064:	2800      	cmp	r0, #0
    1066:	bf08      	it	eq
    1068:	3732      	addeq	r7, #50	; 0x32
    106a:	4807      	ldr	r0, [pc, #28]	; (1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>)
    106c:	7841      	ldrb	r1, [r0, #1]
    106e:	9800      	ldr	r0, [sp, #0]
    1070:	4281      	cmp	r1, r0
    1072:	bf84      	itt	hi
    1074:	1a08      	subhi	r0, r1, r0
    1076:	4407      	addhi	r7, r0
    1078:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    107c:	e7cc      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    107e:	0000      	.short	0x0000
    1080:	07a12000 	.word	0x07a12000
    1084:	20000fc4 	.word	0x20000fc4
    1088:	20000016 	.word	0x20000016
    108c:	b510      	push	{r4, lr}
    108e:	4c15      	ldr	r4, [pc, #84]	; (10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
    1090:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1094:	2820      	cmp	r0, #32
    1096:	bf18      	it	ne
    1098:	bd10      	popne	{r4, pc}
    109a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    109e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    10a2:	f890 1020 	ldrb.w	r1, [r0, #32]
    10a6:	2920      	cmp	r1, #32
    10a8:	d017      	beq.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
    10aa:	f8df c03c 	ldr.w	ip, [pc, #60]	; 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10ae:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    10b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    10b6:	785b      	ldrb	r3, [r3, #1]
    10b8:	f880 3020 	strb.w	r3, [r0, #32]
    10bc:	2301      	movs	r3, #1
    10be:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    10c2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    10c6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    10ca:	2002      	movs	r0, #2
    10cc:	f000 f8b0 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    10d0:	2000      	movs	r0, #0
    10d2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    10d6:	77a0      	strb	r0, [r4, #30]
    10d8:	bd10      	pop	{r4, pc}
    10da:	f240 318b 	movw	r1, #907	; 0x38b
    10de:	2070      	movs	r0, #112	; 0x70
    10e0:	f002 fc08 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10e4:	20000fc4 	.word	0x20000fc4
    10e8:	20000f44 	.word	0x20000f44
    10ec:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    10f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    10f4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    10f8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    10fc:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1100:	2c20      	cmp	r4, #32
    1102:	bf08      	it	eq
    1104:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1108:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    110c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 11b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b4>
    1110:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1114:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1118:	2607      	movs	r6, #7
    111a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    111e:	2801      	cmp	r0, #1
    1120:	d00e      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    1122:	2804      	cmp	r0, #4
    1124:	bf08      	it	eq
    1126:	2602      	moveq	r6, #2
    1128:	d00a      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    112a:	2805      	cmp	r0, #5
    112c:	bf0c      	ite	eq
    112e:	2603      	moveq	r6, #3
    1130:	2806      	cmpne	r0, #6
    1132:	d005      	beq.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
    1134:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1138:	f04f 0070 	mov.w	r0, #112	; 0x70
    113c:	f002 fbda 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1140:	f1bb 0f00 	cmp.w	fp, #0
    1144:	bf18      	it	ne
    1146:	f3af 8000 	nopne.w
    114a:	f3ef 8010 	mrs	r0, PRIMASK
    114e:	b672      	cpsid	i
    1150:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1154:	784a      	ldrb	r2, [r1, #1]
    1156:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    115a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    115e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1162:	42a2      	cmp	r2, r4
    1164:	bf04      	itt	eq
    1166:	2220      	moveq	r2, #32
    1168:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    116c:	b1b8      	cbz	r0, 119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
    116e:	462a      	mov	r2, r5
    1170:	4621      	mov	r1, r4
    1172:	2001      	movs	r0, #1
    1174:	f000 f85c 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1178:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    117c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1180:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1184:	6840      	ldr	r0, [r0, #4]
    1186:	4631      	mov	r1, r6
    1188:	4790      	blx	r2
    118a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    118e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1192:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1196:	2c20      	cmp	r4, #32
    1198:	d1bc      	bne.n	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
    119a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    119e:	4806      	ldr	r0, [pc, #24]	; (11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>)
    11a0:	2800      	cmp	r0, #0
    11a2:	bf18      	it	ne
    11a4:	f3af 8000 	nopne.w
    11a8:	b662      	cpsie	i
    11aa:	e7e0      	b.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    11ac:	20000fc4 	.word	0x20000fc4
    11b0:	00000000 	.word	0x00000000
    11b4:	20000f44 	.word	0x20000f44
    11b8:	00000000 	.word	0x00000000
    11bc:	b510      	push	{r4, lr}
    11be:	4604      	mov	r4, r0
    11c0:	6800      	ldr	r0, [r0, #0]
    11c2:	f00a fd44 	bl	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    11c6:	4602      	mov	r2, r0
    11c8:	8960      	ldrh	r0, [r4, #10]
    11ca:	7a21      	ldrb	r1, [r4, #8]
    11cc:	4b14      	ldr	r3, [pc, #80]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    11ce:	4408      	add	r0, r1
    11d0:	1c41      	adds	r1, r0, #1
    11d2:	1850      	adds	r0, r2, r1
    11d4:	429a      	cmp	r2, r3
    11d6:	d904      	bls.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
    11d8:	f240 6109 	movw	r1, #1545	; 0x609
    11dc:	2070      	movs	r0, #112	; 0x70
    11de:	f002 fb89 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11e2:	4a10      	ldr	r2, [pc, #64]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
    11e4:	4291      	cmp	r1, r2
    11e6:	dd04      	ble.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    11e8:	f240 610a 	movw	r1, #1546	; 0x60a
    11ec:	2070      	movs	r0, #112	; 0x70
    11ee:	f002 fb81 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11f2:	4a0d      	ldr	r2, [pc, #52]	; (1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
    11f4:	4291      	cmp	r1, r2
    11f6:	da04      	bge.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
    11f8:	f240 610b 	movw	r1, #1547	; 0x60b
    11fc:	2070      	movs	r0, #112	; 0x70
    11fe:	f002 fb79 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1202:	490a      	ldr	r1, [pc, #40]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    1204:	4281      	cmp	r1, r0
    1206:	bfde      	ittt	le
    1208:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    120c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1210:	bd10      	pople	{r4, pc}
    1212:	2800      	cmp	r0, #0
    1214:	bfbc      	itt	lt
    1216:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    121a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    121e:	bd10      	pop	{r4, pc}
    1220:	1e847fff 	.word	0x1e847fff
    1224:	07a12000 	.word	0x07a12000
    1228:	f85ee000 	.word	0xf85ee000
    122c:	1e848000 	.word	0x1e848000
    1230:	f8df c054 	ldr.w	ip, [pc, #84]	; 1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    1234:	b510      	push	{r4, lr}
    1236:	2300      	movs	r3, #0
    1238:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    123c:	2807      	cmp	r0, #7
    123e:	d21e      	bcs.n	127e <CONFIG_FPROTECT_BLOCK_SIZE+0x27e>
    1240:	e8df f000 	tbb	[pc, r0]
    1244:	05050505 	.word	0x05050505
    1248:	00040404 	.word	0x00040404
    124c:	2301      	movs	r3, #1
    124e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1252:	2b00      	cmp	r3, #0
    1254:	bf08      	it	eq
    1256:	bd10      	popeq	{r4, pc}
    1258:	480c      	ldr	r0, [pc, #48]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
    125a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    125e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1262:	2820      	cmp	r0, #32
    1264:	bf0e      	itee	eq
    1266:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    126a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    126e:	7041      	strbne	r1, [r0, #1]
    1270:	2020      	movs	r0, #32
    1272:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1276:	7058      	strb	r0, [r3, #1]
    1278:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    127c:	bd10      	pop	{r4, pc}
    127e:	f44f 7115 	mov.w	r1, #596	; 0x254
    1282:	2070      	movs	r0, #112	; 0x70
    1284:	f002 fb36 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1288:	20000f44 	.word	0x20000f44
    128c:	20000fc4 	.word	0x20000fc4
    1290:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1294:	b083      	sub	sp, #12
    1296:	485c      	ldr	r0, [pc, #368]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    1298:	9904      	ldr	r1, [sp, #16]
    129a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    129e:	9001      	str	r0, [sp, #4]
    12a0:	f890 4020 	ldrb.w	r4, [r0, #32]
    12a4:	9803      	ldr	r0, [sp, #12]
    12a6:	4625      	mov	r5, r4
    12a8:	2801      	cmp	r0, #1
    12aa:	bf18      	it	ne
    12ac:	2802      	cmpne	r0, #2
    12ae:	d005      	beq.n	12bc <CONFIG_FPROTECT_BLOCK_SIZE+0x2bc>
    12b0:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    12b4:	f04f 0070 	mov.w	r0, #112	; 0x70
    12b8:	f002 fb1c 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12bc:	2700      	movs	r7, #0
    12be:	2d20      	cmp	r5, #32
    12c0:	d04a      	beq.n	1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
    12c2:	4851      	ldr	r0, [pc, #324]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    12c4:	9100      	str	r1, [sp, #0]
    12c6:	2600      	movs	r6, #0
    12c8:	7f80      	ldrb	r0, [r0, #30]
    12ca:	2800      	cmp	r0, #0
    12cc:	bf08      	it	eq
    12ce:	2602      	moveq	r6, #2
    12d0:	f001 fbf2 	bl	2ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    12d4:	f8df a138 	ldr.w	sl, [pc, #312]	; 1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>
    12d8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    12dc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    12e0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>
    12e4:	688a      	ldr	r2, [r1, #8]
    12e6:	68c9      	ldr	r1, [r1, #12]
    12e8:	1a12      	subs	r2, r2, r0
    12ea:	1a09      	subs	r1, r1, r0
    12ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    12f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    12f4:	4296      	cmp	r6, r2
    12f6:	bf98      	it	ls
    12f8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    12fc:	d201      	bcs.n	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
    12fe:	4589      	cmp	r9, r1
    1300:	d228      	bcs.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    1302:	4a44      	ldr	r2, [pc, #272]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    1304:	9900      	ldr	r1, [sp, #0]
    1306:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    130a:	4622      	mov	r2, r4
    130c:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1310:	784c      	ldrb	r4, [r1, #1]
    1312:	2c20      	cmp	r4, #32
    1314:	d016      	beq.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    1316:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    131a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    131e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1322:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1326:	eba8 0800 	sub.w	r8, r8, r0
    132a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    132e:	ebac 0100 	sub.w	r1, ip, r0
    1332:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1336:	4546      	cmp	r6, r8
    1338:	bf98      	it	ls
    133a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    133e:	d2e4      	bcs.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
    1340:	4589      	cmp	r9, r1
    1342:	d3e2      	bcc.n	130a <CONFIG_FPROTECT_BLOCK_SIZE+0x30a>
    1344:	2a20      	cmp	r2, #32
    1346:	d005      	beq.n	1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>
    1348:	2120      	movs	r1, #32
    134a:	2004      	movs	r0, #4
    134c:	9b00      	ldr	r3, [sp, #0]
    134e:	f7ff f907 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1352:	4604      	mov	r4, r0
    1354:	42ac      	cmp	r4, r5
    1356:	d115      	bne.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1358:	482f      	ldr	r0, [pc, #188]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    135a:	2800      	cmp	r0, #0
    135c:	bf18      	it	ne
    135e:	f3af 8000 	nopne.w
    1362:	f001 fba9 	bl	2ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1366:	4c28      	ldr	r4, [pc, #160]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    1368:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    136c:	2920      	cmp	r1, #32
    136e:	d00d      	beq.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1370:	68e1      	ldr	r1, [r4, #12]
    1372:	1c82      	adds	r2, r0, #2
    1374:	1a51      	subs	r1, r2, r1
    1376:	0209      	lsls	r1, r1, #8
    1378:	17ca      	asrs	r2, r1, #31
    137a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    137e:	1209      	asrs	r1, r1, #8
    1380:	2900      	cmp	r1, #0
    1382:	dd03      	ble.n	138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>
    1384:	b005      	add	sp, #20
    1386:	2000      	movs	r0, #0
    1388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    138c:	2d20      	cmp	r5, #32
    138e:	d00d      	beq.n	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
    1390:	462a      	mov	r2, r5
    1392:	9903      	ldr	r1, [sp, #12]
    1394:	f7ff fb1c 	bl	9d0 <CONFIG_BT_RX_STACK_SIZE+0x138>
    1398:	b358      	cbz	r0, 13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    139a:	9801      	ldr	r0, [sp, #4]
    139c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    13a0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    13a4:	b005      	add	sp, #20
    13a6:	2001      	movs	r0, #1
    13a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    13b0:	b118      	cbz	r0, 13ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32>
    13b2:	f002 f8d1 	bl	3558 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    13b6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    13ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    13be:	b150      	cbz	r0, 13d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e>
    13c0:	4916      	ldr	r1, [pc, #88]	; (141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>)
    13c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    13c6:	6008      	str	r0, [r1, #0]
    13c8:	2005      	movs	r0, #5
    13ca:	f001 fdd3 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13ce:	f002 f92b 	bl	3628 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    13d2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    13d6:	2004      	movs	r0, #4
    13d8:	f001 fdcc 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13dc:	f001 fe38 	bl	3050 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    13e0:	2020      	movs	r0, #32
    13e2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    13e6:	480e      	ldr	r0, [pc, #56]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    13e8:	6880      	ldr	r0, [r0, #8]
    13ea:	6007      	str	r7, [r0, #0]
    13ec:	480d      	ldr	r0, [pc, #52]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    13ee:	6007      	str	r7, [r0, #0]
    13f0:	e7d8      	b.n	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
    13f2:	462a      	mov	r2, r5
    13f4:	2120      	movs	r1, #32
    13f6:	2004      	movs	r0, #4
    13f8:	9b04      	ldr	r3, [sp, #16]
    13fa:	f7ff f8b1 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    13fe:	b005      	add	sp, #20
    1400:	2000      	movs	r0, #0
    1402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1406:	0000      	.short	0x0000
    1408:	20000fc4 	.word	0x20000fc4
    140c:	003fffff 	.word	0x003fffff
    1410:	20000c44 	.word	0x20000c44
    1414:	20000f44 	.word	0x20000f44
    1418:	00000000 	.word	0x00000000
    141c:	4001f508 	.word	0x4001f508
    1420:	20000014 	.word	0x20000014
    1424:	40000508 	.word	0x40000508

00001428 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1428:	4906      	ldr	r1, [pc, #24]	; (1444 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    142a:	b510      	push	{r4, lr}
    142c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1430:	2a20      	cmp	r2, #32
    1432:	bf1c      	itt	ne
    1434:	7788      	strbne	r0, [r1, #30]
    1436:	bd10      	popne	{r4, pc}
    1438:	f240 31ea 	movw	r1, #1002	; 0x3ea
    143c:	2070      	movs	r0, #112	; 0x70
    143e:	f002 fa59 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1442:	0000      	.short	0x0000
    1444:	20000fc4 	.word	0x20000fc4

00001448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    144c:	4e5b      	ldr	r6, [pc, #364]	; (15bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    144e:	4681      	mov	r9, r0
    1450:	b085      	sub	sp, #20
    1452:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1456:	468a      	mov	sl, r1
    1458:	2820      	cmp	r0, #32
    145a:	d04d      	beq.n	14f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    145c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1460:	f106 040c 	add.w	r4, r6, #12
    1464:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1468:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    146c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1470:	2020      	movs	r0, #32
    1472:	f88d 0000 	strb.w	r0, [sp]
    1476:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    147a:	aa03      	add	r2, sp, #12
    147c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1480:	a901      	add	r1, sp, #4
    1482:	f890 5020 	ldrb.w	r5, [r0, #32]
    1486:	6930      	ldr	r0, [r6, #16]
    1488:	9002      	str	r0, [sp, #8]
    148a:	6830      	ldr	r0, [r6, #0]
    148c:	4448      	add	r0, r9
    148e:	f001 f9b5 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1492:	68f8      	ldr	r0, [r7, #12]
    1494:	9901      	ldr	r1, [sp, #4]
    1496:	4a4a      	ldr	r2, [pc, #296]	; (15c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    1498:	4408      	add	r0, r1
    149a:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    149e:	4291      	cmp	r1, r2
    14a0:	d82f      	bhi.n	1502 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14a2:	68b9      	ldr	r1, [r7, #8]
    14a4:	1a41      	subs	r1, r0, r1
    14a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    14aa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    14ae:	d228      	bcs.n	1502 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14b4:	6060      	str	r0, [r4, #4]
    14b6:	4630      	mov	r0, r6
    14b8:	f884 a00c 	strb.w	sl, [r4, #12]
    14bc:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    14c0:	46ea      	mov	sl, sp
    14c2:	2d20      	cmp	r5, #32
    14c4:	bf1c      	itt	ne
    14c6:	493f      	ldrne	r1, [pc, #252]	; (15c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14c8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    14cc:	d03c      	beq.n	1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14ce:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    14d2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    14d6:	6860      	ldr	r0, [r4, #4]
    14d8:	68ba      	ldr	r2, [r7, #8]
    14da:	4621      	mov	r1, r4
    14dc:	1a10      	subs	r0, r2, r0
    14de:	0200      	lsls	r0, r0, #8
    14e0:	17c2      	asrs	r2, r0, #31
    14e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    14e6:	f107 0608 	add.w	r6, r7, #8
    14ea:	1200      	asrs	r0, r0, #8
    14ec:	d41b      	bmi.n	1526 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    14ee:	8970      	ldrh	r0, [r6, #10]
    14f0:	b350      	cbz	r0, 1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14f2:	8948      	ldrh	r0, [r1, #10]
    14f4:	b148      	cbz	r0, 150a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    14f6:	e027      	b.n	1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14f8:	f640 317b 	movw	r1, #2939	; 0xb7b
    14fc:	2070      	movs	r0, #112	; 0x70
    14fe:	f002 f9f9 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1502:	b005      	add	sp, #20
    1504:	2001      	movs	r0, #1
    1506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    150a:	4620      	mov	r0, r4
    150c:	f7ff fe56 	bl	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    1510:	f001 f958 	bl	27c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1514:	6831      	ldr	r1, [r6, #0]
    1516:	1a08      	subs	r0, r1, r0
    1518:	0200      	lsls	r0, r0, #8
    151a:	17c1      	asrs	r1, r0, #31
    151c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1520:	1200      	asrs	r0, r0, #8
    1522:	2833      	cmp	r0, #51	; 0x33
    1524:	da10      	bge.n	1548 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1526:	f88a 5000 	strb.w	r5, [sl]
    152a:	7d39      	ldrb	r1, [r7, #20]
    152c:	7b20      	ldrb	r0, [r4, #12]
    152e:	4281      	cmp	r1, r0
    1530:	d805      	bhi.n	153e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1532:	9802      	ldr	r0, [sp, #8]
    1534:	6060      	str	r0, [r4, #4]
    1536:	b005      	add	sp, #20
    1538:	2002      	movs	r0, #2
    153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    153e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1542:	7845      	ldrb	r5, [r0, #1]
    1544:	2d20      	cmp	r5, #32
    1546:	d1c2      	bne.n	14ce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1548:	2005      	movs	r0, #5
    154a:	f001 fd13 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    154e:	4c1b      	ldr	r4, [pc, #108]	; (15bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1554:	60a0      	str	r0, [r4, #8]
    1556:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    155a:	f89d 2000 	ldrb.w	r2, [sp]
    155e:	2120      	movs	r1, #32
    1560:	2a20      	cmp	r2, #32
    1562:	bf13      	iteet	ne
    1564:	2005      	movne	r0, #5
    1566:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    156a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    156e:	f7fe fff7 	blne	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1572:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1576:	4913      	ldr	r1, [pc, #76]	; (15c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    1578:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    157c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1580:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1584:	7048      	strb	r0, [r1, #1]
    1586:	6820      	ldr	r0, [r4, #0]
    1588:	4448      	add	r0, r9
    158a:	6020      	str	r0, [r4, #0]
    158c:	2001      	movs	r0, #1
    158e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1592:	7e60      	ldrb	r0, [r4, #25]
    1594:	2801      	cmp	r0, #1
    1596:	d105      	bne.n	15a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    1598:	6920      	ldr	r0, [r4, #16]
    159a:	1e40      	subs	r0, r0, #1
    159c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15a0:	f001 fb2e 	bl	2c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    15a4:	f89d 0000 	ldrb.w	r0, [sp]
    15a8:	2820      	cmp	r0, #32
    15aa:	d003      	beq.n	15b4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    15ac:	4806      	ldr	r0, [pc, #24]	; (15c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    15ae:	7840      	ldrb	r0, [r0, #1]
    15b0:	f002 fa70 	bl	3a94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    15b4:	b005      	add	sp, #20
    15b6:	2000      	movs	r0, #0
    15b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15bc:	20000fc4 	.word	0x20000fc4
    15c0:	07a11f9b 	.word	0x07a11f9b
    15c4:	20000f44 	.word	0x20000f44
    15c8:	20000014 	.word	0x20000014

000015cc <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    15cc:	4806      	ldr	r0, [pc, #24]	; (15e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    15ce:	b510      	push	{r4, lr}
    15d0:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    15d4:	2920      	cmp	r1, #32
    15d6:	bf1c      	itt	ne
    15d8:	7e00      	ldrbne	r0, [r0, #24]
    15da:	bd10      	popne	{r4, pc}
    15dc:	f640 3174 	movw	r1, #2932	; 0xb74
    15e0:	2070      	movs	r0, #112	; 0x70
    15e2:	f002 f987 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e6:	0000      	.short	0x0000
    15e8:	20000fc4 	.word	0x20000fc4

000015ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    15ec:	4602      	mov	r2, r0
    15ee:	4b14      	ldr	r3, [pc, #80]	; (1640 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    15f0:	b510      	push	{r4, lr}
    15f2:	4408      	add	r0, r1
    15f4:	429a      	cmp	r2, r3
    15f6:	d904      	bls.n	1602 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    15f8:	f240 6109 	movw	r1, #1545	; 0x609
    15fc:	2070      	movs	r0, #112	; 0x70
    15fe:	f002 f979 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1602:	4a10      	ldr	r2, [pc, #64]	; (1644 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1604:	4291      	cmp	r1, r2
    1606:	dd04      	ble.n	1612 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1608:	f240 610a 	movw	r1, #1546	; 0x60a
    160c:	2070      	movs	r0, #112	; 0x70
    160e:	f002 f971 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1612:	4a0d      	ldr	r2, [pc, #52]	; (1648 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1614:	4291      	cmp	r1, r2
    1616:	da04      	bge.n	1622 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1618:	f240 610b 	movw	r1, #1547	; 0x60b
    161c:	2070      	movs	r0, #112	; 0x70
    161e:	f002 f969 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1622:	490a      	ldr	r1, [pc, #40]	; (164c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1624:	4281      	cmp	r1, r0
    1626:	bfde      	ittt	le
    1628:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    162c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1630:	bd10      	pople	{r4, pc}
    1632:	2800      	cmp	r0, #0
    1634:	bfbc      	itt	lt
    1636:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    163a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    163e:	bd10      	pop	{r4, pc}
    1640:	1e847fff 	.word	0x1e847fff
    1644:	07a12000 	.word	0x07a12000
    1648:	f85ee000 	.word	0xf85ee000
    164c:	1e848000 	.word	0x1e848000

00001650 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1650:	4a10      	ldr	r2, [pc, #64]	; (1694 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1652:	1a0b      	subs	r3, r1, r0
    1654:	f102 0c01 	add.w	ip, r2, #1
    1658:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    165c:	bf3c      	itt	cc
    165e:	4618      	movcc	r0, r3
    1660:	4770      	bxcc	lr
    1662:	b510      	push	{r4, lr}
    1664:	1a44      	subs	r4, r0, r1
    1666:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    166a:	bf3c      	itt	cc
    166c:	4618      	movcc	r0, r3
    166e:	bd10      	popcc	{r4, pc}
    1670:	429a      	cmp	r2, r3
    1672:	d203      	bcs.n	167c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1674:	1a10      	subs	r0, r2, r0
    1676:	4408      	add	r0, r1
    1678:	1c40      	adds	r0, r0, #1
    167a:	bd10      	pop	{r4, pc}
    167c:	42a2      	cmp	r2, r4
    167e:	d204      	bcs.n	168a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1680:	1a51      	subs	r1, r2, r1
    1682:	4408      	add	r0, r1
    1684:	1c40      	adds	r0, r0, #1
    1686:	4240      	negs	r0, r0
    1688:	bd10      	pop	{r4, pc}
    168a:	f640 310c 	movw	r1, #2828	; 0xb0c
    168e:	2070      	movs	r0, #112	; 0x70
    1690:	f002 f930 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1694:	1e847fff 	.word	0x1e847fff

00001698 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    1698:	4907      	ldr	r1, [pc, #28]	; (16b8 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    169a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    169e:	4282      	cmp	r2, r0
    16a0:	bf04      	itt	eq
    16a2:	6848      	ldreq	r0, [r1, #4]
    16a4:	4770      	bxeq	lr
    16a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16aa:	4904      	ldr	r1, [pc, #16]	; (16bc <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    16ac:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    16b0:	3008      	adds	r0, #8
    16b2:	f7ff bd83 	b.w	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    16b6:	0000      	.short	0x0000
    16b8:	20000fc4 	.word	0x20000fc4
    16bc:	20000c44 	.word	0x20000c44

000016c0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    16c0:	490e      	ldr	r1, [pc, #56]	; (16fc <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    16c2:	b510      	push	{r4, lr}
    16c4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16c8:	2820      	cmp	r0, #32
    16ca:	d012      	beq.n	16f2 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    16cc:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    16d0:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    16d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16d8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    16dc:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    16e0:	6840      	ldr	r0, [r0, #4]
    16e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16e6:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    16ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16ee:	2104      	movs	r1, #4
    16f0:	4710      	bx	r2
    16f2:	f640 01bc 	movw	r1, #2236	; 0x8bc
    16f6:	2070      	movs	r0, #112	; 0x70
    16f8:	f002 f8fc 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16fc:	20000fc4 	.word	0x20000fc4

00001700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    1700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1702:	4d6d      	ldr	r5, [pc, #436]	; (18b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    1704:	496d      	ldr	r1, [pc, #436]	; (18bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1706:	2601      	movs	r6, #1
    1708:	f505 7460 	add.w	r4, r5, #896	; 0x380
    170c:	2808      	cmp	r0, #8
    170e:	d273      	bcs.n	17f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    1710:	e8df f000 	tbb	[pc, r0]
    1714:	af9d6704 	.word	0xaf9d6704
    1718:	b9b444cd 	.word	0xb9b444cd
    171c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1720:	b918      	cbnz	r0, 172a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    1722:	f001 ff35 	bl	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1726:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    172a:	8ae0      	ldrh	r0, [r4, #22]
    172c:	b110      	cbz	r0, 1734 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    172e:	f002 f869 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1732:	b188      	cbz	r0, 1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1734:	f7ff fcaa 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    1738:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    173c:	68a1      	ldr	r1, [r4, #8]
    173e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    1742:	d005      	beq.n	1750 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1744:	2301      	movs	r3, #1
    1746:	2203      	movs	r2, #3
    1748:	2005      	movs	r0, #5
    174a:	f001 fb3f 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    174e:	b140      	cbz	r0, 1762 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1750:	7e60      	ldrb	r0, [r4, #25]
    1752:	2801      	cmp	r0, #1
    1754:	d110      	bne.n	1778 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    1756:	e009      	b.n	176c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1758:	f44f 6107 	mov.w	r1, #2160	; 0x870
    175c:	2070      	movs	r0, #112	; 0x70
    175e:	f002 f8c9 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1762:	f640 0175 	movw	r1, #2165	; 0x875
    1766:	2070      	movs	r0, #112	; 0x70
    1768:	f002 f8c4 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    176c:	6920      	ldr	r0, [r4, #16]
    176e:	1e40      	subs	r0, r0, #1
    1770:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1774:	f001 fa44 	bl	2c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1778:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    177c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1780:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1784:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1788:	6840      	ldr	r0, [r0, #4]
    178a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    178e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1792:	b001      	add	sp, #4
    1794:	2101      	movs	r1, #1
    1796:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    179a:	4710      	bx	r2
    179c:	f7ff fc76 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    17a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    17a4:	60a0      	str	r0, [r4, #8]
    17a6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    17aa:	f88d 0000 	strb.w	r0, [sp]
    17ae:	f89d 0000 	ldrb.w	r0, [sp]
    17b2:	b188      	cbz	r0, 17d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    17b4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    17b8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    17bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    17c0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    17c4:	6840      	ldr	r0, [r0, #4]
    17c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17ca:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    17ce:	b001      	add	sp, #4
    17d0:	2106      	movs	r1, #6
    17d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    17d6:	4710      	bx	r2
    17d8:	f640 0186 	movw	r1, #2182	; 0x886
    17dc:	2070      	movs	r0, #112	; 0x70
    17de:	f002 f889 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17e2:	f7ff fc53 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    17e6:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    17ea:	f002 f80b 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17ee:	b120      	cbz	r0, 17fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    17f0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    17f4:	b130      	cbz	r0, 1804 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    17f6:	e009      	b.n	180c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    17f8:	e059      	b.n	18ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    17fa:	f640 0196 	movw	r1, #2198	; 0x896
    17fe:	2070      	movs	r0, #112	; 0x70
    1800:	f002 f878 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1804:	f001 fec4 	bl	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1808:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    180c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1810:	b158      	cbz	r0, 182a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    1812:	492b      	ldr	r1, [pc, #172]	; (18c0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    1814:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1818:	6008      	str	r0, [r1, #0]
    181a:	2005      	movs	r0, #5
    181c:	f001 fbaa 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1820:	f001 ff02 	bl	3628 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1824:	2000      	movs	r0, #0
    1826:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    182a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    182e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1832:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1836:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    183a:	6840      	ldr	r0, [r0, #4]
    183c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1840:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1844:	b001      	add	sp, #4
    1846:	2100      	movs	r1, #0
    1848:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    184c:	4710      	bx	r2
    184e:	f001 fc49 	bl	30e4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1852:	8ae0      	ldrh	r0, [r4, #22]
    1854:	b110      	cbz	r0, 185c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    1856:	f001 ffd5 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    185a:	b128      	cbz	r0, 1868 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    185c:	4819      	ldr	r0, [pc, #100]	; (18c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    185e:	7800      	ldrb	r0, [r0, #0]
    1860:	2803      	cmp	r0, #3
    1862:	bf08      	it	eq
    1864:	7766      	strbeq	r6, [r4, #29]
    1866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1868:	f640 01a1 	movw	r1, #2209	; 0x8a1
    186c:	2070      	movs	r0, #112	; 0x70
    186e:	f002 f841 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1872:	4815      	ldr	r0, [pc, #84]	; (18c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1874:	6006      	str	r6, [r0, #0]
    1876:	6888      	ldr	r0, [r1, #8]
    1878:	6006      	str	r6, [r0, #0]
    187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    187c:	7808      	ldrb	r0, [r1, #0]
    187e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1882:	f002 b907 	b.w	3a94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1886:	f7ff fc01 	bl	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
    188a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    188e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1892:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1896:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    189a:	6840      	ldr	r0, [r0, #4]
    189c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    18a0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    18a4:	b001      	add	sp, #4
    18a6:	2105      	movs	r1, #5
    18a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    18ac:	4710      	bx	r2
    18ae:	f640 01b4 	movw	r1, #2228	; 0x8b4
    18b2:	2070      	movs	r0, #112	; 0x70
    18b4:	f002 f81e 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18b8:	20000c44 	.word	0x20000c44
    18bc:	20000014 	.word	0x20000014
    18c0:	4001f508 	.word	0x4001f508
    18c4:	20000016 	.word	0x20000016
    18c8:	40000508 	.word	0x40000508

000018cc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    18cc:	4803      	ldr	r0, [pc, #12]	; (18dc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    18ce:	b510      	push	{r4, lr}
    18d0:	7840      	ldrb	r0, [r0, #1]
    18d2:	f00a f9bc 	bl	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    18d6:	b280      	uxth	r0, r0
    18d8:	bd10      	pop	{r4, pc}
    18da:	0000      	.short	0x0000
    18dc:	20000016 	.word	0x20000016

000018e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    18e0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18e4:	4682      	mov	sl, r0
    18e6:	48dc      	ldr	r0, [pc, #880]	; (1c58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    18e8:	b08b      	sub	sp, #44	; 0x2c
    18ea:	6800      	ldr	r0, [r0, #0]
    18ec:	4ddb      	ldr	r5, [pc, #876]	; (1c5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    18ee:	05c0      	lsls	r0, r0, #23
    18f0:	0dc0      	lsrs	r0, r0, #23
    18f2:	d00e      	beq.n	1912 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    18f4:	3810      	subs	r0, #16
    18f6:	b240      	sxtb	r0, r0
    18f8:	2800      	cmp	r0, #0
    18fa:	bfb8      	it	lt
    18fc:	f000 000f 	andlt.w	r0, r0, #15
    1900:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1904:	bfac      	ite	ge
    1906:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    190a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    190e:	0940      	lsrs	r0, r0, #5
    1910:	d00d      	beq.n	192e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    1912:	980c      	ldr	r0, [sp, #48]	; 0x30
    1914:	f04f 0b00 	mov.w	fp, #0
    1918:	7800      	ldrb	r0, [r0, #0]
    191a:	2800      	cmp	r0, #0
    191c:	bf18      	it	ne
    191e:	2801      	cmpne	r0, #1
    1920:	d018      	beq.n	1954 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1922:	f240 714f 	movw	r1, #1871	; 0x74f
    1926:	f04f 0070 	mov.w	r0, #112	; 0x70
    192a:	f001 ffe3 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    192e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1932:	f04f 0b01 	mov.w	fp, #1
    1936:	2820      	cmp	r0, #32
    1938:	d007      	beq.n	194a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    193a:	980c      	ldr	r0, [sp, #48]	; 0x30
    193c:	7800      	ldrb	r0, [r0, #0]
    193e:	b148      	cbz	r0, 1954 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1940:	f240 714b 	movw	r1, #1867	; 0x74b
    1944:	2070      	movs	r0, #112	; 0x70
    1946:	f001 ffd5 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    194a:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    194e:	2070      	movs	r0, #112	; 0x70
    1950:	f001 ffd0 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1954:	4cc2      	ldr	r4, [pc, #776]	; (1c60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    1956:	b124      	cbz	r4, 1962 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1958:	2100      	movs	r1, #0
    195a:	f240 7052 	movw	r0, #1874	; 0x752
    195e:	f3af 8000 	nop.w
    1962:	49c0      	ldr	r1, [pc, #768]	; (1c64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    1964:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    1968:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    196c:	f04f 0801 	mov.w	r8, #1
    1970:	9000      	str	r0, [sp, #0]
    1972:	b124      	cbz	r4, 197e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1974:	2100      	movs	r1, #0
    1976:	f240 705a 	movw	r0, #1882	; 0x75a
    197a:	f3af 8000 	nop.w
    197e:	f1b8 0f00 	cmp.w	r8, #0
    1982:	d009      	beq.n	1998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1984:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1988:	f04f 0900 	mov.w	r9, #0
    198c:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1990:	f1bb 0f00 	cmp.w	fp, #0
    1994:	d007      	beq.n	19a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    1996:	e032      	b.n	19fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    1998:	48b3      	ldr	r0, [pc, #716]	; (1c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    199a:	2800      	cmp	r0, #0
    199c:	bf18      	it	ne
    199e:	f3af 8000 	nopne.w
    19a2:	b662      	cpsie	i
    19a4:	e7ee      	b.n	1984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    19a6:	4637      	mov	r7, r6
    19a8:	2001      	movs	r0, #1
    19aa:	ea20 0607 	bic.w	r6, r0, r7
    19ae:	48af      	ldr	r0, [pc, #700]	; (1c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    19b0:	2240      	movs	r2, #64	; 0x40
    19b2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    19b6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    19ba:	f00a fab6 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    19be:	b124      	cbz	r4, 19ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    19c0:	2100      	movs	r1, #0
    19c2:	f240 50cd 	movw	r0, #1485	; 0x5cd
    19c6:	f3af 8000 	nop.w
    19ca:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    19ce:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    19d2:	6a09      	ldr	r1, [r1, #32]
    19d4:	6201      	str	r1, [r0, #32]
    19d6:	b124      	cbz	r4, 19e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    19d8:	2100      	movs	r1, #0
    19da:	f240 50d1 	movw	r0, #1489	; 0x5d1
    19de:	f3af 8000 	nop.w
    19e2:	b124      	cbz	r4, 19ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    19e4:	2100      	movs	r1, #0
    19e6:	f240 7064 	movw	r0, #1892	; 0x764
    19ea:	f3af 8000 	nop.w
    19ee:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19f2:	f88d 0004 	strb.w	r0, [sp, #4]
    19f6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    19fa:	2800      	cmp	r0, #0
    19fc:	d1b9      	bne.n	1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    19fe:	b124      	cbz	r4, 1a0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    1a00:	2100      	movs	r1, #0
    1a02:	f240 706e 	movw	r0, #1902	; 0x76e
    1a06:	f3af 8000 	nop.w
    1a0a:	f001 f855 	bl	2ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a0e:	4680      	mov	r8, r0
    1a10:	4633      	mov	r3, r6
    1a12:	aa06      	add	r2, sp, #24
    1a14:	990c      	ldr	r1, [sp, #48]	; 0x30
    1a16:	f7ff fa65 	bl	ee4 <CONFIG_BT_RX_STACK_SIZE+0x64c>
    1a1a:	b124      	cbz	r4, 1a26 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1a1c:	2100      	movs	r1, #0
    1a1e:	f240 7075 	movw	r0, #1909	; 0x775
    1a22:	f3af 8000 	nop.w
    1a26:	4991      	ldr	r1, [pc, #580]	; (1c6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1a28:	a806      	add	r0, sp, #24
    1a2a:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1a2e:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1a32:	2901      	cmp	r1, #1
    1a34:	bf18      	it	ne
    1a36:	2902      	cmpne	r1, #2
    1a38:	d13c      	bne.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a3a:	9906      	ldr	r1, [sp, #24]
    1a3c:	9b07      	ldr	r3, [sp, #28]
    1a3e:	eba1 0108 	sub.w	r1, r1, r8
    1a42:	4a8b      	ldr	r2, [pc, #556]	; (1c70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1a44:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1a48:	eba3 0308 	sub.w	r3, r3, r8
    1a4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1a50:	2902      	cmp	r1, #2
    1a52:	d371      	bcc.n	1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a54:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1a58:	d26e      	bcs.n	1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a5a:	429a      	cmp	r2, r3
    1a5c:	d36c      	bcc.n	1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a5e:	f04f 0901 	mov.w	r9, #1
    1a62:	ab01      	add	r3, sp, #4
    1a64:	aa05      	add	r2, sp, #20
    1a66:	4631      	mov	r1, r6
    1a68:	f7fe ff32 	bl	8d0 <CONFIG_BT_RX_STACK_SIZE+0x38>
    1a6c:	2800      	cmp	r0, #0
    1a6e:	d06b      	beq.n	1b48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1a70:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1a74:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1a78:	4633      	mov	r3, r6
    1a7a:	428a      	cmp	r2, r1
    1a7c:	d068      	beq.n	1b50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1a7e:	2005      	movs	r0, #5
    1a80:	f7fe fd6e 	bl	560 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1a84:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1a88:	7048      	strb	r0, [r1, #1]
    1a8a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1a8e:	2820      	cmp	r0, #32
    1a90:	bf03      	ittte	eq
    1a92:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a96:	f880 a020 	strbeq.w	sl, [r0, #32]
    1a9a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1a9e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1aa2:	bf18      	it	ne
    1aa4:	f880 a001 	strbne.w	sl, [r0, #1]
    1aa8:	4632      	mov	r2, r6
    1aaa:	4651      	mov	r1, sl
    1aac:	f05f 0003 	movs.w	r0, #3
    1ab0:	f7ff fbbe 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1ab4:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1ab8:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1abc:	f88d 0004 	strb.w	r0, [sp, #4]
    1ac0:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1ac4:	b124      	cbz	r4, 1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1ac6:	2100      	movs	r1, #0
    1ac8:	f240 707c 	movw	r0, #1916	; 0x77c
    1acc:	f3af 8000 	nop.w
    1ad0:	4868      	ldr	r0, [pc, #416]	; (1c74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1ad2:	2800      	cmp	r0, #0
    1ad4:	bf18      	it	ne
    1ad6:	f3af 8000 	nopne.w
    1ada:	f3ef 8810 	mrs	r8, PRIMASK
    1ade:	b672      	cpsid	i
    1ae0:	b124      	cbz	r4, 1aec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1ae2:	2100      	movs	r1, #0
    1ae4:	f240 7082 	movw	r0, #1922	; 0x782
    1ae8:	f3af 8000 	nop.w
    1aec:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1af0:	f88d 0004 	strb.w	r0, [sp, #4]
    1af4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1af8:	2800      	cmp	r0, #0
    1afa:	f47f af3a 	bne.w	1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1afe:	b124      	cbz	r4, 1b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1b00:	2100      	movs	r1, #0
    1b02:	f240 708a 	movw	r0, #1930	; 0x78a
    1b06:	f3af 8000 	nop.w
    1b0a:	f10d 0e18 	add.w	lr, sp, #24
    1b0e:	9800      	ldr	r0, [sp, #0]
    1b10:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1b14:	f100 0008 	add.w	r0, r0, #8
    1b18:	f1b9 0f00 	cmp.w	r9, #0
    1b1c:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1b20:	d044      	beq.n	1bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1b22:	b124      	cbz	r4, 1b2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1b24:	2100      	movs	r1, #0
    1b26:	f240 7097 	movw	r0, #1943	; 0x797
    1b2a:	f3af 8000 	nop.w
    1b2e:	f1bb 0f00 	cmp.w	fp, #0
    1b32:	d12c      	bne.n	1b8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b34:	e016      	b.n	1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1b36:	e7ff      	b.n	1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b38:	4632      	mov	r2, r6
    1b3a:	4651      	mov	r1, sl
    1b3c:	2004      	movs	r0, #4
    1b3e:	f7ff fb77 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1b42:	f04f 0901 	mov.w	r9, #1
    1b46:	e7b5      	b.n	1ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1b48:	4632      	mov	r2, r6
    1b4a:	4651      	mov	r1, sl
    1b4c:	2004      	movs	r0, #4
    1b4e:	e7af      	b.n	1ab0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1b50:	2920      	cmp	r1, #32
    1b52:	bf19      	ittee	ne
    1b54:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1b58:	7840      	ldrbne	r0, [r0, #1]
    1b5a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1b5e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1b62:	e78f      	b.n	1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1b64:	b19f      	cbz	r7, 1b8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b66:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1b6a:	2820      	cmp	r0, #32
    1b6c:	d10f      	bne.n	1b8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b6e:	b124      	cbz	r4, 1b7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1b70:	2100      	movs	r1, #0
    1b72:	f240 709c 	movw	r0, #1948	; 0x79c
    1b76:	f3af 8000 	nop.w
    1b7a:	4631      	mov	r1, r6
    1b7c:	2002      	movs	r0, #2
    1b7e:	f7ff fb87 	bl	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    1b82:	b920      	cbnz	r0, 1b8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1b84:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b86:	7800      	ldrb	r0, [r0, #0]
    1b88:	b3f0      	cbz	r0, 1c08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1b8a:	2801      	cmp	r0, #1
    1b8c:	d04c      	beq.n	1c28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1b8e:	b124      	cbz	r4, 1b9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1b90:	2100      	movs	r1, #0
    1b92:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1b96:	f3af 8000 	nop.w
    1b9a:	f1bb 0f00 	cmp.w	fp, #0
    1b9e:	bf18      	it	ne
    1ba0:	2001      	movne	r0, #1
    1ba2:	d04a      	beq.n	1c3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1ba4:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1ba8:	f04f 0901 	mov.w	r9, #1
    1bac:	b124      	cbz	r4, 1bb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1bae:	2100      	movs	r1, #0
    1bb0:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1bb4:	f3af 8000 	nop.w
    1bb8:	f1b8 0f00 	cmp.w	r8, #0
    1bbc:	d045      	beq.n	1c4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1bbe:	b124      	cbz	r4, 1bca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1bc0:	2100      	movs	r1, #0
    1bc2:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1bc6:	f3af 8000 	nop.w
    1bca:	f1b9 0f00 	cmp.w	r9, #0
    1bce:	d011      	beq.n	1bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1bd0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1bd4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1bd8:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1bdc:	2820      	cmp	r0, #32
    1bde:	d009      	beq.n	1bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1be0:	b124      	cbz	r4, 1bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1be2:	2100      	movs	r1, #0
    1be4:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1be8:	f3af 8000 	nop.w
    1bec:	4822      	ldr	r0, [pc, #136]	; (1c78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1bee:	7840      	ldrb	r0, [r0, #1]
    1bf0:	f001 ff50 	bl	3a94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1bf4:	b124      	cbz	r4, 1c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1bf6:	2100      	movs	r1, #0
    1bf8:	f240 70da 	movw	r0, #2010	; 0x7da
    1bfc:	f3af 8000 	nop.w
    1c00:	b00d      	add	sp, #52	; 0x34
    1c02:	4648      	mov	r0, r9
    1c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c08:	e7ff      	b.n	1c0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1c0a:	b124      	cbz	r4, 1c16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1c0c:	2100      	movs	r1, #0
    1c0e:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1c12:	f3af 8000 	nop.w
    1c16:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1c1a:	4651      	mov	r1, sl
    1c1c:	2004      	movs	r0, #4
    1c1e:	f7ff fb07 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1c22:	f04f 0901 	mov.w	r9, #1
    1c26:	e7c1      	b.n	1bac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1c28:	2c00      	cmp	r4, #0
    1c2a:	f43f aea2 	beq.w	1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c2e:	2100      	movs	r1, #0
    1c30:	f240 70af 	movw	r0, #1967	; 0x7af
    1c34:	f3af 8000 	nop.w
    1c38:	e69b      	b.n	1972 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1c3a:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1c3e:	2001      	movs	r0, #1
    1c40:	ea20 0101 	bic.w	r1, r0, r1
    1c44:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1c48:	e7ac      	b.n	1ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1c4a:	4807      	ldr	r0, [pc, #28]	; (1c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1c4c:	2800      	cmp	r0, #0
    1c4e:	bf18      	it	ne
    1c50:	f3af 8000 	nopne.w
    1c54:	b662      	cpsie	i
    1c56:	e7b2      	b.n	1bbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1c58:	e000ed04 	.word	0xe000ed04
    1c5c:	20000fc4 	.word	0x20000fc4
    1c60:	00000000 	.word	0x00000000
    1c64:	20000c44 	.word	0x20000c44
    1c68:	00000000 	.word	0x00000000
    1c6c:	20000f44 	.word	0x20000f44
    1c70:	003fffff 	.word	0x003fffff
    1c74:	00000000 	.word	0x00000000
    1c78:	20000014 	.word	0x20000014

00001c7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1c7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c80:	48a5      	ldr	r0, [pc, #660]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1c82:	b08c      	sub	sp, #48	; 0x30
    1c84:	6800      	ldr	r0, [r0, #0]
    1c86:	05c0      	lsls	r0, r0, #23
    1c88:	0dc0      	lsrs	r0, r0, #23
    1c8a:	d011      	beq.n	1cb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1c8c:	3810      	subs	r0, #16
    1c8e:	b240      	sxtb	r0, r0
    1c90:	2800      	cmp	r0, #0
    1c92:	bfb8      	it	lt
    1c94:	f000 000f 	andlt.w	r0, r0, #15
    1c98:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1c9c:	bfac      	ite	ge
    1c9e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1ca2:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1ca6:	0940      	lsrs	r0, r0, #5
    1ca8:	bf08      	it	eq
    1caa:	f04f 0901 	moveq.w	r9, #1
    1cae:	d001      	beq.n	1cb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1cb0:	f04f 0900 	mov.w	r9, #0
    1cb4:	980c      	ldr	r0, [sp, #48]	; 0x30
    1cb6:	7800      	ldrb	r0, [r0, #0]
    1cb8:	2800      	cmp	r0, #0
    1cba:	f04f 0000 	mov.w	r0, #0
    1cbe:	bf1c      	itt	ne
    1cc0:	b00d      	addne	sp, #52	; 0x34
    1cc2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cc6:	f8df a254 	ldr.w	sl, [pc, #596]	; 1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>
    1cca:	4d95      	ldr	r5, [pc, #596]	; (1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>)
    1ccc:	4c95      	ldr	r4, [pc, #596]	; (1f24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d8>)
    1cce:	f04f 0b00 	mov.w	fp, #0
    1cd2:	900b      	str	r0, [sp, #44]	; 0x2c
    1cd4:	b125      	cbz	r5, 1ce0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1cd6:	2100      	movs	r1, #0
    1cd8:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1cdc:	f3af 8000 	nop.w
    1ce0:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1ce4:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1ce8:	f04f 0800 	mov.w	r8, #0
    1cec:	b125      	cbz	r5, 1cf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1cee:	2100      	movs	r1, #0
    1cf0:	f240 605d 	movw	r0, #1629	; 0x65d
    1cf4:	f3af 8000 	nop.w
    1cf8:	f1b9 0f00 	cmp.w	r9, #0
    1cfc:	d11d      	bne.n	1d3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1cfe:	4637      	mov	r7, r6
    1d00:	2001      	movs	r0, #1
    1d02:	ea20 0607 	bic.w	r6, r0, r7
    1d06:	4888      	ldr	r0, [pc, #544]	; (1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1d08:	2240      	movs	r2, #64	; 0x40
    1d0a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1d0e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1d12:	f00a f90a 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1d16:	b125      	cbz	r5, 1d22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1d18:	2100      	movs	r1, #0
    1d1a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1d1e:	f3af 8000 	nop.w
    1d22:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1d26:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1d2a:	6a09      	ldr	r1, [r1, #32]
    1d2c:	6201      	str	r1, [r0, #32]
    1d2e:	b125      	cbz	r5, 1d3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1d30:	2100      	movs	r1, #0
    1d32:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1d36:	f3af 8000 	nop.w
    1d3a:	b125      	cbz	r5, 1d46 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1d3c:	2100      	movs	r1, #0
    1d3e:	f240 6065 	movw	r0, #1637	; 0x665
    1d42:	f3af 8000 	nop.w
    1d46:	f000 feb7 	bl	2ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1d4a:	4607      	mov	r7, r0
    1d4c:	4633      	mov	r3, r6
    1d4e:	466a      	mov	r2, sp
    1d50:	990c      	ldr	r1, [sp, #48]	; 0x30
    1d52:	f7ff f8c7 	bl	ee4 <CONFIG_BT_RX_STACK_SIZE+0x64c>
    1d56:	b125      	cbz	r5, 1d62 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16>
    1d58:	2100      	movs	r1, #0
    1d5a:	f240 606b 	movw	r0, #1643	; 0x66b
    1d5e:	f3af 8000 	nop.w
    1d62:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1d66:	2820      	cmp	r0, #32
    1d68:	d014      	beq.n	1d94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d6a:	6920      	ldr	r0, [r4, #16]
    1d6c:	9900      	ldr	r1, [sp, #0]
    1d6e:	1a09      	subs	r1, r1, r0
    1d70:	0209      	lsls	r1, r1, #8
    1d72:	17ca      	asrs	r2, r1, #31
    1d74:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1d78:	1209      	asrs	r1, r1, #8
    1d7a:	d50b      	bpl.n	1d94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1d7c:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d80:	1a89      	subs	r1, r1, r2
    1d82:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1d86:	4408      	add	r0, r1
    1d88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d8c:	e9cd 2000 	strd	r2, r0, [sp]
    1d90:	f04f 0801 	mov.w	r8, #1
    1d94:	b14d      	cbz	r5, 1daa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1d96:	2100      	movs	r1, #0
    1d98:	f240 6075 	movw	r0, #1653	; 0x675
    1d9c:	f3af 8000 	nop.w
    1da0:	2100      	movs	r1, #0
    1da2:	f240 607b 	movw	r0, #1659	; 0x67b
    1da6:	f3af 8000 	nop.w
    1daa:	9800      	ldr	r0, [sp, #0]
    1dac:	9901      	ldr	r1, [sp, #4]
    1dae:	1bc0      	subs	r0, r0, r7
    1db0:	1bc9      	subs	r1, r1, r7
    1db2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1db6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1dba:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1dbe:	d205      	bcs.n	1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1dc0:	458a      	cmp	sl, r1
    1dc2:	d303      	bcc.n	1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1dc4:	f1b9 0f00 	cmp.w	r9, #0
    1dc8:	d10c      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dca:	e003      	b.n	1dd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>
    1dcc:	f1b9 0f00 	cmp.w	r9, #0
    1dd0:	d038      	beq.n	1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1dd2:	e094      	b.n	1efe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b2>
    1dd4:	4633      	mov	r3, r6
    1dd6:	463a      	mov	r2, r7
    1dd8:	4669      	mov	r1, sp
    1dda:	4854      	ldr	r0, [pc, #336]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1ddc:	f7fe fbfc 	bl	5d8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1de0:	ea48 0800 	orr.w	r8, r8, r0
    1de4:	f1b8 0f00 	cmp.w	r8, #0
    1de8:	d022      	beq.n	1e30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe4>
    1dea:	9800      	ldr	r0, [sp, #0]
    1dec:	f009 ff2f 	bl	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1df0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1df4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1df8:	4b4d      	ldr	r3, [pc, #308]	; (1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>)
    1dfa:	4411      	add	r1, r2
    1dfc:	1c49      	adds	r1, r1, #1
    1dfe:	1842      	adds	r2, r0, r1
    1e00:	4298      	cmp	r0, r3
    1e02:	d841      	bhi.n	1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e04:	4849      	ldr	r0, [pc, #292]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1e06:	4281      	cmp	r1, r0
    1e08:	dc5a      	bgt.n	1ec0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x174>
    1e0a:	4240      	negs	r0, r0
    1e0c:	4281      	cmp	r1, r0
    1e0e:	db5f      	blt.n	1ed0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x184>
    1e10:	1c58      	adds	r0, r3, #1
    1e12:	4290      	cmp	r0, r2
    1e14:	bfdc      	itt	le
    1e16:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1e1a:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1e1e:	dd05      	ble.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e20:	2a00      	cmp	r2, #0
    1e22:	bfbc      	itt	lt
    1e24:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1e28:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1e2c:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e2e:	60c2      	str	r2, [r0, #12]
    1e30:	2001      	movs	r0, #1
    1e32:	900b      	str	r0, [sp, #44]	; 0x2c
    1e34:	2d00      	cmp	r5, #0
    1e36:	d062      	beq.n	1efe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b2>
    1e38:	2100      	movs	r1, #0
    1e3a:	f240 608e 	movw	r0, #1678	; 0x68e
    1e3e:	f3af 8000 	nop.w
    1e42:	e05c      	b.n	1efe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b2>
    1e44:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e48:	aa08      	add	r2, sp, #32
    1e4a:	a907      	add	r1, sp, #28
    1e4c:	f000 fcd6 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e50:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e54:	2820      	cmp	r0, #32
    1e56:	d01c      	beq.n	1e92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x146>
    1e58:	6920      	ldr	r0, [r4, #16]
    1e5a:	1d40      	adds	r0, r0, #5
    1e5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e60:	e9dd 2100 	ldrd	r2, r1, [sp]
    1e64:	1a89      	subs	r1, r1, r2
    1e66:	4401      	add	r1, r0
    1e68:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e6c:	e9cd 0100 	strd	r0, r1, [sp]
    1e70:	f009 feed 	bl	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1e74:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1e78:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1e7c:	4b2c      	ldr	r3, [pc, #176]	; (1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>)
    1e7e:	4411      	add	r1, r2
    1e80:	1c4a      	adds	r2, r1, #1
    1e82:	1881      	adds	r1, r0, r2
    1e84:	4298      	cmp	r0, r3
    1e86:	d918      	bls.n	1eba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16e>
    1e88:	f240 6109 	movw	r1, #1545	; 0x609
    1e8c:	2070      	movs	r0, #112	; 0x70
    1e8e:	f001 fd31 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e92:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1e96:	f107 0609 	add.w	r6, r7, #9
    1e9a:	b120      	cbz	r0, 1ea6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e9c:	f001 fcb2 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1ea0:	2800      	cmp	r0, #0
    1ea2:	bf08      	it	eq
    1ea4:	3632      	addeq	r6, #50	; 0x32
    1ea6:	4823      	ldr	r0, [pc, #140]	; (1f34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e8>)
    1ea8:	7841      	ldrb	r1, [r0, #1]
    1eaa:	9807      	ldr	r0, [sp, #28]
    1eac:	4281      	cmp	r1, r0
    1eae:	bf84      	itt	hi
    1eb0:	1a08      	subhi	r0, r1, r0
    1eb2:	4406      	addhi	r6, r0
    1eb4:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1eb8:	e7d2      	b.n	1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>
    1eba:	481c      	ldr	r0, [pc, #112]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1ebc:	4282      	cmp	r2, r0
    1ebe:	dd04      	ble.n	1eca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17e>
    1ec0:	f240 610a 	movw	r1, #1546	; 0x60a
    1ec4:	2070      	movs	r0, #112	; 0x70
    1ec6:	f001 fd15 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eca:	481b      	ldr	r0, [pc, #108]	; (1f38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ec>)
    1ecc:	4282      	cmp	r2, r0
    1ece:	da04      	bge.n	1eda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18e>
    1ed0:	f240 610b 	movw	r1, #1547	; 0x60b
    1ed4:	2070      	movs	r0, #112	; 0x70
    1ed6:	f001 fd0d 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eda:	4818      	ldr	r0, [pc, #96]	; (1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>)
    1edc:	4288      	cmp	r0, r1
    1ede:	bfdc      	itt	le
    1ee0:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1ee4:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1ee8:	dd05      	ble.n	1ef6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1aa>
    1eea:	2900      	cmp	r1, #0
    1eec:	bfbc      	itt	lt
    1eee:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1ef2:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ef8:	60c1      	str	r1, [r0, #12]
    1efa:	2001      	movs	r0, #1
    1efc:	900b      	str	r0, [sp, #44]	; 0x2c
    1efe:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1f02:	f88d 0010 	strb.w	r0, [sp, #16]
    1f06:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1f0a:	2800      	cmp	r0, #0
    1f0c:	f47f aee2 	bne.w	1cd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1f10:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1f12:	b00d      	add	sp, #52	; 0x34
    1f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f18:	e000ed04 	.word	0xe000ed04
    1f1c:	003fffff 	.word	0x003fffff
    1f20:	00000000 	.word	0x00000000
    1f24:	20000fc4 	.word	0x20000fc4
    1f28:	20000f44 	.word	0x20000f44
    1f2c:	07a12000 	.word	0x07a12000
    1f30:	1e847fff 	.word	0x1e847fff
    1f34:	20000016 	.word	0x20000016
    1f38:	f85ee000 	.word	0xf85ee000
    1f3c:	1e848000 	.word	0x1e848000

00001f40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1f40:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f44:	4d88      	ldr	r5, [pc, #544]	; (2168 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x168>)
    1f46:	b08c      	sub	sp, #48	; 0x30
    1f48:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1f4c:	2000      	movs	r0, #0
    1f4e:	9009      	str	r0, [sp, #36]	; 0x24
    1f50:	2001      	movs	r0, #1
    1f52:	4c86      	ldr	r4, [pc, #536]	; (216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>)
    1f54:	f04f 0900 	mov.w	r9, #0
    1f58:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1f5c:	4680      	mov	r8, r0
    1f5e:	9008      	str	r0, [sp, #32]
    1f60:	b124      	cbz	r4, 1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1f62:	2100      	movs	r1, #0
    1f64:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1f68:	f3af 8000 	nop.w
    1f6c:	9808      	ldr	r0, [sp, #32]
    1f6e:	2800      	cmp	r0, #0
    1f70:	d037      	beq.n	1fe2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1f72:	bf00      	nop
    1f74:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1f78:	b124      	cbz	r4, 1f84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1f7a:	2100      	movs	r1, #0
    1f7c:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1f80:	f3af 8000 	nop.w
    1f84:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1f88:	2240      	movs	r2, #64	; 0x40
    1f8a:	ea28 060a 	bic.w	r6, r8, sl
    1f8e:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1f92:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1f96:	4683      	mov	fp, r0
    1f98:	f009 ffc7 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f9c:	b124      	cbz	r4, 1fa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1f9e:	2100      	movs	r1, #0
    1fa0:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1fa4:	f3af 8000 	nop.w
    1fa8:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1fac:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1fb0:	9000      	str	r0, [sp, #0]
    1fb2:	6a09      	ldr	r1, [r1, #32]
    1fb4:	6201      	str	r1, [r0, #32]
    1fb6:	b124      	cbz	r4, 1fc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1fb8:	2100      	movs	r1, #0
    1fba:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1fbe:	f3af 8000 	nop.w
    1fc2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1fc6:	f88d 0008 	strb.w	r0, [sp, #8]
    1fca:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1fce:	b178      	cbz	r0, 1ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1fd0:	2c00      	cmp	r4, #0
    1fd2:	bf1c      	itt	ne
    1fd4:	2100      	movne	r1, #0
    1fd6:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1fda:	d0c1      	beq.n	1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fdc:	f3af 8000 	nop.w
    1fe0:	e7be      	b.n	1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fe2:	4863      	ldr	r0, [pc, #396]	; (2170 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x170>)
    1fe4:	2800      	cmp	r0, #0
    1fe6:	bf18      	it	ne
    1fe8:	f3af 8000 	nopne.w
    1fec:	b662      	cpsie	i
    1fee:	e7c1      	b.n	1f74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1ff0:	b124      	cbz	r4, 1ffc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1ff2:	2100      	movs	r1, #0
    1ff4:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1ff8:	f3af 8000 	nop.w
    1ffc:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ffe:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2002:	2803      	cmp	r0, #3
    2004:	d172      	bne.n	20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
    2006:	f8dd a000 	ldr.w	sl, [sp]
    200a:	f8cd a018 	str.w	sl, [sp, #24]
    200e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2010:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2014:	4288      	cmp	r0, r1
    2016:	bf14      	ite	ne
    2018:	f04f 0b00 	movne.w	fp, #0
    201c:	f04f 0b01 	moveq.w	fp, #1
    2020:	f10a 0c20 	add.w	ip, sl, #32
    2024:	4686      	mov	lr, r0
    2026:	2220      	movs	r2, #32
    2028:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    202c:	e003      	b.n	2036 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x36>
    202e:	4602      	mov	r2, r0
    2030:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2034:	7840      	ldrb	r0, [r0, #1]
    2036:	4288      	cmp	r0, r1
    2038:	d002      	beq.n	2040 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x40>
    203a:	2820      	cmp	r0, #32
    203c:	d00a      	beq.n	2054 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x54>
    203e:	e7f6      	b.n	202e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2e>
    2040:	2820      	cmp	r0, #32
    2042:	d007      	beq.n	2054 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x54>
    2044:	4586      	cmp	lr, r0
    2046:	d107      	bne.n	2058 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x58>
    2048:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    204c:	7840      	ldrb	r0, [r0, #1]
    204e:	f88c 0000 	strb.w	r0, [ip]
    2052:	e007      	b.n	2064 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x64>
    2054:	4648      	mov	r0, r9
    2056:	e00c      	b.n	2072 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x72>
    2058:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    205c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2060:	7840      	ldrb	r0, [r0, #1]
    2062:	7048      	strb	r0, [r1, #1]
    2064:	b124      	cbz	r4, 2070 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x70>
    2066:	2100      	movs	r1, #0
    2068:	f240 5037 	movw	r0, #1335	; 0x537
    206c:	f3af 8000 	nop.w
    2070:	4640      	mov	r0, r8
    2072:	ea10 0f0b 	tst.w	r0, fp
    2076:	bf18      	it	ne
    2078:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    207c:	2800      	cmp	r0, #0
    207e:	d052      	beq.n	2126 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x126>
    2080:	b124      	cbz	r4, 208c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x8c>
    2082:	2100      	movs	r1, #0
    2084:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2088:	f3af 8000 	nop.w
    208c:	4632      	mov	r2, r6
    208e:	2001      	movs	r0, #1
    2090:	990c      	ldr	r1, [sp, #48]	; 0x30
    2092:	f7ff f8cd 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    2096:	9806      	ldr	r0, [sp, #24]
    2098:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    209c:	f88d 0008 	strb.w	r0, [sp, #8]
    20a0:	f89d a008 	ldrb.w	sl, [sp, #8]
    20a4:	b124      	cbz	r4, 20b0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb0>
    20a6:	2100      	movs	r1, #0
    20a8:	f640 0008 	movw	r0, #2056	; 0x808
    20ac:	f3af 8000 	nop.w
    20b0:	4830      	ldr	r0, [pc, #192]	; (2174 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x174>)
    20b2:	2800      	cmp	r0, #0
    20b4:	bf18      	it	ne
    20b6:	f3af 8000 	nopne.w
    20ba:	f3ef 8010 	mrs	r0, PRIMASK
    20be:	b672      	cpsid	i
    20c0:	9008      	str	r0, [sp, #32]
    20c2:	b124      	cbz	r4, 20ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xce>
    20c4:	2100      	movs	r1, #0
    20c6:	f640 000d 	movw	r0, #2061	; 0x80d
    20ca:	f3af 8000 	nop.w
    20ce:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    20d2:	f88d 0008 	strb.w	r0, [sp, #8]
    20d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    20da:	b140      	cbz	r0, 20ee <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xee>
    20dc:	2c00      	cmp	r4, #0
    20de:	bf1c      	itt	ne
    20e0:	2100      	movne	r1, #0
    20e2:	f640 0011 	movwne	r0, #2065	; 0x811
    20e6:	f43f af3b 	beq.w	1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    20ea:	e777      	b.n	1fdc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    20ec:	e01b      	b.n	2126 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x126>
    20ee:	f1ba 0f00 	cmp.w	sl, #0
    20f2:	d008      	beq.n	2106 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x106>
    20f4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    20f8:	2820      	cmp	r0, #32
    20fa:	d104      	bne.n	2106 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x106>
    20fc:	4631      	mov	r1, r6
    20fe:	2002      	movs	r0, #2
    2100:	f7ff f8c6 	bl	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    2104:	b308      	cbz	r0, 214a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14a>
    2106:	b124      	cbz	r4, 2112 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x112>
    2108:	2100      	movs	r1, #0
    210a:	f640 0025 	movw	r0, #2085	; 0x825
    210e:	f3af 8000 	nop.w
    2112:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2116:	ea28 0000 	bic.w	r0, r8, r0
    211a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    211e:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2122:	2001      	movs	r0, #1
    2124:	9009      	str	r0, [sp, #36]	; 0x24
    2126:	b124      	cbz	r4, 2132 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x132>
    2128:	2100      	movs	r1, #0
    212a:	f640 002e 	movw	r0, #2094	; 0x82e
    212e:	f3af 8000 	nop.w
    2132:	9808      	ldr	r0, [sp, #32]
    2134:	b188      	cbz	r0, 215a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15a>
    2136:	b124      	cbz	r4, 2142 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x142>
    2138:	2100      	movs	r1, #0
    213a:	f640 0032 	movw	r0, #2098	; 0x832
    213e:	f3af 8000 	nop.w
    2142:	9809      	ldr	r0, [sp, #36]	; 0x24
    2144:	b00d      	add	sp, #52	; 0x34
    2146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    214a:	2c00      	cmp	r4, #0
    214c:	d0f1      	beq.n	2132 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x132>
    214e:	2100      	movs	r1, #0
    2150:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2154:	f3af 8000 	nop.w
    2158:	e7e6      	b.n	2128 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x128>
    215a:	4805      	ldr	r0, [pc, #20]	; (2170 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x170>)
    215c:	2800      	cmp	r0, #0
    215e:	bf18      	it	ne
    2160:	f3af 8000 	nopne.w
    2164:	b662      	cpsie	i
    2166:	e7e6      	b.n	2136 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x136>
    2168:	20000fc4 	.word	0x20000fc4
	...

00002178 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2178:	2820      	cmp	r0, #32
    217a:	bf24      	itt	cs
    217c:	2000      	movcs	r0, #0
    217e:	4770      	bxcs	lr
    2180:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2184:	4b03      	ldr	r3, [pc, #12]	; (2194 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2186:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    218a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    218e:	6042      	str	r2, [r0, #4]
    2190:	2001      	movs	r0, #1
    2192:	4770      	bx	lr
    2194:	20000c44 	.word	0x20000c44

00002198 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2198:	b510      	push	{r4, lr}
    219a:	2820      	cmp	r0, #32
    219c:	d211      	bcs.n	21c2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    219e:	490e      	ldr	r1, [pc, #56]	; (21d8 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    21a0:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21a4:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    21a8:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    21ac:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    21b0:	b13b      	cbz	r3, 21c2 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    21b2:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    21b6:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    21ba:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    21be:	2a01      	cmp	r2, #1
    21c0:	d001      	beq.n	21c6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    21c2:	2000      	movs	r0, #0
    21c4:	bd10      	pop	{r4, pc}
    21c6:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    21ca:	4601      	mov	r1, r0
    21cc:	2000      	movs	r0, #0
    21ce:	f7ff f82f 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    21d2:	2001      	movs	r0, #1
    21d4:	bd10      	pop	{r4, pc}
    21d6:	0000      	.short	0x0000
    21d8:	20000fc4 	.word	0x20000fc4

000021dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    21dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21e0:	4e80      	ldr	r6, [pc, #512]	; (23e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    21e2:	4680      	mov	r8, r0
    21e4:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    21e8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    21ec:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    21f0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    21f4:	2800      	cmp	r0, #0
    21f6:	d068      	beq.n	22ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    21f8:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    21fc:	4d7a      	ldr	r5, [pc, #488]	; (23e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    21fe:	b125      	cbz	r5, 220a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2200:	2100      	movs	r1, #0
    2202:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2206:	f3af 8000 	nop.w
    220a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    220e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2212:	2801      	cmp	r0, #1
    2214:	d018      	beq.n	2248 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    2216:	b2c0      	uxtb	r0, r0
    2218:	2804      	cmp	r0, #4
    221a:	bf1c      	itt	ne
    221c:	2805      	cmpne	r0, #5
    221e:	2806      	cmpne	r0, #6
    2220:	d058      	beq.n	22d4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    2222:	b12d      	cbz	r5, 2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    2224:	f04f 0100 	mov.w	r1, #0
    2228:	f640 30cd 	movw	r0, #3021	; 0xbcd
    222c:	f3af 8000 	nop.w
    2230:	f001 fc86 	bl	3b40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2234:	b125      	cbz	r5, 2240 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    2236:	2100      	movs	r1, #0
    2238:	f640 30d1 	movw	r0, #3025	; 0xbd1
    223c:	f3af 8000 	nop.w
    2240:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2244:	2801      	cmp	r0, #1
    2246:	d1e6      	bne.n	2216 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2248:	2401      	movs	r4, #1
    224a:	b125      	cbz	r5, 2256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    224c:	2100      	movs	r1, #0
    224e:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2252:	f3af 8000 	nop.w
    2256:	2c00      	cmp	r4, #0
    2258:	d042      	beq.n	22e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    225a:	2000      	movs	r0, #0
    225c:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2260:	b125      	cbz	r5, 226c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2262:	2100      	movs	r1, #0
    2264:	f640 30dd 	movw	r0, #3037	; 0xbdd
    2268:	f3af 8000 	nop.w
    226c:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2270:	2001      	movs	r0, #1
    2272:	ea20 090b 	bic.w	r9, r0, fp
    2276:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    227a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    227e:	2240      	movs	r2, #64	; 0x40
    2280:	f009 fe53 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2284:	b125      	cbz	r5, 2290 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2286:	2100      	movs	r1, #0
    2288:	f240 50cd 	movw	r0, #1485	; 0x5cd
    228c:	f3af 8000 	nop.w
    2290:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2294:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2298:	6a00      	ldr	r0, [r0, #32]
    229a:	f8ca 0020 	str.w	r0, [sl, #32]
    229e:	b125      	cbz	r5, 22aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    22a0:	2100      	movs	r1, #0
    22a2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    22a6:	f3af 8000 	nop.w
    22aa:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    22ae:	f88d 0000 	strb.w	r0, [sp]
    22b2:	f89d 0000 	ldrb.w	r0, [sp]
    22b6:	b1d0      	cbz	r0, 22ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    22b8:	2d00      	cmp	r5, #0
    22ba:	bf1c      	itt	ne
    22bc:	2100      	movne	r1, #0
    22be:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    22c2:	d0c2      	beq.n	224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22c4:	f3af 8000 	nop.w
    22c8:	e7bf      	b.n	224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    22ca:	f640 31b8 	movw	r1, #3000	; 0xbb8
    22ce:	2070      	movs	r0, #112	; 0x70
    22d0:	f001 fb10 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22d4:	464a      	mov	r2, r9
    22d6:	4641      	mov	r1, r8
    22d8:	2001      	movs	r0, #1
    22da:	f7fe ffa9 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    22de:	e7a9      	b.n	2234 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    22e0:	4842      	ldr	r0, [pc, #264]	; (23ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    22e2:	2800      	cmp	r0, #0
    22e4:	bf18      	it	ne
    22e6:	f3af 8000 	nopne.w
    22ea:	b662      	cpsie	i
    22ec:	e7b5      	b.n	225a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    22ee:	b125      	cbz	r5, 22fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    22f0:	2100      	movs	r1, #0
    22f2:	f640 30e7 	movw	r0, #3047	; 0xbe7
    22f6:	f3af 8000 	nop.w
    22fa:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    22fe:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2302:	4614      	mov	r4, r2
    2304:	f04f 0b20 	mov.w	fp, #32
    2308:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    230c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2310:	e003      	b.n	231a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    2312:	46a3      	mov	fp, r4
    2314:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    2318:	785c      	ldrb	r4, [r3, #1]
    231a:	4544      	cmp	r4, r8
    231c:	d002      	beq.n	2324 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    231e:	2c20      	cmp	r4, #32
    2320:	d02b      	beq.n	237a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2322:	e7f6      	b.n	2312 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    2324:	2c20      	cmp	r4, #32
    2326:	d028      	beq.n	237a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    2328:	42a2      	cmp	r2, r4
    232a:	d104      	bne.n	2336 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    232c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2330:	7840      	ldrb	r0, [r0, #1]
    2332:	7008      	strb	r0, [r1, #0]
    2334:	e005      	b.n	2342 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    2336:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    233a:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    233e:	7849      	ldrb	r1, [r1, #1]
    2340:	7041      	strb	r1, [r0, #1]
    2342:	f1ba 0f00 	cmp.w	sl, #0
    2346:	d011      	beq.n	236c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2348:	b125      	cbz	r5, 2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    234a:	2100      	movs	r1, #0
    234c:	f240 502f 	movw	r0, #1327	; 0x52f
    2350:	f3af 8000 	nop.w
    2354:	f89a 0000 	ldrb.w	r0, [sl]
    2358:	42a0      	cmp	r0, r4
    235a:	d107      	bne.n	236c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    235c:	b125      	cbz	r5, 2368 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    235e:	2100      	movs	r1, #0
    2360:	f240 5032 	movw	r0, #1330	; 0x532
    2364:	f3af 8000 	nop.w
    2368:	f88a b000 	strb.w	fp, [sl]
    236c:	b15d      	cbz	r5, 2386 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    236e:	2100      	movs	r1, #0
    2370:	f240 5037 	movw	r0, #1335	; 0x537
    2374:	f3af 8000 	nop.w
    2378:	e000      	b.n	237c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    237a:	b125      	cbz	r5, 2386 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    237c:	2100      	movs	r1, #0
    237e:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2382:	f3af 8000 	nop.w
    2386:	481a      	ldr	r0, [pc, #104]	; (23f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2388:	2800      	cmp	r0, #0
    238a:	bf18      	it	ne
    238c:	f3af 8000 	nopne.w
    2390:	f3ef 8410 	mrs	r4, PRIMASK
    2394:	b672      	cpsid	i
    2396:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    239a:	f88d 0000 	strb.w	r0, [sp]
    239e:	f89d 0000 	ldrb.w	r0, [sp]
    23a2:	b138      	cbz	r0, 23b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    23a4:	2d00      	cmp	r5, #0
    23a6:	bf1c      	itt	ne
    23a8:	2100      	movne	r1, #0
    23aa:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    23ae:	f43f af4c 	beq.w	224a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    23b2:	e787      	b.n	22c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    23b4:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    23b8:	2001      	movs	r0, #1
    23ba:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    23be:	b154      	cbz	r4, 23d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    23c0:	2d00      	cmp	r5, #0
    23c2:	bf08      	it	eq
    23c4:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23c8:	2100      	movs	r1, #0
    23ca:	f640 30fe 	movw	r0, #3070	; 0xbfe
    23ce:	f3af 8000 	nop.w
    23d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23d6:	4805      	ldr	r0, [pc, #20]	; (23ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    23d8:	2800      	cmp	r0, #0
    23da:	bf18      	it	ne
    23dc:	f3af 8000 	nopne.w
    23e0:	b662      	cpsie	i
    23e2:	e7ed      	b.n	23c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    23e4:	20000fc4 	.word	0x20000fc4
	...

000023f4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    23f4:	b570      	push	{r4, r5, r6, lr}
    23f6:	460d      	mov	r5, r1
    23f8:	4606      	mov	r6, r0
    23fa:	f001 f9f1 	bl	37e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    23fe:	480f      	ldr	r0, [pc, #60]	; (243c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2400:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2404:	2400      	movs	r4, #0
    2406:	3880      	subs	r0, #128	; 0x80
    2408:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    240c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2410:	b129      	cbz	r1, 241e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2412:	1c61      	adds	r1, r4, #1
    2414:	b2cc      	uxtb	r4, r1
    2416:	2c20      	cmp	r4, #32
    2418:	d3f8      	bcc.n	240c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    241a:	2020      	movs	r0, #32
    241c:	bd70      	pop	{r4, r5, r6, pc}
    241e:	4808      	ldr	r0, [pc, #32]	; (2440 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2420:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2424:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2428:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    242c:	4621      	mov	r1, r4
    242e:	6045      	str	r5, [r0, #4]
    2430:	2001      	movs	r0, #1
    2432:	f7fe fefd 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    2436:	4620      	mov	r0, r4
    2438:	bd70      	pop	{r4, r5, r6, pc}
    243a:	0000      	.short	0x0000
    243c:	20000fc4 	.word	0x20000fc4
    2440:	20000c44 	.word	0x20000c44

00002444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2448:	b083      	sub	sp, #12
    244a:	f000 fb35 	bl	2ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    244e:	4605      	mov	r5, r0
    2450:	f000 fdfe 	bl	3050 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2454:	4c67      	ldr	r4, [pc, #412]	; (25f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2456:	68a0      	ldr	r0, [r4, #8]
    2458:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    245c:	bf1c      	itt	ne
    245e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2462:	60a0      	strne	r0, [r4, #8]
    2464:	7fa0      	ldrb	r0, [r4, #30]
    2466:	f8df b190 	ldr.w	fp, [pc, #400]	; 25f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    246a:	b9a8      	cbnz	r0, 2498 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    246c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2470:	1a08      	subs	r0, r1, r0
    2472:	0200      	lsls	r0, r0, #8
    2474:	17c1      	asrs	r1, r0, #31
    2476:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    247a:	1200      	asrs	r0, r0, #8
    247c:	f44f 710c 	mov.w	r1, #560	; 0x230
    2480:	f009 fc12 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2484:	6921      	ldr	r1, [r4, #16]
    2486:	4408      	add	r0, r1
    2488:	1a28      	subs	r0, r5, r0
    248a:	0200      	lsls	r0, r0, #8
    248c:	17c1      	asrs	r1, r0, #31
    248e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2492:	1200      	asrs	r0, r0, #8
    2494:	0fc0      	lsrs	r0, r0, #31
    2496:	d013      	beq.n	24c0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2498:	7e60      	ldrb	r0, [r4, #25]
    249a:	b328      	cbz	r0, 24e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    249c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    24a0:	f88d 0000 	strb.w	r0, [sp]
    24a4:	f89d 0000 	ldrb.w	r0, [sp]
    24a8:	b1f0      	cbz	r0, 24e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    24aa:	f000 fc13 	bl	2cd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    24ae:	bf00      	nop
    24b0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    24b4:	b1f0      	cbz	r0, 24f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    24b6:	f240 4147 	movw	r1, #1095	; 0x447
    24ba:	2070      	movs	r0, #112	; 0x70
    24bc:	f001 fa1a 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24c0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    24c4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    24cc:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    24d0:	6840      	ldr	r0, [r0, #4]
    24d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24d6:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    24da:	2108      	movs	r1, #8
    24dc:	4790      	blx	r2
    24de:	f44f 6186 	mov.w	r1, #1072	; 0x430
    24e2:	2070      	movs	r0, #112	; 0x70
    24e4:	f001 fa06 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e8:	1ce8      	adds	r0, r5, #3
    24ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24ee:	f000 fae9 	bl	2ac4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    24f2:	e7dd      	b.n	24b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    24f4:	f04f 0a01 	mov.w	sl, #1
    24f8:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    24fc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2500:	2820      	cmp	r0, #32
    2502:	d024      	beq.n	254e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2504:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2508:	2020      	movs	r0, #32
    250a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    250e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2512:	2600      	movs	r6, #0
    2514:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2518:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    251c:	4837      	ldr	r0, [pc, #220]	; (25fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    251e:	6026      	str	r6, [r4, #0]
    2520:	7800      	ldrb	r0, [r0, #0]
    2522:	2802      	cmp	r0, #2
    2524:	bf16      	itet	ne
    2526:	2803      	cmpne	r0, #3
    2528:	2001      	moveq	r0, #1
    252a:	2000      	movne	r0, #0
    252c:	7720      	strb	r0, [r4, #28]
    252e:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2532:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2536:	f899 0020 	ldrb.w	r0, [r9, #32]
    253a:	2820      	cmp	r0, #32
    253c:	d031      	beq.n	25a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    253e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2542:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2546:	7d81      	ldrb	r1, [r0, #22]
    2548:	2901      	cmp	r1, #1
    254a:	d005      	beq.n	2558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    254c:	e029      	b.n	25a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    254e:	f240 414a 	movw	r1, #1098	; 0x44a
    2552:	2070      	movs	r0, #112	; 0x70
    2554:	f001 f9ce 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2558:	46ab      	mov	fp, r5
    255a:	f100 0508 	add.w	r5, r0, #8
    255e:	8a40      	ldrh	r0, [r0, #18]
    2560:	aa01      	add	r2, sp, #4
    2562:	4669      	mov	r1, sp
    2564:	f000 f94a 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2568:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    256c:	2820      	cmp	r0, #32
    256e:	d004      	beq.n	257a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2570:	6920      	ldr	r0, [r4, #16]
    2572:	1d40      	adds	r0, r0, #5
    2574:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2578:	e00b      	b.n	2592 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    257a:	8968      	ldrh	r0, [r5, #10]
    257c:	f10b 0b09 	add.w	fp, fp, #9
    2580:	b128      	cbz	r0, 258e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2582:	f001 f93f 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2586:	2800      	cmp	r0, #0
    2588:	bf08      	it	eq
    258a:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    258e:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2592:	e9d5 2100 	ldrd	r2, r1, [r5]
    2596:	1a89      	subs	r1, r1, r2
    2598:	6028      	str	r0, [r5, #0]
    259a:	4408      	add	r0, r1
    259c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25a0:	6068      	str	r0, [r5, #4]
    25a2:	4639      	mov	r1, r7
    25a4:	2001      	movs	r0, #1
    25a6:	f7fe fe73 	bl	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
    25aa:	2800      	cmp	r0, #0
    25ac:	d0f9      	beq.n	25a2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    25ae:	4814      	ldr	r0, [pc, #80]	; (2600 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    25b0:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    25b4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    25b8:	2802      	cmp	r0, #2
    25ba:	d104      	bne.n	25c6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    25bc:	463a      	mov	r2, r7
    25be:	4641      	mov	r1, r8
    25c0:	2006      	movs	r0, #6
    25c2:	f7fe fe35 	bl	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    25c6:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    25ca:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    25ce:	2820      	cmp	r0, #32
    25d0:	d003      	beq.n	25da <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    25d2:	480c      	ldr	r0, [pc, #48]	; (2604 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    25d4:	7840      	ldrb	r0, [r0, #1]
    25d6:	f001 fa5d 	bl	3a94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    25da:	7f20      	ldrb	r0, [r4, #28]
    25dc:	2800      	cmp	r0, #0
    25de:	bf04      	itt	eq
    25e0:	b003      	addeq	sp, #12
    25e2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25e6:	f000 fd7d 	bl	30e4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    25ea:	7726      	strb	r6, [r4, #28]
    25ec:	7766      	strb	r6, [r4, #29]
    25ee:	b003      	add	sp, #12
    25f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25f4:	20000fc4 	.word	0x20000fc4
    25f8:	20000c44 	.word	0x20000c44
    25fc:	20000016 	.word	0x20000016
    2600:	20000f44 	.word	0x20000f44
    2604:	20000014 	.word	0x20000014

00002608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2608:	b510      	push	{r4, lr}
    260a:	4c32      	ldr	r4, [pc, #200]	; (26d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    260c:	b082      	sub	sp, #8
    260e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2612:	2920      	cmp	r1, #32
    2614:	d008      	beq.n	2628 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2616:	68a1      	ldr	r1, [r4, #8]
    2618:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    261c:	d009      	beq.n	2632 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    261e:	f640 21e9 	movw	r1, #2793	; 0xae9
    2622:	2070      	movs	r0, #112	; 0x70
    2624:	f001 f966 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2628:	f640 21e8 	movw	r1, #2792	; 0xae8
    262c:	2070      	movs	r0, #112	; 0x70
    262e:	f001 f961 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2632:	6862      	ldr	r2, [r4, #4]
    2634:	4601      	mov	r1, r0
    2636:	4b28      	ldr	r3, [pc, #160]	; (26d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    2638:	1850      	adds	r0, r2, r1
    263a:	429a      	cmp	r2, r3
    263c:	d904      	bls.n	2648 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    263e:	f240 6109 	movw	r1, #1545	; 0x609
    2642:	2070      	movs	r0, #112	; 0x70
    2644:	f001 f956 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2648:	4a24      	ldr	r2, [pc, #144]	; (26dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    264a:	4291      	cmp	r1, r2
    264c:	dd04      	ble.n	2658 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    264e:	f240 610a 	movw	r1, #1546	; 0x60a
    2652:	2070      	movs	r0, #112	; 0x70
    2654:	f001 f94e 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2658:	4a21      	ldr	r2, [pc, #132]	; (26e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    265a:	4291      	cmp	r1, r2
    265c:	da04      	bge.n	2668 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    265e:	f240 610b 	movw	r1, #1547	; 0x60b
    2662:	2070      	movs	r0, #112	; 0x70
    2664:	f001 f946 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2668:	491e      	ldr	r1, [pc, #120]	; (26e4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    266a:	4281      	cmp	r1, r0
    266c:	bfdc      	itt	le
    266e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2672:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2676:	dd05      	ble.n	2684 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2678:	2800      	cmp	r0, #0
    267a:	bfbc      	itt	lt
    267c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2680:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2684:	aa01      	add	r2, sp, #4
    2686:	4669      	mov	r1, sp
    2688:	f000 f8b8 	bl	27fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    268c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2690:	280f      	cmp	r0, #15
    2692:	bf8c      	ite	hi
    2694:	2001      	movhi	r0, #1
    2696:	2000      	movls	r0, #0
    2698:	9900      	ldr	r1, [sp, #0]
    269a:	4408      	add	r0, r1
    269c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    26a0:	60a1      	str	r1, [r4, #8]
    26a2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    26a6:	f88d 0000 	strb.w	r0, [sp]
    26aa:	f89d 0000 	ldrb.w	r0, [sp]
    26ae:	2800      	cmp	r0, #0
    26b0:	bf04      	itt	eq
    26b2:	b002      	addeq	sp, #8
    26b4:	bd10      	popeq	{r4, pc}
    26b6:	2301      	movs	r3, #1
    26b8:	2203      	movs	r2, #3
    26ba:	2005      	movs	r0, #5
    26bc:	f000 fb86 	bl	2dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26c0:	2800      	cmp	r0, #0
    26c2:	bf1c      	itt	ne
    26c4:	b002      	addne	sp, #8
    26c6:	bd10      	popne	{r4, pc}
    26c8:	f640 21f1 	movw	r1, #2801	; 0xaf1
    26cc:	2070      	movs	r0, #112	; 0x70
    26ce:	f001 f911 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26d2:	0000      	.short	0x0000
    26d4:	20000fc4 	.word	0x20000fc4
    26d8:	1e847fff 	.word	0x1e847fff
    26dc:	07a12000 	.word	0x07a12000
    26e0:	f85ee000 	.word	0xf85ee000
    26e4:	1e848000 	.word	0x1e848000

000026e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    26e8:	b570      	push	{r4, r5, r6, lr}
    26ea:	4c1e      	ldr	r4, [pc, #120]	; (2764 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    26ec:	2120      	movs	r1, #32
    26ee:	f884 1020 	strb.w	r1, [r4, #32]
    26f2:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    26f6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    26fa:	2000      	movs	r0, #0
    26fc:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2700:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2704:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2708:	1e42      	subs	r2, r0, #1
    270a:	60a2      	str	r2, [r4, #8]
    270c:	6020      	str	r0, [r4, #0]
    270e:	77a0      	strb	r0, [r4, #30]
    2710:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    2714:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2718:	7720      	strb	r0, [r4, #28]
    271a:	7760      	strb	r0, [r4, #29]
    271c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2720:	4911      	ldr	r1, [pc, #68]	; (2768 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    2722:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    2726:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    272a:	7008      	strb	r0, [r1, #0]
    272c:	7048      	strb	r0, [r1, #1]
    272e:	8048      	strh	r0, [r1, #2]
    2730:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2734:	2210      	movs	r2, #16
    2736:	7088      	strb	r0, [r1, #2]
    2738:	f801 0f04 	strb.w	r0, [r1, #4]!
    273c:	1e52      	subs	r2, r2, #1
    273e:	d1fa      	bne.n	2736 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2740:	4d0a      	ldr	r5, [pc, #40]	; (276c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2742:	2601      	movs	r6, #1
    2744:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2748:	20ff      	movs	r0, #255	; 0xff
    274a:	7028      	strb	r0, [r5, #0]
    274c:	4808      	ldr	r0, [pc, #32]	; (2770 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    274e:	f001 f983 	bl	3a58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2752:	7068      	strb	r0, [r5, #1]
    2754:	f001 f9de 	bl	3b14 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2758:	60a8      	str	r0, [r5, #8]
    275a:	f000 fd0b 	bl	3174 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    275e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2762:	bd70      	pop	{r4, r5, r6, pc}
    2764:	20000fc4 	.word	0x20000fc4
    2768:	20000016 	.word	0x20000016
    276c:	20000014 	.word	0x20000014
    2770:	000010ed 	.word	0x000010ed

00002774 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2774:	b570      	push	{r4, r5, r6, lr}
    2776:	4604      	mov	r4, r0
    2778:	4615      	mov	r5, r2
    277a:	4608      	mov	r0, r1
    277c:	f009 fa67 	bl	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2780:	4a0f      	ldr	r2, [pc, #60]	; (27c0 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2782:	1b01      	subs	r1, r0, r4
    2784:	1c53      	adds	r3, r2, #1
    2786:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    278a:	bf24      	itt	cs
    278c:	eba4 0c00 	subcs.w	ip, r4, r0
    2790:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    2794:	d30b      	bcc.n	27ae <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2796:	428a      	cmp	r2, r1
    2798:	d203      	bcs.n	27a2 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    279a:	1b11      	subs	r1, r2, r4
    279c:	4408      	add	r0, r1
    279e:	1c41      	adds	r1, r0, #1
    27a0:	e005      	b.n	27ae <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    27a2:	4562      	cmp	r2, ip
    27a4:	d207      	bcs.n	27b6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    27a6:	1a10      	subs	r0, r2, r0
    27a8:	4420      	add	r0, r4
    27aa:	1c40      	adds	r0, r0, #1
    27ac:	4241      	negs	r1, r0
    27ae:	f101 000f 	add.w	r0, r1, #15
    27b2:	1a28      	subs	r0, r5, r0
    27b4:	bd70      	pop	{r4, r5, r6, pc}
    27b6:	f640 310c 	movw	r1, #2828	; 0xb0c
    27ba:	2070      	movs	r0, #112	; 0x70
    27bc:	f001 f89a 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27c0:	1e847fff 	.word	0x1e847fff

000027c4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    27c4:	0b41      	lsrs	r1, r0, #13
    27c6:	f248 6237 	movw	r2, #34359	; 0x8637
    27ca:	4351      	muls	r1, r2
    27cc:	0c0a      	lsrs	r2, r1, #16
    27ce:	4b09      	ldr	r3, [pc, #36]	; (27f4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    27d0:	0251      	lsls	r1, r2, #9
    27d2:	fb02 0203 	mla	r2, r2, r3, r0
    27d6:	4808      	ldr	r0, [pc, #32]	; (27f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    27d8:	4350      	muls	r0, r2
    27da:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    27de:	306e      	adds	r0, #110	; 0x6e
    27e0:	0d40      	lsrs	r0, r0, #21
    27e2:	425b      	negs	r3, r3
    27e4:	fb10 f303 	smulbb	r3, r0, r3
    27e8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    27ec:	bf88      	it	hi
    27ee:	1c49      	addhi	r1, r1, #1
    27f0:	4408      	add	r0, r1
    27f2:	4770      	bx	lr
    27f4:	ffffc2f7 	.word	0xffffc2f7
    27f8:	00010c6f 	.word	0x00010c6f

000027fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    27fc:	0b43      	lsrs	r3, r0, #13
    27fe:	f248 6c37 	movw	ip, #34359	; 0x8637
    2802:	fb03 f30c 	mul.w	r3, r3, ip
    2806:	b430      	push	{r4, r5}
    2808:	0c1b      	lsrs	r3, r3, #16
    280a:	f8df c044 	ldr.w	ip, [pc, #68]	; 2850 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    280e:	025c      	lsls	r4, r3, #9
    2810:	fb03 030c 	mla	r3, r3, ip, r0
    2814:	480f      	ldr	r0, [pc, #60]	; (2854 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2816:	4358      	muls	r0, r3
    2818:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    281c:	eb04 000c 	add.w	r0, r4, ip
    2820:	f643 5409 	movw	r4, #15625	; 0x3d09
    2824:	fb1c f404 	smulbb	r4, ip, r4
    2828:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    282c:	f643 5508 	movw	r5, #15624	; 0x3d08
    2830:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2834:	442c      	add	r4, r5
    2836:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    283a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    283e:	bf84      	itt	hi
    2840:	f04f 0c00 	movhi.w	ip, #0
    2844:	1c40      	addhi	r0, r0, #1
    2846:	6008      	str	r0, [r1, #0]
    2848:	f882 c000 	strb.w	ip, [r2]
    284c:	bc30      	pop	{r4, r5}
    284e:	4770      	bx	lr
    2850:	ffffc2f7 	.word	0xffffc2f7
    2854:	00010c6f 	.word	0x00010c6f

00002858 <MPSL_IRQ_RTC0_Handler>:
    2858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    285c:	4c36      	ldr	r4, [pc, #216]	; (2938 <MPSL_IRQ_RTC0_Handler+0xe0>)
    285e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2862:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2866:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    286a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    286e:	f04f 0500 	mov.w	r5, #0
    2872:	d019      	beq.n	28a8 <MPSL_IRQ_RTC0_Handler+0x50>
    2874:	4831      	ldr	r0, [pc, #196]	; (293c <MPSL_IRQ_RTC0_Handler+0xe4>)
    2876:	6800      	ldr	r0, [r0, #0]
    2878:	b1b0      	cbz	r0, 28a8 <MPSL_IRQ_RTC0_Handler+0x50>
    287a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    287e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2882:	482f      	ldr	r0, [pc, #188]	; (2940 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2884:	6800      	ldr	r0, [r0, #0]
    2886:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    288a:	1a40      	subs	r0, r0, r1
    288c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2890:	2802      	cmp	r0, #2
    2892:	d302      	bcc.n	289a <MPSL_IRQ_RTC0_Handler+0x42>
    2894:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2898:	d306      	bcc.n	28a8 <MPSL_IRQ_RTC0_Handler+0x50>
    289a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    289e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28a2:	2004      	movs	r0, #4
    28a4:	f7fe ff2c 	bl	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28a8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ac:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    28b0:	d019      	beq.n	28e6 <MPSL_IRQ_RTC0_Handler+0x8e>
    28b2:	4824      	ldr	r0, [pc, #144]	; (2944 <MPSL_IRQ_RTC0_Handler+0xec>)
    28b4:	6800      	ldr	r0, [r0, #0]
    28b6:	b1b0      	cbz	r0, 28e6 <MPSL_IRQ_RTC0_Handler+0x8e>
    28b8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    28bc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28c0:	4821      	ldr	r0, [pc, #132]	; (2948 <MPSL_IRQ_RTC0_Handler+0xf0>)
    28c2:	6800      	ldr	r0, [r0, #0]
    28c4:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    28c8:	1a40      	subs	r0, r0, r1
    28ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    28ce:	2802      	cmp	r0, #2
    28d0:	d302      	bcc.n	28d8 <MPSL_IRQ_RTC0_Handler+0x80>
    28d2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    28d6:	d306      	bcc.n	28e6 <MPSL_IRQ_RTC0_Handler+0x8e>
    28d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    28dc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    28e0:	2005      	movs	r0, #5
    28e2:	f7fe ff0d 	bl	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ea:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    28ee:	bf08      	it	eq
    28f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28f4:	4815      	ldr	r0, [pc, #84]	; (294c <MPSL_IRQ_RTC0_Handler+0xf4>)
    28f6:	6800      	ldr	r0, [r0, #0]
    28f8:	2800      	cmp	r0, #0
    28fa:	bf08      	it	eq
    28fc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2900:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2904:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2908:	4811      	ldr	r0, [pc, #68]	; (2950 <MPSL_IRQ_RTC0_Handler+0xf8>)
    290a:	6800      	ldr	r0, [r0, #0]
    290c:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2910:	1a40      	subs	r0, r0, r1
    2912:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2916:	2802      	cmp	r0, #2
    2918:	d304      	bcc.n	2924 <MPSL_IRQ_RTC0_Handler+0xcc>
    291a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    291e:	bf38      	it	cc
    2920:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2924:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2928:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    292c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2930:	2006      	movs	r0, #6
    2932:	f7fe bee5 	b.w	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2936:	0000      	.short	0x0000
    2938:	4000b000 	.word	0x4000b000
    293c:	4000b140 	.word	0x4000b140
    2940:	4000b540 	.word	0x4000b540
    2944:	4000b144 	.word	0x4000b144
    2948:	4000b544 	.word	0x4000b544
    294c:	4000b148 	.word	0x4000b148
    2950:	4000b548 	.word	0x4000b548

00002954 <MPSL_IRQ_TIMER0_Handler>:
    2954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2958:	4d38      	ldr	r5, [pc, #224]	; (2a3c <MPSL_IRQ_TIMER0_Handler+0xe8>)
    295a:	7828      	ldrb	r0, [r5, #0]
    295c:	2804      	cmp	r0, #4
    295e:	d068      	beq.n	2a32 <MPSL_IRQ_TIMER0_Handler+0xde>
    2960:	1ce8      	adds	r0, r5, #3
    2962:	2201      	movs	r2, #1
    2964:	7801      	ldrb	r1, [r0, #0]
    2966:	b159      	cbz	r1, 2980 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2968:	2901      	cmp	r1, #1
    296a:	bf08      	it	eq
    296c:	706a      	strbeq	r2, [r5, #1]
    296e:	d002      	beq.n	2976 <MPSL_IRQ_TIMER0_Handler+0x22>
    2970:	7869      	ldrb	r1, [r5, #1]
    2972:	2900      	cmp	r1, #0
    2974:	d058      	beq.n	2a28 <MPSL_IRQ_TIMER0_Handler+0xd4>
    2976:	2102      	movs	r1, #2
    2978:	7001      	strb	r1, [r0, #0]
    297a:	7840      	ldrb	r0, [r0, #1]
    297c:	f000 fafa 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2980:	4c2f      	ldr	r4, [pc, #188]	; (2a40 <MPSL_IRQ_TIMER0_Handler+0xec>)
    2982:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2986:	f04f 0800 	mov.w	r8, #0
    298a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    298e:	f44f 7780 	mov.w	r7, #256	; 0x100
    2992:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2996:	d00a      	beq.n	29ae <MPSL_IRQ_TIMER0_Handler+0x5a>
    2998:	482a      	ldr	r0, [pc, #168]	; (2a44 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    299a:	6800      	ldr	r0, [r0, #0]
    299c:	b138      	cbz	r0, 29ae <MPSL_IRQ_TIMER0_Handler+0x5a>
    299e:	2003      	movs	r0, #3
    29a0:	f000 fae8 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29a4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29a8:	2003      	movs	r0, #3
    29aa:	f7fe fea9 	bl	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29ae:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29b2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    29b6:	d00a      	beq.n	29ce <MPSL_IRQ_TIMER0_Handler+0x7a>
    29b8:	4823      	ldr	r0, [pc, #140]	; (2a48 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    29ba:	6800      	ldr	r0, [r0, #0]
    29bc:	b138      	cbz	r0, 29ce <MPSL_IRQ_TIMER0_Handler+0x7a>
    29be:	2002      	movs	r0, #2
    29c0:	f000 fad8 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29c4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29c8:	2002      	movs	r0, #2
    29ca:	f7fe fe99 	bl	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29ce:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29d2:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    29d6:	d00a      	beq.n	29ee <MPSL_IRQ_TIMER0_Handler+0x9a>
    29d8:	481c      	ldr	r0, [pc, #112]	; (2a4c <MPSL_IRQ_TIMER0_Handler+0xf8>)
    29da:	6800      	ldr	r0, [r0, #0]
    29dc:	b138      	cbz	r0, 29ee <MPSL_IRQ_TIMER0_Handler+0x9a>
    29de:	2001      	movs	r0, #1
    29e0:	f000 fac8 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29e4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    29e8:	2001      	movs	r0, #1
    29ea:	f7fe fe89 	bl	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29ee:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    29f2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    29f6:	bf08      	it	eq
    29f8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    29fc:	4814      	ldr	r0, [pc, #80]	; (2a50 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    29fe:	6800      	ldr	r0, [r0, #0]
    2a00:	2800      	cmp	r0, #0
    2a02:	bf08      	it	eq
    2a04:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a08:	2000      	movs	r0, #0
    2a0a:	f000 fab3 	bl	2f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a0e:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2a12:	2004      	movs	r0, #4
    2a14:	7028      	strb	r0, [r5, #0]
    2a16:	f8c5 8008 	str.w	r8, [r5, #8]
    2a1a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a22:	2000      	movs	r0, #0
    2a24:	f7fe be6c 	b.w	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a28:	f240 316a 	movw	r1, #874	; 0x36a
    2a2c:	206c      	movs	r0, #108	; 0x6c
    2a2e:	f000 ff61 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a36:	2007      	movs	r0, #7
    2a38:	f7fe be62 	b.w	1700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a3c:	20000020 	.word	0x20000020
    2a40:	40008000 	.word	0x40008000
    2a44:	4000814c 	.word	0x4000814c
    2a48:	40008148 	.word	0x40008148
    2a4c:	40008144 	.word	0x40008144
    2a50:	40008140 	.word	0x40008140
    2a54:	2201      	movs	r2, #1
    2a56:	0211      	lsls	r1, r2, #8
    2a58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a5c:	2000      	movs	r0, #0
    2a5e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2a62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2a66:	f3bf 8f4f 	dsb	sy
    2a6a:	f3bf 8f6f 	isb	sy
    2a6e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2a72:	490e      	ldr	r1, [pc, #56]	; (2aac <MPSL_IRQ_TIMER0_Handler+0x158>)
    2a74:	f841 2f04 	str.w	r2, [r1, #4]!
    2a78:	1e43      	subs	r3, r0, #1
    2a7a:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2a7e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    2a82:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    2a86:	4b0a      	ldr	r3, [pc, #40]	; (2ab0 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2a88:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a8c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2a90:	1d1b      	adds	r3, r3, #4
    2a92:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a96:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2a9a:	1d1b      	adds	r3, r3, #4
    2a9c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2aa0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2aa4:	60ca      	str	r2, [r1, #12]
    2aa6:	4903      	ldr	r1, [pc, #12]	; (2ab4 <MPSL_IRQ_TIMER0_Handler+0x160>)
    2aa8:	7048      	strb	r0, [r1, #1]
    2aaa:	4770      	bx	lr
    2aac:	40008000 	.word	0x40008000
    2ab0:	40008004 	.word	0x40008004
    2ab4:	20000020 	.word	0x20000020

00002ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2ab8:	4801      	ldr	r0, [pc, #4]	; (2ac0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2aba:	6800      	ldr	r0, [r0, #0]
    2abc:	4770      	bx	lr
    2abe:	0000      	.short	0x0000
    2ac0:	4000b504 	.word	0x4000b504

00002ac4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ac8:	4e47      	ldr	r6, [pc, #284]	; (2be8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2aca:	4605      	mov	r5, r0
    2acc:	1ef7      	subs	r7, r6, #3
    2ace:	7832      	ldrb	r2, [r6, #0]
    2ad0:	68f9      	ldr	r1, [r7, #12]
    2ad2:	2a01      	cmp	r2, #1
    2ad4:	bf04      	itt	eq
    2ad6:	42a9      	cmpeq	r1, r5
    2ad8:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2adc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2ae0:	4b42      	ldr	r3, [pc, #264]	; (2bec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2ae2:	6018      	str	r0, [r3, #0]
    2ae4:	4842      	ldr	r0, [pc, #264]	; (2bf0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2ae6:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2aea:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2aee:	f100 0304 	add.w	r3, r0, #4
    2af2:	f04f 0400 	mov.w	r4, #0
    2af6:	2a00      	cmp	r2, #0
    2af8:	d061      	beq.n	2bbe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2afa:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2afe:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2b02:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2b06:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2b0a:	4b3a      	ldr	r3, [pc, #232]	; (2bf4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b0c:	681b      	ldr	r3, [r3, #0]
    2b0e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2b12:	f04f 0801 	mov.w	r8, #1
    2b16:	2b00      	cmp	r3, #0
    2b18:	bf04      	itt	eq
    2b1a:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    2b1e:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    2b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b26:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2b2a:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    2b2e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2b32:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    2b36:	1aeb      	subs	r3, r5, r3
    2b38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b3c:	2b02      	cmp	r3, #2
    2b3e:	d34b      	bcc.n	2bd8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2b44:	d248      	bcs.n	2bd8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2b46:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2b4e:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2b52:	b132      	cbz	r2, 2b62 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2b54:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2b58:	1a8a      	subs	r2, r1, r2
    2b5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2b5e:	2a02      	cmp	r2, #2
    2b60:	d3f8      	bcc.n	2b54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2b62:	f8c7 8008 	str.w	r8, [r7, #8]
    2b66:	703c      	strb	r4, [r7, #0]
    2b68:	f7ff ff74 	bl	2a54 <MPSL_IRQ_TIMER0_Handler+0x100>
    2b6c:	4822      	ldr	r0, [pc, #136]	; (2bf8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2b6e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2b72:	f364 0101 	bfi	r1, r4, #0, #2
    2b76:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2b7a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2b7e:	2102      	movs	r1, #2
    2b80:	f361 0201 	bfi	r2, r1, #0, #2
    2b84:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2b88:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2b8c:	2104      	movs	r1, #4
    2b8e:	f361 0203 	bfi	r2, r1, #0, #4
    2b92:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2b96:	f8c0 800c 	str.w	r8, [r0, #12]
    2b9a:	68b9      	ldr	r1, [r7, #8]
    2b9c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2ba0:	1580      	asrs	r0, r0, #22
    2ba2:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2ba6:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2baa:	4914      	ldr	r1, [pc, #80]	; (2bfc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2bac:	05c0      	lsls	r0, r0, #23
    2bae:	6008      	str	r0, [r1, #0]
    2bb0:	2004      	movs	r0, #4
    2bb2:	60fd      	str	r5, [r7, #12]
    2bb4:	7070      	strb	r0, [r6, #1]
    2bb6:	f886 8000 	strb.w	r8, [r6]
    2bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bbe:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2bc2:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2bc6:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2bca:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2bce:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2bd2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2bd6:	e798      	b.n	2b0a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2bd8:	2100      	movs	r1, #0
    2bda:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2bde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2be2:	206c      	movs	r0, #108	; 0x6c
    2be4:	f000 fe86 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2be8:	20000023 	.word	0x20000023
    2bec:	4001f508 	.word	0x4001f508
    2bf0:	4000b000 	.word	0x4000b000
    2bf4:	4000b148 	.word	0x4000b148
    2bf8:	40008000 	.word	0x40008000
    2bfc:	4001f504 	.word	0x4001f504

00002c00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2c00:	b570      	push	{r4, r5, r6, lr}
    2c02:	4c2c      	ldr	r4, [pc, #176]	; (2cb4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2c04:	68e2      	ldr	r2, [r4, #12]
    2c06:	4282      	cmp	r2, r0
    2c08:	bf14      	ite	ne
    2c0a:	2101      	movne	r1, #1
    2c0c:	2100      	moveq	r1, #0
    2c0e:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2cb8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2c12:	f89c 5000 	ldrb.w	r5, [ip]
    2c16:	2d02      	cmp	r5, #2
    2c18:	d002      	beq.n	2c20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2c1a:	2900      	cmp	r1, #0
    2c1c:	d037      	beq.n	2c8e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2c1e:	e002      	b.n	2c26 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2c20:	2900      	cmp	r1, #0
    2c22:	bf08      	it	eq
    2c24:	bd70      	popeq	{r4, r5, r6, pc}
    2c26:	7861      	ldrb	r1, [r4, #1]
    2c28:	b381      	cbz	r1, 2c8c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2c2a:	4b24      	ldr	r3, [pc, #144]	; (2cbc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2c2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2c30:	6019      	str	r1, [r3, #0]
    2c32:	138b      	asrs	r3, r1, #14
    2c34:	4922      	ldr	r1, [pc, #136]	; (2cc0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2c36:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2c3a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2c3e:	2300      	movs	r3, #0
    2c40:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2c44:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2c48:	1ac3      	subs	r3, r0, r3
    2c4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c4e:	2b02      	cmp	r3, #2
    2c50:	d327      	bcc.n	2ca2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2c56:	d224      	bcs.n	2ca2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2c58:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2c60:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2c64:	b13d      	cbz	r5, 2c76 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2c66:	bf00      	nop
    2c68:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2c6c:	1ad3      	subs	r3, r2, r3
    2c6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c72:	2b02      	cmp	r3, #2
    2c74:	d3f8      	bcc.n	2c68 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2c76:	4b13      	ldr	r3, [pc, #76]	; (2cc4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2c78:	2102      	movs	r1, #2
    2c7a:	074a      	lsls	r2, r1, #29
    2c7c:	601a      	str	r2, [r3, #0]
    2c7e:	60e0      	str	r0, [r4, #12]
    2c80:	2004      	movs	r0, #4
    2c82:	f88c 0001 	strb.w	r0, [ip, #1]
    2c86:	f88c 1000 	strb.w	r1, [ip]
    2c8a:	bd70      	pop	{r4, r5, r6, pc}
    2c8c:	e004      	b.n	2c98 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2c8e:	f240 2102 	movw	r1, #514	; 0x202
    2c92:	206c      	movs	r0, #108	; 0x6c
    2c94:	f000 fe2e 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c98:	f240 2106 	movw	r1, #518	; 0x206
    2c9c:	206c      	movs	r0, #108	; 0x6c
    2c9e:	f000 fe29 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ca2:	2000      	movs	r0, #0
    2ca4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2ca8:	f240 2112 	movw	r1, #530	; 0x212
    2cac:	206c      	movs	r0, #108	; 0x6c
    2cae:	f000 fe21 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cb2:	0000      	.short	0x0000
    2cb4:	20000020 	.word	0x20000020
    2cb8:	20000023 	.word	0x20000023
    2cbc:	4001f508 	.word	0x4001f508
    2cc0:	4000b000 	.word	0x4000b000
    2cc4:	4001f504 	.word	0x4001f504

00002cc8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2cc8:	4801      	ldr	r0, [pc, #4]	; (2cd0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2cca:	68c0      	ldr	r0, [r0, #12]
    2ccc:	4770      	bx	lr
    2cce:	0000      	.short	0x0000
    2cd0:	20000020 	.word	0x20000020

00002cd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cd8:	4936      	ldr	r1, [pc, #216]	; (2db4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2cda:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2cde:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2ce2:	4d35      	ldr	r5, [pc, #212]	; (2db8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2ce4:	1d0b      	adds	r3, r1, #4
    2ce6:	2200      	movs	r2, #0
    2ce8:	7828      	ldrb	r0, [r5, #0]
    2cea:	b168      	cbz	r0, 2d08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2cec:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2cf0:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2cf4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2cf8:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2cfc:	4b2f      	ldr	r3, [pc, #188]	; (2dbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	f04f 0c01 	mov.w	ip, #1
    2d04:	b99b      	cbnz	r3, 2d2e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2d06:	e00c      	b.n	2d22 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2d08:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2d0c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2d10:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2d14:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2d18:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2d1c:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2d20:	e7ec      	b.n	2cfc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2d22:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2d2a:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2d2e:	2802      	cmp	r0, #2
    2d30:	d004      	beq.n	2d3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2d32:	f240 211e 	movw	r1, #542	; 0x21e
    2d36:	206c      	movs	r0, #108	; 0x6c
    2d38:	f000 fddc 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d3c:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2d40:	4c1f      	ldr	r4, [pc, #124]	; (2dc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2d42:	1cc0      	adds	r0, r0, #3
    2d44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d48:	68e3      	ldr	r3, [r4, #12]
    2d4a:	4e1e      	ldr	r6, [pc, #120]	; (2dc4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2d4c:	4298      	cmp	r0, r3
    2d4e:	d00c      	beq.n	2d6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d50:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2d54:	1bdf      	subs	r7, r3, r7
    2d56:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2d5a:	2f04      	cmp	r7, #4
    2d5c:	d305      	bcc.n	2d6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d5e:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2d62:	d202      	bcs.n	2d6a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2d64:	f7ff feae 	bl	2ac4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2d68:	e01f      	b.n	2daa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2d6a:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2d6e:	1a18      	subs	r0, r3, r0
    2d70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d74:	2802      	cmp	r0, #2
    2d76:	d315      	bcc.n	2da4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2d78:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2d7c:	d212      	bcs.n	2da4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2d7e:	4912      	ldr	r1, [pc, #72]	; (2dc8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2d80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2d84:	6008      	str	r0, [r1, #0]
    2d86:	f8c4 c008 	str.w	ip, [r4, #8]
    2d8a:	7022      	strb	r2, [r4, #0]
    2d8c:	f8c6 c004 	str.w	ip, [r6, #4]
    2d90:	f8c6 c00c 	str.w	ip, [r6, #12]
    2d94:	0040      	lsls	r0, r0, #1
    2d96:	1f09      	subs	r1, r1, #4
    2d98:	6008      	str	r0, [r1, #0]
    2d9a:	2004      	movs	r0, #4
    2d9c:	7068      	strb	r0, [r5, #1]
    2d9e:	f885 c000 	strb.w	ip, [r5]
    2da2:	e002      	b.n	2daa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2da4:	f8c4 c008 	str.w	ip, [r4, #8]
    2da8:	7022      	strb	r2, [r4, #0]
    2daa:	68a0      	ldr	r0, [r4, #8]
    2dac:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2db4:	4000b000 	.word	0x4000b000
    2db8:	20000023 	.word	0x20000023
    2dbc:	4000b148 	.word	0x4000b148
    2dc0:	20000020 	.word	0x20000020
    2dc4:	40008000 	.word	0x40008000
    2dc8:	4001f508 	.word	0x4001f508

00002dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2dd0:	f8df c190 	ldr.w	ip, [pc, #400]	; 2f64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2dd4:	2600      	movs	r6, #0
    2dd6:	2701      	movs	r7, #1
    2dd8:	f89c 4000 	ldrb.w	r4, [ip]
    2ddc:	f89c c001 	ldrb.w	ip, [ip, #1]
    2de0:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2de4:	2807      	cmp	r0, #7
    2de6:	d27b      	bcs.n	2ee0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2de8:	e8df f000 	tbb	[pc, r0]
    2dec:	04040404 	.word	0x04040404
    2df0:	006c6c6c 	.word	0x006c6c6c
    2df4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2f68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2df8:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2dfc:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2e00:	bf04      	itt	eq
    2e02:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2e06:	f1b8 0f00 	cmpeq.w	r8, #0
    2e0a:	d002      	beq.n	2e12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2e0c:	2c02      	cmp	r4, #2
    2e0e:	d005      	beq.n	2e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2e10:	e02c      	b.n	2e6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2e12:	f240 2151 	movw	r1, #593	; 0x251
    2e16:	206c      	movs	r0, #108	; 0x6c
    2e18:	f000 fd6c 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e1c:	f1ac 0804 	sub.w	r8, ip, #4
    2e20:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2e24:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2e28:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2e2c:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2e30:	2500      	movs	r5, #0
    2e32:	2c01      	cmp	r4, #1
    2e34:	d002      	beq.n	2e3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2e36:	2c02      	cmp	r4, #2
    2e38:	d00b      	beq.n	2e52 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2e3a:	e014      	b.n	2e66 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2e3c:	f1bc 0f04 	cmp.w	ip, #4
    2e40:	bf24      	itt	cs
    2e42:	f8d8 9000 	ldrcs.w	r9, [r8]
    2e46:	f1b9 0f00 	cmpcs.w	r9, #0
    2e4a:	bf08      	it	eq
    2e4c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2e50:	e009      	b.n	2e66 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2e52:	f1bc 0f04 	cmp.w	ip, #4
    2e56:	bf24      	itt	cs
    2e58:	f8d8 9000 	ldrcs.w	r9, [r8]
    2e5c:	f1b9 0f00 	cmpcs.w	r9, #0
    2e60:	bf08      	it	eq
    2e62:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2e66:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2e6a:	d1e1      	bne.n	2e30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2e6c:	4c3f      	ldr	r4, [pc, #252]	; (2f6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2e6e:	f100 0c10 	add.w	ip, r0, #16
    2e72:	fa07 fc0c 	lsl.w	ip, r7, ip
    2e76:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2e7a:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2e7e:	b1c2      	cbz	r2, 2eb2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2e80:	f04f 0840 	mov.w	r8, #64	; 0x40
    2e84:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2e88:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2e8c:	44a0      	add	r8, r4
    2e8e:	f8c8 7000 	str.w	r7, [r8]
    2e92:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2e96:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2e9a:	eba1 0000 	sub.w	r0, r1, r0
    2e9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ea2:	4282      	cmp	r2, r0
    2ea4:	bf98      	it	ls
    2ea6:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2eaa:	bf28      	it	cs
    2eac:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2eb0:	d250      	bcs.n	2f54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2eb2:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2eb6:	2b01      	cmp	r3, #1
    2eb8:	bf08      	it	eq
    2eba:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2ebe:	2001      	movs	r0, #1
    2ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ec4:	b134      	cbz	r4, 2ed4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2ec6:	4584      	cmp	ip, r0
    2ec8:	d104      	bne.n	2ed4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2eca:	f44f 711d 	mov.w	r1, #628	; 0x274
    2ece:	206c      	movs	r0, #108	; 0x6c
    2ed0:	f000 fd10 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ed4:	f1a0 0c04 	sub.w	ip, r0, #4
    2ed8:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2edc:	2b01      	cmp	r3, #1
    2ede:	e000      	b.n	2ee2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2ee0:	e03b      	b.n	2f5a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2ee2:	bf0c      	ite	eq
    2ee4:	f04f 0801 	moveq.w	r8, #1
    2ee8:	f04f 0800 	movne.w	r8, #0
    2eec:	2c03      	cmp	r4, #3
    2eee:	d304      	bcc.n	2efa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2ef0:	f240 114d 	movw	r1, #333	; 0x14d
    2ef4:	206c      	movs	r0, #108	; 0x6c
    2ef6:	f000 fcfd 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2efa:	f8df c074 	ldr.w	ip, [pc, #116]	; 2f70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2efe:	f104 0310 	add.w	r3, r4, #16
    2f02:	fa07 f303 	lsl.w	r3, r7, r3
    2f06:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2f0a:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2f0e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2f12:	f84c 6004 	str.w	r6, [ip, r4]
    2f16:	1f00      	subs	r0, r0, #4
    2f18:	b2c0      	uxtb	r0, r0
    2f1a:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2f1e:	b16a      	cbz	r2, 2f3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2f20:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2f24:	1b0c      	subs	r4, r1, r4
    2f26:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2f2a:	42a2      	cmp	r2, r4
    2f2c:	bf98      	it	ls
    2f2e:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2f32:	bf24      	itt	cs
    2f34:	2100      	movcs	r1, #0
    2f36:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2f3a:	d20b      	bcs.n	2f54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2f3c:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2f40:	f1b8 0f00 	cmp.w	r8, #0
    2f44:	bf18      	it	ne
    2f46:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2f4a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2f4e:	2001      	movs	r0, #1
    2f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f54:	2000      	movs	r0, #0
    2f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f5a:	f240 2179 	movw	r1, #633	; 0x279
    2f5e:	206c      	movs	r0, #108	; 0x6c
    2f60:	f000 fcc8 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f64:	20000023 	.word	0x20000023
    2f68:	20000020 	.word	0x20000020
    2f6c:	40008000 	.word	0x40008000
    2f70:	4000b000 	.word	0x4000b000

00002f74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2f78:	2600      	movs	r6, #0
    2f7a:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2f7e:	f04f 0801 	mov.w	r8, #1
    2f82:	2807      	cmp	r0, #7
    2f84:	d251      	bcs.n	302a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    2f86:	e8df f000 	tbb	[pc, r0]
    2f8a:	0404      	.short	0x0404
    2f8c:	19190404 	.word	0x19190404
    2f90:	0019      	.short	0x0019
    2f92:	f100 0110 	add.w	r1, r0, #16
    2f96:	fa08 f201 	lsl.w	r2, r8, r1
    2f9a:	4926      	ldr	r1, [pc, #152]	; (3034 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2f9c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2fa0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    2fa4:	2200      	movs	r2, #0
    2fa6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2faa:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    2fae:	508e      	str	r6, [r1, r2]
    2fb0:	4921      	ldr	r1, [pc, #132]	; (3038 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2fb2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2fb6:	9000      	str	r0, [sp, #0]
    2fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2fbc:	4d1f      	ldr	r5, [pc, #124]	; (303c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2fbe:	1f01      	subs	r1, r0, #4
    2fc0:	b2cc      	uxtb	r4, r1
    2fc2:	7829      	ldrb	r1, [r5, #0]
    2fc4:	b179      	cbz	r1, 2fe6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2fc6:	786a      	ldrb	r2, [r5, #1]
    2fc8:	4282      	cmp	r2, r0
    2fca:	d10c      	bne.n	2fe6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    2fcc:	4a1c      	ldr	r2, [pc, #112]	; (3040 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2fce:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2fd2:	6010      	str	r0, [r2, #0]
    2fd4:	2901      	cmp	r1, #1
    2fd6:	bf08      	it	eq
    2fd8:	f7ff fd3c 	bleq	2a54 <MPSL_IRQ_TIMER0_Handler+0x100>
    2fdc:	702e      	strb	r6, [r5, #0]
    2fde:	4919      	ldr	r1, [pc, #100]	; (3044 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    2fe0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2fe4:	60c8      	str	r0, [r1, #12]
    2fe6:	f104 0010 	add.w	r0, r4, #16
    2fea:	fa08 f100 	lsl.w	r1, r8, r0
    2fee:	4816      	ldr	r0, [pc, #88]	; (3048 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    2ff0:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2ff4:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2ff8:	00a1      	lsls	r1, r4, #2
    2ffa:	4401      	add	r1, r0
    2ffc:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    3000:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3004:	1a89      	subs	r1, r1, r2
    3006:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    300a:	2902      	cmp	r1, #2
    300c:	d307      	bcc.n	301e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    300e:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    3012:	2100      	movs	r1, #0
    3014:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3018:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    301c:	5046      	str	r6, [r0, r1]
    301e:	480b      	ldr	r0, [pc, #44]	; (304c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3020:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3024:	9000      	str	r0, [sp, #0]
    3026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    302a:	f240 21f1 	movw	r1, #753	; 0x2f1
    302e:	206c      	movs	r0, #108	; 0x6c
    3030:	f000 fc60 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3034:	40008000 	.word	0x40008000
    3038:	40008140 	.word	0x40008140
    303c:	20000023 	.word	0x20000023
    3040:	4001f508 	.word	0x4001f508
    3044:	20000020 	.word	0x20000020
    3048:	4000b000 	.word	0x4000b000
    304c:	4000b140 	.word	0x4000b140

00003050 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3050:	4920      	ldr	r1, [pc, #128]	; (30d4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3052:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3056:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    305a:	481f      	ldr	r0, [pc, #124]	; (30d8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    305c:	1d0a      	adds	r2, r1, #4
    305e:	7803      	ldrb	r3, [r0, #0]
    3060:	2000      	movs	r0, #0
    3062:	b15b      	cbz	r3, 307c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    3064:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3068:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    306c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3070:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3074:	4919      	ldr	r1, [pc, #100]	; (30dc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3076:	6809      	ldr	r1, [r1, #0]
    3078:	b999      	cbnz	r1, 30a2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    307a:	e00c      	b.n	3096 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    307c:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3080:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3084:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3088:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    308c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3090:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3094:	e7ee      	b.n	3074 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    3096:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    309a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    309e:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    30a2:	490f      	ldr	r1, [pc, #60]	; (30e0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    30a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    30a8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    30ac:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    30b0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    30b4:	1d0a      	adds	r2, r1, #4
    30b6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30ba:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    30be:	1d12      	adds	r2, r2, #4
    30c0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30c4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    30c8:	1d12      	adds	r2, r2, #4
    30ca:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30ce:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    30d2:	4770      	bx	lr
    30d4:	4000b000 	.word	0x4000b000
    30d8:	20000023 	.word	0x20000023
    30dc:	4000b148 	.word	0x4000b148
    30e0:	40008000 	.word	0x40008000

000030e4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    30e4:	4808      	ldr	r0, [pc, #32]	; (3108 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    30e6:	f990 0002 	ldrsb.w	r0, [r0, #2]
    30ea:	2800      	cmp	r0, #0
    30ec:	bfb8      	it	lt
    30ee:	4770      	bxlt	lr
    30f0:	f000 011f 	and.w	r1, r0, #31
    30f4:	2201      	movs	r2, #1
    30f6:	fa02 f101 	lsl.w	r1, r2, r1
    30fa:	0940      	lsrs	r0, r0, #5
    30fc:	0080      	lsls	r0, r0, #2
    30fe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3102:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3106:	4770      	bx	lr
    3108:	20000020 	.word	0x20000020

0000310c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    310c:	b510      	push	{r4, lr}
    310e:	2807      	cmp	r0, #7
    3110:	d20d      	bcs.n	312e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    3112:	e8df f000 	tbb	[pc, r0]
    3116:	0404      	.short	0x0404
    3118:	06060404 	.word	0x06060404
    311c:	0006      	.short	0x0006
    311e:	4906      	ldr	r1, [pc, #24]	; (3138 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    3120:	e002      	b.n	3128 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    3122:	1f00      	subs	r0, r0, #4
    3124:	4905      	ldr	r1, [pc, #20]	; (313c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    3126:	b2c0      	uxtb	r0, r0
    3128:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    312c:	bd10      	pop	{r4, pc}
    312e:	f240 219d 	movw	r1, #669	; 0x29d
    3132:	206c      	movs	r0, #108	; 0x6c
    3134:	f000 fbde 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3138:	40008140 	.word	0x40008140
    313c:	4000b140 	.word	0x4000b140

00003140 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3140:	b510      	push	{r4, lr}
    3142:	2807      	cmp	r0, #7
    3144:	d20d      	bcs.n	3162 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3146:	e8df f000 	tbb	[pc, r0]
    314a:	0404      	.short	0x0404
    314c:	06060404 	.word	0x06060404
    3150:	0006      	.short	0x0006
    3152:	4906      	ldr	r1, [pc, #24]	; (316c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3154:	e002      	b.n	315c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3156:	1f00      	subs	r0, r0, #4
    3158:	4905      	ldr	r1, [pc, #20]	; (3170 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    315a:	b2c0      	uxtb	r0, r0
    315c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3160:	bd10      	pop	{r4, pc}
    3162:	f240 219d 	movw	r1, #669	; 0x29d
    3166:	206c      	movs	r0, #108	; 0x6c
    3168:	f000 fbc4 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    316c:	40008140 	.word	0x40008140
    3170:	4000b140 	.word	0x4000b140

00003174 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3174:	b510      	push	{r4, lr}
    3176:	481c      	ldr	r0, [pc, #112]	; (31e8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3178:	2400      	movs	r4, #0
    317a:	2104      	movs	r1, #4
    317c:	7004      	strb	r4, [r0, #0]
    317e:	1ec0      	subs	r0, r0, #3
    3180:	7001      	strb	r1, [r0, #0]
    3182:	0589      	lsls	r1, r1, #22
    3184:	60c1      	str	r1, [r0, #12]
    3186:	f7ff fc65 	bl	2a54 <MPSL_IRQ_TIMER0_Handler+0x100>
    318a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    318e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3192:	f04f 0c01 	mov.w	ip, #1
    3196:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    319a:	f3bf 8f4f 	dsb	sy
    319e:	f3bf 8f6f 	isb	sy
    31a2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    31a6:	4811      	ldr	r0, [pc, #68]	; (31ec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    31a8:	f8c0 c004 	str.w	ip, [r0, #4]
    31ac:	f8c0 c008 	str.w	ip, [r0, #8]
    31b0:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    31b4:	2900      	cmp	r1, #0
    31b6:	d1fb      	bne.n	31b0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    31b8:	1e49      	subs	r1, r1, #1
    31ba:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    31be:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    31c2:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    31c6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    31ca:	4909      	ldr	r1, [pc, #36]	; (31f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    31cc:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31d0:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    31d4:	1d09      	adds	r1, r1, #4
    31d6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    31da:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    31de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    31e2:	f8c0 c000 	str.w	ip, [r0]
    31e6:	bd10      	pop	{r4, pc}
    31e8:	20000023 	.word	0x20000023
    31ec:	4000b000 	.word	0x4000b000
    31f0:	4000b004 	.word	0x4000b004

000031f4 <MPSL_IRQ_CLOCK_Handler>:
    31f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31f8:	4c16      	ldr	r4, [pc, #88]	; (3254 <MPSL_IRQ_CLOCK_Handler+0x60>)
    31fa:	7a60      	ldrb	r0, [r4, #9]
    31fc:	2800      	cmp	r0, #0
    31fe:	d027      	beq.n	3250 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3200:	f44f 7180 	mov.w	r1, #256	; 0x100
    3204:	058d      	lsls	r5, r1, #22
    3206:	4628      	mov	r0, r5
    3208:	f008 fd72 	bl	bcf0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    320c:	4680      	mov	r8, r0
    320e:	f44f 7182 	mov.w	r1, #260	; 0x104
    3212:	4628      	mov	r0, r5
    3214:	f008 fd6c 	bl	bcf0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3218:	2600      	movs	r6, #0
    321a:	4607      	mov	r7, r0
    321c:	f1b8 0f00 	cmp.w	r8, #0
    3220:	d009      	beq.n	3236 <MPSL_IRQ_CLOCK_Handler+0x42>
    3222:	2001      	movs	r0, #1
    3224:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3228:	7920      	ldrb	r0, [r4, #4]
    322a:	b120      	cbz	r0, 3236 <MPSL_IRQ_CLOCK_Handler+0x42>
    322c:	7126      	strb	r6, [r4, #4]
    322e:	69e0      	ldr	r0, [r4, #28]
    3230:	b108      	cbz	r0, 3236 <MPSL_IRQ_CLOCK_Handler+0x42>
    3232:	4780      	blx	r0
    3234:	61e6      	str	r6, [r4, #28]
    3236:	b137      	cbz	r7, 3246 <MPSL_IRQ_CLOCK_Handler+0x52>
    3238:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    323c:	2002      	movs	r0, #2
    323e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3242:	f000 fa8b 	bl	375c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3246:	4640      	mov	r0, r8
    3248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    324c:	f000 b85a 	b.w	3304 <MPSL_IRQ_CLOCK_Handler+0x110>
    3250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3254:	20000030 	.word	0x20000030
    3258:	b510      	push	{r4, lr}
    325a:	f008 fdf3 	bl	be44 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    325e:	b930      	cbnz	r0, 326e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3260:	f008 fe11 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3264:	b918      	cbnz	r0, 326e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3266:	f008 fe44 	bl	bef2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    326a:	2800      	cmp	r0, #0
    326c:	d002      	beq.n	3274 <MPSL_IRQ_CLOCK_Handler+0x80>
    326e:	4902      	ldr	r1, [pc, #8]	; (3278 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3270:	2002      	movs	r0, #2
    3272:	6008      	str	r0, [r1, #0]
    3274:	bd10      	pop	{r4, pc}
    3276:	0000      	.short	0x0000
    3278:	40000c34 	.word	0x40000c34
    327c:	b570      	push	{r4, r5, r6, lr}
    327e:	f000 f987 	bl	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3282:	f000 fabf 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3286:	4c09      	ldr	r4, [pc, #36]	; (32ac <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3288:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    328c:	b130      	cbz	r0, 329c <MPSL_IRQ_CLOCK_Handler+0xa8>
    328e:	f7ff ffe3 	bl	3258 <MPSL_IRQ_CLOCK_Handler+0x64>
    3292:	2001      	movs	r0, #1
    3294:	6128      	str	r0, [r5, #16]
    3296:	2004      	movs	r0, #4
    3298:	72a0      	strb	r0, [r4, #10]
    329a:	e004      	b.n	32a6 <MPSL_IRQ_CLOCK_Handler+0xb2>
    329c:	2003      	movs	r0, #3
    329e:	72a0      	strb	r0, [r4, #10]
    32a0:	2001      	movs	r0, #1
    32a2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    32a6:	2000      	movs	r0, #0
    32a8:	71e0      	strb	r0, [r4, #7]
    32aa:	bd70      	pop	{r4, r5, r6, pc}
    32ac:	20000030 	.word	0x20000030
    32b0:	b570      	push	{r4, r5, r6, lr}
    32b2:	4c13      	ldr	r4, [pc, #76]	; (3300 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    32b4:	79a0      	ldrb	r0, [r4, #6]
    32b6:	b1f0      	cbz	r0, 32f6 <MPSL_IRQ_CLOCK_Handler+0x102>
    32b8:	2801      	cmp	r0, #1
    32ba:	d003      	beq.n	32c4 <MPSL_IRQ_CLOCK_Handler+0xd0>
    32bc:	79e1      	ldrb	r1, [r4, #7]
    32be:	1e40      	subs	r0, r0, #1
    32c0:	4281      	cmp	r1, r0
    32c2:	da18      	bge.n	32f6 <MPSL_IRQ_CLOCK_Handler+0x102>
    32c4:	f000 fa9e 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32c8:	4605      	mov	r5, r0
    32ca:	f000 fb83 	bl	39d4 <mpsl_temperature_get>
    32ce:	79a1      	ldrb	r1, [r4, #6]
    32d0:	2901      	cmp	r1, #1
    32d2:	d902      	bls.n	32da <MPSL_IRQ_CLOCK_Handler+0xe6>
    32d4:	79e1      	ldrb	r1, [r4, #7]
    32d6:	1c49      	adds	r1, r1, #1
    32d8:	71e1      	strb	r1, [r4, #7]
    32da:	b10d      	cbz	r5, 32e0 <MPSL_IRQ_CLOCK_Handler+0xec>
    32dc:	6961      	ldr	r1, [r4, #20]
    32de:	e000      	b.n	32e2 <MPSL_IRQ_CLOCK_Handler+0xee>
    32e0:	6921      	ldr	r1, [r4, #16]
    32e2:	1a41      	subs	r1, r0, r1
    32e4:	2902      	cmp	r1, #2
    32e6:	da02      	bge.n	32ee <MPSL_IRQ_CLOCK_Handler+0xfa>
    32e8:	f111 0f02 	cmn.w	r1, #2
    32ec:	dc07      	bgt.n	32fe <MPSL_IRQ_CLOCK_Handler+0x10a>
    32ee:	b10d      	cbz	r5, 32f4 <MPSL_IRQ_CLOCK_Handler+0x100>
    32f0:	6160      	str	r0, [r4, #20]
    32f2:	e000      	b.n	32f6 <MPSL_IRQ_CLOCK_Handler+0x102>
    32f4:	6120      	str	r0, [r4, #16]
    32f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    32fa:	f7ff bfbf 	b.w	327c <MPSL_IRQ_CLOCK_Handler+0x88>
    32fe:	bd70      	pop	{r4, r5, r6, pc}
    3300:	20000030 	.word	0x20000030
    3304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3308:	4606      	mov	r6, r0
    330a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    330e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3312:	4628      	mov	r0, r5
    3314:	f008 fcec 	bl	bcf0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3318:	4680      	mov	r8, r0
    331a:	f44f 7188 	mov.w	r1, #272	; 0x110
    331e:	4628      	mov	r0, r5
    3320:	f008 fce6 	bl	bcf0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3324:	4c27      	ldr	r4, [pc, #156]	; (33c4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3326:	4682      	mov	sl, r0
    3328:	7827      	ldrb	r7, [r4, #0]
    332a:	f104 0008 	add.w	r0, r4, #8
    332e:	f008 fd53 	bl	bdd8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3332:	b110      	cbz	r0, 333a <MPSL_IRQ_CLOCK_Handler+0x146>
    3334:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3338:	e016      	b.n	3368 <MPSL_IRQ_CLOCK_Handler+0x174>
    333a:	f04f 0901 	mov.w	r9, #1
    333e:	b146      	cbz	r6, 3352 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3340:	7aa0      	ldrb	r0, [r4, #10]
    3342:	2803      	cmp	r0, #3
    3344:	d105      	bne.n	3352 <MPSL_IRQ_CLOCK_Handler+0x15e>
    3346:	2004      	movs	r0, #4
    3348:	72a0      	strb	r0, [r4, #10]
    334a:	f7ff ff85 	bl	3258 <MPSL_IRQ_CLOCK_Handler+0x64>
    334e:	f8c5 9010 	str.w	r9, [r5, #16]
    3352:	2600      	movs	r6, #0
    3354:	f1b8 0f00 	cmp.w	r8, #0
    3358:	d018      	beq.n	338c <MPSL_IRQ_CLOCK_Handler+0x198>
    335a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    335e:	7aa0      	ldrb	r0, [r4, #10]
    3360:	2804      	cmp	r0, #4
    3362:	d004      	beq.n	336e <MPSL_IRQ_CLOCK_Handler+0x17a>
    3364:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3368:	206d      	movs	r0, #109	; 0x6d
    336a:	f000 fac3 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    336e:	f008 fd69 	bl	be44 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3372:	b928      	cbnz	r0, 3380 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3374:	f008 fd87 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3378:	b910      	cbnz	r0, 3380 <MPSL_IRQ_CLOCK_Handler+0x18c>
    337a:	f008 fdba 	bl	bef2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    337e:	b108      	cbz	r0, 3384 <MPSL_IRQ_CLOCK_Handler+0x190>
    3380:	4811      	ldr	r0, [pc, #68]	; (33c8 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3382:	6006      	str	r6, [r0, #0]
    3384:	2002      	movs	r0, #2
    3386:	72a0      	strb	r0, [r4, #10]
    3388:	f000 f8e6 	bl	3558 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    338c:	f1ba 0f00 	cmp.w	sl, #0
    3390:	d008      	beq.n	33a4 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3392:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3396:	7aa0      	ldrb	r0, [r4, #10]
    3398:	2802      	cmp	r0, #2
    339a:	d101      	bne.n	33a0 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    339c:	f7ff ff88 	bl	32b0 <MPSL_IRQ_CLOCK_Handler+0xbc>
    33a0:	f8c5 9014 	str.w	r9, [r5, #20]
    33a4:	b13f      	cbz	r7, 33b6 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    33a6:	7026      	strb	r6, [r4, #0]
    33a8:	7aa0      	ldrb	r0, [r4, #10]
    33aa:	2802      	cmp	r0, #2
    33ac:	d101      	bne.n	33b2 <MPSL_IRQ_CLOCK_Handler+0x1be>
    33ae:	f7ff ff65 	bl	327c <MPSL_IRQ_CLOCK_Handler+0x88>
    33b2:	f000 f8d1 	bl	3558 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33ba:	4802      	ldr	r0, [pc, #8]	; (33c4 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    33bc:	3008      	adds	r0, #8
    33be:	f008 bd22 	b.w	be06 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    33c2:	0000      	.short	0x0000
    33c4:	20000030 	.word	0x20000030
    33c8:	40000c34 	.word	0x40000c34
    33cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33d0:	4c5c      	ldr	r4, [pc, #368]	; (3544 <MPSL_IRQ_CLOCK_Handler+0x350>)
    33d2:	f04f 0800 	mov.w	r8, #0
    33d6:	4606      	mov	r6, r0
    33d8:	f8c4 8018 	str.w	r8, [r4, #24]
    33dc:	7843      	ldrb	r3, [r0, #1]
    33de:	7882      	ldrb	r2, [r0, #2]
    33e0:	7800      	ldrb	r0, [r0, #0]
    33e2:	72e0      	strb	r0, [r4, #11]
    33e4:	7163      	strb	r3, [r4, #5]
    33e6:	2701      	movs	r7, #1
    33e8:	71a2      	strb	r2, [r4, #6]
    33ea:	07bd      	lsls	r5, r7, #30
    33ec:	f884 8007 	strb.w	r8, [r4, #7]
    33f0:	2805      	cmp	r0, #5
    33f2:	d224      	bcs.n	343e <MPSL_IRQ_CLOCK_Handler+0x24a>
    33f4:	e8df f000 	tbb	[pc, r0]
    33f8:	1f05030f 	.word	0x1f05030f
    33fc:	0021      	.short	0x0021
    33fe:	61a7      	str	r7, [r4, #24]
    3400:	e009      	b.n	3416 <MPSL_IRQ_CLOCK_Handler+0x222>
    3402:	f000 f8c5 	bl	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3406:	2101      	movs	r1, #1
    3408:	4628      	mov	r0, r5
    340a:	f008 fc76 	bl	bcfa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    340e:	2800      	cmp	r0, #0
    3410:	d0f9      	beq.n	3406 <MPSL_IRQ_CLOCK_Handler+0x212>
    3412:	2002      	movs	r0, #2
    3414:	61a0      	str	r0, [r4, #24]
    3416:	f008 fc9c 	bl	bd52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    341a:	b1b0      	cbz	r0, 344a <MPSL_IRQ_CLOCK_Handler+0x256>
    341c:	f000 fa0c 	bl	3838 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3420:	7e21      	ldrb	r1, [r4, #24]
    3422:	f001 0103 	and.w	r1, r1, #3
    3426:	4288      	cmp	r0, r1
    3428:	d10f      	bne.n	344a <MPSL_IRQ_CLOCK_Handler+0x256>
    342a:	79b0      	ldrb	r0, [r6, #6]
    342c:	b150      	cbz	r0, 3444 <MPSL_IRQ_CLOCK_Handler+0x250>
    342e:	2002      	movs	r0, #2
    3430:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3434:	e06a      	b.n	350c <MPSL_IRQ_CLOCK_Handler+0x318>
    3436:	4844      	ldr	r0, [pc, #272]	; (3548 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3438:	e7ec      	b.n	3414 <MPSL_IRQ_CLOCK_Handler+0x220>
    343a:	4844      	ldr	r0, [pc, #272]	; (354c <MPSL_IRQ_CLOCK_Handler+0x358>)
    343c:	e7ea      	b.n	3414 <MPSL_IRQ_CLOCK_Handler+0x220>
    343e:	f240 312d 	movw	r1, #813	; 0x32d
    3442:	e049      	b.n	34d8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    3444:	f000 f9cc 	bl	37e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3448:	e060      	b.n	350c <MPSL_IRQ_CLOCK_Handler+0x318>
    344a:	60ef      	str	r7, [r5, #12]
    344c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3450:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3454:	69a0      	ldr	r0, [r4, #24]
    3456:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    345a:	f008 fcdf 	bl	be1c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    345e:	b940      	cbnz	r0, 3472 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3460:	f008 fce6 	bl	be30 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3464:	b928      	cbnz	r0, 3472 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3466:	f008 fcfa 	bl	be5e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    346a:	b910      	cbnz	r0, 3472 <MPSL_IRQ_CLOCK_Handler+0x27e>
    346c:	f008 fd0b 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3470:	b138      	cbz	r0, 3482 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3472:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3476:	4836      	ldr	r0, [pc, #216]	; (3550 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3478:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    347c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3480:	6001      	str	r1, [r0, #0]
    3482:	f008 fccb 	bl	be1c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3486:	b940      	cbnz	r0, 349a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3488:	f008 fcd2 	bl	be30 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    348c:	b928      	cbnz	r0, 349a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    348e:	f008 fce6 	bl	be5e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3492:	b910      	cbnz	r0, 349a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3494:	f008 fcf7 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3498:	b110      	cbz	r0, 34a0 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    349a:	482d      	ldr	r0, [pc, #180]	; (3550 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    349c:	3010      	adds	r0, #16
    349e:	6007      	str	r7, [r0, #0]
    34a0:	60af      	str	r7, [r5, #8]
    34a2:	2002      	movs	r0, #2
    34a4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    34a8:	79b0      	ldrb	r0, [r6, #6]
    34aa:	bb78      	cbnz	r0, 350c <MPSL_IRQ_CLOCK_Handler+0x318>
    34ac:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    34b0:	f010 0f02 	tst.w	r0, #2
    34b4:	d00e      	beq.n	34d4 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    34b6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3554 <MPSL_IRQ_CLOCK_Handler+0x360>
    34ba:	f8d9 1000 	ldr.w	r1, [r9]
    34be:	43c9      	mvns	r1, r1
    34c0:	f341 1700 	sbfx	r7, r1, #4, #1
    34c4:	f8d9 1000 	ldr.w	r1, [r9]
    34c8:	f041 0110 	orr.w	r1, r1, #16
    34cc:	f8c9 1000 	str.w	r1, [r9]
    34d0:	1c7f      	adds	r7, r7, #1
    34d2:	e007      	b.n	34e4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    34d4:	f240 21ee 	movw	r1, #750	; 0x2ee
    34d8:	206d      	movs	r0, #109	; 0x6d
    34da:	f000 fa0b 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34de:	bf00      	nop
    34e0:	f000 fb2e 	bl	3b40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    34e4:	4651      	mov	r1, sl
    34e6:	4628      	mov	r0, r5
    34e8:	f008 fc02 	bl	bcf0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    34ec:	2800      	cmp	r0, #0
    34ee:	d0f7      	beq.n	34e0 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    34f0:	f000 f976 	bl	37e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    34f4:	b92f      	cbnz	r7, 3502 <MPSL_IRQ_CLOCK_Handler+0x30e>
    34f6:	f8d9 1000 	ldr.w	r1, [r9]
    34fa:	f021 0110 	bic.w	r1, r1, #16
    34fe:	f8c9 1000 	str.w	r1, [r9]
    3502:	2002      	movs	r0, #2
    3504:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3508:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    350c:	79a0      	ldrb	r0, [r4, #6]
    350e:	b170      	cbz	r0, 352e <MPSL_IRQ_CLOCK_Handler+0x33a>
    3510:	7830      	ldrb	r0, [r6, #0]
    3512:	b960      	cbnz	r0, 352e <MPSL_IRQ_CLOCK_Handler+0x33a>
    3514:	f000 f976 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3518:	4606      	mov	r6, r0
    351a:	f000 fa5b 	bl	39d4 <mpsl_temperature_get>
    351e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3522:	b116      	cbz	r6, 352a <MPSL_IRQ_CLOCK_Handler+0x336>
    3524:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3528:	e001      	b.n	352e <MPSL_IRQ_CLOCK_Handler+0x33a>
    352a:	e9c4 0204 	strd	r0, r2, [r4, #16]
    352e:	2101      	movs	r1, #1
    3530:	4628      	mov	r0, r5
    3532:	f008 fbe2 	bl	bcfa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3536:	b108      	cbz	r0, 353c <MPSL_IRQ_CLOCK_Handler+0x348>
    3538:	f000 f95e 	bl	37f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    353c:	f884 800a 	strb.w	r8, [r4, #10]
    3540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3544:	20000030 	.word	0x20000030
    3548:	00020001 	.word	0x00020001
    354c:	00030001 	.word	0x00030001
    3550:	4000053c 	.word	0x4000053c
    3554:	e000ed10 	.word	0xe000ed10

00003558 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3558:	b510      	push	{r4, lr}
    355a:	f3ef 8410 	mrs	r4, PRIMASK
    355e:	b672      	cpsid	i
    3560:	480a      	ldr	r0, [pc, #40]	; (358c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3562:	7841      	ldrb	r1, [r0, #1]
    3564:	b129      	cbz	r1, 3572 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3566:	7841      	ldrb	r1, [r0, #1]
    3568:	1e49      	subs	r1, r1, #1
    356a:	7041      	strb	r1, [r0, #1]
    356c:	7841      	ldrb	r1, [r0, #1]
    356e:	b129      	cbz	r1, 357c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3570:	e008      	b.n	3584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3572:	f240 110d 	movw	r1, #269	; 0x10d
    3576:	206d      	movs	r0, #109	; 0x6d
    3578:	f000 f9bc 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    357c:	7880      	ldrb	r0, [r0, #2]
    357e:	b908      	cbnz	r0, 3584 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3580:	f000 f94e 	bl	3820 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3584:	2c00      	cmp	r4, #0
    3586:	d100      	bne.n	358a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3588:	b662      	cpsie	i
    358a:	bd10      	pop	{r4, pc}
    358c:	20000030 	.word	0x20000030

00003590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3590:	b510      	push	{r4, lr}
    3592:	f3ef 8410 	mrs	r4, PRIMASK
    3596:	b672      	cpsid	i
    3598:	4806      	ldr	r0, [pc, #24]	; (35b4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    359a:	7841      	ldrb	r1, [r0, #1]
    359c:	1c49      	adds	r1, r1, #1
    359e:	7041      	strb	r1, [r0, #1]
    35a0:	7840      	ldrb	r0, [r0, #1]
    35a2:	2801      	cmp	r0, #1
    35a4:	d101      	bne.n	35aa <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    35a6:	f008 fbbf 	bl	bd28 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    35aa:	2c00      	cmp	r4, #0
    35ac:	d100      	bne.n	35b0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    35ae:	b662      	cpsie	i
    35b0:	bd10      	pop	{r4, pc}
    35b2:	0000      	.short	0x0000
    35b4:	20000030 	.word	0x20000030

000035b8 <mpsl_clock_hfclk_release>:
    35b8:	4805      	ldr	r0, [pc, #20]	; (35d0 <mpsl_clock_hfclk_release+0x18>)
    35ba:	b510      	push	{r4, lr}
    35bc:	78c1      	ldrb	r1, [r0, #3]
    35be:	b121      	cbz	r1, 35ca <mpsl_clock_hfclk_release+0x12>
    35c0:	2100      	movs	r1, #0
    35c2:	7101      	strb	r1, [r0, #4]
    35c4:	70c1      	strb	r1, [r0, #3]
    35c6:	f7ff ffc7 	bl	3558 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    35ca:	2000      	movs	r0, #0
    35cc:	bd10      	pop	{r4, pc}
    35ce:	0000      	.short	0x0000
    35d0:	20000030 	.word	0x20000030

000035d4 <mpsl_clock_hfclk_request>:
    35d4:	b570      	push	{r4, r5, r6, lr}
    35d6:	4c0c      	ldr	r4, [pc, #48]	; (3608 <mpsl_clock_hfclk_request+0x34>)
    35d8:	78e1      	ldrb	r1, [r4, #3]
    35da:	b961      	cbnz	r1, 35f6 <mpsl_clock_hfclk_request+0x22>
    35dc:	2501      	movs	r5, #1
    35de:	70e5      	strb	r5, [r4, #3]
    35e0:	61e0      	str	r0, [r4, #28]
    35e2:	f7ff ffd5 	bl	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    35e6:	f000 f90d 	bl	3804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    35ea:	b130      	cbz	r0, 35fa <mpsl_clock_hfclk_request+0x26>
    35ec:	69e0      	ldr	r0, [r4, #28]
    35ee:	b110      	cbz	r0, 35f6 <mpsl_clock_hfclk_request+0x22>
    35f0:	4780      	blx	r0
    35f2:	2000      	movs	r0, #0
    35f4:	61e0      	str	r0, [r4, #28]
    35f6:	2000      	movs	r0, #0
    35f8:	bd70      	pop	{r4, r5, r6, pc}
    35fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35fe:	7125      	strb	r5, [r4, #4]
    3600:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3604:	e7f7      	b.n	35f6 <mpsl_clock_hfclk_request+0x22>
    3606:	0000      	.short	0x0000
    3608:	20000030 	.word	0x20000030

0000360c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    360c:	f3ef 8010 	mrs	r0, PRIMASK
    3610:	b672      	cpsid	i
    3612:	4904      	ldr	r1, [pc, #16]	; (3624 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3614:	788a      	ldrb	r2, [r1, #2]
    3616:	1c52      	adds	r2, r2, #1
    3618:	708a      	strb	r2, [r1, #2]
    361a:	2800      	cmp	r0, #0
    361c:	d100      	bne.n	3620 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    361e:	b662      	cpsie	i
    3620:	4770      	bx	lr
    3622:	0000      	.short	0x0000
    3624:	20000030 	.word	0x20000030

00003628 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3628:	b510      	push	{r4, lr}
    362a:	f3ef 8410 	mrs	r4, PRIMASK
    362e:	b672      	cpsid	i
    3630:	480a      	ldr	r0, [pc, #40]	; (365c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    3632:	7881      	ldrb	r1, [r0, #2]
    3634:	b129      	cbz	r1, 3642 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3636:	7881      	ldrb	r1, [r0, #2]
    3638:	1e49      	subs	r1, r1, #1
    363a:	7081      	strb	r1, [r0, #2]
    363c:	7841      	ldrb	r1, [r0, #1]
    363e:	b129      	cbz	r1, 364c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3640:	e008      	b.n	3654 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3642:	f240 1125 	movw	r1, #293	; 0x125
    3646:	206d      	movs	r0, #109	; 0x6d
    3648:	f000 f954 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    364c:	7880      	ldrb	r0, [r0, #2]
    364e:	b908      	cbnz	r0, 3654 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3650:	f000 f8e6 	bl	3820 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3654:	2c00      	cmp	r4, #0
    3656:	d100      	bne.n	365a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3658:	b662      	cpsie	i
    365a:	bd10      	pop	{r4, pc}
    365c:	20000030 	.word	0x20000030

00003660 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3664:	0004      	movs	r4, r0
    3666:	f06f 0015 	mvn.w	r0, #21
    366a:	d03c      	beq.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    366c:	7821      	ldrb	r1, [r4, #0]
    366e:	2904      	cmp	r1, #4
    3670:	d839      	bhi.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3672:	2900      	cmp	r1, #0
    3674:	7861      	ldrb	r1, [r4, #1]
    3676:	d038      	beq.n	36ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3678:	2900      	cmp	r1, #0
    367a:	d134      	bne.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    367c:	78a1      	ldrb	r1, [r4, #2]
    367e:	2900      	cmp	r1, #0
    3680:	d131      	bne.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3682:	2000      	movs	r0, #0
    3684:	f008 faff 	bl	bc86 <MPSL_IRQ_RADIO_Handler+0x1e>
    3688:	2000      	movs	r0, #0
    368a:	f008 faef 	bl	bc6c <MPSL_IRQ_RADIO_Handler+0x4>
    368e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3692:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3696:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    369a:	2600      	movs	r6, #0
    369c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    36a0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    36a4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    36a8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    36ac:	4f14      	ldr	r7, [pc, #80]	; (3700 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    36ae:	707e      	strb	r6, [r7, #1]
    36b0:	88a0      	ldrh	r0, [r4, #4]
    36b2:	81b8      	strh	r0, [r7, #12]
    36b4:	f008 fb2f 	bl	bd16 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    36b8:	2501      	movs	r5, #1
    36ba:	b108      	cbz	r0, 36c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    36bc:	70fd      	strb	r5, [r7, #3]
    36be:	707d      	strb	r5, [r7, #1]
    36c0:	2101      	movs	r1, #1
    36c2:	4640      	mov	r0, r8
    36c4:	f008 fb19 	bl	bcfa <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    36c8:	b108      	cbz	r0, 36ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    36ca:	f000 f895 	bl	37f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    36ce:	4620      	mov	r0, r4
    36d0:	f7ff fe7c 	bl	33cc <MPSL_IRQ_CLOCK_Handler+0x1d8>
    36d4:	727d      	strb	r5, [r7, #9]
    36d6:	2000      	movs	r0, #0
    36d8:	f008 fac8 	bl	bc6c <MPSL_IRQ_RADIO_Handler+0x4>
    36dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36e0:	4630      	mov	r0, r6
    36e2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    36e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36ea:	2900      	cmp	r1, #0
    36ec:	d0fb      	beq.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36ee:	2920      	cmp	r1, #32
    36f0:	d8f9      	bhi.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36f2:	78a1      	ldrb	r1, [r4, #2]
    36f4:	2921      	cmp	r1, #33	; 0x21
    36f6:	d8f6      	bhi.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36f8:	2901      	cmp	r1, #1
    36fa:	d1c2      	bne.n	3682 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    36fc:	e7f3      	b.n	36e6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36fe:	0000      	.short	0x0000
    3700:	20000030 	.word	0x20000030

00003704 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3704:	4801      	ldr	r0, [pc, #4]	; (370c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3706:	8980      	ldrh	r0, [r0, #12]
    3708:	4770      	bx	lr
    370a:	0000      	.short	0x0000
    370c:	20000030 	.word	0x20000030

00003710 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    3710:	b510      	push	{r4, lr}
    3712:	480d      	ldr	r0, [pc, #52]	; (3748 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3714:	f008 fb60 	bl	bdd8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3718:	490b      	ldr	r1, [pc, #44]	; (3748 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    371a:	3908      	subs	r1, #8
    371c:	b148      	cbz	r0, 3732 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    371e:	2001      	movs	r0, #1
    3720:	7008      	strb	r0, [r1, #0]
    3722:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3726:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    372a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    372e:	f7ff bf2f 	b.w	3590 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3732:	7a88      	ldrb	r0, [r1, #10]
    3734:	2802      	cmp	r0, #2
    3736:	d101      	bne.n	373c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3738:	f7ff fda0 	bl	327c <MPSL_IRQ_CLOCK_Handler+0x88>
    373c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3740:	4801      	ldr	r0, [pc, #4]	; (3748 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3742:	f008 bb60 	b.w	be06 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3746:	0000      	.short	0x0000
    3748:	20000038 	.word	0x20000038

0000374c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    374c:	4802      	ldr	r0, [pc, #8]	; (3758 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    374e:	7a80      	ldrb	r0, [r0, #10]
    3750:	2800      	cmp	r0, #0
    3752:	d000      	beq.n	3756 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3754:	2001      	movs	r0, #1
    3756:	4770      	bx	lr
    3758:	20000030 	.word	0x20000030

0000375c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    375e:	4d1f      	ldr	r5, [pc, #124]	; (37dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3760:	7ae8      	ldrb	r0, [r5, #11]
    3762:	2800      	cmp	r0, #0
    3764:	d10f      	bne.n	3786 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3766:	7e28      	ldrb	r0, [r5, #24]
    3768:	f000 0003 	and.w	r0, r0, #3
    376c:	f008 fae1 	bl	bd32 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3770:	2800      	cmp	r0, #0
    3772:	d008      	beq.n	3786 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3774:	f3ef 8110 	mrs	r1, PRIMASK
    3778:	b672      	cpsid	i
    377a:	f7ff ffe7 	bl	374c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    377e:	b118      	cbz	r0, 3788 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3780:	2900      	cmp	r1, #0
    3782:	d100      	bne.n	3786 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3784:	b662      	cpsie	i
    3786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3788:	2601      	movs	r6, #1
    378a:	72ae      	strb	r6, [r5, #10]
    378c:	b901      	cbnz	r1, 3790 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    378e:	b662      	cpsie	i
    3790:	2018      	movs	r0, #24
    3792:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3796:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    379a:	61a6      	str	r6, [r4, #24]
    379c:	f44f 7020 	mov.w	r0, #640	; 0x280
    37a0:	f8ad 0000 	strh.w	r0, [sp]
    37a4:	f8bd 0000 	ldrh.w	r0, [sp]
    37a8:	1e41      	subs	r1, r0, #1
    37aa:	f8ad 1000 	strh.w	r1, [sp]
    37ae:	d2f9      	bcs.n	37a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    37b0:	2700      	movs	r7, #0
    37b2:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    37b6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    37ba:	4808      	ldr	r0, [pc, #32]	; (37dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    37bc:	3008      	adds	r0, #8
    37be:	f008 fb1e 	bl	bdfe <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    37c2:	702f      	strb	r7, [r5, #0]
    37c4:	f7ff fd5a 	bl	327c <MPSL_IRQ_CLOCK_Handler+0x88>
    37c8:	6166      	str	r6, [r4, #20]
    37ca:	7968      	ldrb	r0, [r5, #5]
    37cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    37d0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    37d4:	2018      	movs	r0, #24
    37d6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    37da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37dc:	20000030 	.word	0x20000030

000037e0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    37e0:	b510      	push	{r4, lr}
    37e2:	4c04      	ldr	r4, [pc, #16]	; (37f4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    37e4:	7e20      	ldrb	r0, [r4, #24]
    37e6:	f000 0003 	and.w	r0, r0, #3
    37ea:	f008 faa2 	bl	bd32 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    37ee:	2800      	cmp	r0, #0
    37f0:	d0f8      	beq.n	37e4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    37f2:	bd10      	pop	{r4, pc}
    37f4:	20000030 	.word	0x20000030

000037f8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    37f8:	4901      	ldr	r1, [pc, #4]	; (3800 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    37fa:	2001      	movs	r0, #1
    37fc:	7008      	strb	r0, [r1, #0]
    37fe:	4770      	bx	lr
    3800:	20000294 	.word	0x20000294

00003804 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3804:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3808:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    380c:	b918      	cbnz	r0, 3816 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    380e:	4803      	ldr	r0, [pc, #12]	; (381c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    3810:	7800      	ldrb	r0, [r0, #0]
    3812:	2800      	cmp	r0, #0
    3814:	d000      	beq.n	3818 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3816:	2001      	movs	r0, #1
    3818:	4770      	bx	lr
    381a:	0000      	.short	0x0000
    381c:	20000294 	.word	0x20000294

00003820 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    3820:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3824:	2101      	movs	r1, #1
    3826:	6041      	str	r1, [r0, #4]
    3828:	2100      	movs	r1, #0
    382a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    382e:	4801      	ldr	r0, [pc, #4]	; (3834 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    3830:	7001      	strb	r1, [r0, #0]
    3832:	4770      	bx	lr
    3834:	20000294 	.word	0x20000294

00003838 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3838:	4802      	ldr	r0, [pc, #8]	; (3844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    383a:	6800      	ldr	r0, [r0, #0]
    383c:	f000 0003 	and.w	r0, r0, #3
    3840:	4770      	bx	lr
    3842:	0000      	.short	0x0000
    3844:	4000041c 	.word	0x4000041c
    3848:	b510      	push	{r4, lr}
    384a:	b131      	cbz	r1, 385a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    384c:	2901      	cmp	r1, #1
    384e:	d007      	beq.n	3860 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3850:	f240 3102 	movw	r1, #770	; 0x302
    3854:	a005      	add	r0, pc, #20	; (adr r0, 386c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3856:	f000 f821 	bl	389c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    385a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    385e:	e001      	b.n	3864 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3860:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3864:	f000 0001 	and.w	r0, r0, #1
    3868:	bd10      	pop	{r4, pc}
    386a:	0000      	.short	0x0000
    386c:	5f66726e 	.word	0x5f66726e
    3870:	636f6c63 	.word	0x636f6c63
    3874:	00682e6b 	.word	0x00682e6b
    3878:	f3bf 8f4f 	dsb	sy
    387c:	4805      	ldr	r0, [pc, #20]	; (3894 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    387e:	6801      	ldr	r1, [r0, #0]
    3880:	4a05      	ldr	r2, [pc, #20]	; (3898 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    3882:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3886:	4311      	orrs	r1, r2
    3888:	6001      	str	r1, [r0, #0]
    388a:	f3bf 8f4f 	dsb	sy
    388e:	bf00      	nop
    3890:	e7fd      	b.n	388e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    3892:	0000      	.short	0x0000
    3894:	e000ed0c 	.word	0xe000ed0c
    3898:	05fa0004 	.word	0x05fa0004

0000389c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    389c:	b672      	cpsid	i
    389e:	4a03      	ldr	r2, [pc, #12]	; (38ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    38a0:	6852      	ldr	r2, [r2, #4]
    38a2:	b102      	cbz	r2, 38a6 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    38a4:	4790      	blx	r2
    38a6:	f7ff ffe7 	bl	3878 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    38aa:	0000      	.short	0x0000
    38ac:	20000050 	.word	0x20000050
    38b0:	4806      	ldr	r0, [pc, #24]	; (38cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    38b2:	b510      	push	{r4, lr}
    38b4:	2100      	movs	r1, #0
    38b6:	6001      	str	r1, [r0, #0]
    38b8:	2101      	movs	r1, #1
    38ba:	6001      	str	r1, [r0, #0]
    38bc:	4608      	mov	r0, r1
    38be:	f008 fa5f 	bl	bd80 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38c6:	2001      	movs	r0, #1
    38c8:	f008 ba4d 	b.w	bd66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38cc:	40001ffc 	.word	0x40001ffc
    38d0:	4807      	ldr	r0, [pc, #28]	; (38f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    38d2:	b510      	push	{r4, lr}
    38d4:	2101      	movs	r1, #1
    38d6:	6041      	str	r1, [r0, #4]
    38d8:	1e89      	subs	r1, r1, #2
    38da:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    38de:	200c      	movs	r0, #12
    38e0:	f008 fa4e 	bl	bd80 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38e8:	200c      	movs	r0, #12
    38ea:	f008 ba3c 	b.w	bd66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38ee:	0000      	.short	0x0000
    38f0:	4000c000 	.word	0x4000c000

000038f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    38f4:	b50e      	push	{r1, r2, r3, lr}
    38f6:	b672      	cpsid	i
    38f8:	4a0f      	ldr	r2, [pc, #60]	; (3938 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    38fa:	6855      	ldr	r5, [r2, #4]
    38fc:	b1d5      	cbz	r5, 3934 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    38fe:	2200      	movs	r2, #0
    3900:	4603      	mov	r3, r0
    3902:	466e      	mov	r6, sp
    3904:	240a      	movs	r4, #10
    3906:	e003      	b.n	3910 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3908:	fbb0 f0f4 	udiv	r0, r0, r4
    390c:	1c52      	adds	r2, r2, #1
    390e:	b2d2      	uxtb	r2, r2
    3910:	2800      	cmp	r0, #0
    3912:	d1f9      	bne.n	3908 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3914:	54b0      	strb	r0, [r6, r2]
    3916:	e009      	b.n	392c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3918:	fbb3 f0f4 	udiv	r0, r3, r4
    391c:	fb04 3010 	mls	r0, r4, r0, r3
    3920:	fbb3 f3f4 	udiv	r3, r3, r4
    3924:	1e52      	subs	r2, r2, #1
    3926:	b2d2      	uxtb	r2, r2
    3928:	3030      	adds	r0, #48	; 0x30
    392a:	54b0      	strb	r0, [r6, r2]
    392c:	2a00      	cmp	r2, #0
    392e:	d1f3      	bne.n	3918 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3930:	4630      	mov	r0, r6
    3932:	47a8      	blx	r5
    3934:	f7ff ffa0 	bl	3878 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3938:	20000050 	.word	0x20000050

0000393c <mpsl_init>:
    393c:	b570      	push	{r4, r5, r6, lr}
    393e:	4c17      	ldr	r4, [pc, #92]	; (399c <mpsl_init+0x60>)
    3940:	4606      	mov	r6, r0
    3942:	460d      	mov	r5, r1
    3944:	7860      	ldrb	r0, [r4, #1]
    3946:	b110      	cbz	r0, 394e <mpsl_init+0x12>
    3948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    394c:	bd70      	pop	{r4, r5, r6, pc}
    394e:	b906      	cbnz	r6, 3952 <mpsl_init+0x16>
    3950:	4e13      	ldr	r6, [pc, #76]	; (39a0 <mpsl_init+0x64>)
    3952:	6062      	str	r2, [r4, #4]
    3954:	7025      	strb	r5, [r4, #0]
    3956:	f7ff ffab 	bl	38b0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    395a:	f7ff ffb9 	bl	38d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    395e:	4630      	mov	r0, r6
    3960:	f7ff fe7e 	bl	3660 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3964:	0006      	movs	r6, r0
    3966:	d1f1      	bne.n	394c <mpsl_init+0x10>
    3968:	f7fe febe 	bl	26e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    396c:	f7ff fef6 	bl	375c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    3970:	f008 f8d4 	bl	bb1c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3974:	4628      	mov	r0, r5
    3976:	f008 f9f6 	bl	bd66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    397a:	2001      	movs	r0, #1
    397c:	2d00      	cmp	r5, #0
    397e:	db09      	blt.n	3994 <mpsl_init+0x58>
    3980:	f005 011f 	and.w	r1, r5, #31
    3984:	fa00 f101 	lsl.w	r1, r0, r1
    3988:	096a      	lsrs	r2, r5, #5
    398a:	0092      	lsls	r2, r2, #2
    398c:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3990:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    3994:	7060      	strb	r0, [r4, #1]
    3996:	4630      	mov	r0, r6
    3998:	bd70      	pop	{r4, r5, r6, pc}
    399a:	0000      	.short	0x0000
    399c:	20000050 	.word	0x20000050
    39a0:	0000bda2 	.word	0x0000bda2

000039a4 <mpsl_is_initialized>:
    39a4:	4801      	ldr	r0, [pc, #4]	; (39ac <mpsl_is_initialized+0x8>)
    39a6:	7840      	ldrb	r0, [r0, #1]
    39a8:	4770      	bx	lr
    39aa:	0000      	.short	0x0000
    39ac:	20000050 	.word	0x20000050

000039b0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    39b0:	4807      	ldr	r0, [pc, #28]	; (39d0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    39b2:	f990 0000 	ldrsb.w	r0, [r0]
    39b6:	2800      	cmp	r0, #0
    39b8:	db09      	blt.n	39ce <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    39ba:	f000 021f 	and.w	r2, r0, #31
    39be:	2101      	movs	r1, #1
    39c0:	4091      	lsls	r1, r2
    39c2:	0940      	lsrs	r0, r0, #5
    39c4:	0080      	lsls	r0, r0, #2
    39c6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    39ca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    39ce:	4770      	bx	lr
    39d0:	20000050 	.word	0x20000050

000039d4 <mpsl_temperature_get>:
    39d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d8:	2601      	movs	r6, #1
    39da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    39de:	0331      	lsls	r1, r6, #12
    39e0:	f04f 0800 	mov.w	r8, #0
    39e4:	4640      	mov	r0, r8
    39e6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    39ea:	f3bf 8f4f 	dsb	sy
    39ee:	f3bf 8f6f 	isb	sy
    39f2:	4c16      	ldr	r4, [pc, #88]	; (3a4c <mpsl_temperature_get+0x78>)
    39f4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    39f8:	200c      	movs	r0, #12
    39fa:	f008 f9e0 	bl	bdbe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    39fe:	4d14      	ldr	r5, [pc, #80]	; (3a50 <mpsl_temperature_get+0x7c>)
    3a00:	6828      	ldr	r0, [r5, #0]
    3a02:	43c0      	mvns	r0, r0
    3a04:	f340 1700 	sbfx	r7, r0, #4, #1
    3a08:	6828      	ldr	r0, [r5, #0]
    3a0a:	f040 0010 	orr.w	r0, r0, #16
    3a0e:	6028      	str	r0, [r5, #0]
    3a10:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3a14:	6026      	str	r6, [r4, #0]
    3a16:	1c7f      	adds	r7, r7, #1
    3a18:	e002      	b.n	3a20 <mpsl_temperature_get+0x4c>
    3a1a:	bf00      	nop
    3a1c:	f000 f890 	bl	3b40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3a20:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3a24:	2800      	cmp	r0, #0
    3a26:	d0f9      	beq.n	3a1c <mpsl_temperature_get+0x48>
    3a28:	b91f      	cbnz	r7, 3a32 <mpsl_temperature_get+0x5e>
    3a2a:	6828      	ldr	r0, [r5, #0]
    3a2c:	f020 0010 	bic.w	r0, r0, #16
    3a30:	6028      	str	r0, [r5, #0]
    3a32:	4808      	ldr	r0, [pc, #32]	; (3a54 <mpsl_temperature_get+0x80>)
    3a34:	6805      	ldr	r5, [r0, #0]
    3a36:	6066      	str	r6, [r4, #4]
    3a38:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3a3c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3a40:	200c      	movs	r0, #12
    3a42:	f008 f9bc 	bl	bdbe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3a46:	4628      	mov	r0, r5
    3a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a4c:	4000c000 	.word	0x4000c000
    3a50:	e000ed10 	.word	0xe000ed10
    3a54:	4000c508 	.word	0x4000c508

00003a58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3a58:	b510      	push	{r4, lr}
    3a5a:	4602      	mov	r2, r0
    3a5c:	2005      	movs	r0, #5
    3a5e:	490c      	ldr	r1, [pc, #48]	; (3a90 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3a60:	e004      	b.n	3a6c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3a62:	bf00      	nop
    3a64:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3a68:	791b      	ldrb	r3, [r3, #4]
    3a6a:	b133      	cbz	r3, 3a7a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3a6c:	1e40      	subs	r0, r0, #1
    3a6e:	b2c0      	uxtb	r0, r0
    3a70:	d2f8      	bcs.n	3a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3a72:	2148      	movs	r1, #72	; 0x48
    3a74:	2069      	movs	r0, #105	; 0x69
    3a76:	f7ff ff3d 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a7a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3a7e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3a82:	2200      	movs	r2, #0
    3a84:	714a      	strb	r2, [r1, #5]
    3a86:	718a      	strb	r2, [r1, #6]
    3a88:	2201      	movs	r2, #1
    3a8a:	710a      	strb	r2, [r1, #4]
    3a8c:	bd10      	pop	{r4, pc}
    3a8e:	0000      	.short	0x0000
    3a90:	20000ff8 	.word	0x20000ff8

00003a94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3a94:	b510      	push	{r4, lr}
    3a96:	2805      	cmp	r0, #5
    3a98:	d301      	bcc.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3a9a:	2158      	movs	r1, #88	; 0x58
    3a9c:	e006      	b.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3a9e:	490a      	ldr	r1, [pc, #40]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    3aa0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3aa4:	7901      	ldrb	r1, [r0, #4]
    3aa6:	2901      	cmp	r1, #1
    3aa8:	d003      	beq.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3aaa:	2159      	movs	r1, #89	; 0x59
    3aac:	2069      	movs	r0, #105	; 0x69
    3aae:	f7ff ff21 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ab2:	7941      	ldrb	r1, [r0, #5]
    3ab4:	7982      	ldrb	r2, [r0, #6]
    3ab6:	1c49      	adds	r1, r1, #1
    3ab8:	b2c9      	uxtb	r1, r1
    3aba:	428a      	cmp	r2, r1
    3abc:	d000      	beq.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3abe:	7141      	strb	r1, [r0, #5]
    3ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ac4:	f7ff bf74 	b.w	39b0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3ac8:	20000ff8 	.word	0x20000ff8

00003acc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3acc:	b570      	push	{r4, r5, r6, lr}
    3ace:	2505      	movs	r5, #5
    3ad0:	4e0e      	ldr	r6, [pc, #56]	; (3b0c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3ad2:	4c0f      	ldr	r4, [pc, #60]	; (3b10 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3ad4:	e016      	b.n	3b04 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3ad6:	7821      	ldrb	r1, [r4, #0]
    3ad8:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3adc:	7902      	ldrb	r2, [r0, #4]
    3ade:	2a01      	cmp	r2, #1
    3ae0:	d108      	bne.n	3af4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3ae2:	7942      	ldrb	r2, [r0, #5]
    3ae4:	7983      	ldrb	r3, [r0, #6]
    3ae6:	429a      	cmp	r2, r3
    3ae8:	d004      	beq.n	3af4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3aea:	7942      	ldrb	r2, [r0, #5]
    3aec:	7182      	strb	r2, [r0, #6]
    3aee:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3af2:	4780      	blx	r0
    3af4:	7820      	ldrb	r0, [r4, #0]
    3af6:	1c40      	adds	r0, r0, #1
    3af8:	b2c0      	uxtb	r0, r0
    3afa:	7020      	strb	r0, [r4, #0]
    3afc:	2805      	cmp	r0, #5
    3afe:	d301      	bcc.n	3b04 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3b00:	2000      	movs	r0, #0
    3b02:	7020      	strb	r0, [r4, #0]
    3b04:	1e6d      	subs	r5, r5, #1
    3b06:	b2ed      	uxtb	r5, r5
    3b08:	d2e5      	bcs.n	3ad6 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3b0a:	bd70      	pop	{r4, r5, r6, pc}
    3b0c:	20000ff8 	.word	0x20000ff8
    3b10:	20000295 	.word	0x20000295

00003b14 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3b14:	b500      	push	{lr}
    3b16:	f008 f981 	bl	be1c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b1a:	b940      	cbnz	r0, 3b2e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b1c:	f008 f988 	bl	be30 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b20:	b928      	cbnz	r0, 3b2e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b22:	f008 f99c 	bl	be5e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b26:	b910      	cbnz	r0, 3b2e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b28:	f008 f9ad 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b2c:	b108      	cbz	r0, 3b32 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3b2e:	4802      	ldr	r0, [pc, #8]	; (3b38 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3b30:	bd00      	pop	{pc}
    3b32:	4802      	ldr	r0, [pc, #8]	; (3b3c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3b34:	bd00      	pop	{pc}
    3b36:	0000      	.short	0x0000
    3b38:	4000050c 	.word	0x4000050c
    3b3c:	4001e700 	.word	0x4001e700

00003b40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3b40:	b510      	push	{r4, lr}
    3b42:	f008 f9a0 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b46:	b330      	cbz	r0, 3b96 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3b48:	f3ef 8010 	mrs	r0, PRIMASK
    3b4c:	b1c8      	cbz	r0, 3b82 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3b4e:	2100      	movs	r1, #0
    3b50:	b672      	cpsid	i
    3b52:	4812      	ldr	r0, [pc, #72]	; (3b9c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3b54:	6802      	ldr	r2, [r0, #0]
    3b56:	6803      	ldr	r3, [r0, #0]
    3b58:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3b5c:	f043 0310 	orr.w	r3, r3, #16
    3b60:	6003      	str	r3, [r0, #0]
    3b62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3b66:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3b6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3b6e:	431c      	orrs	r4, r3
    3b70:	d000      	beq.n	3b74 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3b72:	bf40      	sev
    3b74:	bf20      	wfe
    3b76:	bf00      	nop
    3b78:	bf00      	nop
    3b7a:	bf00      	nop
    3b7c:	bf00      	nop
    3b7e:	b112      	cbz	r2, 3b86 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3b80:	e005      	b.n	3b8e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3b82:	2101      	movs	r1, #1
    3b84:	e7e4      	b.n	3b50 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3b86:	6802      	ldr	r2, [r0, #0]
    3b88:	f022 0210 	bic.w	r2, r2, #16
    3b8c:	6002      	str	r2, [r0, #0]
    3b8e:	2900      	cmp	r1, #0
    3b90:	d000      	beq.n	3b94 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3b92:	b662      	cpsie	i
    3b94:	bd10      	pop	{r4, pc}
    3b96:	bf20      	wfe
    3b98:	bd10      	pop	{r4, pc}
    3b9a:	0000      	.short	0x0000
    3b9c:	e000ed10 	.word	0xe000ed10

00003ba0 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3ba0:	0000c0f7 0000c113 0000c101 0000c10d     ................
    3bb0:	0000c0fb 0000c0f5 0000c0f3 0000c119     ................
    3bc0:	0000c107 0000c0ed 0000c0e5 0000c0e9     ................
    3bd0:	0000c0df                                ....

00003bd4 <mpsl_fem_disable>:
    3bd4:	4801      	ldr	r0, [pc, #4]	; (3bdc <mpsl_fem_disable+0x8>)
    3bd6:	6800      	ldr	r0, [r0, #0]
    3bd8:	6800      	ldr	r0, [r0, #0]
    3bda:	4700      	bx	r0
    3bdc:	20000058 	.word	0x20000058

00003be0 <mpsl_fem_lna_configuration_clear>:
    3be0:	4801      	ldr	r0, [pc, #4]	; (3be8 <mpsl_fem_lna_configuration_clear+0x8>)
    3be2:	6800      	ldr	r0, [r0, #0]
    3be4:	6900      	ldr	r0, [r0, #16]
    3be6:	4700      	bx	r0
    3be8:	20000058 	.word	0x20000058

00003bec <mpsl_fem_lna_configuration_set>:
    3bec:	4a01      	ldr	r2, [pc, #4]	; (3bf4 <mpsl_fem_lna_configuration_set+0x8>)
    3bee:	6812      	ldr	r2, [r2, #0]
    3bf0:	6892      	ldr	r2, [r2, #8]
    3bf2:	4710      	bx	r2
    3bf4:	20000058 	.word	0x20000058

00003bf8 <mpsl_fem_pa_configuration_clear>:
    3bf8:	4801      	ldr	r0, [pc, #4]	; (3c00 <mpsl_fem_pa_configuration_clear+0x8>)
    3bfa:	6800      	ldr	r0, [r0, #0]
    3bfc:	68c0      	ldr	r0, [r0, #12]
    3bfe:	4700      	bx	r0
    3c00:	20000058 	.word	0x20000058

00003c04 <mpsl_fem_pa_configuration_set>:
    3c04:	4a01      	ldr	r2, [pc, #4]	; (3c0c <mpsl_fem_pa_configuration_set+0x8>)
    3c06:	6812      	ldr	r2, [r2, #0]
    3c08:	6852      	ldr	r2, [r2, #4]
    3c0a:	4710      	bx	r2
    3c0c:	20000058 	.word	0x20000058

00003c10 <mpsl_fem_pa_is_configured>:
    3c10:	4901      	ldr	r1, [pc, #4]	; (3c18 <mpsl_fem_pa_is_configured+0x8>)
    3c12:	6809      	ldr	r1, [r1, #0]
    3c14:	6a09      	ldr	r1, [r1, #32]
    3c16:	4708      	bx	r1
    3c18:	20000058 	.word	0x20000058

00003c1c <mpsl_fem_device_config_254_apply_get>:
    3c1c:	4801      	ldr	r0, [pc, #4]	; (3c24 <mpsl_fem_device_config_254_apply_get+0x8>)
    3c1e:	7800      	ldrb	r0, [r0, #0]
    3c20:	4770      	bx	lr
    3c22:	0000      	.short	0x0000
    3c24:	20000296 	.word	0x20000296
    3c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c2a:	4c17      	ldr	r4, [pc, #92]	; (3c88 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3c2c:	7a20      	ldrb	r0, [r4, #8]
    3c2e:	2802      	cmp	r0, #2
    3c30:	d200      	bcs.n	3c34 <mpsl_fem_device_config_254_apply_get+0x18>
    3c32:	2002      	movs	r0, #2
    3c34:	f88d 0001 	strb.w	r0, [sp, #1]
    3c38:	79e0      	ldrb	r0, [r4, #7]
    3c3a:	2803      	cmp	r0, #3
    3c3c:	d200      	bcs.n	3c40 <mpsl_fem_device_config_254_apply_get+0x24>
    3c3e:	2003      	movs	r0, #3
    3c40:	f88d 0000 	strb.w	r0, [sp]
    3c44:	79a0      	ldrb	r0, [r4, #6]
    3c46:	f8ad 0004 	strh.w	r0, [sp, #4]
    3c4a:	7960      	ldrb	r0, [r4, #5]
    3c4c:	f8ad 0002 	strh.w	r0, [sp, #2]
    3c50:	4668      	mov	r0, sp
    3c52:	f006 f95b 	bl	9f0c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3c56:	b108      	cbz	r0, 3c5c <mpsl_fem_device_config_254_apply_get+0x40>
    3c58:	2184      	movs	r1, #132	; 0x84
    3c5a:	e010      	b.n	3c7e <mpsl_fem_device_config_254_apply_get+0x62>
    3c5c:	68e0      	ldr	r0, [r4, #12]
    3c5e:	9002      	str	r0, [sp, #8]
    3c60:	a802      	add	r0, sp, #8
    3c62:	f006 f969 	bl	9f38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3c66:	b108      	cbz	r0, 3c6c <mpsl_fem_device_config_254_apply_get+0x50>
    3c68:	2188      	movs	r1, #136	; 0x88
    3c6a:	e008      	b.n	3c7e <mpsl_fem_device_config_254_apply_get+0x62>
    3c6c:	4807      	ldr	r0, [pc, #28]	; (3c8c <mpsl_fem_device_config_254_apply_get+0x70>)
    3c6e:	6800      	ldr	r0, [r0, #0]
    3c70:	9003      	str	r0, [sp, #12]
    3c72:	a803      	add	r0, sp, #12
    3c74:	f00b fb41 	bl	f2fa <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3c78:	2800      	cmp	r0, #0
    3c7a:	d003      	beq.n	3c84 <mpsl_fem_device_config_254_apply_get+0x68>
    3c7c:	218c      	movs	r1, #140	; 0x8c
    3c7e:	2003      	movs	r0, #3
    3c80:	f000 f8e4 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c84:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3c86:	0000      	.short	0x0000
    3c88:	20001020 	.word	0x20001020
    3c8c:	00003f34 	.word	0x00003f34

00003c90 <sdc_build_revision_get>:
    3c90:	b510      	push	{r4, lr}
    3c92:	b128      	cbz	r0, 3ca0 <sdc_build_revision_get+0x10>
    3c94:	2214      	movs	r2, #20
    3c96:	4904      	ldr	r1, [pc, #16]	; (3ca8 <sdc_build_revision_get+0x18>)
    3c98:	f008 f947 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c9c:	2000      	movs	r0, #0
    3c9e:	bd10      	pop	{r4, pc}
    3ca0:	f06f 0015 	mvn.w	r0, #21
    3ca4:	bd10      	pop	{r4, pc}
    3ca6:	0000      	.short	0x0000
    3ca8:	00003f50 	.word	0x00003f50

00003cac <sdc_cfg_set>:
    3cac:	b570      	push	{r4, r5, r6, lr}
    3cae:	0003      	movs	r3, r0
    3cb0:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3cb4:	d103      	bne.n	3cbe <sdc_cfg_set+0x12>
    3cb6:	4c29      	ldr	r4, [pc, #164]	; (3d5c <sdc_cfg_set+0xb0>)
    3cb8:	7863      	ldrb	r3, [r4, #1]
    3cba:	b10b      	cbz	r3, 3cc0 <sdc_cfg_set+0x14>
    3cbc:	1180      	asrs	r0, r0, #6
    3cbe:	bd70      	pop	{r4, r5, r6, pc}
    3cc0:	b309      	cbz	r1, 3d06 <sdc_cfg_set+0x5a>
    3cc2:	f06f 0515 	mvn.w	r5, #21
    3cc6:	b37a      	cbz	r2, 3d28 <sdc_cfg_set+0x7c>
    3cc8:	4b25      	ldr	r3, [pc, #148]	; (3d60 <sdc_cfg_set+0xb4>)
    3cca:	290c      	cmp	r1, #12
    3ccc:	d241      	bcs.n	3d52 <sdc_cfg_set+0xa6>
    3cce:	e8df f001 	tbb	[pc, r1]
    3cd2:	0640      	.short	0x0640
    3cd4:	13100c09 	.word	0x13100c09
    3cd8:	2616231b 	.word	0x2616231b
    3cdc:	312c      	.short	0x312c
    3cde:	7810      	ldrb	r0, [r2, #0]
    3ce0:	7018      	strb	r0, [r3, #0]
    3ce2:	e02b      	b.n	3d3c <sdc_cfg_set+0x90>
    3ce4:	7810      	ldrb	r0, [r2, #0]
    3ce6:	7058      	strb	r0, [r3, #1]
    3ce8:	e028      	b.n	3d3c <sdc_cfg_set+0x90>
    3cea:	6810      	ldr	r0, [r2, #0]
    3cec:	f8c3 0005 	str.w	r0, [r3, #5]
    3cf0:	e024      	b.n	3d3c <sdc_cfg_set+0x90>
    3cf2:	6810      	ldr	r0, [r2, #0]
    3cf4:	60d8      	str	r0, [r3, #12]
    3cf6:	e021      	b.n	3d3c <sdc_cfg_set+0x90>
    3cf8:	7810      	ldrb	r0, [r2, #0]
    3cfa:	7098      	strb	r0, [r3, #2]
    3cfc:	e01e      	b.n	3d3c <sdc_cfg_set+0x90>
    3cfe:	7811      	ldrb	r1, [r2, #0]
    3d00:	2900      	cmp	r1, #0
    3d02:	d1dc      	bne.n	3cbe <sdc_cfg_set+0x12>
    3d04:	70d9      	strb	r1, [r3, #3]
    3d06:	e019      	b.n	3d3c <sdc_cfg_set+0x90>
    3d08:	78e0      	ldrb	r0, [r4, #3]
    3d0a:	b110      	cbz	r0, 3d12 <sdc_cfg_set+0x66>
    3d0c:	7810      	ldrb	r0, [r2, #0]
    3d0e:	2802      	cmp	r0, #2
    3d10:	d31f      	bcc.n	3d52 <sdc_cfg_set+0xa6>
    3d12:	7810      	ldrb	r0, [r2, #0]
    3d14:	7418      	strb	r0, [r3, #16]
    3d16:	e011      	b.n	3d3c <sdc_cfg_set+0x90>
    3d18:	8810      	ldrh	r0, [r2, #0]
    3d1a:	8258      	strh	r0, [r3, #18]
    3d1c:	e00e      	b.n	3d3c <sdc_cfg_set+0x90>
    3d1e:	7811      	ldrb	r1, [r2, #0]
    3d20:	2900      	cmp	r1, #0
    3d22:	d1cc      	bne.n	3cbe <sdc_cfg_set+0x12>
    3d24:	7119      	strb	r1, [r3, #4]
    3d26:	e009      	b.n	3d3c <sdc_cfg_set+0x90>
    3d28:	e013      	b.n	3d52 <sdc_cfg_set+0xa6>
    3d2a:	7810      	ldrb	r0, [r2, #0]
    3d2c:	2802      	cmp	r0, #2
    3d2e:	d310      	bcc.n	3d52 <sdc_cfg_set+0xa6>
    3d30:	7518      	strb	r0, [r3, #20]
    3d32:	e003      	b.n	3d3c <sdc_cfg_set+0x90>
    3d34:	7811      	ldrb	r1, [r2, #0]
    3d36:	2900      	cmp	r1, #0
    3d38:	d1c1      	bne.n	3cbe <sdc_cfg_set+0x12>
    3d3a:	7559      	strb	r1, [r3, #21]
    3d3c:	2201      	movs	r2, #1
    3d3e:	4908      	ldr	r1, [pc, #32]	; (3d60 <sdc_cfg_set+0xb4>)
    3d40:	2000      	movs	r0, #0
    3d42:	f008 f9eb 	bl	c11c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3d46:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3d4a:	db04      	blt.n	3d56 <sdc_cfg_set+0xaa>
    3d4c:	f06f 000b 	mvn.w	r0, #11
    3d50:	bd70      	pop	{r4, r5, r6, pc}
    3d52:	4628      	mov	r0, r5
    3d54:	bd70      	pop	{r4, r5, r6, pc}
    3d56:	2101      	movs	r1, #1
    3d58:	70a1      	strb	r1, [r4, #2]
    3d5a:	bd70      	pop	{r4, r5, r6, pc}
    3d5c:	2000005c 	.word	0x2000005c
    3d60:	20001020 	.word	0x20001020

00003d64 <sdc_enable>:
    3d64:	b570      	push	{r4, r5, r6, lr}
    3d66:	460c      	mov	r4, r1
    3d68:	0005      	movs	r5, r0
    3d6a:	d019      	beq.n	3da0 <sdc_enable+0x3c>
    3d6c:	b1c4      	cbz	r4, 3da0 <sdc_enable+0x3c>
    3d6e:	f000 f915 	bl	3f9c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3d72:	b1c0      	cbz	r0, 3da6 <sdc_enable+0x42>
    3d74:	4628      	mov	r0, r5
    3d76:	f7ff fe6f 	bl	3a58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3d7a:	4d0c      	ldr	r5, [pc, #48]	; (3dac <sdc_enable+0x48>)
    3d7c:	2200      	movs	r2, #0
    3d7e:	490c      	ldr	r1, [pc, #48]	; (3db0 <sdc_enable+0x4c>)
    3d80:	7028      	strb	r0, [r5, #0]
    3d82:	4620      	mov	r0, r4
    3d84:	f008 f9ca 	bl	c11c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3d88:	f00b ff20 	bl	fbcc <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3d8c:	2100      	movs	r1, #0
    3d8e:	7828      	ldrb	r0, [r5, #0]
    3d90:	f006 fb12 	bl	a3b8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3d94:	f7ff ff48 	bl	3c28 <mpsl_fem_device_config_254_apply_get+0xc>
    3d98:	2001      	movs	r0, #1
    3d9a:	7068      	strb	r0, [r5, #1]
    3d9c:	2000      	movs	r0, #0
    3d9e:	bd70      	pop	{r4, r5, r6, pc}
    3da0:	f06f 0015 	mvn.w	r0, #21
    3da4:	bd70      	pop	{r4, r5, r6, pc}
    3da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3daa:	bd70      	pop	{r4, r5, r6, pc}
    3dac:	2000005c 	.word	0x2000005c
    3db0:	20001020 	.word	0x20001020

00003db4 <sdc_init>:
    3db4:	b530      	push	{r4, r5, lr}
    3db6:	b087      	sub	sp, #28
    3db8:	0005      	movs	r5, r0
    3dba:	d00c      	beq.n	3dd6 <sdc_init+0x22>
    3dbc:	f7ff fdf2 	bl	39a4 <mpsl_is_initialized>
    3dc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3dc4:	b120      	cbz	r0, 3dd0 <sdc_init+0x1c>
    3dc6:	f7ff fc9d 	bl	3704 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3dca:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3dce:	d905      	bls.n	3ddc <sdc_init+0x28>
    3dd0:	4620      	mov	r0, r4
    3dd2:	b007      	add	sp, #28
    3dd4:	bd30      	pop	{r4, r5, pc}
    3dd6:	f06f 0015 	mvn.w	r0, #21
    3dda:	e7fa      	b.n	3dd2 <sdc_init+0x1e>
    3ddc:	4c15      	ldr	r4, [pc, #84]	; (3e34 <sdc_init+0x80>)
    3dde:	4816      	ldr	r0, [pc, #88]	; (3e38 <sdc_init+0x84>)
    3de0:	6065      	str	r5, [r4, #4]
    3de2:	f000 f9eb 	bl	41bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3de6:	2000      	movs	r0, #0
    3de8:	7060      	strb	r0, [r4, #1]
    3dea:	70a0      	strb	r0, [r4, #2]
    3dec:	70e0      	strb	r0, [r4, #3]
    3dee:	4601      	mov	r1, r0
    3df0:	2218      	movs	r2, #24
    3df2:	4668      	mov	r0, sp
    3df4:	f008 f913 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3df8:	2218      	movs	r2, #24
    3dfa:	4910      	ldr	r1, [pc, #64]	; (3e3c <sdc_init+0x88>)
    3dfc:	4668      	mov	r0, sp
    3dfe:	f008 f894 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e02:	2218      	movs	r2, #24
    3e04:	4669      	mov	r1, sp
    3e06:	480e      	ldr	r0, [pc, #56]	; (3e40 <sdc_init+0x8c>)
    3e08:	f008 f88f 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e0c:	f3ef 8410 	mrs	r4, PRIMASK
    3e10:	b672      	cpsid	i
    3e12:	480c      	ldr	r0, [pc, #48]	; (3e44 <sdc_init+0x90>)
    3e14:	f06f 010c 	mvn.w	r1, #12
    3e18:	f000 fd9e 	bl	4958 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3e1c:	480a      	ldr	r0, [pc, #40]	; (3e48 <sdc_init+0x94>)
    3e1e:	f000 fe6b 	bl	4af8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3e22:	b118      	cbz	r0, 3e2c <sdc_init+0x78>
    3e24:	219a      	movs	r1, #154	; 0x9a
    3e26:	2003      	movs	r0, #3
    3e28:	f000 f810 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e2c:	b904      	cbnz	r4, 3e30 <sdc_init+0x7c>
    3e2e:	b662      	cpsie	i
    3e30:	2000      	movs	r0, #0
    3e32:	e7ce      	b.n	3dd2 <sdc_init+0x1e>
    3e34:	2000005c 	.word	0x2000005c
    3e38:	00003c29 	.word	0x00003c29
    3e3c:	00003f38 	.word	0x00003f38
    3e40:	20001020 	.word	0x20001020
    3e44:	4000c000 	.word	0x4000c000
    3e48:	00003fc9 	.word	0x00003fc9

00003e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3e4c:	b50e      	push	{r1, r2, r3, lr}
    3e4e:	b672      	cpsid	i
    3e50:	4a15      	ldr	r2, [pc, #84]	; (3ea8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3e52:	6855      	ldr	r5, [r2, #4]
    3e54:	b1d5      	cbz	r5, 3e8c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3e56:	2200      	movs	r2, #0
    3e58:	4603      	mov	r3, r0
    3e5a:	466e      	mov	r6, sp
    3e5c:	240a      	movs	r4, #10
    3e5e:	e003      	b.n	3e68 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3e60:	fbb0 f0f4 	udiv	r0, r0, r4
    3e64:	1c52      	adds	r2, r2, #1
    3e66:	b2d2      	uxtb	r2, r2
    3e68:	2800      	cmp	r0, #0
    3e6a:	d1f9      	bne.n	3e60 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3e6c:	54b0      	strb	r0, [r6, r2]
    3e6e:	e009      	b.n	3e84 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3e70:	fbb3 f0f4 	udiv	r0, r3, r4
    3e74:	fb04 3010 	mls	r0, r4, r0, r3
    3e78:	fbb3 f3f4 	udiv	r3, r3, r4
    3e7c:	1e52      	subs	r2, r2, #1
    3e7e:	b2d2      	uxtb	r2, r2
    3e80:	3030      	adds	r0, #48	; 0x30
    3e82:	54b0      	strb	r0, [r6, r2]
    3e84:	2a00      	cmp	r2, #0
    3e86:	d1f3      	bne.n	3e70 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3e88:	4630      	mov	r0, r6
    3e8a:	47a8      	blx	r5
    3e8c:	f3bf 8f4f 	dsb	sy
    3e90:	4806      	ldr	r0, [pc, #24]	; (3eac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3e92:	6801      	ldr	r1, [r0, #0]
    3e94:	4a06      	ldr	r2, [pc, #24]	; (3eb0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3e96:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3e9a:	4311      	orrs	r1, r2
    3e9c:	6001      	str	r1, [r0, #0]
    3e9e:	f3bf 8f4f 	dsb	sy
    3ea2:	bf00      	nop
    3ea4:	e7fd      	b.n	3ea2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3ea6:	0000      	.short	0x0000
    3ea8:	2000005c 	.word	0x2000005c
    3eac:	e000ed0c 	.word	0xe000ed0c
    3eb0:	05fa0004 	.word	0x05fa0004

00003eb4 <sdc_support_adv>:
    3eb4:	4806      	ldr	r0, [pc, #24]	; (3ed0 <sdc_support_adv+0x1c>)
    3eb6:	b510      	push	{r4, lr}
    3eb8:	7881      	ldrb	r1, [r0, #2]
    3eba:	7840      	ldrb	r0, [r0, #1]
    3ebc:	4301      	orrs	r1, r0
    3ebe:	d002      	beq.n	3ec6 <sdc_support_adv+0x12>
    3ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	f006 fa97 	bl	a3f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3eca:	2000      	movs	r0, #0
    3ecc:	bd10      	pop	{r4, pc}
    3ece:	0000      	.short	0x0000
    3ed0:	2000005c 	.word	0x2000005c

00003ed4 <sdc_support_dle>:
    3ed4:	4806      	ldr	r0, [pc, #24]	; (3ef0 <sdc_support_dle+0x1c>)
    3ed6:	b510      	push	{r4, lr}
    3ed8:	7881      	ldrb	r1, [r0, #2]
    3eda:	7840      	ldrb	r0, [r0, #1]
    3edc:	4301      	orrs	r1, r0
    3ede:	d002      	beq.n	3ee6 <sdc_support_dle+0x12>
    3ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ee4:	bd10      	pop	{r4, pc}
    3ee6:	f006 f83f 	bl	9f68 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3eea:	2000      	movs	r0, #0
    3eec:	bd10      	pop	{r4, pc}
    3eee:	0000      	.short	0x0000
    3ef0:	2000005c 	.word	0x2000005c

00003ef4 <sdc_support_le_2m_phy>:
    3ef4:	4806      	ldr	r0, [pc, #24]	; (3f10 <sdc_support_le_2m_phy+0x1c>)
    3ef6:	b510      	push	{r4, lr}
    3ef8:	7881      	ldrb	r1, [r0, #2]
    3efa:	7840      	ldrb	r0, [r0, #1]
    3efc:	4301      	orrs	r1, r0
    3efe:	d002      	beq.n	3f06 <sdc_support_le_2m_phy+0x12>
    3f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f04:	bd10      	pop	{r4, pc}
    3f06:	f00b fbc8 	bl	f69a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3f0a:	2000      	movs	r0, #0
    3f0c:	bd10      	pop	{r4, pc}
    3f0e:	0000      	.short	0x0000
    3f10:	2000005c 	.word	0x2000005c

00003f14 <sdc_support_slave>:
    3f14:	4806      	ldr	r0, [pc, #24]	; (3f30 <sdc_support_slave+0x1c>)
    3f16:	b510      	push	{r4, lr}
    3f18:	7881      	ldrb	r1, [r0, #2]
    3f1a:	7840      	ldrb	r0, [r0, #1]
    3f1c:	4301      	orrs	r1, r0
    3f1e:	d002      	beq.n	3f26 <sdc_support_slave+0x12>
    3f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f24:	bd10      	pop	{r4, pc}
    3f26:	f006 fa79 	bl	a41c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3f2a:	2000      	movs	r0, #0
    3f2c:	bd10      	pop	{r4, pc}
    3f2e:	0000      	.short	0x0000
    3f30:	2000005c 	.word	0x2000005c
    3f34:	00000001 	.word	0x00000001
    3f38:	00010101 	.word	0x00010101
    3f3c:	031b1b00 	.word	0x031b1b00
    3f40:	00000002 	.word	0x00000002
    3f44:	00001d4c 	.word	0x00001d4c
    3f48:	001f0003 	.word	0x001f0003
    3f4c:	00000000 	.word	0x00000000
    3f50:	66c5e70e 	.word	0x66c5e70e
    3f54:	ac3c1867 	.word	0xac3c1867
    3f58:	81ccd2b3 	.word	0x81ccd2b3
    3f5c:	c0f1dca3 	.word	0xc0f1dca3
    3f60:	220236c0 	.word	0x220236c0

00003f64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3f64:	4a05      	ldr	r2, [pc, #20]	; (3f7c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3f66:	b510      	push	{r4, lr}
    3f68:	6852      	ldr	r2, [r2, #4]
    3f6a:	b112      	cbz	r2, 3f72 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f70:	4710      	bx	r2
    3f72:	2183      	movs	r1, #131	; 0x83
    3f74:	2004      	movs	r0, #4
    3f76:	f7ff ff69 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f7a:	0000      	.short	0x0000
    3f7c:	20001038 	.word	0x20001038

00003f80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3f80:	4a05      	ldr	r2, [pc, #20]	; (3f98 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3f82:	b510      	push	{r4, lr}
    3f84:	6892      	ldr	r2, [r2, #8]
    3f86:	b112      	cbz	r2, 3f8e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f8c:	4710      	bx	r2
    3f8e:	2189      	movs	r1, #137	; 0x89
    3f90:	2004      	movs	r0, #4
    3f92:	f7ff ff5b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f96:	0000      	.short	0x0000
    3f98:	20001038 	.word	0x20001038

00003f9c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3f9c:	4805      	ldr	r0, [pc, #20]	; (3fb4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3f9e:	6801      	ldr	r1, [r0, #0]
    3fa0:	b129      	cbz	r1, 3fae <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3fa2:	6841      	ldr	r1, [r0, #4]
    3fa4:	b119      	cbz	r1, 3fae <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3fa6:	6880      	ldr	r0, [r0, #8]
    3fa8:	b108      	cbz	r0, 3fae <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3faa:	2001      	movs	r0, #1
    3fac:	4770      	bx	lr
    3fae:	2000      	movs	r0, #0
    3fb0:	4770      	bx	lr
    3fb2:	0000      	.short	0x0000
    3fb4:	20001038 	.word	0x20001038

00003fb8 <sdc_rand_source_register>:
    3fb8:	4902      	ldr	r1, [pc, #8]	; (3fc4 <sdc_rand_source_register+0xc>)
    3fba:	c80d      	ldmia	r0, {r0, r2, r3}
    3fbc:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3fc0:	2000      	movs	r0, #0
    3fc2:	4770      	bx	lr
    3fc4:	20001038 	.word	0x20001038

00003fc8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fca:	4c12      	ldr	r4, [pc, #72]	; (4014 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3fcc:	2600      	movs	r6, #0
    3fce:	6825      	ldr	r5, [r4, #0]
    3fd0:	e011      	b.n	3ff6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3fd2:	9800      	ldr	r0, [sp, #0]
    3fd4:	2802      	cmp	r0, #2
    3fd6:	d002      	beq.n	3fde <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3fd8:	2803      	cmp	r0, #3
    3fda:	d10c      	bne.n	3ff6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3fdc:	e006      	b.n	3fec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3fde:	6820      	ldr	r0, [r4, #0]
    3fe0:	b110      	cbz	r0, 3fe8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3fe2:	2000      	movs	r0, #0
    3fe4:	6026      	str	r6, [r4, #0]
    3fe6:	e005      	b.n	3ff4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3fe8:	2128      	movs	r1, #40	; 0x28
    3fea:	e00c      	b.n	4006 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3fec:	6820      	ldr	r0, [r4, #0]
    3fee:	b168      	cbz	r0, 400c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3ff0:	2001      	movs	r0, #1
    3ff2:	6026      	str	r6, [r4, #0]
    3ff4:	47a8      	blx	r5
    3ff6:	4668      	mov	r0, sp
    3ff8:	f000 fd50 	bl	4a9c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3ffc:	2800      	cmp	r0, #0
    3ffe:	d0e8      	beq.n	3fd2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4000:	2805      	cmp	r0, #5
    4002:	d005      	beq.n	4010 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4004:	2135      	movs	r1, #53	; 0x35
    4006:	2004      	movs	r0, #4
    4008:	f7ff ff20 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    400c:	212d      	movs	r1, #45	; 0x2d
    400e:	e7fa      	b.n	4006 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4012:	0000      	.short	0x0000
    4014:	20000064 	.word	0x20000064
    4018:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    401a:	4c1f      	ldr	r4, [pc, #124]	; (4098 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    401c:	4605      	mov	r5, r0
    401e:	7820      	ldrb	r0, [r4, #0]
    4020:	b140      	cbz	r0, 4034 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4022:	78a2      	ldrb	r2, [r4, #2]
    4024:	1c61      	adds	r1, r4, #1
    4026:	4628      	mov	r0, r5
    4028:	1c92      	adds	r2, r2, #2
    402a:	f007 ff7e 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    402e:	2000      	movs	r0, #0
    4030:	7020      	strb	r0, [r4, #0]
    4032:	e021      	b.n	4078 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4034:	4819      	ldr	r0, [pc, #100]	; (409c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4036:	f002 f837 	bl	60a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    403a:	2800      	cmp	r0, #0
    403c:	d01d      	beq.n	407a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    403e:	4c17      	ldr	r4, [pc, #92]	; (409c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4040:	7820      	ldrb	r0, [r4, #0]
    4042:	2811      	cmp	r0, #17
    4044:	d104      	bne.n	4050 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4046:	210a      	movs	r1, #10
    4048:	203e      	movs	r0, #62	; 0x3e
    404a:	f008 f90c 	bl	c266 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    404e:	b118      	cbz	r0, 4058 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4050:	7820      	ldrb	r0, [r4, #0]
    4052:	2808      	cmp	r0, #8
    4054:	d005      	beq.n	4062 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4056:	e009      	b.n	406c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4058:	4910      	ldr	r1, [pc, #64]	; (409c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    405a:	4628      	mov	r0, r5
    405c:	f008 fb0b 	bl	c676 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4060:	e00a      	b.n	4078 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4062:	2105      	movs	r1, #5
    4064:	203e      	movs	r0, #62	; 0x3e
    4066:	f008 f8fe 	bl	c266 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    406a:	b138      	cbz	r0, 407c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    406c:	490b      	ldr	r1, [pc, #44]	; (409c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    406e:	4628      	mov	r0, r5
    4070:	f008 f957 	bl	c322 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4074:	2800      	cmp	r0, #0
    4076:	d000      	beq.n	407a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4078:	2001      	movs	r0, #1
    407a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    407c:	88a0      	ldrh	r0, [r4, #4]
    407e:	f8ad 0000 	strh.w	r0, [sp]
    4082:	a901      	add	r1, sp, #4
    4084:	4668      	mov	r0, sp
    4086:	f008 fc14 	bl	c8b2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    408a:	2800      	cmp	r0, #0
    408c:	d0f5      	beq.n	407a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    408e:	219b      	movs	r1, #155	; 0x9b
    4090:	2008      	movs	r0, #8
    4092:	f7ff fedb 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4096:	0000      	.short	0x0000
    4098:	200011d6 	.word	0x200011d6
    409c:	200010d4 	.word	0x200010d4
    40a0:	b570      	push	{r4, r5, r6, lr}
    40a2:	780a      	ldrb	r2, [r1, #0]
    40a4:	7082      	strb	r2, [r0, #2]
    40a6:	b33a      	cbz	r2, 40f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    40a8:	2a01      	cmp	r2, #1
    40aa:	d825      	bhi.n	40f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    40ac:	2313      	movs	r3, #19
    40ae:	7003      	strb	r3, [r0, #0]
    40b0:	2300      	movs	r3, #0
    40b2:	e00a      	b.n	40ca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    40b4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    40b8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    40bc:	78a6      	ldrb	r6, [r4, #2]
    40be:	70ee      	strb	r6, [r5, #3]
    40c0:	8864      	ldrh	r4, [r4, #2]
    40c2:	0a24      	lsrs	r4, r4, #8
    40c4:	1c5b      	adds	r3, r3, #1
    40c6:	712c      	strb	r4, [r5, #4]
    40c8:	b2db      	uxtb	r3, r3
    40ca:	4293      	cmp	r3, r2
    40cc:	d3f2      	bcc.n	40b4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    40ce:	2300      	movs	r3, #0
    40d0:	e00b      	b.n	40ea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    40d2:	bf00      	nop
    40d4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    40d8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    40dc:	792e      	ldrb	r6, [r5, #4]
    40de:	7166      	strb	r6, [r4, #5]
    40e0:	88ad      	ldrh	r5, [r5, #4]
    40e2:	0a2d      	lsrs	r5, r5, #8
    40e4:	1c5b      	adds	r3, r3, #1
    40e6:	71a5      	strb	r5, [r4, #6]
    40e8:	b2db      	uxtb	r3, r3
    40ea:	4293      	cmp	r3, r2
    40ec:	d3f2      	bcc.n	40d4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    40ee:	2101      	movs	r1, #1
    40f0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    40f4:	b2c0      	uxtb	r0, r0
    40f6:	bd70      	pop	{r4, r5, r6, pc}
    40f8:	2000      	movs	r0, #0
    40fa:	bd70      	pop	{r4, r5, r6, pc}

000040fc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    40fc:	2101      	movs	r1, #1
    40fe:	4a0c      	ldr	r2, [pc, #48]	; (4130 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4100:	2840      	cmp	r0, #64	; 0x40
    4102:	d20c      	bcs.n	411e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4104:	2820      	cmp	r0, #32
    4106:	d803      	bhi.n	4110 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4108:	1e40      	subs	r0, r0, #1
    410a:	4081      	lsls	r1, r0
    410c:	6810      	ldr	r0, [r2, #0]
    410e:	e002      	b.n	4116 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4110:	3821      	subs	r0, #33	; 0x21
    4112:	4081      	lsls	r1, r0
    4114:	6850      	ldr	r0, [r2, #4]
    4116:	4201      	tst	r1, r0
    4118:	d107      	bne.n	412a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    411a:	2000      	movs	r0, #0
    411c:	4770      	bx	lr
    411e:	28ff      	cmp	r0, #255	; 0xff
    4120:	d003      	beq.n	412a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4122:	3840      	subs	r0, #64	; 0x40
    4124:	4081      	lsls	r1, r0
    4126:	6890      	ldr	r0, [r2, #8]
    4128:	e7f5      	b.n	4116 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    412a:	2001      	movs	r0, #1
    412c:	4770      	bx	lr
    412e:	0000      	.short	0x0000
    4130:	20000068 	.word	0x20000068

00004134 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4134:	2101      	movs	r1, #1
    4136:	1e40      	subs	r0, r0, #1
    4138:	4081      	lsls	r1, r0
    413a:	4804      	ldr	r0, [pc, #16]	; (414c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    413c:	68c0      	ldr	r0, [r0, #12]
    413e:	4201      	tst	r1, r0
    4140:	d001      	beq.n	4146 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4142:	2001      	movs	r0, #1
    4144:	4770      	bx	lr
    4146:	2000      	movs	r0, #0
    4148:	4770      	bx	lr
    414a:	0000      	.short	0x0000
    414c:	20000068 	.word	0x20000068

00004150 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4150:	4901      	ldr	r1, [pc, #4]	; (4158 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4152:	6800      	ldr	r0, [r0, #0]
    4154:	60c8      	str	r0, [r1, #12]
    4156:	4770      	bx	lr
    4158:	20000068 	.word	0x20000068

0000415c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    415c:	4904      	ldr	r1, [pc, #16]	; (4170 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    415e:	6802      	ldr	r2, [r0, #0]
    4160:	6840      	ldr	r0, [r0, #4]
    4162:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4166:	600a      	str	r2, [r1, #0]
    4168:	4a02      	ldr	r2, [pc, #8]	; (4174 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    416a:	4310      	orrs	r0, r2
    416c:	6048      	str	r0, [r1, #4]
    416e:	4770      	bx	lr
    4170:	20000068 	.word	0x20000068
    4174:	024007f8 	.word	0x024007f8

00004178 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4178:	4901      	ldr	r1, [pc, #4]	; (4180 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    417a:	6800      	ldr	r0, [r0, #0]
    417c:	6088      	str	r0, [r1, #8]
    417e:	4770      	bx	lr
    4180:	20000068 	.word	0x20000068

00004184 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4184:	4805      	ldr	r0, [pc, #20]	; (419c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    418a:	6001      	str	r1, [r0, #0]
    418c:	0cc9      	lsrs	r1, r1, #19
    418e:	6041      	str	r1, [r0, #4]
    4190:	2100      	movs	r1, #0
    4192:	6081      	str	r1, [r0, #8]
    4194:	211f      	movs	r1, #31
    4196:	60c1      	str	r1, [r0, #12]
    4198:	4770      	bx	lr
    419a:	0000      	.short	0x0000
    419c:	20000068 	.word	0x20000068

000041a0 <sdc_hci_cmd_cb_reset>:
    41a0:	b510      	push	{r4, lr}
    41a2:	f7ff ffef 	bl	4184 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    41a6:	f00b f9ec 	bl	f582 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    41aa:	4604      	mov	r4, r0
    41ac:	4802      	ldr	r0, [pc, #8]	; (41b8 <sdc_hci_cmd_cb_reset+0x18>)
    41ae:	6800      	ldr	r0, [r0, #0]
    41b0:	b100      	cbz	r0, 41b4 <sdc_hci_cmd_cb_reset+0x14>
    41b2:	4780      	blx	r0
    41b4:	4620      	mov	r0, r4
    41b6:	bd10      	pop	{r4, pc}
    41b8:	20000078 	.word	0x20000078

000041bc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    41bc:	4901      	ldr	r1, [pc, #4]	; (41c4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    41be:	6008      	str	r0, [r1, #0]
    41c0:	4770      	bx	lr
    41c2:	0000      	.short	0x0000
    41c4:	20000078 	.word	0x20000078

000041c8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    41c8:	2102      	movs	r1, #2
    41ca:	8001      	strh	r1, [r0, #0]
    41cc:	8041      	strh	r1, [r0, #2]
    41ce:	2100      	movs	r1, #0
    41d0:	7101      	strb	r1, [r0, #4]
    41d2:	210e      	movs	r1, #14
    41d4:	7141      	strb	r1, [r0, #5]
    41d6:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    41da:	80c1      	strh	r1, [r0, #6]
    41dc:	4901      	ldr	r1, [pc, #4]	; (41e4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    41de:	6081      	str	r1, [r0, #8]
    41e0:	2000      	movs	r0, #0
    41e2:	4770      	bx	lr
    41e4:	3c186766 	.word	0x3c186766

000041e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    41e8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    41ea:	4604      	mov	r4, r0
    41ec:	4669      	mov	r1, sp
    41ee:	f008 febe 	bl	cf6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    41f2:	b170      	cbz	r0, 4212 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    41f4:	f240 215a 	movw	r1, #602	; 0x25a
    41f8:	e008      	b.n	420c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    41fa:	bf00      	nop
    41fc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4200:	4621      	mov	r1, r4
    4202:	f000 f8ab 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4206:	b120      	cbz	r0, 4212 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4208:	f240 215f 	movw	r1, #607	; 0x25f
    420c:	2017      	movs	r0, #23
    420e:	f7ff fe1d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4212:	4668      	mov	r0, sp
    4214:	f000 f852 	bl	42bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4218:	2800      	cmp	r0, #0
    421a:	d0ef      	beq.n	41fc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    421c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004220 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4220:	b510      	push	{r4, lr}
    4222:	2802      	cmp	r0, #2
    4224:	d304      	bcc.n	4230 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    4226:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    422a:	2017      	movs	r0, #23
    422c:	f7ff fe0e 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4230:	4901      	ldr	r1, [pc, #4]	; (4238 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    4232:	5c08      	ldrb	r0, [r1, r0]
    4234:	bd10      	pop	{r4, pc}
    4236:	0000      	.short	0x0000
    4238:	20001044 	.word	0x20001044

0000423c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    423e:	0005      	movs	r5, r0
    4240:	9500      	str	r5, [sp, #0]
    4242:	d010      	beq.n	4266 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    4244:	2600      	movs	r6, #0
    4246:	7808      	ldrb	r0, [r1, #0]
    4248:	7849      	ldrb	r1, [r1, #1]
    424a:	4604      	mov	r4, r0
    424c:	42a1      	cmp	r1, r4
    424e:	d900      	bls.n	4252 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4250:	460c      	mov	r4, r1
    4252:	1cea      	adds	r2, r5, #3
    4254:	f022 0203 	bic.w	r2, r2, #3
    4258:	42aa      	cmp	r2, r5
    425a:	d006      	beq.n	426a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    425c:	f240 1179 	movw	r1, #377	; 0x179
    4260:	2017      	movs	r0, #23
    4262:	f7ff fdf3 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4266:	2601      	movs	r6, #1
    4268:	e7ed      	b.n	4246 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    426a:	4f13      	ldr	r7, [pc, #76]	; (42b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    426c:	7038      	strb	r0, [r7, #0]
    426e:	7079      	strb	r1, [r7, #1]
    4270:	4631      	mov	r1, r6
    4272:	4668      	mov	r0, sp
    4274:	f000 f8ee 	bl	4454 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    4278:	2100      	movs	r1, #0
    427a:	460b      	mov	r3, r1
    427c:	9800      	ldr	r0, [sp, #0]
    427e:	1cc0      	adds	r0, r0, #3
    4280:	f020 0003 	bic.w	r0, r0, #3
    4284:	9000      	str	r0, [sp, #0]
    4286:	b96e      	cbnz	r6, 42a4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    4288:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    428c:	60d0      	str	r0, [r2, #12]
    428e:	2000      	movs	r0, #0
    4290:	e006      	b.n	42a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    4292:	bf00      	nop
    4294:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4298:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    429c:	1c40      	adds	r0, r0, #1
    429e:	b2c0      	uxtb	r0, r0
    42a0:	42a0      	cmp	r0, r4
    42a2:	d3f7      	bcc.n	4294 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    42a4:	9800      	ldr	r0, [sp, #0]
    42a6:	1c49      	adds	r1, r1, #1
    42a8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    42ac:	b2c9      	uxtb	r1, r1
    42ae:	9000      	str	r0, [sp, #0]
    42b0:	2902      	cmp	r1, #2
    42b2:	d3e3      	bcc.n	427c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    42b4:	1b40      	subs	r0, r0, r5
    42b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42b8:	20001044 	.word	0x20001044

000042bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	4604      	mov	r4, r0
    42c0:	f008 ffce 	bl	d260 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    42c4:	b108      	cbz	r0, 42ca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    42c6:	2010      	movs	r0, #16
    42c8:	bd70      	pop	{r4, r5, r6, pc}
    42ca:	7825      	ldrb	r5, [r4, #0]
    42cc:	f000 f8fe 	bl	44cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    42d0:	4602      	mov	r2, r0
    42d2:	480c      	ldr	r0, [pc, #48]	; (4304 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    42d4:	8861      	ldrh	r1, [r4, #2]
    42d6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    42da:	e00e      	b.n	42fa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    42dc:	68c3      	ldr	r3, [r0, #12]
    42de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    42e2:	b143      	cbz	r3, 42f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    42e4:	1c4a      	adds	r2, r1, #1
    42e6:	8062      	strh	r2, [r4, #2]
    42e8:	80a1      	strh	r1, [r4, #4]
    42ea:	68c0      	ldr	r0, [r0, #12]
    42ec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    42f0:	60a0      	str	r0, [r4, #8]
    42f2:	2000      	movs	r0, #0
    42f4:	bd70      	pop	{r4, r5, r6, pc}
    42f6:	1c49      	adds	r1, r1, #1
    42f8:	b289      	uxth	r1, r1
    42fa:	4291      	cmp	r1, r2
    42fc:	d3ee      	bcc.n	42dc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    42fe:	8061      	strh	r1, [r4, #2]
    4300:	2005      	movs	r0, #5
    4302:	bd70      	pop	{r4, r5, r6, pc}
    4304:	20001044 	.word	0x20001044

00004308 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    430c:	b121      	cbz	r1, 4318 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    430e:	2901      	cmp	r1, #1
    4310:	d002      	beq.n	4318 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4312:	2000      	movs	r0, #0
    4314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4318:	4c0f      	ldr	r4, [pc, #60]	; (4358 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    431a:	2700      	movs	r7, #0
    431c:	463b      	mov	r3, r7
    431e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4322:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4326:	f814 c001 	ldrb.w	ip, [r4, r1]
    432a:	e00a      	b.n	4342 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    432c:	19dc      	adds	r4, r3, r7
    432e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    4332:	b2a4      	uxth	r4, r4
    4334:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4338:	f1be 0f00 	cmp.w	lr, #0
    433c:	d004      	beq.n	4348 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    433e:	1c5b      	adds	r3, r3, #1
    4340:	b29b      	uxth	r3, r3
    4342:	459c      	cmp	ip, r3
    4344:	d8f2      	bhi.n	432c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    4346:	4634      	mov	r4, r6
    4348:	8004      	strh	r4, [r0, #0]
    434a:	4620      	mov	r0, r4
    434c:	42b4      	cmp	r4, r6
    434e:	d0e0      	beq.n	4312 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4354:	f000 b834 	b.w	43c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    4358:	20001044 	.word	0x20001044

0000435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    435c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4360:	4606      	mov	r6, r0
    4362:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    4366:	460c      	mov	r4, r1
    4368:	f243 0702 	movw	r7, #12290	; 0x3002
    436c:	38ff      	subs	r0, #255	; 0xff
    436e:	d020      	beq.n	43b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4370:	2c02      	cmp	r4, #2
    4372:	d302      	bcc.n	437a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4374:	2007      	movs	r0, #7
    4376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    437a:	4630      	mov	r0, r6
    437c:	f000 f85a 	bl	4434 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4380:	0005      	movs	r5, r0
    4382:	d016      	beq.n	43b2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4384:	480c      	ldr	r0, [pc, #48]	; (43b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4386:	4629      	mov	r1, r5
    4388:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    438c:	4630      	mov	r0, r6
    438e:	4790      	blx	r2
    4390:	480a      	ldr	r0, [pc, #40]	; (43bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4392:	2100      	movs	r1, #0
    4394:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4398:	68f8      	ldr	r0, [r7, #12]
    439a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    439e:	4620      	mov	r0, r4
    43a0:	f000 f88a 	bl	44b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    43a4:	4602      	mov	r2, r0
    43a6:	4629      	mov	r1, r5
    43a8:	6878      	ldr	r0, [r7, #4]
    43aa:	f008 fdbf 	bl	cf2c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    43ae:	2000      	movs	r0, #0
    43b0:	e7e1      	b.n	4376 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    43b2:	4638      	mov	r0, r7
    43b4:	e7df      	b.n	4376 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    43b6:	0000      	.short	0x0000
    43b8:	000044ec 	.word	0x000044ec
    43bc:	20001044 	.word	0x20001044
    43c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43c4:	4690      	mov	r8, r2
    43c6:	460d      	mov	r5, r1
    43c8:	4607      	mov	r7, r0
    43ca:	f008 fde1 	bl	cf90 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    43ce:	b148      	cbz	r0, 43e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    43d0:	4816      	ldr	r0, [pc, #88]	; (442c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    43d2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    43d6:	68f0      	ldr	r0, [r6, #12]
    43d8:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    43dc:	b128      	cbz	r0, 43ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    43de:	f44f 719d 	mov.w	r1, #314	; 0x13a
    43e2:	e015      	b.n	4410 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    43e4:	f240 1139 	movw	r1, #313	; 0x139
    43e8:	e012      	b.n	4410 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    43ea:	6870      	ldr	r0, [r6, #4]
    43ec:	2800      	cmp	r0, #0
    43ee:	d01a      	beq.n	4426 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    43f0:	4628      	mov	r0, r5
    43f2:	f000 f861 	bl	44b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    43f6:	4601      	mov	r1, r0
    43f8:	6870      	ldr	r0, [r6, #4]
    43fa:	f008 fd49 	bl	ce90 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    43fe:	0004      	movs	r4, r0
    4400:	d010      	beq.n	4424 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4402:	68f0      	ldr	r0, [r6, #12]
    4404:	2d02      	cmp	r5, #2
    4406:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    440a:	d304      	bcc.n	4416 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    440c:	f240 1145 	movw	r1, #325	; 0x145
    4410:	2017      	movs	r0, #23
    4412:	f7ff fd1b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4416:	4806      	ldr	r0, [pc, #24]	; (4430 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4418:	4642      	mov	r2, r8
    441a:	4621      	mov	r1, r4
    441c:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4420:	4638      	mov	r0, r7
    4422:	4798      	blx	r3
    4424:	4620      	mov	r0, r4
    4426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    442a:	0000      	.short	0x0000
    442c:	20001044 	.word	0x20001044
    4430:	000044e4 	.word	0x000044e4
    4434:	b570      	push	{r4, r5, r6, lr}
    4436:	460c      	mov	r4, r1
    4438:	4605      	mov	r5, r0
    443a:	f008 fda9 	bl	cf90 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    443e:	2800      	cmp	r0, #0
    4440:	d005      	beq.n	444e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    4442:	4803      	ldr	r0, [pc, #12]	; (4450 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    4444:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4448:	68c0      	ldr	r0, [r0, #12]
    444a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    444e:	bd70      	pop	{r4, r5, r6, pc}
    4450:	20001044 	.word	0x20001044
    4454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4458:	4e16      	ldr	r6, [pc, #88]	; (44b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    445a:	4688      	mov	r8, r1
    445c:	4605      	mov	r5, r0
    445e:	2400      	movs	r4, #0
    4460:	6828      	ldr	r0, [r5, #0]
    4462:	1cc0      	adds	r0, r0, #3
    4464:	f020 0003 	bic.w	r0, r0, #3
    4468:	6028      	str	r0, [r5, #0]
    446a:	4620      	mov	r0, r4
    446c:	f000 f824 	bl	44b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4470:	5d31      	ldrb	r1, [r6, r4]
    4472:	4348      	muls	r0, r1
    4474:	f1b8 0f00 	cmp.w	r8, #0
    4478:	d001      	beq.n	447e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    447a:	2200      	movs	r2, #0
    447c:	e000      	b.n	4480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    447e:	682a      	ldr	r2, [r5, #0]
    4480:	4601      	mov	r1, r0
    4482:	9200      	str	r2, [sp, #0]
    4484:	b132      	cbz	r2, 4494 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4486:	2700      	movs	r7, #0
    4488:	ea4f 000d 	mov.w	r0, sp
    448c:	f008 fd2d 	bl	ceea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4490:	b11f      	cbz	r7, 449a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4492:	e006      	b.n	44a2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4494:	2701      	movs	r7, #1
    4496:	2000      	movs	r0, #0
    4498:	e7f8      	b.n	448c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    449a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    449e:	9a00      	ldr	r2, [sp, #0]
    44a0:	604a      	str	r2, [r1, #4]
    44a2:	6829      	ldr	r1, [r5, #0]
    44a4:	1c64      	adds	r4, r4, #1
    44a6:	4408      	add	r0, r1
    44a8:	b2e4      	uxtb	r4, r4
    44aa:	6028      	str	r0, [r5, #0]
    44ac:	2c02      	cmp	r4, #2
    44ae:	d3d7      	bcc.n	4460 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    44b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    44b4:	20001044 	.word	0x20001044
    44b8:	4903      	ldr	r1, [pc, #12]	; (44c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    44ba:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    44be:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    44c2:	1cc0      	adds	r0, r0, #3
    44c4:	4008      	ands	r0, r1
    44c6:	4770      	bx	lr
    44c8:	000044e0 	.word	0x000044e0
    44cc:	4903      	ldr	r1, [pc, #12]	; (44dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    44ce:	7808      	ldrb	r0, [r1, #0]
    44d0:	7849      	ldrb	r1, [r1, #1]
    44d2:	4288      	cmp	r0, r1
    44d4:	d200      	bcs.n	44d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    44d6:	4608      	mov	r0, r1
    44d8:	4770      	bx	lr
    44da:	0000      	.short	0x0000
    44dc:	20001044 	.word	0x20001044
    44e0:	00d40218 	.word	0x00d40218
    44e4:	0000cfa5 	.word	0x0000cfa5
    44e8:	0000cfa5 	.word	0x0000cfa5
    44ec:	0000eb65 	.word	0x0000eb65
    44f0:	0000df53 	.word	0x0000df53

000044f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    44f4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44f8:	4c26      	ldr	r4, [pc, #152]	; (4594 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    44fa:	4680      	mov	r8, r0
    44fc:	b081      	sub	sp, #4
    44fe:	6820      	ldr	r0, [r4, #0]
    4500:	469a      	mov	sl, r3
    4502:	4693      	mov	fp, r2
    4504:	b158      	cbz	r0, 451e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4506:	7a02      	ldrb	r2, [r0, #8]
    4508:	4542      	cmp	r2, r8
    450a:	d903      	bls.n	4514 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    450c:	6841      	ldr	r1, [r0, #4]
    450e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    4512:	b140      	cbz	r0, 4526 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4514:	f243 0002 	movw	r0, #12290	; 0x3002
    4518:	b005      	add	sp, #20
    451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    451e:	21a5      	movs	r1, #165	; 0xa5
    4520:	2018      	movs	r0, #24
    4522:	f7ff fc93 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4526:	4619      	mov	r1, r3
    4528:	9802      	ldr	r0, [sp, #8]
    452a:	f008 fd53 	bl	cfd4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    452e:	b286      	uxth	r6, r0
    4530:	4658      	mov	r0, fp
    4532:	990e      	ldr	r1, [sp, #56]	; 0x38
    4534:	f008 fd45 	bl	cfc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4538:	b285      	uxth	r5, r0
    453a:	1970      	adds	r0, r6, r5
    453c:	1d00      	adds	r0, r0, #4
    453e:	b287      	uxth	r7, r0
    4540:	6820      	ldr	r0, [r4, #0]
    4542:	46a1      	mov	r9, r4
    4544:	4639      	mov	r1, r7
    4546:	6800      	ldr	r0, [r0, #0]
    4548:	f008 fca2 	bl	ce90 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    454c:	0004      	movs	r4, r0
    454e:	d01f      	beq.n	4590 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4550:	8067      	strh	r7, [r4, #2]
    4552:	8025      	strh	r5, [r4, #0]
    4554:	4629      	mov	r1, r5
    4556:	1d20      	adds	r0, r4, #4
    4558:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    455a:	4607      	mov	r7, r0
    455c:	465a      	mov	r2, fp
    455e:	2301      	movs	r3, #1
    4560:	9500      	str	r5, [sp, #0]
    4562:	f008 fbf5 	bl	cd50 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4566:	8820      	ldrh	r0, [r4, #0]
    4568:	4631      	mov	r1, r6
    456a:	4438      	add	r0, r7
    456c:	2301      	movs	r3, #1
    456e:	9a02      	ldr	r2, [sp, #8]
    4570:	f8cd a000 	str.w	sl, [sp]
    4574:	f008 fbec 	bl	cd50 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4578:	8820      	ldrh	r0, [r4, #0]
    457a:	19c1      	adds	r1, r0, r7
    457c:	4638      	mov	r0, r7
    457e:	f008 fc18 	bl	cdb2 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4582:	f8d9 0000 	ldr.w	r0, [r9]
    4586:	6841      	ldr	r1, [r0, #4]
    4588:	2000      	movs	r0, #0
    458a:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    458e:	e7c3      	b.n	4518 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4590:	2004      	movs	r0, #4
    4592:	e7c1      	b.n	4518 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4594:	2000007c 	.word	0x2000007c

00004598 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4598:	b570      	push	{r4, r5, r6, lr}
    459a:	4c14      	ldr	r4, [pc, #80]	; (45ec <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    459c:	6823      	ldr	r3, [r4, #0]
    459e:	b18b      	cbz	r3, 45c4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    45a0:	7a19      	ldrb	r1, [r3, #8]
    45a2:	4281      	cmp	r1, r0
    45a4:	d912      	bls.n	45cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    45a6:	685a      	ldr	r2, [r3, #4]
    45a8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    45ac:	b171      	cbz	r1, 45cc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    45ae:	2500      	movs	r5, #0
    45b0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    45b4:	884a      	ldrh	r2, [r1, #2]
    45b6:	6818      	ldr	r0, [r3, #0]
    45b8:	f008 fcb8 	bl	cf2c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    45bc:	6821      	ldr	r1, [r4, #0]
    45be:	2000      	movs	r0, #0
    45c0:	7a0a      	ldrb	r2, [r1, #8]
    45c2:	e00c      	b.n	45de <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    45c4:	21c8      	movs	r1, #200	; 0xc8
    45c6:	2018      	movs	r0, #24
    45c8:	f7ff fc40 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45cc:	f243 0002 	movw	r0, #12290	; 0x3002
    45d0:	bd70      	pop	{r4, r5, r6, pc}
    45d2:	684b      	ldr	r3, [r1, #4]
    45d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    45d8:	b933      	cbnz	r3, 45e8 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    45da:	1c40      	adds	r0, r0, #1
    45dc:	b2c0      	uxtb	r0, r0
    45de:	4282      	cmp	r2, r0
    45e0:	d8f7      	bhi.n	45d2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    45e2:	6808      	ldr	r0, [r1, #0]
    45e4:	f008 fc97 	bl	cf16 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    45e8:	2000      	movs	r0, #0
    45ea:	bd70      	pop	{r4, r5, r6, pc}
    45ec:	2000007c 	.word	0x2000007c

000045f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    45f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45f4:	460d      	mov	r5, r1
    45f6:	0004      	movs	r4, r0
    45f8:	4690      	mov	r8, r2
    45fa:	f04f 0600 	mov.w	r6, #0
    45fe:	d009      	beq.n	4614 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4600:	2700      	movs	r7, #0
    4602:	1ce0      	adds	r0, r4, #3
    4604:	f020 0003 	bic.w	r0, r0, #3
    4608:	42a0      	cmp	r0, r4
    460a:	d005      	beq.n	4618 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    460c:	2186      	movs	r1, #134	; 0x86
    460e:	2018      	movs	r0, #24
    4610:	f7ff fc1c 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4614:	2701      	movs	r7, #1
    4616:	e7f4      	b.n	4602 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4618:	b1cd      	cbz	r5, 464e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    461a:	4611      	mov	r1, r2
    461c:	2000      	movs	r0, #0
    461e:	f008 fc64 	bl	ceea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4622:	300c      	adds	r0, #12
    4624:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4628:	b98f      	cbnz	r7, 464e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    462a:	4f0a      	ldr	r7, [pc, #40]	; (4654 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    462c:	f104 000c 	add.w	r0, r4, #12
    4630:	00aa      	lsls	r2, r5, #2
    4632:	603c      	str	r4, [r7, #0]
    4634:	7225      	strb	r5, [r4, #8]
    4636:	6060      	str	r0, [r4, #4]
    4638:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    463c:	6020      	str	r0, [r4, #0]
    463e:	2100      	movs	r1, #0
    4640:	6860      	ldr	r0, [r4, #4]
    4642:	f007 fcec 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4646:	4641      	mov	r1, r8
    4648:	6838      	ldr	r0, [r7, #0]
    464a:	f008 fc4e 	bl	ceea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    464e:	4630      	mov	r0, r6
    4650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4654:	2000007c 	.word	0x2000007c

00004658 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4658:	b570      	push	{r4, r5, r6, lr}
    465a:	4d08      	ldr	r5, [pc, #32]	; (467c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    465c:	6828      	ldr	r0, [r5, #0]
    465e:	2800      	cmp	r0, #0
    4660:	d00a      	beq.n	4678 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    4662:	2400      	movs	r4, #0
    4664:	e004      	b.n	4670 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    4666:	4620      	mov	r0, r4
    4668:	f7ff ff96 	bl	4598 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    466c:	1c64      	adds	r4, r4, #1
    466e:	b2e4      	uxtb	r4, r4
    4670:	6828      	ldr	r0, [r5, #0]
    4672:	7a00      	ldrb	r0, [r0, #8]
    4674:	42a0      	cmp	r0, r4
    4676:	d8f6      	bhi.n	4666 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4678:	bd70      	pop	{r4, r5, r6, pc}
    467a:	0000      	.short	0x0000
    467c:	2000007c 	.word	0x2000007c

00004680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4680:	4909      	ldr	r1, [pc, #36]	; (46a8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4682:	b510      	push	{r4, lr}
    4684:	4602      	mov	r2, r0
    4686:	6809      	ldr	r1, [r1, #0]
    4688:	2000      	movs	r0, #0
    468a:	b149      	cbz	r1, 46a0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    468c:	7a0b      	ldrb	r3, [r1, #8]
    468e:	4293      	cmp	r3, r2
    4690:	d905      	bls.n	469e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4692:	6849      	ldr	r1, [r1, #4]
    4694:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4698:	2900      	cmp	r1, #0
    469a:	d000      	beq.n	469e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    469c:	1d08      	adds	r0, r1, #4
    469e:	bd10      	pop	{r4, pc}
    46a0:	21ee      	movs	r1, #238	; 0xee
    46a2:	2018      	movs	r0, #24
    46a4:	f7ff fbd2 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a8:	2000007c 	.word	0x2000007c

000046ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    46ac:	490a      	ldr	r1, [pc, #40]	; (46d8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    46ae:	b510      	push	{r4, lr}
    46b0:	4602      	mov	r2, r0
    46b2:	6809      	ldr	r1, [r1, #0]
    46b4:	2000      	movs	r0, #0
    46b6:	b159      	cbz	r1, 46d0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    46b8:	7a0b      	ldrb	r3, [r1, #8]
    46ba:	4293      	cmp	r3, r2
    46bc:	d907      	bls.n	46ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    46be:	6849      	ldr	r1, [r1, #4]
    46c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    46c4:	2900      	cmp	r1, #0
    46c6:	d002      	beq.n	46ce <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    46c8:	f831 0b04 	ldrh.w	r0, [r1], #4
    46cc:	4408      	add	r0, r1
    46ce:	bd10      	pop	{r4, pc}
    46d0:	21fc      	movs	r1, #252	; 0xfc
    46d2:	2018      	movs	r0, #24
    46d4:	f7ff fbba 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46d8:	2000007c 	.word	0x2000007c
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	4b1e      	ldr	r3, [pc, #120]	; (4758 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    46e0:	6845      	ldr	r5, [r0, #4]
    46e2:	4604      	mov	r4, r0
    46e4:	2200      	movs	r2, #0
    46e6:	b1a1      	cbz	r1, 4712 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    46e8:	2001      	movs	r0, #1
    46ea:	7060      	strb	r0, [r4, #1]
    46ec:	8858      	ldrh	r0, [r3, #2]
    46ee:	0881      	lsrs	r1, r0, #2
    46f0:	f05f 0000 	movs.w	r0, #0
    46f4:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    46f8:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    46fc:	831a      	strh	r2, [r3, #24]
    46fe:	8419      	strh	r1, [r3, #32]
    4700:	fb00 5301 	mla	r3, r0, r1, r5
    4704:	6073      	str	r3, [r6, #4]
    4706:	1823      	adds	r3, r4, r0
    4708:	1c40      	adds	r0, r0, #1
    470a:	751a      	strb	r2, [r3, #20]
    470c:	2804      	cmp	r0, #4
    470e:	d3f1      	bcc.n	46f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4710:	bd70      	pop	{r4, r5, r6, pc}
    4712:	7062      	strb	r2, [r4, #1]
    4714:	f05f 0000 	movs.w	r0, #0
    4718:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    471c:	830a      	strh	r2, [r1, #24]
    471e:	840a      	strh	r2, [r1, #32]
    4720:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    4724:	604a      	str	r2, [r1, #4]
    4726:	1821      	adds	r1, r4, r0
    4728:	1c40      	adds	r0, r0, #1
    472a:	750a      	strb	r2, [r1, #20]
    472c:	2804      	cmp	r0, #4
    472e:	d3f3      	bcc.n	4718 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4730:	8858      	ldrh	r0, [r3, #2]
    4732:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    4736:	d201      	bcs.n	473c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4738:	0846      	lsrs	r6, r0, #1
    473a:	e000      	b.n	473e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    473c:	26ff      	movs	r6, #255	; 0xff
    473e:	f008 fcbc 	bl	d0ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    4742:	6065      	str	r5, [r4, #4]
    4744:	8420      	strh	r0, [r4, #32]
    4746:	1829      	adds	r1, r5, r0
    4748:	60a1      	str	r1, [r4, #8]
    474a:	8466      	strh	r6, [r4, #34]	; 0x22
    474c:	60e5      	str	r5, [r4, #12]
    474e:	84a0      	strh	r0, [r4, #36]	; 0x24
    4750:	6121      	str	r1, [r4, #16]
    4752:	84e6      	strh	r6, [r4, #38]	; 0x26
    4754:	bd70      	pop	{r4, r5, r6, pc}
    4756:	0000      	.short	0x0000
    4758:	20000080 	.word	0x20000080

0000475c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4760:	b170      	cbz	r0, 4780 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    4762:	2500      	movs	r5, #0
    4764:	4411      	add	r1, r2
    4766:	b2cc      	uxtb	r4, r1
    4768:	4e24      	ldr	r6, [pc, #144]	; (47fc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    476a:	1cc1      	adds	r1, r0, #3
    476c:	2700      	movs	r7, #0
    476e:	f021 0103 	bic.w	r1, r1, #3
    4772:	7034      	strb	r4, [r6, #0]
    4774:	4281      	cmp	r1, r0
    4776:	d005      	beq.n	4784 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    4778:	214e      	movs	r1, #78	; 0x4e
    477a:	2009      	movs	r0, #9
    477c:	f7ff fb66 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4780:	2501      	movs	r5, #1
    4782:	e7ef      	b.n	4764 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    4784:	2b1f      	cmp	r3, #31
    4786:	d804      	bhi.n	4792 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    4788:	f64f 71ff 	movw	r1, #65535	; 0xffff
    478c:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    4790:	e009      	b.n	47a6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    4792:	0059      	lsls	r1, r3, #1
    4794:	2bff      	cmp	r3, #255	; 0xff
    4796:	d90b      	bls.n	47b0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    4798:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    479c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    47a0:	d200      	bcs.n	47a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    47a2:	4611      	mov	r1, r2
    47a4:	b289      	uxth	r1, r1
    47a6:	1cc9      	adds	r1, r1, #3
    47a8:	f021 0303 	bic.w	r3, r1, #3
    47ac:	b135      	cbz	r5, 47bc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    47ae:	e007      	b.n	47c0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    47b0:	227c      	movs	r2, #124	; 0x7c
    47b2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    47b6:	d3f5      	bcc.n	47a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    47b8:	217c      	movs	r1, #124	; 0x7c
    47ba:	e7f3      	b.n	47a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    47bc:	6070      	str	r0, [r6, #4]
    47be:	8073      	strh	r3, [r6, #2]
    47c0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    47c4:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    47c8:	2100      	movs	r1, #0
    47ca:	6876      	ldr	r6, [r6, #4]
    47cc:	f04f 0c01 	mov.w	ip, #1
    47d0:	e00d      	b.n	47ee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    47d2:	b94d      	cbnz	r5, 47e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    47d4:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    47d8:	eb00 0e02 	add.w	lr, r0, r2
    47dc:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    47e0:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    47e4:	f8c7 e004 	str.w	lr, [r7, #4]
    47e8:	1c49      	adds	r1, r1, #1
    47ea:	441a      	add	r2, r3
    47ec:	b2c9      	uxtb	r1, r1
    47ee:	42a1      	cmp	r1, r4
    47f0:	d3ef      	bcc.n	47d2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    47f2:	1dd2      	adds	r2, r2, #7
    47f4:	f022 0007 	bic.w	r0, r2, #7
    47f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47fc:	20000080 	.word	0x20000080

00004800 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4800:	b570      	push	{r4, r5, r6, lr}
    4802:	4a10      	ldr	r2, [pc, #64]	; (4844 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4804:	2000      	movs	r0, #0
    4806:	6851      	ldr	r1, [r2, #4]
    4808:	7812      	ldrb	r2, [r2, #0]
    480a:	e014      	b.n	4836 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    480c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4810:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    4814:	b16b      	cbz	r3, 4832 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    4816:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    481a:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    481e:	d00c      	beq.n	483a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4820:	2500      	movs	r5, #0
    4822:	70a5      	strb	r5, [r4, #2]
    4824:	2101      	movs	r1, #1
    4826:	4620      	mov	r0, r4
    4828:	f7ff ff58 	bl	46dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    482c:	7025      	strb	r5, [r4, #0]
    482e:	4620      	mov	r0, r4
    4830:	bd70      	pop	{r4, r5, r6, pc}
    4832:	1c40      	adds	r0, r0, #1
    4834:	b2c0      	uxtb	r0, r0
    4836:	4290      	cmp	r0, r2
    4838:	d3e8      	bcc.n	480c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    483a:	21a9      	movs	r1, #169	; 0xa9
    483c:	2009      	movs	r0, #9
    483e:	f7ff fb05 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4842:	0000      	.short	0x0000
    4844:	20000080 	.word	0x20000080

00004848 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4848:	4804      	ldr	r0, [pc, #16]	; (485c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    484a:	b510      	push	{r4, lr}
    484c:	8840      	ldrh	r0, [r0, #2]
    484e:	0884      	lsrs	r4, r0, #2
    4850:	f008 fc33 	bl	d0ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    4854:	4284      	cmp	r4, r0
    4856:	d300      	bcc.n	485a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    4858:	4620      	mov	r0, r4
    485a:	bd10      	pop	{r4, pc}
    485c:	20000080 	.word	0x20000080
    4860:	4909      	ldr	r1, [pc, #36]	; (4888 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    4862:	b510      	push	{r4, lr}
    4864:	4807      	ldr	r0, [pc, #28]	; (4884 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    4866:	6008      	str	r0, [r1, #0]
    4868:	4b08      	ldr	r3, [pc, #32]	; (488c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    486a:	2011      	movs	r0, #17
    486c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    4870:	2200      	movs	r2, #0
    4872:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4876:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    487a:	1c40      	adds	r0, r0, #1
    487c:	b2c0      	uxtb	r0, r0
    487e:	2814      	cmp	r0, #20
    4880:	d3f4      	bcc.n	486c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    4882:	bd10      	pop	{r4, pc}
    4884:	fffe0000 	.word	0xfffe0000
    4888:	4001f508 	.word	0x4001f508
    488c:	4001f000 	.word	0x4001f000
    4890:	b570      	push	{r4, r5, r6, lr}
    4892:	2420      	movs	r4, #32
    4894:	2100      	movs	r1, #0
    4896:	2301      	movs	r3, #1
    4898:	fa20 f201 	lsr.w	r2, r0, r1
    489c:	07d2      	lsls	r2, r2, #31
    489e:	d020      	beq.n	48e2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    48a0:	b24a      	sxtb	r2, r1
    48a2:	2a00      	cmp	r2, #0
    48a4:	db10      	blt.n	48c8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    48a6:	bf00      	nop
    48a8:	ea4f 1652 	mov.w	r6, r2, lsr #5
    48ac:	ea4f 0686 	mov.w	r6, r6, lsl #2
    48b0:	f002 051f 	and.w	r5, r2, #31
    48b4:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    48b8:	fa03 f505 	lsl.w	r5, r3, r5
    48bc:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    48c0:	f3bf 8f4f 	dsb	sy
    48c4:	f3bf 8f6f 	isb	sy
    48c8:	db0b      	blt.n	48e2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    48ca:	f002 051f 	and.w	r5, r2, #31
    48ce:	ea4f 1252 	mov.w	r2, r2, lsr #5
    48d2:	ea4f 0282 	mov.w	r2, r2, lsl #2
    48d6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    48da:	fa03 f505 	lsl.w	r5, r3, r5
    48de:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    48e2:	f101 0101 	add.w	r1, r1, #1
    48e6:	42a1      	cmp	r1, r4
    48e8:	d3d6      	bcc.n	4898 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    48ea:	bd70      	pop	{r4, r5, r6, pc}
    48ec:	b570      	push	{r4, r5, r6, lr}
    48ee:	0042      	lsls	r2, r0, #1
    48f0:	f04f 0100 	mov.w	r1, #0
    48f4:	d501      	bpl.n	48fa <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    48f6:	4a14      	ldr	r2, [pc, #80]	; (4948 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    48f8:	6011      	str	r1, [r2, #0]
    48fa:	f3c0 3280 	ubfx	r2, r0, #14, #1
    48fe:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    4902:	429a      	cmp	r2, r3
    4904:	d003      	beq.n	490e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    4906:	2169      	movs	r1, #105	; 0x69
    4908:	201b      	movs	r0, #27
    490a:	f7ff fa9f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    490e:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    4912:	d014      	beq.n	493e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    4914:	4a0d      	ldr	r2, [pc, #52]	; (494c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    4916:	2001      	movs	r0, #1
    4918:	6050      	str	r0, [r2, #4]
    491a:	1e83      	subs	r3, r0, #2
    491c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4920:	4a0b      	ldr	r2, [pc, #44]	; (4950 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    4922:	6090      	str	r0, [r2, #8]
    4924:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4928:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    492c:	4c09      	ldr	r4, [pc, #36]	; (4954 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    492e:	6021      	str	r1, [r4, #0]
    4930:	1d25      	adds	r5, r4, #4
    4932:	6028      	str	r0, [r5, #0]
    4934:	6090      	str	r0, [r2, #8]
    4936:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    493a:	6021      	str	r1, [r4, #0]
    493c:	6028      	str	r0, [r5, #0]
    493e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4942:	f7ff bf8d 	b.w	4860 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4946:	0000      	.short	0x0000
    4948:	4001e504 	.word	0x4001e504
    494c:	4000e000 	.word	0x4000e000
    4950:	4000f000 	.word	0x4000f000
    4954:	4000f500 	.word	0x4000f500

00004958 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4958:	b570      	push	{r4, r5, r6, lr}
    495a:	4c0a      	ldr	r4, [pc, #40]	; (4984 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    495c:	460d      	mov	r5, r1
    495e:	6020      	str	r0, [r4, #0]
    4960:	f7ff ffc4 	bl	48ec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    4964:	6820      	ldr	r0, [r4, #0]
    4966:	f7ff ff93 	bl	4890 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    496a:	f000 f883 	bl	4a74 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    496e:	f7ff ff77 	bl	4860 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    4972:	f008 fc6a 	bl	d24a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4976:	4628      	mov	r0, r5
    4978:	f000 f8b6 	bl	4ae8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    497c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4980:	f000 b8ce 	b.w	4b20 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4984:	20000088 	.word	0x20000088

00004988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4988:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    498c:	4c36      	ldr	r4, [pc, #216]	; (4a68 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    498e:	b082      	sub	sp, #8
    4990:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    4994:	2601      	movs	r6, #1
    4996:	4835      	ldr	r0, [pc, #212]	; (4a6c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4998:	f007 fa1e 	bl	bdd8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    499c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4a6c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    49a0:	b920      	cbnz	r0, 49ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    49a2:	2600      	movs	r6, #0
    49a4:	f109 0001 	add.w	r0, r9, #1
    49a8:	f007 fa2d 	bl	be06 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    49ac:	f44f 7580 	mov.w	r5, #256	; 0x100
    49b0:	f04f 0800 	mov.w	r8, #0
    49b4:	1d2f      	adds	r7, r5, #4
    49b6:	2101      	movs	r1, #1
    49b8:	6061      	str	r1, [r4, #4]
    49ba:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    49be:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    49c2:	9802      	ldr	r0, [sp, #8]
    49c4:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    49c8:	6021      	str	r1, [r4, #0]
    49ca:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 4a70 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    49ce:	e01c      	b.n	4a0a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    49d0:	f8da 0000 	ldr.w	r0, [sl]
    49d4:	06c0      	lsls	r0, r0, #27
    49d6:	d518      	bpl.n	4a0a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    49d8:	200e      	movs	r0, #14
    49da:	f008 fc22 	bl	d222 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    49de:	f3ef 8010 	mrs	r0, PRIMASK
    49e2:	9000      	str	r0, [sp, #0]
    49e4:	b672      	cpsid	i
    49e6:	2103      	movs	r1, #3
    49e8:	4620      	mov	r0, r4
    49ea:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    49ee:	4629      	mov	r1, r5
    49f0:	f008 fc24 	bl	d23c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    49f4:	b930      	cbnz	r0, 4a04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    49f6:	4639      	mov	r1, r7
    49f8:	4620      	mov	r0, r4
    49fa:	f008 fc1f 	bl	d23c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    49fe:	b908      	cbnz	r0, 4a04 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4a00:	f7ff f89e 	bl	3b40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4a04:	9800      	ldr	r0, [sp, #0]
    4a06:	b900      	cbnz	r0, 4a0a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4a08:	b662      	cpsie	i
    4a0a:	4629      	mov	r1, r5
    4a0c:	4620      	mov	r0, r4
    4a0e:	f008 fc15 	bl	d23c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4a12:	b928      	cbnz	r0, 4a20 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    4a14:	4639      	mov	r1, r7
    4a16:	4620      	mov	r0, r4
    4a18:	f008 fc10 	bl	d23c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4a1c:	2800      	cmp	r0, #0
    4a1e:	d0d7      	beq.n	49d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    4a20:	4639      	mov	r1, r7
    4a22:	4620      	mov	r0, r4
    4a24:	f008 fc0a 	bl	d23c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    4a28:	2800      	cmp	r0, #0
    4a2a:	d1c4      	bne.n	49b6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4a2c:	b136      	cbz	r6, 4a3c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    4a2e:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    4a32:	f109 0001 	add.w	r0, r9, #1
    4a36:	f007 f9cf 	bl	bdd8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a3a:	e012      	b.n	4a62 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    4a3c:	f109 0001 	add.w	r0, r9, #1
    4a40:	f007 f9ca 	bl	bdd8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4a44:	2800      	cmp	r0, #0
    4a46:	d1ad      	bne.n	49a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4a48:	2003      	movs	r0, #3
    4a4a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    4a4e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    4a52:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4a56:	200e      	movs	r0, #14
    4a58:	f008 fbe3 	bl	d222 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    4a5c:	4803      	ldr	r0, [pc, #12]	; (4a6c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    4a5e:	f007 f9d2 	bl	be06 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4a62:	2000      	movs	r0, #0
    4a64:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a68:	4000e000 	.word	0x4000e000
    4a6c:	20000297 	.word	0x20000297
    4a70:	e000ed10 	.word	0xe000ed10

00004a74 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4a74:	b510      	push	{r4, lr}
    4a76:	4808      	ldr	r0, [pc, #32]	; (4a98 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a78:	f007 f9c1 	bl	bdfe <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a7c:	b108      	cbz	r0, 4a82 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4a7e:	2125      	movs	r1, #37	; 0x25
    4a80:	e006      	b.n	4a90 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4a82:	4805      	ldr	r0, [pc, #20]	; (4a98 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4a84:	1c40      	adds	r0, r0, #1
    4a86:	f007 f9ba 	bl	bdfe <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4a8a:	2800      	cmp	r0, #0
    4a8c:	d003      	beq.n	4a96 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4a8e:	2129      	movs	r1, #41	; 0x29
    4a90:	201d      	movs	r0, #29
    4a92:	f7ff f9db 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a96:	bd10      	pop	{r4, pc}
    4a98:	20000297 	.word	0x20000297

00004a9c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4a9c:	b570      	push	{r4, r5, r6, lr}
    4a9e:	4911      	ldr	r1, [pc, #68]	; (4ae4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4aa0:	680a      	ldr	r2, [r1, #0]
    4aa2:	b1ea      	cbz	r2, 4ae0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4aa4:	2300      	movs	r3, #0
    4aa6:	461d      	mov	r5, r3
    4aa8:	2401      	movs	r4, #1
    4aaa:	684a      	ldr	r2, [r1, #4]
    4aac:	1c52      	adds	r2, r2, #1
    4aae:	604a      	str	r2, [r1, #4]
    4ab0:	2a09      	cmp	r2, #9
    4ab2:	d300      	bcc.n	4ab6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4ab4:	604d      	str	r5, [r1, #4]
    4ab6:	790e      	ldrb	r6, [r1, #4]
    4ab8:	fa04 f206 	lsl.w	r2, r4, r6
    4abc:	680e      	ldr	r6, [r1, #0]
    4abe:	4216      	tst	r6, r2
    4ac0:	d00b      	beq.n	4ada <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    4ac2:	f3ef 8310 	mrs	r3, PRIMASK
    4ac6:	b672      	cpsid	i
    4ac8:	680c      	ldr	r4, [r1, #0]
    4aca:	4394      	bics	r4, r2
    4acc:	600c      	str	r4, [r1, #0]
    4ace:	b903      	cbnz	r3, 4ad2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4ad0:	b662      	cpsie	i
    4ad2:	6849      	ldr	r1, [r1, #4]
    4ad4:	6001      	str	r1, [r0, #0]
    4ad6:	2000      	movs	r0, #0
    4ad8:	bd70      	pop	{r4, r5, r6, pc}
    4ada:	1c5b      	adds	r3, r3, #1
    4adc:	2b09      	cmp	r3, #9
    4ade:	d3e4      	bcc.n	4aaa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4ae0:	2005      	movs	r0, #5
    4ae2:	bd70      	pop	{r4, r5, r6, pc}
    4ae4:	2000008c 	.word	0x2000008c

00004ae8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4ae8:	4802      	ldr	r0, [pc, #8]	; (4af4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4aea:	2100      	movs	r1, #0
    4aec:	6001      	str	r1, [r0, #0]
    4aee:	6041      	str	r1, [r0, #4]
    4af0:	4770      	bx	lr
    4af2:	0000      	.short	0x0000
    4af4:	2000008c 	.word	0x2000008c

00004af8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4af8:	b510      	push	{r4, lr}
    4afa:	4c08      	ldr	r4, [pc, #32]	; (4b1c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4afc:	7861      	ldrb	r1, [r4, #1]
    4afe:	b109      	cbz	r1, 4b04 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4b00:	200f      	movs	r0, #15
    4b02:	bd10      	pop	{r4, pc}
    4b04:	f7fe ffa8 	bl	3a58 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4b08:	7020      	strb	r0, [r4, #0]
    4b0a:	28ff      	cmp	r0, #255	; 0xff
    4b0c:	d001      	beq.n	4b12 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4b0e:	2000      	movs	r0, #0
    4b10:	bd10      	pop	{r4, pc}
    4b12:	2176      	movs	r1, #118	; 0x76
    4b14:	201f      	movs	r0, #31
    4b16:	f7ff f999 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b1a:	0000      	.short	0x0000
    4b1c:	20000094 	.word	0x20000094

00004b20 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4b20:	4901      	ldr	r1, [pc, #4]	; (4b28 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4b22:	2000      	movs	r0, #0
    4b24:	7048      	strb	r0, [r1, #1]
    4b26:	4770      	bx	lr
    4b28:	20000094 	.word	0x20000094

00004b2c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4b2c:	4806      	ldr	r0, [pc, #24]	; (4b48 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4b2e:	4a07      	ldr	r2, [pc, #28]	; (4b4c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4b30:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4b32:	8852      	ldrh	r2, [r2, #2]
    4b34:	4291      	cmp	r1, r2
    4b36:	d104      	bne.n	4b42 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4b38:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4b3c:	b108      	cbz	r0, 4b42 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4b3e:	2000      	movs	r0, #0
    4b40:	4770      	bx	lr
    4b42:	2001      	movs	r0, #1
    4b44:	4770      	bx	lr
    4b46:	0000      	.short	0x0000
    4b48:	200012d8 	.word	0x200012d8
    4b4c:	2000027c 	.word	0x2000027c

00004b50 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4b50:	4901      	ldr	r1, [pc, #4]	; (4b58 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4b52:	8048      	strh	r0, [r1, #2]
    4b54:	4770      	bx	lr
    4b56:	0000      	.short	0x0000
    4b58:	2000027c 	.word	0x2000027c

00004b5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4b5c:	4808      	ldr	r0, [pc, #32]	; (4b80 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4b5e:	4a09      	ldr	r2, [pc, #36]	; (4b84 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4b60:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4b62:	8852      	ldrh	r2, [r2, #2]
    4b64:	4291      	cmp	r1, r2
    4b66:	d109      	bne.n	4b7c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b68:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4b6c:	8481      	strh	r1, [r0, #36]	; 0x24
    4b6e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b72:	b119      	cbz	r1, 4b7c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4b74:	2100      	movs	r1, #0
    4b76:	7001      	strb	r1, [r0, #0]
    4b78:	2001      	movs	r0, #1
    4b7a:	4770      	bx	lr
    4b7c:	2000      	movs	r0, #0
    4b7e:	4770      	bx	lr
    4b80:	200012d8 	.word	0x200012d8
    4b84:	2000027c 	.word	0x2000027c

00004b88 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4b88:	4807      	ldr	r0, [pc, #28]	; (4ba8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b8a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4b8e:	2901      	cmp	r1, #1
    4b90:	d007      	beq.n	4ba2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4b92:	2101      	movs	r1, #1
    4b94:	7001      	strb	r1, [r0, #0]
    4b96:	4805      	ldr	r0, [pc, #20]	; (4bac <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4b98:	4903      	ldr	r1, [pc, #12]	; (4ba8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4b9a:	8800      	ldrh	r0, [r0, #0]
    4b9c:	8488      	strh	r0, [r1, #36]	; 0x24
    4b9e:	2001      	movs	r0, #1
    4ba0:	4770      	bx	lr
    4ba2:	2000      	movs	r0, #0
    4ba4:	4770      	bx	lr
    4ba6:	0000      	.short	0x0000
    4ba8:	200012d8 	.word	0x200012d8
    4bac:	2000027c 	.word	0x2000027c

00004bb0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4bb0:	4906      	ldr	r1, [pc, #24]	; (4bcc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4bb2:	4b07      	ldr	r3, [pc, #28]	; (4bd0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4bb4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4bb6:	885b      	ldrh	r3, [r3, #2]
    4bb8:	429a      	cmp	r2, r3
    4bba:	d105      	bne.n	4bc8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4bbc:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4bc0:	b112      	cbz	r2, 4bc8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4bc2:	6001      	str	r1, [r0, #0]
    4bc4:	2001      	movs	r0, #1
    4bc6:	4770      	bx	lr
    4bc8:	2000      	movs	r0, #0
    4bca:	4770      	bx	lr
    4bcc:	200012d8 	.word	0x200012d8
    4bd0:	2000027c 	.word	0x2000027c

00004bd4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4bd4:	4909      	ldr	r1, [pc, #36]	; (4bfc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4bd6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4bd8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4bdc:	3bff      	subs	r3, #255	; 0xff
    4bde:	d002      	beq.n	4be6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4be0:	2100      	movs	r1, #0
    4be2:	6001      	str	r1, [r0, #0]
    4be4:	e007      	b.n	4bf6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4be6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4bea:	4904      	ldr	r1, [pc, #16]	; (4bfc <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4bec:	2a01      	cmp	r2, #1
    4bee:	d002      	beq.n	4bf6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4bf0:	6001      	str	r1, [r0, #0]
    4bf2:	2001      	movs	r0, #1
    4bf4:	4770      	bx	lr
    4bf6:	2000      	movs	r0, #0
    4bf8:	4770      	bx	lr
    4bfa:	0000      	.short	0x0000
    4bfc:	200012d8 	.word	0x200012d8

00004c00 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4c00:	4901      	ldr	r1, [pc, #4]	; (4c08 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4c02:	8008      	strh	r0, [r1, #0]
    4c04:	4770      	bx	lr
    4c06:	0000      	.short	0x0000
    4c08:	2000027c 	.word	0x2000027c

00004c0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4c0c:	4905      	ldr	r1, [pc, #20]	; (4c24 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4c0e:	2000      	movs	r0, #0
    4c10:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4c14:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4c18:	8488      	strh	r0, [r1, #36]	; 0x24
    4c1a:	4903      	ldr	r1, [pc, #12]	; (4c28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4c1c:	8008      	strh	r0, [r1, #0]
    4c1e:	8048      	strh	r0, [r1, #2]
    4c20:	4770      	bx	lr
    4c22:	0000      	.short	0x0000
    4c24:	200012d8 	.word	0x200012d8
    4c28:	2000027c 	.word	0x2000027c
    4c2c:	4905      	ldr	r1, [pc, #20]	; (4c44 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4c2e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4c30:	4282      	cmp	r2, r0
    4c32:	d105      	bne.n	4c40 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4c34:	2000      	movs	r0, #0
    4c36:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4c3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4c3e:	8488      	strh	r0, [r1, #36]	; 0x24
    4c40:	4770      	bx	lr
    4c42:	0000      	.short	0x0000
    4c44:	200012d8 	.word	0x200012d8

00004c48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4c48:	4a0a      	ldr	r2, [pc, #40]	; (4c74 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4c4a:	b110      	cbz	r0, 4c52 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4c4c:	2801      	cmp	r0, #1
    4c4e:	d007      	beq.n	4c60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4c50:	e00e      	b.n	4c70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c52:	7850      	ldrb	r0, [r2, #1]
    4c54:	b160      	cbz	r0, 4c70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c56:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4c5a:	6008      	str	r0, [r1, #0]
    4c5c:	88d0      	ldrh	r0, [r2, #6]
    4c5e:	e004      	b.n	4c6a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4c60:	7810      	ldrb	r0, [r2, #0]
    4c62:	b128      	cbz	r0, 4c70 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4c64:	6890      	ldr	r0, [r2, #8]
    4c66:	6008      	str	r0, [r1, #0]
    4c68:	8990      	ldrh	r0, [r2, #12]
    4c6a:	8088      	strh	r0, [r1, #4]
    4c6c:	2001      	movs	r0, #1
    4c6e:	4770      	bx	lr
    4c70:	2000      	movs	r0, #0
    4c72:	4770      	bx	lr
    4c74:	20000299 	.word	0x20000299

00004c78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4c78:	4a08      	ldr	r2, [pc, #32]	; (4c9c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4c7a:	2301      	movs	r3, #1
    4c7c:	b138      	cbz	r0, 4c8e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4c7e:	2801      	cmp	r0, #1
    4c80:	d104      	bne.n	4c8c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4c82:	7013      	strb	r3, [r2, #0]
    4c84:	6808      	ldr	r0, [r1, #0]
    4c86:	6090      	str	r0, [r2, #8]
    4c88:	8888      	ldrh	r0, [r1, #4]
    4c8a:	8190      	strh	r0, [r2, #12]
    4c8c:	4770      	bx	lr
    4c8e:	7053      	strb	r3, [r2, #1]
    4c90:	6808      	ldr	r0, [r1, #0]
    4c92:	f8c2 0002 	str.w	r0, [r2, #2]
    4c96:	8888      	ldrh	r0, [r1, #4]
    4c98:	80d0      	strh	r0, [r2, #6]
    4c9a:	4770      	bx	lr
    4c9c:	20000299 	.word	0x20000299

00004ca0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4ca0:	4906      	ldr	r1, [pc, #24]	; (4cbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4ca2:	b110      	cbz	r0, 4caa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4ca4:	2801      	cmp	r0, #1
    4ca6:	d002      	beq.n	4cae <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4ca8:	e005      	b.n	4cb6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4caa:	7848      	ldrb	r0, [r1, #1]
    4cac:	e000      	b.n	4cb0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4cae:	7808      	ldrb	r0, [r1, #0]
    4cb0:	b108      	cbz	r0, 4cb6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4cb2:	2001      	movs	r0, #1
    4cb4:	4770      	bx	lr
    4cb6:	2000      	movs	r0, #0
    4cb8:	4770      	bx	lr
    4cba:	0000      	.short	0x0000
    4cbc:	20000299 	.word	0x20000299

00004cc0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4cc0:	4901      	ldr	r1, [pc, #4]	; (4cc8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4cc2:	7448      	strb	r0, [r1, #17]
    4cc4:	4770      	bx	lr
    4cc6:	0000      	.short	0x0000
    4cc8:	20000c32 	.word	0x20000c32

00004ccc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4ccc:	4801      	ldr	r0, [pc, #4]	; (4cd4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4cce:	78c0      	ldrb	r0, [r0, #3]
    4cd0:	4770      	bx	lr
    4cd2:	0000      	.short	0x0000
    4cd4:	200000b0 	.word	0x200000b0

00004cd8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4cd8:	4801      	ldr	r0, [pc, #4]	; (4ce0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4cda:	7900      	ldrb	r0, [r0, #4]
    4cdc:	4770      	bx	lr
    4cde:	0000      	.short	0x0000
    4ce0:	200000b0 	.word	0x200000b0

00004ce4 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4ce4:	b578      	push	{r3, r4, r5, r6, lr}
    4ce6:	4913      	ldr	r1, [pc, #76]	; (4d34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4ce8:	7c4a      	ldrb	r2, [r1, #17]
    4cea:	b30a      	cbz	r2, 4d30 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4cec:	7c0a      	ldrb	r2, [r1, #16]
    4cee:	f88d 2000 	strb.w	r2, [sp]
    4cf2:	9a00      	ldr	r2, [sp, #0]
    4cf4:	9200      	str	r2, [sp, #0]
    4cf6:	f89d 2000 	ldrb.w	r2, [sp]
    4cfa:	b1ca      	cbz	r2, 4d30 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4cfc:	2300      	movs	r3, #0
    4cfe:	f101 0210 	add.w	r2, r1, #16
    4d02:	241a      	movs	r4, #26
    4d04:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4d08:	7c0e      	ldrb	r6, [r1, #16]
    4d0a:	f88d 6000 	strb.w	r6, [sp]
    4d0e:	9e00      	ldr	r6, [sp, #0]
    4d10:	9600      	str	r6, [sp, #0]
    4d12:	f89d 6000 	ldrb.w	r6, [sp]
    4d16:	b14e      	cbz	r6, 4d2c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4d18:	7013      	strb	r3, [r2, #0]
    4d1a:	7043      	strb	r3, [r0, #1]
    4d1c:	7004      	strb	r4, [r0, #0]
    4d1e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4d22:	6046      	str	r6, [r0, #4]
    4d24:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4d28:	6086      	str	r6, [r0, #8]
    4d2a:	e7ed      	b.n	4d08 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4d2c:	2001      	movs	r0, #1
    4d2e:	bd78      	pop	{r3, r4, r5, r6, pc}
    4d30:	2000      	movs	r0, #0
    4d32:	bd78      	pop	{r3, r4, r5, r6, pc}
    4d34:	20000c32 	.word	0x20000c32

00004d38 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4d38:	b510      	push	{r4, lr}
    4d3a:	4604      	mov	r4, r0
    4d3c:	f000 f956 	bl	4fec <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4d40:	b118      	cbz	r0, 4d4a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4d42:	21bd      	movs	r1, #189	; 0xbd
    4d44:	2027      	movs	r0, #39	; 0x27
    4d46:	f7ff f881 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d4a:	4803      	ldr	r0, [pc, #12]	; (4d58 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4d4c:	2101      	movs	r1, #1
    4d4e:	f008 fe44 	bl	d9da <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4d52:	4802      	ldr	r0, [pc, #8]	; (4d5c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4d54:	62c4      	str	r4, [r0, #44]	; 0x2c
    4d56:	bd10      	pop	{r4, pc}
    4d58:	20000c10 	.word	0x20000c10
    4d5c:	200000b0 	.word	0x200000b0

00004d60 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4d60:	4901      	ldr	r1, [pc, #4]	; (4d68 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4d62:	2001      	movs	r0, #1
    4d64:	7188      	strb	r0, [r1, #6]
    4d66:	4770      	bx	lr
    4d68:	200000b0 	.word	0x200000b0

00004d6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d70:	4d5f      	ldr	r5, [pc, #380]	; (4ef0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    4d72:	9c08      	ldr	r4, [sp, #32]
    4d74:	782e      	ldrb	r6, [r5, #0]
    4d76:	2e00      	cmp	r6, #0
    4d78:	d16b      	bne.n	4e52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d7a:	2a00      	cmp	r2, #0
    4d7c:	d069      	beq.n	4e52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d7e:	2b00      	cmp	r3, #0
    4d80:	d067      	beq.n	4e52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d82:	2c00      	cmp	r4, #0
    4d84:	d065      	beq.n	4e52 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4d86:	f105 0614 	add.w	r6, r5, #20
    4d8a:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4d8e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4d92:	2700      	movs	r7, #0
    4d94:	71af      	strb	r7, [r5, #6]
    4d96:	716f      	strb	r7, [r5, #5]
    4d98:	70ef      	strb	r7, [r5, #3]
    4d9a:	70af      	strb	r7, [r5, #2]
    4d9c:	712f      	strb	r7, [r5, #4]
    4d9e:	81af      	strh	r7, [r5, #12]
    4da0:	81ef      	strh	r7, [r5, #14]
    4da2:	f000 f95b 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4da6:	4606      	mov	r6, r0
    4da8:	f000 f952 	bl	5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4dac:	4604      	mov	r4, r0
    4dae:	f006 f825 	bl	adfc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4db2:	f005 fcb9 	bl	a728 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4db6:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4dba:	f006 f8a5 	bl	af08 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4dbe:	f104 0018 	add.w	r0, r4, #24
    4dc2:	f006 f97f 	bl	b0c4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4dc6:	6920      	ldr	r0, [r4, #16]
    4dc8:	f006 f972 	bl	b0b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4dcc:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4dd0:	f006 f996 	bl	b100 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4dd4:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4dd8:	6840      	ldr	r0, [r0, #4]
    4dda:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    4dde:	b108      	cbz	r0, 4de4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4de0:	f005 ff56 	bl	ac90 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4de4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4de8:	2001      	movs	r0, #1
    4dea:	f005 fe81 	bl	aaf0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4dee:	2800      	cmp	r0, #0
    4df0:	d076      	beq.n	4ee0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
    4df2:	4840      	ldr	r0, [pc, #256]	; (4ef4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    4df4:	f005 fef8 	bl	abe8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4df8:	8820      	ldrh	r0, [r4, #0]
    4dfa:	f7ff fc57 	bl	46ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4dfe:	6328      	str	r0, [r5, #48]	; 0x30
    4e00:	8820      	ldrh	r0, [r4, #0]
    4e02:	f7ff fc3d 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4e06:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4e0a:	6368      	str	r0, [r5, #52]	; 0x34
    4e0c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 4ef8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    4e10:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4e14:	f109 0808 	add.w	r8, r9, #8
    4e18:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4e1c:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4e1e:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4e22:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4e24:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4e28:	f000 f98a 	bl	5140 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4e2c:	4601      	mov	r1, r0
    4e2e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4e30:	46ba      	mov	sl, r7
    4e32:	f008 fb6a 	bl	d50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4e36:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4e38:	4281      	cmp	r1, r0
    4e3a:	d200      	bcs.n	4e3e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    4e3c:	4608      	mov	r0, r1
    4e3e:	7228      	strb	r0, [r5, #8]
    4e40:	46a8      	mov	r8, r5
    4e42:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4e46:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4e48:	7cf7      	ldrb	r7, [r6, #19]
    4e4a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4e4c:	2908      	cmp	r1, #8
    4e4e:	d104      	bne.n	4e5a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    4e50:	e002      	b.n	4e58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4e52:	f44f 718a 	mov.w	r1, #276	; 0x114
    4e56:	e047      	b.n	4ee8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    4e58:	2104      	movs	r1, #4
    4e5a:	f008 fb56 	bl	d50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4e5e:	b90f      	cbnz	r7, 4e64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    4e60:	1d00      	adds	r0, r0, #4
    4e62:	b280      	uxth	r0, r0
    4e64:	4285      	cmp	r5, r0
    4e66:	d200      	bcs.n	4e6a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4e68:	4628      	mov	r0, r5
    4e6a:	b2c5      	uxtb	r5, r0
    4e6c:	f888 5009 	strb.w	r5, [r8, #9]
    4e70:	7cf1      	ldrb	r1, [r6, #19]
    4e72:	2900      	cmp	r1, #0
    4e74:	d002      	beq.n	4e7c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4e76:	bf00      	nop
    4e78:	f04f 0104 	mov.w	r1, #4
    4e7c:	4429      	add	r1, r5
    4e7e:	f888 1007 	strb.w	r1, [r8, #7]
    4e82:	4657      	mov	r7, sl
    4e84:	d016      	beq.n	4eb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
    4e86:	481c      	ldr	r0, [pc, #112]	; (4ef8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4e88:	f04f 0101 	mov.w	r1, #1
    4e8c:	f100 0008 	add.w	r0, r0, #8
    4e90:	7601      	strb	r1, [r0, #24]
    4e92:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4e96:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4e9a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4e9e:	f008 fa3a 	bl	d316 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    4ea2:	4915      	ldr	r1, [pc, #84]	; (4ef8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4ea4:	4603      	mov	r3, r0
    4ea6:	462a      	mov	r2, r5
    4ea8:	3108      	adds	r1, #8
    4eaa:	2001      	movs	r0, #1
    4eac:	f005 fc86 	bl	a7bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4eb0:	f005 fcba 	bl	a828 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4eb4:	2001      	movs	r0, #1
    4eb6:	f000 fb73 	bl	55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    4eba:	4810      	ldr	r0, [pc, #64]	; (4efc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    4ebc:	6800      	ldr	r0, [r0, #0]
    4ebe:	2803      	cmp	r0, #3
    4ec0:	d010      	beq.n	4ee4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    4ec2:	280b      	cmp	r0, #11
    4ec4:	d00e      	beq.n	4ee4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    4ec6:	4648      	mov	r0, r9
    4ec8:	f840 7f52 	str.w	r7, [r0, #82]!
    4ecc:	6047      	str	r7, [r0, #4]
    4ece:	480a      	ldr	r0, [pc, #40]	; (4ef8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    4ed0:	88b1      	ldrh	r1, [r6, #4]
    4ed2:	3052      	adds	r0, #82	; 0x52
    4ed4:	8041      	strh	r1, [r0, #2]
    4ed6:	8821      	ldrh	r1, [r4, #0]
    4ed8:	8001      	strh	r1, [r0, #0]
    4eda:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4ede:	7101      	strb	r1, [r0, #4]
    4ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4ee4:	f240 11c1 	movw	r1, #449	; 0x1c1
    4ee8:	2027      	movs	r0, #39	; 0x27
    4eea:	f7fe ffaf 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eee:	0000      	.short	0x0000
    4ef0:	200000b0 	.word	0x200000b0
    4ef4:	000057a4 	.word	0x000057a4
    4ef8:	20000be0 	.word	0x20000be0
    4efc:	40001550 	.word	0x40001550

00004f00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4f04:	4605      	mov	r5, r0
    4f06:	f000 f8a9 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f0a:	4e33      	ldr	r6, [pc, #204]	; (4fd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4f0c:	4604      	mov	r4, r0
    4f0e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4f10:	7847      	ldrb	r7, [r0, #1]
    4f12:	b10d      	cbz	r5, 4f18 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4f14:	2d01      	cmp	r5, #1
    4f16:	d103      	bne.n	4f20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4f18:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4f1a:	f007 f97c 	bl	c216 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4f1e:	7070      	strb	r0, [r6, #1]
    4f20:	7870      	ldrb	r0, [r6, #1]
    4f22:	f04f 0800 	mov.w	r8, #0
    4f26:	f04f 0901 	mov.w	r9, #1
    4f2a:	b150      	cbz	r0, 4f42 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4f2c:	2801      	cmp	r0, #1
    4f2e:	d01a      	beq.n	4f66 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4f30:	2802      	cmp	r0, #2
    4f32:	d034      	beq.n	4f9e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4f34:	2803      	cmp	r0, #3
    4f36:	d048      	beq.n	4fca <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4f38:	f240 4115 	movw	r1, #1045	; 0x415
    4f3c:	2027      	movs	r0, #39	; 0x27
    4f3e:	f7fe ff85 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f42:	2d01      	cmp	r5, #1
    4f44:	d032      	beq.n	4fac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4f46:	f000 f8e7 	bl	5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4f4a:	4639      	mov	r1, r7
    4f4c:	2201      	movs	r2, #1
    4f4e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f50:	f007 fd88 	bl	ca64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4f54:	e028      	b.n	4fa8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4f56:	bf00      	nop
    4f58:	f884 8008 	strb.w	r8, [r4, #8]
    4f5c:	e031      	b.n	4fc2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f5e:	bf00      	nop
    4f60:	f884 9008 	strb.w	r9, [r4, #8]
    4f64:	e02d      	b.n	4fc2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4f66:	2d01      	cmp	r5, #1
    4f68:	d008      	beq.n	4f7c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4f6a:	f000 f8d5 	bl	5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4f6e:	4639      	mov	r1, r7
    4f70:	2200      	movs	r2, #0
    4f72:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4f74:	f007 fd76 	bl	ca64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4f78:	2d02      	cmp	r5, #2
    4f7a:	d00b      	beq.n	4f94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f7c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4f80:	1c40      	adds	r0, r0, #1
    4f82:	f141 0100 	adc.w	r1, r1, #0
    4f86:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4f8a:	7a20      	ldrb	r0, [r4, #8]
    4f8c:	2801      	cmp	r0, #1
    4f8e:	d003      	beq.n	4f98 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4f90:	f884 9008 	strb.w	r9, [r4, #8]
    4f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f98:	f884 8008 	strb.w	r8, [r4, #8]
    4f9c:	e7fa      	b.n	4f94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4f9e:	2d01      	cmp	r5, #1
    4fa0:	d004      	beq.n	4fac <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4fa2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4fa4:	f007 ff6f 	bl	ce86 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4fa8:	2d02      	cmp	r5, #2
    4faa:	d0f3      	beq.n	4f94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4fac:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4fb0:	1c40      	adds	r0, r0, #1
    4fb2:	f141 0100 	adc.w	r1, r1, #0
    4fb6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4fba:	7a20      	ldrb	r0, [r4, #8]
    4fbc:	2801      	cmp	r0, #1
    4fbe:	d1cf      	bne.n	4f60 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4fc0:	e7ca      	b.n	4f58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4fc2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4fc6:	f001 b8cd 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4fca:	2d01      	cmp	r5, #1
    4fcc:	d0e2      	beq.n	4f94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4fce:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4fd0:	f007 ff59 	bl	ce86 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4fd4:	e7f5      	b.n	4fc2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4fd6:	0000      	.short	0x0000
    4fd8:	200000b0 	.word	0x200000b0

00004fdc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4fdc:	4802      	ldr	r0, [pc, #8]	; (4fe8 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4fde:	89c0      	ldrh	r0, [r0, #14]
    4fe0:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4fe4:	4770      	bx	lr
    4fe6:	0000      	.short	0x0000
    4fe8:	200000b0 	.word	0x200000b0

00004fec <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4fec:	4804      	ldr	r0, [pc, #16]	; (5000 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4fee:	7800      	ldrb	r0, [r0, #0]
    4ff0:	b108      	cbz	r0, 4ff6 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4ff2:	200c      	movs	r0, #12
    4ff4:	4770      	bx	lr
    4ff6:	4903      	ldr	r1, [pc, #12]	; (5004 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4ff8:	2000      	movs	r0, #0
    4ffa:	7448      	strb	r0, [r1, #17]
    4ffc:	4770      	bx	lr
    4ffe:	0000      	.short	0x0000
    5000:	200000b0 	.word	0x200000b0
    5004:	20000c32 	.word	0x20000c32

00005008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5008:	480c      	ldr	r0, [pc, #48]	; (503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    500a:	b510      	push	{r4, lr}
    500c:	7801      	ldrb	r1, [r0, #0]
    500e:	b149      	cbz	r1, 5024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5010:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5014:	7800      	ldrb	r0, [r0, #0]
    5016:	2802      	cmp	r0, #2
    5018:	d008      	beq.n	502c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    501a:	f240 11dd 	movw	r1, #477	; 0x1dd
    501e:	2027      	movs	r0, #39	; 0x27
    5020:	f7fe ff14 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5028:	f000 b9d8 	b.w	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    502c:	6848      	ldr	r0, [r1, #4]
    502e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    5032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5036:	f005 bddf 	b.w	abf8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    503a:	0000      	.short	0x0000
    503c:	200000b0 	.word	0x200000b0
    5040:	4a02      	ldr	r2, [pc, #8]	; (504c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5042:	8993      	ldrh	r3, [r2, #12]
    5044:	4303      	orrs	r3, r0
    5046:	8193      	strh	r3, [r2, #12]
    5048:	6952      	ldr	r2, [r2, #20]
    504a:	4710      	bx	r2
    504c:	200000b0 	.word	0x200000b0
    5050:	4801      	ldr	r0, [pc, #4]	; (5058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5052:	6840      	ldr	r0, [r0, #4]
    5054:	4770      	bx	lr
    5056:	0000      	.short	0x0000
    5058:	200000e8 	.word	0x200000e8
    505c:	4801      	ldr	r0, [pc, #4]	; (5064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    505e:	6840      	ldr	r0, [r0, #4]
    5060:	3070      	adds	r0, #112	; 0x70
    5062:	4770      	bx	lr
    5064:	200000e8 	.word	0x200000e8
    5068:	4a01      	ldr	r2, [pc, #4]	; (5070 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    506a:	2100      	movs	r1, #0
    506c:	6952      	ldr	r2, [r2, #20]
    506e:	4710      	bx	r2
    5070:	200000b0 	.word	0x200000b0
    5074:	b570      	push	{r4, r5, r6, lr}
    5076:	f7ff fff1 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    507a:	4604      	mov	r4, r0
    507c:	f7ff ffe8 	bl	5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5080:	4605      	mov	r5, r0
    5082:	4621      	mov	r1, r4
    5084:	f008 fac4 	bl	d610 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5088:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    508c:	2901      	cmp	r1, #1
    508e:	d114      	bne.n	50ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5090:	2800      	cmp	r0, #0
    5092:	d012      	beq.n	50ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5094:	4809      	ldr	r0, [pc, #36]	; (50bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5096:	6842      	ldr	r2, [r0, #4]
    5098:	8828      	ldrh	r0, [r5, #0]
    509a:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    509e:	7a60      	ldrb	r0, [r4, #9]
    50a0:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    50a4:	7aa0      	ldrb	r0, [r4, #10]
    50a6:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    50aa:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    50ae:	2001      	movs	r0, #1
    50b0:	7010      	strb	r0, [r2, #0]
    50b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50b6:	f001 b855 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    50ba:	bd70      	pop	{r4, r5, r6, pc}
    50bc:	200000e8 	.word	0x200000e8
    50c0:	b570      	push	{r4, r5, r6, lr}
    50c2:	4605      	mov	r5, r0
    50c4:	2901      	cmp	r1, #1
    50c6:	d818      	bhi.n	50fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50c8:	4c12      	ldr	r4, [pc, #72]	; (5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    50ca:	69a1      	ldr	r1, [r4, #24]
    50cc:	4788      	blx	r1
    50ce:	b1a0      	cbz	r0, 50fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50d0:	7960      	ldrb	r0, [r4, #5]
    50d2:	b990      	cbnz	r0, 50fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    50d4:	b9e5      	cbnz	r5, 5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    50d6:	f104 0010 	add.w	r0, r4, #16
    50da:	7801      	ldrb	r1, [r0, #0]
    50dc:	06c8      	lsls	r0, r1, #27
    50de:	d405      	bmi.n	50ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    50e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    50e2:	7800      	ldrb	r0, [r0, #0]
    50e4:	06c0      	lsls	r0, r0, #27
    50e6:	d401      	bmi.n	50ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    50e8:	2001      	movs	r0, #1
    50ea:	e000      	b.n	50ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    50ec:	2000      	movs	r0, #0
    50ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    50f0:	b92a      	cbnz	r2, 50fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    50f2:	8962      	ldrh	r2, [r4, #10]
    50f4:	b11a      	cbz	r2, 50fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    50f6:	06c9      	lsls	r1, r1, #27
    50f8:	d401      	bmi.n	50fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    50fa:	2001      	movs	r0, #1
    50fc:	bd70      	pop	{r4, r5, r6, pc}
    50fe:	89a1      	ldrh	r1, [r4, #12]
    5100:	078a      	lsls	r2, r1, #30
    5102:	d503      	bpl.n	510c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5104:	6a22      	ldr	r2, [r4, #32]
    5106:	78d2      	ldrb	r2, [r2, #3]
    5108:	2a02      	cmp	r2, #2
    510a:	d001      	beq.n	5110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    510c:	4308      	orrs	r0, r1
    510e:	d1f4      	bne.n	50fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5110:	2000      	movs	r0, #0
    5112:	bd70      	pop	{r4, r5, r6, pc}
    5114:	200000b0 	.word	0x200000b0
    5118:	b510      	push	{r4, lr}
    511a:	4c08      	ldr	r4, [pc, #32]	; (513c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    511c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    511e:	b138      	cbz	r0, 5130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5120:	8962      	ldrh	r2, [r4, #10]
    5122:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5124:	1cd2      	adds	r2, r2, #3
    5126:	f006 ff00 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    512a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    512c:	6260      	str	r0, [r4, #36]	; 0x24
    512e:	bd10      	pop	{r4, pc}
    5130:	f240 415b 	movw	r1, #1115	; 0x45b
    5134:	2027      	movs	r0, #39	; 0x27
    5136:	f7fe fe89 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    513a:	0000      	.short	0x0000
    513c:	200000b0 	.word	0x200000b0
    5140:	b510      	push	{r4, lr}
    5142:	f7ff ff85 	bl	5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5146:	4604      	mov	r4, r0
    5148:	f7ff ff88 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    514c:	4601      	mov	r1, r0
    514e:	7b42      	ldrb	r2, [r0, #13]
    5150:	4815      	ldr	r0, [pc, #84]	; (51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5152:	2a24      	cmp	r2, #36	; 0x24
    5154:	d00e      	beq.n	5174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5156:	7b89      	ldrb	r1, [r1, #14]
    5158:	2924      	cmp	r1, #36	; 0x24
    515a:	d00b      	beq.n	5174 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    515c:	2a1f      	cmp	r2, #31
    515e:	d00d      	beq.n	517c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5160:	2a20      	cmp	r2, #32
    5162:	d00b      	beq.n	517c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5164:	2922      	cmp	r1, #34	; 0x22
    5166:	d00f      	beq.n	5188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5168:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    516c:	2804      	cmp	r0, #4
    516e:	d100      	bne.n	5172 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5170:	2008      	movs	r0, #8
    5172:	bd10      	pop	{r4, pc}
    5174:	6840      	ldr	r0, [r0, #4]
    5176:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    517a:	e00e      	b.n	519a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    517c:	2922      	cmp	r1, #34	; 0x22
    517e:	d003      	beq.n	5188 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5180:	6840      	ldr	r0, [r0, #4]
    5182:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    5186:	e005      	b.n	5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5188:	6841      	ldr	r1, [r0, #4]
    518a:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    518e:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5192:	4008      	ands	r0, r1
    5194:	f008 f8b5 	bl	d302 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5198:	4601      	mov	r1, r0
    519a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    519e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    51a2:	f008 b8c6 	b.w	d332 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    51a6:	0000      	.short	0x0000
    51a8:	200000e8 	.word	0x200000e8
    51ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    51b0:	4688      	mov	r8, r1
    51b2:	4607      	mov	r7, r0
    51b4:	f7ff ff52 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    51b8:	4c57      	ldr	r4, [pc, #348]	; (5318 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    51ba:	2600      	movs	r6, #0
    51bc:	4605      	mov	r5, r0
    51be:	f88d 6000 	strb.w	r6, [sp]
    51c2:	7820      	ldrb	r0, [r4, #0]
    51c4:	2802      	cmp	r0, #2
    51c6:	d004      	beq.n	51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    51c8:	f240 41ba 	movw	r1, #1210	; 0x4ba
    51cc:	2027      	movs	r0, #39	; 0x27
    51ce:	f7fe fe3d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51d2:	7ba0      	ldrb	r0, [r4, #14]
    51d4:	0640      	lsls	r0, r0, #25
    51d6:	d406      	bmi.n	51e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    51d8:	2040      	movs	r0, #64	; 0x40
    51da:	f7ff ff45 	bl	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    51de:	89e0      	ldrh	r0, [r4, #14]
    51e0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    51e4:	81e0      	strh	r0, [r4, #14]
    51e6:	7ce8      	ldrb	r0, [r5, #19]
    51e8:	b3c7      	cbz	r7, 525c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    51ea:	f005 fb4d 	bl	a888 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    51ee:	f005 fb31 	bl	a854 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    51f2:	b968      	cbnz	r0, 5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51f4:	7ce8      	ldrb	r0, [r5, #19]
    51f6:	b158      	cbz	r0, 5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    51fa:	7841      	ldrb	r1, [r0, #1]
    51fc:	b141      	cbz	r1, 5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    51fe:	7800      	ldrb	r0, [r0, #0]
    5200:	7a29      	ldrb	r1, [r5, #8]
    5202:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5206:	4288      	cmp	r0, r1
    5208:	d102      	bne.n	5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    520a:	2001      	movs	r0, #1
    520c:	70a0      	strb	r0, [r4, #2]
    520e:	e063      	b.n	52d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    5210:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5212:	7841      	ldrb	r1, [r0, #1]
    5214:	8161      	strh	r1, [r4, #10]
    5216:	b121      	cbz	r1, 5222 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5218:	6b60      	ldr	r0, [r4, #52]	; 0x34
    521a:	f007 fe01 	bl	ce20 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    521e:	62a0      	str	r0, [r4, #40]	; 0x28
    5220:	e000      	b.n	5224 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    5222:	62a6      	str	r6, [r4, #40]	; 0x28
    5224:	89e0      	ldrh	r0, [r4, #14]
    5226:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    522a:	81e0      	strh	r0, [r4, #14]
    522c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    522e:	79e9      	ldrb	r1, [r5, #7]
    5230:	7800      	ldrb	r0, [r0, #0]
    5232:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5236:	4288      	cmp	r0, r1
    5238:	d005      	beq.n	5246 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    523a:	f000 f963 	bl	5504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    523e:	89e0      	ldrh	r0, [r4, #14]
    5240:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5244:	81e0      	strh	r0, [r4, #14]
    5246:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5248:	7a29      	ldrb	r1, [r5, #8]
    524a:	7800      	ldrb	r0, [r0, #0]
    524c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5250:	4288      	cmp	r0, r1
    5252:	d10e      	bne.n	5272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5254:	4668      	mov	r0, sp
    5256:	f000 f917 	bl	5488 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    525a:	e00a      	b.n	5272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    525c:	e7ff      	b.n	525e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    525e:	b108      	cbz	r0, 5264 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    5260:	f005 fb0c 	bl	a87c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5264:	78e0      	ldrb	r0, [r4, #3]
    5266:	1c40      	adds	r0, r0, #1
    5268:	70e0      	strb	r0, [r4, #3]
    526a:	89e0      	ldrh	r0, [r4, #14]
    526c:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5270:	81e0      	strh	r0, [r4, #14]
    5272:	7ca8      	ldrb	r0, [r5, #18]
    5274:	b198      	cbz	r0, 529e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    5276:	f7ff feeb 	bl	5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    527a:	4928      	ldr	r1, [pc, #160]	; (531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    527c:	760e      	strb	r6, [r1, #24]
    527e:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    5282:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5286:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    528a:	f008 f844 	bl	d316 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    528e:	4603      	mov	r3, r0
    5290:	22fb      	movs	r2, #251	; 0xfb
    5292:	4922      	ldr	r1, [pc, #136]	; (531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    5294:	2000      	movs	r0, #0
    5296:	f005 fa91 	bl	a7bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    529a:	f005 fac5 	bl	a828 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    529e:	4d1f      	ldr	r5, [pc, #124]	; (531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    52a0:	354a      	adds	r5, #74	; 0x4a
    52a2:	f1b8 0f00 	cmp.w	r8, #0
    52a6:	d104      	bne.n	52b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    52a8:	78e1      	ldrb	r1, [r4, #3]
    52aa:	2001      	movs	r0, #1
    52ac:	f7ff ff08 	bl	50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    52b0:	b1b0      	cbz	r0, 52e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    52b2:	f005 fed9 	bl	b068 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    52b6:	f89d 0000 	ldrb.w	r0, [sp]
    52ba:	b110      	cbz	r0, 52c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    52bc:	2000      	movs	r0, #0
    52be:	f7ff fe1f 	bl	4f00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    52c2:	b137      	cbz	r7, 52d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    52c4:	70e6      	strb	r6, [r4, #3]
    52c6:	7968      	ldrb	r0, [r5, #5]
    52c8:	1c40      	adds	r0, r0, #1
    52ca:	7168      	strb	r0, [r5, #5]
    52cc:	f7ff fed2 	bl	5074 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    52d0:	e002      	b.n	52d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    52d2:	79a8      	ldrb	r0, [r5, #6]
    52d4:	1c40      	adds	r0, r0, #1
    52d6:	71a8      	strb	r0, [r5, #6]
    52d8:	f000 f880 	bl	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    52dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    52e0:	f89d 0000 	ldrb.w	r0, [sp]
    52e4:	b110      	cbz	r0, 52ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    52e6:	2001      	movs	r0, #1
    52e8:	f7ff fe0a 	bl	4f00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    52ec:	2000      	movs	r0, #0
    52ee:	f000 f995 	bl	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    52f2:	f89d 0000 	ldrb.w	r0, [sp]
    52f6:	b110      	cbz	r0, 52fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    52f8:	2002      	movs	r0, #2
    52fa:	f7ff fe01 	bl	4f00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    52fe:	b137      	cbz	r7, 530e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    5300:	70e6      	strb	r6, [r4, #3]
    5302:	7968      	ldrb	r0, [r5, #5]
    5304:	1c40      	adds	r0, r0, #1
    5306:	7168      	strb	r0, [r5, #5]
    5308:	f7ff feb4 	bl	5074 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    530c:	e7e6      	b.n	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    530e:	79a8      	ldrb	r0, [r5, #6]
    5310:	1c40      	adds	r0, r0, #1
    5312:	71a8      	strb	r0, [r5, #6]
    5314:	e7e2      	b.n	52dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5316:	0000      	.short	0x0000
    5318:	200000b0 	.word	0x200000b0
    531c:	20000be8 	.word	0x20000be8
    5320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5324:	460f      	mov	r7, r1
    5326:	4680      	mov	r8, r0
    5328:	f7ff fe98 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    532c:	4d29      	ldr	r5, [pc, #164]	; (53d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    532e:	4604      	mov	r4, r0
    5330:	7828      	ldrb	r0, [r5, #0]
    5332:	2801      	cmp	r0, #1
    5334:	d004      	beq.n	5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5336:	f240 416a 	movw	r1, #1130	; 0x46a
    533a:	2027      	movs	r0, #39	; 0x27
    533c:	f7fe fd86 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5340:	7861      	ldrb	r1, [r4, #1]
    5342:	2000      	movs	r0, #0
    5344:	2601      	movs	r6, #1
    5346:	b129      	cbz	r1, 5354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5348:	7060      	strb	r0, [r4, #1]
    534a:	2100      	movs	r1, #0
    534c:	2004      	movs	r0, #4
    534e:	f7ff fe77 	bl	5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5352:	70e6      	strb	r6, [r4, #3]
    5354:	6a29      	ldr	r1, [r5, #32]
    5356:	7808      	ldrb	r0, [r1, #0]
    5358:	43c0      	mvns	r0, r0
    535a:	0780      	lsls	r0, r0, #30
    535c:	d109      	bne.n	5372 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    535e:	79a0      	ldrb	r0, [r4, #6]
    5360:	bb88      	cbnz	r0, 53c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5362:	2002      	movs	r0, #2
    5364:	f7ff fe6c 	bl	5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5368:	6a28      	ldr	r0, [r5, #32]
    536a:	7800      	ldrb	r0, [r0, #0]
    536c:	43c0      	mvns	r0, r0
    536e:	0780      	lsls	r0, r0, #30
    5370:	d029      	beq.n	53c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    5372:	6a28      	ldr	r0, [r5, #32]
    5374:	7840      	ldrb	r0, [r0, #1]
    5376:	b110      	cbz	r0, 537e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    5378:	2002      	movs	r0, #2
    537a:	71a0      	strb	r0, [r4, #6]
    537c:	e000      	b.n	5380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    537e:	71a6      	strb	r6, [r4, #6]
    5380:	7ce0      	ldrb	r0, [r4, #19]
    5382:	b1a0      	cbz	r0, 53ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    5384:	f7ff fe64 	bl	5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5388:	4913      	ldr	r1, [pc, #76]	; (53d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    538a:	7a6d      	ldrb	r5, [r5, #9]
    538c:	760e      	strb	r6, [r1, #24]
    538e:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    5392:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5396:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    539a:	f007 ffbc 	bl	d316 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    539e:	4603      	mov	r3, r0
    53a0:	462a      	mov	r2, r5
    53a2:	490d      	ldr	r1, [pc, #52]	; (53d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    53a4:	2001      	movs	r0, #1
    53a6:	f005 fa09 	bl	a7bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    53aa:	f005 fa3d 	bl	a828 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    53ae:	ea37 0708 	bics.w	r7, r7, r8
    53b2:	d004      	beq.n	53be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    53b4:	2100      	movs	r1, #0
    53b6:	4608      	mov	r0, r1
    53b8:	f7ff fe82 	bl	50c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    53bc:	b128      	cbz	r0, 53ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    53be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53c2:	f000 b80b 	b.w	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    53c6:	2003      	movs	r0, #3
    53c8:	e7d7      	b.n	537a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    53ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53ce:	2000      	movs	r0, #0
    53d0:	f000 b8e6 	b.w	55a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    53d4:	200000b0 	.word	0x200000b0
    53d8:	20000be8 	.word	0x20000be8
    53dc:	b510      	push	{r4, lr}
    53de:	f005 faeb 	bl	a9b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    53e2:	f005 f9a1 	bl	a728 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    53e6:	4c0d      	ldr	r4, [pc, #52]	; (541c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    53e8:	89e0      	ldrh	r0, [r4, #14]
    53ea:	f7ff fe3d 	bl	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    53ee:	69e2      	ldr	r2, [r4, #28]
    53f0:	7961      	ldrb	r1, [r4, #5]
    53f2:	78a0      	ldrb	r0, [r4, #2]
    53f4:	4790      	blx	r2
    53f6:	480a      	ldr	r0, [pc, #40]	; (5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53f8:	7c40      	ldrb	r0, [r0, #17]
    53fa:	b158      	cbz	r0, 5414 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    53fc:	4808      	ldr	r0, [pc, #32]	; (5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    53fe:	3852      	subs	r0, #82	; 0x52
    5400:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5404:	6081      	str	r1, [r0, #8]
    5406:	6841      	ldr	r1, [r0, #4]
    5408:	60c1      	str	r1, [r0, #12]
    540a:	4805      	ldr	r0, [pc, #20]	; (5420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    540c:	2101      	movs	r1, #1
    540e:	7401      	strb	r1, [r0, #16]
    5410:	f000 fea8 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5414:	2000      	movs	r0, #0
    5416:	7020      	strb	r0, [r4, #0]
    5418:	bd10      	pop	{r4, pc}
    541a:	0000      	.short	0x0000
    541c:	200000b0 	.word	0x200000b0
    5420:	20000c32 	.word	0x20000c32
    5424:	4808      	ldr	r0, [pc, #32]	; (5448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    5426:	b510      	push	{r4, lr}
    5428:	7800      	ldrb	r0, [r0, #0]
    542a:	2802      	cmp	r0, #2
    542c:	d004      	beq.n	5438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    542e:	f240 2111 	movw	r1, #529	; 0x211
    5432:	2027      	movs	r0, #39	; 0x27
    5434:	f7fe fd0a 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5438:	4904      	ldr	r1, [pc, #16]	; (544c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    543a:	2001      	movs	r0, #1
    543c:	71c8      	strb	r0, [r1, #7]
    543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5442:	f7ff bfcb 	b.w	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5446:	0000      	.short	0x0000
    5448:	200000b0 	.word	0x200000b0
    544c:	20000c32 	.word	0x20000c32
    5450:	b430      	push	{r4, r5}
    5452:	4b0c      	ldr	r3, [pc, #48]	; (5484 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    5454:	b942      	cbnz	r2, 5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    5456:	79da      	ldrb	r2, [r3, #7]
    5458:	2aff      	cmp	r2, #255	; 0xff
    545a:	d105      	bne.n	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    545c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5460:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5464:	42a2      	cmp	r2, r4
    5466:	d00b      	beq.n	5480 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    5468:	b131      	cbz	r1, 5478 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    546a:	79da      	ldrb	r2, [r3, #7]
    546c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5470:	bc30      	pop	{r4, r5}
    5472:	4610      	mov	r0, r2
    5474:	f005 be30 	b.w	b0d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    5478:	22ff      	movs	r2, #255	; 0xff
    547a:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    547e:	e7f7      	b.n	5470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    5480:	bc30      	pop	{r4, r5}
    5482:	4770      	bx	lr
    5484:	200000b0 	.word	0x200000b0
    5488:	b570      	push	{r4, r5, r6, lr}
    548a:	4606      	mov	r6, r0
    548c:	f7ff fde6 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5490:	4a1b      	ldr	r2, [pc, #108]	; (5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    5492:	4604      	mov	r4, r0
    5494:	2501      	movs	r5, #1
    5496:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5498:	7808      	ldrb	r0, [r1, #0]
    549a:	f000 0003 	and.w	r0, r0, #3
    549e:	2801      	cmp	r0, #1
    54a0:	d00c      	beq.n	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    54a2:	2802      	cmp	r0, #2
    54a4:	d00a      	beq.n	54bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    54a6:	2803      	cmp	r0, #3
    54a8:	d121      	bne.n	54ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    54aa:	7065      	strb	r5, [r4, #1]
    54ac:	89d0      	ldrh	r0, [r2, #14]
    54ae:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    54b2:	81d0      	strh	r0, [r2, #14]
    54b4:	2001      	movs	r0, #1
    54b6:	f7ff fdc3 	bl	5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    54ba:	e018      	b.n	54ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    54bc:	7848      	ldrb	r0, [r1, #1]
    54be:	b1b0      	cbz	r0, 54ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    54c0:	89d1      	ldrh	r1, [r2, #14]
    54c2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    54c6:	81d1      	strh	r1, [r2, #14]
    54c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
    54ca:	2900      	cmp	r1, #0
    54cc:	d009      	beq.n	54e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    54ce:	28fb      	cmp	r0, #251	; 0xfb
    54d0:	d808      	bhi.n	54e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    54d2:	7990      	ldrb	r0, [r2, #6]
    54d4:	b120      	cbz	r0, 54e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    54d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    54da:	2020      	movs	r0, #32
    54dc:	f7ff bdc4 	b.w	5068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    54e0:	7035      	strb	r5, [r6, #0]
    54e2:	bd70      	pop	{r4, r5, r6, pc}
    54e4:	7950      	ldrb	r0, [r2, #5]
    54e6:	f040 0010 	orr.w	r0, r0, #16
    54ea:	7150      	strb	r0, [r2, #5]
    54ec:	bd70      	pop	{r4, r5, r6, pc}
    54ee:	7a20      	ldrb	r0, [r4, #8]
    54f0:	2801      	cmp	r0, #1
    54f2:	d001      	beq.n	54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    54f4:	7225      	strb	r5, [r4, #8]
    54f6:	bd70      	pop	{r4, r5, r6, pc}
    54f8:	2000      	movs	r0, #0
    54fa:	7220      	strb	r0, [r4, #8]
    54fc:	bd70      	pop	{r4, r5, r6, pc}
    54fe:	0000      	.short	0x0000
    5500:	200000b0 	.word	0x200000b0
    5504:	b570      	push	{r4, r5, r6, lr}
    5506:	f7ff fda9 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    550a:	4604      	mov	r4, r0
    550c:	7980      	ldrb	r0, [r0, #6]
    550e:	2800      	cmp	r0, #0
    5510:	d02e      	beq.n	5570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    5512:	2802      	cmp	r0, #2
    5514:	d10d      	bne.n	5532 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5516:	481c      	ldr	r0, [pc, #112]	; (5588 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    5518:	6b00      	ldr	r0, [r0, #48]	; 0x30
    551a:	f007 fa7c 	bl	ca16 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    551e:	b340      	cbz	r0, 5572 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    5520:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5524:	1c40      	adds	r0, r0, #1
    5526:	f141 0100 	adc.w	r1, r1, #0
    552a:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    552e:	f000 fe19 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5532:	2500      	movs	r5, #0
    5534:	71a5      	strb	r5, [r4, #6]
    5536:	78e0      	ldrb	r0, [r4, #3]
    5538:	b120      	cbz	r0, 5544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    553a:	70e5      	strb	r5, [r4, #3]
    553c:	2100      	movs	r1, #0
    553e:	2010      	movs	r0, #16
    5540:	f7ff fd7e 	bl	5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5544:	78a0      	ldrb	r0, [r4, #2]
    5546:	b170      	cbz	r0, 5566 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    5548:	70a5      	strb	r5, [r4, #2]
    554a:	f7ff fb07 	bl	4b5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    554e:	b198      	cbz	r0, 5578 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    5550:	2100      	movs	r1, #0
    5552:	2008      	movs	r0, #8
    5554:	f7ff fd74 	bl	5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5558:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    555c:	1c40      	adds	r0, r0, #1
    555e:	f141 0100 	adc.w	r1, r1, #0
    5562:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    5566:	79e0      	ldrb	r0, [r4, #7]
    5568:	2801      	cmp	r0, #1
    556a:	d00a      	beq.n	5582 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    556c:	2001      	movs	r0, #1
    556e:	71e0      	strb	r0, [r4, #7]
    5570:	bd70      	pop	{r4, r5, r6, pc}
    5572:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    5576:	e001      	b.n	557c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    5578:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    557c:	2027      	movs	r0, #39	; 0x27
    557e:	f7fe fc65 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5582:	71e5      	strb	r5, [r4, #7]
    5584:	bd70      	pop	{r4, r5, r6, pc}
    5586:	0000      	.short	0x0000
    5588:	200000b0 	.word	0x200000b0
    558c:	4803      	ldr	r0, [pc, #12]	; (559c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    558e:	7800      	ldrb	r0, [r0, #0]
    5590:	2800      	cmp	r0, #0
    5592:	d001      	beq.n	5598 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    5594:	f7ff bf22 	b.w	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5598:	4770      	bx	lr
    559a:	0000      	.short	0x0000
    559c:	200000b0 	.word	0x200000b0
    55a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55a4:	4606      	mov	r6, r0
    55a6:	f7ff fd53 	bl	5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    55aa:	4680      	mov	r8, r0
    55ac:	f7ff fd56 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    55b0:	4c17      	ldr	r4, [pc, #92]	; (5610 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    55b2:	4605      	mov	r5, r0
    55b4:	4632      	mov	r2, r6
    55b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    55b8:	6260      	str	r0, [r4, #36]	; 0x24
    55ba:	2101      	movs	r1, #1
    55bc:	4640      	mov	r0, r8
    55be:	f7ff ff47 	bl	5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    55c2:	7ce8      	ldrb	r0, [r5, #19]
    55c4:	2700      	movs	r7, #0
    55c6:	b180      	cbz	r0, 55ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    55c8:	4812      	ldr	r0, [pc, #72]	; (5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    55ca:	f005 fca3 	bl	af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    55ce:	4812      	ldr	r0, [pc, #72]	; (5618 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    55d0:	2101      	movs	r1, #1
    55d2:	7601      	strb	r1, [r0, #24]
    55d4:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    55d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    55dc:	490d      	ldr	r1, [pc, #52]	; (5614 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    55de:	6a60      	ldr	r0, [r4, #36]	; 0x24
    55e0:	f005 f874 	bl	a6cc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    55e4:	f005 f886 	bl	a6f4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    55e8:	e004      	b.n	55f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    55ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    55ec:	f005 fc92 	bl	af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    55f0:	f005 f89a 	bl	a728 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    55f4:	b916      	cbnz	r6, 55fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    55f6:	4638      	mov	r0, r7
    55f8:	f005 fb22 	bl	ac40 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    55fc:	2100      	movs	r1, #0
    55fe:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    5602:	4608      	mov	r0, r1
    5604:	f005 fd12 	bl	b02c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5608:	2002      	movs	r0, #2
    560a:	7020      	strb	r0, [r4, #0]
    560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5610:	200000b0 	.word	0x200000b0
    5614:	20000ae0 	.word	0x20000ae0
    5618:	20000be8 	.word	0x20000be8
    561c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5620:	4604      	mov	r4, r0
    5622:	f7ff fd1b 	bl	505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5626:	4605      	mov	r5, r0
    5628:	f7ff fd12 	bl	5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    562c:	4606      	mov	r6, r0
    562e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 5798 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    5632:	4622      	mov	r2, r4
    5634:	2100      	movs	r1, #0
    5636:	f7ff ff0b 	bl	5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    563a:	79a8      	ldrb	r0, [r5, #6]
    563c:	2701      	movs	r7, #1
    563e:	f04f 0800 	mov.w	r8, #0
    5642:	f1a9 0420 	sub.w	r4, r9, #32
    5646:	b140      	cbz	r0, 565a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    5648:	2801      	cmp	r0, #1
    564a:	d01f      	beq.n	568c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    564c:	2802      	cmp	r0, #2
    564e:	d030      	beq.n	56b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    5650:	2803      	cmp	r0, #3
    5652:	d03c      	beq.n	56ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    5654:	f240 21ae 	movw	r1, #686	; 0x2ae
    5658:	e058      	b.n	570c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    565a:	7a20      	ldrb	r0, [r4, #8]
    565c:	2150      	movs	r1, #80	; 0x50
    565e:	f8ad 0004 	strh.w	r0, [sp, #4]
    5662:	5388      	strh	r0, [r1, r6]
    5664:	4648      	mov	r0, r9
    5666:	f7ff faa3 	bl	4bb0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    566a:	b128      	cbz	r0, 5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    566c:	2080      	movs	r0, #128	; 0x80
    566e:	6a21      	ldr	r1, [r4, #32]
    5670:	f7ff fce6 	bl	5040 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5674:	70af      	strb	r7, [r5, #2]
    5676:	e02e      	b.n	56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5678:	466a      	mov	r2, sp
    567a:	a901      	add	r1, sp, #4
    567c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    567e:	f007 fe62 	bl	d346 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5682:	6220      	str	r0, [r4, #32]
    5684:	b110      	cbz	r0, 568c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    5686:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    568a:	b111      	cbz	r1, 5692 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    568c:	4843      	ldr	r0, [pc, #268]	; (579c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    568e:	6220      	str	r0, [r4, #32]
    5690:	e021      	b.n	56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5692:	f89d 1000 	ldrb.w	r1, [sp]
    5696:	b931      	cbnz	r1, 56a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    5698:	f8a0 8000 	strh.w	r8, [r0]
    569c:	f880 8002 	strb.w	r8, [r0, #2]
    56a0:	2101      	movs	r1, #1
    56a2:	f008 f99a 	bl	d9da <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    56a6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    56aa:	6a20      	ldr	r0, [r4, #32]
    56ac:	f008 f959 	bl	d962 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    56b0:	e011      	b.n	56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    56b2:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    56b6:	f8ad 0004 	strh.w	r0, [sp, #4]
    56ba:	466a      	mov	r2, sp
    56bc:	a901      	add	r1, sp, #4
    56be:	6b20      	ldr	r0, [r4, #48]	; 0x30
    56c0:	f007 fe41 	bl	d346 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    56c4:	6220      	str	r0, [r4, #32]
    56c6:	b930      	cbnz	r0, 56d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    56c8:	f240 219f 	movw	r1, #671	; 0x29f
    56cc:	e01e      	b.n	570c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    56ce:	4648      	mov	r0, r9
    56d0:	f7ff fa6e 	bl	4bb0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    56d4:	b1c0      	cbz	r0, 5708 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    56d6:	6a20      	ldr	r0, [r4, #32]
    56d8:	2308      	movs	r3, #8
    56da:	7801      	ldrb	r1, [r0, #0]
    56dc:	f021 0108 	bic.w	r1, r1, #8
    56e0:	7001      	strb	r1, [r0, #0]
    56e2:	79ea      	ldrb	r2, [r5, #7]
    56e4:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    56e8:	4311      	orrs	r1, r2
    56ea:	f021 0104 	bic.w	r1, r1, #4
    56ee:	7001      	strb	r1, [r0, #0]
    56f0:	7a2a      	ldrb	r2, [r5, #8]
    56f2:	2304      	movs	r3, #4
    56f4:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    56f8:	4311      	orrs	r1, r2
    56fa:	f021 0110 	bic.w	r1, r1, #16
    56fe:	7001      	strb	r1, [r0, #0]
    5700:	43c9      	mvns	r1, r1
    5702:	0789      	lsls	r1, r1, #30
    5704:	d005      	beq.n	5712 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    5706:	e007      	b.n	5718 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5708:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    570c:	2027      	movs	r0, #39	; 0x27
    570e:	f7fe fb9d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5712:	78c0      	ldrb	r0, [r0, #3]
    5714:	2802      	cmp	r0, #2
    5716:	d00f      	beq.n	5738 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    5718:	6b20      	ldr	r0, [r4, #48]	; 0x30
    571a:	f007 faa4 	bl	cc66 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    571e:	b108      	cbz	r0, 5724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    5720:	2101      	movs	r1, #1
    5722:	e00a      	b.n	573a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    5724:	6a20      	ldr	r0, [r4, #32]
    5726:	7800      	ldrb	r0, [r0, #0]
    5728:	43c0      	mvns	r0, r0
    572a:	0780      	lsls	r0, r0, #30
    572c:	d004      	beq.n	5738 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    572e:	f7ff f9fd 	bl	4b2c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5732:	f080 0101 	eor.w	r1, r0, #1
    5736:	e000      	b.n	573a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    5738:	2100      	movs	r1, #0
    573a:	6a20      	ldr	r0, [r4, #32]
    573c:	7802      	ldrb	r2, [r0, #0]
    573e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5742:	7001      	strb	r1, [r0, #0]
    5744:	7ca9      	ldrb	r1, [r5, #18]
    5746:	b199      	cbz	r1, 5770 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5748:	7841      	ldrb	r1, [r0, #1]
    574a:	b189      	cbz	r1, 5770 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    574c:	4814      	ldr	r0, [pc, #80]	; (57a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    574e:	f005 fbe1 	bl	af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5752:	4812      	ldr	r0, [pc, #72]	; (579c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    5754:	3828      	subs	r0, #40	; 0x28
    5756:	f880 8018 	strb.w	r8, [r0, #24]
    575a:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    575e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5762:	480f      	ldr	r0, [pc, #60]	; (57a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    5764:	6a21      	ldr	r1, [r4, #32]
    5766:	f004 ffb1 	bl	a6cc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    576a:	f004 fffb 	bl	a764 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    576e:	e003      	b.n	5778 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    5770:	f005 fbd0 	bl	af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5774:	f004 ffd8 	bl	a728 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5778:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    577c:	2101      	movs	r1, #1
    577e:	2000      	movs	r0, #0
    5780:	f005 fc54 	bl	b02c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5784:	7127      	strb	r7, [r4, #4]
    5786:	6a20      	ldr	r0, [r4, #32]
    5788:	8801      	ldrh	r1, [r0, #0]
    578a:	8221      	strh	r1, [r4, #16]
    578c:	7880      	ldrb	r0, [r0, #2]
    578e:	74a0      	strb	r0, [r4, #18]
    5790:	7027      	strb	r7, [r4, #0]
    5792:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5796:	0000      	.short	0x0000
    5798:	200000d0 	.word	0x200000d0
    579c:	20000c10 	.word	0x20000c10
    57a0:	20000ae0 	.word	0x20000ae0
    57a4:	00005425 	.word	0x00005425
    57a8:	000051ad 	.word	0x000051ad
    57ac:	00005321 	.word	0x00005321
    57b0:	0000558d 	.word	0x0000558d

000057b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    57b4:	4800      	ldr	r0, [pc, #0]	; (57b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    57b6:	4770      	bx	lr
    57b8:	200014d1 	.word	0x200014d1

000057bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    57bc:	4904      	ldr	r1, [pc, #16]	; (57d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    57be:	788a      	ldrb	r2, [r1, #2]
    57c0:	4282      	cmp	r2, r0
    57c2:	d903      	bls.n	57cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    57c4:	4408      	add	r0, r1
    57c6:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    57ca:	4770      	bx	lr
    57cc:	2000      	movs	r0, #0
    57ce:	4770      	bx	lr
    57d0:	200012fe 	.word	0x200012fe

000057d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    57d4:	4904      	ldr	r1, [pc, #16]	; (57e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    57d6:	788a      	ldrb	r2, [r1, #2]
    57d8:	4282      	cmp	r2, r0
    57da:	d903      	bls.n	57e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    57dc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    57e0:	3083      	adds	r0, #131	; 0x83
    57e2:	4770      	bx	lr
    57e4:	2000      	movs	r0, #0
    57e6:	4770      	bx	lr
    57e8:	200012fe 	.word	0x200012fe

000057ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    57ec:	4a05      	ldr	r2, [pc, #20]	; (5804 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    57ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    57f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    57f6:	6802      	ldr	r2, [r0, #0]
    57f8:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    57fc:	8880      	ldrh	r0, [r0, #4]
    57fe:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5802:	4770      	bx	lr
    5804:	200012fe 	.word	0x200012fe

00005808 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    580c:	460e      	mov	r6, r1
    580e:	4607      	mov	r7, r0
    5810:	4615      	mov	r5, r2
    5812:	2106      	movs	r1, #6
    5814:	4630      	mov	r0, r6
    5816:	f007 ff85 	bl	d724 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    581a:	4c0d      	ldr	r4, [pc, #52]	; (5850 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    581c:	b160      	cbz	r0, 5838 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    581e:	2000      	movs	r0, #0
    5820:	e004      	b.n	582c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    5822:	1821      	adds	r1, r4, r0
    5824:	1c40      	adds	r0, r0, #1
    5826:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    582a:	b2c0      	uxtb	r0, r0
    582c:	78a1      	ldrb	r1, [r4, #2]
    582e:	4281      	cmp	r1, r0
    5830:	d8f7      	bhi.n	5822 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    5832:	2001      	movs	r0, #1
    5834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5838:	4631      	mov	r1, r6
    583a:	4638      	mov	r0, r7
    583c:	f007 fd92 	bl	d364 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    5840:	2808      	cmp	r0, #8
    5842:	d003      	beq.n	584c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5844:	4420      	add	r0, r4
    5846:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    584a:	e7f2      	b.n	5832 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    584c:	2000      	movs	r0, #0
    584e:	e7f1      	b.n	5834 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    5850:	200012fe 	.word	0x200012fe

00005854 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5854:	4904      	ldr	r1, [pc, #16]	; (5868 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5856:	788a      	ldrb	r2, [r1, #2]
    5858:	4282      	cmp	r2, r0
    585a:	d903      	bls.n	5864 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    585c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5860:	1cc0      	adds	r0, r0, #3
    5862:	4770      	bx	lr
    5864:	2000      	movs	r0, #0
    5866:	4770      	bx	lr
    5868:	200012fe 	.word	0x200012fe

0000586c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    586c:	b510      	push	{r4, lr}
    586e:	f240 12d3 	movw	r2, #467	; 0x1d3
    5872:	2100      	movs	r1, #0
    5874:	4808      	ldr	r0, [pc, #32]	; (5898 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    5876:	f006 fbd2 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    587a:	2208      	movs	r2, #8
    587c:	21ff      	movs	r1, #255	; 0xff
    587e:	4807      	ldr	r0, [pc, #28]	; (589c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5880:	f006 fbcd 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5884:	4805      	ldr	r0, [pc, #20]	; (589c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5886:	2100      	movs	r1, #0
    5888:	1f00      	subs	r0, r0, #4
    588a:	7001      	strb	r1, [r0, #0]
    588c:	7041      	strb	r1, [r0, #1]
    588e:	f44f 7161 	mov.w	r1, #900	; 0x384
    5892:	8041      	strh	r1, [r0, #2]
    5894:	bd10      	pop	{r4, pc}
    5896:	0000      	.short	0x0000
    5898:	200012fe 	.word	0x200012fe
    589c:	20000284 	.word	0x20000284

000058a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    58a0:	4901      	ldr	r1, [pc, #4]	; (58a8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    58a2:	7008      	strb	r0, [r1, #0]
    58a4:	4770      	bx	lr
    58a6:	0000      	.short	0x0000
    58a8:	20000280 	.word	0x20000280

000058ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    58ac:	4801      	ldr	r0, [pc, #4]	; (58b4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    58ae:	7800      	ldrb	r0, [r0, #0]
    58b0:	4770      	bx	lr
    58b2:	0000      	.short	0x0000
    58b4:	20000280 	.word	0x20000280

000058b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    58b8:	4b0b      	ldr	r3, [pc, #44]	; (58e8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    58ba:	b510      	push	{r4, lr}
    58bc:	789c      	ldrb	r4, [r3, #2]
    58be:	4284      	cmp	r4, r0
    58c0:	d90f      	bls.n	58e2 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    58c2:	4418      	add	r0, r3
    58c4:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    58c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    58cc:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    58d0:	700b      	strb	r3, [r1, #0]
    58d2:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    58d6:	6011      	str	r1, [r2, #0]
    58d8:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    58dc:	8090      	strh	r0, [r2, #4]
    58de:	2001      	movs	r0, #1
    58e0:	bd10      	pop	{r4, pc}
    58e2:	2000      	movs	r0, #0
    58e4:	bd10      	pop	{r4, pc}
    58e6:	0000      	.short	0x0000
    58e8:	200012fe 	.word	0x200012fe

000058ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    58ec:	4907      	ldr	r1, [pc, #28]	; (590c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    58ee:	788a      	ldrb	r2, [r1, #2]
    58f0:	4282      	cmp	r2, r0
    58f2:	d909      	bls.n	5908 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    58f4:	4408      	add	r0, r1
    58f6:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    58fa:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    58fe:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5902:	f000 0001 	and.w	r0, r0, #1
    5906:	4770      	bx	lr
    5908:	2000      	movs	r0, #0
    590a:	4770      	bx	lr
    590c:	200012fe 	.word	0x200012fe

00005910 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    5910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5914:	4698      	mov	r8, r3
    5916:	4691      	mov	r9, r2
    5918:	460c      	mov	r4, r1
    591a:	4605      	mov	r5, r0
    591c:	f000 f936 	bl	5b8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5920:	4606      	mov	r6, r0
    5922:	2810      	cmp	r0, #16
    5924:	d006      	beq.n	5934 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5926:	f000 f901 	bl	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    592a:	2810      	cmp	r0, #16
    592c:	d002      	beq.n	5934 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    592e:	2012      	movs	r0, #18
    5930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5934:	4f18      	ldr	r7, [pc, #96]	; (5998 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5936:	78b8      	ldrb	r0, [r7, #2]
    5938:	2808      	cmp	r0, #8
    593a:	d22a      	bcs.n	5992 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    593c:	2e10      	cmp	r6, #16
    593e:	d105      	bne.n	594c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    5940:	2200      	movs	r2, #0
    5942:	4621      	mov	r1, r4
    5944:	4628      	mov	r0, r5
    5946:	f000 f905 	bl	5b54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    594a:	4606      	mov	r6, r0
    594c:	78bc      	ldrb	r4, [r7, #2]
    594e:	2210      	movs	r2, #16
    5950:	1c60      	adds	r0, r4, #1
    5952:	70b8      	strb	r0, [r7, #2]
    5954:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5958:	1ce8      	adds	r0, r5, #3
    595a:	4649      	mov	r1, r9
    595c:	f007 fe4b 	bl	d5f6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5960:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5964:	2210      	movs	r2, #16
    5966:	4641      	mov	r1, r8
    5968:	f007 fe45 	bl	d5f6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    596c:	2110      	movs	r1, #16
    596e:	4640      	mov	r0, r8
    5970:	f007 fed8 	bl	d724 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5974:	443c      	add	r4, r7
    5976:	2110      	movs	r1, #16
    5978:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    597c:	4648      	mov	r0, r9
    597e:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5982:	f007 fecf 	bl	d724 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5986:	77e0      	strb	r0, [r4, #31]
    5988:	f804 6c29 	strb.w	r6, [r4, #-41]
    598c:	2000      	movs	r0, #0
    598e:	73e0      	strb	r0, [r4, #15]
    5990:	e7ce      	b.n	5930 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5992:	2007      	movs	r0, #7
    5994:	e7cc      	b.n	5930 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5996:	0000      	.short	0x0000
    5998:	200012fe 	.word	0x200012fe

0000599c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    599c:	4806      	ldr	r0, [pc, #24]	; (59b8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    599e:	b510      	push	{r4, lr}
    59a0:	7880      	ldrb	r0, [r0, #2]
    59a2:	1e40      	subs	r0, r0, #1
    59a4:	b244      	sxtb	r4, r0
    59a6:	e004      	b.n	59b2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    59a8:	b2e0      	uxtb	r0, r4
    59aa:	f000 f937 	bl	5c1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    59ae:	1e64      	subs	r4, r4, #1
    59b0:	b264      	sxtb	r4, r4
    59b2:	2c00      	cmp	r4, #0
    59b4:	daf8      	bge.n	59a8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    59b6:	bd10      	pop	{r4, pc}
    59b8:	200012fe 	.word	0x200012fe

000059bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    59bc:	4801      	ldr	r0, [pc, #4]	; (59c4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    59be:	8840      	ldrh	r0, [r0, #2]
    59c0:	4770      	bx	lr
    59c2:	0000      	.short	0x0000
    59c4:	20000280 	.word	0x20000280

000059c8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    59c8:	b138      	cbz	r0, 59da <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    59ca:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    59ce:	4288      	cmp	r0, r1
    59d0:	d803      	bhi.n	59da <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    59d2:	4903      	ldr	r1, [pc, #12]	; (59e0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    59d4:	8048      	strh	r0, [r1, #2]
    59d6:	2001      	movs	r0, #1
    59d8:	4770      	bx	lr
    59da:	2000      	movs	r0, #0
    59dc:	4770      	bx	lr
    59de:	0000      	.short	0x0000
    59e0:	20000280 	.word	0x20000280

000059e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    59e4:	4905      	ldr	r1, [pc, #20]	; (59fc <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    59e6:	788a      	ldrb	r2, [r1, #2]
    59e8:	4282      	cmp	r2, r0
    59ea:	d903      	bls.n	59f4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    59ec:	4408      	add	r0, r1
    59ee:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    59f2:	b108      	cbz	r0, 59f8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    59f4:	2000      	movs	r0, #0
    59f6:	4770      	bx	lr
    59f8:	2001      	movs	r0, #1
    59fa:	4770      	bx	lr
    59fc:	200012fe 	.word	0x200012fe

00005a00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5a00:	b570      	push	{r4, r5, r6, lr}
    5a02:	460d      	mov	r5, r1
    5a04:	4606      	mov	r6, r0
    5a06:	f000 f8c1 	bl	5b8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5a0a:	4c10      	ldr	r4, [pc, #64]	; (5a4c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5a0c:	2810      	cmp	r0, #16
    5a0e:	d007      	beq.n	5a20 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5a10:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5a14:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5a18:	07c9      	lsls	r1, r1, #31
    5a1a:	d001      	beq.n	5a20 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5a1c:	2001      	movs	r0, #1
    5a1e:	bd70      	pop	{r4, r5, r6, pc}
    5a20:	7861      	ldrb	r1, [r4, #1]
    5a22:	2908      	cmp	r1, #8
    5a24:	d210      	bcs.n	5a48 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5a26:	2810      	cmp	r0, #16
    5a28:	d008      	beq.n	5a3c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5a2a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5a2e:	2101      	movs	r1, #1
    5a30:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5a34:	7860      	ldrb	r0, [r4, #1]
    5a36:	1c40      	adds	r0, r0, #1
    5a38:	7060      	strb	r0, [r4, #1]
    5a3a:	e7ef      	b.n	5a1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5a3c:	2201      	movs	r2, #1
    5a3e:	4629      	mov	r1, r5
    5a40:	4630      	mov	r0, r6
    5a42:	f000 f887 	bl	5b54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5a46:	e7f5      	b.n	5a34 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5a48:	2000      	movs	r0, #0
    5a4a:	bd70      	pop	{r4, r5, r6, pc}
    5a4c:	200012fe 	.word	0x200012fe

00005a50 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5a50:	b570      	push	{r4, r5, r6, lr}
    5a52:	4d0b      	ldr	r5, [pc, #44]	; (5a80 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5a54:	7828      	ldrb	r0, [r5, #0]
    5a56:	1e40      	subs	r0, r0, #1
    5a58:	b244      	sxtb	r4, r0
    5a5a:	e00a      	b.n	5a72 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5a5c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a60:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a64:	07c0      	lsls	r0, r0, #31
    5a66:	d002      	beq.n	5a6e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5a68:	b2e0      	uxtb	r0, r4
    5a6a:	f000 f91f 	bl	5cac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5a6e:	1e64      	subs	r4, r4, #1
    5a70:	b264      	sxtb	r4, r4
    5a72:	2c00      	cmp	r4, #0
    5a74:	daf2      	bge.n	5a5c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5a76:	4903      	ldr	r1, [pc, #12]	; (5a84 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5a78:	2000      	movs	r0, #0
    5a7a:	7048      	strb	r0, [r1, #1]
    5a7c:	bd70      	pop	{r4, r5, r6, pc}
    5a7e:	0000      	.short	0x0000
    5a80:	200012fe 	.word	0x200012fe
    5a84:	20000280 	.word	0x20000280

00005a88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a8c:	2400      	movs	r4, #0
    5a8e:	4625      	mov	r5, r4
    5a90:	4e18      	ldr	r6, [pc, #96]	; (5af4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5a92:	e029      	b.n	5ae8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5a94:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5a98:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5a9c:	07c0      	lsls	r0, r0, #31
    5a9e:	d021      	beq.n	5ae4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5aa0:	4628      	mov	r0, r5
    5aa2:	f000 f843 	bl	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5aa6:	4603      	mov	r3, r0
    5aa8:	f7ff fed4 	bl	5854 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5aac:	4601      	mov	r1, r0
    5aae:	2000      	movs	r0, #0
    5ab0:	2b10      	cmp	r3, #16
    5ab2:	d009      	beq.n	5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5ab4:	18f2      	adds	r2, r6, r3
    5ab6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5aba:	f1bc 0f01 	cmp.w	ip, #1
    5abe:	d002      	beq.n	5ac6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5ac0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5ac4:	b102      	cbz	r2, 5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5ac6:	2001      	movs	r0, #1
    5ac8:	1e40      	subs	r0, r0, #1
    5aca:	4201      	tst	r1, r0
    5acc:	d10a      	bne.n	5ae4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5ace:	480a      	ldr	r0, [pc, #40]	; (5af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5ad0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5ad4:	5503      	strb	r3, [r0, r4]
    5ad6:	4620      	mov	r0, r4
    5ad8:	1c64      	adds	r4, r4, #1
    5ada:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5ade:	b2e4      	uxtb	r4, r4
    5ae0:	f005 fbcc 	bl	b27c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5ae4:	1c6d      	adds	r5, r5, #1
    5ae6:	b2ed      	uxtb	r5, r5
    5ae8:	7830      	ldrb	r0, [r6, #0]
    5aea:	42a8      	cmp	r0, r5
    5aec:	d8d2      	bhi.n	5a94 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5af2:	0000      	.short	0x0000
    5af4:	200012fe 	.word	0x200012fe
    5af8:	20000284 	.word	0x20000284
    5afc:	4602      	mov	r2, r0
    5afe:	4809      	ldr	r0, [pc, #36]	; (5b24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5b00:	b510      	push	{r4, lr}
    5b02:	7800      	ldrb	r0, [r0, #0]
    5b04:	460b      	mov	r3, r1
    5b06:	b158      	cbz	r0, 5b20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5b08:	4807      	ldr	r0, [pc, #28]	; (5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5b0a:	7881      	ldrb	r1, [r0, #2]
    5b0c:	b141      	cbz	r1, 5b20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5b0e:	b10b      	cbz	r3, 5b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5b10:	1cc0      	adds	r0, r0, #3
    5b12:	e001      	b.n	5b18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5b14:	4804      	ldr	r0, [pc, #16]	; (5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5b16:	3083      	adds	r0, #131	; 0x83
    5b18:	f004 fcfa 	bl	a510 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5b1c:	2001      	movs	r0, #1
    5b1e:	bd10      	pop	{r4, pc}
    5b20:	2000      	movs	r0, #0
    5b22:	bd10      	pop	{r4, pc}
    5b24:	20000280 	.word	0x20000280
    5b28:	200012fe 	.word	0x200012fe
    5b2c:	4908      	ldr	r1, [pc, #32]	; (5b50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5b2e:	b510      	push	{r4, lr}
    5b30:	4603      	mov	r3, r0
    5b32:	2000      	movs	r0, #0
    5b34:	788a      	ldrb	r2, [r1, #2]
    5b36:	e006      	b.n	5b46 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5b38:	180c      	adds	r4, r1, r0
    5b3a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5b3e:	429c      	cmp	r4, r3
    5b40:	d004      	beq.n	5b4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5b42:	1c40      	adds	r0, r0, #1
    5b44:	b2c0      	uxtb	r0, r0
    5b46:	4282      	cmp	r2, r0
    5b48:	d8f6      	bhi.n	5b38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5b4a:	2010      	movs	r0, #16
    5b4c:	bd10      	pop	{r4, pc}
    5b4e:	0000      	.short	0x0000
    5b50:	200012fe 	.word	0x200012fe
    5b54:	b570      	push	{r4, r5, r6, lr}
    5b56:	4b0c      	ldr	r3, [pc, #48]	; (5b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5b58:	4604      	mov	r4, r0
    5b5a:	7818      	ldrb	r0, [r3, #0]
    5b5c:	1c45      	adds	r5, r0, #1
    5b5e:	701d      	strb	r5, [r3, #0]
    5b60:	2810      	cmp	r0, #16
    5b62:	d303      	bcc.n	5b6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5b64:	2146      	movs	r1, #70	; 0x46
    5b66:	2028      	movs	r0, #40	; 0x28
    5b68:	f7fe f970 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b6c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5b70:	680d      	ldr	r5, [r1, #0]
    5b72:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5b76:	8889      	ldrh	r1, [r1, #4]
    5b78:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5b7c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5b80:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5b84:	bd70      	pop	{r4, r5, r6, pc}
    5b86:	0000      	.short	0x0000
    5b88:	200012fe 	.word	0x200012fe
    5b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b90:	460f      	mov	r7, r1
    5b92:	4606      	mov	r6, r0
    5b94:	2400      	movs	r4, #0
    5b96:	4d0d      	ldr	r5, [pc, #52]	; (5bcc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5b98:	e00f      	b.n	5bba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5b9a:	bf00      	nop
    5b9c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5ba0:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5ba4:	42b1      	cmp	r1, r6
    5ba6:	d106      	bne.n	5bb6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5ba8:	2206      	movs	r2, #6
    5baa:	4639      	mov	r1, r7
    5bac:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5bb0:	f006 f9a9 	bl	bf06 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5bb4:	b138      	cbz	r0, 5bc6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5bb6:	1c64      	adds	r4, r4, #1
    5bb8:	b2e4      	uxtb	r4, r4
    5bba:	7828      	ldrb	r0, [r5, #0]
    5bbc:	42a0      	cmp	r0, r4
    5bbe:	d8ed      	bhi.n	5b9c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5bc0:	2010      	movs	r0, #16
    5bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bc6:	4620      	mov	r0, r4
    5bc8:	e7fb      	b.n	5bc2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5bca:	0000      	.short	0x0000
    5bcc:	200012fe 	.word	0x200012fe
    5bd0:	b570      	push	{r4, r5, r6, lr}
    5bd2:	4605      	mov	r5, r0
    5bd4:	f7ff ffaa 	bl	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bd8:	2810      	cmp	r0, #16
    5bda:	d11c      	bne.n	5c16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bdc:	4c0e      	ldr	r4, [pc, #56]	; (5c18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5bde:	7820      	ldrb	r0, [r4, #0]
    5be0:	1e40      	subs	r0, r0, #1
    5be2:	b2c0      	uxtb	r0, r0
    5be4:	7020      	strb	r0, [r4, #0]
    5be6:	42a8      	cmp	r0, r5
    5be8:	d015      	beq.n	5c16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bea:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5bee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5bf2:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5bf6:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5bfa:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5bfe:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5c02:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5c06:	7820      	ldrb	r0, [r4, #0]
    5c08:	f7ff ff90 	bl	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5c0c:	2810      	cmp	r0, #16
    5c0e:	d002      	beq.n	5c16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5c10:	4420      	add	r0, r4
    5c12:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5c16:	bd70      	pop	{r4, r5, r6, pc}
    5c18:	200012fe 	.word	0x200012fe
    5c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c20:	4c21      	ldr	r4, [pc, #132]	; (5ca8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5c22:	4606      	mov	r6, r0
    5c24:	19a7      	adds	r7, r4, r6
    5c26:	78a0      	ldrb	r0, [r4, #2]
    5c28:	1e40      	subs	r0, r0, #1
    5c2a:	b2c5      	uxtb	r5, r0
    5c2c:	70a5      	strb	r5, [r4, #2]
    5c2e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5c32:	42ae      	cmp	r6, r5
    5c34:	d02a      	beq.n	5c8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5c36:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5c3a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5c3e:	f10a 0103 	add.w	r1, sl, #3
    5c42:	f109 0003 	add.w	r0, r9, #3
    5c46:	2210      	movs	r2, #16
    5c48:	f006 f96f 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c4c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5c50:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5c54:	2210      	movs	r2, #16
    5c56:	f006 f968 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c5a:	1960      	adds	r0, r4, r5
    5c5c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5c60:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5c64:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5c68:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5c6c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5c70:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5c74:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5c78:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5c7c:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5c80:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5c84:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c88:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5c8c:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5c90:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c94:	07c0      	lsls	r0, r0, #31
    5c96:	d104      	bne.n	5ca2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5c98:	4640      	mov	r0, r8
    5c9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c9e:	f7ff bf97 	b.w	5bd0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ca6:	0000      	.short	0x0000
    5ca8:	200012fe 	.word	0x200012fe
    5cac:	4905      	ldr	r1, [pc, #20]	; (5cc4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5cae:	784a      	ldrb	r2, [r1, #1]
    5cb0:	1e52      	subs	r2, r2, #1
    5cb2:	704a      	strb	r2, [r1, #1]
    5cb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5cb8:	2200      	movs	r2, #0
    5cba:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5cbe:	f7ff bf87 	b.w	5bd0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5cc2:	0000      	.short	0x0000
    5cc4:	200012fe 	.word	0x200012fe

00005cc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ccc:	4604      	mov	r4, r0
    5cce:	f100 0570 	add.w	r5, r0, #112	; 0x70
    5cd2:	f04f 0901 	mov.w	r9, #1
    5cd6:	b171      	cbz	r1, 5cf6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5cd8:	f104 0786 	add.w	r7, r4, #134	; 0x86
    5cdc:	1e7e      	subs	r6, r7, #1
    5cde:	2901      	cmp	r1, #1
    5ce0:	d021      	beq.n	5d26 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    5ce2:	2902      	cmp	r1, #2
    5ce4:	d046      	beq.n	5d74 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    5ce6:	2903      	cmp	r1, #3
    5ce8:	d11b      	bne.n	5d22 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5cea:	4639      	mov	r1, r7
    5cec:	4630      	mov	r0, r6
    5cee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cf2:	f007 bd47 	b.w	d784 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5cf6:	f44f 7206 	mov.w	r2, #536	; 0x218
    5cfa:	2100      	movs	r1, #0
    5cfc:	f006 f98f 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d00:	f004 fbdc 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5d04:	f644 112b 	movw	r1, #18731	; 0x492b
    5d08:	4008      	ands	r0, r1
    5d0a:	f885 9015 	strb.w	r9, [r5, #21]
    5d0e:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5d12:	0a00      	lsrs	r0, r0, #8
    5d14:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5d18:	20fe      	movs	r0, #254	; 0xfe
    5d1a:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5d1e:	207f      	movs	r0, #127	; 0x7f
    5d20:	7268      	strb	r0, [r5, #9]
    5d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d26:	f04f 0800 	mov.w	r8, #0
    5d2a:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    5d2e:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    5d32:	68e1      	ldr	r1, [r4, #12]
    5d34:	4814      	ldr	r0, [pc, #80]	; (5d88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5d36:	460a      	mov	r2, r1
    5d38:	4408      	add	r0, r1
    5d3a:	fbb0 f0f1 	udiv	r0, r0, r1
    5d3e:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    5d42:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5d46:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    5d4a:	8ae3      	ldrh	r3, [r4, #22]
    5d4c:	4628      	mov	r0, r5
    5d4e:	f000 f81d 	bl	5d8c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5d52:	4639      	mov	r1, r7
    5d54:	4630      	mov	r0, r6
    5d56:	f007 fd15 	bl	d784 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5d5a:	f006 f8b0 	bl	bebe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5d5e:	b118      	cbz	r0, 5d68 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5d60:	6920      	ldr	r0, [r4, #16]
    5d62:	f000 fb65 	bl	6430 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5d66:	b110      	cbz	r0, 5d6e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5d68:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    5d6c:	e7d9      	b.n	5d22 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5d6e:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    5d72:	e7d6      	b.n	5d22 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5d74:	68c1      	ldr	r1, [r0, #12]
    5d76:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    5d7a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    5d7e:	4628      	mov	r0, r5
    5d80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d84:	f000 b802 	b.w	5d8c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5d88:	01c9c37f 	.word	0x01c9c37f
    5d8c:	b530      	push	{r4, r5, lr}
    5d8e:	2400      	movs	r4, #0
    5d90:	8684      	strh	r4, [r0, #52]	; 0x34
    5d92:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5d94:	4d13      	ldr	r5, [pc, #76]	; (5de4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5d96:	434c      	muls	r4, r1
    5d98:	fbb4 f4f2 	udiv	r4, r4, r2
    5d9c:	8704      	strh	r4, [r0, #56]	; 0x38
    5d9e:	f242 7410 	movw	r4, #10000	; 0x2710
    5da2:	4363      	muls	r3, r4
    5da4:	fbb3 f3f2 	udiv	r3, r3, r2
    5da8:	1c5b      	adds	r3, r3, #1
    5daa:	b29b      	uxth	r3, r3
    5dac:	fb03 f402 	mul.w	r4, r3, r2
    5db0:	86c3      	strh	r3, [r0, #54]	; 0x36
    5db2:	42ac      	cmp	r4, r5
    5db4:	d901      	bls.n	5dba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5db6:	1e5b      	subs	r3, r3, #1
    5db8:	86c3      	strh	r3, [r0, #54]	; 0x36
    5dba:	4b0b      	ldr	r3, [pc, #44]	; (5de8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5dbc:	f240 2471 	movw	r4, #625	; 0x271
    5dc0:	fbb3 f3f2 	udiv	r3, r3, r2
    5dc4:	1c5b      	adds	r3, r3, #1
    5dc6:	8783      	strh	r3, [r0, #60]	; 0x3c
    5dc8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5dca:	4363      	muls	r3, r4
    5dcc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5dd0:	1e5b      	subs	r3, r3, #1
    5dd2:	fbb3 f3f2 	udiv	r3, r3, r2
    5dd6:	62c3      	str	r3, [r0, #44]	; 0x2c
    5dd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5dda:	434b      	muls	r3, r1
    5ddc:	fbb3 f1f2 	udiv	r1, r3, r2
    5de0:	6281      	str	r1, [r0, #40]	; 0x28
    5de2:	bd30      	pop	{r4, r5, pc}
    5de4:	01e84800 	.word	0x01e84800
    5de8:	02625a00 	.word	0x02625a00

00005dec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5dec:	b570      	push	{r4, r5, r6, lr}
    5dee:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5df2:	b28b      	uxth	r3, r1
    5df4:	7ac5      	ldrb	r5, [r0, #11]
    5df6:	ea83 0102 	eor.w	r1, r3, r2
    5dfa:	2200      	movs	r2, #0
    5dfc:	b2cc      	uxtb	r4, r1
    5dfe:	0a09      	lsrs	r1, r1, #8
    5e00:	fa94 f4a4 	rbit	r4, r4
    5e04:	fa91 f1a1 	rbit	r1, r1
    5e08:	0e24      	lsrs	r4, r4, #24
    5e0a:	0e09      	lsrs	r1, r1, #24
    5e0c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5e10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5e14:	1c52      	adds	r2, r2, #1
    5e16:	4419      	add	r1, r3
    5e18:	b2d2      	uxtb	r2, r2
    5e1a:	b289      	uxth	r1, r1
    5e1c:	2a03      	cmp	r2, #3
    5e1e:	d3ed      	bcc.n	5dfc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5e20:	4059      	eors	r1, r3
    5e22:	2225      	movs	r2, #37	; 0x25
    5e24:	fbb1 f3f2 	udiv	r3, r1, r2
    5e28:	fb02 1213 	mls	r2, r2, r3, r1
    5e2c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5e30:	f002 0607 	and.w	r6, r2, #7
    5e34:	785b      	ldrb	r3, [r3, #1]
    5e36:	2401      	movs	r4, #1
    5e38:	fa04 f606 	lsl.w	r6, r4, r6
    5e3c:	4233      	tst	r3, r6
    5e3e:	d001      	beq.n	5e44 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5e40:	4610      	mov	r0, r2
    5e42:	bd70      	pop	{r4, r5, r6, pc}
    5e44:	434d      	muls	r5, r1
    5e46:	0c29      	lsrs	r1, r5, #16
    5e48:	1c49      	adds	r1, r1, #1
    5e4a:	b2c9      	uxtb	r1, r1
    5e4c:	2200      	movs	r2, #0
    5e4e:	1885      	adds	r5, r0, r2
    5e50:	79ab      	ldrb	r3, [r5, #6]
    5e52:	428b      	cmp	r3, r1
    5e54:	d312      	bcc.n	5e7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5e56:	f895 5001 	ldrb.w	r5, [r5, #1]
    5e5a:	2300      	movs	r3, #0
    5e5c:	fa04 f603 	lsl.w	r6, r4, r3
    5e60:	4235      	tst	r5, r6
    5e62:	d001      	beq.n	5e68 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5e64:	1e49      	subs	r1, r1, #1
    5e66:	b2c9      	uxtb	r1, r1
    5e68:	b121      	cbz	r1, 5e74 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5e6a:	1c5b      	adds	r3, r3, #1
    5e6c:	b2db      	uxtb	r3, r3
    5e6e:	2b08      	cmp	r3, #8
    5e70:	d3f4      	bcc.n	5e5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5e72:	e005      	b.n	5e80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5e74:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5e78:	b2c0      	uxtb	r0, r0
    5e7a:	bd70      	pop	{r4, r5, r6, pc}
    5e7c:	1ac9      	subs	r1, r1, r3
    5e7e:	b2c9      	uxtb	r1, r1
    5e80:	1c52      	adds	r2, r2, #1
    5e82:	b2d2      	uxtb	r2, r2
    5e84:	2a05      	cmp	r2, #5
    5e86:	d3e2      	bcc.n	5e4e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5e88:	f240 110d 	movw	r1, #269	; 0x10d
    5e8c:	2046      	movs	r0, #70	; 0x46
    5e8e:	f7fd ffdd 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e92:	0000      	movs	r0, r0
    5e94:	b570      	push	{r4, r5, r6, lr}
    5e96:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5e9a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5e9e:	2401      	movs	r4, #1
    5ea0:	fb03 2101 	mla	r1, r3, r1, r2
    5ea4:	2225      	movs	r2, #37	; 0x25
    5ea6:	fbb1 f3f2 	udiv	r3, r1, r2
    5eaa:	fb02 1113 	mls	r1, r2, r3, r1
    5eae:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5eb2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5eb6:	f001 0307 	and.w	r3, r1, #7
    5eba:	7d92      	ldrb	r2, [r2, #22]
    5ebc:	fa04 f303 	lsl.w	r3, r4, r3
    5ec0:	421a      	tst	r2, r3
    5ec2:	d003      	beq.n	5ecc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5ec4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5ec8:	2000      	movs	r0, #0
    5eca:	bd70      	pop	{r4, r5, r6, pc}
    5ecc:	f890 2020 	ldrb.w	r2, [r0, #32]
    5ed0:	fbb1 f3f2 	udiv	r3, r1, r2
    5ed4:	fb02 1113 	mls	r1, r2, r3, r1
    5ed8:	1c49      	adds	r1, r1, #1
    5eda:	b2c9      	uxtb	r1, r1
    5edc:	2300      	movs	r3, #0
    5ede:	18c5      	adds	r5, r0, r3
    5ee0:	7eea      	ldrb	r2, [r5, #27]
    5ee2:	428a      	cmp	r2, r1
    5ee4:	d311      	bcc.n	5f0a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5ee6:	f895 5016 	ldrb.w	r5, [r5, #22]
    5eea:	2200      	movs	r2, #0
    5eec:	fa04 f602 	lsl.w	r6, r4, r2
    5ef0:	4235      	tst	r5, r6
    5ef2:	d001      	beq.n	5ef8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5ef4:	1e49      	subs	r1, r1, #1
    5ef6:	b2c9      	uxtb	r1, r1
    5ef8:	b121      	cbz	r1, 5f04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5efa:	1c52      	adds	r2, r2, #1
    5efc:	b2d2      	uxtb	r2, r2
    5efe:	2a08      	cmp	r2, #8
    5f00:	d3f4      	bcc.n	5eec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5f02:	e004      	b.n	5f0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5f04:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5f08:	e7dc      	b.n	5ec4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5f0a:	1a89      	subs	r1, r1, r2
    5f0c:	b2c9      	uxtb	r1, r1
    5f0e:	1c5b      	adds	r3, r3, #1
    5f10:	b2db      	uxtb	r3, r3
    5f12:	2b05      	cmp	r3, #5
    5f14:	d3e3      	bcc.n	5ede <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5f16:	201f      	movs	r0, #31
    5f18:	bd70      	pop	{r4, r5, r6, pc}
	...

00005f1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5f1c:	7841      	ldrb	r1, [r0, #1]
    5f1e:	b141      	cbz	r1, 5f32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f20:	78c0      	ldrb	r0, [r0, #3]
    5f22:	2819      	cmp	r0, #25
    5f24:	d203      	bcs.n	5f2e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5f26:	4a04      	ldr	r2, [pc, #16]	; (5f38 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5f28:	5c10      	ldrb	r0, [r2, r0]
    5f2a:	4288      	cmp	r0, r1
    5f2c:	d101      	bne.n	5f32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f2e:	2001      	movs	r0, #1
    5f30:	4770      	bx	lr
    5f32:	2000      	movs	r0, #0
    5f34:	4770      	bx	lr
    5f36:	0000      	.short	0x0000
    5f38:	0000fe3a 	.word	0x0000fe3a

00005f3c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5f3c:	b50c      	push	{r2, r3, lr}
    5f3e:	a20b      	add	r2, pc, #44	; (adr r2, 5f6c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5f40:	e9d2 1200 	ldrd	r1, r2, [r2]
    5f44:	e9cd 1200 	strd	r1, r2, [sp]
    5f48:	7901      	ldrb	r1, [r0, #4]
    5f4a:	7940      	ldrb	r0, [r0, #5]
    5f4c:	f001 0207 	and.w	r2, r1, #7
    5f50:	4669      	mov	r1, sp
    5f52:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5f56:	2a01      	cmp	r2, #1
    5f58:	d804      	bhi.n	5f64 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5f5a:	f000 0007 	and.w	r0, r0, #7
    5f5e:	5c08      	ldrb	r0, [r1, r0]
    5f60:	2801      	cmp	r0, #1
    5f62:	d901      	bls.n	5f68 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5f64:	2000      	movs	r0, #0
    5f66:	bd0c      	pop	{r2, r3, pc}
    5f68:	2001      	movs	r0, #1
    5f6a:	bd0c      	pop	{r2, r3, pc}
    5f6c:	02010100 	.word	0x02010100
    5f70:	03020201 	.word	0x03020201

00005f74 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5f74:	b510      	push	{r4, lr}
    5f76:	2201      	movs	r2, #1
    5f78:	70c1      	strb	r1, [r0, #3]
    5f7a:	2919      	cmp	r1, #25
    5f7c:	d202      	bcs.n	5f84 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5f7e:	4a06      	ldr	r2, [pc, #24]	; (5f98 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5f80:	5c52      	ldrb	r2, [r2, r1]
    5f82:	e006      	b.n	5f92 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f84:	29ff      	cmp	r1, #255	; 0xff
    5f86:	d004      	beq.n	5f92 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f88:	f240 31d5 	movw	r1, #981	; 0x3d5
    5f8c:	202a      	movs	r0, #42	; 0x2a
    5f8e:	f7fd ff5d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f92:	7042      	strb	r2, [r0, #1]
    5f94:	bd10      	pop	{r4, pc}
    5f96:	0000      	.short	0x0000
    5f98:	0000fe3a 	.word	0x0000fe3a

00005f9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fa0:	4c12      	ldr	r4, [pc, #72]	; (5fec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fa2:	4607      	mov	r7, r0
    5fa4:	460e      	mov	r6, r1
    5fa6:	7da0      	ldrb	r0, [r4, #22]
    5fa8:	b110      	cbz	r0, 5fb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5faa:	8b20      	ldrh	r0, [r4, #24]
    5fac:	2800      	cmp	r0, #0
    5fae:	d012      	beq.n	5fd6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fb0:	480e      	ldr	r0, [pc, #56]	; (5fec <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5fb2:	3014      	adds	r0, #20
    5fb4:	4680      	mov	r8, r0
    5fb6:	f007 fd8f 	bl	dad8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fba:	b9a8      	cbnz	r0, 5fe8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fbc:	8aa5      	ldrh	r5, [r4, #20]
    5fbe:	8aa0      	ldrh	r0, [r4, #20]
    5fc0:	4632      	mov	r2, r6
    5fc2:	4639      	mov	r1, r7
    5fc4:	f007 fdcc 	bl	db60 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    5fc8:	b138      	cbz	r0, 5fda <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5fca:	7da0      	ldrb	r0, [r4, #22]
    5fcc:	b110      	cbz	r0, 5fd4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5fce:	8b20      	ldrh	r0, [r4, #24]
    5fd0:	1e40      	subs	r0, r0, #1
    5fd2:	8320      	strh	r0, [r4, #24]
    5fd4:	2001      	movs	r0, #1
    5fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fda:	4640      	mov	r0, r8
    5fdc:	f007 fd7c 	bl	dad8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fe0:	b910      	cbnz	r0, 5fe8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5fe2:	8aa0      	ldrh	r0, [r4, #20]
    5fe4:	42a8      	cmp	r0, r5
    5fe6:	d1ea      	bne.n	5fbe <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5fe8:	2000      	movs	r0, #0
    5fea:	e7f4      	b.n	5fd6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fec:	20001058 	.word	0x20001058
    5ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5ff4:	468a      	mov	sl, r1
    5ff6:	4699      	mov	r9, r3
    5ff8:	4615      	mov	r5, r2
    5ffa:	4604      	mov	r4, r0
    5ffc:	a901      	add	r1, sp, #4
    5ffe:	f007 f9f4 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6002:	bbe0      	cbnz	r0, 607e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6004:	9f02      	ldr	r7, [sp, #8]
    6006:	f04f 0800 	mov.w	r8, #0
    600a:	3770      	adds	r7, #112	; 0x70
    600c:	b18d      	cbz	r5, 6032 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    600e:	4620      	mov	r0, r4
    6010:	f7fe fb4c 	bl	46ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6014:	0004      	movs	r4, r0
    6016:	d00f      	beq.n	6038 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6018:	4629      	mov	r1, r5
    601a:	f006 fdf6 	bl	cc0a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    601e:	0006      	movs	r6, r0
    6020:	d003      	beq.n	602a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6022:	481d      	ldr	r0, [pc, #116]	; (6098 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6024:	8840      	ldrh	r0, [r0, #2]
    6026:	42a8      	cmp	r0, r5
    6028:	d208      	bcs.n	603c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    602a:	2000      	movs	r0, #0
    602c:	b004      	add	sp, #16
    602e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6032:	2001      	movs	r0, #1
    6034:	7538      	strb	r0, [r7, #20]
    6036:	e029      	b.n	608c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6038:	216e      	movs	r1, #110	; 0x6e
    603a:	e02a      	b.n	6092 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    603c:	4620      	mov	r0, r4
    603e:	4631      	mov	r1, r6
    6040:	aa03      	add	r2, sp, #12
    6042:	f006 fddb 	bl	cbfc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6046:	9803      	ldr	r0, [sp, #12]
    6048:	f8a0 8000 	strh.w	r8, [r0]
    604c:	f880 8002 	strb.w	r8, [r0, #2]
    6050:	7d39      	ldrb	r1, [r7, #20]
    6052:	b109      	cbz	r1, 6058 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6054:	f04f 0a02 	mov.w	sl, #2
    6058:	4651      	mov	r1, sl
    605a:	f007 fcbe 	bl	d9da <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    605e:	4631      	mov	r1, r6
    6060:	2603      	movs	r6, #3
    6062:	4620      	mov	r0, r4
    6064:	464a      	mov	r2, r9
    6066:	462b      	mov	r3, r5
    6068:	9600      	str	r6, [sp, #0]
    606a:	f006 fcad 	bl	c9c8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    606e:	4620      	mov	r0, r4
    6070:	4629      	mov	r1, r5
    6072:	f006 fd67 	bl	cb44 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6076:	b158      	cbz	r0, 6090 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6078:	4644      	mov	r4, r8
    607a:	a801      	add	r0, sp, #4
    607c:	e000      	b.n	6080 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    607e:	e005      	b.n	608c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6080:	f007 fd4b 	bl	db1a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6084:	9802      	ldr	r0, [sp, #8]
    6086:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    608a:	753c      	strb	r4, [r7, #20]
    608c:	2001      	movs	r0, #1
    608e:	e7cd      	b.n	602c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6090:	2184      	movs	r1, #132	; 0x84
    6092:	202b      	movs	r0, #43	; 0x2b
    6094:	f7fd feda 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6098:	20001058 	.word	0x20001058

0000609c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    609c:	4901      	ldr	r1, [pc, #4]	; (60a4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    609e:	2001      	movs	r0, #1
    60a0:	7008      	strb	r0, [r1, #0]
    60a2:	4770      	bx	lr
    60a4:	2000028d 	.word	0x2000028d

000060a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    60a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60ac:	0006      	movs	r6, r0
    60ae:	d00a      	beq.n	60c6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    60b0:	4825      	ldr	r0, [pc, #148]	; (6148 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    60b2:	7801      	ldrb	r1, [r0, #0]
    60b4:	b151      	cbz	r1, 60cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    60b6:	2100      	movs	r1, #0
    60b8:	7071      	strb	r1, [r6, #1]
    60ba:	2203      	movs	r2, #3
    60bc:	7032      	strb	r2, [r6, #0]
    60be:	2201      	movs	r2, #1
    60c0:	7132      	strb	r2, [r6, #4]
    60c2:	7001      	strb	r1, [r0, #0]
    60c4:	e03a      	b.n	613c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    60c6:	f240 21da 	movw	r1, #730	; 0x2da
    60ca:	e009      	b.n	60e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    60cc:	4c1e      	ldr	r4, [pc, #120]	; (6148 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    60ce:	1ce4      	adds	r4, r4, #3
    60d0:	7820      	ldrb	r0, [r4, #0]
    60d2:	b940      	cbnz	r0, 60e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    60d4:	1ca0      	adds	r0, r4, #2
    60d6:	f007 fd8c 	bl	dbf2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    60da:	b120      	cbz	r0, 60e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    60dc:	f240 21e9 	movw	r1, #745	; 0x2e9
    60e0:	2010      	movs	r0, #16
    60e2:	f7fd feb3 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60e6:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    60ea:	2000      	movs	r0, #0
    60ec:	f7fe f898 	bl	4220 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    60f0:	4f16      	ldr	r7, [pc, #88]	; (614c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    60f2:	4605      	mov	r5, r0
    60f4:	6838      	ldr	r0, [r7, #0]
    60f6:	b160      	cbz	r0, 6112 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    60f8:	8860      	ldrh	r0, [r4, #2]
    60fa:	42a8      	cmp	r0, r5
    60fc:	d309      	bcc.n	6112 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    60fe:	1b40      	subs	r0, r0, r5
    6100:	b2c0      	uxtb	r0, r0
    6102:	2101      	movs	r1, #1
    6104:	f006 ff29 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6108:	b158      	cbz	r0, 6122 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    610a:	4631      	mov	r1, r6
    610c:	f000 f84e 	bl	61ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6110:	e006      	b.n	6120 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    6112:	480f      	ldr	r0, [pc, #60]	; (6150 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6114:	6800      	ldr	r0, [r0, #0]
    6116:	b120      	cbz	r0, 6122 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6118:	8860      	ldrh	r0, [r4, #2]
    611a:	4631      	mov	r1, r6
    611c:	f000 f8de 	bl	62dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    6120:	b960      	cbnz	r0, 613c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6122:	1ca0      	adds	r0, r4, #2
    6124:	f007 fd65 	bl	dbf2 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6128:	b910      	cbnz	r0, 6130 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    612a:	8861      	ldrh	r1, [r4, #2]
    612c:	4541      	cmp	r1, r8
    612e:	d1e1      	bne.n	60f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    6130:	4808      	ldr	r0, [pc, #32]	; (6154 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    6132:	6801      	ldr	r1, [r0, #0]
    6134:	b129      	cbz	r1, 6142 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6136:	4630      	mov	r0, r6
    6138:	4788      	blx	r1
    613a:	b110      	cbz	r0, 6142 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    613c:	2001      	movs	r0, #1
    613e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6142:	2000      	movs	r0, #0
    6144:	e7fb      	b.n	613e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    6146:	0000      	.short	0x0000
    6148:	2000028d 	.word	0x2000028d
    614c:	200000f0 	.word	0x200000f0
    6150:	200000f4 	.word	0x200000f4
    6154:	200000f8 	.word	0x200000f8

00006158 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6158:	4901      	ldr	r1, [pc, #4]	; (6160 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    615a:	7008      	strb	r0, [r1, #0]
    615c:	f000 b95c 	b.w	6418 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    6160:	2000028c 	.word	0x2000028c

00006164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6164:	4801      	ldr	r0, [pc, #4]	; (616c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6166:	7800      	ldrb	r0, [r0, #0]
    6168:	f7fd bc94 	b.w	3a94 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    616c:	2000028c 	.word	0x2000028c

00006170 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6170:	4902      	ldr	r1, [pc, #8]	; (617c <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6172:	4801      	ldr	r0, [pc, #4]	; (6178 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6174:	6008      	str	r0, [r1, #0]
    6176:	4770      	bx	lr
    6178:	00006585 	.word	0x00006585
    617c:	200000f0 	.word	0x200000f0

00006180 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6180:	4905      	ldr	r1, [pc, #20]	; (6198 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6182:	4804      	ldr	r0, [pc, #16]	; (6194 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6184:	6008      	str	r0, [r1, #0]
    6186:	4906      	ldr	r1, [pc, #24]	; (61a0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6188:	4804      	ldr	r0, [pc, #16]	; (619c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    618a:	6008      	str	r0, [r1, #0]
    618c:	4906      	ldr	r1, [pc, #24]	; (61a8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    618e:	4805      	ldr	r0, [pc, #20]	; (61a4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6190:	6008      	str	r0, [r1, #0]
    6192:	4770      	bx	lr
    6194:	00006585 	.word	0x00006585
    6198:	200000f0 	.word	0x200000f0
    619c:	00007c49 	.word	0x00007c49
    61a0:	200000f4 	.word	0x200000f4
    61a4:	00004ce5 	.word	0x00004ce5
    61a8:	200000f8 	.word	0x200000f8
    61ac:	b570      	push	{r4, r5, r6, lr}
    61ae:	0005      	movs	r5, r0
    61b0:	460c      	mov	r4, r1
    61b2:	d02e      	beq.n	6212 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    61b4:	4818      	ldr	r0, [pc, #96]	; (6218 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>)
    61b6:	6802      	ldr	r2, [r0, #0]
    61b8:	b35a      	cbz	r2, 6212 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    61ba:	4628      	mov	r0, r5
    61bc:	4790      	blx	r2
    61be:	b340      	cbz	r0, 6212 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x92>
    61c0:	7820      	ldrb	r0, [r4, #0]
    61c2:	2811      	cmp	r0, #17
    61c4:	d002      	beq.n	61cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    61c6:	2814      	cmp	r0, #20
    61c8:	d003      	beq.n	61d2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    61ca:	e020      	b.n	620e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61cc:	7920      	ldrb	r0, [r4, #4]
    61ce:	b1f0      	cbz	r0, 620e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61d0:	e00a      	b.n	61e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    61d2:	7920      	ldrb	r0, [r4, #4]
    61d4:	b120      	cbz	r0, 61e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x60>
    61d6:	4628      	mov	r0, r5
    61d8:	f007 ff1f 	bl	e01a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    61dc:	b120      	cbz	r0, 61e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x68>
    61de:	e016      	b.n	620e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61e0:	490e      	ldr	r1, [pc, #56]	; (621c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>)
    61e2:	2000      	movs	r0, #0
    61e4:	7008      	strb	r0, [r1, #0]
    61e6:	e012      	b.n	620e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61e8:	88e4      	ldrh	r4, [r4, #6]
    61ea:	2100      	movs	r1, #0
    61ec:	4620      	mov	r0, r4
    61ee:	f006 feb4 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    61f2:	b160      	cbz	r0, 620e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    61f4:	8800      	ldrh	r0, [r0, #0]
    61f6:	f007 f838 	bl	d26a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    61fa:	2100      	movs	r1, #0
    61fc:	4620      	mov	r0, r4
    61fe:	f7fe f8ad 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6202:	b120      	cbz	r0, 620e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8e>
    6204:	f240 1171 	movw	r1, #369	; 0x171
    6208:	2010      	movs	r0, #16
    620a:	f7fd fe1f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    620e:	2001      	movs	r0, #1
    6210:	bd70      	pop	{r4, r5, r6, pc}
    6212:	2000      	movs	r0, #0
    6214:	bd70      	pop	{r4, r5, r6, pc}
    6216:	0000      	.short	0x0000
    6218:	200000f0 	.word	0x200000f0
    621c:	20000290 	.word	0x20000290
    6220:	b510      	push	{r4, lr}
    6222:	492d      	ldr	r1, [pc, #180]	; (62d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    6224:	b086      	sub	sp, #24
    6226:	7c8a      	ldrb	r2, [r1, #18]
    6228:	7801      	ldrb	r1, [r0, #0]
    622a:	07d3      	lsls	r3, r2, #31
    622c:	d101      	bne.n	6232 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb2>
    622e:	2919      	cmp	r1, #25
    6230:	d004      	beq.n	623c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xbc>
    6232:	2918      	cmp	r1, #24
    6234:	d01f      	beq.n	6276 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf6>
    6236:	2912      	cmp	r1, #18
    6238:	d046      	beq.n	62c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x148>
    623a:	e04a      	b.n	62d2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    623c:	8880      	ldrh	r0, [r0, #4]
    623e:	f8ad 0000 	strh.w	r0, [sp]
    6242:	a902      	add	r1, sp, #8
    6244:	f007 f8d1 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6248:	b110      	cbz	r0, 6250 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd0>
    624a:	f44f 71c4 	mov.w	r1, #392	; 0x188
    624e:	e035      	b.n	62bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6250:	9803      	ldr	r0, [sp, #12]
    6252:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6256:	f88d 1002 	strb.w	r1, [sp, #2]
    625a:	7841      	ldrb	r1, [r0, #1]
    625c:	f88d 1003 	strb.w	r1, [sp, #3]
    6260:	8840      	ldrh	r0, [r0, #2]
    6262:	f8ad 0004 	strh.w	r0, [sp, #4]
    6266:	2102      	movs	r1, #2
    6268:	4668      	mov	r0, sp
    626a:	f009 f9b1 	bl	f5d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    626e:	b340      	cbz	r0, 62c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    6270:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    6274:	e022      	b.n	62bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    6276:	0791      	lsls	r1, r2, #30
    6278:	d42b      	bmi.n	62d2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    627a:	8884      	ldrh	r4, [r0, #4]
    627c:	a903      	add	r1, sp, #12
    627e:	4620      	mov	r0, r4
    6280:	f008 ffc5 	bl	f20e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    6284:	b110      	cbz	r0, 628c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x10c>
    6286:	f240 11a5 	movw	r1, #421	; 0x1a5
    628a:	e017      	b.n	62bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13c>
    628c:	f8ad 4000 	strh.w	r4, [sp]
    6290:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    6294:	f8ad 0002 	strh.w	r0, [sp, #2]
    6298:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    629c:	f8ad 0004 	strh.w	r0, [sp, #4]
    62a0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    62a4:	f8ad 0006 	strh.w	r0, [sp, #6]
    62a8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    62ac:	f8ad 0008 	strh.w	r0, [sp, #8]
    62b0:	4668      	mov	r0, sp
    62b2:	f009 f82a 	bl	f30a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    62b6:	b120      	cbz	r0, 62c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    62b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    62bc:	2010      	movs	r0, #16
    62be:	f7fd fdc5 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62c2:	2001      	movs	r0, #1
    62c4:	b006      	add	sp, #24
    62c6:	bd10      	pop	{r4, pc}
    62c8:	0751      	lsls	r1, r2, #29
    62ca:	d402      	bmi.n	62d2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x152>
    62cc:	7b80      	ldrb	r0, [r0, #14]
    62ce:	07c0      	lsls	r0, r0, #31
    62d0:	d0f7      	beq.n	62c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x142>
    62d2:	2000      	movs	r0, #0
    62d4:	e7f6      	b.n	62c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    62d6:	0000      	.short	0x0000
    62d8:	20001058 	.word	0x20001058
    62dc:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62e0:	b087      	sub	sp, #28
    62e2:	460c      	mov	r4, r1
    62e4:	a902      	add	r1, sp, #8
    62e6:	9807      	ldr	r0, [sp, #28]
    62e8:	f007 f87f 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    62ec:	2800      	cmp	r0, #0
    62ee:	d17d      	bne.n	63ec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    62f0:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6414 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x294>
    62f4:	f04f 0a01 	mov.w	sl, #1
    62f8:	4680      	mov	r8, r0
    62fa:	9803      	ldr	r0, [sp, #12]
    62fc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    6300:	2800      	cmp	r0, #0
    6302:	d00c      	beq.n	631e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    6304:	f8d9 2000 	ldr.w	r2, [r9]
    6308:	b162      	cbz	r2, 6324 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    630a:	4621      	mov	r1, r4
    630c:	9807      	ldr	r0, [sp, #28]
    630e:	4790      	blx	r2
    6310:	b140      	cbz	r0, 6324 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a4>
    6312:	4620      	mov	r0, r4
    6314:	f7ff ff84 	bl	6220 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa0>
    6318:	2800      	cmp	r0, #0
    631a:	d1ee      	bne.n	62fa <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x17a>
    631c:	2001      	movs	r0, #1
    631e:	b009      	add	sp, #36	; 0x24
    6320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6324:	9d03      	ldr	r5, [sp, #12]
    6326:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    632a:	3570      	adds	r5, #112	; 0x70
    632c:	b950      	cbnz	r0, 6344 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    632e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6332:	f88d 0004 	strb.w	r0, [sp, #4]
    6336:	9801      	ldr	r0, [sp, #4]
    6338:	9001      	str	r0, [sp, #4]
    633a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    633e:	b108      	cbz	r0, 6344 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c4>
    6340:	2001      	movs	r0, #1
    6342:	e000      	b.n	6346 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c6>
    6344:	2000      	movs	r0, #0
    6346:	4683      	mov	fp, r0
    6348:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    634c:	b1c0      	cbz	r0, 6380 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    634e:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    6352:	0780      	lsls	r0, r0, #30
    6354:	d514      	bpl.n	6380 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x200>
    6356:	f884 8001 	strb.w	r8, [r4, #1]
    635a:	f884 a000 	strb.w	sl, [r4]
    635e:	f884 8004 	strb.w	r8, [r4, #4]
    6362:	9907      	ldr	r1, [sp, #28]
    6364:	f8a4 1005 	strh.w	r1, [r4, #5]
    6368:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    636c:	71e1      	strb	r1, [r4, #7]
    636e:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6372:	8121      	strh	r1, [r4, #8]
    6374:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6378:	8161      	strh	r1, [r4, #10]
    637a:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    637e:	e7c8      	b.n	6312 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6380:	9807      	ldr	r0, [sp, #28]
    6382:	f7fe f993 	bl	46ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6386:	0007      	movs	r7, r0
    6388:	d00d      	beq.n	63a6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x226>
    638a:	f006 fbff 	bl	cb8c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    638e:	0006      	movs	r6, r0
    6390:	d015      	beq.n	63be <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x23e>
    6392:	f884 8001 	strb.w	r8, [r4, #1]
    6396:	200d      	movs	r0, #13
    6398:	7020      	strb	r0, [r4, #0]
    639a:	9807      	ldr	r0, [sp, #28]
    639c:	80e0      	strh	r0, [r4, #6]
    639e:	8126      	strh	r6, [r4, #8]
    63a0:	f884 a004 	strb.w	sl, [r4, #4]
    63a4:	e007      	b.n	63b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x236>
    63a6:	f240 2133 	movw	r1, #563	; 0x233
    63aa:	e02d      	b.n	6408 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x288>
    63ac:	2100      	movs	r1, #0
    63ae:	4638      	mov	r0, r7
    63b0:	460a      	mov	r2, r1
    63b2:	f006 fd01 	bl	cdb8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    63b6:	1e76      	subs	r6, r6, #1
    63b8:	b2b6      	uxth	r6, r6
    63ba:	d2f7      	bcs.n	63ac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x22c>
    63bc:	e7a9      	b.n	6312 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    63be:	9807      	ldr	r0, [sp, #28]
    63c0:	f7fe f95e 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    63c4:	b1f0      	cbz	r0, 6404 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x284>
    63c6:	f1bb 0f00 	cmp.w	fp, #0
    63ca:	d020      	beq.n	640e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    63cc:	f006 fb13 	bl	c9f6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    63d0:	b160      	cbz	r0, 63ec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26c>
    63d2:	9807      	ldr	r0, [sp, #28]
    63d4:	f006 ff49 	bl	d26a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    63d8:	2100      	movs	r1, #0
    63da:	9807      	ldr	r0, [sp, #28]
    63dc:	f7fd ffbe 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    63e0:	f884 8001 	strb.w	r8, [r4, #1]
    63e4:	210a      	movs	r1, #10
    63e6:	4640      	mov	r0, r8
    63e8:	7021      	strb	r1, [r4, #0]
    63ea:	e000      	b.n	63ee <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x26e>
    63ec:	e00f      	b.n	640e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28e>
    63ee:	f884 8004 	strb.w	r8, [r4, #4]
    63f2:	9907      	ldr	r1, [sp, #28]
    63f4:	f8a4 1005 	strh.w	r1, [r4, #5]
    63f8:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    63fc:	71e1      	strb	r1, [r4, #7]
    63fe:	3524      	adds	r5, #36	; 0x24
    6400:	7028      	strb	r0, [r5, #0]
    6402:	e786      	b.n	6312 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x192>
    6404:	f240 2151 	movw	r1, #593	; 0x251
    6408:	2010      	movs	r0, #16
    640a:	f7fd fd1f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    640e:	2000      	movs	r0, #0
    6410:	e785      	b.n	631e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x19e>
    6412:	0000      	.short	0x0000
    6414:	200000f4 	.word	0x200000f4
    6418:	4804      	ldr	r0, [pc, #16]	; (642c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2ac>)
    641a:	2100      	movs	r1, #0
    641c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6420:	7001      	strb	r1, [r0, #0]
    6422:	8042      	strh	r2, [r0, #2]
    6424:	1f00      	subs	r0, r0, #4
    6426:	f8a0 1001 	strh.w	r1, [r0, #1]
    642a:	4770      	bx	lr
    642c:	20000290 	.word	0x20000290

00006430 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6430:	b5f0      	push	{r4, r5, r6, r7, lr}
    6432:	f06f 021f 	mvn.w	r2, #31
    6436:	0c01      	lsrs	r1, r0, #16
    6438:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    643c:	251f      	movs	r5, #31
    643e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6442:	3854      	subs	r0, #84	; 0x54
    6444:	d00d      	beq.n	6462 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6446:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    644a:	3855      	subs	r0, #85	; 0x55
    644c:	d009      	beq.n	6462 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    644e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6452:	38aa      	subs	r0, #170	; 0xaa
    6454:	d005      	beq.n	6462 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6456:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    645a:	38aa      	subs	r0, #170	; 0xaa
    645c:	d001      	beq.n	6462 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    645e:	2001      	movs	r0, #1
    6460:	e000      	b.n	6464 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6462:	2000      	movs	r0, #0
    6464:	2200      	movs	r2, #0
    6466:	4613      	mov	r3, r2
    6468:	ea4f 0402 	mov.w	r4, r2
    646c:	ea82 0701 	eor.w	r7, r2, r1
    6470:	43ff      	mvns	r7, r7
    6472:	431f      	orrs	r7, r3
    6474:	1c7f      	adds	r7, r7, #1
    6476:	d00f      	beq.n	6498 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6478:	f006 0701 	and.w	r7, r6, #1
    647c:	0852      	lsrs	r2, r2, #1
    647e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6482:	f005 0701 	and.w	r7, r5, #1
    6486:	085b      	lsrs	r3, r3, #1
    6488:	0876      	lsrs	r6, r6, #1
    648a:	086d      	lsrs	r5, r5, #1
    648c:	1c64      	adds	r4, r4, #1
    648e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6492:	2c16      	cmp	r4, #22
    6494:	d3ea      	bcc.n	646c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6498:	2000      	movs	r0, #0
    649a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000649c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    649c:	b510      	push	{r4, lr}
    649e:	e9d0 2100 	ldrd	r2, r1, [r0]
    64a2:	4b09      	ldr	r3, [pc, #36]	; (64c8 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    64a4:	4c09      	ldr	r4, [pc, #36]	; (64cc <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    64a6:	4353      	muls	r3, r2
    64a8:	4354      	muls	r4, r2
    64aa:	4051      	eors	r1, r2
    64ac:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    64b0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    64b4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    64b8:	e9c0 2100 	strd	r2, r1, [r0]
    64bc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    64c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    64c4:	4618      	mov	r0, r3
    64c6:	bd10      	pop	{r4, pc}
    64c8:	c6ef3760 	.word	0xc6ef3760
    64cc:	9e3779bb 	.word	0x9e3779bb

000064d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    64d0:	b570      	push	{r4, r5, r6, lr}
    64d2:	4604      	mov	r4, r0
    64d4:	7c00      	ldrb	r0, [r0, #16]
    64d6:	b300      	cbz	r0, 651a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    64d8:	2802      	cmp	r0, #2
    64da:	d01e      	beq.n	651a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    64dc:	f05f 0001 	movs.w	r0, #1
    64e0:	f104 0149 	add.w	r1, r4, #73	; 0x49
    64e4:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    64e8:	460d      	mov	r5, r1
    64ea:	b1c0      	cbz	r0, 651e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    64ec:	7de0      	ldrb	r0, [r4, #23]
    64ee:	b1f0      	cbz	r0, 652e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    64f0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    64f4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    64f8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    64fc:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    6500:	7c20      	ldrb	r0, [r4, #16]
    6502:	f007 fced 	bl	dee0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6506:	7620      	strb	r0, [r4, #24]
    6508:	2008      	movs	r0, #8
    650a:	7660      	strb	r0, [r4, #25]
    650c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6510:	4629      	mov	r1, r5
    6512:	f007 fcd1 	bl	deb8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6516:	b9a8      	cbnz	r0, 6544 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    6518:	e00e      	b.n	6538 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    651a:	2000      	movs	r0, #0
    651c:	e7e0      	b.n	64e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    651e:	2000      	movs	r0, #0
    6520:	f7fe fb92 	bl	4c48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6524:	2800      	cmp	r0, #0
    6526:	d1eb      	bne.n	6500 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    6528:	f240 41aa 	movw	r1, #1194	; 0x4aa
    652c:	e001      	b.n	6532 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    652e:	f240 41ae 	movw	r1, #1198	; 0x4ae
    6532:	202d      	movs	r0, #45	; 0x2d
    6534:	f7fd fc8a 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6538:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    653c:	4629      	mov	r1, r5
    653e:	f007 fcc4 	bl	deca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6542:	b100      	cbz	r0, 6546 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    6544:	2001      	movs	r0, #1
    6546:	76a0      	strb	r0, [r4, #26]
    6548:	7e20      	ldrb	r0, [r4, #24]
    654a:	b130      	cbz	r0, 655a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    654c:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6550:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6554:	f006 ff06 	bl	d364 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6558:	7660      	strb	r0, [r4, #25]
    655a:	2500      	movs	r5, #0
    655c:	6425      	str	r5, [r4, #64]	; 0x40
    655e:	f005 fb6f 	bl	bc40 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6562:	6460      	str	r0, [r4, #68]	; 0x44
    6564:	2100      	movs	r1, #0
    6566:	4620      	mov	r0, r4
    6568:	f007 fdd9 	bl	e11e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    656c:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6570:	78a0      	ldrb	r0, [r4, #2]
    6572:	0740      	lsls	r0, r0, #29
    6574:	d505      	bpl.n	6582 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    6576:	4620      	mov	r0, r4
    6578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    657c:	2100      	movs	r1, #0
    657e:	f000 bdff 	b.w	7180 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6582:	bd70      	pop	{r4, r5, r6, pc}

00006584 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6584:	b508      	push	{r3, lr}
    6586:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    658a:	f88d 2000 	strb.w	r2, [sp]
    658e:	9a00      	ldr	r2, [sp, #0]
    6590:	9200      	str	r2, [sp, #0]
    6592:	f89d 3000 	ldrb.w	r3, [sp]
    6596:	2200      	movs	r2, #0
    6598:	b163      	cbz	r3, 65b4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    659a:	704a      	strb	r2, [r1, #1]
    659c:	2317      	movs	r3, #23
    659e:	700b      	strb	r3, [r1, #0]
    65a0:	f850 3f95 	ldr.w	r3, [r0, #149]!
    65a4:	604b      	str	r3, [r1, #4]
    65a6:	6843      	ldr	r3, [r0, #4]
    65a8:	608b      	str	r3, [r1, #8]
    65aa:	7a03      	ldrb	r3, [r0, #8]
    65ac:	730b      	strb	r3, [r1, #12]
    65ae:	f800 2c01 	strb.w	r2, [r0, #-1]
    65b2:	e03b      	b.n	662c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    65b4:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    65b8:	f88d 3000 	strb.w	r3, [sp]
    65bc:	9b00      	ldr	r3, [sp, #0]
    65be:	9300      	str	r3, [sp, #0]
    65c0:	f89d 3000 	ldrb.w	r3, [sp]
    65c4:	b143      	cbz	r3, 65d8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    65c6:	704a      	strb	r2, [r1, #1]
    65c8:	2305      	movs	r3, #5
    65ca:	700b      	strb	r3, [r1, #0]
    65cc:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    65d0:	604b      	str	r3, [r1, #4]
    65d2:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    65d6:	e029      	b.n	662c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    65d8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    65dc:	f88d 3000 	strb.w	r3, [sp]
    65e0:	9b00      	ldr	r3, [sp, #0]
    65e2:	9300      	str	r3, [sp, #0]
    65e4:	f89d 3000 	ldrb.w	r3, [sp]
    65e8:	b11b      	cbz	r3, 65f2 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    65ea:	bf00      	nop
    65ec:	f007 fd6e 	bl	e0cc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    65f0:	e01c      	b.n	662c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    65f2:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    65f6:	f88d 3000 	strb.w	r3, [sp]
    65fa:	9b00      	ldr	r3, [sp, #0]
    65fc:	9300      	str	r3, [sp, #0]
    65fe:	f89d 3000 	ldrb.w	r3, [sp]
    6602:	b1ab      	cbz	r3, 6630 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6604:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6608:	f88d 3000 	strb.w	r3, [sp]
    660c:	9b00      	ldr	r3, [sp, #0]
    660e:	9300      	str	r3, [sp, #0]
    6610:	f89d 3000 	ldrb.w	r3, [sp]
    6614:	2b00      	cmp	r3, #0
    6616:	d1e9      	bne.n	65ec <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6618:	704a      	strb	r2, [r1, #1]
    661a:	2314      	movs	r3, #20
    661c:	700b      	strb	r3, [r1, #0]
    661e:	f850 3f88 	ldr.w	r3, [r0, #136]!
    6622:	604b      	str	r3, [r1, #4]
    6624:	8883      	ldrh	r3, [r0, #4]
    6626:	810b      	strh	r3, [r1, #8]
    6628:	f800 2c02 	strb.w	r2, [r0, #-2]
    662c:	2001      	movs	r0, #1
    662e:	bd08      	pop	{r3, pc}
    6630:	2000      	movs	r0, #0
    6632:	bd08      	pop	{r3, pc}

00006634 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    6634:	b530      	push	{r4, r5, lr}
    6636:	460c      	mov	r4, r1
    6638:	b08d      	sub	sp, #52	; 0x34
    663a:	4605      	mov	r5, r0
    663c:	4601      	mov	r1, r0
    663e:	2220      	movs	r2, #32
    6640:	a802      	add	r0, sp, #8
    6642:	f005 fc72 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6646:	a80a      	add	r0, sp, #40	; 0x28
    6648:	f007 fe16 	bl	e278 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    664c:	7aa0      	ldrb	r0, [r4, #10]
    664e:	f88d 0018 	strb.w	r0, [sp, #24]
    6652:	7820      	ldrb	r0, [r4, #0]
    6654:	f88d 0008 	strb.w	r0, [sp, #8]
    6658:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    665c:	f8ad 0000 	strh.w	r0, [sp]
    6660:	f89d 0000 	ldrb.w	r0, [sp]
    6664:	f000 0101 	and.w	r1, r0, #1
    6668:	f3c0 0240 	ubfx	r2, r0, #1, #1
    666c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    6670:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6674:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6678:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    667c:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    6680:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6684:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6688:	f3c0 1240 	ubfx	r2, r0, #5, #1
    668c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6690:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6694:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6698:	f8ad 000a 	strh.w	r0, [sp, #10]
    669c:	7d20      	ldrb	r0, [r4, #20]
    669e:	2801      	cmp	r0, #1
    66a0:	d006      	beq.n	66b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    66a2:	2802      	cmp	r0, #2
    66a4:	d004      	beq.n	66b0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    66a6:	f240 2175 	movw	r1, #629	; 0x275
    66aa:	2006      	movs	r0, #6
    66ac:	f7fd fbce 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    66b0:	f88d 000c 	strb.w	r0, [sp, #12]
    66b4:	7a61      	ldrb	r1, [r4, #9]
    66b6:	a80a      	add	r0, sp, #40	; 0x28
    66b8:	f007 fdc5 	bl	e246 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    66bc:	7d20      	ldrb	r0, [r4, #20]
    66be:	2101      	movs	r1, #1
    66c0:	2802      	cmp	r0, #2
    66c2:	d102      	bne.n	66ca <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    66c4:	7d60      	ldrb	r0, [r4, #21]
    66c6:	1c40      	adds	r0, r0, #1
    66c8:	b2c1      	uxtb	r1, r0
    66ca:	7ea0      	ldrb	r0, [r4, #26]
    66cc:	1c40      	adds	r0, r0, #1
    66ce:	b2c2      	uxtb	r2, r0
    66d0:	a80a      	add	r0, sp, #40	; 0x28
    66d2:	f007 fd7f 	bl	e1d4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    66d6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    66da:	0700      	lsls	r0, r0, #28
    66dc:	d501      	bpl.n	66e2 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    66de:	2000      	movs	r0, #0
    66e0:	e020      	b.n	6724 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    66e2:	a80a      	add	r0, sp, #40	; 0x28
    66e4:	f007 fd88 	bl	e1f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    66e8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    66ec:	2228      	movs	r2, #40	; 0x28
    66ee:	f000 fded 	bl	72cc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    66f2:	f240 2171 	movw	r1, #625	; 0x271
    66f6:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    66fa:	fbb0 f0f1 	udiv	r0, r0, r1
    66fe:	4348      	muls	r0, r1
    6700:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6704:	f240 2371 	movw	r3, #625	; 0x271
    6708:	0a0a      	lsrs	r2, r1, #8
    670a:	f240 2171 	movw	r1, #625	; 0x271
    670e:	434a      	muls	r2, r1
    6710:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6714:	0a09      	lsrs	r1, r1, #8
    6716:	4359      	muls	r1, r3
    6718:	4290      	cmp	r0, r2
    671a:	d801      	bhi.n	6720 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    671c:	9204      	str	r2, [sp, #16]
    671e:	e004      	b.n	672a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6720:	4288      	cmp	r0, r1
    6722:	d801      	bhi.n	6728 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6724:	9004      	str	r0, [sp, #16]
    6726:	e000      	b.n	672a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6728:	9104      	str	r1, [sp, #16]
    672a:	7ca0      	ldrb	r0, [r4, #18]
    672c:	f88d 0017 	strb.w	r0, [sp, #23]
    6730:	7e20      	ldrb	r0, [r4, #24]
    6732:	2801      	cmp	r0, #1
    6734:	d000      	beq.n	6738 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    6736:	2000      	movs	r0, #0
    6738:	f88d 0014 	strb.w	r0, [sp, #20]
    673c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    673e:	f006 fcca 	bl	d0d6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    6742:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    6744:	f006 fd6a 	bl	d21c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6748:	2220      	movs	r2, #32
    674a:	a902      	add	r1, sp, #8
    674c:	4628      	mov	r0, r5
    674e:	f005 fbec 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6752:	980a      	ldr	r0, [sp, #40]	; 0x28
    6754:	6228      	str	r0, [r5, #32]
    6756:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    675a:	84a8      	strh	r0, [r5, #36]	; 0x24
    675c:	7ae0      	ldrb	r0, [r4, #11]
    675e:	b168      	cbz	r0, 677c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6760:	2802      	cmp	r0, #2
    6762:	d00b      	beq.n	677c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6764:	f05f 0001 	movs.w	r0, #1
    6768:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    676c:	68e0      	ldr	r0, [r4, #12]
    676e:	6528      	str	r0, [r5, #80]	; 0x50
    6770:	8a20      	ldrh	r0, [r4, #16]
    6772:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    6776:	b00d      	add	sp, #52	; 0x34
    6778:	2000      	movs	r0, #0
    677a:	bd30      	pop	{r4, r5, pc}
    677c:	2000      	movs	r0, #0
    677e:	e7f3      	b.n	6768 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00006780 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    6780:	4a0a      	ldr	r2, [pc, #40]	; (67ac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    6782:	b510      	push	{r4, lr}
    6784:	2100      	movs	r1, #0
    6786:	7011      	strb	r1, [r2, #0]
    6788:	4c09      	ldr	r4, [pc, #36]	; (67b0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    678a:	6060      	str	r0, [r4, #4]
    678c:	f000 f822 	bl	67d4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    6790:	b110      	cbz	r0, 6798 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    6792:	f240 312a 	movw	r1, #810	; 0x32a
    6796:	e004      	b.n	67a2 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6798:	68a0      	ldr	r0, [r4, #8]
    679a:	2800      	cmp	r0, #0
    679c:	d104      	bne.n	67a8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    679e:	f240 312d 	movw	r1, #813	; 0x32d
    67a2:	202d      	movs	r0, #45	; 0x2d
    67a4:	f7fd fb52 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67a8:	bd10      	pop	{r4, pc}
    67aa:	0000      	.short	0x0000
    67ac:	20001074 	.word	0x20001074
    67b0:	200000fc 	.word	0x200000fc

000067b4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    67b4:	4902      	ldr	r1, [pc, #8]	; (67c0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    67b6:	4801      	ldr	r0, [pc, #4]	; (67bc <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    67b8:	6088      	str	r0, [r1, #8]
    67ba:	4770      	bx	lr
    67bc:	000072b4 	.word	0x000072b4
    67c0:	200000fc 	.word	0x200000fc

000067c4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    67c4:	4902      	ldr	r1, [pc, #8]	; (67d0 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    67c6:	6008      	str	r0, [r1, #0]
    67c8:	6889      	ldr	r1, [r1, #8]
    67ca:	6809      	ldr	r1, [r1, #0]
    67cc:	4708      	bx	r1
    67ce:	0000      	.short	0x0000
    67d0:	200000fc 	.word	0x200000fc

000067d4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    67d4:	4808      	ldr	r0, [pc, #32]	; (67f8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    67d6:	b510      	push	{r4, lr}
    67d8:	7800      	ldrb	r0, [r0, #0]
    67da:	b110      	cbz	r0, 67e2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    67dc:	240c      	movs	r4, #12
    67de:	4620      	mov	r0, r4
    67e0:	bd10      	pop	{r4, pc}
    67e2:	2400      	movs	r4, #0
    67e4:	2218      	movs	r2, #24
    67e6:	4621      	mov	r1, r4
    67e8:	4803      	ldr	r0, [pc, #12]	; (67f8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    67ea:	f005 fc18 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    67ee:	f004 f8c3 	bl	a978 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    67f2:	f003 fea5 	bl	a540 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    67f6:	e7f2      	b.n	67de <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    67f8:	20001074 	.word	0x20001074

000067fc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    67fc:	4904      	ldr	r1, [pc, #16]	; (6810 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    67fe:	b510      	push	{r4, lr}
    6800:	7809      	ldrb	r1, [r1, #0]
    6802:	2901      	cmp	r1, #1
    6804:	d101      	bne.n	680a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6806:	f000 fb81 	bl	6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    680a:	2000      	movs	r0, #0
    680c:	bd10      	pop	{r4, pc}
    680e:	0000      	.short	0x0000
    6810:	20001074 	.word	0x20001074

00006814 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6814:	4902      	ldr	r1, [pc, #8]	; (6820 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6816:	4801      	ldr	r0, [pc, #4]	; (681c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6818:	6008      	str	r0, [r1, #0]
    681a:	4770      	bx	lr
    681c:	00007059 	.word	0x00007059
    6820:	20000108 	.word	0x20000108
    6824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6828:	000f      	movs	r7, r1
    682a:	4604      	mov	r4, r0
    682c:	d023      	beq.n	6876 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    682e:	f104 0020 	add.w	r0, r4, #32
    6832:	4605      	mov	r5, r0
    6834:	f007 fd09 	bl	e24a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6838:	b9b0      	cbnz	r0, 6868 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    683a:	78a0      	ldrb	r0, [r4, #2]
    683c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6840:	b350      	cbz	r0, 6898 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    6842:	4628      	mov	r0, r5
    6844:	f007 fcd8 	bl	e1f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6848:	4606      	mov	r6, r0
    684a:	4628      	mov	r0, r5
    684c:	f007 fcfd 	bl	e24a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6850:	1a30      	subs	r0, r6, r0
    6852:	b2c0      	uxtb	r0, r0
    6854:	f007 fd4e 	bl	e2f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6858:	4601      	mov	r1, r0
    685a:	4835      	ldr	r0, [pc, #212]	; (6930 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    685c:	6842      	ldr	r2, [r0, #4]
    685e:	4411      	add	r1, r2
    6860:	6041      	str	r1, [r0, #4]
    6862:	4628      	mov	r0, r5
    6864:	f007 fd0f 	bl	e286 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6868:	4628      	mov	r0, r5
    686a:	f007 fcd1 	bl	e210 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    686e:	4601      	mov	r1, r0
    6870:	4620      	mov	r0, r4
    6872:	f007 fc90 	bl	e196 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6876:	4d2f      	ldr	r5, [pc, #188]	; (6934 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6878:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    687c:	2100      	movs	r1, #0
    687e:	6868      	ldr	r0, [r5, #4]
    6880:	8001      	strh	r1, [r0, #0]
    6882:	f007 fc9e 	bl	e1c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6886:	8860      	ldrh	r0, [r4, #2]
    6888:	2813      	cmp	r0, #19
    688a:	d013      	beq.n	68b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    688c:	dc09      	bgt.n	68a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    688e:	2810      	cmp	r0, #16
    6890:	d036      	beq.n	6900 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    6892:	2812      	cmp	r0, #18
    6894:	d109      	bne.n	68aa <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6896:	e031      	b.n	68fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6898:	4620      	mov	r0, r4
    689a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    689e:	f000 bb35 	b.w	6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    68a2:	2815      	cmp	r0, #21
    68a4:	d00f      	beq.n	68c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    68a6:	281d      	cmp	r0, #29
    68a8:	d00d      	beq.n	68c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    68aa:	f240 616c 	movw	r1, #1644	; 0x66c
    68ae:	202d      	movs	r0, #45	; 0x2d
    68b0:	f7fd facc 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68b4:	2100      	movs	r1, #0
    68b6:	6868      	ldr	r0, [r5, #4]
    68b8:	f007 f8c7 	bl	da4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    68bc:	2101      	movs	r1, #1
    68be:	6868      	ldr	r0, [r5, #4]
    68c0:	f007 fc7f 	bl	e1c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    68c4:	e020      	b.n	6908 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    68c6:	2101      	movs	r1, #1
    68c8:	6868      	ldr	r0, [r5, #4]
    68ca:	f007 f8be 	bl	da4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    68ce:	2101      	movs	r1, #1
    68d0:	6868      	ldr	r0, [r5, #4]
    68d2:	f007 fc76 	bl	e1c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    68d6:	b136      	cbz	r6, 68e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    68d8:	f104 0157 	add.w	r1, r4, #87	; 0x57
    68dc:	6868      	ldr	r0, [r5, #4]
    68de:	f007 f8cf 	bl	da80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    68e2:	2101      	movs	r1, #1
    68e4:	e006      	b.n	68f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    68e6:	f104 0150 	add.w	r1, r4, #80	; 0x50
    68ea:	6868      	ldr	r0, [r5, #4]
    68ec:	f007 f8c8 	bl	da80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    68f0:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    68f4:	6868      	ldr	r0, [r5, #4]
    68f6:	f007 f8c9 	bl	da8c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    68fa:	e005      	b.n	6908 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    68fc:	2106      	movs	r1, #6
    68fe:	e000      	b.n	6902 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    6900:	2102      	movs	r1, #2
    6902:	6868      	ldr	r0, [r5, #4]
    6904:	f007 f8a1 	bl	da4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6908:	4620      	mov	r0, r4
    690a:	f000 fcaf 	bl	726c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    690e:	8860      	ldrh	r0, [r4, #2]
    6910:	281d      	cmp	r0, #29
    6912:	d006      	beq.n	6922 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6914:	2815      	cmp	r0, #21
    6916:	d004      	beq.n	6922 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6918:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    691a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    691c:	6868      	ldr	r0, [r5, #4]
    691e:	f007 f884 	bl	da2a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    6922:	4639      	mov	r1, r7
    6924:	4620      	mov	r0, r4
    6926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    692a:	f000 b9e5 	b.w	6cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    692e:	0000      	.short	0x0000
    6930:	20001074 	.word	0x20001074
    6934:	200000fc 	.word	0x200000fc
    6938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    693c:	4d2e      	ldr	r5, [pc, #184]	; (69f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    693e:	4607      	mov	r7, r0
    6940:	7828      	ldrb	r0, [r5, #0]
    6942:	2802      	cmp	r0, #2
    6944:	d005      	beq.n	6952 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6946:	7828      	ldrb	r0, [r5, #0]
    6948:	2803      	cmp	r0, #3
    694a:	d002      	beq.n	6952 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    694c:	f640 41f7 	movw	r1, #3319	; 0xcf7
    6950:	e029      	b.n	69a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    6952:	4c2a      	ldr	r4, [pc, #168]	; (69fc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    6954:	6820      	ldr	r0, [r4, #0]
    6956:	7b01      	ldrb	r1, [r0, #12]
    6958:	b109      	cbz	r1, 695e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    695a:	f007 fc27 	bl	e1ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    695e:	6860      	ldr	r0, [r4, #4]
    6960:	f04f 0800 	mov.w	r8, #0
    6964:	7802      	ldrb	r2, [r0, #0]
    6966:	f002 060f 	and.w	r6, r2, #15
    696a:	b357      	cbz	r7, 69c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    696c:	6821      	ldr	r1, [r4, #0]
    696e:	f101 0349 	add.w	r3, r1, #73	; 0x49
    6972:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    6976:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    697a:	d122      	bne.n	69c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    697c:	2206      	movs	r2, #6
    697e:	4619      	mov	r1, r3
    6980:	3009      	adds	r0, #9
    6982:	f005 fac0 	bl	bf06 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6986:	b9e0      	cbnz	r0, 69c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6988:	4641      	mov	r1, r8
    698a:	6860      	ldr	r0, [r4, #4]
    698c:	f007 f83d 	bl	da0a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    6990:	b1b8      	cbz	r0, 69c2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6992:	782a      	ldrb	r2, [r5, #0]
    6994:	6820      	ldr	r0, [r4, #0]
    6996:	4631      	mov	r1, r6
    6998:	2a02      	cmp	r2, #2
    699a:	d007      	beq.n	69ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    699c:	782a      	ldrb	r2, [r5, #0]
    699e:	2a03      	cmp	r2, #3
    69a0:	d004      	beq.n	69ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    69a2:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    69a6:	202d      	movs	r0, #45	; 0x2d
    69a8:	f7fd fa50 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69ac:	68a2      	ldr	r2, [r4, #8]
    69ae:	782b      	ldrb	r3, [r5, #0]
    69b0:	6952      	ldr	r2, [r2, #20]
    69b2:	f06f 0607 	mvn.w	r6, #7
    69b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    69ba:	58d2      	ldr	r2, [r2, r3]
    69bc:	4790      	blx	r2
    69be:	4606      	mov	r6, r0
    69c0:	e000      	b.n	69c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    69c2:	2601      	movs	r6, #1
    69c4:	7ba8      	ldrb	r0, [r5, #14]
    69c6:	b118      	cbz	r0, 69d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    69c8:	f003 ffd6 	bl	a978 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    69cc:	f003 fdb8 	bl	a540 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    69d0:	2e00      	cmp	r6, #0
    69d2:	d00f      	beq.n	69f4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    69d4:	6820      	ldr	r0, [r4, #0]
    69d6:	f007 fca3 	bl	e320 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    69da:	b130      	cbz	r0, 69ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    69dc:	f003 ffec 	bl	a9b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    69e0:	68a0      	ldr	r0, [r4, #8]
    69e2:	6880      	ldr	r0, [r0, #8]
    69e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69e8:	4700      	bx	r0
    69ea:	6820      	ldr	r0, [r4, #0]
    69ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    69f0:	f000 ba8c 	b.w	6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    69f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69f8:	20001074 	.word	0x20001074
    69fc:	200000fc 	.word	0x200000fc
    6a00:	b510      	push	{r4, lr}
    6a02:	2903      	cmp	r1, #3
    6a04:	d002      	beq.n	6a0c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    6a06:	2905      	cmp	r1, #5
    6a08:	d10a      	bne.n	6a20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6a0a:	e002      	b.n	6a12 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    6a0c:	f000 fb7e 	bl	710c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    6a10:	e003      	b.n	6a1a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    6a12:	4904      	ldr	r1, [pc, #16]	; (6a24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    6a14:	6809      	ldr	r1, [r1, #0]
    6a16:	b109      	cbz	r1, 6a1c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6a18:	4788      	blx	r1
    6a1a:	b108      	cbz	r0, 6a20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    6a1c:	2000      	movs	r0, #0
    6a1e:	bd10      	pop	{r4, pc}
    6a20:	2001      	movs	r0, #1
    6a22:	bd10      	pop	{r4, pc}
    6a24:	20000108 	.word	0x20000108
    6a28:	4a09      	ldr	r2, [pc, #36]	; (6a50 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    6a2a:	0003      	movs	r3, r0
    6a2c:	6810      	ldr	r0, [r2, #0]
    6a2e:	d001      	beq.n	6a34 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    6a30:	f000 ba6c 	b.w	6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6a34:	2900      	cmp	r1, #0
    6a36:	d009      	beq.n	6a4c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    6a38:	6891      	ldr	r1, [r2, #8]
    6a3a:	4a06      	ldr	r2, [pc, #24]	; (6a54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    6a3c:	6909      	ldr	r1, [r1, #16]
    6a3e:	7812      	ldrb	r2, [r2, #0]
    6a40:	f06f 030f 	mvn.w	r3, #15
    6a44:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6a48:	5889      	ldr	r1, [r1, r2]
    6a4a:	4708      	bx	r1
    6a4c:	4770      	bx	lr
    6a4e:	0000      	.short	0x0000
    6a50:	200000fc 	.word	0x200000fc
    6a54:	20001074 	.word	0x20001074
    6a58:	b570      	push	{r4, r5, r6, lr}
    6a5a:	4604      	mov	r4, r0
    6a5c:	8840      	ldrh	r0, [r0, #2]
    6a5e:	2810      	cmp	r0, #16
    6a60:	d019      	beq.n	6a96 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    6a62:	4d10      	ldr	r5, [pc, #64]	; (6aa4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6a64:	7ba8      	ldrb	r0, [r5, #14]
    6a66:	b120      	cbz	r0, 6a72 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6a68:	f003 fd8a 	bl	a580 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6a6c:	2040      	movs	r0, #64	; 0x40
    6a6e:	f003 ff91 	bl	a994 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    6a72:	480d      	ldr	r0, [pc, #52]	; (6aa8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6a74:	6840      	ldr	r0, [r0, #4]
    6a76:	f004 fa4d 	bl	af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6a7a:	78a0      	ldrb	r0, [r4, #2]
    6a7c:	0740      	lsls	r0, r0, #29
    6a7e:	d404      	bmi.n	6a8a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    6a80:	2100      	movs	r1, #0
    6a82:	7922      	ldrb	r2, [r4, #4]
    6a84:	4608      	mov	r0, r1
    6a86:	f004 fad1 	bl	b02c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6a8a:	2000      	movs	r0, #0
    6a8c:	f004 f8d8 	bl	ac40 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6a90:	2002      	movs	r0, #2
    6a92:	7028      	strb	r0, [r5, #0]
    6a94:	bd70      	pop	{r4, r5, r6, pc}
    6a96:	4620      	mov	r0, r4
    6a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a9c:	2101      	movs	r1, #1
    6a9e:	f7ff bec1 	b.w	6824 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6aa2:	0000      	.short	0x0000
    6aa4:	20001074 	.word	0x20001074
    6aa8:	200000fc 	.word	0x200000fc
    6aac:	b510      	push	{r4, lr}
    6aae:	4c12      	ldr	r4, [pc, #72]	; (6af8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    6ab0:	6820      	ldr	r0, [r4, #0]
    6ab2:	f000 f825 	bl	6b00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6ab6:	6820      	ldr	r0, [r4, #0]
    6ab8:	f007 fc32 	bl	e320 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6abc:	2800      	cmp	r0, #0
    6abe:	6820      	ldr	r0, [r4, #0]
    6ac0:	d00b      	beq.n	6ada <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    6ac2:	490e      	ldr	r1, [pc, #56]	; (6afc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    6ac4:	780a      	ldrb	r2, [r1, #0]
    6ac6:	2a02      	cmp	r2, #2
    6ac8:	d00b      	beq.n	6ae2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6aca:	780a      	ldrb	r2, [r1, #0]
    6acc:	2a03      	cmp	r2, #3
    6ace:	d008      	beq.n	6ae2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6ad0:	f640 31fe 	movw	r1, #3070	; 0xbfe
    6ad4:	202d      	movs	r0, #45	; 0x2d
    6ad6:	f7fd f9b9 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ade:	f000 ba15 	b.w	6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6ae2:	68a2      	ldr	r2, [r4, #8]
    6ae4:	7809      	ldrb	r1, [r1, #0]
    6ae6:	68d2      	ldr	r2, [r2, #12]
    6ae8:	f06f 0307 	mvn.w	r3, #7
    6aec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6af0:	5851      	ldr	r1, [r2, r1]
    6af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6af6:	4708      	bx	r1
    6af8:	200000fc 	.word	0x200000fc
    6afc:	20001074 	.word	0x20001074
    6b00:	b510      	push	{r4, lr}
    6b02:	7b01      	ldrb	r1, [r0, #12]
    6b04:	b109      	cbz	r1, 6b0a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    6b06:	f007 fb51 	bl	e1ac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    6b0a:	4805      	ldr	r0, [pc, #20]	; (6b20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    6b0c:	7b80      	ldrb	r0, [r0, #14]
    6b0e:	2800      	cmp	r0, #0
    6b10:	d005      	beq.n	6b1e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    6b12:	f003 ff31 	bl	a978 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6b1a:	f003 bd11 	b.w	a540 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6b1e:	bd10      	pop	{r4, pc}
    6b20:	20001074 	.word	0x20001074

00006b24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    6b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b28:	4d58      	ldr	r5, [pc, #352]	; (6c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    6b2a:	4604      	mov	r4, r0
    6b2c:	b088      	sub	sp, #32
    6b2e:	7828      	ldrb	r0, [r5, #0]
    6b30:	bbf0      	cbnz	r0, 6bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    6b32:	7820      	ldrb	r0, [r4, #0]
    6b34:	28ff      	cmp	r0, #255	; 0xff
    6b36:	d03c      	beq.n	6bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6b38:	2600      	movs	r6, #0
    6b3a:	81ae      	strh	r6, [r5, #12]
    6b3c:	606e      	str	r6, [r5, #4]
    6b3e:	706e      	strb	r6, [r5, #1]
    6b40:	70ae      	strb	r6, [r5, #2]
    6b42:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    6b46:	4b52      	ldr	r3, [pc, #328]	; (6c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    6b48:	f8df 8148 	ldr.w	r8, [pc, #328]	; 6c94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    6b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6b4e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    6b52:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6b56:	6840      	ldr	r0, [r0, #4]
    6b58:	9003      	str	r0, [sp, #12]
    6b5a:	4668      	mov	r0, sp
    6b5c:	f004 f844 	bl	abe8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    6b60:	f004 f94c 	bl	adfc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6b64:	f004 fbb8 	bl	b2d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    6b68:	f003 ff06 	bl	a978 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6b6c:	f003 fce8 	bl	a540 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6b70:	4849      	ldr	r0, [pc, #292]	; (6c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    6b72:	f004 fa9d 	bl	b0b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6b76:	4846      	ldr	r0, [pc, #280]	; (6c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    6b78:	1f00      	subs	r0, r0, #4
    6b7a:	f004 faa3 	bl	b0c4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    6b7e:	f104 0020 	add.w	r0, r4, #32
    6b82:	4607      	mov	r7, r0
    6b84:	f007 fb7f 	bl	e286 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6b88:	4638      	mov	r0, r7
    6b8a:	f007 fb41 	bl	e210 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6b8e:	4601      	mov	r1, r0
    6b90:	4620      	mov	r0, r4
    6b92:	f007 fb00 	bl	e196 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6b96:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6b9a:	f004 f9b5 	bl	af08 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6b9e:	7921      	ldrb	r1, [r4, #4]
    6ba0:	2000      	movs	r0, #0
    6ba2:	f003 ffa5 	bl	aaf0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6ba6:	60a8      	str	r0, [r5, #8]
    6ba8:	b138      	cbz	r0, 6bba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    6baa:	7ea0      	ldrb	r0, [r4, #26]
    6bac:	b968      	cbnz	r0, 6bca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6bae:	e007      	b.n	6bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    6bb0:	e7ff      	b.n	6bb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    6bb2:	200c      	movs	r0, #12
    6bb4:	b008      	add	sp, #32
    6bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bba:	2001      	movs	r0, #1
    6bbc:	7028      	strb	r0, [r5, #0]
    6bbe:	e062      	b.n	6c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6bc0:	7e20      	ldrb	r0, [r4, #24]
    6bc2:	b910      	cbnz	r0, 6bca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6bc4:	78a0      	ldrb	r0, [r4, #2]
    6bc6:	0740      	lsls	r0, r0, #29
    6bc8:	d529      	bpl.n	6c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6bca:	f005 f839 	bl	bc40 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6bce:	4682      	mov	sl, r0
    6bd0:	4651      	mov	r1, sl
    6bd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6bd4:	f7fa fd3c 	bl	1650 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6bd8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    6bdc:	4607      	mov	r7, r0
    6bde:	fb90 f1f9 	sdiv	r1, r0, r9
    6be2:	fb09 7011 	mls	r0, r9, r1, r7
    6be6:	4241      	negs	r1, r0
    6be8:	4650      	mov	r0, sl
    6bea:	f7fa fcff 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6bee:	6460      	str	r0, [r4, #68]	; 0x44
    6bf0:	fb97 f0f9 	sdiv	r0, r7, r9
    6bf4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6bf6:	4408      	add	r0, r1
    6bf8:	6420      	str	r0, [r4, #64]	; 0x40
    6bfa:	f7fe fedf 	bl	59bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    6bfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6c00:	4288      	cmp	r0, r1
    6c02:	d80c      	bhi.n	6c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6c04:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    6c08:	2101      	movs	r1, #1
    6c0a:	4620      	mov	r0, r4
    6c0c:	f007 fa87 	bl	e11e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6c10:	78a0      	ldrb	r0, [r4, #2]
    6c12:	0740      	lsls	r0, r0, #29
    6c14:	d503      	bpl.n	6c1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    6c16:	2101      	movs	r1, #1
    6c18:	4620      	mov	r0, r4
    6c1a:	f000 fab1 	bl	7180 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6c1e:	f104 0130 	add.w	r1, r4, #48	; 0x30
    6c22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c24:	f006 fac9 	bl	d1ba <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    6c28:	f104 0138 	add.w	r1, r4, #56	; 0x38
    6c2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c2e:	f006 fac7 	bl	d1c0 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    6c32:	f7fe ff29 	bl	5a88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    6c36:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6c3a:	1cc0      	adds	r0, r0, #3
    6c3c:	f006 fb85 	bl	d34a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6c40:	73a8      	strb	r0, [r5, #14]
    6c42:	78a0      	ldrb	r0, [r4, #2]
    6c44:	07c0      	lsls	r0, r0, #31
    6c46:	d01e      	beq.n	6c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6c48:	a904      	add	r1, sp, #16
    6c4a:	2000      	movs	r0, #0
    6c4c:	f006 f98f 	bl	cf6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    6c50:	b120      	cbz	r0, 6c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
    6c52:	f640 11c9 	movw	r1, #2505	; 0x9c9
    6c56:	202d      	movs	r0, #45	; 0x2d
    6c58:	f7fd f8f8 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c5c:	20ff      	movs	r0, #255	; 0xff
    6c5e:	73e8      	strb	r0, [r5, #15]
    6c60:	e00c      	b.n	6c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    6c62:	9806      	ldr	r0, [sp, #24]
    6c64:	69e1      	ldr	r1, [r4, #28]
    6c66:	4281      	cmp	r1, r0
    6c68:	d008      	beq.n	6c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    6c6a:	7881      	ldrb	r1, [r0, #2]
    6c6c:	73e9      	strb	r1, [r5, #15]
    6c6e:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6c72:	6129      	str	r1, [r5, #16]
    6c74:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6c78:	82a8      	strh	r0, [r5, #20]
    6c7a:	e004      	b.n	6c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    6c7c:	a804      	add	r0, sp, #16
    6c7e:	f7fd fb1d 	bl	42bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6c82:	2800      	cmp	r0, #0
    6c84:	d0ed      	beq.n	6c62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    6c86:	2000      	movs	r0, #0
    6c88:	e794      	b.n	6bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    6c8a:	0000      	.short	0x0000
    6c8c:	20001074 	.word	0x20001074
    6c90:	00007294 	.word	0x00007294
    6c94:	200000fc 	.word	0x200000fc
    6c98:	8e89bed6 	.word	0x8e89bed6
    6c9c:	000f4240 	.word	0x000f4240
    6ca0:	b510      	push	{r4, lr}
    6ca2:	4604      	mov	r4, r0
    6ca4:	f7ff ff3e 	bl	6b24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6ca8:	2800      	cmp	r0, #0
    6caa:	d108      	bne.n	6cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    6cac:	4804      	ldr	r0, [pc, #16]	; (6cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    6cae:	7800      	ldrb	r0, [r0, #0]
    6cb0:	2801      	cmp	r0, #1
    6cb2:	d003      	beq.n	6cbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    6cb4:	2100      	movs	r1, #0
    6cb6:	4620      	mov	r0, r4
    6cb8:	f7ff fdb4 	bl	6824 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6cbc:	2000      	movs	r0, #0
    6cbe:	bd10      	pop	{r4, pc}
    6cc0:	20001074 	.word	0x20001074
    6cc4:	480a      	ldr	r0, [pc, #40]	; (6cf0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    6cc6:	b510      	push	{r4, lr}
    6cc8:	490a      	ldr	r1, [pc, #40]	; (6cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    6cca:	6804      	ldr	r4, [r0, #0]
    6ccc:	7808      	ldrb	r0, [r1, #0]
    6cce:	2800      	cmp	r0, #0
    6cd0:	d00d      	beq.n	6cee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    6cd2:	7808      	ldrb	r0, [r1, #0]
    6cd4:	2802      	cmp	r0, #2
    6cd6:	d002      	beq.n	6cde <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    6cd8:	7808      	ldrb	r0, [r1, #0]
    6cda:	2803      	cmp	r0, #3
    6cdc:	d102      	bne.n	6ce4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    6cde:	4620      	mov	r0, r4
    6ce0:	f7ff ff0e 	bl	6b00 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6ce4:	4620      	mov	r0, r4
    6ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cea:	f000 b90f 	b.w	6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    6cee:	bd10      	pop	{r4, pc}
    6cf0:	200000fc 	.word	0x200000fc
    6cf4:	20001074 	.word	0x20001074
    6cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cfc:	4604      	mov	r4, r0
    6cfe:	4827      	ldr	r0, [pc, #156]	; (6d9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    6d00:	460d      	mov	r5, r1
    6d02:	6840      	ldr	r0, [r0, #4]
    6d04:	f004 f906 	bl	af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6d08:	4e25      	ldr	r6, [pc, #148]	; (6da0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    6d0a:	2004      	movs	r0, #4
    6d0c:	7030      	strb	r0, [r6, #0]
    6d0e:	b325      	cbz	r5, 6d5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    6d10:	8860      	ldrh	r0, [r4, #2]
    6d12:	2810      	cmp	r0, #16
    6d14:	d02a      	beq.n	6d6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    6d16:	f104 0020 	add.w	r0, r4, #32
    6d1a:	4680      	mov	r8, r0
    6d1c:	68b5      	ldr	r5, [r6, #8]
    6d1e:	f007 fa6b 	bl	e1f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6d22:	4607      	mov	r7, r0
    6d24:	4640      	mov	r0, r8
    6d26:	f007 fa90 	bl	e24a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6d2a:	1a38      	subs	r0, r7, r0
    6d2c:	1e40      	subs	r0, r0, #1
    6d2e:	b2c0      	uxtb	r0, r0
    6d30:	8861      	ldrh	r1, [r4, #2]
    6d32:	2228      	movs	r2, #40	; 0x28
    6d34:	f000 faea 	bl	730c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6d38:	4405      	add	r5, r0
    6d3a:	78a0      	ldrb	r0, [r4, #2]
    6d3c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6d40:	b130      	cbz	r0, 6d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    6d42:	6870      	ldr	r0, [r6, #4]
    6d44:	4405      	add	r5, r0
    6d46:	f007 fad9 	bl	e2fc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6d4a:	4428      	add	r0, r5
    6d4c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    6d50:	7922      	ldrb	r2, [r4, #4]
    6d52:	4629      	mov	r1, r5
    6d54:	2000      	movs	r0, #0
    6d56:	f004 f8ed 	bl	af34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6d5a:	8860      	ldrh	r0, [r4, #2]
    6d5c:	2813      	cmp	r0, #19
    6d5e:	d013      	beq.n	6d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d60:	dc09      	bgt.n	6d76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    6d62:	2810      	cmp	r0, #16
    6d64:	d017      	beq.n	6d96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    6d66:	2812      	cmp	r0, #18
    6d68:	d109      	bne.n	6d7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    6d6a:	e00d      	b.n	6d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d6c:	7921      	ldrb	r1, [r4, #4]
    6d6e:	2000      	movs	r0, #0
    6d70:	f003 fe72 	bl	aa58 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6d74:	e7f1      	b.n	6d5a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    6d76:	2815      	cmp	r0, #21
    6d78:	d006      	beq.n	6d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d7a:	281d      	cmp	r0, #29
    6d7c:	d004      	beq.n	6d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    6d7e:	f640 5185 	movw	r1, #3461	; 0xd85
    6d82:	202d      	movs	r0, #45	; 0x2d
    6d84:	f7fd f862 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d88:	7922      	ldrb	r2, [r4, #4]
    6d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d8e:	2101      	movs	r1, #1
    6d90:	2000      	movs	r0, #0
    6d92:	f004 b94b 	b.w	b02c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d9a:	0000      	.short	0x0000
    6d9c:	200000fc 	.word	0x200000fc
    6da0:	20001074 	.word	0x20001074
    6da4:	b510      	push	{r4, lr}
    6da6:	4604      	mov	r4, r0
    6da8:	7800      	ldrb	r0, [r0, #0]
    6daa:	460b      	mov	r3, r1
    6dac:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    6db0:	29ff      	cmp	r1, #255	; 0xff
    6db2:	d010      	beq.n	6dd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    6db4:	f104 0297 	add.w	r2, r4, #151	; 0x97
    6db8:	1e51      	subs	r1, r2, #1
    6dba:	4618      	mov	r0, r3
    6dbc:	f7fe fd7c 	bl	58b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6dc0:	b130      	cbz	r0, 6dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    6dc2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    6dc6:	f040 0002 	orr.w	r0, r0, #2
    6dca:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    6dce:	e011      	b.n	6df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    6dd0:	f640 71bc 	movw	r1, #4028	; 0xfbc
    6dd4:	e020      	b.n	6e18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    6dd6:	4812      	ldr	r0, [pc, #72]	; (6e20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
    6dd8:	6840      	ldr	r0, [r0, #4]
    6dda:	7801      	ldrb	r1, [r0, #0]
    6ddc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6de0:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    6de4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6de8:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    6dec:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6df0:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    6df4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6df8:	287f      	cmp	r0, #127	; 0x7f
    6dfa:	d00b      	beq.n	6e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
    6dfc:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    6e00:	207f      	movs	r0, #127	; 0x7f
    6e02:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6e06:	347e      	adds	r4, #126	; 0x7e
    6e08:	2001      	movs	r0, #1
    6e0a:	75a0      	strb	r0, [r4, #22]
    6e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e10:	f7ff b9a8 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6e14:	f640 6137 	movw	r1, #3639	; 0xe37
    6e18:	202d      	movs	r0, #45	; 0x2d
    6e1a:	f7fd f817 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e1e:	0000      	.short	0x0000
    6e20:	200000fc 	.word	0x200000fc
    6e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e28:	4690      	mov	r8, r2
    6e2a:	460e      	mov	r6, r1
    6e2c:	4604      	mov	r4, r0
    6e2e:	2903      	cmp	r1, #3
    6e30:	d004      	beq.n	6e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6e32:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6e36:	b108      	cbz	r0, 6e3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    6e38:	2001      	movs	r0, #1
    6e3a:	e000      	b.n	6e3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    6e3c:	2000      	movs	r0, #0
    6e3e:	4681      	mov	r9, r0
    6e40:	f003 fdb4 	bl	a9ac <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6e44:	4605      	mov	r5, r0
    6e46:	2e03      	cmp	r6, #3
    6e48:	d003      	beq.n	6e52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
    6e4a:	2701      	movs	r7, #1
    6e4c:	2e05      	cmp	r6, #5
    6e4e:	d005      	beq.n	6e5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    6e50:	e008      	b.n	6e64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    6e52:	78a0      	ldrb	r0, [r4, #2]
    6e54:	2702      	movs	r7, #2
    6e56:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6e5a:	e001      	b.n	6e60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    6e5c:	78a0      	ldrb	r0, [r4, #2]
    6e5e:	07c0      	lsls	r0, r0, #31
    6e60:	2800      	cmp	r0, #0
    6e62:	d04a      	beq.n	6efa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    6e64:	f1b9 0f00 	cmp.w	r9, #0
    6e68:	d146      	bne.n	6ef8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6e6a:	4826      	ldr	r0, [pc, #152]	; (6f04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
    6e6c:	7b80      	ldrb	r0, [r0, #14]
    6e6e:	b140      	cbz	r0, 6e82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6e70:	f006 fa6e 	bl	d350 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6e74:	f888 0000 	strb.w	r0, [r8]
    6e78:	28ff      	cmp	r0, #255	; 0xff
    6e7a:	d002      	beq.n	6e82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    6e7c:	f7fe fd36 	bl	58ec <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6e80:	4305      	orrs	r5, r0
    6e82:	4e21      	ldr	r6, [pc, #132]	; (6f08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    6e84:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    6e88:	6870      	ldr	r0, [r6, #4]
    6e8a:	7801      	ldrb	r1, [r0, #0]
    6e8c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6e90:	4291      	cmp	r1, r2
    6e92:	d106      	bne.n	6ea2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    6e94:	2206      	movs	r2, #6
    6e96:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6e9a:	1cc0      	adds	r0, r0, #3
    6e9c:	f005 f833 	bl	bf06 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6ea0:	b130      	cbz	r0, 6eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    6ea2:	2000      	movs	r0, #0
    6ea4:	f898 1000 	ldrb.w	r1, [r8]
    6ea8:	29ff      	cmp	r1, #255	; 0xff
    6eaa:	d007      	beq.n	6ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    6eac:	b9a8      	cbnz	r0, 6eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6eae:	e001      	b.n	6eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    6eb0:	2001      	movs	r0, #1
    6eb2:	e7f7      	b.n	6ea4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    6eb4:	7e60      	ldrb	r0, [r4, #25]
    6eb6:	4288      	cmp	r0, r1
    6eb8:	d00f      	beq.n	6eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6eba:	e008      	b.n	6ece <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    6ebc:	b138      	cbz	r0, 6ece <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    6ebe:	6871      	ldr	r1, [r6, #4]
    6ec0:	f811 0b03 	ldrb.w	r0, [r1], #3
    6ec4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6ec8:	f007 f8e7 	bl	e09a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6ecc:	b128      	cbz	r0, 6eda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6ece:	2000      	movs	r0, #0
    6ed0:	78a1      	ldrb	r1, [r4, #2]
    6ed2:	0749      	lsls	r1, r1, #29
    6ed4:	d503      	bpl.n	6ede <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6ed6:	b990      	cbnz	r0, 6efe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6ed8:	e00e      	b.n	6ef8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6eda:	2001      	movs	r0, #1
    6edc:	e7f8      	b.n	6ed0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6ede:	b975      	cbnz	r5, 6efe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6ee0:	7be0      	ldrb	r0, [r4, #15]
    6ee2:	b108      	cbz	r0, 6ee8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    6ee4:	42b8      	cmp	r0, r7
    6ee6:	d107      	bne.n	6ef8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    6ee8:	6871      	ldr	r1, [r6, #4]
    6eea:	f811 0b03 	ldrb.w	r0, [r1], #3
    6eee:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6ef2:	f007 f8d2 	bl	e09a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6ef6:	b110      	cbz	r0, 6efe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6ef8:	2000      	movs	r0, #0
    6efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6efe:	2001      	movs	r0, #1
    6f00:	e7fb      	b.n	6efa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    6f02:	0000      	.short	0x0000
    6f04:	20001074 	.word	0x20001074
    6f08:	200000fc 	.word	0x200000fc
    6f0c:	b570      	push	{r4, r5, r6, lr}
    6f0e:	4604      	mov	r4, r0
    6f10:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6f12:	4d13      	ldr	r5, [pc, #76]	; (6f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
    6f14:	1c40      	adds	r0, r0, #1
    6f16:	62a0      	str	r0, [r4, #40]	; 0x28
    6f18:	7ba8      	ldrb	r0, [r5, #14]
    6f1a:	2600      	movs	r6, #0
    6f1c:	b120      	cbz	r0, 6f28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    6f1e:	f003 fd2b 	bl	a978 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6f22:	f003 fb0d 	bl	a540 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6f26:	73ae      	strb	r6, [r5, #14]
    6f28:	702e      	strb	r6, [r5, #0]
    6f2a:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6f2e:	b108      	cbz	r0, 6f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    6f30:	2101      	movs	r1, #1
    6f32:	e00f      	b.n	6f54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    6f34:	7b60      	ldrb	r0, [r4, #13]
    6f36:	b160      	cbz	r0, 6f52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6f38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6f3a:	4288      	cmp	r0, r1
    6f3c:	d809      	bhi.n	6f52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    6f3e:	2101      	movs	r1, #1
    6f40:	4620      	mov	r0, r4
    6f42:	f007 fa02 	bl	e34a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6f46:	78a0      	ldrb	r0, [r4, #2]
    6f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f4c:	07c0      	lsls	r0, r0, #31
    6f4e:	f7ff b909 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6f52:	2100      	movs	r1, #0
    6f54:	4620      	mov	r0, r4
    6f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f5a:	f007 b9f6 	b.w	e34a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6f5e:	0000      	.short	0x0000
    6f60:	20001074 	.word	0x20001074
    6f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f68:	4604      	mov	r4, r0
    6f6a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6f6e:	4617      	mov	r7, r2
    6f70:	460d      	mov	r5, r1
    6f72:	f88d 0000 	strb.w	r0, [sp]
    6f76:	9800      	ldr	r0, [sp, #0]
    6f78:	9000      	str	r0, [sp, #0]
    6f7a:	f89d 0000 	ldrb.w	r0, [sp]
    6f7e:	b110      	cbz	r0, 6f86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
    6f80:	f640 4132 	movw	r1, #3122	; 0xc32
    6f84:	e054      	b.n	7030 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    6f86:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    6f8a:	8828      	ldrh	r0, [r5, #0]
    6f8c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    6f90:	2b00      	cmp	r3, #0
    6f92:	d15d      	bne.n	7050 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    6f94:	68e8      	ldr	r0, [r5, #12]
    6f96:	f006 fa39 	bl	d40c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6f9a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6f9e:	8aa8      	ldrh	r0, [r5, #20]
    6fa0:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    6fa4:	8ae8      	ldrh	r0, [r5, #22]
    6fa6:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    6faa:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    6fae:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    6fb2:	7e21      	ldrb	r1, [r4, #24]
    6fb4:	f104 0849 	add.w	r8, r4, #73	; 0x49
    6fb8:	2600      	movs	r6, #0
    6fba:	b129      	cbz	r1, 6fc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
    6fbc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6fc0:	4641      	mov	r1, r8
    6fc2:	f006 ff82 	bl	deca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6fc6:	b940      	cbnz	r0, 6fda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    6fc8:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6fcc:	b170      	cbz	r0, 6fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    6fce:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6fd2:	4641      	mov	r1, r8
    6fd4:	f006 ff70 	bl	deb8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6fd8:	b140      	cbz	r0, 6fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    6fda:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6fde:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    6fe2:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6fe6:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    6fea:	e003      	b.n	6ff4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    6fec:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    6ff0:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    6ff4:	4817      	ldr	r0, [pc, #92]	; (7054 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
    6ff6:	2fff      	cmp	r7, #255	; 0xff
    6ff8:	6840      	ldr	r0, [r0, #4]
    6ffa:	7801      	ldrb	r1, [r0, #0]
    6ffc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7000:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    7004:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7008:	d015      	beq.n	7036 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
    700a:	67a1      	str	r1, [r4, #120]	; 0x78
    700c:	8880      	ldrh	r0, [r0, #4]
    700e:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7012:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    7016:	1e51      	subs	r1, r2, #1
    7018:	4638      	mov	r0, r7
    701a:	f7fe fc4d 	bl	58b8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    701e:	b128      	cbz	r0, 702c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    7020:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7024:	f040 0002 	orr.w	r0, r0, #2
    7028:	7020      	strb	r0, [r4, #0]
    702a:	e00a      	b.n	7042 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    702c:	f640 4153 	movw	r1, #3155	; 0xc53
    7030:	202d      	movs	r0, #45	; 0x2d
    7032:	f7fc ff0b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7036:	f844 1f6c 	str.w	r1, [r4, #108]!
    703a:	8880      	ldrh	r0, [r0, #4]
    703c:	80a0      	strh	r0, [r4, #4]
    703e:	60e6      	str	r6, [r4, #12]
    7040:	8226      	strh	r6, [r4, #16]
    7042:	8828      	ldrh	r0, [r5, #0]
    7044:	f7fd fb1c 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7048:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    704c:	f005 be6c 	b.w	cd28 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7054:	200000fc 	.word	0x200000fc
    7058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    705c:	4604      	mov	r4, r0
    705e:	20ff      	movs	r0, #255	; 0xff
    7060:	f88d 0000 	strb.w	r0, [sp]
    7064:	2601      	movs	r6, #1
    7066:	466a      	mov	r2, sp
    7068:	2105      	movs	r1, #5
    706a:	4620      	mov	r0, r4
    706c:	f7ff feda 	bl	6e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7070:	b3e8      	cbz	r0, 70ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    7072:	4d24      	ldr	r5, [pc, #144]	; (7104 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7074:	4f24      	ldr	r7, [pc, #144]	; (7108 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7076:	46b0      	mov	r8, r6
    7078:	6868      	ldr	r0, [r5, #4]
    707a:	7bfa      	ldrb	r2, [r7, #15]
    707c:	f04f 0900 	mov.w	r9, #0
    7080:	7801      	ldrb	r1, [r0, #0]
    7082:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7086:	4291      	cmp	r1, r2
    7088:	d106      	bne.n	7098 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    708a:	2206      	movs	r2, #6
    708c:	f107 0110 	add.w	r1, r7, #16
    7090:	1cc0      	adds	r0, r0, #3
    7092:	f004 ff38 	bl	bf06 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7096:	b350      	cbz	r0, 70ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    7098:	686a      	ldr	r2, [r5, #4]
    709a:	69e0      	ldr	r0, [r4, #28]
    709c:	7812      	ldrb	r2, [r2, #0]
    709e:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    70a2:	f3c2 1240 	ubfx	r2, r2, #5, #1
    70a6:	4011      	ands	r1, r2
    70a8:	7001      	strb	r1, [r0, #0]
    70aa:	2201      	movs	r2, #1
    70ac:	4620      	mov	r0, r4
    70ae:	69e1      	ldr	r1, [r4, #28]
    70b0:	f000 f894 	bl	71dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    70b4:	2300      	movs	r3, #0
    70b6:	f89d 2000 	ldrb.w	r2, [sp]
    70ba:	4620      	mov	r0, r4
    70bc:	69e1      	ldr	r1, [r4, #28]
    70be:	f7ff ff51 	bl	6f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    70c2:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    70c6:	f7ff f84d 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    70ca:	f887 9000 	strb.w	r9, [r7]
    70ce:	2200      	movs	r2, #0
    70d0:	4621      	mov	r1, r4
    70d2:	69e0      	ldr	r0, [r4, #28]
    70d4:	f000 fa58 	bl	7588 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    70d8:	6868      	ldr	r0, [r5, #4]
    70da:	69e1      	ldr	r1, [r4, #28]
    70dc:	f8d0 2003 	ldr.w	r2, [r0, #3]
    70e0:	f841 2f03 	str.w	r2, [r1, #3]!
    70e4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    70e8:	808a      	strh	r2, [r1, #4]
    70ea:	7800      	ldrb	r0, [r0, #0]
    70ec:	e000      	b.n	70f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    70ee:	e004      	b.n	70fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    70f0:	69e1      	ldr	r1, [r4, #28]
    70f2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    70f6:	7088      	strb	r0, [r1, #2]
    70f8:	e000      	b.n	70fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    70fa:	2600      	movs	r6, #0
    70fc:	4630      	mov	r0, r6
    70fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7102:	0000      	.short	0x0000
    7104:	200000fc 	.word	0x200000fc
    7108:	20001074 	.word	0x20001074
    710c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    710e:	4604      	mov	r4, r0
    7110:	20ff      	movs	r0, #255	; 0xff
    7112:	f88d 0000 	strb.w	r0, [sp]
    7116:	2501      	movs	r5, #1
    7118:	466a      	mov	r2, sp
    711a:	2103      	movs	r1, #3
    711c:	4620      	mov	r0, r4
    711e:	f7ff fe81 	bl	6e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7122:	b328      	cbz	r0, 7170 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    7124:	7b20      	ldrb	r0, [r4, #12]
    7126:	b168      	cbz	r0, 7144 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7128:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    712c:	f88d 0004 	strb.w	r0, [sp, #4]
    7130:	9801      	ldr	r0, [sp, #4]
    7132:	9001      	str	r0, [sp, #4]
    7134:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7138:	b920      	cbnz	r0, 7144 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    713a:	f89d 1000 	ldrb.w	r1, [sp]
    713e:	4620      	mov	r0, r4
    7140:	f7ff fe30 	bl	6da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7144:	4e0c      	ldr	r6, [pc, #48]	; (7178 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    7146:	2100      	movs	r1, #0
    7148:	6870      	ldr	r0, [r6, #4]
    714a:	8001      	strh	r1, [r0, #0]
    714c:	2104      	movs	r1, #4
    714e:	f006 fc7c 	bl	da4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7152:	4620      	mov	r0, r4
    7154:	f000 f88a 	bl	726c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x748>
    7158:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    715a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    715c:	6870      	ldr	r0, [r6, #4]
    715e:	f006 fcab 	bl	dab8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7162:	4906      	ldr	r1, [pc, #24]	; (717c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7164:	2005      	movs	r0, #5
    7166:	7008      	strb	r0, [r1, #0]
    7168:	6870      	ldr	r0, [r6, #4]
    716a:	f003 fed3 	bl	af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    716e:	e000      	b.n	7172 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    7170:	2500      	movs	r5, #0
    7172:	4628      	mov	r0, r5
    7174:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7176:	0000      	.short	0x0000
    7178:	200000fc 	.word	0x200000fc
    717c:	20001074 	.word	0x20001074
    7180:	b570      	push	{r4, r5, r6, lr}
    7182:	4604      	mov	r4, r0
    7184:	460e      	mov	r6, r1
    7186:	7e40      	ldrb	r0, [r0, #25]
    7188:	f7fe fb64 	bl	5854 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    718c:	0005      	movs	r5, r0
    718e:	d019      	beq.n	71c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7190:	2110      	movs	r1, #16
    7192:	f006 fac7 	bl	d724 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7196:	2800      	cmp	r0, #0
    7198:	d114      	bne.n	71c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    719a:	2001      	movs	r0, #1
    719c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    71a0:	f104 0157 	add.w	r1, r4, #87	; 0x57
    71a4:	4632      	mov	r2, r6
    71a6:	460c      	mov	r4, r1
    71a8:	4628      	mov	r0, r5
    71aa:	f006 f873 	bl	d294 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    71ae:	4621      	mov	r1, r4
    71b0:	4c05      	ldr	r4, [pc, #20]	; (71c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    71b2:	6860      	ldr	r0, [r4, #4]
    71b4:	f006 fc64 	bl	da80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    71b8:	6860      	ldr	r0, [r4, #4]
    71ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    71be:	2101      	movs	r1, #1
    71c0:	f006 bc64 	b.w	da8c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    71c4:	bd70      	pop	{r4, r5, r6, pc}
    71c6:	0000      	.short	0x0000
    71c8:	200000fc 	.word	0x200000fc
    71cc:	4802      	ldr	r0, [pc, #8]	; (71d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    71ce:	2101      	movs	r1, #1
    71d0:	6800      	ldr	r0, [r0, #0]
    71d2:	f7ff bb27 	b.w	6824 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    71d6:	0000      	.short	0x0000
    71d8:	200000fc 	.word	0x200000fc
    71dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71e0:	4e21      	ldr	r6, [pc, #132]	; (7268 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x744>)
    71e2:	4680      	mov	r8, r0
    71e4:	460c      	mov	r4, r1
    71e6:	6870      	ldr	r0, [r6, #4]
    71e8:	4615      	mov	r5, r2
    71ea:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    71ee:	6121      	str	r1, [r4, #16]
    71f0:	8881      	ldrh	r1, [r0, #4]
    71f2:	8321      	strh	r1, [r4, #24]
    71f4:	7981      	ldrb	r1, [r0, #6]
    71f6:	76a1      	strb	r1, [r4, #26]
    71f8:	8940      	ldrh	r0, [r0, #10]
    71fa:	f006 f903 	bl	d404 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    71fe:	4607      	mov	r7, r0
    7200:	60e0      	str	r0, [r4, #12]
    7202:	6870      	ldr	r0, [r6, #4]
    7204:	4639      	mov	r1, r7
    7206:	7d80      	ldrb	r0, [r0, #22]
    7208:	f006 fa87 	bl	d71a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    720c:	83a0      	strh	r0, [r4, #28]
    720e:	6870      	ldr	r0, [r6, #4]
    7210:	4639      	mov	r1, r7
    7212:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7216:	f006 fa7c 	bl	d712 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    721a:	6220      	str	r0, [r4, #32]
    721c:	6870      	ldr	r0, [r6, #4]
    721e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7222:	82a1      	strh	r1, [r4, #20]
    7224:	8841      	ldrh	r1, [r0, #2]
    7226:	82e1      	strh	r1, [r4, #22]
    7228:	6841      	ldr	r1, [r0, #4]
    722a:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    722e:	7a01      	ldrb	r1, [r0, #8]
    7230:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    7234:	7a41      	ldrb	r1, [r0, #9]
    7236:	f001 011f 	and.w	r1, r1, #31
    723a:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    723e:	7a40      	ldrb	r0, [r0, #9]
    7240:	0940      	lsrs	r0, r0, #5
    7242:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    7246:	f104 0062 	add.w	r0, r4, #98	; 0x62
    724a:	7205      	strb	r5, [r0, #8]
    724c:	7245      	strb	r5, [r0, #9]
    724e:	2101      	movs	r1, #1
    7250:	7281      	strb	r1, [r0, #10]
    7252:	2100      	movs	r1, #0
    7254:	3836      	subs	r0, #54	; 0x36
    7256:	f006 fda3 	bl	dda0 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    725a:	f898 000e 	ldrb.w	r0, [r8, #14]
    725e:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    7262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7266:	0000      	.short	0x0000
    7268:	200000fc 	.word	0x200000fc
    726c:	b570      	push	{r4, r5, r6, lr}
    726e:	4d07      	ldr	r5, [pc, #28]	; (728c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x768>)
    7270:	4604      	mov	r4, r0
    7272:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7276:	6868      	ldr	r0, [r5, #4]
    7278:	f006 fc0f 	bl	da9a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    727c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    7280:	6868      	ldr	r0, [r5, #4]
    7282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7286:	f006 bc0e 	b.w	daa6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    728a:	0000      	.short	0x0000
    728c:	200000fc 	.word	0x200000fc
    7290:	00555555 	.word	0x00555555
    7294:	00006aad 	.word	0x00006aad
    7298:	00006939 	.word	0x00006939
    729c:	00006a29 	.word	0x00006a29
    72a0:	00000000 	.word	0x00000000
    72a4:	00006a01 	.word	0x00006a01
    72a8:	00006a59 	.word	0x00006a59
    72ac:	0000e0c1 	.word	0x0000e0c1
    72b0:	0000e0c7 	.word	0x0000e0c7
    72b4:	00006ca1 	.word	0x00006ca1
    72b8:	00006cc5 	.word	0x00006cc5
    72bc:	000071cd 	.word	0x000071cd
    72c0:	000072b0 	.word	0x000072b0
    72c4:	000072a8 	.word	0x000072a8
    72c8:	000072a4 	.word	0x000072a4

000072cc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    72cc:	b510      	push	{r4, lr}
    72ce:	1e42      	subs	r2, r0, #1
    72d0:	2a02      	cmp	r2, #2
    72d2:	d901      	bls.n	72d8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    72d4:	21ca      	movs	r1, #202	; 0xca
    72d6:	e009      	b.n	72ec <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    72d8:	1e40      	subs	r0, r0, #1
    72da:	2910      	cmp	r1, #16
    72dc:	d009      	beq.n	72f2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    72de:	2912      	cmp	r1, #18
    72e0:	d00c      	beq.n	72fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    72e2:	2913      	cmp	r1, #19
    72e4:	d00a      	beq.n	72fc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    72e6:	2915      	cmp	r1, #21
    72e8:	d005      	beq.n	72f6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    72ea:	21d8      	movs	r1, #216	; 0xd8
    72ec:	202f      	movs	r0, #47	; 0x2f
    72ee:	f7fc fdad 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72f2:	4905      	ldr	r1, [pc, #20]	; (7308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    72f4:	e004      	b.n	7300 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    72f6:	4904      	ldr	r1, [pc, #16]	; (7308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    72f8:	1d89      	adds	r1, r1, #6
    72fa:	e001      	b.n	7300 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    72fc:	4902      	ldr	r1, [pc, #8]	; (7308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    72fe:	1f89      	subs	r1, r1, #6
    7300:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    7304:	bd10      	pop	{r4, pc}
    7306:	0000      	.short	0x0000
    7308:	0000e314 	.word	0x0000e314

0000730c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    730c:	1e42      	subs	r2, r0, #1
    730e:	b510      	push	{r4, lr}
    7310:	b2d2      	uxtb	r2, r2
    7312:	2a01      	cmp	r2, #1
    7314:	d903      	bls.n	731e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    7316:	291d      	cmp	r1, #29
    7318:	d001      	beq.n	731e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    731a:	21ee      	movs	r1, #238	; 0xee
    731c:	e00d      	b.n	733a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    731e:	2913      	cmp	r1, #19
    7320:	d013      	beq.n	734a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    7322:	dc04      	bgt.n	732e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    7324:	2910      	cmp	r1, #16
    7326:	d00b      	beq.n	7340 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    7328:	2912      	cmp	r1, #18
    732a:	d104      	bne.n	7336 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    732c:	e00d      	b.n	734a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    732e:	2915      	cmp	r1, #21
    7330:	d008      	beq.n	7344 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    7332:	291d      	cmp	r1, #29
    7334:	d00e      	beq.n	7354 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    7336:	f44f 7181 	mov.w	r1, #258	; 0x102
    733a:	202f      	movs	r0, #47	; 0x2f
    733c:	f7fc fd86 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7340:	4807      	ldr	r0, [pc, #28]	; (7360 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7342:	e004      	b.n	734e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7344:	4806      	ldr	r0, [pc, #24]	; (7360 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7346:	3008      	adds	r0, #8
    7348:	e001      	b.n	734e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    734a:	4805      	ldr	r0, [pc, #20]	; (7360 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    734c:	1d00      	adds	r0, r0, #4
    734e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    7352:	bd10      	pop	{r4, pc}
    7354:	f240 315a 	movw	r1, #858	; 0x35a
    7358:	fb10 f001 	smulbb	r0, r0, r1
    735c:	bd10      	pop	{r4, pc}
    735e:	0000      	.short	0x0000
    7360:	0000e302 	.word	0x0000e302

00007364 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    7364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7368:	4604      	mov	r4, r0
    736a:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    736e:	4615      	mov	r5, r2
    7370:	460f      	mov	r7, r1
    7372:	2800      	cmp	r0, #0
    7374:	d157      	bne.n	7426 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    7376:	4621      	mov	r1, r4
    7378:	4841      	ldr	r0, [pc, #260]	; (7480 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    737a:	f7fb f83b 	bl	23f4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    737e:	4606      	mov	r6, r0
    7380:	2820      	cmp	r0, #32
    7382:	d050      	beq.n	7426 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    7384:	2234      	movs	r2, #52	; 0x34
    7386:	2100      	movs	r1, #0
    7388:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    738c:	f004 fe47 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7390:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    7394:	2601      	movs	r6, #1
    7396:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    739a:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    739e:	b13f      	cbz	r7, 73b0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    73a0:	2000      	movs	r0, #0
    73a2:	f000 fbf9 	bl	7b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    73a6:	f000 0007 	and.w	r0, r0, #7
    73aa:	1c40      	adds	r0, r0, #1
    73ac:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    73b0:	4620      	mov	r0, r4
    73b2:	f007 f98f 	bl	e6d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    73b6:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    73ba:	2003      	movs	r0, #3
    73bc:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    73c0:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    73c4:	2700      	movs	r7, #0
    73c6:	f804 7fb8 	strb.w	r7, [r4, #184]!
    73ca:	f7fa fa7f 	bl	18cc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    73ce:	8921      	ldrh	r1, [r4, #8]
    73d0:	3cb8      	subs	r4, #184	; 0xb8
    73d2:	4288      	cmp	r0, r1
    73d4:	d800      	bhi.n	73d8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    73d6:	4608      	mov	r0, r1
    73d8:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    73dc:	fa1f f880 	uxth.w	r8, r0
    73e0:	4620      	mov	r0, r4
    73e2:	f006 fe1a 	bl	e01a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    73e6:	b308      	cbz	r0, 742c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    73e8:	f008 fbd6 	bl	fb98 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    73ec:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    73f0:	b281      	uxth	r1, r0
    73f2:	4628      	mov	r0, r5
    73f4:	f004 fc58 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    73f8:	4428      	add	r0, r5
    73fa:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    73fe:	34a4      	adds	r4, #164	; 0xa4
    7400:	f004 fc1e 	bl	bc40 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7404:	4641      	mov	r1, r8
    7406:	f7fa f8f1 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    740a:	6220      	str	r0, [r4, #32]
    740c:	f804 7c03 	strb.w	r7, [r4, #-3]
    7410:	7126      	strb	r6, [r4, #4]
    7412:	2001      	movs	r0, #1
    7414:	f006 ff6e 	bl	e2f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7418:	f200 1009 	addw	r0, r0, #265	; 0x109
    741c:	1a28      	subs	r0, r5, r0
    741e:	62a7      	str	r7, [r4, #40]	; 0x28
    7420:	60a0      	str	r0, [r4, #8]
    7422:	3ca4      	subs	r4, #164	; 0xa4
    7424:	e017      	b.n	7456 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    7426:	200c      	movs	r0, #12
    7428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    742c:	4620      	mov	r0, r4
    742e:	f007 f8a4 	bl	e57a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    7432:	f844 0fbc 	str.w	r0, [r4, #188]!
    7436:	f804 6c1b 	strb.w	r6, [r4, #-27]
    743a:	f004 fc01 	bl	bc40 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    743e:	4606      	mov	r6, r0
    7440:	2000      	movs	r0, #0
    7442:	f007 f9f3 	bl	e82c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    7446:	eb00 0108 	add.w	r1, r0, r8
    744a:	4630      	mov	r0, r6
    744c:	f7fa f8ce 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7450:	6125      	str	r5, [r4, #16]
    7452:	60a0      	str	r0, [r4, #8]
    7454:	3cbc      	subs	r4, #188	; 0xbc
    7456:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    745a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    745e:	f007 f937 	bl	e6d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    7462:	b138      	cbz	r0, 7474 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    7464:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    7468:	2100      	movs	r1, #0
    746a:	4620      	mov	r0, r4
    746c:	f006 fdf7 	bl	e05e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7470:	2000      	movs	r0, #0
    7472:	e7d9      	b.n	7428 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    7474:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    7478:	2030      	movs	r0, #48	; 0x30
    747a:	f7fc fce7 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    747e:	0000      	.short	0x0000
    7480:	0000e841 	.word	0x0000e841

00007484 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    7484:	4808      	ldr	r0, [pc, #32]	; (74a8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    7486:	b510      	push	{r4, lr}
    7488:	2100      	movs	r1, #0
    748a:	7001      	strb	r1, [r0, #0]
    748c:	2201      	movs	r2, #1
    748e:	7082      	strb	r2, [r0, #2]
    7490:	7041      	strb	r1, [r0, #1]
    7492:	3018      	adds	r0, #24
    7494:	f006 fd03 	bl	de9e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7498:	4803      	ldr	r0, [pc, #12]	; (74a8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    749a:	3020      	adds	r0, #32
    749c:	f006 fcff 	bl	de9e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    74a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74a4:	f006 bf91 	b.w	e3ca <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    74a8:	2000010c 	.word	0x2000010c

000074ac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    74ac:	4901      	ldr	r1, [pc, #4]	; (74b4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    74ae:	7008      	strb	r0, [r1, #0]
    74b0:	4770      	bx	lr
    74b2:	0000      	.short	0x0000
    74b4:	2000010c 	.word	0x2000010c

000074b8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    74b8:	4905      	ldr	r1, [pc, #20]	; (74d0 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    74ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    74be:	fbb1 f1f2 	udiv	r1, r1, r2
    74c2:	b510      	push	{r4, lr}
    74c4:	f201 2191 	addw	r1, r1, #657	; 0x291
    74c8:	f006 fc83 	bl	ddd2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    74cc:	b280      	uxth	r0, r0
    74ce:	bd10      	pop	{r4, pc}
    74d0:	0001527d 	.word	0x0001527d

000074d4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    74d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74d8:	4c10      	ldr	r4, [pc, #64]	; (751c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    74da:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    74de:	f003 fc17 	bl	ad10 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    74e2:	4606      	mov	r6, r0
    74e4:	7820      	ldrb	r0, [r4, #0]
    74e6:	b128      	cbz	r0, 74f4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    74e8:	4632      	mov	r2, r6
    74ea:	4639      	mov	r1, r7
    74ec:	4628      	mov	r0, r5
    74ee:	f005 ff93 	bl	d418 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    74f2:	4605      	mov	r5, r0
    74f4:	6860      	ldr	r0, [r4, #4]
    74f6:	4285      	cmp	r5, r0
    74f8:	d005      	beq.n	7506 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    74fa:	68e1      	ldr	r1, [r4, #12]
    74fc:	1a28      	subs	r0, r5, r0
    74fe:	4408      	add	r0, r1
    7500:	60e0      	str	r0, [r4, #12]
    7502:	f7fb f881 	bl	2608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7506:	6065      	str	r5, [r4, #4]
    7508:	42ae      	cmp	r6, r5
    750a:	d801      	bhi.n	7510 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    750c:	7860      	ldrb	r0, [r4, #1]
    750e:	b110      	cbz	r0, 7516 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    7510:	2000      	movs	r0, #0
    7512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7516:	2001      	movs	r0, #1
    7518:	e7fb      	b.n	7512 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    751a:	0000      	.short	0x0000
    751c:	2000010c 	.word	0x2000010c

00007520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    7520:	b510      	push	{r4, lr}
    7522:	4604      	mov	r4, r0
    7524:	2905      	cmp	r1, #5
    7526:	d227      	bcs.n	7578 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    7528:	e8df f001 	tbb	[pc, r1]
    752c:	0e030b05 	.word	0x0e030b05
    7530:	000f      	.short	0x000f
    7532:	2100      	movs	r1, #0
    7534:	e000      	b.n	7538 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    7536:	2101      	movs	r1, #1
    7538:	4620      	mov	r0, r4
    753a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    753e:	f000 b8f5 	b.w	772c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    7542:	2003      	movs	r0, #3
    7544:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7548:	bd10      	pop	{r4, pc}
    754a:	f003 fc1d 	bl	ad88 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    754e:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    7552:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7556:	f008 fbb8 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    755a:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    755e:	1a09      	subs	r1, r1, r0
    7560:	4808      	ldr	r0, [pc, #32]	; (7584 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
    7562:	6842      	ldr	r2, [r0, #4]
    7564:	440a      	add	r2, r1
    7566:	6042      	str	r2, [r0, #4]
    7568:	6882      	ldr	r2, [r0, #8]
    756a:	4411      	add	r1, r2
    756c:	6081      	str	r1, [r0, #8]
    756e:	4620      	mov	r0, r4
    7570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7574:	f007 b83f 	b.w	e5f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
    7578:	f240 7151 	movw	r1, #1873	; 0x751
    757c:	2030      	movs	r0, #48	; 0x30
    757e:	f7fc fc65 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7582:	0000      	.short	0x0000
    7584:	2000010c 	.word	0x2000010c

00007588 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    7588:	b570      	push	{r4, r5, r6, lr}
    758a:	460c      	mov	r4, r1
    758c:	4605      	mov	r5, r0
    758e:	b112      	cbz	r2, 7596 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    7590:	f240 717b 	movw	r1, #1915	; 0x77b
    7594:	e010      	b.n	75b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    7596:	f003 fbbb 	bl	ad10 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    759a:	4601      	mov	r1, r0
    759c:	2200      	movs	r2, #0
    759e:	4620      	mov	r0, r4
    75a0:	f007 f8fa 	bl	e798 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    75a4:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    75a8:	462a      	mov	r2, r5
    75aa:	4905      	ldr	r1, [pc, #20]	; (75c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    75ac:	f7fa fde4 	bl	2178 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    75b0:	2800      	cmp	r0, #0
    75b2:	d104      	bne.n	75be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    75b4:	f240 7164 	movw	r1, #1892	; 0x764
    75b8:	2030      	movs	r0, #48	; 0x30
    75ba:	f7fc fc47 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75be:	bd70      	pop	{r4, r5, r6, pc}
    75c0:	0000e8e1 	.word	0x0000e8e1
    75c4:	b510      	push	{r4, lr}
    75c6:	280c      	cmp	r0, #12
    75c8:	d304      	bcc.n	75d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    75ca:	f240 3116 	movw	r1, #790	; 0x316
    75ce:	2006      	movs	r0, #6
    75d0:	f7fc fc3c 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75d4:	4901      	ldr	r1, [pc, #4]	; (75dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    75d6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    75da:	bd10      	pop	{r4, pc}
    75dc:	0000eada 	.word	0x0000eada
    75e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    75e2:	4c18      	ldr	r4, [pc, #96]	; (7644 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    75e4:	2001      	movs	r0, #1
    75e6:	7060      	strb	r0, [r4, #1]
    75e8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    75ec:	e00b      	b.n	7606 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    75ee:	2100      	movs	r1, #0
    75f0:	f005 fcb3 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    75f4:	0006      	movs	r6, r0
    75f6:	d010      	beq.n	761a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    75f8:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    75fc:	f7fa fdee 	bl	21dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7600:	4630      	mov	r0, r6
    7602:	f007 f8bc 	bl	e77e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    7606:	4669      	mov	r1, sp
    7608:	2000      	movs	r0, #0
    760a:	f005 fcb0 	bl	cf6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    760e:	b180      	cbz	r0, 7632 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    7610:	f44f 7187 	mov.w	r1, #270	; 0x10e
    7614:	2030      	movs	r0, #48	; 0x30
    7616:	f7fc fc19 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    761a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    761e:	e7f9      	b.n	7614 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    7620:	9802      	ldr	r0, [sp, #8]
    7622:	b130      	cbz	r0, 7632 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    7624:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    7628:	b119      	cbz	r1, 7632 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    762a:	8800      	ldrh	r0, [r0, #0]
    762c:	42a8      	cmp	r0, r5
    762e:	d1de      	bne.n	75ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    7630:	e004      	b.n	763c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    7632:	4668      	mov	r0, sp
    7634:	f7fc fe42 	bl	42bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7638:	2800      	cmp	r0, #0
    763a:	d0f1      	beq.n	7620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    763c:	2000      	movs	r0, #0
    763e:	7060      	strb	r0, [r4, #1]
    7640:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7642:	0000      	.short	0x0000
    7644:	2000010c 	.word	0x2000010c
    7648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    764c:	4604      	mov	r4, r0
    764e:	4836      	ldr	r0, [pc, #216]	; (7728 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    7650:	461e      	mov	r6, r3
    7652:	4690      	mov	r8, r2
    7654:	7880      	ldrb	r0, [r0, #2]
    7656:	4689      	mov	r9, r1
    7658:	2500      	movs	r5, #0
    765a:	b368      	cbz	r0, 76b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    765c:	f7fc f876 	bl	374c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7660:	b350      	cbz	r0, 76b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7662:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    7666:	2802      	cmp	r0, #2
    7668:	d326      	bcc.n	76b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    766a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    766e:	2802      	cmp	r0, #2
    7670:	d022      	beq.n	76b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7672:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    7676:	b9f8      	cbnz	r0, 76b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    7678:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    767c:	f7ff ffa2 	bl	75c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    7680:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7684:	b281      	uxth	r1, r0
    7686:	8031      	strh	r1, [r6, #0]
    7688:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    768c:	2700      	movs	r7, #0
    768e:	2801      	cmp	r0, #1
    7690:	d015      	beq.n	76be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    7692:	68e0      	ldr	r0, [r4, #12]
    7694:	f004 fb08 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7698:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    769c:	b280      	uxth	r0, r0
    769e:	4442      	add	r2, r8
    76a0:	eba2 0109 	sub.w	r1, r2, r9
    76a4:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    76a8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    76ac:	1a82      	subs	r2, r0, r2
    76ae:	fb01 7502 	mla	r5, r1, r2, r7
    76b2:	2001      	movs	r0, #1
    76b4:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    76b8:	4628      	mov	r0, r5
    76ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76be:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    76c2:	2803      	cmp	r0, #3
    76c4:	d02c      	beq.n	7720 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    76c6:	2101      	movs	r1, #1
    76c8:	2000      	movs	r0, #0
    76ca:	f005 ff5f 	bl	d58c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    76ce:	6a21      	ldr	r1, [r4, #32]
    76d0:	1847      	adds	r7, r0, r1
    76d2:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    76d6:	8831      	ldrh	r1, [r6, #0]
    76d8:	34d0      	adds	r4, #208	; 0xd0
    76da:	f004 fae5 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76de:	6da2      	ldr	r2, [r4, #88]	; 0x58
    76e0:	6e21      	ldr	r1, [r4, #96]	; 0x60
    76e2:	1a82      	subs	r2, r0, r2
    76e4:	fb01 5502 	mla	r5, r1, r2, r5
    76e8:	65a0      	str	r0, [r4, #88]	; 0x58
    76ea:	8831      	ldrh	r1, [r6, #0]
    76ec:	4638      	mov	r0, r7
    76ee:	f004 fadb 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76f2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    76f4:	66a0      	str	r0, [r4, #104]	; 0x68
    76f6:	1a41      	subs	r1, r0, r1
    76f8:	440d      	add	r5, r1
    76fa:	8831      	ldrh	r1, [r6, #0]
    76fc:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    7700:	f004 fad2 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7704:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7706:	4442      	add	r2, r8
    7708:	eba2 0109 	sub.w	r1, r2, r9
    770c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    770e:	1a89      	subs	r1, r1, r2
    7710:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7712:	1e49      	subs	r1, r1, #1
    7714:	1a82      	subs	r2, r0, r2
    7716:	fb01 5502 	mla	r5, r1, r2, r5
    771a:	66e0      	str	r0, [r4, #108]	; 0x6c
    771c:	3cd0      	subs	r4, #208	; 0xd0
    771e:	e7c8      	b.n	76b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    7720:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7724:	e7d3      	b.n	76ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    7726:	0000      	.short	0x0000
    7728:	2000010c 	.word	0x2000010c
    772c:	b538      	push	{r3, r4, r5, lr}
    772e:	2500      	movs	r5, #0
    7730:	4604      	mov	r4, r0
    7732:	2901      	cmp	r1, #1
    7734:	d102      	bne.n	773c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    7736:	4811      	ldr	r0, [pc, #68]	; (777c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    7738:	7840      	ldrb	r0, [r0, #1]
    773a:	b178      	cbz	r0, 775c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    773c:	2004      	movs	r0, #4
    773e:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7742:	bf00      	nop
    7744:	f006 ff50 	bl	e5e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    7748:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    774c:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    7750:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    7754:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    7758:	77e5      	strb	r5, [r4, #31]
    775a:	bd38      	pop	{r3, r4, r5, pc}
    775c:	9500      	str	r5, [sp, #0]
    775e:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    7762:	2301      	movs	r3, #1
    7764:	2200      	movs	r2, #0
    7766:	4620      	mov	r0, r4
    7768:	f000 f80a 	bl	7780 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    776c:	2800      	cmp	r0, #0
    776e:	d0e9      	beq.n	7744 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    7770:	f240 61c9 	movw	r1, #1737	; 0x6c9
    7774:	2030      	movs	r0, #48	; 0x30
    7776:	f7fc fb69 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    777a:	0000      	.short	0x0000
    777c:	2000010c 	.word	0x2000010c
    7780:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7784:	4604      	mov	r4, r0
    7786:	b085      	sub	sp, #20
    7788:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    778c:	469a      	mov	sl, r3
    778e:	e9cd 3000 	strd	r3, r0, [sp]
    7792:	460f      	mov	r7, r1
    7794:	f008 fa00 	bl	fb98 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7798:	4605      	mov	r5, r0
    779a:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    779e:	f7ff ff11 	bl	75c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    77a2:	4428      	add	r0, r5
    77a4:	f8ad 0008 	strh.w	r0, [sp, #8]
    77a8:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    77ac:	280d      	cmp	r0, #13
    77ae:	d004      	beq.n	77ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    77b0:	2000      	movs	r0, #0
    77b2:	9003      	str	r0, [sp, #12]
    77b4:	9807      	ldr	r0, [sp, #28]
    77b6:	b110      	cbz	r0, 77be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    77b8:	e02e      	b.n	7818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    77ba:	2001      	movs	r0, #1
    77bc:	e7f9      	b.n	77b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    77be:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    77c2:	2803      	cmp	r0, #3
    77c4:	d128      	bne.n	7818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    77c6:	9803      	ldr	r0, [sp, #12]
    77c8:	b330      	cbz	r0, 7818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    77ca:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    77ce:	42b8      	cmp	r0, r7
    77d0:	d122      	bne.n	7818 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    77d2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    77d6:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    77da:	68e0      	ldr	r0, [r4, #12]
    77dc:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    77e0:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    77e4:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    77e8:	4408      	add	r0, r1
    77ea:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    77ee:	4620      	mov	r0, r4
    77f0:	f007 f989 	bl	eb06 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    77f4:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    77f8:	6220      	str	r0, [r4, #32]
    77fa:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    77fe:	83a0      	strh	r0, [r4, #28]
    7800:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    7804:	60e0      	str	r0, [r4, #12]
    7806:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    780a:	82a0      	strh	r0, [r4, #20]
    780c:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    7810:	82e0      	strh	r0, [r4, #22]
    7812:	2002      	movs	r0, #2
    7814:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7818:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    781c:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    7820:	1a38      	subs	r0, r7, r0
    7822:	fa0f f980 	sxth.w	r9, r0
    7826:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    782a:	1a38      	subs	r0, r7, r0
    782c:	fa0f f880 	sxth.w	r8, r0
    7830:	f1b8 0f00 	cmp.w	r8, #0
    7834:	da06      	bge.n	7844 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    7836:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    783a:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    783e:	2001      	movs	r0, #1
    7840:	46c8      	mov	r8, r9
    7842:	9000      	str	r0, [sp, #0]
    7844:	ab02      	add	r3, sp, #8
    7846:	464a      	mov	r2, r9
    7848:	4641      	mov	r1, r8
    784a:	4620      	mov	r0, r4
    784c:	f7ff fefc 	bl	7648 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    7850:	9004      	str	r0, [sp, #16]
    7852:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7856:	f8df b33c 	ldr.w	fp, [pc, #828]	; 7b94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    785a:	b140      	cbz	r0, 786e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    785c:	2801      	cmp	r0, #1
    785e:	d07d      	beq.n	795c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    7860:	2802      	cmp	r0, #2
    7862:	d052      	beq.n	790a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    7864:	2803      	cmp	r0, #3
    7866:	d07a      	beq.n	795e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    7868:	f240 514d 	movw	r1, #1357	; 0x54d
    786c:	e18e      	b.n	7b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    786e:	2101      	movs	r1, #1
    7870:	2000      	movs	r0, #0
    7872:	f005 fe8b 	bl	d58c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7876:	4606      	mov	r6, r0
    7878:	6a20      	ldr	r0, [r4, #32]
    787a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    787e:	4430      	add	r0, r6
    7880:	f004 fa12 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7884:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    7888:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    788c:	68e0      	ldr	r0, [r4, #12]
    788e:	f004 fa0b 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7892:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    7896:	a901      	add	r1, sp, #4
    7898:	4668      	mov	r0, sp
    789a:	f003 f99d 	bl	abd8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    789e:	e9dd 1200 	ldrd	r1, r2, [sp]
    78a2:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    78a6:	f7fa ff65 	bl	2774 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    78aa:	4681      	mov	r9, r0
    78ac:	4620      	mov	r0, r4
    78ae:	f006 fe8d 	bl	e5cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    78b2:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    78b6:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    78ba:	f008 fa14 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    78be:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    78c2:	4401      	add	r1, r0
    78c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    78c8:	fbb1 f0f0 	udiv	r0, r1, r0
    78cc:	6a21      	ldr	r1, [r4, #32]
    78ce:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    78d2:	4431      	add	r1, r6
    78d4:	1a08      	subs	r0, r1, r0
    78d6:	1a81      	subs	r1, r0, r2
    78d8:	4441      	add	r1, r8
    78da:	3920      	subs	r1, #32
    78dc:	eba1 0609 	sub.w	r6, r1, r9
    78e0:	0050      	lsls	r0, r2, #1
    78e2:	8ba1      	ldrh	r1, [r4, #28]
    78e4:	3060      	adds	r0, #96	; 0x60
    78e6:	4401      	add	r1, r0
    78e8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    78ec:	f006 fede 	bl	e6ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    78f0:	3022      	adds	r0, #34	; 0x22
    78f2:	f8cb 0010 	str.w	r0, [fp, #16]
    78f6:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    78fa:	4659      	mov	r1, fp
    78fc:	1a30      	subs	r0, r6, r0
    78fe:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
    7902:	d859      	bhi.n	79b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    7904:	f240 41e6 	movw	r1, #1254	; 0x4e6
    7908:	e140      	b.n	7b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    790a:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    790e:	6a20      	ldr	r0, [r4, #32]
    7910:	4408      	add	r0, r1
    7912:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7916:	f004 f9c7 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    791a:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    791e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7922:	68e0      	ldr	r0, [r4, #12]
    7924:	f004 f9c0 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7928:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    792c:	4620      	mov	r0, r4
    792e:	f006 fe4d 	bl	e5cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    7932:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    7936:	bb10      	cbnz	r0, 797e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    7938:	f1ba 0f00 	cmp.w	sl, #0
    793c:	d01f      	beq.n	797e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    793e:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    7942:	4640      	mov	r0, r8
    7944:	f008 f9cf 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7948:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    794c:	4401      	add	r1, r0
    794e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7952:	fbb1 f0f0 	udiv	r0, r1, r0
    7956:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    795a:	e001      	b.n	7960 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    795c:	e02d      	b.n	79ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    795e:	e049      	b.n	79f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    7960:	4408      	add	r0, r1
    7962:	6a22      	ldr	r2, [r4, #32]
    7964:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    7968:	4411      	add	r1, r2
    796a:	1a0e      	subs	r6, r1, r0
    796c:	4640      	mov	r0, r8
    796e:	f008 f9ac 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7972:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7976:	1a08      	subs	r0, r1, r0
    7978:	4406      	add	r6, r0
    797a:	3e20      	subs	r6, #32
    797c:	e006      	b.n	798c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    797e:	6a21      	ldr	r1, [r4, #32]
    7980:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7984:	4408      	add	r0, r1
    7986:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    798a:	1a46      	subs	r6, r0, r1
    798c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7990:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    7994:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    7998:	fb01 0002 	mla	r0, r1, r2, r0
    799c:	0040      	lsls	r0, r0, #1
    799e:	8ba1      	ldrh	r1, [r4, #28]
    79a0:	3060      	adds	r0, #96	; 0x60
    79a2:	4401      	add	r1, r0
    79a4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    79a8:	f006 fe80 	bl	e6ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    79ac:	f8cb 0010 	str.w	r0, [fp, #16]
    79b0:	2001      	movs	r0, #1
    79b2:	4659      	mov	r1, fp
    79b4:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    79b8:	e062      	b.n	7a80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    79ba:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    79be:	68e0      	ldr	r0, [r4, #12]
    79c0:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    79c4:	1a86      	subs	r6, r0, r2
    79c6:	eb01 0009 	add.w	r0, r1, r9
    79ca:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    79ce:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    79d2:	1a40      	subs	r0, r0, r1
    79d4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    79d8:	1e40      	subs	r0, r0, #1
    79da:	fb0c 3101 	mla	r1, ip, r1, r3
    79de:	fb00 1002 	mla	r0, r0, r2, r1
    79e2:	0040      	lsls	r0, r0, #1
    79e4:	8ba1      	ldrh	r1, [r4, #28]
    79e6:	3060      	adds	r0, #96	; 0x60
    79e8:	4401      	add	r1, r0
    79ea:	fb06 f608 	mul.w	r6, r6, r8
    79ee:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    79f2:	e040      	b.n	7a76 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    79f4:	68e0      	ldr	r0, [r4, #12]
    79f6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    79fa:	fb00 f008 	mul.w	r0, r0, r8
    79fe:	fb08 0611 	mls	r6, r8, r1, r0
    7a02:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    7a06:	2824      	cmp	r0, #36	; 0x24
    7a08:	d003      	beq.n	7a12 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    7a0a:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    7a0e:	2824      	cmp	r0, #36	; 0x24
    7a10:	d109      	bne.n	7a26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7a12:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    7a16:	1a38      	subs	r0, r7, r0
    7a18:	b200      	sxth	r0, r0
    7a1a:	2800      	cmp	r0, #0
    7a1c:	db03      	blt.n	7a26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7a1e:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    7a22:	b100      	cbz	r0, 7a26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    7a24:	9001      	str	r0, [sp, #4]
    7a26:	9800      	ldr	r0, [sp, #0]
    7a28:	b1d8      	cbz	r0, 7a62 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    7a2a:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    7a2e:	b9c0      	cbnz	r0, 7a62 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    7a30:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    7a34:	2800      	cmp	r0, #0
    7a36:	d07d      	beq.n	7b34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    7a38:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7a3c:	f008 f953 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7a40:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7a44:	4401      	add	r1, r0
    7a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7a4a:	fbb1 f0f0 	udiv	r0, r1, r0
    7a4e:	1a36      	subs	r6, r6, r0
    7a50:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7a54:	f008 f939 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7a58:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7a5c:	1a08      	subs	r0, r1, r0
    7a5e:	4406      	add	r6, r0
    7a60:	3e20      	subs	r6, #32
    7a62:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    7a66:	eb01 0009 	add.w	r0, r1, r9
    7a6a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7a6e:	4348      	muls	r0, r1
    7a70:	0041      	lsls	r1, r0, #1
    7a72:	3160      	adds	r1, #96	; 0x60
    7a74:	9801      	ldr	r0, [sp, #4]
    7a76:	f006 fe19 	bl	e6ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    7a7a:	4659      	mov	r1, fp
    7a7c:	f8cb 0010 	str.w	r0, [fp, #16]
    7a80:	9804      	ldr	r0, [sp, #16]
    7a82:	6909      	ldr	r1, [r1, #16]
    7a84:	1a33      	subs	r3, r6, r0
    7a86:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    7a8a:	68e0      	ldr	r0, [r4, #12]
    7a8c:	1b80      	subs	r0, r0, r6
    7a8e:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    7a92:	f8cb 0014 	str.w	r0, [fp, #20]
    7a96:	4281      	cmp	r1, r0
    7a98:	d800      	bhi.n	7a9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    7a9a:	4608      	mov	r0, r1
    7a9c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    7aa0:	2000      	movs	r0, #0
    7aa2:	7028      	strb	r0, [r5, #0]
    7aa4:	2064      	movs	r0, #100	; 0x64
    7aa6:	8128      	strh	r0, [r5, #8]
    7aa8:	4619      	mov	r1, r3
    7aaa:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    7aae:	f7f9 fd9d 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7ab2:	60e8      	str	r0, [r5, #12]
    7ab4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7ab8:	f006 f95c 	bl	dd74 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    7abc:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    7ac0:	4408      	add	r0, r1
    7ac2:	6068      	str	r0, [r5, #4]
    7ac4:	68e8      	ldr	r0, [r5, #12]
    7ac6:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    7aca:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    7ace:	2001      	movs	r0, #1
    7ad0:	72a8      	strb	r0, [r5, #10]
    7ad2:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    7ad6:	1bc9      	subs	r1, r1, r7
    7ad8:	b209      	sxth	r1, r1
    7ada:	2900      	cmp	r1, #0
    7adc:	dd01      	ble.n	7ae2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    7ade:	2103      	movs	r1, #3
    7ae0:	72a9      	strb	r1, [r5, #10]
    7ae2:	9903      	ldr	r1, [sp, #12]
    7ae4:	b339      	cbz	r1, 7b36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    7ae6:	f1ba 0f00 	cmp.w	sl, #0
    7aea:	d01f      	beq.n	7b2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7aec:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    7af0:	b38a      	cbz	r2, 7b56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
    7af2:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    7af6:	bf00      	nop
    7af8:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    7afc:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    7b00:	1c49      	adds	r1, r1, #1
    7b02:	434b      	muls	r3, r1
    7b04:	4293      	cmp	r3, r2
    7b06:	d211      	bcs.n	7b2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7b08:	7aa9      	ldrb	r1, [r5, #10]
    7b0a:	1e49      	subs	r1, r1, #1
    7b0c:	2900      	cmp	r1, #0
    7b0e:	dd0d      	ble.n	7b2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7b10:	72a8      	strb	r0, [r5, #10]
    7b12:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    7b16:	1c40      	adds	r0, r0, #1
    7b18:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    7b1c:	2001      	movs	r0, #1
    7b1e:	f000 f83b 	bl	7b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    7b22:	f000 0007 	and.w	r0, r0, #7
    7b26:	1c40      	adds	r0, r0, #1
    7b28:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    7b2c:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    7b30:	4629      	mov	r1, r5
    7b32:	e001      	b.n	7b38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    7b34:	e00c      	b.n	7b50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    7b36:	e00f      	b.n	7b58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    7b38:	f006 fdca 	bl	e6d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    7b3c:	b320      	cbz	r0, 7b88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    7b3e:	9807      	ldr	r0, [sp, #28]
    7b40:	f080 0001 	eor.w	r0, r0, #1
    7b44:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    7b48:	2000      	movs	r0, #0
    7b4a:	b009      	add	sp, #36	; 0x24
    7b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b50:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    7b54:	e01a      	b.n	7b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    7b56:	e015      	b.n	7b84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    7b58:	f1ba 0f00 	cmp.w	sl, #0
    7b5c:	d1c6      	bne.n	7aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    7b5e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7b62:	2800      	cmp	r0, #0
    7b64:	d0e2      	beq.n	7b2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7b66:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7b6a:	68e0      	ldr	r0, [r4, #12]
    7b6c:	1a41      	subs	r1, r0, r1
    7b6e:	4628      	mov	r0, r5
    7b70:	f005 fd1e 	bl	d5b0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7b74:	0400      	lsls	r0, r0, #16
    7b76:	0c00      	lsrs	r0, r0, #16
    7b78:	d0d8      	beq.n	7b2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    7b7a:	9912      	ldr	r1, [sp, #72]	; 0x48
    7b7c:	b101      	cbz	r1, 7b80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    7b7e:	8008      	strh	r0, [r1, #0]
    7b80:	2001      	movs	r0, #1
    7b82:	e7e2      	b.n	7b4a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    7b84:	2100      	movs	r1, #0
    7b86:	e7b7      	b.n	7af8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    7b88:	f240 5197 	movw	r1, #1431	; 0x597
    7b8c:	2030      	movs	r0, #48	; 0x30
    7b8e:	f7fc f95d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b92:	0000      	.short	0x0000
    7b94:	2000010c 	.word	0x2000010c
    7b98:	b108      	cbz	r0, 7b9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    7b9a:	4803      	ldr	r0, [pc, #12]	; (7ba8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    7b9c:	e001      	b.n	7ba2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
    7b9e:	4802      	ldr	r0, [pc, #8]	; (7ba8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    7ba0:	3008      	adds	r0, #8
    7ba2:	f7fe bc7b 	b.w	649c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    7ba6:	0000      	.short	0x0000
    7ba8:	20000124 	.word	0x20000124
    7bac:	b570      	push	{r4, r5, r6, lr}
    7bae:	4604      	mov	r4, r0
    7bb0:	f7f9 fe8c 	bl	18cc <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7bb4:	2864      	cmp	r0, #100	; 0x64
    7bb6:	d901      	bls.n	7bbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
    7bb8:	4605      	mov	r5, r0
    7bba:	e000      	b.n	7bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
    7bbc:	2564      	movs	r5, #100	; 0x64
    7bbe:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7bc2:	2128      	movs	r1, #40	; 0x28
    7bc4:	f006 fc73 	bl	e4ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    7bc8:	4428      	add	r0, r5
    7bca:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7bce:	f200 203d 	addw	r0, r0, #573	; 0x23d
    7bd2:	180e      	adds	r6, r1, r0
    7bd4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7bd8:	2128      	movs	r1, #40	; 0x28
    7bda:	f006 fc68 	bl	e4ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    7bde:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    7be2:	4620      	mov	r0, r4
    7be4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7be6:	f006 f864 	bl	dcb2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7bea:	4605      	mov	r5, r0
    7bec:	4632      	mov	r2, r6
    7bee:	4620      	mov	r0, r4
    7bf0:	68e1      	ldr	r1, [r4, #12]
    7bf2:	f006 f85e 	bl	dcb2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7bf6:	4907      	ldr	r1, [pc, #28]	; (7c14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
    7bf8:	4285      	cmp	r5, r0
    7bfa:	6088      	str	r0, [r1, #8]
    7bfc:	d200      	bcs.n	7c00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
    7bfe:	4628      	mov	r0, r5
    7c00:	6048      	str	r0, [r1, #4]
    7c02:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7c06:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    7c0a:	60c8      	str	r0, [r1, #12]
    7c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c10:	f7fa bcfa 	b.w	2608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7c14:	2000010c 	.word	0x2000010c

00007c18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7c18:	4806      	ldr	r0, [pc, #24]	; (7c34 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7c1a:	4905      	ldr	r1, [pc, #20]	; (7c30 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7c1c:	6501      	str	r1, [r0, #80]	; 0x50
    7c1e:	4906      	ldr	r1, [pc, #24]	; (7c38 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7c20:	6541      	str	r1, [r0, #84]	; 0x54
    7c22:	4807      	ldr	r0, [pc, #28]	; (7c40 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7c24:	4905      	ldr	r1, [pc, #20]	; (7c3c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7c26:	6501      	str	r1, [r0, #80]	; 0x50
    7c28:	4906      	ldr	r1, [pc, #24]	; (7c44 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7c2a:	6541      	str	r1, [r0, #84]	; 0x54
    7c2c:	4770      	bx	lr
    7c2e:	0000      	.short	0x0000
    7c30:	00009179 	.word	0x00009179
    7c34:	20000148 	.word	0x20000148
    7c38:	00009255 	.word	0x00009255
    7c3c:	000098d1 	.word	0x000098d1
    7c40:	200001ac 	.word	0x200001ac
    7c44:	00009901 	.word	0x00009901

00007c48 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c4a:	460d      	mov	r5, r1
    7c4c:	4607      	mov	r7, r0
    7c4e:	2100      	movs	r1, #0
    7c50:	f005 f983 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7c54:	1e04      	subs	r4, r0, #0
    7c56:	d04f      	beq.n	7cf8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c58:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7c5c:	2800      	cmp	r0, #0
    7c5e:	d04b      	beq.n	7cf8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c60:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7c64:	f88d 0000 	strb.w	r0, [sp]
    7c68:	9800      	ldr	r0, [sp, #0]
    7c6a:	9000      	str	r0, [sp, #0]
    7c6c:	f89d 0000 	ldrb.w	r0, [sp]
    7c70:	2600      	movs	r6, #0
    7c72:	b1d8      	cbz	r0, 7cac <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7c74:	706e      	strb	r6, [r5, #1]
    7c76:	2007      	movs	r0, #7
    7c78:	7028      	strb	r0, [r5, #0]
    7c7a:	e00b      	b.n	7c94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7c7c:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    7c80:	84a6      	strh	r6, [r4, #36]	; 0x24
    7c82:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    7c86:	6068      	str	r0, [r5, #4]
    7c88:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    7c8c:	60a8      	str	r0, [r5, #8]
    7c8e:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    7c92:	81a8      	strh	r0, [r5, #12]
    7c94:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7c98:	f88d 0000 	strb.w	r0, [sp]
    7c9c:	9800      	ldr	r0, [sp, #0]
    7c9e:	9000      	str	r0, [sp, #0]
    7ca0:	f89d 0000 	ldrb.w	r0, [sp]
    7ca4:	2800      	cmp	r0, #0
    7ca6:	d1e9      	bne.n	7c7c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7ca8:	712e      	strb	r6, [r5, #4]
    7caa:	e10b      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7cac:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7cb0:	b3a0      	cbz	r0, 7d1c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7cb2:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7cb6:	280b      	cmp	r0, #11
    7cb8:	d016      	beq.n	7ce8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7cba:	280c      	cmp	r0, #12
    7cbc:	d004      	beq.n	7cc8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7cbe:	f640 21ee 	movw	r1, #2798	; 0xaee
    7cc2:	2031      	movs	r0, #49	; 0x31
    7cc4:	f7fc f8c2 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cc8:	8820      	ldrh	r0, [r4, #0]
    7cca:	f7fc fcd9 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7cce:	4607      	mov	r7, r0
    7cd0:	f005 f809 	bl	cce6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7cd4:	b978      	cbnz	r0, 7cf6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7cd6:	706e      	strb	r6, [r5, #1]
    7cd8:	200c      	movs	r0, #12
    7cda:	7028      	strb	r0, [r5, #0]
    7cdc:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7ce0:	7128      	strb	r0, [r5, #4]
    7ce2:	8820      	ldrh	r0, [r4, #0]
    7ce4:	80e8      	strh	r0, [r5, #6]
    7ce6:	e013      	b.n	7d10 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7ce8:	8820      	ldrh	r0, [r4, #0]
    7cea:	f7fc fcc9 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7cee:	4607      	mov	r7, r0
    7cf0:	f004 fff9 	bl	cce6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7cf4:	b108      	cbz	r0, 7cfa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7cf6:	2000      	movs	r0, #0
    7cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cfa:	706e      	strb	r6, [r5, #1]
    7cfc:	200b      	movs	r0, #11
    7cfe:	7028      	strb	r0, [r5, #0]
    7d00:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7d04:	7128      	strb	r0, [r5, #4]
    7d06:	8820      	ldrh	r0, [r4, #0]
    7d08:	80e8      	strh	r0, [r5, #6]
    7d0a:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    7d0e:	7228      	strb	r0, [r5, #8]
    7d10:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    7d14:	4638      	mov	r0, r7
    7d16:	f005 f801 	bl	cd1c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7d1a:	e0d3      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d1c:	e7ff      	b.n	7d1e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7d1e:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7d22:	f88d 0000 	strb.w	r0, [sp]
    7d26:	9800      	ldr	r0, [sp, #0]
    7d28:	9000      	str	r0, [sp, #0]
    7d2a:	f89d 0000 	ldrb.w	r0, [sp]
    7d2e:	b130      	cbz	r0, 7d3e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7d30:	706e      	strb	r6, [r5, #1]
    7d32:	200e      	movs	r0, #14
    7d34:	7028      	strb	r0, [r5, #0]
    7d36:	80af      	strh	r7, [r5, #4]
    7d38:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7d3c:	e0c2      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d3e:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    7d42:	f88d 0000 	strb.w	r0, [sp]
    7d46:	9800      	ldr	r0, [sp, #0]
    7d48:	9000      	str	r0, [sp, #0]
    7d4a:	f89d 0000 	ldrb.w	r0, [sp]
    7d4e:	b198      	cbz	r0, 7d78 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7d50:	706e      	strb	r6, [r5, #1]
    7d52:	2008      	movs	r0, #8
    7d54:	7028      	strb	r0, [r5, #0]
    7d56:	8820      	ldrh	r0, [r4, #0]
    7d58:	80a8      	strh	r0, [r5, #4]
    7d5a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    7d5e:	f8c5 1006 	str.w	r1, [r5, #6]
    7d62:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    7d66:	f8c5 100a 	str.w	r1, [r5, #10]
    7d6a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    7d6e:	81e8      	strh	r0, [r5, #14]
    7d70:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    7d74:	7026      	strb	r6, [r4, #0]
    7d76:	e0a5      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7d78:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7d7c:	f88d 0000 	strb.w	r0, [sp]
    7d80:	9800      	ldr	r0, [sp, #0]
    7d82:	9000      	str	r0, [sp, #0]
    7d84:	f89d 0000 	ldrb.w	r0, [sp]
    7d88:	b1a0      	cbz	r0, 7db4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7d8a:	706e      	strb	r6, [r5, #1]
    7d8c:	2016      	movs	r0, #22
    7d8e:	7028      	strb	r0, [r5, #0]
    7d90:	e005      	b.n	7d9e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7d92:	bf00      	nop
    7d94:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7d98:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7d9c:	6068      	str	r0, [r5, #4]
    7d9e:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7da2:	f88d 0000 	strb.w	r0, [sp]
    7da6:	9800      	ldr	r0, [sp, #0]
    7da8:	9000      	str	r0, [sp, #0]
    7daa:	f89d 0000 	ldrb.w	r0, [sp]
    7dae:	2800      	cmp	r0, #0
    7db0:	d1f0      	bne.n	7d94 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7db2:	e087      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7db4:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    7db8:	f88d 0000 	strb.w	r0, [sp]
    7dbc:	9800      	ldr	r0, [sp, #0]
    7dbe:	9000      	str	r0, [sp, #0]
    7dc0:	f89d 0000 	ldrb.w	r0, [sp]
    7dc4:	b170      	cbz	r0, 7de4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7dc6:	706e      	strb	r6, [r5, #1]
    7dc8:	2006      	movs	r0, #6
    7dca:	7028      	strb	r0, [r5, #0]
    7dcc:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7dd0:	6068      	str	r0, [r5, #4]
    7dd2:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    7dd6:	60a8      	str	r0, [r5, #8]
    7dd8:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    7ddc:	60e8      	str	r0, [r5, #12]
    7dde:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    7de2:	e03a      	b.n	7e5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7de4:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7de8:	f88d 0000 	strb.w	r0, [sp]
    7dec:	9800      	ldr	r0, [sp, #0]
    7dee:	9000      	str	r0, [sp, #0]
    7df0:	f89d 0000 	ldrb.w	r0, [sp]
    7df4:	b1d0      	cbz	r0, 7e2c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7df6:	706e      	strb	r6, [r5, #1]
    7df8:	2012      	movs	r0, #18
    7dfa:	7028      	strb	r0, [r5, #0]
    7dfc:	e00b      	b.n	7e16 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7dfe:	bf00      	nop
    7e00:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    7e04:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7e08:	6068      	str	r0, [r5, #4]
    7e0a:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    7e0e:	60a8      	str	r0, [r5, #8]
    7e10:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    7e14:	60e8      	str	r0, [r5, #12]
    7e16:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7e1a:	f88d 0000 	strb.w	r0, [sp]
    7e1e:	9800      	ldr	r0, [sp, #0]
    7e20:	9000      	str	r0, [sp, #0]
    7e22:	f89d 0000 	ldrb.w	r0, [sp]
    7e26:	2800      	cmp	r0, #0
    7e28:	d1ea      	bne.n	7e00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7e2a:	e04b      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e2c:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    7e30:	f88d 0000 	strb.w	r0, [sp]
    7e34:	9800      	ldr	r0, [sp, #0]
    7e36:	9000      	str	r0, [sp, #0]
    7e38:	f89d 0000 	ldrb.w	r0, [sp]
    7e3c:	b180      	cbz	r0, 7e60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7e3e:	706e      	strb	r6, [r5, #1]
    7e40:	2018      	movs	r0, #24
    7e42:	7028      	strb	r0, [r5, #0]
    7e44:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    7e48:	6068      	str	r0, [r5, #4]
    7e4a:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7e4e:	60a8      	str	r0, [r5, #8]
    7e50:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    7e54:	81a8      	strh	r0, [r5, #12]
    7e56:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    7e5a:	f804 6c02 	strb.w	r6, [r4, #-2]
    7e5e:	e031      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e60:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    7e64:	f88d 0000 	strb.w	r0, [sp]
    7e68:	9800      	ldr	r0, [sp, #0]
    7e6a:	9000      	str	r0, [sp, #0]
    7e6c:	f89d 0000 	ldrb.w	r0, [sp]
    7e70:	b138      	cbz	r0, 7e82 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7e72:	2019      	movs	r0, #25
    7e74:	7028      	strb	r0, [r5, #0]
    7e76:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    7e7a:	6068      	str	r0, [r5, #4]
    7e7c:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    7e80:	e020      	b.n	7ec4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7e82:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7e86:	f88d 0000 	strb.w	r0, [sp]
    7e8a:	9800      	ldr	r0, [sp, #0]
    7e8c:	9000      	str	r0, [sp, #0]
    7e8e:	f89d 0000 	ldrb.w	r0, [sp]
    7e92:	2800      	cmp	r0, #0
    7e94:	f43f af30 	beq.w	7cf8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7e98:	706e      	strb	r6, [r5, #1]
    7e9a:	2013      	movs	r0, #19
    7e9c:	7028      	strb	r0, [r5, #0]
    7e9e:	e007      	b.n	7eb0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7ea0:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    7ea4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7ea8:	6068      	str	r0, [r5, #4]
    7eaa:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    7eae:	8128      	strh	r0, [r5, #8]
    7eb0:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7eb4:	f88d 0000 	strb.w	r0, [sp]
    7eb8:	9800      	ldr	r0, [sp, #0]
    7eba:	9000      	str	r0, [sp, #0]
    7ebc:	f89d 0000 	ldrb.w	r0, [sp]
    7ec0:	2800      	cmp	r0, #0
    7ec2:	d1ed      	bne.n	7ea0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7ec4:	2001      	movs	r0, #1
    7ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007ec8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7ec8:	481b      	ldr	r0, [pc, #108]	; (7f38 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7eca:	491a      	ldr	r1, [pc, #104]	; (7f34 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7ecc:	6081      	str	r1, [r0, #8]
    7ece:	491b      	ldr	r1, [pc, #108]	; (7f3c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7ed0:	6041      	str	r1, [r0, #4]
    7ed2:	491b      	ldr	r1, [pc, #108]	; (7f40 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7ed4:	6001      	str	r1, [r0, #0]
    7ed6:	491b      	ldr	r1, [pc, #108]	; (7f44 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7ed8:	6281      	str	r1, [r0, #40]	; 0x28
    7eda:	491b      	ldr	r1, [pc, #108]	; (7f48 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7edc:	62c1      	str	r1, [r0, #44]	; 0x2c
    7ede:	491b      	ldr	r1, [pc, #108]	; (7f4c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7ee0:	60c1      	str	r1, [r0, #12]
    7ee2:	491b      	ldr	r1, [pc, #108]	; (7f50 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7ee4:	6181      	str	r1, [r0, #24]
    7ee6:	491b      	ldr	r1, [pc, #108]	; (7f54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7ee8:	6301      	str	r1, [r0, #48]	; 0x30
    7eea:	491b      	ldr	r1, [pc, #108]	; (7f58 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7eec:	6201      	str	r1, [r0, #32]
    7eee:	491b      	ldr	r1, [pc, #108]	; (7f5c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7ef0:	64c1      	str	r1, [r0, #76]	; 0x4c
    7ef2:	491b      	ldr	r1, [pc, #108]	; (7f60 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7ef4:	6481      	str	r1, [r0, #72]	; 0x48
    7ef6:	491b      	ldr	r1, [pc, #108]	; (7f64 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7ef8:	6441      	str	r1, [r0, #68]	; 0x44
    7efa:	491b      	ldr	r1, [pc, #108]	; (7f68 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7efc:	6341      	str	r1, [r0, #52]	; 0x34
    7efe:	491b      	ldr	r1, [pc, #108]	; (7f6c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7f00:	61c1      	str	r1, [r0, #28]
    7f02:	481c      	ldr	r0, [pc, #112]	; (7f74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7f04:	491a      	ldr	r1, [pc, #104]	; (7f70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7f06:	6081      	str	r1, [r0, #8]
    7f08:	491b      	ldr	r1, [pc, #108]	; (7f78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7f0a:	61c1      	str	r1, [r0, #28]
    7f0c:	491b      	ldr	r1, [pc, #108]	; (7f7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7f0e:	6241      	str	r1, [r0, #36]	; 0x24
    7f10:	491b      	ldr	r1, [pc, #108]	; (7f80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7f12:	62c1      	str	r1, [r0, #44]	; 0x2c
    7f14:	491b      	ldr	r1, [pc, #108]	; (7f84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7f16:	6101      	str	r1, [r0, #16]
    7f18:	491b      	ldr	r1, [pc, #108]	; (7f88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7f1a:	6141      	str	r1, [r0, #20]
    7f1c:	491b      	ldr	r1, [pc, #108]	; (7f8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7f1e:	6441      	str	r1, [r0, #68]	; 0x44
    7f20:	6341      	str	r1, [r0, #52]	; 0x34
    7f22:	491b      	ldr	r1, [pc, #108]	; (7f90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7f24:	6181      	str	r1, [r0, #24]
    7f26:	491b      	ldr	r1, [pc, #108]	; (7f94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7f28:	6301      	str	r1, [r0, #48]	; 0x30
    7f2a:	491b      	ldr	r1, [pc, #108]	; (7f98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7f2c:	6481      	str	r1, [r0, #72]	; 0x48
    7f2e:	491b      	ldr	r1, [pc, #108]	; (7f9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7f30:	64c1      	str	r1, [r0, #76]	; 0x4c
    7f32:	4770      	bx	lr
    7f34:	00009605 	.word	0x00009605
    7f38:	20000148 	.word	0x20000148
    7f3c:	00008f41 	.word	0x00008f41
    7f40:	00008f9d 	.word	0x00008f9d
    7f44:	0000931d 	.word	0x0000931d
    7f48:	00009361 	.word	0x00009361
    7f4c:	00009049 	.word	0x00009049
    7f50:	000095dd 	.word	0x000095dd
    7f54:	00009721 	.word	0x00009721
    7f58:	000090f5 	.word	0x000090f5
    7f5c:	000092f1 	.word	0x000092f1
    7f60:	000092c5 	.word	0x000092c5
    7f64:	0000959d 	.word	0x0000959d
    7f68:	000095cd 	.word	0x000095cd
    7f6c:	00009639 	.word	0x00009639
    7f70:	00009ab9 	.word	0x00009ab9
    7f74:	200001ac 	.word	0x200001ac
    7f78:	00009ae1 	.word	0x00009ae1
    7f7c:	000098a1 	.word	0x000098a1
    7f80:	00009979 	.word	0x00009979
    7f84:	00009875 	.word	0x00009875
    7f88:	00009a21 	.word	0x00009a21
    7f8c:	000099fd 	.word	0x000099fd
    7f90:	00009a45 	.word	0x00009a45
    7f94:	00009b39 	.word	0x00009b39
    7f98:	00009931 	.word	0x00009931
    7f9c:	00009961 	.word	0x00009961

00007fa0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7fa0:	4806      	ldr	r0, [pc, #24]	; (7fbc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7fa2:	4905      	ldr	r1, [pc, #20]	; (7fb8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7fa4:	6581      	str	r1, [r0, #88]	; 0x58
    7fa6:	4906      	ldr	r1, [pc, #24]	; (7fc0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7fa8:	6601      	str	r1, [r0, #96]	; 0x60
    7faa:	4807      	ldr	r0, [pc, #28]	; (7fc8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7fac:	4905      	ldr	r1, [pc, #20]	; (7fc4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7fae:	6581      	str	r1, [r0, #88]	; 0x58
    7fb0:	4906      	ldr	r1, [pc, #24]	; (7fcc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7fb2:	65c1      	str	r1, [r0, #92]	; 0x5c
    7fb4:	4770      	bx	lr
    7fb6:	0000      	.short	0x0000
    7fb8:	00009381 	.word	0x00009381
    7fbc:	20000148 	.word	0x20000148
    7fc0:	00009459 	.word	0x00009459
    7fc4:	000099a5 	.word	0x000099a5
    7fc8:	200001ac 	.word	0x200001ac
    7fcc:	000099d5 	.word	0x000099d5

00007fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7fd4:	2601      	movs	r6, #1
    7fd6:	4c7c      	ldr	r4, [pc, #496]	; (81c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c8>)
    7fd8:	2500      	movs	r5, #0
    7fda:	f366 0107 	bfi	r1, r6, #0, #8
    7fde:	8065      	strh	r5, [r4, #2]
    7fe0:	7065      	strb	r5, [r4, #1]
    7fe2:	7025      	strb	r5, [r4, #0]
    7fe4:	60a0      	str	r0, [r4, #8]
    7fe6:	4689      	mov	r9, r1
    7fe8:	4680      	mov	r8, r0
    7fea:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    7fee:	8800      	ldrh	r0, [r0, #0]
    7ff0:	f7fc fb5c 	bl	46ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7ff4:	b180      	cbz	r0, 8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    7ff6:	68a0      	ldr	r0, [r4, #8]
    7ff8:	8800      	ldrh	r0, [r0, #0]
    7ffa:	f7fc fe01 	bl	4c00 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7ffe:	68a0      	ldr	r0, [r4, #8]
    8000:	8800      	ldrh	r0, [r0, #0]
    8002:	f7fc fda5 	bl	4b50 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8006:	68a0      	ldr	r0, [r4, #8]
    8008:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    800c:	b1c9      	cbz	r1, 8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
    800e:	3070      	adds	r0, #112	; 0x70
    8010:	f006 fdbd 	bl	eb8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8014:	b118      	cbz	r0, 801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    8016:	e014      	b.n	8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
    8018:	f640 31c9 	movw	r1, #3017	; 0xbc9
    801c:	e06b      	b.n	80f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf6>
    801e:	68a0      	ldr	r0, [r4, #8]
    8020:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8024:	f88d 1000 	strb.w	r1, [sp]
    8028:	9900      	ldr	r1, [sp, #0]
    802a:	9100      	str	r1, [sp, #0]
    802c:	f89d 1000 	ldrb.w	r1, [sp]
    8030:	b139      	cbz	r1, 8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
    8032:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8036:	2301      	movs	r3, #1
    8038:	4619      	mov	r1, r3
    803a:	3070      	adds	r0, #112	; 0x70
    803c:	f005 f9ff 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8040:	b180      	cbz	r0, 8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    8042:	68a0      	ldr	r0, [r4, #8]
    8044:	3070      	adds	r0, #112	; 0x70
    8046:	f006 fda2 	bl	eb8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    804a:	b128      	cbz	r0, 8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    804c:	68a0      	ldr	r0, [r4, #8]
    804e:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    8052:	bf00      	nop
    8054:	f000 fbb0 	bl	87b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b8>
    8058:	68a0      	ldr	r0, [r4, #8]
    805a:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    805e:	b189      	cbz	r1, 8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>
    8060:	80a5      	strh	r5, [r4, #4]
    8062:	e01e      	b.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
    8064:	68a0      	ldr	r0, [r4, #8]
    8066:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    806a:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    806e:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8072:	2100      	movs	r1, #0
    8074:	2002      	movs	r0, #2
    8076:	f000 fe41 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    807a:	68a0      	ldr	r0, [r4, #8]
    807c:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    8080:	2002      	movs	r0, #2
    8082:	e7e7      	b.n	8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    8084:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    8088:	f88d 1000 	strb.w	r1, [sp]
    808c:	9900      	ldr	r1, [sp, #0]
    808e:	9100      	str	r1, [sp, #0]
    8090:	f89d 1000 	ldrb.w	r1, [sp]
    8094:	b919      	cbnz	r1, 809e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
    8096:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    8098:	8a82      	ldrh	r2, [r0, #20]
    809a:	4291      	cmp	r1, r2
    809c:	d800      	bhi.n	80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>
    809e:	8a81      	ldrh	r1, [r0, #20]
    80a0:	80a1      	strh	r1, [r4, #4]
    80a2:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    80a6:	1e49      	subs	r1, r1, #1
    80a8:	b28f      	uxth	r7, r1
    80aa:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    80ae:	4439      	add	r1, r7
    80b0:	f820 195c 	strh.w	r1, [r0], #-92
    80b4:	8801      	ldrh	r1, [r0, #0]
    80b6:	4439      	add	r1, r7
    80b8:	8001      	strh	r1, [r0, #0]
    80ba:	f001 fd6b 	bl	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    80be:	b120      	cbz	r0, 80ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    80c0:	68a0      	ldr	r0, [r4, #8]
    80c2:	f850 1f98 	ldr.w	r1, [r0, #152]!
    80c6:	4439      	add	r1, r7
    80c8:	6001      	str	r1, [r0, #0]
    80ca:	68a1      	ldr	r1, [r4, #8]
    80cc:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    80d0:	2801      	cmp	r0, #1
    80d2:	d802      	bhi.n	80da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda>
    80d4:	1c40      	adds	r0, r0, #1
    80d6:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    80da:	b10f      	cbz	r7, 80e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    80dc:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    80e0:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    80e4:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    80e8:	f101 0070 	add.w	r0, r1, #112	; 0x70
    80ec:	f005 fb29 	bl	d742 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    80f0:	b120      	cbz	r0, 80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>
    80f2:	f640 410d 	movw	r1, #3085	; 0xc0d
    80f6:	2031      	movs	r0, #49	; 0x31
    80f8:	f7fb fea8 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fc:	68a0      	ldr	r0, [r4, #8]
    80fe:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8102:	290b      	cmp	r1, #11
    8104:	d001      	beq.n	810a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10a>
    8106:	290c      	cmp	r1, #12
    8108:	d118      	bne.n	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    810a:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    810e:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    8112:	1ad2      	subs	r2, r2, r3
    8114:	b212      	sxth	r2, r2
    8116:	2a00      	cmp	r2, #0
    8118:	db10      	blt.n	813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>
    811a:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    811e:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    8122:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    8126:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    812a:	2103      	movs	r1, #3
    812c:	f7fd fdcc 	bl	5cc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8130:	68a0      	ldr	r0, [r4, #8]
    8132:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8136:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    813a:	e026      	b.n	818a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    813c:	2924      	cmp	r1, #36	; 0x24
    813e:	d111      	bne.n	8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>
    8140:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8144:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8148:	1a89      	subs	r1, r1, r2
    814a:	b209      	sxth	r1, r1
    814c:	2900      	cmp	r1, #0
    814e:	db09      	blt.n	8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>
    8150:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8154:	f000 fe82 	bl	8e5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe5c>
    8158:	2800      	cmp	r0, #0
    815a:	68a0      	ldr	r0, [r4, #8]
    815c:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    8160:	d029      	beq.n	81b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b6>
    8162:	e012      	b.n	818a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    8164:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8168:	2924      	cmp	r1, #36	; 0x24
    816a:	d001      	beq.n	8170 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170>
    816c:	2925      	cmp	r1, #37	; 0x25
    816e:	d10c      	bne.n	818a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    8170:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8174:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8178:	1a89      	subs	r1, r1, r2
    817a:	b209      	sxth	r1, r1
    817c:	2900      	cmp	r1, #0
    817e:	db04      	blt.n	818a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    8180:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8184:	f000 fe6a 	bl	8e5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe5c>
    8188:	b1a8      	cbz	r0, 81b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b6>
    818a:	4810      	ldr	r0, [pc, #64]	; (81cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cc>)
    818c:	9000      	str	r0, [sp, #0]
    818e:	4b10      	ldr	r3, [pc, #64]	; (81d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>)
    8190:	4a10      	ldr	r2, [pc, #64]	; (81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>)
    8192:	4641      	mov	r1, r8
    8194:	4648      	mov	r0, r9
    8196:	f7fc fde9 	bl	4d6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    819a:	68a0      	ldr	r0, [r4, #8]
    819c:	2301      	movs	r3, #1
    819e:	2105      	movs	r1, #5
    81a0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    81a4:	3070      	adds	r0, #112	; 0x70
    81a6:	f005 f94a 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    81aa:	2800      	cmp	r0, #0
    81ac:	d009      	beq.n	81c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c2>
    81ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81b2:	f7fc bdd5 	b.w	4d60 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    81b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81ba:	2100      	movs	r1, #0
    81bc:	4608      	mov	r0, r1
    81be:	f000 bbd5 	b.w	896c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96c>
    81c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81c6:	0000      	.short	0x0000
    81c8:	20000134 	.word	0x20000134
    81cc:	0000896d 	.word	0x0000896d
    81d0:	00008471 	.word	0x00008471
    81d4:	00008da9 	.word	0x00008da9
    81d8:	b570      	push	{r4, r5, r6, lr}
    81da:	4c0f      	ldr	r4, [pc, #60]	; (8218 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x218>)
    81dc:	68a5      	ldr	r5, [r4, #8]
    81de:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    81e2:	2920      	cmp	r1, #32
    81e4:	d002      	beq.n	81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    81e6:	2926      	cmp	r1, #38	; 0x26
    81e8:	d003      	beq.n	81f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f2>
    81ea:	e011      	b.n	8210 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x210>
    81ec:	f000 fe84 	bl	8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    81f0:	e008      	b.n	8204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    81f2:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    81f6:	2301      	movs	r3, #1
    81f8:	210b      	movs	r1, #11
    81fa:	f105 0070 	add.w	r0, r5, #112	; 0x70
    81fe:	f005 f91e 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8202:	b138      	cbz	r0, 8214 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x214>
    8204:	68a1      	ldr	r1, [r4, #8]
    8206:	2000      	movs	r0, #0
    8208:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    820c:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    8210:	2000      	movs	r0, #0
    8212:	bd70      	pop	{r4, r5, r6, pc}
    8214:	202a      	movs	r0, #42	; 0x2a
    8216:	e7e9      	b.n	81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    8218:	20000134 	.word	0x20000134
    821c:	4804      	ldr	r0, [pc, #16]	; (8230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>)
    821e:	2100      	movs	r1, #0
    8220:	6880      	ldr	r0, [r0, #8]
    8222:	f820 1fb0 	strh.w	r1, [r0, #176]!
    8226:	7881      	ldrb	r1, [r0, #2]
    8228:	1c49      	adds	r1, r1, #1
    822a:	7081      	strb	r1, [r0, #2]
    822c:	4770      	bx	lr
    822e:	0000      	.short	0x0000
    8230:	20000134 	.word	0x20000134
    8234:	4807      	ldr	r0, [pc, #28]	; (8254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>)
    8236:	b510      	push	{r4, lr}
    8238:	6881      	ldr	r1, [r0, #8]
    823a:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    823e:	1e40      	subs	r0, r0, #1
    8240:	b240      	sxtb	r0, r0
    8242:	7008      	strb	r0, [r1, #0]
    8244:	2800      	cmp	r0, #0
    8246:	da04      	bge.n	8252 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x252>
    8248:	f44f 71c9 	mov.w	r1, #402	; 0x192
    824c:	2031      	movs	r0, #49	; 0x31
    824e:	f7fb fdfd 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8252:	bd10      	pop	{r4, pc}
    8254:	20000134 	.word	0x20000134
    8258:	491a      	ldr	r1, [pc, #104]	; (82c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>)
    825a:	b508      	push	{r3, lr}
    825c:	6889      	ldr	r1, [r1, #8]
    825e:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    8262:	b1b8      	cbz	r0, 8294 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x294>
    8264:	2a10      	cmp	r2, #16
    8266:	d006      	beq.n	8276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    8268:	2a14      	cmp	r2, #20
    826a:	d007      	beq.n	827c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x27c>
    826c:	2a15      	cmp	r2, #21
    826e:	d008      	beq.n	8282 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x282>
    8270:	2a1b      	cmp	r2, #27
    8272:	d122      	bne.n	82ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ba>
    8274:	e008      	b.n	8288 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x288>
    8276:	2101      	movs	r1, #1
    8278:	200b      	movs	r0, #11
    827a:	e007      	b.n	828c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28c>
    827c:	f001 faac 	bl	97d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17d8>
    8280:	e006      	b.n	8290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x290>
    8282:	f000 fd59 	bl	8d38 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd38>
    8286:	e003      	b.n	8290 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x290>
    8288:	2101      	movs	r1, #1
    828a:	2006      	movs	r0, #6
    828c:	f000 fd36 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    8290:	2001      	movs	r0, #1
    8292:	bd08      	pop	{r3, pc}
    8294:	2a21      	cmp	r2, #33	; 0x21
    8296:	d110      	bne.n	82ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ba>
    8298:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    829c:	2802      	cmp	r0, #2
    829e:	d00e      	beq.n	82be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    82a0:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    82a4:	2801      	cmp	r0, #1
    82a6:	d108      	bne.n	82ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ba>
    82a8:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    82ac:	f88d 0000 	strb.w	r0, [sp]
    82b0:	9800      	ldr	r0, [sp, #0]
    82b2:	9000      	str	r0, [sp, #0]
    82b4:	f89d 0000 	ldrb.w	r0, [sp]
    82b8:	b108      	cbz	r0, 82be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    82ba:	2000      	movs	r0, #0
    82bc:	bd08      	pop	{r3, pc}
    82be:	2101      	movs	r1, #1
    82c0:	2017      	movs	r0, #23
    82c2:	e7e3      	b.n	828c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28c>
    82c4:	20000134 	.word	0x20000134
    82c8:	b538      	push	{r3, r4, r5, lr}
    82ca:	2800      	cmp	r0, #0
    82cc:	d16b      	bne.n	83a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a6>
    82ce:	4c37      	ldr	r4, [pc, #220]	; (83ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ac>)
    82d0:	68a0      	ldr	r0, [r4, #8]
    82d2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    82d6:	07ca      	lsls	r2, r1, #31
    82d8:	d002      	beq.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    82da:	2101      	movs	r1, #1
    82dc:	2009      	movs	r0, #9
    82de:	e05b      	b.n	8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>
    82e0:	078a      	lsls	r2, r1, #30
    82e2:	d50a      	bpl.n	82fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fa>
    82e4:	2101      	movs	r1, #1
    82e6:	200c      	movs	r0, #12
    82e8:	f000 fd08 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    82ec:	68a0      	ldr	r0, [r4, #8]
    82ee:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    82f2:	f041 0101 	orr.w	r1, r1, #1
    82f6:	7001      	strb	r1, [r0, #0]
    82f8:	e050      	b.n	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    82fa:	074a      	lsls	r2, r1, #29
    82fc:	d502      	bpl.n	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    82fe:	2101      	movs	r1, #1
    8300:	2013      	movs	r0, #19
    8302:	e049      	b.n	8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>
    8304:	070a      	lsls	r2, r1, #28
    8306:	d505      	bpl.n	8314 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x314>
    8308:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    830c:	7141      	strb	r1, [r0, #5]
    830e:	2101      	movs	r1, #1
    8310:	2007      	movs	r0, #7
    8312:	e041      	b.n	8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>
    8314:	f011 0f30 	tst.w	r1, #48	; 0x30
    8318:	d045      	beq.n	83a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a6>
    831a:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    831e:	f88d 1000 	strb.w	r1, [sp]
    8322:	9900      	ldr	r1, [sp, #0]
    8324:	9100      	str	r1, [sp, #0]
    8326:	f89d 1000 	ldrb.w	r1, [sp]
    832a:	bbc9      	cbnz	r1, 83a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>
    832c:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8330:	f88d 1000 	strb.w	r1, [sp]
    8334:	9900      	ldr	r1, [sp, #0]
    8336:	9100      	str	r1, [sp, #0]
    8338:	f89d 1000 	ldrb.w	r1, [sp]
    833c:	b1c9      	cbz	r1, 8372 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x372>
    833e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8342:	2924      	cmp	r1, #36	; 0x24
    8344:	d02d      	beq.n	83a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a2>
    8346:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    834a:	2924      	cmp	r1, #36	; 0x24
    834c:	d029      	beq.n	83a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a2>
    834e:	2300      	movs	r3, #0
    8350:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8354:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8358:	f005 fc9d 	bl	dc96 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    835c:	68a0      	ldr	r0, [r4, #8]
    835e:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    8362:	f021 0120 	bic.w	r1, r1, #32
    8366:	f041 0110 	orr.w	r1, r1, #16
    836a:	7001      	strb	r1, [r0, #0]
    836c:	2100      	movs	r1, #0
    836e:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    8372:	68a0      	ldr	r0, [r4, #8]
    8374:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8378:	06c9      	lsls	r1, r1, #27
    837a:	d514      	bpl.n	83a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a6>
    837c:	f005 fca6 	bl	dccc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8380:	f000 f910 	bl	85a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>
    8384:	68a1      	ldr	r1, [r4, #8]
    8386:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    838a:	8bc2      	ldrh	r2, [r0, #30]
    838c:	f821 2fee 	strh.w	r2, [r1, #238]!
    8390:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8392:	8048      	strh	r0, [r1, #2]
    8394:	2101      	movs	r1, #1
    8396:	2015      	movs	r0, #21
    8398:	f000 fcb0 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    839c:	2001      	movs	r0, #1
    839e:	bd38      	pop	{r3, r4, r5, pc}
    83a0:	e001      	b.n	83a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a6>
    83a2:	2301      	movs	r3, #1
    83a4:	e7d4      	b.n	8350 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x350>
    83a6:	2000      	movs	r0, #0
    83a8:	e7f9      	b.n	839e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39e>
    83aa:	0000      	.short	0x0000
    83ac:	20000134 	.word	0x20000134
    83b0:	b570      	push	{r4, r5, r6, lr}
    83b2:	460d      	mov	r5, r1
    83b4:	4606      	mov	r6, r0
    83b6:	f005 fab0 	bl	d91a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    83ba:	4604      	mov	r4, r0
    83bc:	4630      	mov	r0, r6
    83be:	f005 fab8 	bl	d932 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    83c2:	4629      	mov	r1, r5
    83c4:	f000 f81e 	bl	8404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x404>
    83c8:	b1b8      	cbz	r0, 83fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fa>
    83ca:	4620      	mov	r0, r4
    83cc:	f005 f8d0 	bl	d570 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    83d0:	0001      	movs	r1, r0
    83d2:	d00d      	beq.n	83f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f0>
    83d4:	480a      	ldr	r0, [pc, #40]	; (8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>)
    83d6:	6880      	ldr	r0, [r0, #8]
    83d8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    83dc:	428a      	cmp	r2, r1
    83de:	d007      	beq.n	83f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f0>
    83e0:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    83e4:	2901      	cmp	r1, #1
    83e6:	d005      	beq.n	83f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f4>
    83e8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    83ec:	4220      	tst	r0, r4
    83ee:	d004      	beq.n	83fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fa>
    83f0:	2001      	movs	r0, #1
    83f2:	bd70      	pop	{r4, r5, r6, pc}
    83f4:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    83f8:	e7f8      	b.n	83ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ec>
    83fa:	2000      	movs	r0, #0
    83fc:	bd70      	pop	{r4, r5, r6, pc}
    83fe:	0000      	.short	0x0000
    8400:	20000134 	.word	0x20000134
    8404:	b570      	push	{r4, r5, r6, lr}
    8406:	460d      	mov	r5, r1
    8408:	4604      	mov	r4, r0
    840a:	f005 f8b1 	bl	d570 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    840e:	b350      	cbz	r0, 8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8410:	4916      	ldr	r1, [pc, #88]	; (846c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46c>)
    8412:	6889      	ldr	r1, [r1, #8]
    8414:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    8418:	4282      	cmp	r2, r0
    841a:	d024      	beq.n	8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    841c:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    8420:	2b01      	cmp	r3, #1
    8422:	d005      	beq.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    8424:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8428:	4223      	tst	r3, r4
    842a:	d013      	beq.n	8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>
    842c:	b11d      	cbz	r5, 8436 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x436>
    842e:	e01a      	b.n	8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8430:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    8434:	e7f8      	b.n	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    8436:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    843a:	4221      	tst	r1, r4
    843c:	d113      	bne.n	8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    843e:	b15a      	cbz	r2, 8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    8440:	2a04      	cmp	r2, #4
    8442:	d00e      	beq.n	8462 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x462>
    8444:	2804      	cmp	r0, #4
    8446:	d00c      	beq.n	8462 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x462>
    8448:	2a08      	cmp	r2, #8
    844a:	d00a      	beq.n	8462 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x462>
    844c:	2808      	cmp	r0, #8
    844e:	d008      	beq.n	8462 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x462>
    8450:	4282      	cmp	r2, r0
    8452:	d908      	bls.n	8466 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x466>
    8454:	2000      	movs	r0, #0
    8456:	bd70      	pop	{r4, r5, r6, pc}
    8458:	f240 1155 	movw	r1, #341	; 0x155
    845c:	2006      	movs	r0, #6
    845e:	f7fb fcf5 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8462:	4282      	cmp	r2, r0
    8464:	d3f6      	bcc.n	8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>
    8466:	2001      	movs	r0, #1
    8468:	bd70      	pop	{r4, r5, r6, pc}
    846a:	0000      	.short	0x0000
    846c:	20000134 	.word	0x20000134
    8470:	490c      	ldr	r1, [pc, #48]	; (84a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a4>)
    8472:	4602      	mov	r2, r0
    8474:	7848      	ldrb	r0, [r1, #1]
    8476:	b998      	cbnz	r0, 84a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a0>
    8478:	4608      	mov	r0, r1
    847a:	6880      	ldr	r0, [r0, #8]
    847c:	b142      	cbz	r2, 8490 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x490>
    847e:	7889      	ldrb	r1, [r1, #2]
    8480:	0709      	lsls	r1, r1, #28
    8482:	d503      	bpl.n	848c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48c>
    8484:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    8488:	2808      	cmp	r0, #8
    848a:	d009      	beq.n	84a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a0>
    848c:	2001      	movs	r0, #1
    848e:	4770      	bx	lr
    8490:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    8494:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    8496:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    8498:	428a      	cmp	r2, r1
    849a:	d801      	bhi.n	84a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a0>
    849c:	f7ff b81a 	b.w	74d4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    84a0:	2000      	movs	r0, #0
    84a2:	4770      	bx	lr
    84a4:	20000134 	.word	0x20000134
    84a8:	b538      	push	{r3, r4, r5, lr}
    84aa:	4c3d      	ldr	r4, [pc, #244]	; (85a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a0>)
    84ac:	4605      	mov	r5, r0
    84ae:	68a0      	ldr	r0, [r4, #8]
    84b0:	3070      	adds	r0, #112	; 0x70
    84b2:	f006 fb6c 	bl	eb8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    84b6:	2800      	cmp	r0, #0
    84b8:	d170      	bne.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    84ba:	2d00      	cmp	r5, #0
    84bc:	d16e      	bne.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    84be:	68a0      	ldr	r0, [r4, #8]
    84c0:	2301      	movs	r3, #1
    84c2:	4619      	mov	r1, r3
    84c4:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    84c8:	3070      	adds	r0, #112	; 0x70
    84ca:	f004 ffb8 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84ce:	2800      	cmp	r0, #0
    84d0:	d164      	bne.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    84d2:	68a0      	ldr	r0, [r4, #8]
    84d4:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    84d8:	f88d 1000 	strb.w	r1, [sp]
    84dc:	9900      	ldr	r1, [sp, #0]
    84de:	9100      	str	r1, [sp, #0]
    84e0:	f89d 1000 	ldrb.w	r1, [sp]
    84e4:	b149      	cbz	r1, 84fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4fa>
    84e6:	2100      	movs	r1, #0
    84e8:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    84ec:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    84f0:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    84f4:	2100      	movs	r1, #0
    84f6:	2002      	movs	r0, #2
    84f8:	e045      	b.n	8586 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x586>
    84fa:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    84fe:	2301      	movs	r3, #1
    8500:	2104      	movs	r1, #4
    8502:	3070      	adds	r0, #112	; 0x70
    8504:	f004 ff9b 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8508:	4605      	mov	r5, r0
    850a:	f7ff fedd 	bl	82c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c8>
    850e:	2800      	cmp	r0, #0
    8510:	d144      	bne.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    8512:	4628      	mov	r0, r5
    8514:	f7ff fea0 	bl	8258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    8518:	2800      	cmp	r0, #0
    851a:	d13f      	bne.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    851c:	68a0      	ldr	r0, [r4, #8]
    851e:	2301      	movs	r3, #1
    8520:	2100      	movs	r1, #0
    8522:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8526:	3070      	adds	r0, #112	; 0x70
    8528:	f004 ff89 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    852c:	b178      	cbz	r0, 854e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54e>
    852e:	68a0      	ldr	r0, [r4, #8]
    8530:	2301      	movs	r3, #1
    8532:	2104      	movs	r1, #4
    8534:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8538:	3070      	adds	r0, #112	; 0x70
    853a:	f004 ff80 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    853e:	b930      	cbnz	r0, 854e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54e>
    8540:	68a0      	ldr	r0, [r4, #8]
    8542:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    8546:	b110      	cbz	r0, 854e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54e>
    8548:	2100      	movs	r1, #0
    854a:	2012      	movs	r0, #18
    854c:	e01b      	b.n	8586 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x586>
    854e:	68a0      	ldr	r0, [r4, #8]
    8550:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8554:	290a      	cmp	r1, #10
    8556:	d01a      	beq.n	858e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58e>
    8558:	2d00      	cmp	r5, #0
    855a:	d11f      	bne.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    855c:	f000 fb1a 	bl	8b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb94>
    8560:	2800      	cmp	r0, #0
    8562:	d11b      	bne.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    8564:	68a0      	ldr	r0, [r4, #8]
    8566:	2301      	movs	r3, #1
    8568:	2100      	movs	r1, #0
    856a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    856e:	3070      	adds	r0, #112	; 0x70
    8570:	f004 ff65 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8574:	2800      	cmp	r0, #0
    8576:	d011      	beq.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    8578:	68a0      	ldr	r0, [r4, #8]
    857a:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    857e:	2800      	cmp	r0, #0
    8580:	d00c      	beq.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    8582:	2100      	movs	r1, #0
    8584:	20ff      	movs	r0, #255	; 0xff
    8586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    858a:	f000 bbb7 	b.w	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    858e:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    8592:	7101      	strb	r1, [r0, #4]
    8594:	2100      	movs	r1, #0
    8596:	2007      	movs	r0, #7
    8598:	e7f5      	b.n	8586 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x586>
    859a:	e7ff      	b.n	859c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59c>
    859c:	bd38      	pop	{r3, r4, r5, pc}
    859e:	0000      	.short	0x0000
    85a0:	20000134 	.word	0x20000134
    85a4:	480a      	ldr	r0, [pc, #40]	; (85d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d0>)
    85a6:	b510      	push	{r4, lr}
    85a8:	6881      	ldr	r1, [r0, #8]
    85aa:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    85ae:	2801      	cmp	r0, #1
    85b0:	d009      	beq.n	85c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c6>
    85b2:	8808      	ldrh	r0, [r1, #0]
    85b4:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    85b8:	312c      	adds	r1, #44	; 0x2c
    85ba:	f005 fb48 	bl	dc4e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    85be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    85c2:	f7fd bdcf 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    85c6:	2002      	movs	r0, #2
    85c8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    85cc:	bd10      	pop	{r4, pc}
    85ce:	0000      	.short	0x0000
    85d0:	20000134 	.word	0x20000134
    85d4:	b570      	push	{r4, r5, r6, lr}
    85d6:	4c25      	ldr	r4, [pc, #148]	; (866c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66c>)
    85d8:	0005      	movs	r5, r0
    85da:	d12f      	bne.n	863c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63c>
    85dc:	f000 f8a4 	bl	8728 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x728>
    85e0:	f000 f848 	bl	8674 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x674>
    85e4:	0005      	movs	r5, r0
    85e6:	d129      	bne.n	863c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63c>
    85e8:	8860      	ldrh	r0, [r4, #2]
    85ea:	0741      	lsls	r1, r0, #29
    85ec:	d506      	bpl.n	85fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>
    85ee:	68a1      	ldr	r1, [r4, #8]
    85f0:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    85f4:	2907      	cmp	r1, #7
    85f6:	d101      	bne.n	85fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>
    85f8:	2101      	movs	r1, #1
    85fa:	7021      	strb	r1, [r4, #0]
    85fc:	0780      	lsls	r0, r0, #30
    85fe:	d512      	bpl.n	8626 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x626>
    8600:	68e0      	ldr	r0, [r4, #12]
    8602:	78c0      	ldrb	r0, [r0, #3]
    8604:	2819      	cmp	r0, #25
    8606:	d205      	bcs.n	8614 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x614>
    8608:	4919      	ldr	r1, [pc, #100]	; (8670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>)
    860a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    860e:	b109      	cbz	r1, 8614 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x614>
    8610:	4788      	blx	r1
    8612:	e008      	b.n	8626 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x626>
    8614:	28ff      	cmp	r0, #255	; 0xff
    8616:	d004      	beq.n	8622 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x622>
    8618:	f240 714d 	movw	r1, #1869	; 0x74d
    861c:	2031      	movs	r0, #49	; 0x31
    861e:	f7fb fc15 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8622:	f001 f91b 	bl	985c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x185c>
    8626:	78a0      	ldrb	r0, [r4, #2]
    8628:	06c0      	lsls	r0, r0, #27
    862a:	d507      	bpl.n	863c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63c>
    862c:	68a0      	ldr	r0, [r4, #8]
    862e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8632:	290b      	cmp	r1, #11
    8634:	d102      	bne.n	863c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x63c>
    8636:	210c      	movs	r1, #12
    8638:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    863c:	7860      	ldrb	r0, [r4, #1]
    863e:	0700      	lsls	r0, r0, #28
    8640:	d511      	bpl.n	8666 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x666>
    8642:	68a0      	ldr	r0, [r4, #8]
    8644:	2301      	movs	r3, #1
    8646:	2105      	movs	r1, #5
    8648:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    864c:	3070      	adds	r0, #112	; 0x70
    864e:	f004 fef6 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8652:	b128      	cbz	r0, 8660 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x660>
    8654:	68a1      	ldr	r1, [r4, #8]
    8656:	2508      	movs	r5, #8
    8658:	2000      	movs	r0, #0
    865a:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    865e:	e002      	b.n	8666 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x666>
    8660:	2000      	movs	r0, #0
    8662:	f7fc fc4d 	bl	4f00 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    8666:	4628      	mov	r0, r5
    8668:	bd70      	pop	{r4, r5, r6, pc}
    866a:	0000      	.short	0x0000
    866c:	20000134 	.word	0x20000134
    8670:	200001ac 	.word	0x200001ac
    8674:	b570      	push	{r4, r5, r6, lr}
    8676:	4c2a      	ldr	r4, [pc, #168]	; (8720 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x720>)
    8678:	2000      	movs	r0, #0
    867a:	78a1      	ldrb	r1, [r4, #2]
    867c:	07c9      	lsls	r1, r1, #31
    867e:	d015      	beq.n	86ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ac>
    8680:	6920      	ldr	r0, [r4, #16]
    8682:	2301      	movs	r3, #1
    8684:	2105      	movs	r1, #5
    8686:	78c5      	ldrb	r5, [r0, #3]
    8688:	68a0      	ldr	r0, [r4, #8]
    868a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    868e:	3070      	adds	r0, #112	; 0x70
    8690:	f004 fed5 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8694:	b158      	cbz	r0, 86ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ae>
    8696:	1ead      	subs	r5, r5, #2
    8698:	2d0a      	cmp	r5, #10
    869a:	d206      	bcs.n	86aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6aa>
    869c:	e8df f005 	tbb	[pc, r5]
    86a0:	05050707 	.word	0x05050707
    86a4:	05050707 	.word	0x05050707
    86a8:	0707      	.short	0x0707
    86aa:	2008      	movs	r0, #8
    86ac:	bd70      	pop	{r4, r5, r6, pc}
    86ae:	6920      	ldr	r0, [r4, #16]
    86b0:	f7fd fc34 	bl	5f1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    86b4:	b138      	cbz	r0, 86c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c6>
    86b6:	6920      	ldr	r0, [r4, #16]
    86b8:	78c5      	ldrb	r5, [r0, #3]
    86ba:	b145      	cbz	r5, 86ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ce>
    86bc:	2d01      	cmp	r5, #1
    86be:	d006      	beq.n	86ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ce>
    86c0:	2d16      	cmp	r5, #22
    86c2:	d118      	bne.n	86f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f6>
    86c4:	e003      	b.n	86ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ce>
    86c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86ca:	f000 bd3d 	b.w	9148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1148>
    86ce:	68a0      	ldr	r0, [r4, #8]
    86d0:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    86d4:	f004 ff01 	bl	d4da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    86d8:	b168      	cbz	r0, 86f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f6>
    86da:	68a1      	ldr	r1, [r4, #8]
    86dc:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    86e0:	281f      	cmp	r0, #31
    86e2:	d008      	beq.n	86f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f6>
    86e4:	2820      	cmp	r0, #32
    86e6:	d003      	beq.n	86f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f0>
    86e8:	2d16      	cmp	r5, #22
    86ea:	d00c      	beq.n	8706 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x706>
    86ec:	2002      	movs	r0, #2
    86ee:	bd70      	pop	{r4, r5, r6, pc}
    86f0:	2026      	movs	r0, #38	; 0x26
    86f2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    86f6:	2d19      	cmp	r5, #25
    86f8:	d207      	bcs.n	870a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70a>
    86fa:	480a      	ldr	r0, [pc, #40]	; (8724 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x724>)
    86fc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8700:	b118      	cbz	r0, 870a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70a>
    8702:	4780      	blx	r0
    8704:	e003      	b.n	870e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70e>
    8706:	2020      	movs	r0, #32
    8708:	bd70      	pop	{r4, r5, r6, pc}
    870a:	f000 fd1d 	bl	9148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1148>
    870e:	68a2      	ldr	r2, [r4, #8]
    8710:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    8714:	1c49      	adds	r1, r1, #1
    8716:	f143 0300 	adc.w	r3, r3, #0
    871a:	e9c2 1300 	strd	r1, r3, [r2]
    871e:	bd70      	pop	{r4, r5, r6, pc}
    8720:	20000134 	.word	0x20000134
    8724:	20000148 	.word	0x20000148
    8728:	b570      	push	{r4, r5, r6, lr}
    872a:	4c22      	ldr	r4, [pc, #136]	; (87b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b4>)
    872c:	78a0      	ldrb	r0, [r4, #2]
    872e:	0700      	lsls	r0, r0, #28
    8730:	d53e      	bpl.n	87b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b0>
    8732:	68a0      	ldr	r0, [r4, #8]
    8734:	3070      	adds	r0, #112	; 0x70
    8736:	f006 fa2a 	bl	eb8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    873a:	b148      	cbz	r0, 8750 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x750>
    873c:	68a0      	ldr	r0, [r4, #8]
    873e:	21fe      	movs	r1, #254	; 0xfe
    8740:	2500      	movs	r5, #0
    8742:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8746:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    874a:	2919      	cmp	r1, #25
    874c:	d10c      	bne.n	8768 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x768>
    874e:	e004      	b.n	875a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x75a>
    8750:	f240 7157 	movw	r1, #1879	; 0x757
    8754:	2031      	movs	r0, #49	; 0x31
    8756:	f7fb fb79 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    875a:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    875e:	f7ff fd69 	bl	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    8762:	68a0      	ldr	r0, [r4, #8]
    8764:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8768:	68a0      	ldr	r0, [r4, #8]
    876a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    876e:	291f      	cmp	r1, #31
    8770:	d002      	beq.n	8778 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x778>
    8772:	2927      	cmp	r1, #39	; 0x27
    8774:	d113      	bne.n	879e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x79e>
    8776:	e00b      	b.n	8790 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x790>
    8778:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    877c:	f004 fead 	bl	d4da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8780:	b108      	cbz	r0, 8786 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x786>
    8782:	2026      	movs	r0, #38	; 0x26
    8784:	e000      	b.n	8788 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x788>
    8786:	2020      	movs	r0, #32
    8788:	68a1      	ldr	r1, [r4, #8]
    878a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    878e:	e006      	b.n	879e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x79e>
    8790:	2101      	movs	r1, #1
    8792:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    8796:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    879a:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    879e:	68a0      	ldr	r0, [r4, #8]
    87a0:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    87a4:	2908      	cmp	r1, #8
    87a6:	d103      	bne.n	87b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b0>
    87a8:	2102      	movs	r1, #2
    87aa:	7021      	strb	r1, [r4, #0]
    87ac:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    87b0:	bd70      	pop	{r4, r5, r6, pc}
    87b2:	0000      	.short	0x0000
    87b4:	20000134 	.word	0x20000134
    87b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    87ba:	4605      	mov	r5, r0
    87bc:	4668      	mov	r0, sp
    87be:	f7fc fa09 	bl	4bd4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    87c2:	b318      	cbz	r0, 880c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80c>
    87c4:	2222      	movs	r2, #34	; 0x22
    87c6:	2100      	movs	r1, #0
    87c8:	9800      	ldr	r0, [sp, #0]
    87ca:	f003 fc28 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    87ce:	2103      	movs	r1, #3
    87d0:	9800      	ldr	r0, [sp, #0]
    87d2:	f005 f902 	bl	d9da <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    87d6:	9800      	ldr	r0, [sp, #0]
    87d8:	7801      	ldrb	r1, [r0, #0]
    87da:	f021 0110 	bic.w	r1, r1, #16
    87de:	7001      	strb	r1, [r0, #0]
    87e0:	4629      	mov	r1, r5
    87e2:	f7fd fbc7 	bl	5f74 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    87e6:	2100      	movs	r1, #0
    87e8:	4c5f      	ldr	r4, [pc, #380]	; (8968 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x968>)
    87ea:	f644 162f 	movw	r6, #18735	; 0x492f
    87ee:	2d0e      	cmp	r5, #14
    87f0:	d07e      	beq.n	88f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f0>
    87f2:	dc0e      	bgt.n	8812 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x812>
    87f4:	f1a5 0502 	sub.w	r5, r5, #2
    87f8:	2d0c      	cmp	r5, #12
    87fa:	d21c      	bcs.n	8836 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x836>
    87fc:	e8df f005 	tbb	[pc, r5]
    8800:	aa491b1e 	.word	0xaa491b1e
    8804:	551b1eaa 	.word	0x551b1eaa
    8808:	3034aa1b 	.word	0x3034aa1b
    880c:	f640 1187 	movw	r1, #2439	; 0x987
    8810:	e0a6      	b.n	8960 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x960>
    8812:	2d15      	cmp	r5, #21
    8814:	d05c      	beq.n	88d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8d0>
    8816:	dc08      	bgt.n	882a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82a>
    8818:	2d11      	cmp	r5, #17
    881a:	d014      	beq.n	8846 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x846>
    881c:	2d12      	cmp	r5, #18
    881e:	d01e      	beq.n	885e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x85e>
    8820:	2d13      	cmp	r5, #19
    8822:	d01c      	beq.n	885e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x85e>
    8824:	2d14      	cmp	r5, #20
    8826:	d106      	bne.n	8836 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x836>
    8828:	e052      	b.n	88d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8d0>
    882a:	2d16      	cmp	r5, #22
    882c:	d027      	beq.n	887e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x87e>
    882e:	2d17      	cmp	r5, #23
    8830:	d069      	beq.n	8906 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x906>
    8832:	2dff      	cmp	r5, #255	; 0xff
    8834:	d072      	beq.n	891c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x91c>
    8836:	f640 11fd 	movw	r1, #2557	; 0x9fd
    883a:	e091      	b.n	8960 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x960>
    883c:	68a1      	ldr	r1, [r4, #8]
    883e:	9800      	ldr	r0, [sp, #0]
    8840:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    8844:	e00e      	b.n	8864 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x864>
    8846:	68a0      	ldr	r0, [r4, #8]
    8848:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    884c:	9800      	ldr	r0, [sp, #0]
    884e:	f005 f8a0 	bl	d992 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8852:	68a0      	ldr	r0, [r4, #8]
    8854:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    8858:	9800      	ldr	r0, [sp, #0]
    885a:	f005 f89c 	bl	d996 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    885e:	e079      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    8860:	9800      	ldr	r0, [sp, #0]
    8862:	2106      	movs	r1, #6
    8864:	7101      	strb	r1, [r0, #4]
    8866:	e075      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    8868:	9800      	ldr	r0, [sp, #0]
    886a:	220b      	movs	r2, #11
    886c:	7102      	strb	r2, [r0, #4]
    886e:	2259      	movs	r2, #89	; 0x59
    8870:	7142      	strb	r2, [r0, #5]
    8872:	7181      	strb	r1, [r0, #6]
    8874:	21fe      	movs	r1, #254	; 0xfe
    8876:	71c1      	strb	r1, [r0, #7]
    8878:	2112      	movs	r1, #18
    887a:	7201      	strb	r1, [r0, #8]
    887c:	e06a      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    887e:	9800      	ldr	r0, [sp, #0]
    8880:	f8d4 1008 	ldr.w	r1, [r4, #8]
    8884:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    8888:	7102      	strb	r2, [r0, #4]
    888a:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    888e:	7141      	strb	r1, [r0, #5]
    8890:	e060      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    8892:	68a1      	ldr	r1, [r4, #8]
    8894:	9800      	ldr	r0, [sp, #0]
    8896:	f501 718c 	add.w	r1, r1, #280	; 0x118
    889a:	f005 f88f 	bl	d9bc <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    889e:	68a1      	ldr	r1, [r4, #8]
    88a0:	9800      	ldr	r0, [sp, #0]
    88a2:	31e4      	adds	r1, #228	; 0xe4
    88a4:	f005 f887 	bl	d9b6 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    88a8:	e054      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    88aa:	9101      	str	r1, [sp, #4]
    88ac:	9102      	str	r1, [sp, #8]
    88ae:	f001 fe05 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    88b2:	68a1      	ldr	r1, [r4, #8]
    88b4:	4030      	ands	r0, r6
    88b6:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    88ba:	4001      	ands	r1, r0
    88bc:	f88d 1004 	strb.w	r1, [sp, #4]
    88c0:	0a00      	lsrs	r0, r0, #8
    88c2:	f88d 0005 	strb.w	r0, [sp, #5]
    88c6:	a901      	add	r1, sp, #4
    88c8:	9800      	ldr	r0, [sp, #0]
    88ca:	f005 f881 	bl	d9d0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    88ce:	e041      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    88d0:	68a0      	ldr	r0, [r4, #8]
    88d2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    88d6:	9800      	ldr	r0, [sp, #0]
    88d8:	f005 f887 	bl	d9ea <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    88dc:	68a0      	ldr	r0, [r4, #8]
    88de:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    88e2:	9800      	ldr	r0, [sp, #0]
    88e4:	f005 f885 	bl	d9f2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    88e8:	68a0      	ldr	r0, [r4, #8]
    88ea:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    88ee:	e000      	b.n	88f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f2>
    88f0:	e015      	b.n	891e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x91e>
    88f2:	9800      	ldr	r0, [sp, #0]
    88f4:	f005 f881 	bl	d9fa <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    88f8:	68a0      	ldr	r0, [r4, #8]
    88fa:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	f005 f87f 	bl	da02 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8904:	e026      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    8906:	68a1      	ldr	r1, [r4, #8]
    8908:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    890c:	2801      	cmp	r0, #1
    890e:	9800      	ldr	r0, [sp, #0]
    8910:	d0b8      	beq.n	8884 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x884>
    8912:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    8916:	7102      	strb	r2, [r0, #4]
    8918:	7849      	ldrb	r1, [r1, #1]
    891a:	e7b8      	b.n	888e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88e>
    891c:	e012      	b.n	8944 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x944>
    891e:	9101      	str	r1, [sp, #4]
    8920:	9102      	str	r1, [sp, #8]
    8922:	f001 fdcb 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8926:	68a1      	ldr	r1, [r4, #8]
    8928:	4030      	ands	r0, r6
    892a:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    892e:	4001      	ands	r1, r0
    8930:	f88d 1004 	strb.w	r1, [sp, #4]
    8934:	0a00      	lsrs	r0, r0, #8
    8936:	f88d 0005 	strb.w	r0, [sp, #5]
    893a:	a901      	add	r1, sp, #4
    893c:	9800      	ldr	r0, [sp, #0]
    893e:	f005 f842 	bl	d9c6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    8942:	e007      	b.n	8954 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x954>
    8944:	68a0      	ldr	r0, [r4, #8]
    8946:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    894a:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    894e:	9800      	ldr	r0, [sp, #0]
    8950:	f005 f823 	bl	d99a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    8954:	f7fc f918 	bl	4b88 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8958:	2800      	cmp	r0, #0
    895a:	d104      	bne.n	8966 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x966>
    895c:	f640 2101 	movw	r1, #2561	; 0xa01
    8960:	2031      	movs	r0, #49	; 0x31
    8962:	f7fb fa73 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8968:	20000134 	.word	0x20000134
    896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8970:	4c87      	ldr	r4, [pc, #540]	; (8b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb90>)
    8972:	4682      	mov	sl, r0
    8974:	4689      	mov	r9, r1
    8976:	68a0      	ldr	r0, [r4, #8]
    8978:	8800      	ldrh	r0, [r0, #0]
    897a:	f7fb fe97 	bl	46ac <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    897e:	0006      	movs	r6, r0
    8980:	d00a      	beq.n	8998 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x998>
    8982:	8860      	ldrh	r0, [r4, #2]
    8984:	f04f 0500 	mov.w	r5, #0
    8988:	05c0      	lsls	r0, r0, #23
    898a:	68a0      	ldr	r0, [r4, #8]
    898c:	d509      	bpl.n	89a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a2>
    898e:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    8992:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    8996:	e008      	b.n	89aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9aa>
    8998:	f640 51a7 	movw	r1, #3495	; 0xda7
    899c:	2031      	movs	r0, #49	; 0x31
    899e:	f7fb fa55 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89a2:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    89a6:	1c49      	adds	r1, r1, #1
    89a8:	8001      	strh	r1, [r0, #0]
    89aa:	f001 f8f3 	bl	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    89ae:	f04f 0801 	mov.w	r8, #1
    89b2:	b320      	cbz	r0, 89fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9fe>
    89b4:	8860      	ldrh	r0, [r4, #2]
    89b6:	0500      	lsls	r0, r0, #20
    89b8:	d506      	bpl.n	89c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c8>
    89ba:	68a0      	ldr	r0, [r4, #8]
    89bc:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    89c0:	b111      	cbz	r1, 89c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c8>
    89c2:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    89c6:	e01a      	b.n	89fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9fe>
    89c8:	68a0      	ldr	r0, [r4, #8]
    89ca:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    89ce:	1c49      	adds	r1, r1, #1
    89d0:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    89d4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    89d8:	428b      	cmp	r3, r1
    89da:	d301      	bcc.n	89e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e0>
    89dc:	1a5a      	subs	r2, r3, r1
    89de:	e000      	b.n	89e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e2>
    89e0:	2200      	movs	r2, #0
    89e2:	88a7      	ldrh	r7, [r4, #4]
    89e4:	1d7f      	adds	r7, r7, #5
    89e6:	42ba      	cmp	r2, r7
    89e8:	d801      	bhi.n	89ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ee>
    89ea:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    89ee:	4299      	cmp	r1, r3
    89f0:	d305      	bcc.n	89fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9fe>
    89f2:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    89f6:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    89fa:	f7fd fbb3 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    89fe:	8860      	ldrh	r0, [r4, #2]
    8a00:	f04f 0702 	mov.w	r7, #2
    8a04:	f410 7f40 	tst.w	r0, #768	; 0x300
    8a08:	d00e      	beq.n	8a28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa28>
    8a0a:	68a0      	ldr	r0, [r4, #8]
    8a0c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8a10:	b111      	cbz	r1, 8a18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa18>
    8a12:	2903      	cmp	r1, #3
    8a14:	d108      	bne.n	8a28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa28>
    8a16:	e002      	b.n	8a1e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa1e>
    8a18:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    8a1c:	e001      	b.n	8a22 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa22>
    8a1e:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8a22:	2101      	movs	r1, #1
    8a24:	f7fe fd7c 	bl	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8a28:	68a0      	ldr	r0, [r4, #8]
    8a2a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8a2e:	2901      	cmp	r1, #1
    8a30:	d104      	bne.n	8a3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa3c>
    8a32:	8861      	ldrh	r1, [r4, #2]
    8a34:	0549      	lsls	r1, r1, #21
    8a36:	d501      	bpl.n	8a3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa3c>
    8a38:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8a3c:	f1ba 0f00 	cmp.w	sl, #0
    8a40:	d176      	bne.n	8b30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb30>
    8a42:	78a1      	ldrb	r1, [r4, #2]
    8a44:	0649      	lsls	r1, r1, #25
    8a46:	d502      	bpl.n	8a4e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4e>
    8a48:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    8a4c:	e004      	b.n	8a58 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa58>
    8a4e:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    8a52:	1c49      	adds	r1, r1, #1
    8a54:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    8a58:	4648      	mov	r0, r9
    8a5a:	f7ff fdbb 	bl	85d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5d4>
    8a5e:	ea40 0009 	orr.w	r0, r0, r9
    8a62:	4681      	mov	r9, r0
    8a64:	f7ff fd20 	bl	84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    8a68:	68a7      	ldr	r7, [r4, #8]
    8a6a:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    8a6e:	1c40      	adds	r0, r0, #1
    8a70:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    8a74:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    8a78:	b128      	cbz	r0, 8a86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa86>
    8a7a:	f7fc faaf 	bl	4fdc <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    8a7e:	b1b0      	cbz	r0, 8aae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaae>
    8a80:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a84:	e013      	b.n	8aae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaae>
    8a86:	f7fc f927 	bl	4cd8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    8a8a:	b108      	cbz	r0, 8a90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa90>
    8a8c:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8a90:	f7fc f91c 	bl	4ccc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    8a94:	b158      	cbz	r0, 8aae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaae>
    8a96:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    8a9a:	1c40      	adds	r0, r0, #1
    8a9c:	b2c0      	uxtb	r0, r0
    8a9e:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    8aa2:	2802      	cmp	r0, #2
    8aa4:	d903      	bls.n	8aae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaae>
    8aa6:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    8aaa:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    8aae:	68a0      	ldr	r0, [r4, #8]
    8ab0:	2301      	movs	r3, #1
    8ab2:	2100      	movs	r1, #0
    8ab4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ab8:	3070      	adds	r0, #112	; 0x70
    8aba:	f004 fcc0 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8abe:	b920      	cbnz	r0, 8aca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaca>
    8ac0:	68a0      	ldr	r0, [r4, #8]
    8ac2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8ac6:	280c      	cmp	r0, #12
    8ac8:	d15e      	bne.n	8b88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb88>
    8aca:	68a0      	ldr	r0, [r4, #8]
    8acc:	2301      	movs	r3, #1
    8ace:	2100      	movs	r1, #0
    8ad0:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8ad4:	3070      	adds	r0, #112	; 0x70
    8ad6:	f004 fcb2 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ada:	b350      	cbz	r0, 8b32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb32>
    8adc:	68a0      	ldr	r0, [r4, #8]
    8ade:	2301      	movs	r3, #1
    8ae0:	2100      	movs	r1, #0
    8ae2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8ae6:	3070      	adds	r0, #112	; 0x70
    8ae8:	f004 fca9 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8aec:	b308      	cbz	r0, 8b32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb32>
    8aee:	68a0      	ldr	r0, [r4, #8]
    8af0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8af4:	2902      	cmp	r1, #2
    8af6:	d147      	bne.n	8b88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb88>
    8af8:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    8afc:	b9c8      	cbnz	r0, 8b32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb32>
    8afe:	4630      	mov	r0, r6
    8b00:	f003 ff79 	bl	c9f6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8b04:	b1a8      	cbz	r0, 8b32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb32>
    8b06:	68a0      	ldr	r0, [r4, #8]
    8b08:	3070      	adds	r0, #112	; 0x70
    8b0a:	f006 f840 	bl	eb8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b0e:	b980      	cbnz	r0, 8b32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb32>
    8b10:	68a1      	ldr	r1, [r4, #8]
    8b12:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8b16:	2801      	cmp	r0, #1
    8b18:	d936      	bls.n	8b88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb88>
    8b1a:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    8b1e:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    8b22:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    8b26:	1e93      	subs	r3, r2, #2
    8b28:	4298      	cmp	r0, r3
    8b2a:	db03      	blt.n	8b34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb34>
    8b2c:	2001      	movs	r0, #1
    8b2e:	e004      	b.n	8b3a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb3a>
    8b30:	e01c      	b.n	8b6c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6c>
    8b32:	e029      	b.n	8b88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb88>
    8b34:	1a10      	subs	r0, r2, r0
    8b36:	1e40      	subs	r0, r0, #1
    8b38:	b280      	uxth	r0, r0
    8b3a:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    8b3e:	88a3      	ldrh	r3, [r4, #4]
    8b40:	429a      	cmp	r2, r3
    8b42:	d301      	bcc.n	8b48 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb48>
    8b44:	2201      	movs	r2, #1
    8b46:	e002      	b.n	8b4e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4e>
    8b48:	1a9a      	subs	r2, r3, r2
    8b4a:	1c52      	adds	r2, r2, #1
    8b4c:	b292      	uxth	r2, r2
    8b4e:	4290      	cmp	r0, r2
    8b50:	d900      	bls.n	8b54 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb54>
    8b52:	4610      	mov	r0, r2
    8b54:	2801      	cmp	r0, #1
    8b56:	d101      	bne.n	8b5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb5c>
    8b58:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    8b5c:	68a1      	ldr	r1, [r4, #8]
    8b5e:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    8b62:	4410      	add	r0, r2
    8b64:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    8b68:	f001 f8de 	bl	9d28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d28>
    8b6c:	78a0      	ldrb	r0, [r4, #2]
    8b6e:	464a      	mov	r2, r9
    8b70:	f3c0 1180 	ubfx	r1, r0, #6, #1
    8b74:	4650      	mov	r0, sl
    8b76:	f001 f821 	bl	9bbc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bbc>
    8b7a:	68a0      	ldr	r0, [r4, #8]
    8b7c:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    8b80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b84:	f7fb bfea 	b.w	4b5c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    8b88:	2001      	movs	r0, #1
    8b8a:	68a1      	ldr	r1, [r4, #8]
    8b8c:	e7e4      	b.n	8b58 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb58>
    8b8e:	0000      	.short	0x0000
    8b90:	20000134 	.word	0x20000134
    8b94:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8b96:	4c58      	ldr	r4, [pc, #352]	; (8cf8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcf8>)
    8b98:	2301      	movs	r3, #1
    8b9a:	2100      	movs	r1, #0
    8b9c:	68a0      	ldr	r0, [r4, #8]
    8b9e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8ba2:	3070      	adds	r0, #112	; 0x70
    8ba4:	f004 fc4b 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ba8:	2800      	cmp	r0, #0
    8baa:	d07d      	beq.n	8ca8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca8>
    8bac:	68a0      	ldr	r0, [r4, #8]
    8bae:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    8bb2:	2500      	movs	r5, #0
    8bb4:	b139      	cbz	r1, 8bc6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc6>
    8bb6:	2100      	movs	r1, #0
    8bb8:	200e      	movs	r0, #14
    8bba:	f000 f89f 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    8bbe:	68a0      	ldr	r0, [r4, #8]
    8bc0:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    8bc4:	e095      	b.n	8cf2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcf2>
    8bc6:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    8bca:	b119      	cbz	r1, 8bd4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbd4>
    8bcc:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    8bd0:	0789      	lsls	r1, r1, #30
    8bd2:	d016      	beq.n	8c02 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc02>
    8bd4:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8bd8:	f88d 1004 	strb.w	r1, [sp, #4]
    8bdc:	9901      	ldr	r1, [sp, #4]
    8bde:	9101      	str	r1, [sp, #4]
    8be0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8be4:	b141      	cbz	r1, 8bf8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbf8>
    8be6:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    8bea:	f88d 1000 	strb.w	r1, [sp]
    8bee:	9900      	ldr	r1, [sp, #0]
    8bf0:	9100      	str	r1, [sp, #0]
    8bf2:	f89d 1000 	ldrb.w	r1, [sp]
    8bf6:	b189      	cbz	r1, 8c1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc1c>
    8bf8:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8bfc:	2901      	cmp	r1, #1
    8bfe:	d02f      	beq.n	8c60 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc60>
    8c00:	e071      	b.n	8ce6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce6>
    8c02:	2100      	movs	r1, #0
    8c04:	200c      	movs	r0, #12
    8c06:	f000 f879 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    8c0a:	68a0      	ldr	r0, [r4, #8]
    8c0c:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8c10:	f041 0101 	orr.w	r1, r1, #1
    8c14:	7001      	strb	r1, [r0, #0]
    8c16:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8c1a:	e06a      	b.n	8cf2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcf2>
    8c1c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c20:	2924      	cmp	r1, #36	; 0x24
    8c22:	d01b      	beq.n	8c5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc5c>
    8c24:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8c28:	2924      	cmp	r1, #36	; 0x24
    8c2a:	d017      	beq.n	8c5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc5c>
    8c2c:	f05f 0300 	movs.w	r3, #0
    8c30:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8c34:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8c38:	f005 f82d 	bl	dc96 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8c3c:	68a0      	ldr	r0, [r4, #8]
    8c3e:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    8c42:	2100      	movs	r1, #0
    8c44:	2014      	movs	r0, #20
    8c46:	f000 f859 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    8c4a:	68a1      	ldr	r1, [r4, #8]
    8c4c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8c50:	8bc2      	ldrh	r2, [r0, #30]
    8c52:	f821 2fee 	strh.w	r2, [r1, #238]!
    8c56:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8c58:	8048      	strh	r0, [r1, #2]
    8c5a:	e04a      	b.n	8cf2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcf2>
    8c5c:	2301      	movs	r3, #1
    8c5e:	e7e7      	b.n	8c30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc30>
    8c60:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    8c64:	f88d 1000 	strb.w	r1, [sp]
    8c68:	9900      	ldr	r1, [sp, #0]
    8c6a:	9100      	str	r1, [sp, #0]
    8c6c:	f89d 1000 	ldrb.w	r1, [sp]
    8c70:	bb31      	cbnz	r1, 8cc0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc0>
    8c72:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8c76:	2301      	movs	r3, #1
    8c78:	210b      	movs	r1, #11
    8c7a:	3070      	adds	r0, #112	; 0x70
    8c7c:	f004 fbdf 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c80:	b9f0      	cbnz	r0, 8cc0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc0>
    8c82:	68a0      	ldr	r0, [r4, #8]
    8c84:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    8c88:	f005 ff89 	bl	eb9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8c8c:	4605      	mov	r5, r0
    8c8e:	68a0      	ldr	r0, [r4, #8]
    8c90:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8c94:	f005 ff83 	bl	eb9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8c98:	4606      	mov	r6, r0
    8c9a:	68a0      	ldr	r0, [r4, #8]
    8c9c:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8ca0:	4628      	mov	r0, r5
    8ca2:	f005 ff87 	bl	ebb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8ca6:	e000      	b.n	8caa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcaa>
    8ca8:	e01e      	b.n	8ce8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce8>
    8caa:	b150      	cbz	r0, 8cc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc2>
    8cac:	68a0      	ldr	r0, [r4, #8]
    8cae:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    8cb2:	4630      	mov	r0, r6
    8cb4:	f005 ff7e 	bl	ebb4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8cb8:	b118      	cbz	r0, 8cc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc2>
    8cba:	2000      	movs	r0, #0
    8cbc:	f000 f91c 	bl	8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    8cc0:	e011      	b.n	8ce6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce6>
    8cc2:	68a0      	ldr	r0, [r4, #8]
    8cc4:	2301      	movs	r3, #1
    8cc6:	2103      	movs	r1, #3
    8cc8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ccc:	3070      	adds	r0, #112	; 0x70
    8cce:	f004 fbb6 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8cd2:	b940      	cbnz	r0, 8ce6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce6>
    8cd4:	68a0      	ldr	r0, [r4, #8]
    8cd6:	2301      	movs	r3, #1
    8cd8:	2102      	movs	r1, #2
    8cda:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8cde:	3070      	adds	r0, #112	; 0x70
    8ce0:	f004 fbad 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ce4:	b108      	cbz	r0, 8cea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcea>
    8ce6:	2000      	movs	r0, #0
    8ce8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8cea:	2100      	movs	r1, #0
    8cec:	2016      	movs	r0, #22
    8cee:	f000 f805 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    8cf2:	2001      	movs	r0, #1
    8cf4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8cf6:	0000      	.short	0x0000
    8cf8:	20000134 	.word	0x20000134
    8cfc:	b570      	push	{r4, r5, r6, lr}
    8cfe:	4c0d      	ldr	r4, [pc, #52]	; (8d34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd34>)
    8d00:	4606      	mov	r6, r0
    8d02:	460d      	mov	r5, r1
    8d04:	68a0      	ldr	r0, [r4, #8]
    8d06:	3070      	adds	r0, #112	; 0x70
    8d08:	f005 ff41 	bl	eb8e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8d0c:	b120      	cbz	r0, 8d18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd18>
    8d0e:	f640 2114 	movw	r1, #2580	; 0xa14
    8d12:	2031      	movs	r0, #49	; 0x31
    8d14:	f7fb f89a 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d18:	68a2      	ldr	r2, [r4, #8]
    8d1a:	2000      	movs	r0, #0
    8d1c:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    8d20:	b115      	cbz	r5, 8d28 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd28>
    8d22:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    8d26:	bd70      	pop	{r4, r5, r6, pc}
    8d28:	f822 0faa 	strh.w	r0, [r2, #170]!
    8d2c:	2001      	movs	r0, #1
    8d2e:	7110      	strb	r0, [r2, #4]
    8d30:	bd70      	pop	{r4, r5, r6, pc}
    8d32:	0000      	.short	0x0000
    8d34:	20000134 	.word	0x20000134
    8d38:	b570      	push	{r4, r5, r6, lr}
    8d3a:	4d1a      	ldr	r5, [pc, #104]	; (8da4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda4>)
    8d3c:	2600      	movs	r6, #0
    8d3e:	68ac      	ldr	r4, [r5, #8]
    8d40:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    8d44:	2801      	cmp	r0, #1
    8d46:	d00a      	beq.n	8d5e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd5e>
    8d48:	2802      	cmp	r0, #2
    8d4a:	d129      	bne.n	8da0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda0>
    8d4c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8d50:	2106      	movs	r1, #6
    8d52:	b1a0      	cbz	r0, 8d7e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd7e>
    8d54:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    8d58:	2101      	movs	r1, #1
    8d5a:	2002      	movs	r0, #2
    8d5c:	e01b      	b.n	8d96 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd96>
    8d5e:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8d62:	2800      	cmp	r0, #0
    8d64:	d11c      	bne.n	8da0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xda0>
    8d66:	2200      	movs	r2, #0
    8d68:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    8d6c:	f504 7188 	add.w	r1, r4, #272	; 0x110
    8d70:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    8d74:	f004 fb1b 	bl	d3ae <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8d78:	2101      	movs	r1, #1
    8d7a:	2005      	movs	r0, #5
    8d7c:	e00b      	b.n	8d96 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd96>
    8d7e:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    8d82:	0740      	lsls	r0, r0, #29
    8d84:	d505      	bpl.n	8d92 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd92>
    8d86:	2011      	movs	r0, #17
    8d88:	2203      	movs	r2, #3
    8d8a:	f804 2fee 	strb.w	r2, [r4, #238]!
    8d8e:	7061      	strb	r1, [r4, #1]
    8d90:	e000      	b.n	8d94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd94>
    8d92:	200d      	movs	r0, #13
    8d94:	2101      	movs	r1, #1
    8d96:	f7ff ffb1 	bl	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    8d9a:	68a8      	ldr	r0, [r5, #8]
    8d9c:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    8da0:	bd70      	pop	{r4, r5, r6, pc}
    8da2:	0000      	.short	0x0000
    8da4:	20000134 	.word	0x20000134
    8da8:	b570      	push	{r4, r5, r6, lr}
    8daa:	4a2b      	ldr	r2, [pc, #172]	; (8e58 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe58>)
    8dac:	4603      	mov	r3, r0
    8dae:	8850      	ldrh	r0, [r2, #2]
    8db0:	4318      	orrs	r0, r3
    8db2:	8050      	strh	r0, [r2, #2]
    8db4:	4610      	mov	r0, r2
    8db6:	2b40      	cmp	r3, #64	; 0x40
    8db8:	6880      	ldr	r0, [r0, #8]
    8dba:	d00d      	beq.n	8dd8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdd8>
    8dbc:	079e      	lsls	r6, r3, #30
    8dbe:	f04f 0500 	mov.w	r5, #0
    8dc2:	f04f 0401 	mov.w	r4, #1
    8dc6:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8dca:	d50c      	bpl.n	8de6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde6>
    8dcc:	b14e      	cbz	r6, 8de2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xde2>
    8dce:	f640 5114 	movw	r1, #3348	; 0xd14
    8dd2:	2031      	movs	r0, #49	; 0x31
    8dd4:	f7fb f83a 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8ddc:	2104      	movs	r1, #4
    8dde:	f7fe bb9f 	b.w	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8de2:	60d1      	str	r1, [r2, #12]
    8de4:	e01c      	b.n	8e20 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe20>
    8de6:	b1c6      	cbz	r6, 8e1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe1a>
    8de8:	6111      	str	r1, [r2, #16]
    8dea:	78c9      	ldrb	r1, [r1, #3]
    8dec:	2906      	cmp	r1, #6
    8dee:	d002      	beq.n	8df6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdf6>
    8df0:	290b      	cmp	r1, #11
    8df2:	d112      	bne.n	8e1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe1a>
    8df4:	e009      	b.n	8e0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0a>
    8df6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8dfa:	2917      	cmp	r1, #23
    8dfc:	d10d      	bne.n	8e1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe1a>
    8dfe:	2100      	movs	r1, #0
    8e00:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    8e04:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8e08:	e007      	b.n	8e1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe1a>
    8e0a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e0e:	2911      	cmp	r1, #17
    8e10:	d103      	bne.n	8e1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe1a>
    8e12:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    8e16:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    8e1a:	0799      	lsls	r1, r3, #30
    8e1c:	d516      	bpl.n	8e4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4c>
    8e1e:	68d1      	ldr	r1, [r2, #12]
    8e20:	78c9      	ldrb	r1, [r1, #3]
    8e22:	2905      	cmp	r1, #5
    8e24:	d002      	beq.n	8e2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2c>
    8e26:	290b      	cmp	r1, #11
    8e28:	d110      	bne.n	8e4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4c>
    8e2a:	e009      	b.n	8e40 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe40>
    8e2c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e30:	2915      	cmp	r1, #21
    8e32:	d10b      	bne.n	8e4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4c>
    8e34:	2100      	movs	r1, #0
    8e36:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    8e3a:	f800 4c45 	strb.w	r4, [r0, #-69]
    8e3e:	e005      	b.n	8e4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4c>
    8e40:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8e44:	2910      	cmp	r1, #16
    8e46:	d101      	bne.n	8e4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4c>
    8e48:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    8e4c:	0698      	lsls	r0, r3, #26
    8e4e:	d501      	bpl.n	8e54 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe54>
    8e50:	2008      	movs	r0, #8
    8e52:	7050      	strb	r0, [r2, #1]
    8e54:	bd70      	pop	{r4, r5, r6, pc}
    8e56:	0000      	.short	0x0000
    8e58:	20000134 	.word	0x20000134
    8e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e60:	4c24      	ldr	r4, [pc, #144]	; (8ef4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef4>)
    8e62:	2501      	movs	r5, #1
    8e64:	68a2      	ldr	r2, [r4, #8]
    8e66:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    8e6a:	b108      	cbz	r0, 8e70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe70>
    8e6c:	2701      	movs	r7, #1
    8e6e:	e000      	b.n	8e72 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe72>
    8e70:	2700      	movs	r7, #0
    8e72:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    8e76:	b109      	cbz	r1, 8e7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe7c>
    8e78:	2601      	movs	r6, #1
    8e7a:	e000      	b.n	8e7e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe7e>
    8e7c:	2600      	movs	r6, #0
    8e7e:	b90f      	cbnz	r7, 8e84 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe84>
    8e80:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    8e84:	b90e      	cbnz	r6, 8e8a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8a>
    8e86:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    8e8a:	f102 0362 	add.w	r3, r2, #98	; 0x62
    8e8e:	7218      	strb	r0, [r3, #8]
    8e90:	7259      	strb	r1, [r3, #9]
    8e92:	2001      	movs	r0, #1
    8e94:	7298      	strb	r0, [r3, #10]
    8e96:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    8e9a:	2801      	cmp	r0, #1
    8e9c:	d001      	beq.n	8ea2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea2>
    8e9e:	b907      	cbnz	r7, 8ea2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea2>
    8ea0:	b116      	cbz	r6, 8ea8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea8>
    8ea2:	2000      	movs	r0, #0
    8ea4:	f000 f828 	bl	8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    8ea8:	68a0      	ldr	r0, [r4, #8]
    8eaa:	302c      	adds	r0, #44	; 0x2c
    8eac:	f004 ff62 	bl	dd74 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8eb0:	4606      	mov	r6, r0
    8eb2:	68a0      	ldr	r0, [r4, #8]
    8eb4:	f004 ff0a 	bl	dccc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8eb8:	b1c0      	cbz	r0, 8eec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xeec>
    8eba:	68a0      	ldr	r0, [r4, #8]
    8ebc:	302c      	adds	r0, #44	; 0x2c
    8ebe:	f004 ff59 	bl	dd74 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8ec2:	68a1      	ldr	r1, [r4, #8]
    8ec4:	4607      	mov	r7, r0
    8ec6:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8eca:	8808      	ldrh	r0, [r1, #0]
    8ecc:	312c      	adds	r1, #44	; 0x2c
    8ece:	f004 febe 	bl	dc4e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8ed2:	42be      	cmp	r6, r7
    8ed4:	d20a      	bcs.n	8eec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xeec>
    8ed6:	f7f8 fb79 	bl	15cc <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    8eda:	4601      	mov	r1, r0
    8edc:	1bb8      	subs	r0, r7, r6
    8ede:	2865      	cmp	r0, #101	; 0x65
    8ee0:	d200      	bcs.n	8ee4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee4>
    8ee2:	2065      	movs	r0, #101	; 0x65
    8ee4:	f7f8 fab0 	bl	1448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8ee8:	b100      	cbz	r0, 8eec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xeec>
    8eea:	2500      	movs	r5, #0
    8eec:	4628      	mov	r0, r5
    8eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ef2:	0000      	.short	0x0000
    8ef4:	20000134 	.word	0x20000134
    8ef8:	b510      	push	{r4, lr}
    8efa:	4c10      	ldr	r4, [pc, #64]	; (8f3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf3c>)
    8efc:	68a1      	ldr	r1, [r4, #8]
    8efe:	880a      	ldrh	r2, [r1, #0]
    8f00:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    8f04:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    8f08:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    8f0c:	f005 fe47 	bl	eb9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8f10:	68a1      	ldr	r1, [r4, #8]
    8f12:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    8f16:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    8f1a:	f005 fe40 	bl	eb9e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8f1e:	68a2      	ldr	r2, [r4, #8]
    8f20:	f202 2102 	addw	r1, r2, #514	; 0x202
    8f24:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    8f28:	2001      	movs	r0, #1
    8f2a:	7008      	strb	r0, [r1, #0]
    8f2c:	2000      	movs	r0, #0
    8f2e:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    8f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f36:	f7fd b915 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f3a:	0000      	.short	0x0000
    8f3c:	20000134 	.word	0x20000134
    8f40:	b510      	push	{r4, lr}
    8f42:	4c15      	ldr	r4, [pc, #84]	; (8f98 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf98>)
    8f44:	2301      	movs	r3, #1
    8f46:	2100      	movs	r1, #0
    8f48:	68a0      	ldr	r0, [r4, #8]
    8f4a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8f4e:	3070      	adds	r0, #112	; 0x70
    8f50:	f004 fa75 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f54:	b190      	cbz	r0, 8f7c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf7c>
    8f56:	6920      	ldr	r0, [r4, #16]
    8f58:	f004 fcb8 	bl	d8cc <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8f5c:	68a1      	ldr	r1, [r4, #8]
    8f5e:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8f62:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8f66:	f005 fe33 	bl	ebd0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8f6a:	b148      	cbz	r0, 8f80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf80>
    8f6c:	68a0      	ldr	r0, [r4, #8]
    8f6e:	2128      	movs	r1, #40	; 0x28
    8f70:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8f74:	3076      	adds	r0, #118	; 0x76
    8f76:	2101      	movs	r1, #1
    8f78:	7781      	strb	r1, [r0, #30]
    8f7a:	e00b      	b.n	8f94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf94>
    8f7c:	2001      	movs	r0, #1
    8f7e:	bd10      	pop	{r4, pc}
    8f80:	68a1      	ldr	r1, [r4, #8]
    8f82:	6920      	ldr	r0, [r4, #16]
    8f84:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    8f88:	f004 fc9b 	bl	d8c2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8f8c:	68a1      	ldr	r1, [r4, #8]
    8f8e:	200b      	movs	r0, #11
    8f90:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8f94:	2000      	movs	r0, #0
    8f96:	bd10      	pop	{r4, pc}
    8f98:	20000134 	.word	0x20000134
    8f9c:	b570      	push	{r4, r5, r6, lr}
    8f9e:	4c29      	ldr	r4, [pc, #164]	; (9044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1044>)
    8fa0:	2301      	movs	r3, #1
    8fa2:	2100      	movs	r1, #0
    8fa4:	68a0      	ldr	r0, [r4, #8]
    8fa6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8faa:	3070      	adds	r0, #112	; 0x70
    8fac:	f004 fa47 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fb0:	b1b8      	cbz	r0, 8fe2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe2>
    8fb2:	2100      	movs	r1, #0
    8fb4:	6920      	ldr	r0, [r4, #16]
    8fb6:	f004 fc5c 	bl	d872 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8fba:	b1a0      	cbz	r0, 8fe6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfe6>
    8fbc:	6920      	ldr	r0, [r4, #16]
    8fbe:	68a1      	ldr	r1, [r4, #8]
    8fc0:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8fc4:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8fc8:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8fcc:	f005 fe00 	bl	ebd0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8fd0:	b168      	cbz	r0, 8fee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfee>
    8fd2:	68a0      	ldr	r0, [r4, #8]
    8fd4:	2128      	movs	r1, #40	; 0x28
    8fd6:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8fda:	3076      	adds	r0, #118	; 0x76
    8fdc:	2101      	movs	r1, #1
    8fde:	7781      	strb	r1, [r0, #30]
    8fe0:	e02e      	b.n	9040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1040>
    8fe2:	2001      	movs	r0, #1
    8fe4:	bd70      	pop	{r4, r5, r6, pc}
    8fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fea:	f000 b8ad 	b.w	9148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1148>
    8fee:	6920      	ldr	r0, [r4, #16]
    8ff0:	f004 fc6f 	bl	d8d2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8ff4:	f004 fa06 	bl	d404 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8ff8:	4605      	mov	r5, r0
    8ffa:	68a0      	ldr	r0, [r4, #8]
    8ffc:	4629      	mov	r1, r5
    8ffe:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    9002:	6920      	ldr	r0, [r4, #16]
    9004:	7900      	ldrb	r0, [r0, #4]
    9006:	f004 fb88 	bl	d71a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    900a:	68a1      	ldr	r1, [r4, #8]
    900c:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    9010:	6920      	ldr	r0, [r4, #16]
    9012:	4629      	mov	r1, r5
    9014:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9018:	f004 fb7b 	bl	d712 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    901c:	68a1      	ldr	r1, [r4, #8]
    901e:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    9022:	6920      	ldr	r0, [r4, #16]
    9024:	f004 fc58 	bl	d8d8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9028:	68a1      	ldr	r1, [r4, #8]
    902a:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    902e:	6920      	ldr	r0, [r4, #16]
    9030:	f004 fc55 	bl	d8de <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9034:	68a1      	ldr	r1, [r4, #8]
    9036:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    903a:	200d      	movs	r0, #13
    903c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9040:	2000      	movs	r0, #0
    9042:	bd70      	pop	{r4, r5, r6, pc}
    9044:	20000134 	.word	0x20000134
    9048:	b538      	push	{r3, r4, r5, lr}
    904a:	4c29      	ldr	r4, [pc, #164]	; (90f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f0>)
    904c:	2301      	movs	r3, #1
    904e:	2100      	movs	r1, #0
    9050:	68a0      	ldr	r0, [r4, #8]
    9052:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9056:	3070      	adds	r0, #112	; 0x70
    9058:	f004 f9f1 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    905c:	b970      	cbnz	r0, 907c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x107c>
    905e:	68a0      	ldr	r0, [r4, #8]
    9060:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9064:	2a12      	cmp	r2, #18
    9066:	d009      	beq.n	907c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x107c>
    9068:	2301      	movs	r3, #1
    906a:	2105      	movs	r1, #5
    906c:	3070      	adds	r0, #112	; 0x70
    906e:	f004 f9e6 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9072:	b108      	cbz	r0, 9078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1078>
    9074:	2008      	movs	r0, #8
    9076:	bd38      	pop	{r3, r4, r5, pc}
    9078:	2001      	movs	r0, #1
    907a:	bd38      	pop	{r3, r4, r5, pc}
    907c:	68a0      	ldr	r0, [r4, #8]
    907e:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    9082:	b908      	cbnz	r0, 9088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1088>
    9084:	f7ff f8ca 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    9088:	68a1      	ldr	r1, [r4, #8]
    908a:	6920      	ldr	r0, [r4, #16]
    908c:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9090:	f004 fc34 	bl	d8fc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9094:	68a1      	ldr	r1, [r4, #8]
    9096:	6920      	ldr	r0, [r4, #16]
    9098:	31e0      	adds	r1, #224	; 0xe0
    909a:	f004 fc26 	bl	d8ea <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    909e:	68a1      	ldr	r1, [r4, #8]
    90a0:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    90a4:	f88d 0000 	strb.w	r0, [sp]
    90a8:	9800      	ldr	r0, [sp, #0]
    90aa:	9000      	str	r0, [sp, #0]
    90ac:	f89d 0000 	ldrb.w	r0, [sp]
    90b0:	b120      	cbz	r0, 90bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10bc>
    90b2:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    90b6:	2031      	movs	r0, #49	; 0x31
    90b8:	f7fa fec8 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90bc:	8808      	ldrh	r0, [r1, #0]
    90be:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    90c2:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    90c6:	6920      	ldr	r0, [r4, #16]
    90c8:	f004 fc13 	bl	d8f2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    90cc:	68a1      	ldr	r1, [r4, #8]
    90ce:	6920      	ldr	r0, [r4, #16]
    90d0:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    90d4:	f004 fc06 	bl	d8e4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    90d8:	68a0      	ldr	r0, [r4, #8]
    90da:	4601      	mov	r1, r0
    90dc:	2201      	movs	r2, #1
    90de:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    90e2:	2014      	movs	r0, #20
    90e4:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    90e8:	f7fd f83c 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90ec:	2000      	movs	r0, #0
    90ee:	bd38      	pop	{r3, r4, r5, pc}
    90f0:	20000134 	.word	0x20000134
    90f4:	b51c      	push	{r2, r3, r4, lr}
    90f6:	4c13      	ldr	r4, [pc, #76]	; (9144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1144>)
    90f8:	68a0      	ldr	r0, [r4, #8]
    90fa:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    90fe:	07c0      	lsls	r0, r0, #31
    9100:	d001      	beq.n	9106 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1106>
    9102:	2001      	movs	r0, #1
    9104:	bd1c      	pop	{r2, r3, r4, pc}
    9106:	4669      	mov	r1, sp
    9108:	6920      	ldr	r0, [r4, #16]
    910a:	f004 fbfd 	bl	d908 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    910e:	f001 f9d5 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9112:	f644 112f 	movw	r1, #18735	; 0x492f
    9116:	4008      	ands	r0, r1
    9118:	f89d 2000 	ldrb.w	r2, [sp]
    911c:	68a1      	ldr	r1, [r4, #8]
    911e:	4002      	ands	r2, r0
    9120:	f801 2fbc 	strb.w	r2, [r1, #188]!
    9124:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9128:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    912c:	7048      	strb	r0, [r1, #1]
    912e:	f7ff f875 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    9132:	68a0      	ldr	r0, [r4, #8]
    9134:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9138:	f041 0101 	orr.w	r1, r1, #1
    913c:	7001      	strb	r1, [r0, #0]
    913e:	2000      	movs	r0, #0
    9140:	bd1c      	pop	{r2, r3, r4, pc}
    9142:	0000      	.short	0x0000
    9144:	20000134 	.word	0x20000134
    9148:	4a0a      	ldr	r2, [pc, #40]	; (9174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1174>)
    914a:	b510      	push	{r4, lr}
    914c:	6890      	ldr	r0, [r2, #8]
    914e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9152:	070b      	lsls	r3, r1, #28
    9154:	d501      	bpl.n	915a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x115a>
    9156:	2001      	movs	r0, #1
    9158:	bd10      	pop	{r4, pc}
    915a:	f041 0108 	orr.w	r1, r1, #8
    915e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9162:	6911      	ldr	r1, [r2, #16]
    9164:	78c9      	ldrb	r1, [r1, #3]
    9166:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    916a:	f7ff f857 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    916e:	2000      	movs	r0, #0
    9170:	bd10      	pop	{r4, pc}
    9172:	0000      	.short	0x0000
    9174:	20000134 	.word	0x20000134
    9178:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    917c:	4c34      	ldr	r4, [pc, #208]	; (9250 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1250>)
    917e:	68a0      	ldr	r0, [r4, #8]
    9180:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9184:	f010 0f30 	tst.w	r0, #48	; 0x30
    9188:	d002      	beq.n	9190 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1190>
    918a:	2001      	movs	r0, #1
    918c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9190:	6920      	ldr	r0, [r4, #16]
    9192:	f004 fbd4 	bl	d93e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9196:	b318      	cbz	r0, 91e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11e0>
    9198:	6920      	ldr	r0, [r4, #16]
    919a:	f004 fbc2 	bl	d922 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    919e:	4607      	mov	r7, r0
    91a0:	6920      	ldr	r0, [r4, #16]
    91a2:	f004 fbc2 	bl	d92a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    91a6:	4606      	mov	r6, r0
    91a8:	6920      	ldr	r0, [r4, #16]
    91aa:	f004 fbb8 	bl	d91e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    91ae:	4605      	mov	r5, r0
    91b0:	6920      	ldr	r0, [r4, #16]
    91b2:	f004 fbb8 	bl	d926 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    91b6:	4601      	mov	r1, r0
    91b8:	9700      	str	r7, [sp, #0]
    91ba:	68a0      	ldr	r0, [r4, #8]
    91bc:	4633      	mov	r3, r6
    91be:	462a      	mov	r2, r5
    91c0:	302c      	adds	r0, #44	; 0x2c
    91c2:	f004 fe11 	bl	dde8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    91c6:	78a0      	ldrb	r0, [r4, #2]
    91c8:	0780      	lsls	r0, r0, #30
    91ca:	d503      	bpl.n	91d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11d4>
    91cc:	68e0      	ldr	r0, [r4, #12]
    91ce:	78c0      	ldrb	r0, [r0, #3]
    91d0:	2814      	cmp	r0, #20
    91d2:	d009      	beq.n	91e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11e8>
    91d4:	68a0      	ldr	r0, [r4, #8]
    91d6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    91da:	281c      	cmp	r0, #28
    91dc:	d004      	beq.n	91e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11e8>
    91de:	e007      	b.n	91f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11f0>
    91e0:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    91e4:	f7ff bfb0 	b.w	9148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1148>
    91e8:	68a1      	ldr	r1, [r4, #8]
    91ea:	2001      	movs	r0, #1
    91ec:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    91f0:	68a1      	ldr	r1, [r4, #8]
    91f2:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    91f6:	2801      	cmp	r0, #1
    91f8:	d011      	beq.n	921e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x121e>
    91fa:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    91fe:	f88d 0004 	strb.w	r0, [sp, #4]
    9202:	9801      	ldr	r0, [sp, #4]
    9204:	9001      	str	r0, [sp, #4]
    9206:	f89d 0004 	ldrb.w	r0, [sp, #4]
    920a:	b940      	cbnz	r0, 921e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x121e>
    920c:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    9210:	f88d 0000 	strb.w	r0, [sp]
    9214:	9800      	ldr	r0, [sp, #0]
    9216:	9000      	str	r0, [sp, #0]
    9218:	f89d 0000 	ldrb.w	r0, [sp]
    921c:	b128      	cbz	r0, 922a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x122a>
    921e:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    9222:	f040 0010 	orr.w	r0, r0, #16
    9226:	7008      	strb	r0, [r1, #0]
    9228:	e00d      	b.n	9246 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1246>
    922a:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    922e:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    9232:	f040 0020 	orr.w	r0, r0, #32
    9236:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    923a:	f831 0b2c 	ldrh.w	r0, [r1], #44
    923e:	f004 fdda 	bl	ddf6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9242:	f7fc ff8f 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9246:	f7fe ffe9 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    924a:	2000      	movs	r0, #0
    924c:	e79e      	b.n	918c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118c>
    924e:	0000      	.short	0x0000
    9250:	20000134 	.word	0x20000134
    9254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9256:	4c1a      	ldr	r4, [pc, #104]	; (92c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c0>)
    9258:	2301      	movs	r3, #1
    925a:	210a      	movs	r1, #10
    925c:	68a0      	ldr	r0, [r4, #8]
    925e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9262:	3070      	adds	r0, #112	; 0x70
    9264:	f004 f8eb 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9268:	b338      	cbz	r0, 92ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ba>
    926a:	6920      	ldr	r0, [r4, #16]
    926c:	f004 fb67 	bl	d93e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9270:	b1c8      	cbz	r0, 92a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12a6>
    9272:	6920      	ldr	r0, [r4, #16]
    9274:	f004 fb55 	bl	d922 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9278:	4607      	mov	r7, r0
    927a:	6920      	ldr	r0, [r4, #16]
    927c:	f004 fb55 	bl	d92a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9280:	4606      	mov	r6, r0
    9282:	6920      	ldr	r0, [r4, #16]
    9284:	f004 fb4b 	bl	d91e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9288:	4605      	mov	r5, r0
    928a:	6920      	ldr	r0, [r4, #16]
    928c:	f004 fb4b 	bl	d926 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9290:	4601      	mov	r1, r0
    9292:	9700      	str	r7, [sp, #0]
    9294:	68a0      	ldr	r0, [r4, #8]
    9296:	4633      	mov	r3, r6
    9298:	462a      	mov	r2, r5
    929a:	302c      	adds	r0, #44	; 0x2c
    929c:	f004 fda4 	bl	dde8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    92a0:	68a0      	ldr	r0, [r4, #8]
    92a2:	f004 fd13 	bl	dccc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    92a6:	68a1      	ldr	r1, [r4, #8]
    92a8:	2000      	movs	r0, #0
    92aa:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    92ae:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    92b2:	f7ff f977 	bl	85a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>
    92b6:	2000      	movs	r0, #0
    92b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92ba:	2001      	movs	r0, #1
    92bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92be:	0000      	.short	0x0000
    92c0:	20000134 	.word	0x20000134
    92c4:	b510      	push	{r4, lr}
    92c6:	4c09      	ldr	r4, [pc, #36]	; (92ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12ec>)
    92c8:	68a0      	ldr	r0, [r4, #8]
    92ca:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    92ce:	0740      	lsls	r0, r0, #29
    92d0:	d501      	bpl.n	92d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12d6>
    92d2:	2001      	movs	r0, #1
    92d4:	bd10      	pop	{r4, pc}
    92d6:	f7fe ffa1 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    92da:	68a0      	ldr	r0, [r4, #8]
    92dc:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    92e0:	f041 0104 	orr.w	r1, r1, #4
    92e4:	7001      	strb	r1, [r0, #0]
    92e6:	2000      	movs	r0, #0
    92e8:	bd10      	pop	{r4, pc}
    92ea:	0000      	.short	0x0000
    92ec:	20000134 	.word	0x20000134
    92f0:	b510      	push	{r4, lr}
    92f2:	4c09      	ldr	r4, [pc, #36]	; (9318 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1318>)
    92f4:	2301      	movs	r3, #1
    92f6:	2109      	movs	r1, #9
    92f8:	68a0      	ldr	r0, [r4, #8]
    92fa:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    92fe:	3070      	adds	r0, #112	; 0x70
    9300:	f004 f89d 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9304:	2800      	cmp	r0, #0
    9306:	d006      	beq.n	9316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1316>
    9308:	68a1      	ldr	r1, [r4, #8]
    930a:	2000      	movs	r0, #0
    930c:	f801 0fa2 	strb.w	r0, [r1, #162]!
    9310:	7308      	strb	r0, [r1, #12]
    9312:	f801 0c25 	strb.w	r0, [r1, #-37]
    9316:	bd10      	pop	{r4, pc}
    9318:	20000134 	.word	0x20000134
    931c:	b510      	push	{r4, lr}
    931e:	4c0f      	ldr	r4, [pc, #60]	; (935c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x135c>)
    9320:	2301      	movs	r3, #1
    9322:	2100      	movs	r1, #0
    9324:	68a0      	ldr	r0, [r4, #8]
    9326:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    932a:	3070      	adds	r0, #112	; 0x70
    932c:	f004 f887 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9330:	b138      	cbz	r0, 9342 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1342>
    9332:	f7fe ff73 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    9336:	68a1      	ldr	r1, [r4, #8]
    9338:	2010      	movs	r0, #16
    933a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    933e:	2000      	movs	r0, #0
    9340:	bd10      	pop	{r4, pc}
    9342:	68a0      	ldr	r0, [r4, #8]
    9344:	2301      	movs	r3, #1
    9346:	2105      	movs	r1, #5
    9348:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    934c:	3070      	adds	r0, #112	; 0x70
    934e:	f004 f876 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9352:	b108      	cbz	r0, 9358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1358>
    9354:	2008      	movs	r0, #8
    9356:	bd10      	pop	{r4, pc}
    9358:	2001      	movs	r0, #1
    935a:	bd10      	pop	{r4, pc}
    935c:	20000134 	.word	0x20000134
    9360:	4806      	ldr	r0, [pc, #24]	; (937c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x137c>)
    9362:	6880      	ldr	r0, [r0, #8]
    9364:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9368:	2911      	cmp	r1, #17
    936a:	d001      	beq.n	9370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1370>
    936c:	2002      	movs	r0, #2
    936e:	4770      	bx	lr
    9370:	2112      	movs	r1, #18
    9372:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9376:	2000      	movs	r0, #0
    9378:	4770      	bx	lr
    937a:	0000      	.short	0x0000
    937c:	20000134 	.word	0x20000134
    9380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9382:	4c34      	ldr	r4, [pc, #208]	; (9454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1454>)
    9384:	2301      	movs	r3, #1
    9386:	210b      	movs	r1, #11
    9388:	68a0      	ldr	r0, [r4, #8]
    938a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    938e:	3070      	adds	r0, #112	; 0x70
    9390:	f004 f855 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9394:	bb78      	cbnz	r0, 93f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13f6>
    9396:	68a0      	ldr	r0, [r4, #8]
    9398:	2301      	movs	r3, #1
    939a:	2100      	movs	r1, #0
    939c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    93a0:	3070      	adds	r0, #112	; 0x70
    93a2:	f004 f84c 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93a6:	b320      	cbz	r0, 93f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13f2>
    93a8:	68a0      	ldr	r0, [r4, #8]
    93aa:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    93ae:	2824      	cmp	r0, #36	; 0x24
    93b0:	d022      	beq.n	93f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13f8>
    93b2:	6920      	ldr	r0, [r4, #16]
    93b4:	f004 fadf 	bl	d976 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    93b8:	b300      	cbz	r0, 93fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13fc>
    93ba:	68a0      	ldr	r0, [r4, #8]
    93bc:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    93c0:	f041 0104 	orr.w	r1, r1, #4
    93c4:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    93c8:	6921      	ldr	r1, [r4, #16]
    93ca:	794a      	ldrb	r2, [r1, #5]
    93cc:	f002 0207 	and.w	r2, r2, #7
    93d0:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    93d4:	7909      	ldrb	r1, [r1, #4]
    93d6:	f001 0107 	and.w	r1, r1, #7
    93da:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    93de:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    93e2:	f88d 3000 	strb.w	r3, [sp]
    93e6:	9b00      	ldr	r3, [sp, #0]
    93e8:	9300      	str	r3, [sp, #0]
    93ea:	f89d 3000 	ldrb.w	r3, [sp]
    93ee:	bb43      	cbnz	r3, 9442 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1442>
    93f0:	e008      	b.n	9404 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1404>
    93f2:	2001      	movs	r0, #1
    93f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93f6:	e7ff      	b.n	93f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13f8>
    93f8:	2020      	movs	r0, #32
    93fa:	e7fb      	b.n	93f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13f4>
    93fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9400:	f7ff bea2 	b.w	9148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1148>
    9404:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    9408:	2b01      	cmp	r3, #1
    940a:	d01a      	beq.n	9442 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1442>
    940c:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9410:	2501      	movs	r5, #1
    9412:	785e      	ldrb	r6, [r3, #1]
    9414:	428e      	cmp	r6, r1
    9416:	d106      	bne.n	9426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1426>
    9418:	7819      	ldrb	r1, [r3, #0]
    941a:	4291      	cmp	r1, r2
    941c:	d103      	bne.n	9426 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1426>
    941e:	2102      	movs	r1, #2
    9420:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    9424:	e00d      	b.n	9442 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1442>
    9426:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    942a:	8802      	ldrh	r2, [r0, #0]
    942c:	f821 2902 	strh.w	r2, [r1], #-2
    9430:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9434:	710a      	strb	r2, [r1, #4]
    9436:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    943a:	7148      	strb	r0, [r1, #5]
    943c:	700d      	strb	r5, [r1, #0]
    943e:	f7fc fe91 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9442:	68a1      	ldr	r1, [r4, #8]
    9444:	2021      	movs	r0, #33	; 0x21
    9446:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    944a:	f7fe fee7 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    944e:	2000      	movs	r0, #0
    9450:	e7d0      	b.n	93f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13f4>
    9452:	0000      	.short	0x0000
    9454:	20000134 	.word	0x20000134
    9458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    945c:	4c4e      	ldr	r4, [pc, #312]	; (9598 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1598>)
    945e:	68a0      	ldr	r0, [r4, #8]
    9460:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9464:	2920      	cmp	r1, #32
    9466:	d009      	beq.n	947c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x147c>
    9468:	f05f 0700 	movs.w	r7, #0
    946c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9470:	2922      	cmp	r1, #34	; 0x22
    9472:	d005      	beq.n	9480 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1480>
    9474:	b387      	cbz	r7, 94d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14d8>
    9476:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    947a:	e003      	b.n	9484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1484>
    947c:	2701      	movs	r7, #1
    947e:	e7f5      	b.n	946c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146c>
    9480:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    9484:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    9488:	f041 0104 	orr.w	r1, r1, #4
    948c:	7001      	strb	r1, [r0, #0]
    948e:	6920      	ldr	r0, [r4, #16]
    9490:	f7fc fd54 	bl	5f3c <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9494:	f04f 0801 	mov.w	r8, #1
    9498:	2600      	movs	r6, #0
    949a:	b308      	cbz	r0, 94e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e0>
    949c:	4639      	mov	r1, r7
    949e:	6920      	ldr	r0, [r4, #16]
    94a0:	f7fe ff86 	bl	83b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3b0>
    94a4:	b1e0      	cbz	r0, 94e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e0>
    94a6:	466a      	mov	r2, sp
    94a8:	6921      	ldr	r1, [r4, #16]
    94aa:	68a0      	ldr	r0, [r4, #8]
    94ac:	f004 f8eb 	bl	d686 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    94b0:	b388      	cbz	r0, 9516 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1516>
    94b2:	6920      	ldr	r0, [r4, #16]
    94b4:	f004 fa3b 	bl	d92e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    94b8:	68a1      	ldr	r1, [r4, #8]
    94ba:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    94be:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    94c2:	f005 fb85 	bl	ebd0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    94c6:	b338      	cbz	r0, 9518 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1518>
    94c8:	68a0      	ldr	r0, [r4, #8]
    94ca:	2128      	movs	r1, #40	; 0x28
    94cc:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    94d0:	3076      	adds	r0, #118	; 0x76
    94d2:	f880 801e 	strb.w	r8, [r0, #30]
    94d6:	e053      	b.n	9580 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1580>
    94d8:	e7ff      	b.n	94da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14da>
    94da:	2002      	movs	r0, #2
    94dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    94e0:	68a0      	ldr	r0, [r4, #8]
    94e2:	f04f 0900 	mov.w	r9, #0
    94e6:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    94ea:	2901      	cmp	r1, #1
    94ec:	d015      	beq.n	951a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x151a>
    94ee:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    94f2:	b1f7      	cbz	r7, 9532 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1532>
    94f4:	6920      	ldr	r0, [r4, #16]
    94f6:	68a1      	ldr	r1, [r4, #8]
    94f8:	78c0      	ldrb	r0, [r0, #3]
    94fa:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    94fe:	fa08 f200 	lsl.w	r2, r8, r0
    9502:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9506:	b160      	cbz	r0, 9522 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1522>
    9508:	200a      	movs	r0, #10
    950a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    950e:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    9512:	b9a0      	cbnz	r0, 953e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x153e>
    9514:	e008      	b.n	9528 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1528>
    9516:	e014      	b.n	9542 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1542>
    9518:	e027      	b.n	956a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x156a>
    951a:	201e      	movs	r0, #30
    951c:	f7ff fcec 	bl	8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    9520:	e7e7      	b.n	94f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14f2>
    9522:	f240 31cb 	movw	r1, #971	; 0x3cb
    9526:	e001      	b.n	952c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x152c>
    9528:	f240 31d3 	movw	r1, #979	; 0x3d3
    952c:	2031      	movs	r0, #49	; 0x31
    952e:	f7fa fc8d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9532:	702e      	strb	r6, [r5, #0]
    9534:	f7fe fe7e 	bl	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    9538:	f7ff fe06 	bl	9148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1148>
    953c:	4681      	mov	r9, r0
    953e:	4648      	mov	r0, r9
    9540:	e7cc      	b.n	94dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14dc>
    9542:	68a0      	ldr	r0, [r4, #8]
    9544:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9548:	2901      	cmp	r1, #1
    954a:	d009      	beq.n	9560 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1560>
    954c:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    9550:	68a0      	ldr	r0, [r4, #8]
    9552:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9556:	428d      	cmp	r5, r1
    9558:	d112      	bne.n	9580 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1580>
    955a:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    955e:	e00f      	b.n	9580 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1580>
    9560:	2000      	movs	r0, #0
    9562:	f7ff fcc9 	bl	8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    9566:	702e      	strb	r6, [r5, #0]
    9568:	e7f2      	b.n	9550 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1550>
    956a:	68a0      	ldr	r0, [r4, #8]
    956c:	f89d 1000 	ldrb.w	r1, [sp]
    9570:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    9574:	f89d 1001 	ldrb.w	r1, [sp, #1]
    9578:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    957c:	2024      	movs	r0, #36	; 0x24
    957e:	7028      	strb	r0, [r5, #0]
    9580:	68a0      	ldr	r0, [r4, #8]
    9582:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9586:	428d      	cmp	r5, r1
    9588:	d102      	bne.n	9590 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1590>
    958a:	f7fe fe53 	bl	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    958e:	e001      	b.n	9594 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1594>
    9590:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    9594:	2000      	movs	r0, #0
    9596:	e7a1      	b.n	94dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14dc>
    9598:	20000134 	.word	0x20000134
    959c:	b510      	push	{r4, lr}
    959e:	4c0a      	ldr	r4, [pc, #40]	; (95c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c8>)
    95a0:	68a0      	ldr	r0, [r4, #8]
    95a2:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    95a6:	f041 0104 	orr.w	r1, r1, #4
    95aa:	7001      	strb	r1, [r0, #0]
    95ac:	6920      	ldr	r0, [r4, #16]
    95ae:	f004 f9ec 	bl	d98a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    95b2:	2816      	cmp	r0, #22
    95b4:	d001      	beq.n	95ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15ba>
    95b6:	2000      	movs	r0, #0
    95b8:	bd10      	pop	{r4, pc}
    95ba:	6920      	ldr	r0, [r4, #16]
    95bc:	f004 f9e7 	bl	d98e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    95c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95c4:	f7fe be08 	b.w	81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    95c8:	20000134 	.word	0x20000134
    95cc:	4802      	ldr	r0, [pc, #8]	; (95d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15d8>)
    95ce:	6900      	ldr	r0, [r0, #16]
    95d0:	7900      	ldrb	r0, [r0, #4]
    95d2:	f7fe be01 	b.w	81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>
    95d6:	0000      	.short	0x0000
    95d8:	20000134 	.word	0x20000134
    95dc:	b510      	push	{r4, lr}
    95de:	4c08      	ldr	r4, [pc, #32]	; (9600 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1600>)
    95e0:	68a0      	ldr	r0, [r4, #8]
    95e2:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    95e6:	2817      	cmp	r0, #23
    95e8:	d001      	beq.n	95ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15ee>
    95ea:	2002      	movs	r0, #2
    95ec:	bd10      	pop	{r4, pc}
    95ee:	f7fe fe21 	bl	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    95f2:	68a1      	ldr	r1, [r4, #8]
    95f4:	201b      	movs	r0, #27
    95f6:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    95fa:	2000      	movs	r0, #0
    95fc:	bd10      	pop	{r4, pc}
    95fe:	0000      	.short	0x0000
    9600:	20000134 	.word	0x20000134
    9604:	b510      	push	{r4, lr}
    9606:	4c0b      	ldr	r4, [pc, #44]	; (9634 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1634>)
    9608:	2301      	movs	r3, #1
    960a:	4619      	mov	r1, r3
    960c:	68a0      	ldr	r0, [r4, #8]
    960e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9612:	3070      	adds	r0, #112	; 0x70
    9614:	f003 ff13 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9618:	b108      	cbz	r0, 961e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x161e>
    961a:	2000      	movs	r0, #0
    961c:	bd10      	pop	{r4, pc}
    961e:	6920      	ldr	r0, [r4, #16]
    9620:	f004 f989 	bl	d936 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9624:	68a1      	ldr	r1, [r4, #8]
    9626:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    962a:	2007      	movs	r0, #7
    962c:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9630:	e7f3      	b.n	961a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x161a>
    9632:	0000      	.short	0x0000
    9634:	20000134 	.word	0x20000134
    9638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    963c:	4d37      	ldr	r5, [pc, #220]	; (971c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x171c>)
    963e:	2600      	movs	r6, #0
    9640:	4628      	mov	r0, r5
    9642:	68a9      	ldr	r1, [r5, #8]
    9644:	6900      	ldr	r0, [r0, #16]
    9646:	2701      	movs	r7, #1
    9648:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    964c:	7900      	ldrb	r0, [r0, #4]
    964e:	2b0e      	cmp	r3, #14
    9650:	d101      	bne.n	9656 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1656>
    9652:	2812      	cmp	r0, #18
    9654:	d006      	beq.n	9664 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1664>
    9656:	4a31      	ldr	r2, [pc, #196]	; (971c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x171c>)
    9658:	2400      	movs	r4, #0
    965a:	6892      	ldr	r2, [r2, #8]
    965c:	32bc      	adds	r2, #188	; 0xbc
    965e:	2b1c      	cmp	r3, #28
    9660:	d004      	beq.n	966c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166c>
    9662:	e005      	b.n	9670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1670>
    9664:	f7ff fe44 	bl	92f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12f0>
    9668:	4606      	mov	r6, r0
    966a:	e053      	b.n	9714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1714>
    966c:	2814      	cmp	r0, #20
    966e:	d002      	beq.n	9676 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1676>
    9670:	2b04      	cmp	r3, #4
    9672:	d00b      	beq.n	968c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168c>
    9674:	e00c      	b.n	9690 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1690>
    9676:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    967a:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    967e:	2105      	movs	r1, #5
    9680:	4610      	mov	r0, r2
    9682:	f005 fa36 	bl	eaf2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    9686:	f7fe ff8d 	bl	85a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a4>
    968a:	e043      	b.n	9714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1714>
    968c:	280e      	cmp	r0, #14
    968e:	d002      	beq.n	9696 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1696>
    9690:	2b20      	cmp	r3, #32
    9692:	d00f      	beq.n	96b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16b4>
    9694:	e010      	b.n	96b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16b8>
    9696:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    969a:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    969e:	8808      	ldrh	r0, [r1, #0]
    96a0:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    96a4:	201a      	movs	r0, #26
    96a6:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    96aa:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    96ae:	f7fc fd59 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    96b2:	e02f      	b.n	9714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1714>
    96b4:	2816      	cmp	r0, #22
    96b6:	d006      	beq.n	96c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c6>
    96b8:	2b26      	cmp	r3, #38	; 0x26
    96ba:	d101      	bne.n	96c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c0>
    96bc:	2816      	cmp	r0, #22
    96be:	d002      	beq.n	96c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c6>
    96c0:	2817      	cmp	r0, #23
    96c2:	d014      	beq.n	96ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16ee>
    96c4:	e026      	b.n	9714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1714>
    96c6:	f801 4f7d 	strb.w	r4, [r1, #125]!
    96ca:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    96ce:	7848      	ldrb	r0, [r1, #1]
    96d0:	2821      	cmp	r0, #33	; 0x21
    96d2:	d01f      	beq.n	9714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1714>
    96d4:	2108      	movs	r1, #8
    96d6:	4610      	mov	r0, r2
    96d8:	f005 fa0b 	bl	eaf2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    96dc:	68a8      	ldr	r0, [r5, #8]
    96de:	210b      	movs	r1, #11
    96e0:	30bc      	adds	r0, #188	; 0xbc
    96e2:	f005 fa06 	bl	eaf2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    96e6:	201a      	movs	r0, #26
    96e8:	f7ff fc06 	bl	8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    96ec:	e012      	b.n	9714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1714>
    96ee:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    96f2:	2822      	cmp	r0, #34	; 0x22
    96f4:	d10e      	bne.n	9714 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1714>
    96f6:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    96fa:	f7fe fd9b 	bl	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    96fe:	68a8      	ldr	r0, [r5, #8]
    9700:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    9704:	2801      	cmp	r0, #1
    9706:	d102      	bne.n	970e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170e>
    9708:	2000      	movs	r0, #0
    970a:	f7ff fbf5 	bl	8ef8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xef8>
    970e:	68a8      	ldr	r0, [r5, #8]
    9710:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    9714:	4630      	mov	r0, r6
    9716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    971a:	0000      	.short	0x0000
    971c:	20000134 	.word	0x20000134
    9720:	b570      	push	{r4, r5, r6, lr}
    9722:	4c2c      	ldr	r4, [pc, #176]	; (97d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17d4>)
    9724:	68a0      	ldr	r0, [r4, #8]
    9726:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    972a:	0789      	lsls	r1, r1, #30
    972c:	d507      	bpl.n	973e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x173e>
    972e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9732:	2301      	movs	r3, #1
    9734:	2108      	movs	r1, #8
    9736:	3070      	adds	r0, #112	; 0x70
    9738:	f003 fe81 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    973c:	b1e8      	cbz	r0, 977a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x177a>
    973e:	68a0      	ldr	r0, [r4, #8]
    9740:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    9744:	0780      	lsls	r0, r0, #30
    9746:	d412      	bmi.n	976e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x176e>
    9748:	6920      	ldr	r0, [r4, #16]
    974a:	f004 f8f6 	bl	d93a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    974e:	68a1      	ldr	r1, [r4, #8]
    9750:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    9754:	6920      	ldr	r0, [r4, #16]
    9756:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    975a:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    975e:	8840      	ldrh	r0, [r0, #2]
    9760:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    9764:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    9768:	f040 0002 	orr.w	r0, r0, #2
    976c:	7008      	strb	r0, [r1, #0]
    976e:	68a0      	ldr	r0, [r4, #8]
    9770:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9774:	07c9      	lsls	r1, r1, #31
    9776:	d002      	beq.n	977e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x177e>
    9778:	e010      	b.n	979c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x179c>
    977a:	2001      	movs	r0, #1
    977c:	bd70      	pop	{r4, r5, r6, pc}
    977e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9782:	078a      	lsls	r2, r1, #30
    9784:	d504      	bpl.n	9790 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1790>
    9786:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    978a:	2031      	movs	r0, #49	; 0x31
    978c:	f7fa fb5e 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9790:	f041 0102 	orr.w	r1, r1, #2
    9794:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9798:	f7fe fd40 	bl	821c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x21c>
    979c:	68a0      	ldr	r0, [r4, #8]
    979e:	2500      	movs	r5, #0
    97a0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    97a4:	2906      	cmp	r1, #6
    97a6:	d105      	bne.n	97b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17b4>
    97a8:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    97ac:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    97b0:	f7fc fcd8 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    97b4:	68a0      	ldr	r0, [r4, #8]
    97b6:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    97ba:	b149      	cbz	r1, 97d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17d0>
    97bc:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    97c0:	f7fc fcd0 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    97c4:	68a0      	ldr	r0, [r4, #8]
    97c6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    97ca:	b909      	cbnz	r1, 97d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17d0>
    97cc:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    97d0:	2000      	movs	r0, #0
    97d2:	bd70      	pop	{r4, r5, r6, pc}
    97d4:	20000134 	.word	0x20000134
    97d8:	b510      	push	{r4, lr}
    97da:	4c1f      	ldr	r4, [pc, #124]	; (9858 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1858>)
    97dc:	68a3      	ldr	r3, [r4, #8]
    97de:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    97e2:	2808      	cmp	r0, #8
    97e4:	d20e      	bcs.n	9804 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1804>
    97e6:	f100 0208 	add.w	r2, r0, #8
    97ea:	f1c0 0008 	rsb	r0, r0, #8
    97ee:	b2c1      	uxtb	r1, r0
    97f0:	1898      	adds	r0, r3, r2
    97f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    97f6:	f7fa fbb5 	bl	3f64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    97fa:	68a1      	ldr	r1, [r4, #8]
    97fc:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    9800:	4410      	add	r0, r2
    9802:	7008      	strb	r0, [r1, #0]
    9804:	68a3      	ldr	r3, [r4, #8]
    9806:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    980a:	3808      	subs	r0, #8
    980c:	2804      	cmp	r0, #4
    980e:	d20c      	bcs.n	982a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182a>
    9810:	1d02      	adds	r2, r0, #4
    9812:	f1c0 0004 	rsb	r0, r0, #4
    9816:	b2c1      	uxtb	r1, r0
    9818:	1898      	adds	r0, r3, r2
    981a:	30e0      	adds	r0, #224	; 0xe0
    981c:	f7fa fba2 	bl	3f64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9820:	68a1      	ldr	r1, [r4, #8]
    9822:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    9826:	4410      	add	r0, r2
    9828:	7008      	strb	r0, [r1, #0]
    982a:	68a0      	ldr	r0, [r4, #8]
    982c:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    9830:	290c      	cmp	r1, #12
    9832:	d30f      	bcc.n	9854 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1854>
    9834:	d005      	beq.n	9842 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1842>
    9836:	f240 71bf 	movw	r1, #1983	; 0x7bf
    983a:	f04f 0031 	mov.w	r0, #49	; 0x31
    983e:	f7fa fb05 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9842:	2100      	movs	r1, #0
    9844:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    9848:	2101      	movs	r1, #1
    984a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    984e:	2004      	movs	r0, #4
    9850:	f7ff ba54 	b.w	8cfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcfc>
    9854:	bd10      	pop	{r4, pc}
    9856:	0000      	.short	0x0000
    9858:	20000134 	.word	0x20000134
    985c:	4804      	ldr	r0, [pc, #16]	; (9870 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1870>)
    985e:	2127      	movs	r1, #39	; 0x27
    9860:	6880      	ldr	r0, [r0, #8]
    9862:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9866:	2100      	movs	r1, #0
    9868:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    986c:	4770      	bx	lr
    986e:	0000      	.short	0x0000
    9870:	20000134 	.word	0x20000134
    9874:	4809      	ldr	r0, [pc, #36]	; (989c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x189c>)
    9876:	b510      	push	{r4, lr}
    9878:	6880      	ldr	r0, [r0, #8]
    987a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    987e:	2914      	cmp	r1, #20
    9880:	d004      	beq.n	988c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188c>
    9882:	f240 619a 	movw	r1, #1690	; 0x69a
    9886:	2031      	movs	r0, #49	; 0x31
    9888:	f7fa fae0 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    988c:	2101      	movs	r1, #1
    988e:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    9892:	2115      	movs	r1, #21
    9894:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9898:	bd10      	pop	{r4, pc}
    989a:	0000      	.short	0x0000
    989c:	20000134 	.word	0x20000134
    98a0:	b510      	push	{r4, lr}
    98a2:	4c0a      	ldr	r4, [pc, #40]	; (98cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18cc>)
    98a4:	68a0      	ldr	r0, [r4, #8]
    98a6:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    98aa:	07c0      	lsls	r0, r0, #31
    98ac:	d008      	beq.n	98c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c0>
    98ae:	f7fe fcc1 	bl	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    98b2:	68a0      	ldr	r0, [r4, #8]
    98b4:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    98b8:	f021 0101 	bic.w	r1, r1, #1
    98bc:	7001      	strb	r1, [r0, #0]
    98be:	bd10      	pop	{r4, pc}
    98c0:	f240 6183 	movw	r1, #1667	; 0x683
    98c4:	2031      	movs	r0, #49	; 0x31
    98c6:	f7fa fac1 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98ca:	0000      	.short	0x0000
    98cc:	20000134 	.word	0x20000134
    98d0:	b510      	push	{r4, lr}
    98d2:	4c0a      	ldr	r4, [pc, #40]	; (98fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18fc>)
    98d4:	2301      	movs	r3, #1
    98d6:	2100      	movs	r1, #0
    98d8:	68a0      	ldr	r0, [r4, #8]
    98da:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    98de:	3070      	adds	r0, #112	; 0x70
    98e0:	f003 fdad 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98e4:	b120      	cbz	r0, 98f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18f0>
    98e6:	68a1      	ldr	r1, [r4, #8]
    98e8:	201c      	movs	r0, #28
    98ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    98ee:	bd10      	pop	{r4, pc}
    98f0:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    98f4:	2031      	movs	r0, #49	; 0x31
    98f6:	f7fa faa9 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98fa:	0000      	.short	0x0000
    98fc:	20000134 	.word	0x20000134
    9900:	480a      	ldr	r0, [pc, #40]	; (992c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x192c>)
    9902:	b510      	push	{r4, lr}
    9904:	6880      	ldr	r0, [r0, #8]
    9906:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    990a:	f3c1 1201 	ubfx	r2, r1, #4, #2
    990e:	2a01      	cmp	r2, #1
    9910:	d004      	beq.n	991c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x191c>
    9912:	f240 710f 	movw	r1, #1807	; 0x70f
    9916:	2031      	movs	r0, #49	; 0x31
    9918:	f7fa fa98 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    991c:	f021 0110 	bic.w	r1, r1, #16
    9920:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9928:	f7fe bc84 	b.w	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    992c:	20000134 	.word	0x20000134
    9930:	b510      	push	{r4, lr}
    9932:	4c0a      	ldr	r4, [pc, #40]	; (995c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x195c>)
    9934:	2301      	movs	r3, #1
    9936:	2100      	movs	r1, #0
    9938:	68a0      	ldr	r0, [r4, #8]
    993a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    993e:	3070      	adds	r0, #112	; 0x70
    9940:	f003 fd7d 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9944:	b120      	cbz	r0, 9950 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1950>
    9946:	68a1      	ldr	r1, [r4, #8]
    9948:	200e      	movs	r0, #14
    994a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    994e:	bd10      	pop	{r4, pc}
    9950:	f240 61fb 	movw	r1, #1787	; 0x6fb
    9954:	2031      	movs	r0, #49	; 0x31
    9956:	f7fa fa79 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    995a:	0000      	.short	0x0000
    995c:	20000134 	.word	0x20000134
    9960:	4804      	ldr	r0, [pc, #16]	; (9974 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1974>)
    9962:	6880      	ldr	r0, [r0, #8]
    9964:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9968:	f021 0104 	bic.w	r1, r1, #4
    996c:	7001      	strb	r1, [r0, #0]
    996e:	f7fe bc61 	b.w	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    9972:	0000      	.short	0x0000
    9974:	20000134 	.word	0x20000134
    9978:	4809      	ldr	r0, [pc, #36]	; (99a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a0>)
    997a:	b510      	push	{r4, lr}
    997c:	6880      	ldr	r0, [r0, #8]
    997e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9982:	2910      	cmp	r1, #16
    9984:	d004      	beq.n	9990 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1990>
    9986:	f240 6192 	movw	r1, #1682	; 0x692
    998a:	2031      	movs	r0, #49	; 0x31
    998c:	f7fa fa5e 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9990:	2101      	movs	r1, #1
    9992:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    9996:	2111      	movs	r1, #17
    9998:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    999c:	bd10      	pop	{r4, pc}
    999e:	0000      	.short	0x0000
    99a0:	20000134 	.word	0x20000134
    99a4:	b510      	push	{r4, lr}
    99a6:	4c0a      	ldr	r4, [pc, #40]	; (99d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19d0>)
    99a8:	2301      	movs	r3, #1
    99aa:	2100      	movs	r1, #0
    99ac:	68a0      	ldr	r0, [r4, #8]
    99ae:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    99b2:	3070      	adds	r0, #112	; 0x70
    99b4:	f003 fd43 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99b8:	b120      	cbz	r0, 99c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c4>
    99ba:	68a1      	ldr	r1, [r4, #8]
    99bc:	201f      	movs	r0, #31
    99be:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    99c2:	bd10      	pop	{r4, pc}
    99c4:	f240 711b 	movw	r1, #1819	; 0x71b
    99c8:	2031      	movs	r0, #49	; 0x31
    99ca:	f7fa fa3f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ce:	0000      	.short	0x0000
    99d0:	20000134 	.word	0x20000134
    99d4:	4808      	ldr	r0, [pc, #32]	; (99f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19f8>)
    99d6:	b510      	push	{r4, lr}
    99d8:	6880      	ldr	r0, [r0, #8]
    99da:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    99de:	2921      	cmp	r1, #33	; 0x21
    99e0:	d005      	beq.n	99ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19ee>
    99e2:	b121      	cbz	r1, 99ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19ee>
    99e4:	f240 7122 	movw	r1, #1826	; 0x722
    99e8:	2031      	movs	r0, #49	; 0x31
    99ea:	f7fa fa2f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ee:	2122      	movs	r1, #34	; 0x22
    99f0:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    99f4:	bd10      	pop	{r4, pc}
    99f6:	0000      	.short	0x0000
    99f8:	20000134 	.word	0x20000134
    99fc:	4807      	ldr	r0, [pc, #28]	; (9a1c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a1c>)
    99fe:	b510      	push	{r4, lr}
    9a00:	6880      	ldr	r0, [r0, #8]
    9a02:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a06:	2915      	cmp	r1, #21
    9a08:	d004      	beq.n	9a14 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a14>
    9a0a:	f240 61a7 	movw	r1, #1703	; 0x6a7
    9a0e:	2031      	movs	r0, #49	; 0x31
    9a10:	f7fa fa1c 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a14:	2119      	movs	r1, #25
    9a16:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9a1a:	bd10      	pop	{r4, pc}
    9a1c:	20000134 	.word	0x20000134
    9a20:	4807      	ldr	r0, [pc, #28]	; (9a40 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a40>)
    9a22:	b510      	push	{r4, lr}
    9a24:	6880      	ldr	r0, [r0, #8]
    9a26:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a2a:	2915      	cmp	r1, #21
    9a2c:	d004      	beq.n	9a38 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a38>
    9a2e:	f240 61a1 	movw	r1, #1697	; 0x6a1
    9a32:	2031      	movs	r0, #49	; 0x31
    9a34:	f7fa fa0a 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a38:	2117      	movs	r1, #23
    9a3a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9a3e:	bd10      	pop	{r4, pc}
    9a40:	20000134 	.word	0x20000134
    9a44:	b570      	push	{r4, r5, r6, lr}
    9a46:	4d1b      	ldr	r5, [pc, #108]	; (9ab4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ab4>)
    9a48:	68a8      	ldr	r0, [r5, #8]
    9a4a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a4e:	291b      	cmp	r1, #27
    9a50:	d002      	beq.n	9a58 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a58>
    9a52:	f240 61c1 	movw	r1, #1729	; 0x6c1
    9a56:	e007      	b.n	9a68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a68>
    9a58:	2400      	movs	r4, #0
    9a5a:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    9a5e:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    9a62:	b121      	cbz	r1, 9a6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6e>
    9a64:	f240 61c5 	movw	r1, #1733	; 0x6c5
    9a68:	2031      	movs	r0, #49	; 0x31
    9a6a:	f7fa f9ef 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9a6e:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9a72:	b141      	cbz	r1, 9a86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a86>
    9a74:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9a78:	8801      	ldrh	r1, [r0, #0]
    9a7a:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9a7e:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9a82:	210c      	movs	r1, #12
    9a84:	e008      	b.n	9a98 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a98>
    9a86:	8801      	ldrh	r1, [r0, #0]
    9a88:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    9a8c:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    9a90:	2101      	movs	r1, #1
    9a92:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    9a96:	210b      	movs	r1, #11
    9a98:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    9a9c:	8800      	ldrh	r0, [r0, #0]
    9a9e:	f7fa fdef 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9aa2:	f003 f941 	bl	cd28 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    9aa6:	f7fc fb5d 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9aaa:	68a8      	ldr	r0, [r5, #8]
    9aac:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    9ab0:	bd70      	pop	{r4, r5, r6, pc}
    9ab2:	0000      	.short	0x0000
    9ab4:	20000134 	.word	0x20000134
    9ab8:	b510      	push	{r4, lr}
    9aba:	4c08      	ldr	r4, [pc, #32]	; (9adc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1adc>)
    9abc:	2301      	movs	r3, #1
    9abe:	4619      	mov	r1, r3
    9ac0:	68a0      	ldr	r0, [r4, #8]
    9ac2:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9ac6:	3070      	adds	r0, #112	; 0x70
    9ac8:	f003 fcb9 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9acc:	2800      	cmp	r0, #0
    9ace:	d103      	bne.n	9ad8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ad8>
    9ad0:	68a1      	ldr	r1, [r4, #8]
    9ad2:	2008      	movs	r0, #8
    9ad4:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    9ad8:	bd10      	pop	{r4, pc}
    9ada:	0000      	.short	0x0000
    9adc:	20000134 	.word	0x20000134
    9ae0:	4814      	ldr	r0, [pc, #80]	; (9b34 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b34>)
    9ae2:	b510      	push	{r4, lr}
    9ae4:	68c1      	ldr	r1, [r0, #12]
    9ae6:	6880      	ldr	r0, [r0, #8]
    9ae8:	7909      	ldrb	r1, [r1, #4]
    9aea:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9aee:	2a0a      	cmp	r2, #10
    9af0:	d109      	bne.n	9b06 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b06>
    9af2:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    9af6:	428a      	cmp	r2, r1
    9af8:	d105      	bne.n	9b06 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b06>
    9afa:	2100      	movs	r1, #0
    9afc:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9b00:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9b04:	bd10      	pop	{r4, pc}
    9b06:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9b0a:	0713      	lsls	r3, r2, #28
    9b0c:	d507      	bpl.n	9b1e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b1e>
    9b0e:	f022 0108 	bic.w	r1, r2, #8
    9b12:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b1a:	f7fe bb8b 	b.w	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    9b1e:	29ff      	cmp	r1, #255	; 0xff
    9b20:	d004      	beq.n	9b2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b2c>
    9b22:	f240 617d 	movw	r1, #1661	; 0x67d
    9b26:	2031      	movs	r0, #49	; 0x31
    9b28:	f7fa f990 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b30:	f7ff be94 	b.w	985c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x185c>
    9b34:	20000134 	.word	0x20000134
    9b38:	b510      	push	{r4, lr}
    9b3a:	4c15      	ldr	r4, [pc, #84]	; (9b90 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b90>)
    9b3c:	68a0      	ldr	r0, [r4, #8]
    9b3e:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9b42:	0789      	lsls	r1, r1, #30
    9b44:	d411      	bmi.n	9b6a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b6a>
    9b46:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9b4a:	2301      	movs	r3, #1
    9b4c:	2100      	movs	r1, #0
    9b4e:	3070      	adds	r0, #112	; 0x70
    9b50:	f003 fc75 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b54:	b120      	cbz	r0, 9b60 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b60>
    9b56:	68a1      	ldr	r1, [r4, #8]
    9b58:	2006      	movs	r0, #6
    9b5a:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9b5e:	e009      	b.n	9b74 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b74>
    9b60:	f240 61e7 	movw	r1, #1767	; 0x6e7
    9b64:	2031      	movs	r0, #49	; 0x31
    9b66:	f7fa f971 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b6a:	2100      	movs	r1, #0
    9b6c:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9b70:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    9b74:	68a0      	ldr	r0, [r4, #8]
    9b76:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9b7a:	0780      	lsls	r0, r0, #30
    9b7c:	d507      	bpl.n	9b8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b8e>
    9b7e:	f7fe fb59 	bl	8234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x234>
    9b82:	68a0      	ldr	r0, [r4, #8]
    9b84:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9b88:	f021 0102 	bic.w	r1, r1, #2
    9b8c:	7001      	strb	r1, [r0, #0]
    9b8e:	bd10      	pop	{r4, pc}
    9b90:	20000134 	.word	0x20000134
    9b94:	4808      	ldr	r0, [pc, #32]	; (9bb8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bb8>)
    9b96:	b510      	push	{r4, lr}
    9b98:	6880      	ldr	r0, [r0, #8]
    9b9a:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9b9e:	b941      	cbnz	r1, 9bb2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bb2>
    9ba0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9ba4:	2301      	movs	r3, #1
    9ba6:	2106      	movs	r1, #6
    9ba8:	3070      	adds	r0, #112	; 0x70
    9baa:	f003 fc48 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bae:	2800      	cmp	r0, #0
    9bb0:	d000      	beq.n	9bb4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bb4>
    9bb2:	2001      	movs	r0, #1
    9bb4:	bd10      	pop	{r4, pc}
    9bb6:	0000      	.short	0x0000
    9bb8:	20000134 	.word	0x20000134
    9bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bbe:	4c59      	ldr	r4, [pc, #356]	; (9d24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d24>)
    9bc0:	4606      	mov	r6, r0
    9bc2:	4615      	mov	r5, r2
    9bc4:	68a0      	ldr	r0, [r4, #8]
    9bc6:	b109      	cbz	r1, 9bcc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bcc>
    9bc8:	2100      	movs	r1, #0
    9bca:	e004      	b.n	9bd6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bd6>
    9bcc:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    9bd0:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    9bd4:	4411      	add	r1, r2
    9bd6:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    9bda:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    9bde:	f88d 1000 	strb.w	r1, [sp]
    9be2:	9900      	ldr	r1, [sp, #0]
    9be4:	9100      	str	r1, [sp, #0]
    9be6:	f89d 1000 	ldrb.w	r1, [sp]
    9bea:	b939      	cbnz	r1, 9bfc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bfc>
    9bec:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9bf0:	2301      	movs	r3, #1
    9bf2:	4619      	mov	r1, r3
    9bf4:	3070      	adds	r0, #112	; 0x70
    9bf6:	f003 fc22 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bfa:	b130      	cbz	r0, 9c0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c0a>
    9bfc:	68a0      	ldr	r0, [r4, #8]
    9bfe:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    9c02:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9c06:	4411      	add	r1, r2
    9c08:	8001      	strh	r1, [r0, #0]
    9c0a:	68a0      	ldr	r0, [r4, #8]
    9c0c:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    9c10:	b132      	cbz	r2, 9c20 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c20>
    9c12:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    9c16:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    9c1a:	4419      	add	r1, r3
    9c1c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    9c20:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    9c24:	2b00      	cmp	r3, #0
    9c26:	dd06      	ble.n	9c36 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c36>
    9c28:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9c2c:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    9c30:	4439      	add	r1, r7
    9c32:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    9c36:	2101      	movs	r1, #1
    9c38:	273d      	movs	r7, #61	; 0x3d
    9c3a:	b116      	cbz	r6, 9c42 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c42>
    9c3c:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9c40:	e012      	b.n	9c68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c68>
    9c42:	7824      	ldrb	r4, [r4, #0]
    9c44:	2c02      	cmp	r4, #2
    9c46:	d009      	beq.n	9c5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c5c>
    9c48:	2c01      	cmp	r4, #1
    9c4a:	d011      	beq.n	9c70 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c70>
    9c4c:	b33d      	cbz	r5, 9c9e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c9e>
    9c4e:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9c52:	7011      	strb	r1, [r2, #0]
    9c54:	06e9      	lsls	r1, r5, #27
    9c56:	d50e      	bpl.n	9c76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c76>
    9c58:	211e      	movs	r1, #30
    9c5a:	e018      	b.n	9c8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c8e>
    9c5c:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    9c60:	2a06      	cmp	r2, #6
    9c62:	d044      	beq.n	9cee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cee>
    9c64:	2216      	movs	r2, #22
    9c66:	e042      	b.n	9cee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cee>
    9c68:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9c6c:	7011      	strb	r1, [r2, #0]
    9c6e:	e047      	b.n	9d00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d00>
    9c70:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    9c74:	e03b      	b.n	9cee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cee>
    9c76:	0729      	lsls	r1, r5, #28
    9c78:	d502      	bpl.n	9c80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c80>
    9c7a:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9c7e:	e03f      	b.n	9d00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d00>
    9c80:	06a9      	lsls	r1, r5, #26
    9c82:	d501      	bpl.n	9c88 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c88>
    9c84:	2123      	movs	r1, #35	; 0x23
    9c86:	e002      	b.n	9c8e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c8e>
    9c88:	07a9      	lsls	r1, r5, #30
    9c8a:	d003      	beq.n	9c94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c94>
    9c8c:	212a      	movs	r1, #42	; 0x2a
    9c8e:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9c92:	e035      	b.n	9d00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d00>
    9c94:	f640 41c1 	movw	r1, #3265	; 0xcc1
    9c98:	2031      	movs	r0, #49	; 0x31
    9c9a:	f7fa f8d7 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c9e:	b12a      	cbz	r2, 9cac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cac>
    9ca0:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    9ca4:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    9ca8:	42a2      	cmp	r2, r4
    9caa:	d216      	bcs.n	9cda <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cda>
    9cac:	2b00      	cmp	r3, #0
    9cae:	dd05      	ble.n	9cbc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cbc>
    9cb0:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    9cb4:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    9cb8:	429a      	cmp	r2, r3
    9cba:	d20e      	bcs.n	9cda <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cda>
    9cbc:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    9cc0:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9cc4:	4293      	cmp	r3, r2
    9cc6:	d30a      	bcc.n	9cde <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cde>
    9cc8:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    9ccc:	f88d 3000 	strb.w	r3, [sp]
    9cd0:	9b00      	ldr	r3, [sp, #0]
    9cd2:	9300      	str	r3, [sp, #0]
    9cd4:	f89d 3000 	ldrb.w	r3, [sp]
    9cd8:	b10b      	cbz	r3, 9cde <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cde>
    9cda:	2222      	movs	r2, #34	; 0x22
    9cdc:	e007      	b.n	9cee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cee>
    9cde:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9ce2:	b13b      	cbz	r3, 9cf4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cf4>
    9ce4:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9ce8:	4293      	cmp	r3, r2
    9cea:	d309      	bcc.n	9d00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d00>
    9cec:	2208      	movs	r2, #8
    9cee:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    9cf2:	e7b9      	b.n	9c68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c68>
    9cf4:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    9cf8:	2a06      	cmp	r2, #6
    9cfa:	d301      	bcc.n	9d00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d00>
    9cfc:	223e      	movs	r2, #62	; 0x3e
    9cfe:	e7f6      	b.n	9cee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1cee>
    9d00:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    9d04:	f88d 1000 	strb.w	r1, [sp]
    9d08:	9900      	ldr	r1, [sp, #0]
    9d0a:	9100      	str	r1, [sp, #0]
    9d0c:	f89d 1000 	ldrb.w	r1, [sp]
    9d10:	b119      	cbz	r1, 9d1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d1a>
    9d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9d16:	f004 bf2b 	b.w	eb70 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9d1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9d1e:	2100      	movs	r1, #0
    9d20:	f7fd bbfe 	b.w	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9d24:	20000134 	.word	0x20000134
    9d28:	b570      	push	{r4, r5, r6, lr}
    9d2a:	4d2d      	ldr	r5, [pc, #180]	; (9de0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1de0>)
    9d2c:	68a8      	ldr	r0, [r5, #8]
    9d2e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9d32:	b151      	cbz	r1, 9d4a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4a>
    9d34:	2901      	cmp	r1, #1
    9d36:	d008      	beq.n	9d4a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4a>
    9d38:	2902      	cmp	r1, #2
    9d3a:	d009      	beq.n	9d50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d50>
    9d3c:	2903      	cmp	r1, #3
    9d3e:	d007      	beq.n	9d50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d50>
    9d40:	f640 217f 	movw	r1, #2687	; 0xa7f
    9d44:	2031      	movs	r0, #49	; 0x31
    9d46:	f7fa f881 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d4a:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9d4e:	e035      	b.n	9dbc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dbc>
    9d50:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9d54:	2908      	cmp	r1, #8
    9d56:	d034      	beq.n	9dc2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc2>
    9d58:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9d5c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9d60:	2400      	movs	r4, #0
    9d62:	1c8b      	adds	r3, r1, #2
    9d64:	429a      	cmp	r2, r3
    9d66:	d306      	bcc.n	9d76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d76>
    9d68:	1a51      	subs	r1, r2, r1
    9d6a:	1e89      	subs	r1, r1, #2
    9d6c:	040c      	lsls	r4, r1, #16
    9d6e:	0c24      	lsrs	r4, r4, #16
    9d70:	d001      	beq.n	9d76 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d76>
    9d72:	1e64      	subs	r4, r4, #1
    9d74:	b2a4      	uxth	r4, r4
    9d76:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    9d7a:	b139      	cbz	r1, 9d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8c>
    9d7c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9d80:	2301      	movs	r3, #1
    9d82:	2109      	movs	r1, #9
    9d84:	3070      	adds	r0, #112	; 0x70
    9d86:	f003 fb5a 	bl	d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d8a:	b330      	cbz	r0, 9dda <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dda>
    9d8c:	f7ff ff02 	bl	9b94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b94>
    9d90:	b168      	cbz	r0, 9dae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dae>
    9d92:	68a9      	ldr	r1, [r5, #8]
    9d94:	2000      	movs	r0, #0
    9d96:	3198      	adds	r1, #152	; 0x98
    9d98:	c906      	ldmia	r1, {r1, r2}
    9d9a:	1c8b      	adds	r3, r1, #2
    9d9c:	429a      	cmp	r2, r3
    9d9e:	d303      	bcc.n	9da8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da8>
    9da0:	1a50      	subs	r0, r2, r1
    9da2:	1e80      	subs	r0, r0, #2
    9da4:	d000      	beq.n	9da8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1da8>
    9da6:	1e40      	subs	r0, r0, #1
    9da8:	42a0      	cmp	r0, r4
    9daa:	d200      	bcs.n	9dae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dae>
    9dac:	b284      	uxth	r4, r0
    9dae:	b10c      	cbz	r4, 9db4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1db4>
    9db0:	1e64      	subs	r4, r4, #1
    9db2:	b2a4      	uxth	r4, r4
    9db4:	68a8      	ldr	r0, [r5, #8]
    9db6:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9dba:	4421      	add	r1, r4
    9dbc:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    9dc0:	bd70      	pop	{r4, r5, r6, pc}
    9dc2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9dc6:	2903      	cmp	r1, #3
    9dc8:	d3bf      	bcc.n	9d4a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4a>
    9dca:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9dce:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9dd0:	4411      	add	r1, r2
    9dd2:	1c49      	adds	r1, r1, #1
    9dd4:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9dd8:	bd70      	pop	{r4, r5, r6, pc}
    9dda:	2400      	movs	r4, #0
    9ddc:	e7ea      	b.n	9db4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1db4>
    9dde:	0000      	.short	0x0000
    9de0:	20000134 	.word	0x20000134

00009de4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9de4:	4903      	ldr	r1, [pc, #12]	; (9df4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9de6:	884a      	ldrh	r2, [r1, #2]
    9de8:	8002      	strh	r2, [r0, #0]
    9dea:	7809      	ldrb	r1, [r1, #0]
    9dec:	7081      	strb	r1, [r0, #2]
    9dee:	2000      	movs	r0, #0
    9df0:	4770      	bx	lr
    9df2:	0000      	.short	0x0000
    9df4:	20001058 	.word	0x20001058

00009df8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9df8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9dfa:	460c      	mov	r4, r1
    9dfc:	4605      	mov	r5, r0
    9dfe:	8800      	ldrh	r0, [r0, #0]
    9e00:	4669      	mov	r1, sp
    9e02:	f003 faf2 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9e06:	0001      	movs	r1, r0
    9e08:	f04f 0000 	mov.w	r0, #0
    9e0c:	d005      	beq.n	9e1a <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    9e0e:	f8c4 0002 	str.w	r0, [r4, #2]
    9e12:	71a0      	strb	r0, [r4, #6]
    9e14:	8020      	strh	r0, [r4, #0]
    9e16:	2002      	movs	r0, #2
    9e18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9e1a:	9901      	ldr	r1, [sp, #4]
    9e1c:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    9e20:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    9e24:	f8d1 2016 	ldr.w	r2, [r1, #22]
    9e28:	f8c4 2002 	str.w	r2, [r4, #2]
    9e2c:	7e8a      	ldrb	r2, [r1, #26]
    9e2e:	71a2      	strb	r2, [r4, #6]
    9e30:	882a      	ldrh	r2, [r5, #0]
    9e32:	8022      	strh	r2, [r4, #0]
    9e34:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    9e38:	f88d 2008 	strb.w	r2, [sp, #8]
    9e3c:	9a02      	ldr	r2, [sp, #8]
    9e3e:	9202      	str	r2, [sp, #8]
    9e40:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9e44:	2a00      	cmp	r2, #0
    9e46:	d1eb      	bne.n	9e20 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    9e48:	2000      	movs	r0, #0
    9e4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009e4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9e4c:	b51c      	push	{r2, r3, r4, lr}
    9e4e:	8800      	ldrh	r0, [r0, #0]
    9e50:	4669      	mov	r1, sp
    9e52:	f003 faca 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9e56:	2800      	cmp	r0, #0
    9e58:	d10b      	bne.n	9e72 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9e5a:	480b      	ldr	r0, [pc, #44]	; (9e88 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9e5c:	7800      	ldrb	r0, [r0, #0]
    9e5e:	b188      	cbz	r0, 9e84 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9e60:	9801      	ldr	r0, [sp, #4]
    9e62:	f005 fda3 	bl	f9ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    9e66:	b128      	cbz	r0, 9e74 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9e68:	9801      	ldr	r0, [sp, #4]
    9e6a:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    9e6e:	b118      	cbz	r0, 9e78 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9e70:	203a      	movs	r0, #58	; 0x3a
    9e72:	bd1c      	pop	{r2, r3, r4, pc}
    9e74:	2002      	movs	r0, #2
    9e76:	bd1c      	pop	{r2, r3, r4, pc}
    9e78:	9901      	ldr	r1, [sp, #4]
    9e7a:	2001      	movs	r0, #1
    9e7c:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    9e80:	2000      	movs	r0, #0
    9e82:	bd1c      	pop	{r2, r3, r4, pc}
    9e84:	2011      	movs	r0, #17
    9e86:	bd1c      	pop	{r2, r3, r4, pc}
    9e88:	20000210 	.word	0x20000210

00009e8c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9e8c:	b510      	push	{r4, lr}
    9e8e:	4604      	mov	r4, r0
    9e90:	f005 fd83 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    9e94:	b130      	cbz	r0, 9ea4 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9e96:	4804      	ldr	r0, [pc, #16]	; (9ea8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9e98:	8881      	ldrh	r1, [r0, #4]
    9e9a:	8021      	strh	r1, [r4, #0]
    9e9c:	88c0      	ldrh	r0, [r0, #6]
    9e9e:	8060      	strh	r0, [r4, #2]
    9ea0:	2000      	movs	r0, #0
    9ea2:	bd10      	pop	{r4, pc}
    9ea4:	2001      	movs	r0, #1
    9ea6:	bd10      	pop	{r4, pc}
    9ea8:	20000218 	.word	0x20000218

00009eac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9eac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9eae:	4605      	mov	r5, r0
    9eb0:	f000 fb04 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9eb4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9eb8:	b310      	cbz	r0, 9f00 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9eba:	2400      	movs	r4, #0
    9ebc:	a802      	add	r0, sp, #8
    9ebe:	f88d 4004 	strb.w	r4, [sp, #4]
    9ec2:	f88d 4008 	strb.w	r4, [sp, #8]
    9ec6:	9000      	str	r0, [sp, #0]
    9ec8:	78aa      	ldrb	r2, [r5, #2]
    9eca:	7869      	ldrb	r1, [r5, #1]
    9ecc:	7828      	ldrb	r0, [r5, #0]
    9ece:	ab01      	add	r3, sp, #4
    9ed0:	f005 fdc4 	bl	fa5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    9ed4:	2800      	cmp	r0, #0
    9ed6:	d112      	bne.n	9efe <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9ed8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9edc:	f005 fcc5 	bl	f86a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9ee0:	b180      	cbz	r0, 9f04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9ee2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9ee6:	f005 fcc0 	bl	f86a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9eea:	b158      	cbz	r0, 9f04 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9eec:	4806      	ldr	r0, [pc, #24]	; (9f08 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9eee:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9ef2:	7381      	strb	r1, [r0, #14]
    9ef4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9ef8:	73c1      	strb	r1, [r0, #15]
    9efa:	8204      	strh	r4, [r0, #16]
    9efc:	2000      	movs	r0, #0
    9efe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f00:	2001      	movs	r0, #1
    9f02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f04:	2011      	movs	r0, #17
    9f06:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9f08:	20001058 	.word	0x20001058

00009f0c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9f0c:	7801      	ldrb	r1, [r0, #0]
    9f0e:	b171      	cbz	r1, 9f2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9f10:	7841      	ldrb	r1, [r0, #1]
    9f12:	b161      	cbz	r1, 9f2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9f14:	8841      	ldrh	r1, [r0, #2]
    9f16:	291b      	cmp	r1, #27
    9f18:	d309      	bcc.n	9f2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9f1a:	8881      	ldrh	r1, [r0, #4]
    9f1c:	291b      	cmp	r1, #27
    9f1e:	d306      	bcc.n	9f2e <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    9f20:	4904      	ldr	r1, [pc, #16]	; (9f34 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9f22:	6802      	ldr	r2, [r0, #0]
    9f24:	600a      	str	r2, [r1, #0]
    9f26:	8880      	ldrh	r0, [r0, #4]
    9f28:	8088      	strh	r0, [r1, #4]
    9f2a:	2000      	movs	r0, #0
    9f2c:	4770      	bx	lr
    9f2e:	2012      	movs	r0, #18
    9f30:	4770      	bx	lr
    9f32:	0000      	.short	0x0000
    9f34:	20001058 	.word	0x20001058

00009f38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9f38:	6800      	ldr	r0, [r0, #0]
    9f3a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9f3e:	4288      	cmp	r0, r1
    9f40:	d303      	bcc.n	9f4a <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9f42:	4903      	ldr	r1, [pc, #12]	; (9f50 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9f44:	6088      	str	r0, [r1, #8]
    9f46:	2000      	movs	r0, #0
    9f48:	4770      	bx	lr
    9f4a:	2012      	movs	r0, #18
    9f4c:	4770      	bx	lr
    9f4e:	0000      	.short	0x0000
    9f50:	20001058 	.word	0x20001058

00009f54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9f54:	4a03      	ldr	r2, [pc, #12]	; (9f64 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9f56:	e9d2 1200 	ldrd	r1, r2, [r2]
    9f5a:	6001      	str	r1, [r0, #0]
    9f5c:	6042      	str	r2, [r0, #4]
    9f5e:	2000      	movs	r0, #0
    9f60:	4770      	bx	lr
    9f62:	0000      	.short	0x0000
    9f64:	0000a398 	.word	0x0000a398

00009f68 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9f68:	b510      	push	{r4, lr}
    9f6a:	2005      	movs	r0, #5
    9f6c:	f000 fa9c 	bl	a4a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9f70:	f7fd fe52 	bl	7c18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9f74:	4902      	ldr	r1, [pc, #8]	; (9f80 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9f76:	4801      	ldr	r0, [pc, #4]	; (9f7c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9f78:	6048      	str	r0, [r1, #4]
    9f7a:	bd10      	pop	{r4, pc}
    9f7c:	00009fd9 	.word	0x00009fd9
    9f80:	20000210 	.word	0x20000210

00009f84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9f84:	b510      	push	{r4, lr}
    9f86:	f003 f984 	bl	d292 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9f8a:	f7fb fc6f 	bl	586c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9f8e:	f000 faa5 	bl	a4dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9f92:	f003 fe2c 	bl	dbee <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9f96:	480e      	ldr	r0, [pc, #56]	; (9fd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9f9c:	4b0d      	ldr	r3, [pc, #52]	; (9fd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    9f9e:	8281      	strh	r1, [r0, #20]
    9fa0:	2100      	movs	r1, #0
    9fa2:	7581      	strb	r1, [r0, #22]
    9fa4:	8301      	strh	r1, [r0, #24]
    9fa6:	221b      	movs	r2, #27
    9fa8:	801a      	strh	r2, [r3, #0]
    9faa:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9fae:	805c      	strh	r4, [r3, #2]
    9fb0:	809a      	strh	r2, [r3, #4]
    9fb2:	80dc      	strh	r4, [r3, #6]
    9fb4:	7381      	strb	r1, [r0, #14]
    9fb6:	73c1      	strb	r1, [r0, #15]
    9fb8:	2303      	movs	r3, #3
    9fba:	7003      	strb	r3, [r0, #0]
    9fbc:	2302      	movs	r3, #2
    9fbe:	7043      	strb	r3, [r0, #1]
    9fc0:	8042      	strh	r2, [r0, #2]
    9fc2:	8082      	strh	r2, [r0, #4]
    9fc4:	f640 62a6 	movw	r2, #3750	; 0xea6
    9fc8:	6082      	str	r2, [r0, #8]
    9fca:	7481      	strb	r1, [r0, #18]
    9fcc:	7301      	strb	r1, [r0, #12]
    9fce:	bd10      	pop	{r4, pc}
    9fd0:	20001058 	.word	0x20001058
    9fd4:	20000218 	.word	0x20000218
    9fd8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fdc:	4692      	mov	sl, r2
    9fde:	460f      	mov	r7, r1
    9fe0:	4681      	mov	r9, r0
    9fe2:	f005 fcda 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    9fe6:	2800      	cmp	r0, #0
    9fe8:	d063      	beq.n	a0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    9fea:	4933      	ldr	r1, [pc, #204]	; (a0b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    9fec:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    9ff0:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    9ff4:	8808      	ldrh	r0, [r1, #0]
    9ff6:	4290      	cmp	r0, r2
    9ff8:	d300      	bcc.n	9ffc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    9ffa:	4610      	mov	r0, r2
    9ffc:	4680      	mov	r8, r0
    9ffe:	8888      	ldrh	r0, [r1, #4]
    a000:	42b0      	cmp	r0, r6
    a002:	d200      	bcs.n	a006 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    a004:	4606      	mov	r6, r0
    a006:	884c      	ldrh	r4, [r1, #2]
    a008:	f640 0048 	movw	r0, #2120	; 0x848
    a00c:	4284      	cmp	r4, r0
    a00e:	d300      	bcc.n	a012 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    a010:	4604      	mov	r4, r0
    a012:	88cd      	ldrh	r5, [r1, #6]
    a014:	4285      	cmp	r5, r0
    a016:	d300      	bcc.n	a01a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    a018:	4605      	mov	r5, r0
    a01a:	4284      	cmp	r4, r0
    a01c:	d300      	bcc.n	a020 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    a01e:	4604      	mov	r4, r0
    a020:	f44f 71a4 	mov.w	r1, #328	; 0x148
    a024:	2e1b      	cmp	r6, #27
    a026:	d001      	beq.n	a02c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    a028:	428d      	cmp	r5, r1
    a02a:	d104      	bne.n	a036 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    a02c:	f1b8 0f1b 	cmp.w	r8, #27
    a030:	d03f      	beq.n	a0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a032:	428c      	cmp	r4, r1
    a034:	d03d      	beq.n	a0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a036:	466a      	mov	r2, sp
    a038:	4651      	mov	r1, sl
    a03a:	4648      	mov	r0, r9
    a03c:	f005 fc38 	bl	f8b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a040:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a044:	4641      	mov	r1, r8
    a046:	4540      	cmp	r0, r8
    a048:	d900      	bls.n	a04c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    a04a:	4608      	mov	r0, r1
    a04c:	80f8      	strh	r0, [r7, #6]
    a04e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a052:	42a1      	cmp	r1, r4
    a054:	d800      	bhi.n	a058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    a056:	460c      	mov	r4, r1
    a058:	813c      	strh	r4, [r7, #8]
    a05a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    a05e:	42b1      	cmp	r1, r6
    a060:	d800      	bhi.n	a064 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    a062:	460e      	mov	r6, r1
    a064:	807e      	strh	r6, [r7, #2]
    a066:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a06a:	42a9      	cmp	r1, r5
    a06c:	d900      	bls.n	a070 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    a06e:	4629      	mov	r1, r5
    a070:	80b9      	strh	r1, [r7, #4]
    a072:	2201      	movs	r2, #1
    a074:	703a      	strb	r2, [r7, #0]
    a076:	381b      	subs	r0, #27
    a078:	28e0      	cmp	r0, #224	; 0xe0
    a07a:	d902      	bls.n	a082 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    a07c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    a080:	e014      	b.n	a0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a082:	3e1b      	subs	r6, #27
    a084:	2ee0      	cmp	r6, #224	; 0xe0
    a086:	d902      	bls.n	a08e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    a088:	f640 4182 	movw	r1, #3202	; 0xc82
    a08c:	e00e      	b.n	a0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a08e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    a092:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    a096:	4284      	cmp	r4, r0
    a098:	d902      	bls.n	a0a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    a09a:	f640 4184 	movw	r1, #3204	; 0xc84
    a09e:	e005      	b.n	a0ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    a0a0:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    a0a4:	4281      	cmp	r1, r0
    a0a6:	d904      	bls.n	a0b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    a0a8:	f640 4186 	movw	r1, #3206	; 0xc86
    a0ac:	2039      	movs	r0, #57	; 0x39
    a0ae:	f7f9 fecd 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0b2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0b6:	0000      	.short	0x0000
    a0b8:	20000218 	.word	0x20000218

0000a0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c0:	b088      	sub	sp, #32
    a0c2:	460c      	mov	r4, r1
    a0c4:	4606      	mov	r6, r0
    a0c6:	f003 ffb5 	bl	e034 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    a0ca:	b198      	cbz	r0, a0f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    a0cc:	4630      	mov	r0, r6
    a0ce:	f003 ffa4 	bl	e01a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    a0d2:	b130      	cbz	r0, a0e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    a0d4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    a0d8:	2012      	movs	r0, #18
    a0da:	2900      	cmp	r1, #0
    a0dc:	d00b      	beq.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0de:	2980      	cmp	r1, #128	; 0x80
    a0e0:	d809      	bhi.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0e2:	4630      	mov	r0, r6
    a0e4:	f003 ff88 	bl	dff8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    a0e8:	b140      	cbz	r0, a0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a0ea:	4630      	mov	r0, r6
    a0ec:	f003 ff00 	bl	def0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    a0f0:	b130      	cbz	r0, a100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    a0f2:	e009      	b.n	a108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    a0f4:	2042      	movs	r0, #66	; 0x42
    a0f6:	b008      	add	sp, #32
    a0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0fc:	200c      	movs	r0, #12
    a0fe:	e7fa      	b.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a100:	4630      	mov	r0, r6
    a102:	f003 ff84 	bl	e00e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    a106:	b3a8      	cbz	r0, a174 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    a108:	4630      	mov	r0, r6
    a10a:	f004 f95b 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    a10e:	2800      	cmp	r0, #0
    a110:	d1f4      	bne.n	a0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a112:	4630      	mov	r0, r6
    a114:	f003 ff07 	bl	df26 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    a118:	2800      	cmp	r0, #0
    a11a:	d1ef      	bne.n	a0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    a11c:	4630      	mov	r0, r6
    a11e:	f7fc f9d7 	bl	64d0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    a122:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    a126:	f242 7110 	movw	r1, #10000	; 0x2710
    a12a:	fb00 f801 	mul.w	r8, r0, r1
    a12e:	78e1      	ldrb	r1, [r4, #3]
    a130:	4630      	mov	r0, r6
    a132:	f003 ff58 	bl	dfe6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    a136:	4630      	mov	r0, r6
    a138:	f003 ff6b 	bl	e012 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    a13c:	b1e8      	cbz	r0, a17a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    a13e:	2200      	movs	r2, #0
    a140:	4611      	mov	r1, r2
    a142:	a801      	add	r0, sp, #4
    a144:	f7fa f8e0 	bl	4308 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    a148:	0004      	movs	r4, r0
    a14a:	d06a      	beq.n	a222 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a14c:	2100      	movs	r1, #0
    a14e:	f7fb fdbb 	bl	5cc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    a152:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a156:	8020      	strh	r0, [r4, #0]
    a158:	4621      	mov	r1, r4
    a15a:	4630      	mov	r0, r6
    a15c:	f003 ff7d 	bl	e05a <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    a160:	f005 fc1b 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    a164:	4d3a      	ldr	r5, [pc, #232]	; (a250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    a166:	2800      	cmp	r0, #0
    a168:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    a16c:	d00f      	beq.n	a18e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    a16e:	886a      	ldrh	r2, [r5, #2]
    a170:	88a9      	ldrh	r1, [r5, #4]
    a172:	e00e      	b.n	a192 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    a174:	e7ff      	b.n	a176 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    a176:	2012      	movs	r0, #18
    a178:	e7bd      	b.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a17a:	4642      	mov	r2, r8
    a17c:	2100      	movs	r1, #0
    a17e:	4630      	mov	r0, r6
    a180:	f7fd f8f0 	bl	7364 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a184:	2800      	cmp	r0, #0
    a186:	d0b6      	beq.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a188:	f241 414c 	movw	r1, #5196	; 0x144c
    a18c:	e053      	b.n	a236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a18e:	221b      	movs	r2, #27
    a190:	4611      	mov	r1, r2
    a192:	84c2      	strh	r2, [r0, #38]	; 0x26
    a194:	8501      	strh	r1, [r0, #40]	; 0x28
    a196:	68a8      	ldr	r0, [r5, #8]
    a198:	62e0      	str	r0, [r4, #44]	; 0x2c
    a19a:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a19e:	4630      	mov	r0, r6
    a1a0:	f003 ff3f 	bl	e022 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a1a4:	b910      	cbnz	r0, a1ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a1a6:	4630      	mov	r0, r6
    a1a8:	f003 ff55 	bl	e056 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a1ac:	60e7      	str	r7, [r4, #12]
    a1ae:	8821      	ldrh	r1, [r4, #0]
    a1b0:	f8ad 1008 	strh.w	r1, [sp, #8]
    a1b4:	7ba9      	ldrb	r1, [r5, #14]
    a1b6:	f88d 100a 	strb.w	r1, [sp, #10]
    a1ba:	7be9      	ldrb	r1, [r5, #15]
    a1bc:	f88d 100b 	strb.w	r1, [sp, #11]
    a1c0:	8a29      	ldrh	r1, [r5, #16]
    a1c2:	f8ad 100c 	strh.w	r1, [sp, #12]
    a1c6:	a905      	add	r1, sp, #20
    a1c8:	9100      	str	r1, [sp, #0]
    a1ca:	2001      	movs	r0, #1
    a1cc:	ab04      	add	r3, sp, #16
    a1ce:	aa02      	add	r2, sp, #8
    a1d0:	4621      	mov	r1, r4
    a1d2:	f005 fba3 	bl	f91c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    a1d6:	b140      	cbz	r0, a1ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a1d8:	2100      	movs	r1, #0
    a1da:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a1de:	f7fa f8bd 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a1e2:	b1f0      	cbz	r0, a222 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a1e4:	f241 4198 	movw	r1, #5272	; 0x1498
    a1e8:	e025      	b.n	a236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a1ea:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a1ee:	f88d 0018 	strb.w	r0, [sp, #24]
    a1f2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a1f6:	f88d 0019 	strb.w	r0, [sp, #25]
    a1fa:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a1fe:	f8ad 001a 	strh.w	r0, [sp, #26]
    a202:	a906      	add	r1, sp, #24
    a204:	4620      	mov	r0, r4
    a206:	f003 f9af 	bl	d568 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a20a:	7868      	ldrb	r0, [r5, #1]
    a20c:	9000      	str	r0, [sp, #0]
    a20e:	782b      	ldrb	r3, [r5, #0]
    a210:	88aa      	ldrh	r2, [r5, #4]
    a212:	8869      	ldrh	r1, [r5, #2]
    a214:	8820      	ldrh	r0, [r4, #0]
    a216:	f7fa f96d 	bl	44f4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a21a:	b120      	cbz	r0, a226 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a21c:	f241 41a3 	movw	r1, #5283	; 0x14a3
    a220:	e009      	b.n	a236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a222:	2009      	movs	r0, #9
    a224:	e767      	b.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a226:	4642      	mov	r2, r8
    a228:	4621      	mov	r1, r4
    a22a:	4630      	mov	r0, r6
    a22c:	f7fd f89a 	bl	7364 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    a230:	b120      	cbz	r0, a23c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a232:	f241 41a5 	movw	r1, #5285	; 0x14a5
    a236:	2039      	movs	r0, #57	; 0x39
    a238:	f7f9 fe08 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a23c:	4805      	ldr	r0, [pc, #20]	; (a254 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a23e:	6843      	ldr	r3, [r0, #4]
    a240:	b123      	cbz	r3, a24c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a242:	2200      	movs	r2, #0
    a244:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    a248:	4620      	mov	r0, r4
    a24a:	4798      	blx	r3
    a24c:	2000      	movs	r0, #0
    a24e:	e752      	b.n	a0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a250:	20001058 	.word	0x20001058
    a254:	20000210 	.word	0x20000210
    a258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a25c:	b088      	sub	sp, #32
    a25e:	4604      	mov	r4, r0
    a260:	8800      	ldrh	r0, [r0, #0]
    a262:	a906      	add	r1, sp, #24
    a264:	f003 f8c1 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a268:	2800      	cmp	r0, #0
    a26a:	d147      	bne.n	a2fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a26c:	9807      	ldr	r0, [sp, #28]
    a26e:	2700      	movs	r7, #0
    a270:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    a274:	f88d 1008 	strb.w	r1, [sp, #8]
    a278:	9902      	ldr	r1, [sp, #8]
    a27a:	9102      	str	r1, [sp, #8]
    a27c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a280:	f88d 100c 	strb.w	r1, [sp, #12]
    a284:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a288:	3070      	adds	r0, #112	; 0x70
    a28a:	0689      	lsls	r1, r1, #26
    a28c:	d502      	bpl.n	a294 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a28e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a292:	b149      	cbz	r1, a2a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a294:	f05f 0100 	movs.w	r1, #0
    a298:	f88d 1004 	strb.w	r1, [sp, #4]
    a29c:	2105      	movs	r1, #5
    a29e:	304c      	adds	r0, #76	; 0x4c
    a2a0:	f004 fca2 	bl	ebe8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a2a4:	b110      	cbz	r0, a2ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a2a6:	e004      	b.n	a2b2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a2a8:	2101      	movs	r1, #1
    a2aa:	e7f5      	b.n	a298 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a2ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a2b0:	b318      	cbz	r0, a2fa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a2b2:	8921      	ldrh	r1, [r4, #8]
    a2b4:	88e0      	ldrh	r0, [r4, #6]
    a2b6:	f005 faed 	bl	f894 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a2ba:	2800      	cmp	r0, #0
    a2bc:	d11e      	bne.n	a2fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2be:	88a1      	ldrh	r1, [r4, #4]
    a2c0:	8860      	ldrh	r0, [r4, #2]
    a2c2:	f005 fae7 	bl	f894 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a2c6:	2800      	cmp	r0, #0
    a2c8:	d118      	bne.n	a2fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2ca:	8921      	ldrh	r1, [r4, #8]
    a2cc:	88e0      	ldrh	r0, [r4, #6]
    a2ce:	f005 fad7 	bl	f880 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a2d2:	2800      	cmp	r0, #0
    a2d4:	d112      	bne.n	a2fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2d6:	88a1      	ldrh	r1, [r4, #4]
    a2d8:	8860      	ldrh	r0, [r4, #2]
    a2da:	f005 fad1 	bl	f880 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a2de:	0006      	movs	r6, r0
    a2e0:	d10c      	bne.n	a2fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a2e2:	9807      	ldr	r0, [sp, #28]
    a2e4:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    a2e8:	f04f 0801 	mov.w	r8, #1
    a2ec:	f885 8001 	strb.w	r8, [r5, #1]
    a2f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a2f4:	b129      	cbz	r1, a302 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a2f6:	263a      	movs	r6, #58	; 0x3a
    a2f8:	e02f      	b.n	a35a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a2fa:	201a      	movs	r0, #26
    a2fc:	b008      	add	sp, #32
    a2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a302:	4639      	mov	r1, r7
    a304:	aa03      	add	r2, sp, #12
    a306:	f005 fad3 	bl	f8b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a30a:	8861      	ldrh	r1, [r4, #2]
    a30c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a310:	4281      	cmp	r1, r0
    a312:	d200      	bcs.n	a316 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a314:	4608      	mov	r0, r1
    a316:	80e8      	strh	r0, [r5, #6]
    a318:	88a1      	ldrh	r1, [r4, #4]
    a31a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a31e:	4281      	cmp	r1, r0
    a320:	d200      	bcs.n	a324 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a322:	4608      	mov	r0, r1
    a324:	8128      	strh	r0, [r5, #8]
    a326:	88e2      	ldrh	r2, [r4, #6]
    a328:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a32c:	428a      	cmp	r2, r1
    a32e:	d200      	bcs.n	a332 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a330:	4611      	mov	r1, r2
    a332:	8069      	strh	r1, [r5, #2]
    a334:	8922      	ldrh	r2, [r4, #8]
    a336:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a33a:	428a      	cmp	r2, r1
    a33c:	d200      	bcs.n	a340 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a33e:	4611      	mov	r1, r2
    a340:	f640 0248 	movw	r2, #2120	; 0x848
    a344:	80a9      	strh	r1, [r5, #4]
    a346:	4291      	cmp	r1, r2
    a348:	d300      	bcc.n	a34c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a34a:	4611      	mov	r1, r2
    a34c:	80a9      	strh	r1, [r5, #4]
    a34e:	4290      	cmp	r0, r2
    a350:	d200      	bcs.n	a354 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a352:	4602      	mov	r2, r0
    a354:	812a      	strh	r2, [r5, #8]
    a356:	f885 8000 	strb.w	r8, [r5]
    a35a:	706f      	strb	r7, [r5, #1]
    a35c:	4630      	mov	r0, r6
    a35e:	e7cd      	b.n	a2fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a360:	b510      	push	{r4, lr}
    a362:	4604      	mov	r4, r0
    a364:	88c1      	ldrh	r1, [r0, #6]
    a366:	8880      	ldrh	r0, [r0, #4]
    a368:	f005 fa94 	bl	f894 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a36c:	2800      	cmp	r0, #0
    a36e:	d10f      	bne.n	a390 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a370:	8861      	ldrh	r1, [r4, #2]
    a372:	8820      	ldrh	r0, [r4, #0]
    a374:	f005 fa8e 	bl	f894 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a378:	2800      	cmp	r0, #0
    a37a:	d109      	bne.n	a390 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a37c:	4805      	ldr	r0, [pc, #20]	; (a394 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a37e:	88a1      	ldrh	r1, [r4, #4]
    a380:	8081      	strh	r1, [r0, #4]
    a382:	8821      	ldrh	r1, [r4, #0]
    a384:	8001      	strh	r1, [r0, #0]
    a386:	88e1      	ldrh	r1, [r4, #6]
    a388:	80c1      	strh	r1, [r0, #6]
    a38a:	8861      	ldrh	r1, [r4, #2]
    a38c:	8041      	strh	r1, [r0, #2]
    a38e:	2000      	movs	r0, #0
    a390:	bd10      	pop	{r4, pc}
    a392:	0000      	.short	0x0000
    a394:	20000218 	.word	0x20000218
    a398:	0b12fe0b 	.word	0x0b12fe0b
    a39c:	12fe0059 	.word	0x12fe0059
    a3a0:	05060708 	.word	0x05060708
    a3a4:	00020304 	.word	0x00020304
    a3a8:	f0f4f8fc 	.word	0xf0f4f8fc
    a3ac:	0304d8ec 	.word	0x0304d8ec
    a3b0:	f4f8fc00 	.word	0xf4f8fc00
    a3b4:	00d8ecf0 	.word	0x00d8ecf0

0000a3b8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a3b8:	b510      	push	{r4, lr}
    a3ba:	f7fb fecd 	bl	6158 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a3be:	4804      	ldr	r0, [pc, #16]	; (a3d0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a3c0:	6840      	ldr	r0, [r0, #4]
    a3c2:	f005 fbc3 	bl	fb4c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3ca:	f005 b8ff 	b.w	f5cc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a3ce:	0000      	.short	0x0000
    a3d0:	20000220 	.word	0x20000220

0000a3d4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a3d4:	b510      	push	{r4, lr}
    a3d6:	4c07      	ldr	r4, [pc, #28]	; (a3f4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a3d8:	68a0      	ldr	r0, [r4, #8]
    a3da:	f005 fbb7 	bl	fb4c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3de:	68e0      	ldr	r0, [r4, #12]
    a3e0:	f005 fbb4 	bl	fb4c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a3e4:	f002 ff55 	bl	d292 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a3e8:	f7fb fa40 	bl	586c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a3f0:	f7ff bdc8 	b.w	9f84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a3f4:	20000220 	.word	0x20000220

0000a3f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a3f8:	b500      	push	{lr}
    a3fa:	4905      	ldr	r1, [pc, #20]	; (a410 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a3fc:	4805      	ldr	r0, [pc, #20]	; (a414 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a3fe:	f005 fb86 	bl	fb0e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a402:	4804      	ldr	r0, [pc, #16]	; (a414 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a404:	4904      	ldr	r1, [pc, #16]	; (a418 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a406:	1d00      	adds	r0, r0, #4
    a408:	f85d eb04 	ldr.w	lr, [sp], #4
    a40c:	f005 bb7f 	b.w	fb0e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a410:	20000230 	.word	0x20000230
    a414:	20000224 	.word	0x20000224
    a418:	20000238 	.word	0x20000238

0000a41c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a41c:	b500      	push	{lr}
    a41e:	4908      	ldr	r1, [pc, #32]	; (a440 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a420:	4808      	ldr	r0, [pc, #32]	; (a444 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a422:	f005 fb74 	bl	fb0e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a426:	4807      	ldr	r0, [pc, #28]	; (a444 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a428:	4907      	ldr	r1, [pc, #28]	; (a448 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a42a:	1d00      	adds	r0, r0, #4
    a42c:	f005 fb6f 	bl	fb0e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a430:	4804      	ldr	r0, [pc, #16]	; (a444 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a432:	4906      	ldr	r1, [pc, #24]	; (a44c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a434:	3008      	adds	r0, #8
    a436:	f85d eb04 	ldr.w	lr, [sp], #4
    a43a:	f005 bb68 	b.w	fb0e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a43e:	0000      	.short	0x0000
    a440:	20000248 	.word	0x20000248
    a444:	20000224 	.word	0x20000224
    a448:	20000250 	.word	0x20000250
    a44c:	20000240 	.word	0x20000240

0000a450 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a450:	4801      	ldr	r0, [pc, #4]	; (a458 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a452:	7800      	ldrb	r0, [r0, #0]
    a454:	4770      	bx	lr
    a456:	0000      	.short	0x0000
    a458:	20000220 	.word	0x20000220
    a45c:	b510      	push	{r4, lr}
    a45e:	f7fc f9a9 	bl	67b4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a462:	f7fd f80f 	bl	7484 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    a466:	4803      	ldr	r0, [pc, #12]	; (a474 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    a468:	f7fc f98a 	bl	6780 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a470:	f7fb be7e 	b.w	6170 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    a474:	200014e1 	.word	0x200014e1
    a478:	4909      	ldr	r1, [pc, #36]	; (a4a0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    a47a:	b510      	push	{r4, lr}
    a47c:	2001      	movs	r0, #1
    a47e:	7008      	strb	r0, [r1, #0]
    a480:	f7fc f9c8 	bl	6814 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a484:	f7fd fd20 	bl	7ec8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a488:	f002 fef1 	bl	d26e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a48c:	4805      	ldr	r0, [pc, #20]	; (a4a4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    a48e:	f7fa fc53 	bl	4d38 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a492:	2000      	movs	r0, #0
    a494:	f7f9 fea8 	bl	41e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a49c:	f7fb be70 	b.w	6180 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    a4a0:	20000220 	.word	0x20000220
    a4a4:	200014e1 	.word	0x200014e1

0000a4a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a4a8:	2101      	movs	r1, #1
    a4aa:	4081      	lsls	r1, r0
    a4ac:	4802      	ldr	r0, [pc, #8]	; (a4b8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a4ae:	6802      	ldr	r2, [r0, #0]
    a4b0:	4311      	orrs	r1, r2
    a4b2:	6001      	str	r1, [r0, #0]
    a4b4:	4770      	bx	lr
    a4b6:	0000      	.short	0x0000
    a4b8:	20000258 	.word	0x20000258

0000a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a4bc:	4801      	ldr	r0, [pc, #4]	; (a4c4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a4be:	6800      	ldr	r0, [r0, #0]
    a4c0:	4770      	bx	lr
    a4c2:	0000      	.short	0x0000
    a4c4:	20000258 	.word	0x20000258

0000a4c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a4c8:	4803      	ldr	r0, [pc, #12]	; (a4d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a4ca:	8800      	ldrh	r0, [r0, #0]
    a4cc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a4d0:	0040      	lsls	r0, r0, #1
    a4d2:	1c40      	adds	r0, r0, #1
    a4d4:	4770      	bx	lr
    a4d6:	0000      	.short	0x0000
    a4d8:	20000258 	.word	0x20000258

0000a4dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a4dc:	b510      	push	{r4, lr}
    a4de:	f7f9 f911 	bl	3704 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a4e2:	2200      	movs	r2, #0
    a4e4:	4b08      	ldr	r3, [pc, #32]	; (a508 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a4e6:	4611      	mov	r1, r2
    a4e8:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a4ec:	4284      	cmp	r4, r0
    a4ee:	d303      	bcc.n	a4f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a4f0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a4f4:	7882      	ldrb	r2, [r0, #2]
    a4f6:	e003      	b.n	a500 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a4f8:	1c49      	adds	r1, r1, #1
    a4fa:	b2c9      	uxtb	r1, r1
    a4fc:	290c      	cmp	r1, #12
    a4fe:	d3f3      	bcc.n	a4e8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a500:	4802      	ldr	r0, [pc, #8]	; (a50c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a502:	7002      	strb	r2, [r0, #0]
    a504:	bd10      	pop	{r4, pc}
    a506:	0000      	.short	0x0000
    a508:	0000fb9c 	.word	0x0000fb9c
    a50c:	200002a7 	.word	0x200002a7

0000a510 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a510:	b570      	push	{r4, r5, r6, lr}
    a512:	4605      	mov	r5, r0
    a514:	4616      	mov	r6, r2
    a516:	460c      	mov	r4, r1
    a518:	2002      	movs	r0, #2
    a51a:	f000 f9f9 	bl	a910 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a51e:	4906      	ldr	r1, [pc, #24]	; (a538 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a520:	2001      	movs	r0, #1
    a522:	1ef6      	subs	r6, r6, #3
    a524:	7008      	strb	r0, [r1, #0]
    a526:	4805      	ldr	r0, [pc, #20]	; (a53c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a528:	6006      	str	r6, [r0, #0]
    a52a:	4804      	ldr	r0, [pc, #16]	; (a53c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a52c:	3808      	subs	r0, #8
    a52e:	6005      	str	r5, [r0, #0]
    a530:	1f00      	subs	r0, r0, #4
    a532:	6004      	str	r4, [r0, #0]
    a534:	bd70      	pop	{r4, r5, r6, pc}
    a536:	0000      	.short	0x0000
    a538:	200002a8 	.word	0x200002a8
    a53c:	4000f510 	.word	0x4000f510

0000a540 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a540:	b510      	push	{r4, lr}
    a542:	4c0c      	ldr	r4, [pc, #48]	; (a574 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a544:	7820      	ldrb	r0, [r4, #0]
    a546:	b180      	cbz	r0, a56a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a548:	490b      	ldr	r1, [pc, #44]	; (a578 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a54a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a54e:	6008      	str	r0, [r1, #0]
    a550:	f000 f86a 	bl	a628 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a554:	2100      	movs	r1, #0
    a556:	b120      	cbz	r0, a562 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a558:	2001      	movs	r0, #1
    a55a:	7060      	strb	r0, [r4, #1]
    a55c:	4807      	ldr	r0, [pc, #28]	; (a57c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a55e:	6800      	ldr	r0, [r0, #0]
    a560:	e001      	b.n	a566 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a562:	7061      	strb	r1, [r4, #1]
    a564:	2010      	movs	r0, #16
    a566:	70a0      	strb	r0, [r4, #2]
    a568:	7021      	strb	r1, [r4, #0]
    a56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a56e:	2000      	movs	r0, #0
    a570:	f000 b9ce 	b.w	a910 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a574:	200002a8 	.word	0x200002a8
    a578:	4001f508 	.word	0x4001f508
    a57c:	4000f400 	.word	0x4000f400

0000a580 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a580:	b510      	push	{r4, lr}
    a582:	2002      	movs	r0, #2
    a584:	f000 f9c4 	bl	a910 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a588:	4904      	ldr	r1, [pc, #16]	; (a59c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a58a:	2001      	movs	r0, #1
    a58c:	7008      	strb	r0, [r1, #0]
    a58e:	f000 f859 	bl	a644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a592:	4903      	ldr	r1, [pc, #12]	; (a5a0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a594:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a598:	6008      	str	r0, [r1, #0]
    a59a:	bd10      	pop	{r4, pc}
    a59c:	200002a8 	.word	0x200002a8
    a5a0:	4001f504 	.word	0x4001f504

0000a5a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a5a4:	4803      	ldr	r0, [pc, #12]	; (a5b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a5a6:	2100      	movs	r1, #0
    a5a8:	7001      	strb	r1, [r0, #0]
    a5aa:	7041      	strb	r1, [r0, #1]
    a5ac:	2110      	movs	r1, #16
    a5ae:	7081      	strb	r1, [r0, #2]
    a5b0:	4770      	bx	lr
    a5b2:	0000      	.short	0x0000
    a5b4:	200002a8 	.word	0x200002a8

0000a5b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a5b8:	4807      	ldr	r0, [pc, #28]	; (a5d8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a5ba:	b510      	push	{r4, lr}
    a5bc:	7801      	ldrb	r1, [r0, #0]
    a5be:	b141      	cbz	r1, a5d2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a5c0:	f000 f832 	bl	a628 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a5c4:	b118      	cbz	r0, a5ce <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a5c6:	4805      	ldr	r0, [pc, #20]	; (a5dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a5c8:	6800      	ldr	r0, [r0, #0]
    a5ca:	b2c0      	uxtb	r0, r0
    a5cc:	bd10      	pop	{r4, pc}
    a5ce:	2010      	movs	r0, #16
    a5d0:	bd10      	pop	{r4, pc}
    a5d2:	7880      	ldrb	r0, [r0, #2]
    a5d4:	bd10      	pop	{r4, pc}
    a5d6:	0000      	.short	0x0000
    a5d8:	200002a8 	.word	0x200002a8
    a5dc:	4000f400 	.word	0x4000f400

0000a5e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a5e0:	4808      	ldr	r0, [pc, #32]	; (a604 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a5e2:	b510      	push	{r4, lr}
    a5e4:	7801      	ldrb	r1, [r0, #0]
    a5e6:	b159      	cbz	r1, a600 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a5e8:	4807      	ldr	r0, [pc, #28]	; (a608 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a5ea:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a5ee:	b128      	cbz	r0, a5fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a5f0:	f000 f80c 	bl	a60c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a5f4:	2800      	cmp	r0, #0
    a5f6:	d000      	beq.n	a5fa <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a5f8:	2001      	movs	r0, #1
    a5fa:	bd10      	pop	{r4, pc}
    a5fc:	2002      	movs	r0, #2
    a5fe:	bd10      	pop	{r4, pc}
    a600:	7840      	ldrb	r0, [r0, #1]
    a602:	bd10      	pop	{r4, pc}
    a604:	200002a8 	.word	0x200002a8
    a608:	4000f000 	.word	0x4000f000
    a60c:	4805      	ldr	r0, [pc, #20]	; (a624 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a60e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a612:	b111      	cbz	r1, a61a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a614:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a618:	b108      	cbz	r0, a61e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a61a:	2000      	movs	r0, #0
    a61c:	4770      	bx	lr
    a61e:	2001      	movs	r0, #1
    a620:	4770      	bx	lr
    a622:	0000      	.short	0x0000
    a624:	4000f000 	.word	0x4000f000
    a628:	4805      	ldr	r0, [pc, #20]	; (a640 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a62a:	b510      	push	{r4, lr}
    a62c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a630:	b120      	cbz	r0, a63c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a632:	f7ff ffeb 	bl	a60c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a636:	b108      	cbz	r0, a63c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a638:	2001      	movs	r0, #1
    a63a:	bd10      	pop	{r4, pc}
    a63c:	2000      	movs	r0, #0
    a63e:	bd10      	pop	{r4, pc}
    a640:	4000f000 	.word	0x4000f000
    a644:	4804      	ldr	r0, [pc, #16]	; (a658 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a646:	2100      	movs	r1, #0
    a648:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a64c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a650:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a654:	4770      	bx	lr
    a656:	0000      	.short	0x0000
    a658:	4000f000 	.word	0x4000f000

0000a65c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a65c:	4a08      	ldr	r2, [pc, #32]	; (a680 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a65e:	b510      	push	{r4, lr}
    a660:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a664:	4907      	ldr	r1, [pc, #28]	; (a684 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a666:	4610      	mov	r0, r2
    a668:	f7f9 fac0 	bl	3bec <mpsl_fem_lna_configuration_set>
    a66c:	2800      	cmp	r0, #0
    a66e:	d005      	beq.n	a67c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a670:	1c40      	adds	r0, r0, #1
    a672:	d003      	beq.n	a67c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a674:	217d      	movs	r1, #125	; 0x7d
    a676:	2040      	movs	r0, #64	; 0x40
    a678:	f7f9 fbe8 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a67c:	bd10      	pop	{r4, pc}
    a67e:	0000      	.short	0x0000
    a680:	2000025c 	.word	0x2000025c
    a684:	0000a6b4 	.word	0x0000a6b4

0000a688 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a688:	4a08      	ldr	r2, [pc, #32]	; (a6ac <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a68a:	b510      	push	{r4, lr}
    a68c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a690:	4907      	ldr	r1, [pc, #28]	; (a6b0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a692:	4610      	mov	r0, r2
    a694:	f7f9 fab6 	bl	3c04 <mpsl_fem_pa_configuration_set>
    a698:	2800      	cmp	r0, #0
    a69a:	d005      	beq.n	a6a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a69c:	1c40      	adds	r0, r0, #1
    a69e:	d003      	beq.n	a6a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a6a0:	2172      	movs	r1, #114	; 0x72
    a6a2:	2040      	movs	r0, #64	; 0x40
    a6a4:	f7f9 fbd2 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6a8:	bd10      	pop	{r4, pc}
    a6aa:	0000      	.short	0x0000
    a6ac:	2000025c 	.word	0x2000025c
    a6b0:	0000a6b4 	.word	0x0000a6b4
    a6b4:	00000001 	.word	0x00000001
    a6b8:	40001110 	.word	0x40001110
	...

0000a6cc <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    a6cc:	4a07      	ldr	r2, [pc, #28]	; (a6ec <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    a6ce:	b510      	push	{r4, lr}
    a6d0:	7853      	ldrb	r3, [r2, #1]
    a6d2:	b133      	cbz	r3, a6e2 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    a6d4:	4b06      	ldr	r3, [pc, #24]	; (a6f0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    a6d6:	6019      	str	r1, [r3, #0]
    a6d8:	1d19      	adds	r1, r3, #4
    a6da:	6008      	str	r0, [r1, #0]
    a6dc:	2001      	movs	r0, #1
    a6de:	7090      	strb	r0, [r2, #2]
    a6e0:	bd10      	pop	{r4, pc}
    a6e2:	21ba      	movs	r1, #186	; 0xba
    a6e4:	203c      	movs	r0, #60	; 0x3c
    a6e6:	f7f9 fbb1 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6ea:	0000      	.short	0x0000
    a6ec:	200002ab 	.word	0x200002ab
    a6f0:	4000f50c 	.word	0x4000f50c

0000a6f4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    a6f4:	4809      	ldr	r0, [pc, #36]	; (a71c <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    a6f6:	b510      	push	{r4, lr}
    a6f8:	7801      	ldrb	r1, [r0, #0]
    a6fa:	b151      	cbz	r1, a712 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a6fc:	7880      	ldrb	r0, [r0, #2]
    a6fe:	b140      	cbz	r0, a712 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a700:	4907      	ldr	r1, [pc, #28]	; (a720 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    a702:	2000      	movs	r0, #0
    a704:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a708:	4906      	ldr	r1, [pc, #24]	; (a724 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    a70a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a70e:	6008      	str	r0, [r1, #0]
    a710:	bd10      	pop	{r4, pc}
    a712:	21e1      	movs	r1, #225	; 0xe1
    a714:	203c      	movs	r0, #60	; 0x3c
    a716:	f7f9 fb99 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a71a:	0000      	.short	0x0000
    a71c:	200002ab 	.word	0x200002ab
    a720:	4000f000 	.word	0x4000f000
    a724:	4001f504 	.word	0x4001f504

0000a728 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a728:	b570      	push	{r4, r5, r6, lr}
    a72a:	4c0b      	ldr	r4, [pc, #44]	; (a758 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a72c:	2500      	movs	r5, #0
    a72e:	7820      	ldrb	r0, [r4, #0]
    a730:	b158      	cbz	r0, a74a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a732:	f000 f8e5 	bl	a900 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a736:	4809      	ldr	r0, [pc, #36]	; (a75c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a738:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a73c:	b118      	cbz	r0, a746 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    a73e:	4808      	ldr	r0, [pc, #32]	; (a760 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a740:	6800      	ldr	r0, [r0, #0]
    a742:	70e0      	strb	r0, [r4, #3]
    a744:	e000      	b.n	a748 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a746:	70e5      	strb	r5, [r4, #3]
    a748:	7025      	strb	r5, [r4, #0]
    a74a:	2000      	movs	r0, #0
    a74c:	f000 f8e0 	bl	a910 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a750:	7065      	strb	r5, [r4, #1]
    a752:	70a5      	strb	r5, [r4, #2]
    a754:	bd70      	pop	{r4, r5, r6, pc}
    a756:	0000      	.short	0x0000
    a758:	200002ab 	.word	0x200002ab
    a75c:	4000f000 	.word	0x4000f000
    a760:	4000f400 	.word	0x4000f400

0000a764 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    a764:	480d      	ldr	r0, [pc, #52]	; (a79c <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    a766:	b510      	push	{r4, lr}
    a768:	7801      	ldrb	r1, [r0, #0]
    a76a:	b191      	cbz	r1, a792 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a76c:	7880      	ldrb	r0, [r0, #2]
    a76e:	b180      	cbz	r0, a792 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a770:	490b      	ldr	r1, [pc, #44]	; (a7a0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    a772:	2000      	movs	r0, #0
    a774:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a778:	4a0a      	ldr	r2, [pc, #40]	; (a7a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a77a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    a77e:	6010      	str	r0, [r2, #0]
    a780:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a784:	2a01      	cmp	r2, #1
    a786:	d103      	bne.n	a790 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    a788:	604a      	str	r2, [r1, #4]
    a78a:	4906      	ldr	r1, [pc, #24]	; (a7a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a78c:	1d09      	adds	r1, r1, #4
    a78e:	6008      	str	r0, [r1, #0]
    a790:	bd10      	pop	{r4, pc}
    a792:	21d1      	movs	r1, #209	; 0xd1
    a794:	203c      	movs	r0, #60	; 0x3c
    a796:	f7f9 fb59 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a79a:	0000      	.short	0x0000
    a79c:	200002ab 	.word	0x200002ab
    a7a0:	4000f000 	.word	0x4000f000
    a7a4:	4001f504 	.word	0x4001f504

0000a7a8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a7a8:	4803      	ldr	r0, [pc, #12]	; (a7b8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    a7aa:	2100      	movs	r1, #0
    a7ac:	7001      	strb	r1, [r0, #0]
    a7ae:	7041      	strb	r1, [r0, #1]
    a7b0:	7081      	strb	r1, [r0, #2]
    a7b2:	70c1      	strb	r1, [r0, #3]
    a7b4:	4770      	bx	lr
    a7b6:	0000      	.short	0x0000
    a7b8:	200002ab 	.word	0x200002ab

0000a7bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    a7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7c0:	4605      	mov	r5, r0
    a7c2:	461c      	mov	r4, r3
    a7c4:	4690      	mov	r8, r2
    a7c6:	460f      	mov	r7, r1
    a7c8:	2001      	movs	r0, #1
    a7ca:	f000 f8a1 	bl	a910 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a7ce:	4e12      	ldr	r6, [pc, #72]	; (a818 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    a7d0:	4812      	ldr	r0, [pc, #72]	; (a81c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7d2:	7134      	strb	r4, [r6, #4]
    a7d4:	6007      	str	r7, [r0, #0]
    a7d6:	4911      	ldr	r1, [pc, #68]	; (a81c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7d8:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    a7dc:	1f09      	subs	r1, r1, #4
    a7de:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a7e2:	6008      	str	r0, [r1, #0]
    a7e4:	f001 fb4f 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a7e8:	b938      	cbnz	r0, a7fa <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    a7ea:	480c      	ldr	r0, [pc, #48]	; (a81c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a7ec:	3010      	adds	r0, #16
    a7ee:	6801      	ldr	r1, [r0, #0]
    a7f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a7f4:	ea41 0108 	orr.w	r1, r1, r8
    a7f8:	6001      	str	r1, [r0, #0]
    a7fa:	f000 f881 	bl	a900 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a7fe:	b93d      	cbnz	r5, a810 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    a800:	4808      	ldr	r0, [pc, #32]	; (a824 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    a802:	4a07      	ldr	r2, [pc, #28]	; (a820 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a804:	4906      	ldr	r1, [pc, #24]	; (a820 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a806:	3afc      	subs	r2, #252	; 0xfc
    a808:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    a80c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    a810:	2001      	movs	r0, #1
    a812:	7070      	strb	r0, [r6, #1]
    a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a818:	200002ab 	.word	0x200002ab
    a81c:	4000f508 	.word	0x4000f508
    a820:	4000f100 	.word	0x4000f100
    a824:	4001f088 	.word	0x4001f088

0000a828 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    a828:	4808      	ldr	r0, [pc, #32]	; (a84c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    a82a:	b510      	push	{r4, lr}
    a82c:	7841      	ldrb	r1, [r0, #1]
    a82e:	b149      	cbz	r1, a844 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    a830:	2101      	movs	r1, #1
    a832:	7001      	strb	r1, [r0, #0]
    a834:	4806      	ldr	r0, [pc, #24]	; (a850 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    a836:	2200      	movs	r2, #0
    a838:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    a83c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    a840:	6001      	str	r1, [r0, #0]
    a842:	bd10      	pop	{r4, pc}
    a844:	21c5      	movs	r1, #197	; 0xc5
    a846:	203c      	movs	r0, #60	; 0x3c
    a848:	f7f9 fb00 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a84c:	200002ab 	.word	0x200002ab
    a850:	4000f000 	.word	0x4000f000

0000a854 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a854:	4806      	ldr	r0, [pc, #24]	; (a870 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a856:	7801      	ldrb	r1, [r0, #0]
    a858:	b141      	cbz	r1, a86c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a85a:	4806      	ldr	r0, [pc, #24]	; (a874 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a85c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a860:	2800      	cmp	r0, #0
    a862:	d002      	beq.n	a86a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a864:	4804      	ldr	r0, [pc, #16]	; (a878 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a866:	6800      	ldr	r0, [r0, #0]
    a868:	b2c0      	uxtb	r0, r0
    a86a:	4770      	bx	lr
    a86c:	78c0      	ldrb	r0, [r0, #3]
    a86e:	4770      	bx	lr
    a870:	200002ab 	.word	0x200002ab
    a874:	4000f000 	.word	0x4000f000
    a878:	4000f400 	.word	0x4000f400

0000a87c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a87c:	4901      	ldr	r1, [pc, #4]	; (a884 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a87e:	2001      	movs	r0, #1
    a880:	6088      	str	r0, [r1, #8]
    a882:	4770      	bx	lr
    a884:	4000f000 	.word	0x4000f000

0000a888 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a88c:	2800      	cmp	r0, #0
    a88e:	d02e      	beq.n	a8ee <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a890:	4818      	ldr	r0, [pc, #96]	; (a8f4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a892:	7800      	ldrb	r0, [r0, #0]
    a894:	b1b0      	cbz	r0, a8c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a896:	4d18      	ldr	r5, [pc, #96]	; (a8f8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a898:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a89c:	2800      	cmp	r0, #0
    a89e:	d126      	bne.n	a8ee <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a8a0:	2702      	movs	r7, #2
    a8a2:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a8a6:	4c15      	ldr	r4, [pc, #84]	; (a8fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a8a8:	6820      	ldr	r0, [r4, #0]
    a8aa:	43c0      	mvns	r0, r0
    a8ac:	f340 1600 	sbfx	r6, r0, #4, #1
    a8b0:	6820      	ldr	r0, [r4, #0]
    a8b2:	f040 0010 	orr.w	r0, r0, #16
    a8b6:	6020      	str	r0, [r4, #0]
    a8b8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a8bc:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a8c0:	1c76      	adds	r6, r6, #1
    a8c2:	e009      	b.n	a8d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    a8c4:	f240 1153 	movw	r1, #339	; 0x153
    a8c8:	203c      	movs	r0, #60	; 0x3c
    a8ca:	f7f9 fabf 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8ce:	bf00      	nop
    a8d0:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a8d4:	f7f9 f934 	bl	3b40 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a8d8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a8dc:	2800      	cmp	r0, #0
    a8de:	d0f7      	beq.n	a8d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    a8e0:	b91e      	cbnz	r6, a8ea <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a8e2:	6820      	ldr	r0, [r4, #0]
    a8e4:	f020 0010 	bic.w	r0, r0, #16
    a8e8:	6020      	str	r0, [r4, #0]
    a8ea:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8f2:	0000      	.short	0x0000
    a8f4:	200002ab 	.word	0x200002ab
    a8f8:	4000f000 	.word	0x4000f000
    a8fc:	e000ed10 	.word	0xe000ed10
    a900:	4902      	ldr	r1, [pc, #8]	; (a90c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    a902:	4801      	ldr	r0, [pc, #4]	; (a908 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    a904:	6008      	str	r0, [r1, #0]
    a906:	4770      	bx	lr
    a908:	02020000 	.word	0x02020000
    a90c:	4001f508 	.word	0x4001f508

0000a910 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a910:	b510      	push	{r4, lr}
    a912:	4604      	mov	r4, r0
    a914:	f000 f822 	bl	a95c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a918:	2c00      	cmp	r4, #0
    a91a:	d017      	beq.n	a94c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a91c:	4a0c      	ldr	r2, [pc, #48]	; (a950 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a91e:	480c      	ldr	r0, [pc, #48]	; (a950 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a920:	490c      	ldr	r1, [pc, #48]	; (a954 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a922:	3214      	adds	r2, #20
    a924:	4b0c      	ldr	r3, [pc, #48]	; (a958 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a926:	2c01      	cmp	r4, #1
    a928:	d005      	beq.n	a936 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a92a:	2c02      	cmp	r4, #2
    a92c:	d008      	beq.n	a940 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a92e:	2183      	movs	r1, #131	; 0x83
    a930:	203d      	movs	r0, #61	; 0x3d
    a932:	f7f9 fa8b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a936:	2402      	movs	r4, #2
    a938:	6004      	str	r4, [r0, #0]
    a93a:	6011      	str	r1, [r2, #0]
    a93c:	0620      	lsls	r0, r4, #24
    a93e:	e004      	b.n	a94a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a940:	2403      	movs	r4, #3
    a942:	6004      	str	r4, [r0, #0]
    a944:	6011      	str	r1, [r2, #0]
    a946:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a94a:	6018      	str	r0, [r3, #0]
    a94c:	bd10      	pop	{r4, pc}
    a94e:	0000      	.short	0x0000
    a950:	4000f500 	.word	0x4000f500
    a954:	200015e3 	.word	0x200015e3
    a958:	4001f504 	.word	0x4001f504
    a95c:	4804      	ldr	r0, [pc, #16]	; (a970 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a95e:	2100      	movs	r1, #0
    a960:	6001      	str	r1, [r0, #0]
    a962:	6001      	str	r1, [r0, #0]
    a964:	4903      	ldr	r1, [pc, #12]	; (a974 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a966:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a96a:	6008      	str	r0, [r1, #0]
    a96c:	4770      	bx	lr
    a96e:	0000      	.short	0x0000
    a970:	4000f500 	.word	0x4000f500
    a974:	4001f508 	.word	0x4001f508

0000a978 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a978:	4805      	ldr	r0, [pc, #20]	; (a990 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a97a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a97e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a982:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a986:	2100      	movs	r1, #0
    a988:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    a98c:	4770      	bx	lr
    a98e:	0000      	.short	0x0000
    a990:	40001000 	.word	0x40001000

0000a994 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a994:	4904      	ldr	r1, [pc, #16]	; (a9a8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a996:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    a99a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    a99e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    a9a2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    a9a6:	4770      	bx	lr
    a9a8:	40001000 	.word	0x40001000

0000a9ac <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a9ac:	4801      	ldr	r0, [pc, #4]	; (a9b4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a9ae:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    a9b2:	4770      	bx	lr
    a9b4:	2000109c 	.word	0x2000109c

0000a9b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9ba:	4c23      	ldr	r4, [pc, #140]	; (aa48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    a9bc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a9c0:	f010 0f10 	tst.w	r0, #16
    a9c4:	d001      	beq.n	a9ca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    a9c6:	2701      	movs	r7, #1
    a9c8:	e000      	b.n	a9cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    a9ca:	2700      	movs	r7, #0
    a9cc:	2010      	movs	r0, #16
    a9ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    a9d2:	2002      	movs	r0, #2
    a9d4:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a9d8:	481c      	ldr	r0, [pc, #112]	; (aa4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    a9da:	2500      	movs	r5, #0
    a9dc:	491d      	ldr	r1, [pc, #116]	; (aa54 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    a9de:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a9e2:	481b      	ldr	r0, [pc, #108]	; (aa50 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    a9e4:	6008      	str	r0, [r1, #0]
    a9e6:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    a9ea:	f44f 7688 	mov.w	r6, #272	; 0x110
    a9ee:	f010 0fff 	tst.w	r0, #255	; 0xff
    a9f2:	d018      	beq.n	aa26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a9f4:	20ff      	movs	r0, #255	; 0xff
    a9f6:	f88d 0000 	strb.w	r0, [sp]
    a9fa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a9fe:	2001      	movs	r0, #1
    aa00:	6120      	str	r0, [r4, #16]
    aa02:	e004      	b.n	aa0e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    aa04:	f89d 0000 	ldrb.w	r0, [sp]
    aa08:	1e40      	subs	r0, r0, #1
    aa0a:	f88d 0000 	strb.w	r0, [sp]
    aa0e:	f89d 0000 	ldrb.w	r0, [sp]
    aa12:	b128      	cbz	r0, aa20 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    aa14:	4631      	mov	r1, r6
    aa16:	4620      	mov	r0, r4
    aa18:	f005 f98f 	bl	fd3a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    aa1c:	2800      	cmp	r0, #0
    aa1e:	d0f1      	beq.n	aa04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    aa20:	f89d 0000 	ldrb.w	r0, [sp]
    aa24:	b158      	cbz	r0, aa3e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    aa26:	f000 fcdb 	bl	b3e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    aa2a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    aa2e:	f000 fe57 	bl	b6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    aa32:	2f00      	cmp	r7, #0
    aa34:	d002      	beq.n	aa3c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    aa36:	2010      	movs	r0, #16
    aa38:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    aa3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa3e:	f240 718f 	movw	r1, #1935	; 0x78f
    aa42:	203e      	movs	r0, #62	; 0x3e
    aa44:	f7f9 fa02 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aa48:	40001000 	.word	0x40001000
    aa4c:	2000109c 	.word	0x2000109c
    aa50:	0c0e0000 	.word	0x0c0e0000
    aa54:	4001f508 	.word	0x4001f508

0000aa58 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa5c:	4d20      	ldr	r5, [pc, #128]	; (aae0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    aa5e:	4607      	mov	r7, r0
    aa60:	4688      	mov	r8, r1
    aa62:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    aa66:	07c1      	lsls	r1, r0, #31
    aa68:	d018      	beq.n	aa9c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    aa6a:	4a1e      	ldr	r2, [pc, #120]	; (aae4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    aa6c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    aa70:	6011      	str	r1, [r2, #0]
    aa72:	4c1d      	ldr	r4, [pc, #116]	; (aae8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    aa74:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    aa78:	f041 0101 	orr.w	r1, r1, #1
    aa7c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    aa80:	f040 0002 	orr.w	r0, r0, #2
    aa84:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    aa88:	4640      	mov	r0, r8
    aa8a:	f000 fe8d 	bl	b7a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aa8e:	f000 fc45 	bl	b31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    aa92:	2601      	movs	r6, #1
    aa94:	b13f      	cbz	r7, aaa6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    aa96:	2f01      	cmp	r7, #1
    aa98:	d00e      	beq.n	aab8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    aa9a:	e016      	b.n	aaca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aa9c:	f240 611a 	movw	r1, #1562	; 0x61a
    aaa0:	203e      	movs	r0, #62	; 0x3e
    aaa2:	f7f9 f9d3 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaa6:	4640      	mov	r0, r8
    aaa8:	f000 fc68 	bl	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    aaac:	4640      	mov	r0, r8
    aaae:	f000 fc19 	bl	b2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    aab2:	726e      	strb	r6, [r5, #9]
    aab4:	6026      	str	r6, [r4, #0]
    aab6:	e008      	b.n	aaca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    aab8:	f000 fc88 	bl	b3cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    aabc:	f000 fdd6 	bl	b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    aac0:	2002      	movs	r0, #2
    aac2:	7268      	strb	r0, [r5, #9]
    aac4:	f000 fcfa 	bl	b4bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    aac8:	6066      	str	r6, [r4, #4]
    aaca:	4808      	ldr	r0, [pc, #32]	; (aaec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    aacc:	64c6      	str	r6, [r0, #76]	; 0x4c
    aace:	4807      	ldr	r0, [pc, #28]	; (aaec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    aad0:	300c      	adds	r0, #12
    aad2:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    aad6:	4638      	mov	r0, r7
    aad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    aadc:	f005 b915 	b.w	fd0a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    aae0:	2000109c 	.word	0x2000109c
    aae4:	4001f504 	.word	0x4001f504
    aae8:	40001000 	.word	0x40001000
    aaec:	40008000 	.word	0x40008000

0000aaf0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    aaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aaf4:	4d35      	ldr	r5, [pc, #212]	; (abcc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    aaf6:	4606      	mov	r6, r0
    aaf8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    aafc:	4689      	mov	r9, r1
    aafe:	6028      	str	r0, [r5, #0]
    ab00:	4c33      	ldr	r4, [pc, #204]	; (abd0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    ab02:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    ab06:	f040 0002 	orr.w	r0, r0, #2
    ab0a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    ab0e:	4608      	mov	r0, r1
    ab10:	f000 fe4a 	bl	b7a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ab14:	f000 fc02 	bl	b31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    ab18:	f8df 80b8 	ldr.w	r8, [pc, #184]	; abd4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    ab1c:	2700      	movs	r7, #0
    ab1e:	b116      	cbz	r6, ab26 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    ab20:	2e01      	cmp	r6, #1
    ab22:	d027      	beq.n	ab74 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    ab24:	e03f      	b.n	aba6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ab26:	4648      	mov	r0, r9
    ab28:	f000 fc28 	bl	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    ab2c:	79e0      	ldrb	r0, [r4, #7]
    ab2e:	2801      	cmp	r0, #1
    ab30:	d105      	bne.n	ab3e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    ab32:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ab36:	f041 0108 	orr.w	r1, r1, #8
    ab3a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ab3e:	4648      	mov	r0, r9
    ab40:	f000 fbd0 	bl	b2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    ab44:	2001      	movs	r0, #1
    ab46:	7260      	strb	r0, [r4, #9]
    ab48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab4a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    ab4e:	62a0      	str	r0, [r4, #40]	; 0x28
    ab50:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ab54:	6028      	str	r0, [r5, #0]
    ab56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab5a:	f1b9 0f02 	cmp.w	r9, #2
    ab5e:	d007      	beq.n	ab70 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    ab60:	f640 0034 	movw	r0, #2100	; 0x834
    ab64:	f649 72ec 	movw	r2, #40940	; 0x9fec
    ab68:	4410      	add	r0, r2
    ab6a:	fbb0 f7f1 	udiv	r7, r0, r1
    ab6e:	e01a      	b.n	aba6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ab70:	4608      	mov	r0, r1
    ab72:	e7f7      	b.n	ab64 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    ab74:	f000 fc2a 	bl	b3cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    ab78:	f000 fd78 	bl	b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    ab7c:	79e0      	ldrb	r0, [r4, #7]
    ab7e:	2801      	cmp	r0, #1
    ab80:	d105      	bne.n	ab8e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    ab82:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ab86:	f041 0104 	orr.w	r1, r1, #4
    ab8a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ab8e:	2002      	movs	r0, #2
    ab90:	7260      	strb	r0, [r4, #9]
    ab92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ab94:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ab98:	62a0      	str	r0, [r4, #40]	; 0x28
    ab9a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ab9e:	6028      	str	r0, [r5, #0]
    aba0:	2729      	movs	r7, #41	; 0x29
    aba2:	f000 fc8b 	bl	b4bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    aba6:	f000 fc75 	bl	b494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    abaa:	f001 f843 	bl	bc34 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    abae:	6800      	ldr	r0, [r0, #0]
    abb0:	2801      	cmp	r0, #1
    abb2:	d006      	beq.n	abc2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    abb4:	2100      	movs	r1, #0
    abb6:	4630      	mov	r0, r6
    abb8:	f005 f8a7 	bl	fd0a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    abbc:	4638      	mov	r0, r7
    abbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abc2:	f7ff fef9 	bl	a9b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    abc6:	2000      	movs	r0, #0
    abc8:	e7f9      	b.n	abbe <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    abca:	0000      	.short	0x0000
    abcc:	4001f504 	.word	0x4001f504
    abd0:	2000109c 	.word	0x2000109c
    abd4:	40001000 	.word	0x40001000

0000abd8 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    abd8:	4a02      	ldr	r2, [pc, #8]	; (abe4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    abda:	6b13      	ldr	r3, [r2, #48]	; 0x30
    abdc:	6003      	str	r3, [r0, #0]
    abde:	6b50      	ldr	r0, [r2, #52]	; 0x34
    abe0:	6008      	str	r0, [r1, #0]
    abe2:	4770      	bx	lr
    abe4:	2000109c 	.word	0x2000109c

0000abe8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    abe8:	b510      	push	{r4, lr}
    abea:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    abec:	4901      	ldr	r1, [pc, #4]	; (abf4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    abee:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    abf2:	bd10      	pop	{r4, pc}
    abf4:	2000108c 	.word	0x2000108c

0000abf8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    abf8:	490f      	ldr	r1, [pc, #60]	; (ac38 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    abfa:	b510      	push	{r4, lr}
    abfc:	69ca      	ldr	r2, [r1, #28]
    abfe:	4282      	cmp	r2, r0
    ac00:	d302      	bcc.n	ac08 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ac02:	f640 010a 	movw	r1, #2058	; 0x80a
    ac06:	e00b      	b.n	ac20 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    ac08:	2201      	movs	r2, #1
    ac0a:	730a      	strb	r2, [r1, #12]
    ac0c:	6108      	str	r0, [r1, #16]
    ac0e:	490b      	ldr	r1, [pc, #44]	; (ac3c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ac10:	644a      	str	r2, [r1, #68]	; 0x44
    ac12:	1d0a      	adds	r2, r1, #4
    ac14:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    ac18:	4283      	cmp	r3, r0
    ac1a:	d304      	bcc.n	ac26 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    ac1c:	f640 0113 	movw	r1, #2067	; 0x813
    ac20:	203e      	movs	r0, #62	; 0x3e
    ac22:	f7f9 f913 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac26:	2300      	movs	r3, #0
    ac28:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ac2c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ac30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac34:	f000 bd28 	b.w	b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    ac38:	2000109c 	.word	0x2000109c
    ac3c:	40008000 	.word	0x40008000

0000ac40 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ac40:	b570      	push	{r4, r5, r6, lr}
    ac42:	4c11      	ldr	r4, [pc, #68]	; (ac88 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    ac44:	4606      	mov	r6, r0
    ac46:	2002      	movs	r0, #2
    ac48:	7320      	strb	r0, [r4, #12]
    ac4a:	2596      	movs	r5, #150	; 0x96
    ac4c:	f000 f86e 	bl	ad2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    ac50:	4602      	mov	r2, r0
    ac52:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ac56:	f894 1020 	ldrb.w	r1, [r4, #32]
    ac5a:	2801      	cmp	r0, #1
    ac5c:	d00f      	beq.n	ac7e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    ac5e:	4628      	mov	r0, r5
    ac60:	f005 f875 	bl	fd4e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ac64:	6120      	str	r0, [r4, #16]
    ac66:	4809      	ldr	r0, [pc, #36]	; (ac8c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ac68:	2100      	movs	r1, #0
    ac6a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ac6e:	6921      	ldr	r1, [r4, #16]
    ac70:	69e0      	ldr	r0, [r4, #28]
    ac72:	4408      	add	r0, r1
    ac74:	4905      	ldr	r1, [pc, #20]	; (ac8c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ac76:	1d09      	adds	r1, r1, #4
    ac78:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    ac7c:	bd70      	pop	{r4, r5, r6, pc}
    ac7e:	4633      	mov	r3, r6
    ac80:	4628      	mov	r0, r5
    ac82:	f005 f880 	bl	fd86 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ac86:	e7ed      	b.n	ac64 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ac88:	2000109c 	.word	0x2000109c
    ac8c:	40008000 	.word	0x40008000

0000ac90 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ac90:	b510      	push	{r4, lr}
    ac92:	f001 f914 	bl	bebe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ac96:	2800      	cmp	r0, #0
    ac98:	d006      	beq.n	aca8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    ac9a:	4804      	ldr	r0, [pc, #16]	; (acac <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ac9c:	6801      	ldr	r1, [r0, #0]
    ac9e:	f021 0101 	bic.w	r1, r1, #1
    aca2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    aca6:	6001      	str	r1, [r0, #0]
    aca8:	bd10      	pop	{r4, pc}
    acaa:	0000      	.short	0x0000
    acac:	40001774 	.word	0x40001774

0000acb0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acb4:	2238      	movs	r2, #56	; 0x38
    acb6:	2100      	movs	r1, #0
    acb8:	4813      	ldr	r0, [pc, #76]	; (ad08 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    acba:	f001 f9b0 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    acbe:	f000 fd0f 	bl	b6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    acc2:	f001 f8b5 	bl	be30 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    acc6:	4d11      	ldr	r5, [pc, #68]	; (ad0c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acc8:	4e10      	ldr	r6, [pc, #64]	; (ad0c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acca:	2400      	movs	r4, #0
    accc:	4f0f      	ldr	r7, [pc, #60]	; (ad0c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    acce:	3508      	adds	r5, #8
    acd0:	3610      	adds	r6, #16
    acd2:	b928      	cbnz	r0, ace0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    acd4:	f001 f8c3 	bl	be5e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    acd8:	b910      	cbnz	r0, ace0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    acda:	f001 f8ca 	bl	be72 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    acde:	b108      	cbz	r0, ace4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ace0:	2224      	movs	r2, #36	; 0x24
    ace2:	e006      	b.n	acf2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ace4:	f001 f905 	bl	bef2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ace8:	b910      	cbnz	r0, acf0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    acea:	f001 f8f8 	bl	bede <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    acee:	b140      	cbz	r0, ad02 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    acf0:	2240      	movs	r2, #64	; 0x40
    acf2:	21ff      	movs	r1, #255	; 0xff
    acf4:	4638      	mov	r0, r7
    acf6:	f001 f992 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    acfa:	602c      	str	r4, [r5, #0]
    acfc:	6034      	str	r4, [r6, #0]
    acfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad02:	2238      	movs	r2, #56	; 0x38
    ad04:	e7f5      	b.n	acf2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ad06:	0000      	.short	0x0000
    ad08:	2000109c 	.word	0x2000109c
    ad0c:	40000e00 	.word	0x40000e00

0000ad10 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    ad10:	4805      	ldr	r0, [pc, #20]	; (ad28 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    ad12:	b510      	push	{r4, lr}
    ad14:	69c0      	ldr	r0, [r0, #28]
    ad16:	2800      	cmp	r0, #0
    ad18:	d104      	bne.n	ad24 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    ad1a:	f240 11fb 	movw	r1, #507	; 0x1fb
    ad1e:	203e      	movs	r0, #62	; 0x3e
    ad20:	f7f9 f894 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad24:	bd10      	pop	{r4, pc}
    ad26:	0000      	.short	0x0000
    ad28:	2000109c 	.word	0x2000109c

0000ad2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    ad2c:	4814      	ldr	r0, [pc, #80]	; (ad80 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    ad2e:	b510      	push	{r4, lr}
    ad30:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    ad34:	7a40      	ldrb	r0, [r0, #9]
    ad36:	b141      	cbz	r1, ad4a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    ad38:	2902      	cmp	r1, #2
    ad3a:	d00b      	beq.n	ad54 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad3c:	2802      	cmp	r0, #2
    ad3e:	d009      	beq.n	ad54 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    ad40:	2901      	cmp	r1, #1
    ad42:	d00b      	beq.n	ad5c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad44:	2801      	cmp	r0, #1
    ad46:	d009      	beq.n	ad5c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    ad48:	e016      	b.n	ad78 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    ad4a:	2800      	cmp	r0, #0
    ad4c:	d1f6      	bne.n	ad3c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    ad4e:	f240 117d 	movw	r1, #381	; 0x17d
    ad52:	e00e      	b.n	ad72 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    ad54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad58:	f000 bc38 	b.w	b5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    ad5c:	4809      	ldr	r0, [pc, #36]	; (ad84 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    ad5e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    ad62:	f000 000f 	and.w	r0, r0, #15
    ad66:	2803      	cmp	r0, #3
    ad68:	d006      	beq.n	ad78 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    ad6a:	2804      	cmp	r0, #4
    ad6c:	d006      	beq.n	ad7c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    ad6e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    ad72:	203e      	movs	r0, #62	; 0x3e
    ad74:	f7f9 f86a 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad78:	2001      	movs	r0, #1
    ad7a:	bd10      	pop	{r4, pc}
    ad7c:	2002      	movs	r0, #2
    ad7e:	bd10      	pop	{r4, pc}
    ad80:	2000109c 	.word	0x2000109c
    ad84:	40001000 	.word	0x40001000

0000ad88 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ad88:	4805      	ldr	r0, [pc, #20]	; (ada0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    ad8a:	b510      	push	{r4, lr}
    ad8c:	6980      	ldr	r0, [r0, #24]
    ad8e:	2800      	cmp	r0, #0
    ad90:	d104      	bne.n	ad9c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    ad92:	f240 11f5 	movw	r1, #501	; 0x1f5
    ad96:	203e      	movs	r0, #62	; 0x3e
    ad98:	f7f9 f858 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad9c:	bd10      	pop	{r4, pc}
    ad9e:	0000      	.short	0x0000
    ada0:	2000109c 	.word	0x2000109c

0000ada4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ada4:	b510      	push	{r4, lr}
    ada6:	f000 fc7d 	bl	b6a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    adaa:	f7ff fe05 	bl	a9b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    adae:	f004 ff42 	bl	fc36 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    adb2:	480f      	ldr	r0, [pc, #60]	; (adf0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    adb4:	4a0f      	ldr	r2, [pc, #60]	; (adf4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    adb6:	6a81      	ldr	r1, [r0, #40]	; 0x28
    adb8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    adbc:	6011      	str	r1, [r2, #0]
    adbe:	2400      	movs	r4, #0
    adc0:	6284      	str	r4, [r0, #40]	; 0x28
    adc2:	7304      	strb	r4, [r0, #12]
    adc4:	61c4      	str	r4, [r0, #28]
    adc6:	6184      	str	r4, [r0, #24]
    adc8:	f000 fc6c 	bl	b6a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    adcc:	480a      	ldr	r0, [pc, #40]	; (adf8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    adce:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    add2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    add6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    adda:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    adde:	2001      	movs	r0, #1
    ade0:	f004 ff62 	bl	fca8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ade4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ade8:	2001      	movs	r0, #1
    adea:	f004 bf50 	b.w	fc8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    adee:	0000      	.short	0x0000
    adf0:	2000109c 	.word	0x2000109c
    adf4:	4001f508 	.word	0x4001f508
    adf8:	40008000 	.word	0x40008000

0000adfc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    adfc:	b570      	push	{r4, r5, r6, lr}
    adfe:	2001      	movs	r0, #1
    ae00:	f004 ff52 	bl	fca8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ae04:	4c37      	ldr	r4, [pc, #220]	; (aee4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    ae06:	2000      	movs	r0, #0
    ae08:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ae0c:	2001      	movs	r0, #1
    ae0e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    ae12:	f001 f844 	bl	be9e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ae16:	4d34      	ldr	r5, [pc, #208]	; (aee8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae18:	b118      	cbz	r0, ae22 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    ae1a:	6828      	ldr	r0, [r5, #0]
    ae1c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ae20:	6028      	str	r0, [r5, #0]
    ae22:	f001 f830 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ae26:	b128      	cbz	r0, ae34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    ae28:	6828      	ldr	r0, [r5, #0]
    ae2a:	4930      	ldr	r1, [pc, #192]	; (aeec <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ae2c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ae30:	4308      	orrs	r0, r1
    ae32:	6028      	str	r0, [r5, #0]
    ae34:	f001 f843 	bl	bebe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae38:	b138      	cbz	r0, ae4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    ae3a:	482b      	ldr	r0, [pc, #172]	; (aee8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae3c:	1d00      	adds	r0, r0, #4
    ae3e:	6801      	ldr	r1, [r0, #0]
    ae40:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ae44:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ae48:	6001      	str	r1, [r0, #0]
    ae4a:	4927      	ldr	r1, [pc, #156]	; (aee8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae4c:	4828      	ldr	r0, [pc, #160]	; (aef0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ae4e:	313c      	adds	r1, #60	; 0x3c
    ae50:	6008      	str	r0, [r1, #0]
    ae52:	f7f8 fee3 	bl	3c1c <mpsl_fem_device_config_254_apply_get>
    ae56:	b140      	cbz	r0, ae6a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ae58:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ae5c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ae60:	1c41      	adds	r1, r0, #1
    ae62:	d002      	beq.n	ae6a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ae64:	4920      	ldr	r1, [pc, #128]	; (aee8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ae66:	3110      	adds	r1, #16
    ae68:	6008      	str	r0, [r1, #0]
    ae6a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ae6e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ae70:	1c41      	adds	r1, r0, #1
    ae72:	d004      	beq.n	ae7e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    ae74:	491f      	ldr	r1, [pc, #124]	; (aef4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ae76:	680a      	ldr	r2, [r1, #0]
    ae78:	f360 4217 	bfi	r2, r0, #16, #8
    ae7c:	600a      	str	r2, [r1, #0]
    ae7e:	f240 1103 	movw	r1, #259	; 0x103
    ae82:	f240 605b 	movw	r0, #1627	; 0x65b
    ae86:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ae8a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ae8e:	2001      	movs	r0, #1
    ae90:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    ae94:	f000 fc88 	bl	b7a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ae98:	f240 1001 	movw	r0, #257	; 0x101
    ae9c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    aea0:	2002      	movs	r0, #2
    aea2:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    aea6:	4915      	ldr	r1, [pc, #84]	; (aefc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    aea8:	4813      	ldr	r0, [pc, #76]	; (aef8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    aeaa:	6008      	str	r0, [r1, #0]
    aeac:	4914      	ldr	r1, [pc, #80]	; (af00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    aeae:	2000      	movs	r0, #0
    aeb0:	4d14      	ldr	r5, [pc, #80]	; (af04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    aeb2:	8608      	strh	r0, [r1, #48]	; 0x30
    aeb4:	3110      	adds	r1, #16
    aeb6:	61c8      	str	r0, [r1, #28]
    aeb8:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    aebc:	7028      	strb	r0, [r5, #0]
    aebe:	2001      	movs	r0, #1
    aec0:	f004 fee5 	bl	fc8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aec4:	2010      	movs	r0, #16
    aec6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    aeca:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    aece:	2002      	movs	r0, #2
    aed0:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    aed4:	6868      	ldr	r0, [r5, #4]
    aed6:	2800      	cmp	r0, #0
    aed8:	d002      	beq.n	aee0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    aeda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aede:	4700      	bx	r0
    aee0:	bd70      	pop	{r4, r5, r6, pc}
    aee2:	0000      	.short	0x0000
    aee4:	40001000 	.word	0x40001000
    aee8:	4000173c 	.word	0x4000173c
    aeec:	80000096 	.word	0x80000096
    aef0:	8900002c 	.word	0x8900002c
    aef4:	4000158c 	.word	0x4000158c
    aef8:	0c0e0000 	.word	0x0c0e0000
    aefc:	4001f508 	.word	0x4001f508
    af00:	2000108c 	.word	0x2000108c
    af04:	20000274 	.word	0x20000274

0000af08 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    af08:	4901      	ldr	r1, [pc, #4]	; (af10 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    af0a:	7508      	strb	r0, [r1, #20]
    af0c:	4770      	bx	lr
    af0e:	0000      	.short	0x0000
    af10:	2000109c 	.word	0x2000109c

0000af14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    af14:	4905      	ldr	r1, [pc, #20]	; (af2c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    af16:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    af1a:	4805      	ldr	r0, [pc, #20]	; (af30 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    af1c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    af20:	f041 0101 	orr.w	r1, r1, #1
    af24:	7001      	strb	r1, [r0, #0]
    af26:	f000 ba7b 	b.w	b420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    af2a:	0000      	.short	0x0000
    af2c:	40001000 	.word	0x40001000
    af30:	2000109c 	.word	0x2000109c

0000af34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    af34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af38:	4e36      	ldr	r6, [pc, #216]	; (b014 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    af3a:	4607      	mov	r7, r0
    af3c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    af40:	4689      	mov	r9, r1
    af42:	4614      	mov	r4, r2
    af44:	6030      	str	r0, [r6, #0]
    af46:	4610      	mov	r0, r2
    af48:	f000 fc2e 	bl	b7a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    af4c:	f000 f9e6 	bl	b31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    af50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; b018 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    af54:	4d31      	ldr	r5, [pc, #196]	; (b01c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    af56:	f04f 0801 	mov.w	r8, #1
    af5a:	b127      	cbz	r7, af66 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    af5c:	2f01      	cmp	r7, #1
    af5e:	d01d      	beq.n	af9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    af60:	f240 710f 	movw	r1, #1807	; 0x70f
    af64:	e04c      	b.n	b000 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    af66:	4620      	mov	r0, r4
    af68:	f000 fa08 	bl	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    af6c:	4620      	mov	r0, r4
    af6e:	f000 f9b9 	bl	b2e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    af72:	2c02      	cmp	r4, #2
    af74:	d00f      	beq.n	af96 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    af76:	f640 0034 	movw	r0, #2100	; 0x834
    af7a:	bf00      	nop
    af7c:	f649 51f8 	movw	r1, #40440	; 0x9df8
    af80:	4401      	add	r1, r0
    af82:	4648      	mov	r0, r9
    af84:	f000 fbb4 	bl	b6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    af88:	4604      	mov	r4, r0
    af8a:	4650      	mov	r0, sl
    af8c:	f000 fb9c 	bl	b6c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    af90:	f885 8009 	strb.w	r8, [r5, #9]
    af94:	e014      	b.n	afc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    af96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    af9a:	e7ef      	b.n	af7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    af9c:	f000 fa16 	bl	b3cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    afa0:	f000 fb64 	bl	b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    afa4:	f000 fa8a 	bl	b4bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    afa8:	f649 71ba 	movw	r1, #40890	; 0x9fba
    afac:	4648      	mov	r0, r9
    afae:	f000 fb9f 	bl	b6f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    afb2:	4604      	mov	r4, r0
    afb4:	4818      	ldr	r0, [pc, #96]	; (b018 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    afb6:	1d00      	adds	r0, r0, #4
    afb8:	f000 fb86 	bl	b6c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    afbc:	2002      	movs	r0, #2
    afbe:	7268      	strb	r0, [r5, #9]
    afc0:	f8df 905c 	ldr.w	r9, [pc, #92]	; b020 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    afc4:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    afc8:	4917      	ldr	r1, [pc, #92]	; (b028 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    afca:	4816      	ldr	r0, [pc, #88]	; (b024 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    afcc:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    afd0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    afd2:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    afd6:	62a8      	str	r0, [r5, #40]	; 0x28
    afd8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    afdc:	6030      	str	r0, [r6, #0]
    afde:	2010      	movs	r0, #16
    afe0:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    afe4:	03c0      	lsls	r0, r0, #15
    afe6:	6030      	str	r0, [r6, #0]
    afe8:	f000 fa54 	bl	b494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    afec:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    aff0:	480b      	ldr	r0, [pc, #44]	; (b020 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    aff2:	300c      	adds	r0, #12
    aff4:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    aff8:	42a0      	cmp	r0, r4
    affa:	d304      	bcc.n	b006 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    affc:	f240 7136 	movw	r1, #1846	; 0x736
    b000:	203e      	movs	r0, #62	; 0x3e
    b002:	f7f8 ff23 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b006:	4621      	mov	r1, r4
    b008:	4638      	mov	r0, r7
    b00a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b00e:	f004 be7c 	b.w	fd0a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b012:	0000      	.short	0x0000
    b014:	4001f504 	.word	0x4001f504
    b018:	40001000 	.word	0x40001000
    b01c:	2000109c 	.word	0x2000109c
    b020:	40008000 	.word	0x40008000
    b024:	40008140 	.word	0x40008140
    b028:	4001f098 	.word	0x4001f098

0000b02c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    b02c:	4b0d      	ldr	r3, [pc, #52]	; (b064 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    b02e:	b510      	push	{r4, lr}
    b030:	71d8      	strb	r0, [r3, #7]
    b032:	729a      	strb	r2, [r3, #10]
    b034:	b151      	cbz	r1, b04c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    b036:	2002      	movs	r0, #2
    b038:	7218      	strb	r0, [r3, #8]
    b03a:	2801      	cmp	r0, #1
    b03c:	d008      	beq.n	b050 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    b03e:	2802      	cmp	r0, #2
    b040:	d00f      	beq.n	b062 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b042:	f640 1112 	movw	r1, #2322	; 0x912
    b046:	203e      	movs	r0, #62	; 0x3e
    b048:	f7f8 ff00 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b04c:	2001      	movs	r0, #1
    b04e:	e7f3      	b.n	b038 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    b050:	7a58      	ldrb	r0, [r3, #9]
    b052:	2802      	cmp	r0, #2
    b054:	d105      	bne.n	b062 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    b056:	f000 f9b9 	bl	b3cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b05e:	f000 bb05 	b.w	b66c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b062:	bd10      	pop	{r4, pc}
    b064:	2000109c 	.word	0x2000109c

0000b068 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    b068:	4902      	ldr	r1, [pc, #8]	; (b074 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    b06a:	2000      	movs	r0, #0
    b06c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b070:	4770      	bx	lr
    b072:	0000      	.short	0x0000
    b074:	40008000 	.word	0x40008000

0000b078 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    b078:	b538      	push	{r3, r4, r5, lr}
    b07a:	4c0b      	ldr	r4, [pc, #44]	; (b0a8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    b07c:	4605      	mov	r5, r0
    b07e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    b082:	4620      	mov	r0, r4
    b084:	f004 fe59 	bl	fd3a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b088:	2800      	cmp	r0, #0
    b08a:	d00c      	beq.n	b0a6 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    b08c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    b090:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    b094:	4240      	negs	r0, r0
    b096:	7028      	strb	r0, [r5, #0]
    b098:	2000      	movs	r0, #0
    b09a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    b09e:	4803      	ldr	r0, [pc, #12]	; (b0ac <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    b0a0:	6800      	ldr	r0, [r0, #0]
    b0a2:	9000      	str	r0, [sp, #0]
    b0a4:	2001      	movs	r0, #1
    b0a6:	bd38      	pop	{r3, r4, r5, pc}
    b0a8:	40001000 	.word	0x40001000
    b0ac:	4000111c 	.word	0x4000111c

0000b0b0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    b0b0:	4903      	ldr	r1, [pc, #12]	; (b0c0 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    b0b2:	0e02      	lsrs	r2, r0, #24
    b0b4:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    b0b8:	0200      	lsls	r0, r0, #8
    b0ba:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    b0be:	4770      	bx	lr
    b0c0:	40001000 	.word	0x40001000

0000b0c4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    b0c4:	6800      	ldr	r0, [r0, #0]
    b0c6:	4903      	ldr	r1, [pc, #12]	; (b0d4 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    b0c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b0cc:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b0d0:	4770      	bx	lr
    b0d2:	0000      	.short	0x0000
    b0d4:	40001000 	.word	0x40001000

0000b0d8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    b0d8:	b510      	push	{r4, lr}
    b0da:	f000 fb41 	bl	b760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    b0de:	4807      	ldr	r0, [pc, #28]	; (b0fc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    b0e0:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b0e4:	b2c0      	uxtb	r0, r0
    b0e6:	2803      	cmp	r0, #3
    b0e8:	d001      	beq.n	b0ee <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    b0ea:	280b      	cmp	r0, #11
    b0ec:	d104      	bne.n	b0f8 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    b0ee:	f44f 7121 	mov.w	r1, #644	; 0x284
    b0f2:	203e      	movs	r0, #62	; 0x3e
    b0f4:	f7f8 feaa 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0f8:	bd10      	pop	{r4, pc}
    b0fa:	0000      	.short	0x0000
    b0fc:	40001000 	.word	0x40001000

0000b100 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    b100:	4901      	ldr	r1, [pc, #4]	; (b108 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    b102:	7548      	strb	r0, [r1, #21]
    b104:	4770      	bx	lr
    b106:	0000      	.short	0x0000
    b108:	2000109c 	.word	0x2000109c

0000b10c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b110:	4853      	ldr	r0, [pc, #332]	; (b260 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b112:	f04f 0a01 	mov.w	sl, #1
    b116:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    b11a:	4851      	ldr	r0, [pc, #324]	; (b260 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b11c:	300c      	adds	r0, #12
    b11e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    b122:	4850      	ldr	r0, [pc, #320]	; (b264 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b124:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    b128:	4c4f      	ldr	r4, [pc, #316]	; (b268 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    b12a:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    b12e:	f000 f957 	bl	b3e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b132:	494e      	ldr	r1, [pc, #312]	; (b26c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    b134:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b136:	6008      	str	r0, [r1, #0]
    b138:	f8df 9134 	ldr.w	r9, [pc, #308]	; b270 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    b13c:	2600      	movs	r6, #0
    b13e:	62a6      	str	r6, [r4, #40]	; 0x28
    b140:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    b144:	f240 121d 	movw	r2, #285	; 0x11d
    b148:	4391      	bics	r1, r2
    b14a:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    b14e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    b152:	f000 f9c5 	bl	b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    b156:	4605      	mov	r5, r0
    b158:	4841      	ldr	r0, [pc, #260]	; (b260 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    b15a:	3008      	adds	r0, #8
    b15c:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b160:	61e0      	str	r0, [r4, #28]
    b162:	f7ff fde3 	bl	ad2c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b166:	f884 0020 	strb.w	r0, [r4, #32]
    b16a:	7a60      	ldrb	r0, [r4, #9]
    b16c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b170:	61a6      	str	r6, [r4, #24]
    b172:	4e40      	ldr	r6, [pc, #256]	; (b274 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    b174:	07a8      	lsls	r0, r5, #30
    b176:	d502      	bpl.n	b17e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    b178:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b17c:	61a0      	str	r0, [r4, #24]
    b17e:	0728      	lsls	r0, r5, #28
    b180:	d502      	bpl.n	b188 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    b182:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    b186:	61a0      	str	r0, [r4, #24]
    b188:	f04f 0800 	mov.w	r8, #0
    b18c:	4639      	mov	r1, r7
    b18e:	4628      	mov	r0, r5
    b190:	f000 fa32 	bl	b5f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    b194:	b918      	cbnz	r0, b19e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    b196:	f8c9 a010 	str.w	sl, [r9, #16]
    b19a:	f04f 0801 	mov.w	r8, #1
    b19e:	4f32      	ldr	r7, [pc, #200]	; (b268 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    b1a0:	07e8      	lsls	r0, r5, #31
    b1a2:	f1a7 0710 	sub.w	r7, r7, #16
    b1a6:	d002      	beq.n	b1ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    b1a8:	6838      	ldr	r0, [r7, #0]
    b1aa:	4780      	blx	r0
    b1ac:	e031      	b.n	b212 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    b1ae:	07a8      	lsls	r0, r5, #30
    b1b0:	d526      	bpl.n	b200 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    b1b2:	0768      	lsls	r0, r5, #29
    b1b4:	d41e      	bmi.n	b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1b6:	f000 fe82 	bl	bebe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b1ba:	b9d8      	cbnz	r0, b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1bc:	f000 fe6f 	bl	be9e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b1c0:	b9c0      	cbnz	r0, b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1c2:	482d      	ldr	r0, [pc, #180]	; (b278 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    b1c4:	6800      	ldr	r0, [r0, #0]
    b1c6:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b1ca:	f3c0 6100 	ubfx	r1, r0, #24, #1
    b1ce:	f000 030f 	and.w	r3, r0, #15
    b1d2:	f3c0 1203 	ubfx	r2, r0, #4, #4
    b1d6:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b1da:	b159      	cbz	r1, b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1dc:	b10b      	cbz	r3, b1e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    b1de:	b102      	cbz	r2, b1e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    b1e0:	b940      	cbnz	r0, b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1e2:	4825      	ldr	r0, [pc, #148]	; (b278 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    b1e4:	1d00      	adds	r0, r0, #4
    b1e6:	6800      	ldr	r0, [r0, #0]
    b1e8:	b120      	cbz	r0, b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1ea:	f1bc 0f03 	cmp.w	ip, #3
    b1ee:	d201      	bcs.n	b1f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    b1f0:	f045 0504 	orr.w	r5, r5, #4
    b1f4:	f345 0080 	sbfx	r0, r5, #2, #1
    b1f8:	4641      	mov	r1, r8
    b1fa:	1c40      	adds	r0, r0, #1
    b1fc:	687a      	ldr	r2, [r7, #4]
    b1fe:	e007      	b.n	b210 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    b200:	f015 0f28 	tst.w	r5, #40	; 0x28
    b204:	d005      	beq.n	b212 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    b206:	f345 1140 	sbfx	r1, r5, #5, #1
    b20a:	68ba      	ldr	r2, [r7, #8]
    b20c:	4640      	mov	r0, r8
    b20e:	1c49      	adds	r1, r1, #1
    b210:	4790      	blx	r2
    b212:	06e8      	lsls	r0, r5, #27
    b214:	d501      	bpl.n	b21a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    b216:	68f8      	ldr	r0, [r7, #12]
    b218:	4780      	blx	r0
    b21a:	7a60      	ldrb	r0, [r4, #9]
    b21c:	2802      	cmp	r0, #2
    b21e:	d11c      	bne.n	b25a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    b220:	7b20      	ldrb	r0, [r4, #12]
    b222:	2800      	cmp	r0, #0
    b224:	d019      	beq.n	b25a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    b226:	2802      	cmp	r0, #2
    b228:	d004      	beq.n	b234 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    b22a:	2801      	cmp	r0, #1
    b22c:	d006      	beq.n	b23c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    b22e:	f640 21e1 	movw	r1, #2785	; 0xae1
    b232:	e009      	b.n	b248 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    b234:	6921      	ldr	r1, [r4, #16]
    b236:	69e0      	ldr	r0, [r4, #28]
    b238:	4408      	add	r0, r1
    b23a:	e008      	b.n	b24e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    b23c:	69e1      	ldr	r1, [r4, #28]
    b23e:	6920      	ldr	r0, [r4, #16]
    b240:	4288      	cmp	r0, r1
    b242:	d804      	bhi.n	b24e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    b244:	f640 21e2 	movw	r1, #2786	; 0xae2
    b248:	203e      	movs	r0, #62	; 0x3e
    b24a:	f7f8 fdff 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b24e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    b252:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b256:	f000 ba17 	b.w	b688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    b25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b25e:	0000      	.short	0x0000
    b260:	40008000 	.word	0x40008000
    b264:	4000b000 	.word	0x4000b000
    b268:	2000109c 	.word	0x2000109c
    b26c:	4001f508 	.word	0x4001f508
    b270:	40001000 	.word	0x40001000
    b274:	40008004 	.word	0x40008004
    b278:	40001450 	.word	0x40001450

0000b27c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b27c:	b570      	push	{r4, r5, r6, lr}
    b27e:	4b15      	ldr	r3, [pc, #84]	; (b2d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    b280:	888c      	ldrh	r4, [r1, #4]
    b282:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    b286:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    b28a:	780c      	ldrb	r4, [r1, #0]
    b28c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b290:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b294:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    b298:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    b29c:	2101      	movs	r1, #1
    b29e:	4081      	lsls	r1, r0
    b2a0:	430c      	orrs	r4, r1
    b2a2:	b2e4      	uxtb	r4, r4
    b2a4:	b132      	cbz	r2, b2b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    b2a6:	2a01      	cmp	r2, #1
    b2a8:	d00a      	beq.n	b2c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    b2aa:	f240 41ac 	movw	r1, #1196	; 0x4ac
    b2ae:	203e      	movs	r0, #62	; 0x3e
    b2b0:	f7f8 fdcc 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2b4:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b2b8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    b2bc:	4388      	bics	r0, r1
    b2be:	e004      	b.n	b2ca <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    b2c0:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    b2c4:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    b2c8:	b2c0      	uxtb	r0, r0
    b2ca:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    b2ce:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b2d2:	bd70      	pop	{r4, r5, r6, pc}
    b2d4:	40001000 	.word	0x40001000

0000b2d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b2d8:	4901      	ldr	r1, [pc, #4]	; (b2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b2da:	2001      	movs	r0, #1
    b2dc:	7008      	strb	r0, [r1, #0]
    b2de:	4770      	bx	lr
    b2e0:	20000274 	.word	0x20000274
    b2e4:	b510      	push	{r4, lr}
    b2e6:	4604      	mov	r4, r0
    b2e8:	f000 fde9 	bl	bebe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b2ec:	2800      	cmp	r0, #0
    b2ee:	d00e      	beq.n	b30e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    b2f0:	4a09      	ldr	r2, [pc, #36]	; (b318 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b2f2:	6811      	ldr	r1, [r2, #0]
    b2f4:	0650      	lsls	r0, r2, #25
    b2f6:	2c02      	cmp	r4, #2
    b2f8:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b2fc:	d008      	beq.n	b310 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    b2fe:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b302:	bf00      	nop
    b304:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b308:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b30c:	6010      	str	r0, [r2, #0]
    b30e:	bd10      	pop	{r4, pc}
    b310:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b314:	e7f6      	b.n	b304 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b316:	0000      	.short	0x0000
    b318:	40001588 	.word	0x40001588
    b31c:	4815      	ldr	r0, [pc, #84]	; (b374 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    b31e:	7d41      	ldrb	r1, [r0, #21]
    b320:	2925      	cmp	r1, #37	; 0x25
    b322:	d00a      	beq.n	b33a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    b324:	2926      	cmp	r1, #38	; 0x26
    b326:	d00b      	beq.n	b340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    b328:	2927      	cmp	r1, #39	; 0x27
    b32a:	d00c      	beq.n	b346 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    b32c:	7d40      	ldrb	r0, [r0, #21]
    b32e:	0040      	lsls	r0, r0, #1
    b330:	290a      	cmp	r1, #10
    b332:	d80b      	bhi.n	b34c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    b334:	f600 1064 	addw	r0, r0, #2404	; 0x964
    b338:	e00a      	b.n	b350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    b33a:	f640 1062 	movw	r0, #2402	; 0x962
    b33e:	e00f      	b.n	b360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b340:	f640 107a 	movw	r0, #2426	; 0x97a
    b344:	e00c      	b.n	b360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b346:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    b34a:	e009      	b.n	b360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b34c:	f600 1066 	addw	r0, r0, #2406	; 0x966
    b350:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    b354:	d204      	bcs.n	b360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    b356:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    b35a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b35e:	e001      	b.n	b364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    b360:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    b364:	4a04      	ldr	r2, [pc, #16]	; (b378 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    b366:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    b36a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    b36e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    b372:	4770      	bx	lr
    b374:	2000109c 	.word	0x2000109c
    b378:	40001000 	.word	0x40001000
    b37c:	4912      	ldr	r1, [pc, #72]	; (b3c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    b37e:	b508      	push	{r3, lr}
    b380:	f991 2014 	ldrsb.w	r2, [r1, #20]
    b384:	7d49      	ldrb	r1, [r1, #21]
    b386:	2801      	cmp	r0, #1
    b388:	d00a      	beq.n	b3a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    b38a:	2802      	cmp	r0, #2
    b38c:	d00a      	beq.n	b3a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    b38e:	2804      	cmp	r0, #4
    b390:	d00a      	beq.n	b3a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    b392:	2808      	cmp	r0, #8
    b394:	d00a      	beq.n	b3ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b396:	f240 31ed 	movw	r1, #1005	; 0x3ed
    b39a:	2006      	movs	r0, #6
    b39c:	f7f8 fd56 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3a0:	2000      	movs	r0, #0
    b3a2:	e004      	b.n	b3ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b3a4:	2001      	movs	r0, #1
    b3a6:	e002      	b.n	b3ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b3a8:	2003      	movs	r0, #3
    b3aa:	e000      	b.n	b3ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    b3ac:	2002      	movs	r0, #2
    b3ae:	466b      	mov	r3, sp
    b3b0:	f7f5 f820 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b3b4:	b118      	cbz	r0, b3be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    b3b6:	f240 41de 	movw	r1, #1246	; 0x4de
    b3ba:	203e      	movs	r0, #62	; 0x3e
    b3bc:	e7ee      	b.n	b39c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    b3be:	f99d 0000 	ldrsb.w	r0, [sp]
    b3c2:	f000 f9eb 	bl	b79c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b3c6:	bd08      	pop	{r3, pc}
    b3c8:	2000109c 	.word	0x2000109c
    b3cc:	4803      	ldr	r0, [pc, #12]	; (b3dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    b3ce:	7a01      	ldrb	r1, [r0, #8]
    b3d0:	2901      	cmp	r1, #1
    b3d2:	d102      	bne.n	b3da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    b3d4:	7a80      	ldrb	r0, [r0, #10]
    b3d6:	f7ff bfd1 	b.w	b37c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b3da:	4770      	bx	lr
    b3dc:	2000109c 	.word	0x2000109c
    b3e0:	4805      	ldr	r0, [pc, #20]	; (b3f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    b3e2:	7a40      	ldrb	r0, [r0, #9]
    b3e4:	2801      	cmp	r0, #1
    b3e6:	d003      	beq.n	b3f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    b3e8:	2802      	cmp	r0, #2
    b3ea:	d103      	bne.n	b3f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    b3ec:	f004 bc0b 	b.w	fc06 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b3f0:	f004 bc15 	b.w	fc1e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b3f4:	4770      	bx	lr
    b3f6:	0000      	.short	0x0000
    b3f8:	2000109c 	.word	0x2000109c
    b3fc:	4807      	ldr	r0, [pc, #28]	; (b41c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    b3fe:	2100      	movs	r1, #0
    b400:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b404:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b408:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b40c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b410:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b414:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b418:	4770      	bx	lr
    b41a:	0000      	.short	0x0000
    b41c:	40001000 	.word	0x40001000
    b420:	4818      	ldr	r0, [pc, #96]	; (b484 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    b422:	b510      	push	{r4, lr}
    b424:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b428:	07c1      	lsls	r1, r0, #31
    b42a:	d029      	beq.n	b480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b42c:	0781      	lsls	r1, r0, #30
    b42e:	d514      	bpl.n	b45a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    b430:	4815      	ldr	r0, [pc, #84]	; (b488 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    b432:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b436:	f041 0101 	orr.w	r1, r1, #1
    b43a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b43e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    b442:	b2c0      	uxtb	r0, r0
    b444:	280b      	cmp	r0, #11
    b446:	d005      	beq.n	b454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b448:	280a      	cmp	r0, #10
    b44a:	d003      	beq.n	b454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b44c:	2803      	cmp	r0, #3
    b44e:	d001      	beq.n	b454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    b450:	2802      	cmp	r0, #2
    b452:	d115      	bne.n	b480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b454:	f240 510f 	movw	r1, #1295	; 0x50f
    b458:	e00f      	b.n	b47a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    b45a:	0740      	lsls	r0, r0, #29
    b45c:	d510      	bpl.n	b480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b45e:	480a      	ldr	r0, [pc, #40]	; (b488 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    b460:	490a      	ldr	r1, [pc, #40]	; (b48c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    b462:	3008      	adds	r0, #8
    b464:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b468:	f44f 71a0 	mov.w	r1, #320	; 0x140
    b46c:	4808      	ldr	r0, [pc, #32]	; (b490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    b46e:	f004 fc69 	bl	fd44 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    b472:	2800      	cmp	r0, #0
    b474:	d004      	beq.n	b480 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    b476:	f240 5117 	movw	r1, #1303	; 0x517
    b47a:	203e      	movs	r0, #62	; 0x3e
    b47c:	f7f8 fce6 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b480:	bd10      	pop	{r4, pc}
    b482:	0000      	.short	0x0000
    b484:	2000109c 	.word	0x2000109c
    b488:	40001000 	.word	0x40001000
    b48c:	4001f098 	.word	0x4001f098
    b490:	40008000 	.word	0x40008000
    b494:	4808      	ldr	r0, [pc, #32]	; (b4b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    b496:	4601      	mov	r1, r0
    b498:	79c2      	ldrb	r2, [r0, #7]
    b49a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b49e:	b112      	cbz	r2, b4a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    b4a0:	2a01      	cmp	r2, #1
    b4a2:	d003      	beq.n	b4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    b4a4:	e006      	b.n	b4b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    b4a6:	f041 0102 	orr.w	r1, r1, #2
    b4aa:	e001      	b.n	b4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    b4ac:	f041 0104 	orr.w	r1, r1, #4
    b4b0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b4b4:	f7ff bfb4 	b.w	b420 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    b4b8:	2000109c 	.word	0x2000109c
    b4bc:	b510      	push	{r4, lr}
    b4be:	f000 fcfe 	bl	bebe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b4c2:	2800      	cmp	r0, #0
    b4c4:	d108      	bne.n	b4d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    b4c6:	f000 fcea 	bl	be9e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b4ca:	2800      	cmp	r0, #0
    b4cc:	d104      	bne.n	b4d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    b4ce:	4803      	ldr	r0, [pc, #12]	; (b4dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    b4d0:	6801      	ldr	r1, [r0, #0]
    b4d2:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b4d6:	6001      	str	r1, [r0, #0]
    b4d8:	bd10      	pop	{r4, pc}
    b4da:	0000      	.short	0x0000
    b4dc:	40001568 	.word	0x40001568
    b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4e4:	4d35      	ldr	r5, [pc, #212]	; (b5bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    b4e6:	2400      	movs	r4, #0
    b4e8:	7b28      	ldrb	r0, [r5, #12]
    b4ea:	b138      	cbz	r0, b4fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b4ec:	f44f 71a2 	mov.w	r1, #324	; 0x144
    b4f0:	4833      	ldr	r0, [pc, #204]	; (b5c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    b4f2:	f004 fc27 	bl	fd44 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    b4f6:	b108      	cbz	r0, b4fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b4f8:	2601      	movs	r6, #1
    b4fa:	e000      	b.n	b4fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    b4fc:	2600      	movs	r6, #0
    b4fe:	7a68      	ldrb	r0, [r5, #9]
    b500:	4f30      	ldr	r7, [pc, #192]	; (b5c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    b502:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b506:	2801      	cmp	r0, #1
    b508:	d002      	beq.n	b510 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    b50a:	2802      	cmp	r0, #2
    b50c:	d008      	beq.n	b520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b50e:	e018      	b.n	b542 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b510:	4638      	mov	r0, r7
    b512:	f004 fc12 	bl	fd3a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b516:	b108      	cbz	r0, b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    b518:	2408      	movs	r4, #8
    b51a:	e012      	b.n	b542 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b51c:	2400      	movs	r4, #0
    b51e:	e010      	b.n	b542 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    b520:	4638      	mov	r0, r7
    b522:	f004 fc0a 	bl	fd3a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b526:	b100      	cbz	r0, b52a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    b528:	2002      	movs	r0, #2
    b52a:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    b52e:	43c9      	mvns	r1, r1
    b530:	f341 0100 	sbfx	r1, r1, #0, #1
    b534:	1c49      	adds	r1, r1, #1
    b536:	d001      	beq.n	b53c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    b538:	2400      	movs	r4, #0
    b53a:	e000      	b.n	b53e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    b53c:	2404      	movs	r4, #4
    b53e:	4304      	orrs	r4, r0
    b540:	4334      	orrs	r4, r6
    b542:	f014 0f0b 	tst.w	r4, #11
    b546:	d107      	bne.n	b558 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    b548:	f44f 7188 	mov.w	r1, #272	; 0x110
    b54c:	4638      	mov	r0, r7
    b54e:	f004 fbf4 	bl	fd3a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b552:	b100      	cbz	r0, b556 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    b554:	2010      	movs	r0, #16
    b556:	4304      	orrs	r4, r0
    b558:	481b      	ldr	r0, [pc, #108]	; (b5c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    b55a:	7800      	ldrb	r0, [r0, #0]
    b55c:	b1f8      	cbz	r0, b59e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    b55e:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    b562:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    b566:	d007      	beq.n	b578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    b568:	f44f 718a 	mov.w	r1, #276	; 0x114
    b56c:	4638      	mov	r0, r7
    b56e:	f004 fbe4 	bl	fd3a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b572:	b108      	cbz	r0, b578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    b574:	2001      	movs	r0, #1
    b576:	e000      	b.n	b57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    b578:	2000      	movs	r0, #0
    b57a:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    b57e:	b13e      	cbz	r6, b590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    b580:	f44f 718c 	mov.w	r1, #280	; 0x118
    b584:	4638      	mov	r0, r7
    b586:	f004 fbd8 	bl	fd3a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b58a:	b108      	cbz	r0, b590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    b58c:	2001      	movs	r0, #1
    b58e:	e000      	b.n	b592 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    b590:	2000      	movs	r0, #0
    b592:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b596:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    b59a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b59e:	f7ff ff2d 	bl	b3fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    b5a2:	06e0      	lsls	r0, r4, #27
    b5a4:	d506      	bpl.n	b5b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b5a6:	0720      	lsls	r0, r4, #28
    b5a8:	d404      	bmi.n	b5b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b5aa:	7a68      	ldrb	r0, [r5, #9]
    b5ac:	2801      	cmp	r0, #1
    b5ae:	d101      	bne.n	b5b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    b5b0:	f044 0420 	orr.w	r4, r4, #32
    b5b4:	4620      	mov	r0, r4
    b5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5ba:	0000      	.short	0x0000
    b5bc:	2000109c 	.word	0x2000109c
    b5c0:	40008000 	.word	0x40008000
    b5c4:	40001000 	.word	0x40001000
    b5c8:	20000274 	.word	0x20000274
    b5cc:	4809      	ldr	r0, [pc, #36]	; (b5f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    b5ce:	b510      	push	{r4, lr}
    b5d0:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b5d4:	f000 000f 	and.w	r0, r0, #15
    b5d8:	2803      	cmp	r0, #3
    b5da:	d006      	beq.n	b5ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    b5dc:	2804      	cmp	r0, #4
    b5de:	d006      	beq.n	b5ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    b5e0:	f240 11dd 	movw	r1, #477	; 0x1dd
    b5e4:	203e      	movs	r0, #62	; 0x3e
    b5e6:	f7f8 fc31 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5ea:	2001      	movs	r0, #1
    b5ec:	bd10      	pop	{r4, pc}
    b5ee:	2002      	movs	r0, #2
    b5f0:	bd10      	pop	{r4, pc}
    b5f2:	0000      	.short	0x0000
    b5f4:	40001000 	.word	0x40001000
    b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5fc:	4c19      	ldr	r4, [pc, #100]	; (b664 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    b5fe:	460d      	mov	r5, r1
    b600:	7a21      	ldrb	r1, [r4, #8]
    b602:	b129      	cbz	r1, b610 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    b604:	f010 0f11 	tst.w	r0, #17
    b608:	d00b      	beq.n	b622 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    b60a:	f7ff f9d5 	bl	a9b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b60e:	e027      	b.n	b660 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    b610:	4915      	ldr	r1, [pc, #84]	; (b668 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    b612:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b616:	6008      	str	r0, [r1, #0]
    b618:	f000 f862 	bl	b6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b61c:	2000      	movs	r0, #0
    b61e:	7320      	strb	r0, [r4, #12]
    b620:	e01e      	b.n	b660 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    b622:	2901      	cmp	r1, #1
    b624:	d001      	beq.n	b62a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    b626:	2601      	movs	r6, #1
    b628:	e000      	b.n	b62c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    b62a:	2600      	movs	r6, #0
    b62c:	79e0      	ldrb	r0, [r4, #7]
    b62e:	2801      	cmp	r0, #1
    b630:	d00e      	beq.n	b650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    b632:	2700      	movs	r7, #0
    b634:	f000 f854 	bl	b6e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b638:	2196      	movs	r1, #150	; 0x96
    b63a:	4630      	mov	r0, r6
    b63c:	f000 f866 	bl	b70c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    b640:	4601      	mov	r1, r0
    b642:	b14f      	cbz	r7, b658 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    b644:	353b      	adds	r5, #59	; 0x3b
    b646:	428d      	cmp	r5, r1
    b648:	d904      	bls.n	b654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    b64a:	2000      	movs	r0, #0
    b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b650:	2701      	movs	r7, #1
    b652:	e7ef      	b.n	b634 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b654:	2001      	movs	r0, #1
    b656:	71e0      	strb	r0, [r4, #7]
    b658:	7aa2      	ldrb	r2, [r4, #10]
    b65a:	4630      	mov	r0, r6
    b65c:	f7ff fc6a 	bl	af34 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b660:	2001      	movs	r0, #1
    b662:	e7f3      	b.n	b64c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b664:	2000109c 	.word	0x2000109c
    b668:	4001f508 	.word	0x4001f508
    b66c:	4805      	ldr	r0, [pc, #20]	; (b684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    b66e:	2100      	movs	r1, #0
    b670:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b674:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b678:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b67c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b680:	4770      	bx	lr
    b682:	0000      	.short	0x0000
    b684:	40001000 	.word	0x40001000
    b688:	4804      	ldr	r0, [pc, #16]	; (b69c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    b68a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b68c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b690:	6281      	str	r1, [r0, #40]	; 0x28
    b692:	4903      	ldr	r1, [pc, #12]	; (b6a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    b694:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b698:	6008      	str	r0, [r1, #0]
    b69a:	4770      	bx	lr
    b69c:	2000109c 	.word	0x2000109c
    b6a0:	4001f504 	.word	0x4001f504
    b6a4:	4a07      	ldr	r2, [pc, #28]	; (b6c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b6a6:	2000      	movs	r0, #0
    b6a8:	3208      	adds	r2, #8
    b6aa:	4906      	ldr	r1, [pc, #24]	; (b6c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b6ac:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6b0:	1d0a      	adds	r2, r1, #4
    b6b2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b6b6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6ba:	4902      	ldr	r1, [pc, #8]	; (b6c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b6bc:	310c      	adds	r1, #12
    b6be:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b6c2:	4770      	bx	lr
    b6c4:	40008000 	.word	0x40008000
    b6c8:	4903      	ldr	r1, [pc, #12]	; (b6d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    b6ca:	79c9      	ldrb	r1, [r1, #7]
    b6cc:	2900      	cmp	r1, #0
    b6ce:	d102      	bne.n	b6d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    b6d0:	4902      	ldr	r1, [pc, #8]	; (b6dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    b6d2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b6d6:	4770      	bx	lr
    b6d8:	2000109c 	.word	0x2000109c
    b6dc:	4001f098 	.word	0x4001f098
    b6e0:	4802      	ldr	r0, [pc, #8]	; (b6ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    b6e2:	2100      	movs	r1, #0
    b6e4:	71c1      	strb	r1, [r0, #7]
    b6e6:	7201      	strb	r1, [r0, #8]
    b6e8:	7241      	strb	r1, [r0, #9]
    b6ea:	4770      	bx	lr
    b6ec:	2000109c 	.word	0x2000109c
    b6f0:	4a05      	ldr	r2, [pc, #20]	; (b708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    b6f2:	79d2      	ldrb	r2, [r2, #7]
    b6f4:	2a01      	cmp	r2, #1
    b6f6:	d006      	beq.n	b706 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    b6f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b6fc:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b700:	fbb1 f1f2 	udiv	r1, r1, r2
    b704:	1a40      	subs	r0, r0, r1
    b706:	4770      	bx	lr
    b708:	2000109c 	.word	0x2000109c
    b70c:	b570      	push	{r4, r5, r6, lr}
    b70e:	4c13      	ldr	r4, [pc, #76]	; (b75c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    b710:	4603      	mov	r3, r0
    b712:	460d      	mov	r5, r1
    b714:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b718:	2000      	movs	r0, #0
    b71a:	b15a      	cbz	r2, b734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    b71c:	4621      	mov	r1, r4
    b71e:	f891 1020 	ldrb.w	r1, [r1, #32]
    b722:	b163      	cbz	r3, b73e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    b724:	2b01      	cmp	r3, #1
    b726:	d111      	bne.n	b74c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    b728:	2a01      	cmp	r2, #1
    b72a:	4628      	mov	r0, r5
    b72c:	d012      	beq.n	b754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    b72e:	f004 fb4e 	bl	fdce <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b732:	e009      	b.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b734:	f240 7152 	movw	r1, #1874	; 0x752
    b738:	203e      	movs	r0, #62	; 0x3e
    b73a:	f7f8 fb87 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b73e:	2a01      	cmp	r2, #1
    b740:	4628      	mov	r0, r5
    b742:	d004      	beq.n	b74e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    b744:	f004 fb51 	bl	fdea <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b748:	69e1      	ldr	r1, [r4, #28]
    b74a:	4408      	add	r0, r1
    b74c:	bd70      	pop	{r4, r5, r6, pc}
    b74e:	f004 fb66 	bl	fe1e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b752:	e7f9      	b.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b754:	f004 fb54 	bl	fe00 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b758:	e7f6      	b.n	b748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    b75a:	0000      	.short	0x0000
    b75c:	2000109c 	.word	0x2000109c
    b760:	b510      	push	{r4, lr}
    b762:	2200      	movs	r2, #0
    b764:	2901      	cmp	r1, #1
    b766:	d008      	beq.n	b77a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    b768:	2902      	cmp	r1, #2
    b76a:	d004      	beq.n	b776 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    b76c:	f240 2163 	movw	r1, #611	; 0x263
    b770:	203e      	movs	r0, #62	; 0x3e
    b772:	f7f8 fb6b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b77a:	4905      	ldr	r1, [pc, #20]	; (b790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    b77c:	430a      	orrs	r2, r1
    b77e:	4905      	ldr	r1, [pc, #20]	; (b794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    b780:	600a      	str	r2, [r1, #0]
    b782:	4905      	ldr	r1, [pc, #20]	; (b798 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    b784:	4308      	orrs	r0, r1
    b786:	4903      	ldr	r1, [pc, #12]	; (b794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    b788:	1d09      	adds	r1, r1, #4
    b78a:	6008      	str	r0, [r1, #0]
    b78c:	bd10      	pop	{r4, pc}
    b78e:	0000      	.short	0x0000
    b790:	00100108 	.word	0x00100108
    b794:	40001514 	.word	0x40001514
    b798:	02030000 	.word	0x02030000

0000b79c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b79c:	4901      	ldr	r1, [pc, #4]	; (b7a4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b79e:	b2c0      	uxtb	r0, r0
    b7a0:	6008      	str	r0, [r1, #0]
    b7a2:	4770      	bx	lr
    b7a4:	4000150c 	.word	0x4000150c

0000b7a8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b7a8:	b510      	push	{r4, lr}
    b7aa:	4907      	ldr	r1, [pc, #28]	; (b7c8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b7ac:	2801      	cmp	r0, #1
    b7ae:	d005      	beq.n	b7bc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b7b0:	2802      	cmp	r0, #2
    b7b2:	d005      	beq.n	b7c0 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b7b4:	218b      	movs	r1, #139	; 0x8b
    b7b6:	203f      	movs	r0, #63	; 0x3f
    b7b8:	f7f8 fb48 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7bc:	2003      	movs	r0, #3
    b7be:	e000      	b.n	b7c2 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b7c0:	2004      	movs	r0, #4
    b7c2:	6008      	str	r0, [r1, #0]
    b7c4:	bd10      	pop	{r4, pc}
    b7c6:	0000      	.short	0x0000
    b7c8:	40001510 	.word	0x40001510

0000b7cc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b7cc:	4770      	bx	lr
    b7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7d2:	000d      	movs	r5, r1
    b7d4:	4604      	mov	r4, r0
    b7d6:	f04f 0602 	mov.w	r6, #2
    b7da:	f04f 0701 	mov.w	r7, #1
    b7de:	d008      	beq.n	b7f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x26>
    b7e0:	7828      	ldrb	r0, [r5, #0]
    b7e2:	b1d0      	cbz	r0, b81a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b7e4:	2801      	cmp	r0, #1
    b7e6:	d007      	beq.n	b7f8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c>
    b7e8:	2802      	cmp	r0, #2
    b7ea:	d014      	beq.n	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b7ec:	2803      	cmp	r0, #3
    b7ee:	d13b      	bne.n	b868 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b7f0:	e016      	b.n	b820 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x54>
    b7f2:	f880 7020 	strb.w	r7, [r0, #32]
    b7f6:	e00e      	b.n	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b7f8:	6868      	ldr	r0, [r5, #4]
    b7fa:	28c8      	cmp	r0, #200	; 0xc8
    b7fc:	d303      	bcc.n	b806 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3a>
    b7fe:	2104      	movs	r1, #4
    b800:	f7f5 fe22 	bl	1448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    b804:	b108      	cbz	r0, b80a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x3e>
    b806:	2600      	movs	r6, #0
    b808:	e007      	b.n	b81a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b80a:	4620      	mov	r0, r4
    b80c:	6869      	ldr	r1, [r5, #4]
    b80e:	f000 f92a 	bl	ba66 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b812:	2601      	movs	r6, #1
    b814:	e001      	b.n	b81a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4e>
    b816:	f7f4 fe35 	bl	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
    b81a:	4630      	mov	r0, r6
    b81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b820:	7820      	ldrb	r0, [r4, #0]
    b822:	2800      	cmp	r0, #0
    b824:	d1f7      	bne.n	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b826:	6868      	ldr	r0, [r5, #4]
    b828:	f7f4 fdfe 	bl	428 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x28>
    b82c:	b1e0      	cbz	r0, b868 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x9c>
    b82e:	6869      	ldr	r1, [r5, #4]
    b830:	7808      	ldrb	r0, [r1, #0]
    b832:	b128      	cbz	r0, b840 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x74>
    b834:	78a0      	ldrb	r0, [r4, #2]
    b836:	2805      	cmp	r0, #5
    b838:	d007      	beq.n	b84a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x7e>
    b83a:	f240 1179 	movw	r1, #377	; 0x179
    b83e:	e010      	b.n	b862 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x96>
    b840:	4620      	mov	r0, r4
    b842:	f000 f918 	bl	ba76 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    b846:	7067      	strb	r7, [r4, #1]
    b848:	e7e5      	b.n	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b84a:	4620      	mov	r0, r4
    b84c:	f000 f92b 	bl	baa6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    b850:	78e0      	ldrb	r0, [r4, #3]
    b852:	f104 010c 	add.w	r1, r4, #12
    b856:	f000 f80a 	bl	b86e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    b85a:	2800      	cmp	r0, #0
    b85c:	d1db      	bne.n	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b85e:	f240 117b 	movw	r1, #379	; 0x17b
    b862:	206a      	movs	r0, #106	; 0x6a
    b864:	f7f8 f846 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b868:	f884 7020 	strb.w	r7, [r4, #32]
    b86c:	e7d3      	b.n	b816 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x4a>
    b86e:	f7f6 b837 	b.w	18e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    b872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b876:	460d      	mov	r5, r1
    b878:	0004      	movs	r4, r0
    b87a:	d00b      	beq.n	b894 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xc8>
    b87c:	7926      	ldrb	r6, [r4, #4]
    b87e:	2700      	movs	r7, #0
    b880:	2002      	movs	r0, #2
    b882:	2d09      	cmp	r5, #9
    b884:	d27b      	bcs.n	b97e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b2>
    b886:	e8df f005 	tbb	[pc, r5]
    b88a:	1008      	.short	0x1008
    b88c:	645b2e2e 	.word	0x645b2e2e
    b890:	0086977c 	.word	0x0086977c
    b894:	f240 1193 	movw	r1, #403	; 0x193
    b898:	e0e2      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b89a:	78a0      	ldrb	r0, [r4, #2]
    b89c:	2804      	cmp	r0, #4
    b89e:	d06f      	beq.n	b980 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1b4>
    b8a0:	2803      	cmp	r0, #3
    b8a2:	d0fc      	beq.n	b89e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xd2>
    b8a4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    b8a8:	e0da      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b8aa:	78a0      	ldrb	r0, [r4, #2]
    b8ac:	2804      	cmp	r0, #4
    b8ae:	d004      	beq.n	b8ba <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b8b0:	2803      	cmp	r0, #3
    b8b2:	d002      	beq.n	b8ba <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xee>
    b8b4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
    b8b8:	e0d2      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b8ba:	2005      	movs	r0, #5
    b8bc:	70a0      	strb	r0, [r4, #2]
    b8be:	f884 7020 	strb.w	r7, [r4, #32]
    b8c2:	7820      	ldrb	r0, [r4, #0]
    b8c4:	bb80      	cbnz	r0, b928 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15c>
    b8c6:	2100      	movs	r1, #0
    b8c8:	4620      	mov	r0, r4
    b8ca:	f000 f8cc 	bl	ba66 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x29a>
    b8ce:	7b20      	ldrb	r0, [r4, #12]
    b8d0:	2801      	cmp	r0, #1
    b8d2:	d004      	beq.n	b8de <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x112>
    b8d4:	69a0      	ldr	r0, [r4, #24]
    b8d6:	61e0      	str	r0, [r4, #28]
    b8d8:	2100      	movs	r1, #0
    b8da:	68a2      	ldr	r2, [r4, #8]
    b8dc:	e041      	b.n	b962 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b8de:	78e0      	ldrb	r0, [r4, #3]
    b8e0:	f7f5 feda 	bl	1698 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    b8e4:	e7f7      	b.n	b8d6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x10a>
    b8e6:	78a1      	ldrb	r1, [r4, #2]
    b8e8:	2904      	cmp	r1, #4
    b8ea:	d004      	beq.n	b8f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b8ec:	2903      	cmp	r1, #3
    b8ee:	d002      	beq.n	b8f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x12a>
    b8f0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    b8f4:	e0b4      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b8f6:	7822      	ldrb	r2, [r4, #0]
    b8f8:	b122      	cbz	r2, b904 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x138>
    b8fa:	4621      	mov	r1, r4
    b8fc:	4630      	mov	r0, r6
    b8fe:	f000 f8ee 	bl	bade <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b902:	e0a4      	b.n	ba4e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b904:	2904      	cmp	r1, #4
    b906:	d000      	beq.n	b90a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x13e>
    b908:	2001      	movs	r0, #1
    b90a:	70a0      	strb	r0, [r4, #2]
    b90c:	68a2      	ldr	r2, [r4, #8]
    b90e:	2d02      	cmp	r5, #2
    b910:	d00b      	beq.n	b92a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x15e>
    b912:	2106      	movs	r1, #6
    b914:	4630      	mov	r0, r6
    b916:	4790      	blx	r2
    b918:	2800      	cmp	r0, #0
    b91a:	d06b      	beq.n	b9f4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b91c:	7800      	ldrb	r0, [r0, #0]
    b91e:	2800      	cmp	r0, #0
    b920:	d068      	beq.n	b9f4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x228>
    b922:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    b926:	e09b      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b928:	e031      	b.n	b98e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b92a:	2105      	movs	r1, #5
    b92c:	4630      	mov	r0, r6
    b92e:	4790      	blx	r2
    b930:	2800      	cmp	r0, #0
    b932:	d071      	beq.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b934:	7800      	ldrb	r0, [r0, #0]
    b936:	2800      	cmp	r0, #0
    b938:	d06e      	beq.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b93a:	f240 11d5 	movw	r1, #469	; 0x1d5
    b93e:	e08f      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b940:	78a0      	ldrb	r0, [r4, #2]
    b942:	2805      	cmp	r0, #5
    b944:	d002      	beq.n	b94c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x180>
    b946:	f240 11e1 	movw	r1, #481	; 0x1e1
    b94a:	e089      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b94c:	2102      	movs	r1, #2
    b94e:	68a2      	ldr	r2, [r4, #8]
    b950:	e007      	b.n	b962 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    b952:	78a0      	ldrb	r0, [r4, #2]
    b954:	2805      	cmp	r0, #5
    b956:	d002      	beq.n	b95e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x192>
    b958:	f240 11e7 	movw	r1, #487	; 0x1e7
    b95c:	e080      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b95e:	68a2      	ldr	r2, [r4, #8]
    b960:	2101      	movs	r1, #1
    b962:	4630      	mov	r0, r6
    b964:	4790      	blx	r2
    b966:	4601      	mov	r1, r0
    b968:	4620      	mov	r0, r4
    b96a:	f7ff ff30 	bl	b7ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b96e:	2802      	cmp	r0, #2
    b970:	d06d      	beq.n	ba4e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b972:	b3f0      	cbz	r0, b9f2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x226>
    b974:	2801      	cmp	r0, #1
    b976:	d064      	beq.n	ba42 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x276>
    b978:	f240 2127 	movw	r1, #551	; 0x227
    b97c:	e070      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b97e:	e05d      	b.n	ba3c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x270>
    b980:	e067      	b.n	ba52 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x286>
    b982:	78a0      	ldrb	r0, [r4, #2]
    b984:	2805      	cmp	r0, #5
    b986:	d002      	beq.n	b98e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1c2>
    b988:	f240 11ed 	movw	r1, #493	; 0x1ed
    b98c:	e068      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b98e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b992:	f7f4 bd77 	b.w	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
    b996:	78a0      	ldrb	r0, [r4, #2]
    b998:	2805      	cmp	r0, #5
    b99a:	d002      	beq.n	b9a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1d6>
    b99c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    b9a0:	e05e      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9a2:	68a2      	ldr	r2, [r4, #8]
    b9a4:	210a      	movs	r1, #10
    b9a6:	4630      	mov	r0, r6
    b9a8:	4790      	blx	r2
    b9aa:	4601      	mov	r1, r0
    b9ac:	4620      	mov	r0, r4
    b9ae:	f7ff ff0e 	bl	b7ce <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b9b2:	f240 11f5 	movw	r1, #501	; 0x1f5
    b9b6:	e053      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9b8:	78a1      	ldrb	r1, [r4, #2]
    b9ba:	2905      	cmp	r1, #5
    b9bc:	d006      	beq.n	b9cc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b9be:	7862      	ldrb	r2, [r4, #1]
    b9c0:	b10a      	cbz	r2, b9c6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x1fa>
    b9c2:	2903      	cmp	r1, #3
    b9c4:	d002      	beq.n	b9cc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x200>
    b9c6:	f240 11f9 	movw	r1, #505	; 0x1f9
    b9ca:	e049      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    b9cc:	7821      	ldrb	r1, [r4, #0]
    b9ce:	b129      	cbz	r1, b9dc <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x210>
    b9d0:	4621      	mov	r1, r4
    b9d2:	4630      	mov	r0, r6
    b9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b9d8:	f000 b881 	b.w	bade <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    b9dc:	f894 1020 	ldrb.w	r1, [r4, #32]
    b9e0:	b189      	cbz	r1, ba06 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x23a>
    b9e2:	f884 7020 	strb.w	r7, [r4, #32]
    b9e6:	70a0      	strb	r0, [r4, #2]
    b9e8:	68a2      	ldr	r2, [r4, #8]
    b9ea:	2108      	movs	r1, #8
    b9ec:	4630      	mov	r0, r6
    b9ee:	4790      	blx	r2
    b9f0:	e001      	b.n	b9f6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x22a>
    b9f2:	e029      	b.n	ba48 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x27c>
    b9f4:	e02b      	b.n	ba4e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x282>
    b9f6:	2800      	cmp	r0, #0
    b9f8:	d00e      	beq.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    b9fa:	7800      	ldrb	r0, [r0, #0]
    b9fc:	2800      	cmp	r0, #0
    b9fe:	d00b      	beq.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba00:	f240 2105 	movw	r1, #517	; 0x205
    ba04:	e02c      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ba06:	7861      	ldrb	r1, [r4, #1]
    ba08:	b159      	cbz	r1, ba22 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x256>
    ba0a:	78e0      	ldrb	r0, [r4, #3]
    ba0c:	f104 010c 	add.w	r1, r4, #12
    ba10:	f7ff ff2d 	bl	b86e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    ba14:	b110      	cbz	r0, ba1c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x250>
    ba16:	7067      	strb	r7, [r4, #1]
    ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba1c:	f240 2109 	movw	r1, #521	; 0x209
    ba20:	e01e      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ba22:	70a0      	strb	r0, [r4, #2]
    ba24:	68a2      	ldr	r2, [r4, #8]
    ba26:	2107      	movs	r1, #7
    ba28:	4630      	mov	r0, r6
    ba2a:	4790      	blx	r2
    ba2c:	2800      	cmp	r0, #0
    ba2e:	d0f3      	beq.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba30:	7800      	ldrb	r0, [r0, #0]
    ba32:	2800      	cmp	r0, #0
    ba34:	d0f0      	beq.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba36:	f240 2111 	movw	r1, #529	; 0x211
    ba3a:	e011      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ba3c:	f240 2116 	movw	r1, #534	; 0x216
    ba40:	e00e      	b.n	ba60 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x294>
    ba42:	2104      	movs	r1, #4
    ba44:	68a2      	ldr	r2, [r4, #8]
    ba46:	e78c      	b.n	b962 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    ba48:	2103      	movs	r1, #3
    ba4a:	68a2      	ldr	r2, [r4, #8]
    ba4c:	e789      	b.n	b962 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x196>
    ba4e:	2d00      	cmp	r5, #0
    ba50:	d1e2      	bne.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba52:	f000 f8f2 	bl	bc3a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>
    ba56:	6800      	ldr	r0, [r0, #0]
    ba58:	2800      	cmp	r0, #0
    ba5a:	d0dd      	beq.n	ba18 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x24c>
    ba5c:	f240 2131 	movw	r1, #561	; 0x231
    ba60:	206a      	movs	r0, #106	; 0x6a
    ba62:	f7f7 ff47 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba66:	4602      	mov	r2, r0
    ba68:	7b03      	ldrb	r3, [r0, #12]
    ba6a:	6900      	ldr	r0, [r0, #16]
    ba6c:	4408      	add	r0, r1
    ba6e:	6110      	str	r0, [r2, #16]
    ba70:	3859      	subs	r0, #89	; 0x59
    ba72:	f7f6 bdc9 	b.w	2608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    ba76:	2201      	movs	r2, #1
    ba78:	7302      	strb	r2, [r0, #12]
    ba7a:	2200      	movs	r2, #0
    ba7c:	75c2      	strb	r2, [r0, #23]
    ba7e:	790a      	ldrb	r2, [r1, #4]
    ba80:	b16a      	cbz	r2, ba9e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d2>
    ba82:	2200      	movs	r2, #0
    ba84:	8282      	strh	r2, [r0, #20]
    ba86:	794a      	ldrb	r2, [r1, #5]
    ba88:	b15a      	cbz	r2, baa2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2d6>
    ba8a:	2204      	movs	r2, #4
    ba8c:	7582      	strb	r2, [r0, #22]
    ba8e:	688a      	ldr	r2, [r1, #8]
    ba90:	326a      	adds	r2, #106	; 0x6a
    ba92:	6102      	str	r2, [r0, #16]
    ba94:	68c9      	ldr	r1, [r1, #12]
    ba96:	6181      	str	r1, [r0, #24]
    ba98:	2103      	movs	r1, #3
    ba9a:	7081      	strb	r1, [r0, #2]
    ba9c:	4770      	bx	lr
    ba9e:	222b      	movs	r2, #43	; 0x2b
    baa0:	e7f0      	b.n	ba84 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2b8>
    baa2:	2203      	movs	r2, #3
    baa4:	e7f2      	b.n	ba8c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2c0>
    baa6:	b510      	push	{r4, lr}
    baa8:	4604      	mov	r4, r0
    baaa:	2000      	movs	r0, #0
    baac:	7320      	strb	r0, [r4, #12]
    baae:	75e0      	strb	r0, [r4, #23]
    bab0:	7908      	ldrb	r0, [r1, #4]
    bab2:	b180      	cbz	r0, bad6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30a>
    bab4:	2000      	movs	r0, #0
    bab6:	82a0      	strh	r0, [r4, #20]
    bab8:	7948      	ldrb	r0, [r1, #5]
    baba:	b170      	cbz	r0, bada <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x30e>
    babc:	2004      	movs	r0, #4
    babe:	75a0      	strb	r0, [r4, #22]
    bac0:	68c8      	ldr	r0, [r1, #12]
    bac2:	306a      	adds	r0, #106	; 0x6a
    bac4:	6120      	str	r0, [r4, #16]
    bac6:	6889      	ldr	r1, [r1, #8]
    bac8:	69e0      	ldr	r0, [r4, #28]
    baca:	f7f5 fd8f 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    bace:	61a0      	str	r0, [r4, #24]
    bad0:	2004      	movs	r0, #4
    bad2:	70a0      	strb	r0, [r4, #2]
    bad4:	bd10      	pop	{r4, pc}
    bad6:	202b      	movs	r0, #43	; 0x2b
    bad8:	e7ed      	b.n	bab6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2ea>
    bada:	2003      	movs	r0, #3
    badc:	e7ef      	b.n	babe <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2f2>
    bade:	b570      	push	{r4, r5, r6, lr}
    bae0:	4605      	mov	r5, r0
    bae2:	460c      	mov	r4, r1
    bae4:	78c8      	ldrb	r0, [r1, #3]
    bae6:	f7f6 fb57 	bl	2198 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    baea:	b178      	cbz	r0, bb0c <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x340>
    baec:	4620      	mov	r0, r4
    baee:	f000 f810 	bl	bb12 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    baf2:	68a2      	ldr	r2, [r4, #8]
    baf4:	2109      	movs	r1, #9
    baf6:	4628      	mov	r0, r5
    baf8:	4790      	blx	r2
    bafa:	2800      	cmp	r0, #0
    bafc:	d008      	beq.n	bb10 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    bafe:	7800      	ldrb	r0, [r0, #0]
    bb00:	2800      	cmp	r0, #0
    bb02:	d005      	beq.n	bb10 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x344>
    bb04:	21db      	movs	r1, #219	; 0xdb
    bb06:	206a      	movs	r0, #106	; 0x6a
    bb08:	f7f7 fef4 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb0c:	21d7      	movs	r1, #215	; 0xd7
    bb0e:	e7fa      	b.n	bb06 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x33a>
    bb10:	bd70      	pop	{r4, r5, r6, pc}
    bb12:	2100      	movs	r1, #0
    bb14:	7081      	strb	r1, [r0, #2]
    bb16:	7001      	strb	r1, [r0, #0]
    bb18:	7041      	strb	r1, [r0, #1]
    bb1a:	4770      	bx	lr

0000bb1c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    bb1c:	b570      	push	{r4, r5, r6, lr}
    bb1e:	f7f4 fd0b 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bb22:	4605      	mov	r5, r0
    bb24:	2400      	movs	r4, #0
    bb26:	e006      	b.n	bb36 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    bb28:	4620      	mov	r0, r4
    bb2a:	f7f4 fd0b 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bb2e:	f7ff fff0 	bl	bb12 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x346>
    bb32:	1c64      	adds	r4, r4, #1
    bb34:	b2e4      	uxtb	r4, r4
    bb36:	42ac      	cmp	r4, r5
    bb38:	d3f6      	bcc.n	bb28 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    bb3a:	bd70      	pop	{r4, r5, r6, pc}

0000bb3c <mpsl_timeslot_request>:
    bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb40:	460d      	mov	r5, r1
    bb42:	f7f4 fcff 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bb46:	0004      	movs	r4, r0
    bb48:	d007      	beq.n	bb5a <mpsl_timeslot_request+0x1e>
    bb4a:	78a0      	ldrb	r0, [r4, #2]
    bb4c:	f06f 0622 	mvn.w	r6, #34	; 0x22
    bb50:	2801      	cmp	r0, #1
    bb52:	d006      	beq.n	bb62 <mpsl_timeslot_request+0x26>
    bb54:	2802      	cmp	r0, #2
    bb56:	d110      	bne.n	bb7a <mpsl_timeslot_request+0x3e>
    bb58:	e003      	b.n	bb62 <mpsl_timeslot_request+0x26>
    bb5a:	f06f 0001 	mvn.w	r0, #1
    bb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb62:	f06f 0715 	mvn.w	r7, #21
    bb66:	b155      	cbz	r5, bb7e <mpsl_timeslot_request+0x42>
    bb68:	4628      	mov	r0, r5
    bb6a:	f7f4 fc5d 	bl	428 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x28>
    bb6e:	b130      	cbz	r0, bb7e <mpsl_timeslot_request+0x42>
    bb70:	7828      	ldrb	r0, [r5, #0]
    bb72:	b130      	cbz	r0, bb82 <mpsl_timeslot_request+0x46>
    bb74:	78a0      	ldrb	r0, [r4, #2]
    bb76:	2802      	cmp	r0, #2
    bb78:	d008      	beq.n	bb8c <mpsl_timeslot_request+0x50>
    bb7a:	4630      	mov	r0, r6
    bb7c:	e7ef      	b.n	bb5e <mpsl_timeslot_request+0x22>
    bb7e:	4638      	mov	r0, r7
    bb80:	e7ed      	b.n	bb5e <mpsl_timeslot_request+0x22>
    bb82:	4629      	mov	r1, r5
    bb84:	4620      	mov	r0, r4
    bb86:	f7ff ff76 	bl	ba76 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2aa>
    bb8a:	e003      	b.n	bb94 <mpsl_timeslot_request+0x58>
    bb8c:	4629      	mov	r1, r5
    bb8e:	4620      	mov	r0, r4
    bb90:	f7ff ff89 	bl	baa6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2da>
    bb94:	78e0      	ldrb	r0, [r4, #3]
    bb96:	f104 010c 	add.w	r1, r4, #12
    bb9a:	f7ff fe68 	bl	b86e <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0xa2>
    bb9e:	b108      	cbz	r0, bba4 <mpsl_timeslot_request+0x68>
    bba0:	2000      	movs	r0, #0
    bba2:	e7dc      	b.n	bb5e <mpsl_timeslot_request+0x22>
    bba4:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    bba8:	206a      	movs	r0, #106	; 0x6a
    bbaa:	f7f7 fea3 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

0000bbae <mpsl_timeslot_session_close>:
    bbae:	b510      	push	{r4, lr}
    bbb0:	4604      	mov	r4, r0
    bbb2:	f7f4 fcc7 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bbb6:	0001      	movs	r1, r0
    bbb8:	d004      	beq.n	bbc4 <mpsl_timeslot_session_close+0x16>
    bbba:	7808      	ldrb	r0, [r1, #0]
    bbbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
    bbc0:	b968      	cbnz	r0, bbde <mpsl_timeslot_session_close+0x30>
    bbc2:	e002      	b.n	bbca <mpsl_timeslot_session_close+0x1c>
    bbc4:	f06f 0001 	mvn.w	r0, #1
    bbc8:	bd10      	pop	{r4, pc}
    bbca:	7888      	ldrb	r0, [r1, #2]
    bbcc:	b138      	cbz	r0, bbde <mpsl_timeslot_session_close+0x30>
    bbce:	2802      	cmp	r0, #2
    bbd0:	d007      	beq.n	bbe2 <mpsl_timeslot_session_close+0x34>
    bbd2:	2801      	cmp	r0, #1
    bbd4:	d005      	beq.n	bbe2 <mpsl_timeslot_session_close+0x34>
    bbd6:	2001      	movs	r0, #1
    bbd8:	7008      	strb	r0, [r1, #0]
    bbda:	2000      	movs	r0, #0
    bbdc:	bd10      	pop	{r4, pc}
    bbde:	4610      	mov	r0, r2
    bbe0:	bd10      	pop	{r4, pc}
    bbe2:	4620      	mov	r0, r4
    bbe4:	f7ff ff7b 	bl	bade <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x312>
    bbe8:	e7f7      	b.n	bbda <mpsl_timeslot_session_close+0x2c>

0000bbea <mpsl_timeslot_session_count_set>:
    bbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbee:	460e      	mov	r6, r1
    bbf0:	4607      	mov	r7, r0
    bbf2:	f7f4 fca1 	bl	538 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    bbf6:	4605      	mov	r5, r0
    bbf8:	2400      	movs	r4, #0
    bbfa:	e00a      	b.n	bc12 <mpsl_timeslot_session_count_set+0x28>
    bbfc:	4620      	mov	r0, r4
    bbfe:	f7f4 fca1 	bl	544 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    bc02:	7880      	ldrb	r0, [r0, #2]
    bc04:	b118      	cbz	r0, bc0e <mpsl_timeslot_session_count_set+0x24>
    bc06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc0e:	1c64      	adds	r4, r4, #1
    bc10:	b2e4      	uxtb	r4, r4
    bc12:	42ac      	cmp	r4, r5
    bc14:	d3f2      	bcc.n	bbfc <mpsl_timeslot_session_count_set+0x12>
    bc16:	2e08      	cmp	r6, #8
    bc18:	d902      	bls.n	bc20 <mpsl_timeslot_session_count_set+0x36>
    bc1a:	f06f 0015 	mvn.w	r0, #21
    bc1e:	e7f4      	b.n	bc0a <mpsl_timeslot_session_count_set+0x20>
    bc20:	b117      	cbz	r7, bc28 <mpsl_timeslot_session_count_set+0x3e>
    bc22:	4631      	mov	r1, r6
    bc24:	4638      	mov	r0, r7
    bc26:	e001      	b.n	bc2c <mpsl_timeslot_session_count_set+0x42>
    bc28:	2100      	movs	r1, #0
    bc2a:	4608      	mov	r0, r1
    bc2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bc30:	f7f4 bc6e 	b.w	510 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

0000bc34 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    bc34:	2000      	movs	r0, #0
    bc36:	f7f7 ba83 	b.w	3140 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000bc3a <sym_WGWJTNZTDUUYDCZS4UGNX4L4JID5HLG6XRROR3Q>:
    bc3a:	2000      	movs	r0, #0
    bc3c:	f7f7 ba66 	b.w	310c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>

0000bc40 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    bc40:	b510      	push	{r4, lr}
    bc42:	f7f6 ff39 	bl	2ab8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    bc46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc4a:	f000 b800 	b.w	bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000bc4e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    bc4e:	0a41      	lsrs	r1, r0, #9
    bc50:	f643 5209 	movw	r2, #15625	; 0x3d09
    bc54:	4351      	muls	r1, r2
    bc56:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bc5a:	fb10 f002 	smulbb	r0, r0, r2
    bc5e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    bc62:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    bc66:	4770      	bx	lr

0000bc68 <MPSL_IRQ_RADIO_Handler>:
    bc68:	f7f5 bd2a 	b.w	16c0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    bc6c:	2800      	cmp	r0, #0
    bc6e:	db09      	blt.n	bc84 <MPSL_IRQ_RADIO_Handler+0x1c>
    bc70:	f000 021f 	and.w	r2, r0, #31
    bc74:	2101      	movs	r1, #1
    bc76:	4091      	lsls	r1, r2
    bc78:	0940      	lsrs	r0, r0, #5
    bc7a:	0080      	lsls	r0, r0, #2
    bc7c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc80:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bc84:	4770      	bx	lr
    bc86:	2800      	cmp	r0, #0
    bc88:	db0d      	blt.n	bca6 <MPSL_IRQ_RADIO_Handler+0x3e>
    bc8a:	f000 021f 	and.w	r2, r0, #31
    bc8e:	2101      	movs	r1, #1
    bc90:	4091      	lsls	r1, r2
    bc92:	0940      	lsrs	r0, r0, #5
    bc94:	0080      	lsls	r0, r0, #2
    bc96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc9a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bc9e:	f3bf 8f4f 	dsb	sy
    bca2:	f3bf 8f6f 	isb	sy
    bca6:	4770      	bx	lr

0000bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bca8:	b570      	push	{r4, r5, r6, lr}
    bcaa:	4602      	mov	r2, r0
    bcac:	2000      	movs	r0, #0
    bcae:	2900      	cmp	r1, #0
    bcb0:	d01d      	beq.n	bcee <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    bcb2:	fba2 0101 	umull	r0, r1, r2, r1
    bcb6:	0a40      	lsrs	r0, r0, #9
    bcb8:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    bcbc:	0a49      	lsrs	r1, r1, #9
    bcbe:	1c40      	adds	r0, r0, #1
    bcc0:	f141 0100 	adc.w	r1, r1, #0
    bcc4:	f240 72a1 	movw	r2, #1953	; 0x7a1
    bcc8:	1883      	adds	r3, r0, r2
    bcca:	f141 0100 	adc.w	r1, r1, #0
    bcce:	1c5b      	adds	r3, r3, #1
    bcd0:	f141 0400 	adc.w	r4, r1, #0
    bcd4:	2100      	movs	r1, #0
    bcd6:	f1d3 33ff 	rsbs	r3, r3, #4294967295	; 0xffffffff
    bcda:	41a1      	sbcs	r1, r4
    bcdc:	d203      	bcs.n	bce6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    bcde:	2171      	movs	r1, #113	; 0x71
    bce0:	206d      	movs	r0, #109	; 0x6d
    bce2:	f7f7 fe07 	bl	38f4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bce6:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    bcea:	fbb0 f0f2 	udiv	r0, r0, r2
    bcee:	bd70      	pop	{r4, r5, r6, pc}
    bcf0:	5840      	ldr	r0, [r0, r1]
    bcf2:	2800      	cmp	r0, #0
    bcf4:	d000      	beq.n	bcf8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    bcf6:	2001      	movs	r0, #1
    bcf8:	4770      	bx	lr
    bcfa:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    bcfe:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    bd02:	f002 0201 	and.w	r2, r2, #1
    bd06:	03c0      	lsls	r0, r0, #15
    bd08:	d503      	bpl.n	bd12 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bd0a:	428a      	cmp	r2, r1
    bd0c:	d101      	bne.n	bd12 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    bd0e:	2001      	movs	r0, #1
    bd10:	4770      	bx	lr
    bd12:	2000      	movs	r0, #0
    bd14:	4770      	bx	lr

0000bd16 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    bd16:	b510      	push	{r4, lr}
    bd18:	2101      	movs	r1, #1
    bd1a:	0788      	lsls	r0, r1, #30
    bd1c:	f7f7 fd94 	bl	3848 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bd20:	2800      	cmp	r0, #0
    bd22:	d000      	beq.n	bd26 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    bd24:	2001      	movs	r0, #1
    bd26:	bd10      	pop	{r4, pc}

0000bd28 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    bd28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bd2c:	2101      	movs	r1, #1
    bd2e:	6001      	str	r1, [r0, #0]
    bd30:	4770      	bx	lr

0000bd32 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    bd32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    bd36:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    bd3a:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    bd3e:	f002 0203 	and.w	r2, r2, #3
    bd42:	03c9      	lsls	r1, r1, #15
    bd44:	d503      	bpl.n	bd4e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bd46:	4282      	cmp	r2, r0
    bd48:	d101      	bne.n	bd4e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    bd4a:	2001      	movs	r0, #1
    bd4c:	4770      	bx	lr
    bd4e:	2000      	movs	r0, #0
    bd50:	4770      	bx	lr

0000bd52 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    bd52:	b510      	push	{r4, lr}
    bd54:	2100      	movs	r1, #0
    bd56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bd5a:	f7f7 fd75 	bl	3848 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    bd5e:	2800      	cmp	r0, #0
    bd60:	d000      	beq.n	bd64 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    bd62:	2001      	movs	r0, #1
    bd64:	bd10      	pop	{r4, pc}
    bd66:	2800      	cmp	r0, #0
    bd68:	db09      	blt.n	bd7e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    bd6a:	f000 021f 	and.w	r2, r0, #31
    bd6e:	2101      	movs	r1, #1
    bd70:	4091      	lsls	r1, r2
    bd72:	0940      	lsrs	r0, r0, #5
    bd74:	0080      	lsls	r0, r0, #2
    bd76:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd7a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bd7e:	4770      	bx	lr
    bd80:	2800      	cmp	r0, #0
    bd82:	db0d      	blt.n	bda0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    bd84:	f000 021f 	and.w	r2, r0, #31
    bd88:	2101      	movs	r1, #1
    bd8a:	4091      	lsls	r1, r2
    bd8c:	0940      	lsrs	r0, r0, #5
    bd8e:	0080      	lsls	r0, r0, #2
    bd90:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd94:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    bd98:	f3bf 8f4f 	dsb	sy
    bd9c:	f3bf 8f6f 	isb	sy
    bda0:	4770      	bx	lr
    bda2:	1000      	.short	0x1000
    bda4:	00fa0002 	.word	0x00fa0002
    bda8:	57230000 	.word	0x57230000
    bdac:	31232462 	.word	0x31232462
    bdb0:	ee74578f 	.word	0xee74578f
    bdb4:	c0882fd1 	.word	0xc0882fd1
    bdb8:	a2f74594 	.word	0xa2f74594
    bdbc:	36f9      	.short	0x36f9
    bdbe:	2800      	cmp	r0, #0
    bdc0:	db09      	blt.n	bdd6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    bdc2:	f000 021f 	and.w	r2, r0, #31
    bdc6:	2101      	movs	r1, #1
    bdc8:	4091      	lsls	r1, r2
    bdca:	0940      	lsrs	r0, r0, #5
    bdcc:	0080      	lsls	r0, r0, #2
    bdce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bdd2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    bdd6:	4770      	bx	lr

0000bdd8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    bdd8:	f3ef 8110 	mrs	r1, PRIMASK
    bddc:	b672      	cpsid	i
    bdde:	7802      	ldrb	r2, [r0, #0]
    bde0:	2a01      	cmp	r2, #1
    bde2:	d001      	beq.n	bde8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    bde4:	2201      	movs	r2, #1
    bde6:	e000      	b.n	bdea <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    bde8:	2200      	movs	r2, #0
    bdea:	2301      	movs	r3, #1
    bdec:	7003      	strb	r3, [r0, #0]
    bdee:	b901      	cbnz	r1, bdf2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    bdf0:	b662      	cpsie	i
    bdf2:	b10a      	cbz	r2, bdf8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    bdf4:	2000      	movs	r0, #0
    bdf6:	4770      	bx	lr
    bdf8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bdfc:	4770      	bx	lr

0000bdfe <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    bdfe:	2100      	movs	r1, #0
    be00:	7001      	strb	r1, [r0, #0]
    be02:	4608      	mov	r0, r1
    be04:	4770      	bx	lr

0000be06 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    be06:	f3ef 8110 	mrs	r1, PRIMASK
    be0a:	b672      	cpsid	i
    be0c:	2200      	movs	r2, #0
    be0e:	7002      	strb	r2, [r0, #0]
    be10:	b901      	cbnz	r1, be14 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    be12:	b662      	cpsie	i
    be14:	2000      	movs	r0, #0
    be16:	4770      	bx	lr

0000be18 <mpsl_low_priority_process>:
    be18:	f7f7 be58 	b.w	3acc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000be1c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    be1c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be20:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be24:	280f      	cmp	r0, #15
    be26:	d001      	beq.n	be2c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    be28:	2000      	movs	r0, #0
    be2a:	4770      	bx	lr
    be2c:	2001      	movs	r0, #1
    be2e:	4770      	bx	lr

0000be30 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    be30:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be34:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be38:	280a      	cmp	r0, #10
    be3a:	d001      	beq.n	be40 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    be3c:	2000      	movs	r0, #0
    be3e:	4770      	bx	lr
    be40:	2001      	movs	r0, #1
    be42:	4770      	bx	lr

0000be44 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    be44:	b500      	push	{lr}
    be46:	f7ff fff3 	bl	be30 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    be4a:	b120      	cbz	r0, be56 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    be4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be50:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    be54:	b108      	cbz	r0, be5a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    be56:	2000      	movs	r0, #0
    be58:	bd00      	pop	{pc}
    be5a:	2001      	movs	r0, #1
    be5c:	bd00      	pop	{pc}

0000be5e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    be5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be62:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be66:	280e      	cmp	r0, #14
    be68:	d001      	beq.n	be6e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    be6a:	2000      	movs	r0, #0
    be6c:	4770      	bx	lr
    be6e:	2001      	movs	r0, #1
    be70:	4770      	bx	lr

0000be72 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    be72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be76:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be7a:	2810      	cmp	r0, #16
    be7c:	d001      	beq.n	be82 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    be7e:	2000      	movs	r0, #0
    be80:	4770      	bx	lr
    be82:	2001      	movs	r0, #1
    be84:	4770      	bx	lr

0000be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    be86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be8a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    be8e:	2806      	cmp	r0, #6
    be90:	d003      	beq.n	be9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be92:	1c40      	adds	r0, r0, #1
    be94:	d001      	beq.n	be9a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    be96:	2000      	movs	r0, #0
    be98:	4770      	bx	lr
    be9a:	2001      	movs	r0, #1
    be9c:	4770      	bx	lr

0000be9e <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    be9e:	b500      	push	{lr}
    bea0:	f7ff fff1 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bea4:	b148      	cbz	r0, beba <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    bea6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    beaa:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    beae:	2806      	cmp	r0, #6
    beb0:	d303      	bcc.n	beba <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    beb2:	1c40      	adds	r0, r0, #1
    beb4:	d001      	beq.n	beba <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    beb6:	2001      	movs	r0, #1
    beb8:	bd00      	pop	{pc}
    beba:	2000      	movs	r0, #0
    bebc:	bd00      	pop	{pc}

0000bebe <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    bebe:	b500      	push	{lr}
    bec0:	f7ff ffe1 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bec4:	b138      	cbz	r0, bed6 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    bec6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    beca:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    bece:	2806      	cmp	r0, #6
    bed0:	d303      	bcc.n	beda <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bed2:	1c40      	adds	r0, r0, #1
    bed4:	d001      	beq.n	beda <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    bed6:	2000      	movs	r0, #0
    bed8:	bd00      	pop	{pc}
    beda:	2001      	movs	r0, #1
    bedc:	bd00      	pop	{pc}

0000bede <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    bede:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bee2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    bee6:	280d      	cmp	r0, #13
    bee8:	d001      	beq.n	beee <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    beea:	2000      	movs	r0, #0
    beec:	4770      	bx	lr
    beee:	2001      	movs	r0, #1
    bef0:	4770      	bx	lr

0000bef2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    bef2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bef6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    befa:	2808      	cmp	r0, #8
    befc:	d001      	beq.n	bf02 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    befe:	2000      	movs	r0, #0
    bf00:	4770      	bx	lr
    bf02:	2001      	movs	r0, #1
    bf04:	4770      	bx	lr

0000bf06 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    bf06:	2a00      	cmp	r2, #0
    bf08:	bf04      	itt	eq
    bf0a:	2000      	moveq	r0, #0
    bf0c:	4770      	bxeq	lr
    bf0e:	1e52      	subs	r2, r2, #1
    bf10:	d007      	beq.n	bf22 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    bf12:	7803      	ldrb	r3, [r0, #0]
    bf14:	f891 c000 	ldrb.w	ip, [r1]
    bf18:	4563      	cmp	r3, ip
    bf1a:	bf04      	itt	eq
    bf1c:	1c40      	addeq	r0, r0, #1
    bf1e:	1c49      	addeq	r1, r1, #1
    bf20:	d0f5      	beq.n	bf0e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    bf22:	7800      	ldrb	r0, [r0, #0]
    bf24:	7809      	ldrb	r1, [r1, #0]
    bf26:	1a40      	subs	r0, r0, r1
    bf28:	4770      	bx	lr

0000bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    bf2a:	b4f0      	push	{r4, r5, r6, r7}
    bf2c:	ea80 0c01 	eor.w	ip, r0, r1
    bf30:	4603      	mov	r3, r0
    bf32:	f01c 0f03 	tst.w	ip, #3
    bf36:	d13c      	bne.n	bfb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf38:	f013 0f03 	tst.w	r3, #3
    bf3c:	d00b      	beq.n	bf56 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    bf3e:	2a00      	cmp	r2, #0
    bf40:	bf04      	itt	eq
    bf42:	bcf0      	popeq	{r4, r5, r6, r7}
    bf44:	4770      	bxeq	lr
    bf46:	f811 cb01 	ldrb.w	ip, [r1], #1
    bf4a:	f803 cb01 	strb.w	ip, [r3], #1
    bf4e:	1e52      	subs	r2, r2, #1
    bf50:	f013 0f03 	tst.w	r3, #3
    bf54:	d1f3      	bne.n	bf3e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    bf56:	2a03      	cmp	r2, #3
    bf58:	d94f      	bls.n	bffa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bf5a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bf5e:	d24c      	bcs.n	bffa <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    bf60:	f1c2 0c00 	rsb	ip, r2, #0
    bf64:	ea4f 74ec 	mov.w	r4, ip, asr #31
    bf68:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    bf6c:	ea4f 0cac 	mov.w	ip, ip, asr #2
    bf70:	f1cc 0c00 	rsb	ip, ip, #0
    bf74:	f1bc 0f00 	cmp.w	ip, #0
    bf78:	dd1b      	ble.n	bfb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bf7a:	1f0d      	subs	r5, r1, #4
    bf7c:	1f1c      	subs	r4, r3, #4
    bf7e:	f01c 0f01 	tst.w	ip, #1
    bf82:	d003      	beq.n	bf8c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    bf84:	f855 6f04 	ldr.w	r6, [r5, #4]!
    bf88:	f844 6f04 	str.w	r6, [r4, #4]!
    bf8c:	ea5f 066c 	movs.w	r6, ip, asr #1
    bf90:	d007      	beq.n	bfa2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    bf92:	686f      	ldr	r7, [r5, #4]
    bf94:	6067      	str	r7, [r4, #4]
    bf96:	f855 7f08 	ldr.w	r7, [r5, #8]!
    bf9a:	f844 7f08 	str.w	r7, [r4, #8]!
    bf9e:	1e76      	subs	r6, r6, #1
    bfa0:	d1f7      	bne.n	bf92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    bfa2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    bfa6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    bfaa:	f1cc 0c00 	rsb	ip, ip, #0
    bfae:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    bfb2:	2a00      	cmp	r2, #0
    bfb4:	bf04      	itt	eq
    bfb6:	bcf0      	popeq	{r4, r5, r6, r7}
    bfb8:	4770      	bxeq	lr
    bfba:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bfbe:	d226      	bcs.n	c00e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    bfc0:	2a00      	cmp	r2, #0
    bfc2:	bfdc      	itt	le
    bfc4:	bcf0      	pople	{r4, r5, r6, r7}
    bfc6:	4770      	bxle	lr
    bfc8:	1e49      	subs	r1, r1, #1
    bfca:	1e5b      	subs	r3, r3, #1
    bfcc:	f012 0f01 	tst.w	r2, #1
    bfd0:	d003      	beq.n	bfda <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    bfd2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    bfd6:	f803 cf01 	strb.w	ip, [r3, #1]!
    bfda:	1052      	asrs	r2, r2, #1
    bfdc:	bf04      	itt	eq
    bfde:	bcf0      	popeq	{r4, r5, r6, r7}
    bfe0:	4770      	bxeq	lr
    bfe2:	f891 c001 	ldrb.w	ip, [r1, #1]
    bfe6:	f883 c001 	strb.w	ip, [r3, #1]
    bfea:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    bfee:	f803 cf02 	strb.w	ip, [r3, #2]!
    bff2:	1e52      	subs	r2, r2, #1
    bff4:	d1f5      	bne.n	bfe2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    bff6:	bcf0      	pop	{r4, r5, r6, r7}
    bff8:	4770      	bx	lr
    bffa:	2a04      	cmp	r2, #4
    bffc:	d3d9      	bcc.n	bfb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    bffe:	f851 cb04 	ldr.w	ip, [r1], #4
    c002:	1f12      	subs	r2, r2, #4
    c004:	f843 cb04 	str.w	ip, [r3], #4
    c008:	2a04      	cmp	r2, #4
    c00a:	d2f8      	bcs.n	bffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c00c:	e7d1      	b.n	bfb2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c00e:	f811 cb01 	ldrb.w	ip, [r1], #1
    c012:	f803 cb01 	strb.w	ip, [r3], #1
    c016:	1e52      	subs	r2, r2, #1
    c018:	d1f9      	bne.n	c00e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c01a:	bcf0      	pop	{r4, r5, r6, r7}
    c01c:	4770      	bx	lr

0000c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c01e:	b470      	push	{r4, r5, r6}
    c020:	4603      	mov	r3, r0
    c022:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c026:	f010 0f03 	tst.w	r0, #3
    c02a:	d009      	beq.n	c040 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c02c:	2a00      	cmp	r2, #0
    c02e:	bf04      	itt	eq
    c030:	bc70      	popeq	{r4, r5, r6}
    c032:	4770      	bxeq	lr
    c034:	f803 cb01 	strb.w	ip, [r3], #1
    c038:	1e52      	subs	r2, r2, #1
    c03a:	f013 0f03 	tst.w	r3, #3
    c03e:	d1f5      	bne.n	c02c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c040:	b2c9      	uxtb	r1, r1
    c042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c046:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c04a:	2a03      	cmp	r2, #3
    c04c:	d939      	bls.n	c0c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c04e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c052:	d236      	bcs.n	c0c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c054:	4251      	negs	r1, r2
    c056:	17cc      	asrs	r4, r1, #31
    c058:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c05c:	1089      	asrs	r1, r1, #2
    c05e:	424e      	negs	r6, r1
    c060:	2e00      	cmp	r6, #0
    c062:	dd11      	ble.n	c088 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c064:	1f19      	subs	r1, r3, #4
    c066:	f016 0f01 	tst.w	r6, #1
    c06a:	bf18      	it	ne
    c06c:	f841 5f04 	strne.w	r5, [r1, #4]!
    c070:	1074      	asrs	r4, r6, #1
    c072:	d004      	beq.n	c07e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c074:	604d      	str	r5, [r1, #4]
    c076:	f841 5f08 	str.w	r5, [r1, #8]!
    c07a:	1e64      	subs	r4, r4, #1
    c07c:	d1fa      	bne.n	c074 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c07e:	4271      	negs	r1, r6
    c080:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c084:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c088:	2a00      	cmp	r2, #0
    c08a:	bf04      	itt	eq
    c08c:	bc70      	popeq	{r4, r5, r6}
    c08e:	4770      	bxeq	lr
    c090:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c094:	d21d      	bcs.n	c0d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c096:	2a00      	cmp	r2, #0
    c098:	bfdc      	itt	le
    c09a:	bc70      	pople	{r4, r5, r6}
    c09c:	4770      	bxle	lr
    c09e:	1e59      	subs	r1, r3, #1
    c0a0:	f012 0f01 	tst.w	r2, #1
    c0a4:	bf18      	it	ne
    c0a6:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c0aa:	1052      	asrs	r2, r2, #1
    c0ac:	bf04      	itt	eq
    c0ae:	bc70      	popeq	{r4, r5, r6}
    c0b0:	4770      	bxeq	lr
    c0b2:	f881 c001 	strb.w	ip, [r1, #1]
    c0b6:	f801 cf02 	strb.w	ip, [r1, #2]!
    c0ba:	1e52      	subs	r2, r2, #1
    c0bc:	d1f9      	bne.n	c0b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c0be:	bc70      	pop	{r4, r5, r6}
    c0c0:	4770      	bx	lr
    c0c2:	2a04      	cmp	r2, #4
    c0c4:	d3e0      	bcc.n	c088 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c0c6:	1f12      	subs	r2, r2, #4
    c0c8:	f843 5b04 	str.w	r5, [r3], #4
    c0cc:	2a04      	cmp	r2, #4
    c0ce:	d2fa      	bcs.n	c0c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c0d0:	e7da      	b.n	c088 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c0d2:	f803 cb01 	strb.w	ip, [r3], #1
    c0d6:	1e52      	subs	r2, r2, #1
    c0d8:	d1fb      	bne.n	c0d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c0da:	bc70      	pop	{r4, r5, r6}
    c0dc:	4770      	bx	lr
    c0de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0e2:	4770      	bx	lr
    c0e4:	2000      	movs	r0, #0
    c0e6:	4770      	bx	lr
    c0e8:	2000      	movs	r0, #0
    c0ea:	4770      	bx	lr
    c0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0f0:	4770      	bx	lr
    c0f2:	4770      	bx	lr
    c0f4:	4770      	bx	lr
    c0f6:	2000      	movs	r0, #0
    c0f8:	4770      	bx	lr
    c0fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0fe:	4770      	bx	lr
    c100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c104:	4770      	bx	lr
    c106:	2100      	movs	r1, #0
    c108:	7001      	strb	r1, [r0, #0]
    c10a:	4770      	bx	lr
    c10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c110:	4770      	bx	lr
    c112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c116:	4770      	bx	lr
    c118:	2000      	movs	r0, #0
    c11a:	4770      	bx	lr
    c11c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    c120:	4605      	mov	r5, r0
    c122:	f100 0003 	add.w	r0, r0, #3
    c126:	f020 0003 	bic.w	r0, r0, #3
    c12a:	460c      	mov	r4, r1
    c12c:	9000      	str	r0, [sp, #0]
    c12e:	7849      	ldrb	r1, [r1, #1]
    c130:	f88d 1004 	strb.w	r1, [sp, #4]
    c134:	78a1      	ldrb	r1, [r4, #2]
    c136:	0016      	movs	r6, r2
    c138:	f88d 1005 	strb.w	r1, [sp, #5]
    c13c:	d000      	beq.n	c140 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    c13e:	2000      	movs	r0, #0
    c140:	a901      	add	r1, sp, #4
    c142:	f7f8 f87b 	bl	423c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c146:	9900      	ldr	r1, [sp, #0]
    c148:	4408      	add	r0, r1
    c14a:	9000      	str	r0, [sp, #0]
    c14c:	78a1      	ldrb	r1, [r4, #2]
    c14e:	b141      	cbz	r1, c162 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    c150:	8a63      	ldrh	r3, [r4, #18]
    c152:	78e2      	ldrb	r2, [r4, #3]
    c154:	b106      	cbz	r6, c158 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    c156:	2000      	movs	r0, #0
    c158:	f7f8 fb00 	bl	475c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c15c:	9900      	ldr	r1, [sp, #0]
    c15e:	4408      	add	r0, r1
    c160:	9000      	str	r0, [sp, #0]
    c162:	4632      	mov	r2, r6
    c164:	4621      	mov	r1, r4
    c166:	4668      	mov	r0, sp
    c168:	f000 f808 	bl	c17c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    c16c:	9800      	ldr	r0, [sp, #0]
    c16e:	1dc0      	adds	r0, r0, #7
    c170:	f020 0007 	bic.w	r0, r0, #7
    c174:	9000      	str	r0, [sp, #0]
    c176:	1b40      	subs	r0, r0, r5
    c178:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    c17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c180:	4606      	mov	r6, r0
    c182:	460c      	mov	r4, r1
    c184:	7808      	ldrb	r0, [r1, #0]
    c186:	7849      	ldrb	r1, [r1, #1]
    c188:	2700      	movs	r7, #0
    c18a:	4408      	add	r0, r1
    c18c:	4691      	mov	r9, r2
    c18e:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c192:	463d      	mov	r5, r7
    c194:	e00e      	b.n	c1b4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    c196:	7a23      	ldrb	r3, [r4, #8]
    c198:	2b02      	cmp	r3, #2
    c19a:	d200      	bcs.n	c19e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    c19c:	2302      	movs	r3, #2
    c19e:	79e2      	ldrb	r2, [r4, #7]
    c1a0:	2a03      	cmp	r2, #3
    c1a2:	d200      	bcs.n	c1a6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    c1a4:	2203      	movs	r2, #3
    c1a6:	79a1      	ldrb	r1, [r4, #6]
    c1a8:	7960      	ldrb	r0, [r4, #5]
    c1aa:	f000 fefc 	bl	cfa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c1ae:	1c6d      	adds	r5, r5, #1
    c1b0:	4407      	add	r7, r0
    c1b2:	b2ed      	uxtb	r5, r5
    c1b4:	4545      	cmp	r5, r8
    c1b6:	d3ee      	bcc.n	c196 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    c1b8:	6830      	ldr	r0, [r6, #0]
    c1ba:	1cc0      	adds	r0, r0, #3
    c1bc:	f020 0003 	bic.w	r0, r0, #3
    c1c0:	6030      	str	r0, [r6, #0]
    c1c2:	f1b9 0f00 	cmp.w	r9, #0
    c1c6:	d000      	beq.n	c1ca <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    c1c8:	2000      	movs	r0, #0
    c1ca:	463a      	mov	r2, r7
    c1cc:	4641      	mov	r1, r8
    c1ce:	f7f8 fa0f 	bl	45f0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c1d2:	6831      	ldr	r1, [r6, #0]
    c1d4:	4408      	add	r0, r1
    c1d6:	6030      	str	r0, [r6, #0]
    c1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c1dc <sdc_soc_ecb_block_encrypt>:
    c1dc:	b530      	push	{r4, r5, lr}
    c1de:	460d      	mov	r5, r1
    c1e0:	b08d      	sub	sp, #52	; 0x34
    c1e2:	4614      	mov	r4, r2
    c1e4:	4601      	mov	r1, r0
    c1e6:	2210      	movs	r2, #16
    c1e8:	4668      	mov	r0, sp
    c1ea:	f7ff fe9e 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c1ee:	2210      	movs	r2, #16
    c1f0:	4629      	mov	r1, r5
    c1f2:	a804      	add	r0, sp, #16
    c1f4:	f7ff fe99 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c1f8:	4668      	mov	r0, sp
    c1fa:	f7f8 fbc5 	bl	4988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c1fe:	b118      	cbz	r0, c208 <sdc_soc_ecb_block_encrypt+0x2c>
    c200:	f06f 0015 	mvn.w	r0, #21
    c204:	b00d      	add	sp, #52	; 0x34
    c206:	bd30      	pop	{r4, r5, pc}
    c208:	2210      	movs	r2, #16
    c20a:	4620      	mov	r0, r4
    c20c:	a908      	add	r1, sp, #32
    c20e:	f7ff fe8c 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c212:	2000      	movs	r0, #0
    c214:	e7f6      	b.n	c204 <sdc_soc_ecb_block_encrypt+0x28>

0000c216 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c216:	2000      	movs	r0, #0
    c218:	4770      	bx	lr

0000c21a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c21a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c21c:	4604      	mov	r4, r0
    c21e:	1d01      	adds	r1, r0, #4
    c220:	4668      	mov	r0, sp
    c222:	f7f9 febb 	bl	5f9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c226:	2800      	cmp	r0, #0
    c228:	d004      	beq.n	c234 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c22a:	4669      	mov	r1, sp
    c22c:	4620      	mov	r0, r4
    c22e:	f000 f848 	bl	c2c2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c232:	2001      	movs	r0, #1
    c234:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c236 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c236:	b50e      	push	{r1, r2, r3, lr}
    c238:	4601      	mov	r1, r0
    c23a:	4668      	mov	r0, sp
    c23c:	f000 f827 	bl	c28e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c240:	4668      	mov	r0, sp
    c242:	f001 fc76 	bl	db32 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c246:	bd0e      	pop	{r1, r2, r3, pc}

0000c248 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c248:	b510      	push	{r4, lr}
    c24a:	4604      	mov	r4, r0
    c24c:	4620      	mov	r0, r4
    c24e:	f7f7 fee3 	bl	4018 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c252:	2800      	cmp	r0, #0
    c254:	d006      	beq.n	c264 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c256:	78a1      	ldrb	r1, [r4, #2]
    c258:	7820      	ldrb	r0, [r4, #0]
    c25a:	f000 f804 	bl	c266 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c25e:	2800      	cmp	r0, #0
    c260:	d0f4      	beq.n	c24c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c262:	2001      	movs	r0, #1
    c264:	bd10      	pop	{r4, pc}
    c266:	b570      	push	{r4, r5, r6, lr}
    c268:	460c      	mov	r4, r1
    c26a:	4605      	mov	r5, r0
    c26c:	f7f7 ff46 	bl	40fc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c270:	2800      	cmp	r0, #0
    c272:	d002      	beq.n	c27a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c274:	2d3e      	cmp	r5, #62	; 0x3e
    c276:	d001      	beq.n	c27c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c278:	2001      	movs	r0, #1
    c27a:	bd70      	pop	{r4, r5, r6, pc}
    c27c:	2c12      	cmp	r4, #18
    c27e:	d004      	beq.n	c28a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c280:	4620      	mov	r0, r4
    c282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c286:	f7f7 bf55 	b.w	4134 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c28a:	2000      	movs	r0, #0
    c28c:	bd70      	pop	{r4, r5, r6, pc}

0000c28e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c28e:	880a      	ldrh	r2, [r1, #0]
    c290:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c294:	8002      	strh	r2, [r0, #0]
    c296:	884a      	ldrh	r2, [r1, #2]
    c298:	8042      	strh	r2, [r0, #2]
    c29a:	784a      	ldrb	r2, [r1, #1]
    c29c:	0993      	lsrs	r3, r2, #6
    c29e:	2200      	movs	r2, #0
    c2a0:	7142      	strb	r2, [r0, #5]
    c2a2:	784b      	ldrb	r3, [r1, #1]
    c2a4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c2a8:	b11b      	cbz	r3, c2b2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c2aa:	2b01      	cmp	r3, #1
    c2ac:	d005      	beq.n	c2ba <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c2ae:	2b02      	cmp	r3, #2
    c2b0:	d005      	beq.n	c2be <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c2b2:	7102      	strb	r2, [r0, #4]
    c2b4:	1d09      	adds	r1, r1, #4
    c2b6:	6081      	str	r1, [r0, #8]
    c2b8:	4770      	bx	lr
    c2ba:	2201      	movs	r2, #1
    c2bc:	e7f9      	b.n	c2b2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c2be:	2202      	movs	r2, #2
    c2c0:	e7f7      	b.n	c2b2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c2c2 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c2c2:	b510      	push	{r4, lr}
    c2c4:	460c      	mov	r4, r1
    c2c6:	7809      	ldrb	r1, [r1, #0]
    c2c8:	7001      	strb	r1, [r0, #0]
    c2ca:	7841      	ldrb	r1, [r0, #1]
    c2cc:	f021 010f 	bic.w	r1, r1, #15
    c2d0:	7041      	strb	r1, [r0, #1]
    c2d2:	8822      	ldrh	r2, [r4, #0]
    c2d4:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c2d8:	4311      	orrs	r1, r2
    c2da:	7041      	strb	r1, [r0, #1]
    c2dc:	78a2      	ldrb	r2, [r4, #2]
    c2de:	7082      	strb	r2, [r0, #2]
    c2e0:	8862      	ldrh	r2, [r4, #2]
    c2e2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    c2e6:	0a12      	lsrs	r2, r2, #8
    c2e8:	70c2      	strb	r2, [r0, #3]
    c2ea:	7041      	strb	r1, [r0, #1]
    c2ec:	7922      	ldrb	r2, [r4, #4]
    c2ee:	f002 0203 	and.w	r2, r2, #3
    c2f2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c2f6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    c2fa:	7041      	strb	r1, [r0, #1]
    c2fc:	7962      	ldrb	r2, [r4, #5]
    c2fe:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c302:	7041      	strb	r1, [r0, #1]
    c304:	68a1      	ldr	r1, [r4, #8]
    c306:	1d02      	adds	r2, r0, #4
    c308:	4291      	cmp	r1, r2
    c30a:	d006      	beq.n	c31a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    c30c:	8862      	ldrh	r2, [r4, #2]
    c30e:	2afb      	cmp	r2, #251	; 0xfb
    c310:	d300      	bcc.n	c314 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    c312:	22fb      	movs	r2, #251	; 0xfb
    c314:	1d00      	adds	r0, r0, #4
    c316:	f7ff fe08 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c31a:	78a0      	ldrb	r0, [r4, #2]
    c31c:	1d00      	adds	r0, r0, #4
    c31e:	b2c0      	uxtb	r0, r0
    c320:	bd10      	pop	{r4, pc}

0000c322 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c326:	4604      	mov	r4, r0
    c328:	780f      	ldrb	r7, [r1, #0]
    c32a:	2000      	movs	r0, #0
    c32c:	250c      	movs	r5, #12
    c32e:	2605      	movs	r6, #5
    c330:	223e      	movs	r2, #62	; 0x3e
    c332:	23ff      	movs	r3, #255	; 0xff
    c334:	2f1b      	cmp	r7, #27
    c336:	d27d      	bcs.n	c434 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    c338:	e8df f007 	tbb	[pc, r7]
    c33c:	27250eea 	.word	0x27250eea
    c340:	816d632d 	.word	0x816d632d
    c344:	bcb1af9b 	.word	0xbcb1af9b
    c348:	eaf4e2c7 	.word	0xeaf4e2c7
    c34c:	d5d231ea 	.word	0xd5d231ea
    c350:	eff0f1fd 	.word	0xeff0f1fd
    c354:	00ecedee 	.word	0x00ecedee
    c358:	7025      	strb	r5, [r4, #0]
    c35a:	7908      	ldrb	r0, [r1, #4]
    c35c:	70a0      	strb	r0, [r4, #2]
    c35e:	7948      	ldrb	r0, [r1, #5]
    c360:	70e0      	strb	r0, [r4, #3]
    c362:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c366:	0a00      	lsrs	r0, r0, #8
    c368:	7120      	strb	r0, [r4, #4]
    c36a:	79c8      	ldrb	r0, [r1, #7]
    c36c:	7160      	strb	r0, [r4, #5]
    c36e:	7a08      	ldrb	r0, [r1, #8]
    c370:	71a0      	strb	r0, [r4, #6]
    c372:	8908      	ldrh	r0, [r1, #8]
    c374:	0a00      	lsrs	r0, r0, #8
    c376:	71e0      	strb	r0, [r4, #7]
    c378:	7a88      	ldrb	r0, [r1, #10]
    c37a:	7220      	strb	r0, [r4, #8]
    c37c:	8948      	ldrh	r0, [r1, #10]
    c37e:	0a00      	lsrs	r0, r0, #8
    c380:	7260      	strb	r0, [r4, #9]
    c382:	2008      	movs	r0, #8
    c384:	e0c2      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c386:	2010      	movs	r0, #16
    c388:	e000      	b.n	c38c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    c38a:	201a      	movs	r0, #26
    c38c:	7020      	strb	r0, [r4, #0]
    c38e:	7908      	ldrb	r0, [r1, #4]
    c390:	70a0      	strb	r0, [r4, #2]
    c392:	2001      	movs	r0, #1
    c394:	e0ba      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c396:	4620      	mov	r0, r4
    c398:	f000 f946 	bl	c628 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    c39c:	e0b4      	b.n	c508 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    c39e:	7022      	strb	r2, [r4, #0]
    c3a0:	200a      	movs	r0, #10
    c3a2:	70a0      	strb	r0, [r4, #2]
    c3a4:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    c3a8:	70e0      	strb	r0, [r4, #3]
    c3aa:	7888      	ldrb	r0, [r1, #2]
    c3ac:	7120      	strb	r0, [r4, #4]
    c3ae:	8848      	ldrh	r0, [r1, #2]
    c3b0:	0a00      	lsrs	r0, r0, #8
    c3b2:	7160      	strb	r0, [r4, #5]
    c3b4:	7908      	ldrb	r0, [r1, #4]
    c3b6:	71a0      	strb	r0, [r4, #6]
    c3b8:	7948      	ldrb	r0, [r1, #5]
    c3ba:	71e0      	strb	r0, [r4, #7]
    c3bc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c3c0:	60a0      	str	r0, [r4, #8]
    c3c2:	8948      	ldrh	r0, [r1, #10]
    c3c4:	81a0      	strh	r0, [r4, #12]
    c3c6:	68c8      	ldr	r0, [r1, #12]
    c3c8:	f8c4 000e 	str.w	r0, [r4, #14]
    c3cc:	8a08      	ldrh	r0, [r1, #16]
    c3ce:	8260      	strh	r0, [r4, #18]
    c3d0:	f8d1 0012 	ldr.w	r0, [r1, #18]
    c3d4:	6160      	str	r0, [r4, #20]
    c3d6:	8ac8      	ldrh	r0, [r1, #22]
    c3d8:	8320      	strh	r0, [r4, #24]
    c3da:	7e08      	ldrb	r0, [r1, #24]
    c3dc:	76a0      	strb	r0, [r4, #26]
    c3de:	8b08      	ldrh	r0, [r1, #24]
    c3e0:	0a00      	lsrs	r0, r0, #8
    c3e2:	76e0      	strb	r0, [r4, #27]
    c3e4:	7e88      	ldrb	r0, [r1, #26]
    c3e6:	7720      	strb	r0, [r4, #28]
    c3e8:	8b48      	ldrh	r0, [r1, #26]
    c3ea:	0a00      	lsrs	r0, r0, #8
    c3ec:	7760      	strb	r0, [r4, #29]
    c3ee:	7f08      	ldrb	r0, [r1, #28]
    c3f0:	77a0      	strb	r0, [r4, #30]
    c3f2:	8b88      	ldrh	r0, [r1, #28]
    c3f4:	0a00      	lsrs	r0, r0, #8
    c3f6:	77e0      	strb	r0, [r4, #31]
    c3f8:	7f88      	ldrb	r0, [r1, #30]
    c3fa:	f884 0020 	strb.w	r0, [r4, #32]
    c3fe:	201f      	movs	r0, #31
    c400:	e084      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c402:	7022      	strb	r2, [r4, #0]
    c404:	2014      	movs	r0, #20
    c406:	70a0      	strb	r0, [r4, #2]
    c408:	7908      	ldrb	r0, [r1, #4]
    c40a:	70e0      	strb	r0, [r4, #3]
    c40c:	8888      	ldrh	r0, [r1, #4]
    c40e:	0a00      	lsrs	r0, r0, #8
    c410:	7120      	strb	r0, [r4, #4]
    c412:	7988      	ldrb	r0, [r1, #6]
    c414:	e0a7      	b.n	c566 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c416:	7022      	strb	r2, [r4, #0]
    c418:	2004      	movs	r0, #4
    c41a:	70a0      	strb	r0, [r4, #2]
    c41c:	7908      	ldrb	r0, [r1, #4]
    c41e:	70e0      	strb	r0, [r4, #3]
    c420:	7988      	ldrb	r0, [r1, #6]
    c422:	7120      	strb	r0, [r4, #4]
    c424:	88c8      	ldrh	r0, [r1, #6]
    c426:	0a00      	lsrs	r0, r0, #8
    c428:	7160      	strb	r0, [r4, #5]
    c42a:	6888      	ldr	r0, [r1, #8]
    c42c:	f8c4 0006 	str.w	r0, [r4, #6]
    c430:	68c8      	ldr	r0, [r1, #12]
    c432:	e000      	b.n	c436 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    c434:	e06c      	b.n	c510 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c436:	f8c4 000a 	str.w	r0, [r4, #10]
    c43a:	200c      	movs	r0, #12
    c43c:	e066      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c43e:	7022      	strb	r2, [r4, #0]
    c440:	2003      	movs	r0, #3
    c442:	70a0      	strb	r0, [r4, #2]
    c444:	7908      	ldrb	r0, [r1, #4]
    c446:	70e0      	strb	r0, [r4, #3]
    c448:	7988      	ldrb	r0, [r1, #6]
    c44a:	7120      	strb	r0, [r4, #4]
    c44c:	88c8      	ldrh	r0, [r1, #6]
    c44e:	0a00      	lsrs	r0, r0, #8
    c450:	7160      	strb	r0, [r4, #5]
    c452:	7a08      	ldrb	r0, [r1, #8]
    c454:	71a0      	strb	r0, [r4, #6]
    c456:	8908      	ldrh	r0, [r1, #8]
    c458:	0a00      	lsrs	r0, r0, #8
    c45a:	71e0      	strb	r0, [r4, #7]
    c45c:	7a88      	ldrb	r0, [r1, #10]
    c45e:	7220      	strb	r0, [r4, #8]
    c460:	8948      	ldrh	r0, [r1, #10]
    c462:	0a00      	lsrs	r0, r0, #8
    c464:	7260      	strb	r0, [r4, #9]
    c466:	7b08      	ldrb	r0, [r1, #12]
    c468:	72a0      	strb	r0, [r4, #10]
    c46a:	8988      	ldrh	r0, [r1, #12]
    c46c:	0a00      	lsrs	r0, r0, #8
    c46e:	72e0      	strb	r0, [r4, #11]
    c470:	e0d8      	b.n	c624 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    c472:	7022      	strb	r2, [r4, #0]
    c474:	70a6      	strb	r6, [r4, #2]
    c476:	7908      	ldrb	r0, [r1, #4]
    c478:	70e0      	strb	r0, [r4, #3]
    c47a:	8888      	ldrh	r0, [r1, #4]
    c47c:	0a00      	lsrs	r0, r0, #8
    c47e:	7120      	strb	r0, [r4, #4]
    c480:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c484:	f8c4 0005 	str.w	r0, [r4, #5]
    c488:	f8d1 000a 	ldr.w	r0, [r1, #10]
    c48c:	f8c4 0009 	str.w	r0, [r4, #9]
    c490:	89c8      	ldrh	r0, [r1, #14]
    c492:	f8a4 000d 	strh.w	r0, [r4, #13]
    c496:	200d      	movs	r0, #13
    c498:	e038      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c49a:	2011      	movs	r0, #17
    c49c:	e043      	b.n	c526 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    c49e:	7026      	strb	r6, [r4, #0]
    c4a0:	7908      	ldrb	r0, [r1, #4]
    c4a2:	70a0      	strb	r0, [r4, #2]
    c4a4:	7948      	ldrb	r0, [r1, #5]
    c4a6:	70e0      	strb	r0, [r4, #3]
    c4a8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    c4ac:	0a00      	lsrs	r0, r0, #8
    c4ae:	7120      	strb	r0, [r4, #4]
    c4b0:	79c8      	ldrb	r0, [r1, #7]
    c4b2:	e058      	b.n	c566 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c4b4:	2008      	movs	r0, #8
    c4b6:	7020      	strb	r0, [r4, #0]
    c4b8:	7908      	ldrb	r0, [r1, #4]
    c4ba:	70a0      	strb	r0, [r4, #2]
    c4bc:	7988      	ldrb	r0, [r1, #6]
    c4be:	70e0      	strb	r0, [r4, #3]
    c4c0:	88c8      	ldrh	r0, [r1, #6]
    c4c2:	0a00      	lsrs	r0, r0, #8
    c4c4:	7120      	strb	r0, [r4, #4]
    c4c6:	7a08      	ldrb	r0, [r1, #8]
    c4c8:	e04d      	b.n	c566 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    c4ca:	2030      	movs	r0, #48	; 0x30
    c4cc:	7020      	strb	r0, [r4, #0]
    c4ce:	7908      	ldrb	r0, [r1, #4]
    c4d0:	70a0      	strb	r0, [r4, #2]
    c4d2:	7988      	ldrb	r0, [r1, #6]
    c4d4:	70e0      	strb	r0, [r4, #3]
    c4d6:	88c8      	ldrh	r0, [r1, #6]
    c4d8:	0a00      	lsrs	r0, r0, #8
    c4da:	7120      	strb	r0, [r4, #4]
    c4dc:	2003      	movs	r0, #3
    c4de:	e015      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c4e0:	7022      	strb	r2, [r4, #0]
    c4e2:	2007      	movs	r0, #7
    c4e4:	e044      	b.n	c570 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    c4e6:	7022      	strb	r2, [r4, #0]
    c4e8:	70a5      	strb	r5, [r4, #2]
    c4ea:	7908      	ldrb	r0, [r1, #4]
    c4ec:	70e0      	strb	r0, [r4, #3]
    c4ee:	7988      	ldrb	r0, [r1, #6]
    c4f0:	7120      	strb	r0, [r4, #4]
    c4f2:	88c8      	ldrh	r0, [r1, #6]
    c4f4:	0a00      	lsrs	r0, r0, #8
    c4f6:	7160      	strb	r0, [r4, #5]
    c4f8:	7a08      	ldrb	r0, [r1, #8]
    c4fa:	71a0      	strb	r0, [r4, #6]
    c4fc:	7a48      	ldrb	r0, [r1, #9]
    c4fe:	e027      	b.n	c550 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    c500:	4620      	mov	r0, r4
    c502:	1d09      	adds	r1, r1, #4
    c504:	f7f7 fdcc 	bl	40a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    c508:	2800      	cmp	r0, #0
    c50a:	d001      	beq.n	c510 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    c50c:	7060      	strb	r0, [r4, #1]
    c50e:	1c80      	adds	r0, r0, #2
    c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c514:	e073      	b.n	c5fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    c516:	e047      	b.n	c5a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    c518:	e028      	b.n	c56c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    c51a:	e053      	b.n	c5c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    c51c:	e061      	b.n	c5e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    c51e:	e01a      	b.n	c556 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    c520:	e009      	b.n	c536 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    c522:	e7ff      	b.n	c524 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    c524:	2057      	movs	r0, #87	; 0x57
    c526:	7020      	strb	r0, [r4, #0]
    c528:	7908      	ldrb	r0, [r1, #4]
    c52a:	70a0      	strb	r0, [r4, #2]
    c52c:	8888      	ldrh	r0, [r1, #4]
    c52e:	0a00      	lsrs	r0, r0, #8
    c530:	70e0      	strb	r0, [r4, #3]
    c532:	2002      	movs	r0, #2
    c534:	e7ea      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c536:	7022      	strb	r2, [r4, #0]
    c538:	2012      	movs	r0, #18
    c53a:	70a0      	strb	r0, [r4, #2]
    c53c:	7908      	ldrb	r0, [r1, #4]
    c53e:	70e0      	strb	r0, [r4, #3]
    c540:	7948      	ldrb	r0, [r1, #5]
    c542:	7120      	strb	r0, [r4, #4]
    c544:	7988      	ldrb	r0, [r1, #6]
    c546:	7160      	strb	r0, [r4, #5]
    c548:	88c8      	ldrh	r0, [r1, #6]
    c54a:	0a00      	lsrs	r0, r0, #8
    c54c:	71a0      	strb	r0, [r4, #6]
    c54e:	7a08      	ldrb	r0, [r1, #8]
    c550:	71e0      	strb	r0, [r4, #7]
    c552:	2006      	movs	r0, #6
    c554:	e7da      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c556:	7023      	strb	r3, [r4, #0]
    c558:	20a1      	movs	r0, #161	; 0xa1
    c55a:	70a0      	strb	r0, [r4, #2]
    c55c:	7908      	ldrb	r0, [r1, #4]
    c55e:	70e0      	strb	r0, [r4, #3]
    c560:	7948      	ldrb	r0, [r1, #5]
    c562:	7120      	strb	r0, [r4, #4]
    c564:	2000      	movs	r0, #0
    c566:	7160      	strb	r0, [r4, #5]
    c568:	2004      	movs	r0, #4
    c56a:	e7cf      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c56c:	7023      	strb	r3, [r4, #0]
    c56e:	20a2      	movs	r0, #162	; 0xa2
    c570:	70a0      	strb	r0, [r4, #2]
    c572:	7908      	ldrb	r0, [r1, #4]
    c574:	70e0      	strb	r0, [r4, #3]
    c576:	8888      	ldrh	r0, [r1, #4]
    c578:	0a00      	lsrs	r0, r0, #8
    c57a:	7120      	strb	r0, [r4, #4]
    c57c:	7988      	ldrb	r0, [r1, #6]
    c57e:	7160      	strb	r0, [r4, #5]
    c580:	88c8      	ldrh	r0, [r1, #6]
    c582:	0a00      	lsrs	r0, r0, #8
    c584:	71a0      	strb	r0, [r4, #6]
    c586:	7a08      	ldrb	r0, [r1, #8]
    c588:	71e0      	strb	r0, [r4, #7]
    c58a:	8908      	ldrh	r0, [r1, #8]
    c58c:	0a00      	lsrs	r0, r0, #8
    c58e:	7220      	strb	r0, [r4, #8]
    c590:	7a88      	ldrb	r0, [r1, #10]
    c592:	7260      	strb	r0, [r4, #9]
    c594:	8948      	ldrh	r0, [r1, #10]
    c596:	0a00      	lsrs	r0, r0, #8
    c598:	72a0      	strb	r0, [r4, #10]
    c59a:	7b08      	ldrb	r0, [r1, #12]
    c59c:	72e0      	strb	r0, [r4, #11]
    c59e:	8988      	ldrh	r0, [r1, #12]
    c5a0:	0a00      	lsrs	r0, r0, #8
    c5a2:	7320      	strb	r0, [r4, #12]
    c5a4:	200b      	movs	r0, #11
    c5a6:	e7b1      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5a8:	7023      	strb	r3, [r4, #0]
    c5aa:	20a3      	movs	r0, #163	; 0xa3
    c5ac:	70a0      	strb	r0, [r4, #2]
    c5ae:	7908      	ldrb	r0, [r1, #4]
    c5b0:	70e0      	strb	r0, [r4, #3]
    c5b2:	8888      	ldrh	r0, [r1, #4]
    c5b4:	0a00      	lsrs	r0, r0, #8
    c5b6:	7120      	strb	r0, [r4, #4]
    c5b8:	7988      	ldrb	r0, [r1, #6]
    c5ba:	7160      	strb	r0, [r4, #5]
    c5bc:	79c8      	ldrb	r0, [r1, #7]
    c5be:	71a0      	strb	r0, [r4, #6]
    c5c0:	2005      	movs	r0, #5
    c5c2:	e7a3      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5c4:	7022      	strb	r2, [r4, #0]
    c5c6:	2013      	movs	r0, #19
    c5c8:	70a0      	strb	r0, [r4, #2]
    c5ca:	7908      	ldrb	r0, [r1, #4]
    c5cc:	70e0      	strb	r0, [r4, #3]
    c5ce:	7948      	ldrb	r0, [r1, #5]
    c5d0:	7120      	strb	r0, [r4, #4]
    c5d2:	f8d1 0006 	ldr.w	r0, [r1, #6]
    c5d6:	f8c4 0005 	str.w	r0, [r4, #5]
    c5da:	8948      	ldrh	r0, [r1, #10]
    c5dc:	f8a4 0009 	strh.w	r0, [r4, #9]
    c5e0:	e020      	b.n	c624 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    c5e2:	7023      	strb	r3, [r4, #0]
    c5e4:	20a4      	movs	r0, #164	; 0xa4
    c5e6:	70a0      	strb	r0, [r4, #2]
    c5e8:	7908      	ldrb	r0, [r1, #4]
    c5ea:	70e0      	strb	r0, [r4, #3]
    c5ec:	8888      	ldrh	r0, [r1, #4]
    c5ee:	0a00      	lsrs	r0, r0, #8
    c5f0:	7120      	strb	r0, [r4, #4]
    c5f2:	7988      	ldrb	r0, [r1, #6]
    c5f4:	7160      	strb	r0, [r4, #5]
    c5f6:	79c8      	ldrb	r0, [r1, #7]
    c5f8:	71a0      	strb	r0, [r4, #6]
    c5fa:	2007      	movs	r0, #7
    c5fc:	e786      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    c5fe:	7023      	strb	r3, [r4, #0]
    c600:	2080      	movs	r0, #128	; 0x80
    c602:	70a0      	strb	r0, [r4, #2]
    c604:	888a      	ldrh	r2, [r1, #4]
    c606:	f8a4 2003 	strh.w	r2, [r4, #3]
    c60a:	88ca      	ldrh	r2, [r1, #6]
    c60c:	f8a4 2005 	strh.w	r2, [r4, #5]
    c610:	7a0a      	ldrb	r2, [r1, #8]
    c612:	71e2      	strb	r2, [r4, #7]
    c614:	7a4a      	ldrb	r2, [r1, #9]
    c616:	8122      	strh	r2, [r4, #8]
    c618:	7a8a      	ldrb	r2, [r1, #10]
    c61a:	72a2      	strb	r2, [r4, #10]
    c61c:	7ac9      	ldrb	r1, [r1, #11]
    c61e:	f001 0101 	and.w	r1, r1, #1
    c622:	72e1      	strb	r1, [r4, #11]
    c624:	200a      	movs	r0, #10
    c626:	e771      	b.n	c50c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000c628 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    c628:	223e      	movs	r2, #62	; 0x3e
    c62a:	7002      	strb	r2, [r0, #0]
    c62c:	2201      	movs	r2, #1
    c62e:	7082      	strb	r2, [r0, #2]
    c630:	790a      	ldrb	r2, [r1, #4]
    c632:	70c2      	strb	r2, [r0, #3]
    c634:	798a      	ldrb	r2, [r1, #6]
    c636:	7102      	strb	r2, [r0, #4]
    c638:	88ca      	ldrh	r2, [r1, #6]
    c63a:	0a12      	lsrs	r2, r2, #8
    c63c:	7142      	strb	r2, [r0, #5]
    c63e:	7a0a      	ldrb	r2, [r1, #8]
    c640:	7182      	strb	r2, [r0, #6]
    c642:	7a4a      	ldrb	r2, [r1, #9]
    c644:	71c2      	strb	r2, [r0, #7]
    c646:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c64a:	6082      	str	r2, [r0, #8]
    c64c:	89ca      	ldrh	r2, [r1, #14]
    c64e:	8182      	strh	r2, [r0, #12]
    c650:	7c0a      	ldrb	r2, [r1, #16]
    c652:	7382      	strb	r2, [r0, #14]
    c654:	8a0a      	ldrh	r2, [r1, #16]
    c656:	0a12      	lsrs	r2, r2, #8
    c658:	73c2      	strb	r2, [r0, #15]
    c65a:	7c8a      	ldrb	r2, [r1, #18]
    c65c:	7402      	strb	r2, [r0, #16]
    c65e:	8a4a      	ldrh	r2, [r1, #18]
    c660:	0a12      	lsrs	r2, r2, #8
    c662:	7442      	strb	r2, [r0, #17]
    c664:	7d0a      	ldrb	r2, [r1, #20]
    c666:	7482      	strb	r2, [r0, #18]
    c668:	8a8a      	ldrh	r2, [r1, #20]
    c66a:	0a12      	lsrs	r2, r2, #8
    c66c:	74c2      	strb	r2, [r0, #19]
    c66e:	7d89      	ldrb	r1, [r1, #22]
    c670:	7501      	strb	r1, [r0, #20]
    c672:	2013      	movs	r0, #19
    c674:	4770      	bx	lr

0000c676 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c676:	223e      	movs	r2, #62	; 0x3e
    c678:	7002      	strb	r2, [r0, #0]
    c67a:	2201      	movs	r2, #1
    c67c:	7082      	strb	r2, [r0, #2]
    c67e:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c682:	70c2      	strb	r2, [r0, #3]
    c684:	788a      	ldrb	r2, [r1, #2]
    c686:	7102      	strb	r2, [r0, #4]
    c688:	884a      	ldrh	r2, [r1, #2]
    c68a:	0a12      	lsrs	r2, r2, #8
    c68c:	7142      	strb	r2, [r0, #5]
    c68e:	790a      	ldrb	r2, [r1, #4]
    c690:	7182      	strb	r2, [r0, #6]
    c692:	794a      	ldrb	r2, [r1, #5]
    c694:	71c2      	strb	r2, [r0, #7]
    c696:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c69a:	6082      	str	r2, [r0, #8]
    c69c:	894a      	ldrh	r2, [r1, #10]
    c69e:	8182      	strh	r2, [r0, #12]
    c6a0:	7e0a      	ldrb	r2, [r1, #24]
    c6a2:	7382      	strb	r2, [r0, #14]
    c6a4:	8b0a      	ldrh	r2, [r1, #24]
    c6a6:	0a12      	lsrs	r2, r2, #8
    c6a8:	73c2      	strb	r2, [r0, #15]
    c6aa:	7e8a      	ldrb	r2, [r1, #26]
    c6ac:	7402      	strb	r2, [r0, #16]
    c6ae:	8b4a      	ldrh	r2, [r1, #26]
    c6b0:	0a12      	lsrs	r2, r2, #8
    c6b2:	7442      	strb	r2, [r0, #17]
    c6b4:	7f0a      	ldrb	r2, [r1, #28]
    c6b6:	7482      	strb	r2, [r0, #18]
    c6b8:	8b8a      	ldrh	r2, [r1, #28]
    c6ba:	0a12      	lsrs	r2, r2, #8
    c6bc:	74c2      	strb	r2, [r0, #19]
    c6be:	7f89      	ldrb	r1, [r1, #30]
    c6c0:	7501      	strb	r1, [r0, #20]
    c6c2:	2113      	movs	r1, #19
    c6c4:	7041      	strb	r1, [r0, #1]
    c6c6:	4608      	mov	r0, r1
    c6c8:	4770      	bx	lr

0000c6ca <sdc_hci_data_get>:
    c6ca:	b510      	push	{r4, lr}
    c6cc:	b120      	cbz	r0, c6d8 <sdc_hci_data_get+0xe>
    c6ce:	f7ff fda4 	bl	c21a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c6d2:	b120      	cbz	r0, c6de <sdc_hci_data_get+0x14>
    c6d4:	2000      	movs	r0, #0
    c6d6:	bd10      	pop	{r4, pc}
    c6d8:	f06f 0015 	mvn.w	r0, #21
    c6dc:	bd10      	pop	{r4, pc}
    c6de:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c6e2:	bd10      	pop	{r4, pc}

0000c6e4 <sdc_hci_data_put>:
    c6e4:	b510      	push	{r4, lr}
    c6e6:	f06f 0415 	mvn.w	r4, #21
    c6ea:	b120      	cbz	r0, c6f6 <sdc_hci_data_put+0x12>
    c6ec:	f7ff fda3 	bl	c236 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c6f0:	b108      	cbz	r0, c6f6 <sdc_hci_data_put+0x12>
    c6f2:	2000      	movs	r0, #0
    c6f4:	bd10      	pop	{r4, pc}
    c6f6:	4620      	mov	r0, r4
    c6f8:	bd10      	pop	{r4, pc}

0000c6fa <sdc_hci_evt_get>:
    c6fa:	b510      	push	{r4, lr}
    c6fc:	b120      	cbz	r0, c708 <sdc_hci_evt_get+0xe>
    c6fe:	f7ff fda3 	bl	c248 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c702:	b120      	cbz	r0, c70e <sdc_hci_evt_get+0x14>
    c704:	2000      	movs	r0, #0
    c706:	bd10      	pop	{r4, pc}
    c708:	f06f 0015 	mvn.w	r0, #21
    c70c:	bd10      	pop	{r4, pc}
    c70e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c712:	bd10      	pop	{r4, pc}

0000c714 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c714:	f002 beda 	b.w	f4cc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c718 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c718:	f002 bf1c 	b.w	f554 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c71c <sdc_hci_cmd_cb_set_event_mask>:
    c71c:	b510      	push	{r4, lr}
    c71e:	f7f7 fd1d 	bl	415c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c722:	2000      	movs	r0, #0
    c724:	bd10      	pop	{r4, pc}

0000c726 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c726:	b510      	push	{r4, lr}
    c728:	f7f7 fd26 	bl	4178 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c72c:	2000      	movs	r0, #0
    c72e:	bd10      	pop	{r4, pc}

0000c730 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c730:	f002 bf2c 	b.w	f58c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c734 <sdc_hci_cmd_vs_conn_event_extend>:
    c734:	b508      	push	{r3, lr}
    c736:	7800      	ldrb	r0, [r0, #0]
    c738:	f88d 0000 	strb.w	r0, [sp]
    c73c:	4668      	mov	r0, sp
    c73e:	f002 fddc 	bl	f2fa <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c742:	bd08      	pop	{r3, pc}

0000c744 <sdc_hci_cmd_vs_conn_update>:
    c744:	2001      	movs	r0, #1
    c746:	4770      	bx	lr

0000c748 <sdc_hci_cmd_vs_event_length_set>:
    c748:	f7fd bbf6 	b.w	9f38 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c74c <sdc_hci_cmd_vs_llpm_mode_set>:
    c74c:	2001      	movs	r0, #1
    c74e:	4770      	bx	lr

0000c750 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c750:	7800      	ldrb	r0, [r0, #0]
    c752:	b100      	cbz	r0, c756 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c754:	2001      	movs	r0, #1
    c756:	f002 bd55 	b.w	f204 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c75a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c75a:	b570      	push	{r4, r5, r6, lr}
    c75c:	4605      	mov	r5, r0
    c75e:	2210      	movs	r2, #16
    c760:	2100      	movs	r1, #0
    c762:	f7ff fc5c 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c766:	2210      	movs	r2, #16
    c768:	2100      	movs	r1, #0
    c76a:	f105 0010 	add.w	r0, r5, #16
    c76e:	f7ff fc56 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c772:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c776:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c77a:	1c40      	adds	r0, r0, #1
    c77c:	d10b      	bne.n	c796 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c77e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c782:	1c40      	adds	r0, r0, #1
    c784:	d107      	bne.n	c796 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c786:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c78a:	1c40      	adds	r0, r0, #1
    c78c:	d103      	bne.n	c796 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c78e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c792:	1c40      	adds	r0, r0, #1
    c794:	d00b      	beq.n	c7ae <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c796:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    c79a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c79e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    c7a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    c7a6:	612a      	str	r2, [r5, #16]
    c7a8:	6168      	str	r0, [r5, #20]
    c7aa:	61a9      	str	r1, [r5, #24]
    c7ac:	61eb      	str	r3, [r5, #28]
    c7ae:	2000      	movs	r0, #0
    c7b0:	f7f8 fa76 	bl	4ca0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c7b4:	b918      	cbnz	r0, c7be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c7b6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c7ba:	07c0      	lsls	r0, r0, #31
    c7bc:	d118      	bne.n	c7f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c7be:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c7c2:	1c40      	adds	r0, r0, #1
    c7c4:	d10b      	bne.n	c7de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7c6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c7ca:	1c40      	adds	r0, r0, #1
    c7cc:	d107      	bne.n	c7de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7ce:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c7d2:	1c40      	adds	r0, r0, #1
    c7d4:	d103      	bne.n	c7de <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c7d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c7da:	1c40      	adds	r0, r0, #1
    c7dc:	d008      	beq.n	c7f0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c7de:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c7e2:	6861      	ldr	r1, [r4, #4]
    c7e4:	68a2      	ldr	r2, [r4, #8]
    c7e6:	68e3      	ldr	r3, [r4, #12]
    c7e8:	6028      	str	r0, [r5, #0]
    c7ea:	6069      	str	r1, [r5, #4]
    c7ec:	60aa      	str	r2, [r5, #8]
    c7ee:	60eb      	str	r3, [r5, #12]
    c7f0:	2000      	movs	r0, #0
    c7f2:	bd70      	pop	{r4, r5, r6, pc}

0000c7f4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c7f4:	b538      	push	{r3, r4, r5, lr}
    c7f6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c7fa:	4604      	mov	r4, r0
    c7fc:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c800:	1c40      	adds	r0, r0, #1
    c802:	d105      	bne.n	c810 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c804:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c808:	43c0      	mvns	r0, r0
    c80a:	0400      	lsls	r0, r0, #16
    c80c:	0c00      	lsrs	r0, r0, #16
    c80e:	d03e      	beq.n	c88e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c810:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c814:	07c0      	lsls	r0, r0, #31
    c816:	d03a      	beq.n	c88e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    c818:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c81c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    c820:	f8ad 1000 	strh.w	r1, [sp]
    c824:	f8c4 0001 	str.w	r0, [r4, #1]
    c828:	f8bd 0000 	ldrh.w	r0, [sp]
    c82c:	f8a4 0005 	strh.w	r0, [r4, #5]
    c830:	79a0      	ldrb	r0, [r4, #6]
    c832:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c836:	71a0      	strb	r0, [r4, #6]
    c838:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c83c:	1c40      	adds	r0, r0, #1
    c83e:	d00f      	beq.n	c860 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c840:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c844:	1c40      	adds	r0, r0, #1
    c846:	d00b      	beq.n	c860 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c848:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c84c:	1c40      	adds	r0, r0, #1
    c84e:	d007      	beq.n	c860 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c850:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c854:	1c40      	adds	r0, r0, #1
    c856:	d003      	beq.n	c860 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    c858:	2000      	movs	r0, #0
    c85a:	f7f8 fa21 	bl	4ca0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c85e:	b140      	cbz	r0, c872 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    c860:	2210      	movs	r2, #16
    c862:	2100      	movs	r1, #0
    c864:	1de0      	adds	r0, r4, #7
    c866:	f7ff fbda 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c86a:	2001      	movs	r0, #1
    c86c:	7020      	strb	r0, [r4, #0]
    c86e:	2000      	movs	r0, #0
    c870:	bd38      	pop	{r3, r4, r5, pc}
    c872:	f855 2f90 	ldr.w	r2, [r5, #144]!
    c876:	6869      	ldr	r1, [r5, #4]
    c878:	68a8      	ldr	r0, [r5, #8]
    c87a:	68eb      	ldr	r3, [r5, #12]
    c87c:	f8c4 2007 	str.w	r2, [r4, #7]
    c880:	f8c4 100b 	str.w	r1, [r4, #11]
    c884:	f8c4 000f 	str.w	r0, [r4, #15]
    c888:	f8c4 3013 	str.w	r3, [r4, #19]
    c88c:	e7ed      	b.n	c86a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c88e:	2000      	movs	r0, #0
    c890:	e7ec      	b.n	c86c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000c892 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c892:	f002 bd24 	b.w	f2de <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c896 <sdc_hci_cmd_ip_read_bd_addr>:
    c896:	f002 be2a 	b.w	f4ee <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c89a <sdc_hci_cmd_ip_read_local_version_information>:
    c89a:	f7fd bb5b 	b.w	9f54 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c89e <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c89e:	f002 ba08 	b.w	ecb2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c8a2 <sdc_hci_cmd_le_add_device_to_white_list>:
    c8a2:	f002 ba21 	b.w	ece8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c8a6 <sdc_hci_cmd_le_clear_resolving_list>:
    c8a6:	f002 ba36 	b.w	ed16 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c8aa <sdc_hci_cmd_le_clear_white_list>:
    c8aa:	f002 ba41 	b.w	ed30 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c8ae <sdc_hci_cmd_le_encrypt>:
    c8ae:	f002 ba49 	b.w	ed44 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c8b2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c8b2:	8802      	ldrh	r2, [r0, #0]
    c8b4:	800a      	strh	r2, [r1, #0]
    c8b6:	f002 ba4e 	b.w	ed56 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c8ba <sdc_hci_cmd_le_long_term_key_request_reply>:
    c8ba:	8802      	ldrh	r2, [r0, #0]
    c8bc:	800a      	strh	r2, [r1, #0]
    c8be:	f002 ba63 	b.w	ed88 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c8c2 <sdc_hci_cmd_le_rand>:
    c8c2:	f002 ba8b 	b.w	eddc <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c8c6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c8c6:	f002 ba8f 	b.w	ede8 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c8ca <sdc_hci_cmd_le_read_buffer_size>:
    c8ca:	f7fd ba8b 	b.w	9de4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c8ce <sdc_hci_cmd_le_read_channel_map>:
    c8ce:	f7fd ba93 	b.w	9df8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c8d2 <sdc_hci_cmd_le_read_max_data_length>:
    c8d2:	f002 ba92 	b.w	edfa <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c8d6 <sdc_hci_cmd_le_read_phy>:
    c8d6:	f002 baa0 	b.w	ee1a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c8da <sdc_hci_cmd_le_read_remote_features>:
    c8da:	f7fd bab7 	b.w	9e4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c8de <sdc_hci_cmd_le_read_resolving_list_size>:
    c8de:	f002 bac7 	b.w	ee70 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c8e2 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c8e2:	f7fd bad3 	b.w	9e8c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c8e6 <sdc_hci_cmd_le_read_transmit_power>:
    c8e6:	f002 bac7 	b.w	ee78 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c8ea <sdc_hci_cmd_le_read_white_list_size>:
    c8ea:	f002 bace 	b.w	ee8a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c8ee <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c8ee:	f002 bad0 	b.w	ee92 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c8f2 <sdc_hci_cmd_le_remove_device_from_white_list>:
    c8f2:	f002 bae7 	b.w	eec4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c8f6 <sdc_hci_cmd_le_set_address_resolution_enable>:
    c8f6:	f002 bafa 	b.w	eeee <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c8fa <sdc_hci_cmd_le_set_adv_data>:
    c8fa:	f002 bb06 	b.w	ef0a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c8fe <sdc_hci_cmd_le_set_adv_enable>:
    c8fe:	f002 bb19 	b.w	ef34 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c902 <sdc_hci_cmd_le_set_adv_params>:
    c902:	f002 bb4a 	b.w	ef9a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c906 <sdc_hci_cmd_le_set_data_length>:
    c906:	f002 bbdd 	b.w	f0c4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c90a <sdc_hci_cmd_le_set_default_phy>:
    c90a:	f7fd bacf 	b.w	9eac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c90e <sdc_hci_cmd_le_set_event_mask>:
    c90e:	b510      	push	{r4, lr}
    c910:	f7f7 fc1e 	bl	4150 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c914:	2000      	movs	r0, #0
    c916:	bd10      	pop	{r4, pc}

0000c918 <sdc_hci_cmd_le_set_phy>:
    c918:	f002 bbfb 	b.w	f112 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c91c <sdc_hci_cmd_le_set_privacy_mode>:
    c91c:	f002 bc19 	b.w	f152 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c920 <sdc_hci_cmd_le_set_random_address>:
    c920:	f002 bc2d 	b.w	f17e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c924 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c924:	f002 bc39 	b.w	f19a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c928 <sdc_hci_cmd_le_set_scan_response_data>:
    c928:	f002 bc40 	b.w	f1ac <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c92c <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c92c:	f002 bc53 	b.w	f1d6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c930 <sdc_hci_cmd_lc_disconnect>:
    c930:	f002 b96b 	b.w	ec0a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c934 <sdc_hci_cmd_lc_read_remote_version_information>:
    c934:	f002 bde7 	b.w	f506 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c938:	b570      	push	{r4, r5, r6, lr}
    c93a:	880b      	ldrh	r3, [r1, #0]
    c93c:	7f04      	ldrb	r4, [r0, #28]
    c93e:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c942:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c946:	8802      	ldrh	r2, [r0, #0]
    c948:	4435      	add	r5, r6
    c94a:	1da4      	adds	r4, r4, #6
    c94c:	882d      	ldrh	r5, [r5, #0]
    c94e:	4422      	add	r2, r4
    c950:	b292      	uxth	r2, r2
    c952:	4425      	add	r5, r4
    c954:	1e54      	subs	r4, r2, #1
    c956:	442c      	add	r4, r5
    c958:	fb94 f4f2 	sdiv	r4, r4, r2
    c95c:	fb02 6204 	mla	r2, r2, r4, r6
    c960:	8840      	ldrh	r0, [r0, #2]
    c962:	b292      	uxth	r2, r2
    c964:	4290      	cmp	r0, r2
    c966:	d903      	bls.n	c970 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c968:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c96c:	4310      	orrs	r0, r2
    c96e:	e002      	b.n	c976 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c974:	4398      	bics	r0, r3
    c976:	8008      	strh	r0, [r1, #0]
    c978:	bd70      	pop	{r4, r5, r6, pc}
    c97a:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c97e:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c982:	429a      	cmp	r2, r3
    c984:	d107      	bne.n	c996 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c986:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c98a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c98e:	4288      	cmp	r0, r1
    c990:	d001      	beq.n	c996 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c992:	2001      	movs	r0, #1
    c994:	4770      	bx	lr
    c996:	2000      	movs	r0, #0
    c998:	4770      	bx	lr

0000c99a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c99a:	b570      	push	{r4, r5, r6, lr}
    c99c:	7f00      	ldrb	r0, [r0, #28]
    c99e:	461c      	mov	r4, r3
    c9a0:	1d80      	adds	r0, r0, #6
    c9a2:	4408      	add	r0, r1
    c9a4:	4613      	mov	r3, r2
    c9a6:	8809      	ldrh	r1, [r1, #0]
    c9a8:	9a04      	ldr	r2, [sp, #16]
    c9aa:	1cc9      	adds	r1, r1, #3
    c9ac:	b289      	uxth	r1, r1
    c9ae:	1915      	adds	r5, r2, r4
    c9b0:	1ec0      	subs	r0, r0, #3
    c9b2:	428d      	cmp	r5, r1
    c9b4:	d805      	bhi.n	c9c2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c9b6:	1881      	adds	r1, r0, r2
    c9b8:	4622      	mov	r2, r4
    c9ba:	4618      	mov	r0, r3
    c9bc:	f7ff fab5 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9c0:	e000      	b.n	c9c4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c9c2:	2400      	movs	r4, #0
    c9c4:	4620      	mov	r0, r4
    c9c6:	bd70      	pop	{r4, r5, r6, pc}

0000c9c8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c9c8:	b570      	push	{r4, r5, r6, lr}
    c9ca:	7f00      	ldrb	r0, [r0, #28]
    c9cc:	461c      	mov	r4, r3
    c9ce:	1d80      	adds	r0, r0, #6
    c9d0:	4408      	add	r0, r1
    c9d2:	4613      	mov	r3, r2
    c9d4:	8809      	ldrh	r1, [r1, #0]
    c9d6:	9a04      	ldr	r2, [sp, #16]
    c9d8:	1cc9      	adds	r1, r1, #3
    c9da:	b289      	uxth	r1, r1
    c9dc:	1915      	adds	r5, r2, r4
    c9de:	1ec0      	subs	r0, r0, #3
    c9e0:	428d      	cmp	r5, r1
    c9e2:	d805      	bhi.n	c9f0 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c9e4:	4410      	add	r0, r2
    c9e6:	4622      	mov	r2, r4
    c9e8:	4619      	mov	r1, r3
    c9ea:	f7ff fa9e 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9ee:	e000      	b.n	c9f2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c9f0:	2400      	movs	r4, #0
    c9f2:	4620      	mov	r0, r4
    c9f4:	bd70      	pop	{r4, r5, r6, pc}

0000c9f6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c9f6:	8881      	ldrh	r1, [r0, #4]
    c9f8:	88c0      	ldrh	r0, [r0, #6]
    c9fa:	4288      	cmp	r0, r1
    c9fc:	d101      	bne.n	ca02 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c9fe:	2001      	movs	r0, #1
    ca00:	4770      	bx	lr
    ca02:	2000      	movs	r0, #0
    ca04:	4770      	bx	lr

0000ca06 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    ca06:	8881      	ldrh	r1, [r0, #4]
    ca08:	8900      	ldrh	r0, [r0, #8]
    ca0a:	4288      	cmp	r0, r1
    ca0c:	d101      	bne.n	ca12 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    ca0e:	2001      	movs	r0, #1
    ca10:	4770      	bx	lr
    ca12:	2000      	movs	r0, #0
    ca14:	4770      	bx	lr

0000ca16 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    ca16:	b570      	push	{r4, r5, r6, lr}
    ca18:	4604      	mov	r4, r0
    ca1a:	f100 0124 	add.w	r1, r0, #36	; 0x24
    ca1e:	8880      	ldrh	r0, [r0, #4]
    ca20:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    ca24:	4401      	add	r1, r0
    ca26:	8a20      	ldrh	r0, [r4, #16]
    ca28:	2800      	cmp	r0, #0
    ca2a:	d01a      	beq.n	ca62 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    ca2c:	89a2      	ldrh	r2, [r4, #12]
    ca2e:	2500      	movs	r5, #0
    ca30:	4410      	add	r0, r2
    ca32:	b280      	uxth	r0, r0
    ca34:	81a0      	strh	r0, [r4, #12]
    ca36:	880a      	ldrh	r2, [r1, #0]
    ca38:	4290      	cmp	r0, r2
    ca3a:	d905      	bls.n	ca48 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    ca3c:	f240 1163 	movw	r1, #355	; 0x163
    ca40:	f04f 0014 	mov.w	r0, #20
    ca44:	f7f7 fa02 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca48:	d109      	bne.n	ca5e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    ca4a:	69a0      	ldr	r0, [r4, #24]
    ca4c:	b108      	cbz	r0, ca52 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    ca4e:	7f40      	ldrb	r0, [r0, #29]
    ca50:	7088      	strb	r0, [r1, #2]
    ca52:	f104 0104 	add.w	r1, r4, #4
    ca56:	4620      	mov	r0, r4
    ca58:	f7ff ff6e 	bl	c938 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    ca5c:	81a5      	strh	r5, [r4, #12]
    ca5e:	8225      	strh	r5, [r4, #16]
    ca60:	2001      	movs	r0, #1
    ca62:	bd70      	pop	{r4, r5, r6, pc}

0000ca64 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca66:	4604      	mov	r4, r0
    ca68:	f100 0324 	add.w	r3, r0, #36	; 0x24
    ca6c:	88c0      	ldrh	r0, [r0, #6]
    ca6e:	460e      	mov	r6, r1
    ca70:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ca74:	8a60      	ldrh	r0, [r4, #18]
    ca76:	19d9      	adds	r1, r3, r7
    ca78:	b108      	cbz	r0, ca7e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    ca7a:	42b0      	cmp	r0, r6
    ca7c:	d201      	bcs.n	ca82 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    ca7e:	2000      	movs	r0, #0
    ca80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca82:	89e0      	ldrh	r0, [r4, #14]
    ca84:	2500      	movs	r5, #0
    ca86:	b140      	cbz	r0, ca9a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    ca88:	f8b1 c000 	ldrh.w	ip, [r1]
    ca8c:	4560      	cmp	r0, ip
    ca8e:	d008      	beq.n	caa2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    ca90:	f240 214b 	movw	r1, #587	; 0x24b
    ca94:	2014      	movs	r0, #20
    ca96:	f7f7 f9d9 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca9a:	7f60      	ldrb	r0, [r4, #29]
    ca9c:	7088      	strb	r0, [r1, #2]
    ca9e:	800d      	strh	r5, [r1, #0]
    caa0:	e00e      	b.n	cac0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    caa2:	f894 c01c 	ldrb.w	ip, [r4, #28]
    caa6:	4418      	add	r0, r3
    caa8:	f10c 0c06 	add.w	ip, ip, #6
    caac:	44bc      	add	ip, r7
    caae:	4460      	add	r0, ip
    cab0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    cab4:	f820 cc03 	strh.w	ip, [r0, #-3]
    cab8:	f894 c020 	ldrb.w	ip, [r4, #32]
    cabc:	f800 cc01 	strb.w	ip, [r0, #-1]
    cac0:	89e0      	ldrh	r0, [r4, #14]
    cac2:	4430      	add	r0, r6
    cac4:	81e0      	strh	r0, [r4, #14]
    cac6:	8808      	ldrh	r0, [r1, #0]
    cac8:	4430      	add	r0, r6
    caca:	8008      	strh	r0, [r1, #0]
    cacc:	b19a      	cbz	r2, caf6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    cace:	1da1      	adds	r1, r4, #6
    cad0:	4620      	mov	r0, r4
    cad2:	f7ff ff31 	bl	c938 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cad6:	81e5      	strh	r5, [r4, #14]
    cad8:	7f60      	ldrb	r0, [r4, #29]
    cada:	1c40      	adds	r0, r0, #1
    cadc:	7760      	strb	r0, [r4, #29]
    cade:	7da0      	ldrb	r0, [r4, #22]
    cae0:	f88d 0000 	strb.w	r0, [sp]
    cae4:	9800      	ldr	r0, [sp, #0]
    cae6:	9000      	str	r0, [sp, #0]
    cae8:	f89d 0000 	ldrb.w	r0, [sp]
    caec:	b178      	cbz	r0, cb0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    caee:	88e0      	ldrh	r0, [r4, #6]
    caf0:	82a0      	strh	r0, [r4, #20]
    caf2:	75a5      	strb	r5, [r4, #22]
    caf4:	e00b      	b.n	cb0e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    caf6:	7f20      	ldrb	r0, [r4, #28]
    caf8:	89e1      	ldrh	r1, [r4, #14]
    cafa:	1d80      	adds	r0, r0, #6
    cafc:	4438      	add	r0, r7
    cafe:	4419      	add	r1, r3
    cb00:	4408      	add	r0, r1
    cb02:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    cb06:	83e1      	strh	r1, [r4, #30]
    cb08:	7880      	ldrb	r0, [r0, #2]
    cb0a:	f884 0020 	strb.w	r0, [r4, #32]
    cb0e:	8265      	strh	r5, [r4, #18]
    cb10:	2001      	movs	r0, #1
    cb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cb14 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    cb14:	b510      	push	{r4, lr}
    cb16:	4604      	mov	r4, r0
    cb18:	88c0      	ldrh	r0, [r0, #6]
    cb1a:	88a1      	ldrh	r1, [r4, #4]
    cb1c:	4281      	cmp	r1, r0
    cb1e:	d007      	beq.n	cb30 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cb20:	89a0      	ldrh	r0, [r4, #12]
    cb22:	b928      	cbnz	r0, cb30 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cb24:	8a20      	ldrh	r0, [r4, #16]
    cb26:	b918      	cbnz	r0, cb30 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    cb28:	88a0      	ldrh	r0, [r4, #4]
    cb2a:	8aa1      	ldrh	r1, [r4, #20]
    cb2c:	4288      	cmp	r0, r1
    cb2e:	d101      	bne.n	cb34 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    cb30:	2000      	movs	r0, #0
    cb32:	bd10      	pop	{r4, pc}
    cb34:	1d21      	adds	r1, r4, #4
    cb36:	4620      	mov	r0, r4
    cb38:	f7ff fefe 	bl	c938 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb3c:	2000      	movs	r0, #0
    cb3e:	8220      	strh	r0, [r4, #16]
    cb40:	2001      	movs	r0, #1
    cb42:	bd10      	pop	{r4, pc}

0000cb44 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    cb44:	b510      	push	{r4, lr}
    cb46:	4604      	mov	r4, r0
    cb48:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cb4c:	88c0      	ldrh	r0, [r0, #6]
    cb4e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cb52:	4402      	add	r2, r0
    cb54:	8820      	ldrh	r0, [r4, #0]
    cb56:	2845      	cmp	r0, #69	; 0x45
    cb58:	d200      	bcs.n	cb5c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    cb5a:	2045      	movs	r0, #69	; 0x45
    cb5c:	4288      	cmp	r0, r1
    cb5e:	d204      	bcs.n	cb6a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    cb60:	f240 1119 	movw	r1, #281	; 0x119
    cb64:	2014      	movs	r0, #20
    cb66:	f7f7 f971 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb6a:	7de0      	ldrb	r0, [r4, #23]
    cb6c:	2800      	cmp	r0, #0
    cb6e:	d003      	beq.n	cb78 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    cb70:	8810      	ldrh	r0, [r2, #0]
    cb72:	4288      	cmp	r0, r1
    cb74:	d201      	bcs.n	cb7a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    cb76:	2000      	movs	r0, #0
    cb78:	bd10      	pop	{r4, pc}
    cb7a:	8011      	strh	r1, [r2, #0]
    cb7c:	1da1      	adds	r1, r4, #6
    cb7e:	4620      	mov	r0, r4
    cb80:	f7ff feda 	bl	c938 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cb84:	2000      	movs	r0, #0
    cb86:	75e0      	strb	r0, [r4, #23]
    cb88:	2001      	movs	r0, #1
    cb8a:	bd10      	pop	{r4, pc}

0000cb8c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb90:	8941      	ldrh	r1, [r0, #10]
    cb92:	8886      	ldrh	r6, [r0, #4]
    cb94:	4604      	mov	r4, r0
    cb96:	2500      	movs	r5, #0
    cb98:	f100 070a 	add.w	r7, r0, #10
    cb9c:	e006      	b.n	cbac <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    cb9e:	4639      	mov	r1, r7
    cba0:	4620      	mov	r0, r4
    cba2:	f7ff fec9 	bl	c938 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cba6:	1c6d      	adds	r5, r5, #1
    cba8:	8961      	ldrh	r1, [r4, #10]
    cbaa:	b2ad      	uxth	r5, r5
    cbac:	42b1      	cmp	r1, r6
    cbae:	d1f6      	bne.n	cb9e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    cbb0:	4628      	mov	r0, r5
    cbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cbb6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    cbb6:	b530      	push	{r4, r5, lr}
    cbb8:	88c4      	ldrh	r4, [r0, #6]
    cbba:	8881      	ldrh	r1, [r0, #4]
    cbbc:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cbc0:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cbc4:	4413      	add	r3, r2
    cbc6:	8882      	ldrh	r2, [r0, #4]
    cbc8:	8a85      	ldrh	r5, [r0, #20]
    cbca:	42aa      	cmp	r2, r5
    cbcc:	d012      	beq.n	cbf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cbce:	42a1      	cmp	r1, r4
    cbd0:	d010      	beq.n	cbf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cbd2:	8981      	ldrh	r1, [r0, #12]
    cbd4:	b971      	cbnz	r1, cbf4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    cbd6:	6982      	ldr	r2, [r0, #24]
    cbd8:	b172      	cbz	r2, cbf8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cbda:	4610      	mov	r0, r2
    cbdc:	f7ff ff13 	bl	ca06 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    cbe0:	b950      	cbnz	r0, cbf8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cbe2:	8910      	ldrh	r0, [r2, #8]
    cbe4:	3224      	adds	r2, #36	; 0x24
    cbe6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    cbea:	4410      	add	r0, r2
    cbec:	7899      	ldrb	r1, [r3, #2]
    cbee:	7880      	ldrb	r0, [r0, #2]
    cbf0:	4288      	cmp	r0, r1
    cbf2:	d101      	bne.n	cbf8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    cbf4:	2000      	movs	r0, #0
    cbf6:	bd30      	pop	{r4, r5, pc}
    cbf8:	4618      	mov	r0, r3
    cbfa:	bd30      	pop	{r4, r5, pc}

0000cbfc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    cbfc:	7f00      	ldrb	r0, [r0, #28]
    cbfe:	1d80      	adds	r0, r0, #6
    cc00:	4408      	add	r0, r1
    cc02:	1ec0      	subs	r0, r0, #3
    cc04:	6010      	str	r0, [r2, #0]
    cc06:	8808      	ldrh	r0, [r1, #0]
    cc08:	4770      	bx	lr

0000cc0a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    cc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc0e:	460e      	mov	r6, r1
    cc10:	88c1      	ldrh	r1, [r0, #6]
    cc12:	8902      	ldrh	r2, [r0, #8]
    cc14:	4604      	mov	r4, r0
    cc16:	f100 0824 	add.w	r8, r0, #36	; 0x24
    cc1a:	8800      	ldrh	r0, [r0, #0]
    cc1c:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    cc20:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    cc24:	2845      	cmp	r0, #69	; 0x45
    cc26:	d200      	bcs.n	cc2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    cc28:	2045      	movs	r0, #69	; 0x45
    cc2a:	42b0      	cmp	r0, r6
    cc2c:	d203      	bcs.n	cc36 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    cc2e:	21db      	movs	r1, #219	; 0xdb
    cc30:	2014      	movs	r0, #20
    cc32:	f7f7 f90b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc36:	4610      	mov	r0, r2
    cc38:	f7ff fe9f 	bl	c97a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    cc3c:	b110      	cbz	r0, cc44 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    cc3e:	2000      	movs	r0, #0
    cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc44:	42af      	cmp	r7, r5
    cc46:	d908      	bls.n	cc5a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cc48:	7f21      	ldrb	r1, [r4, #28]
    cc4a:	1b78      	subs	r0, r7, r5
    cc4c:	1a40      	subs	r0, r0, r1
    cc4e:	1f80      	subs	r0, r0, #6
    cc50:	4286      	cmp	r6, r0
    cc52:	dd02      	ble.n	cc5a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    cc54:	2000      	movs	r0, #0
    cc56:	75e0      	strb	r0, [r4, #23]
    cc58:	e7f1      	b.n	cc3e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    cc5a:	eb08 0005 	add.w	r0, r8, r5
    cc5e:	2101      	movs	r1, #1
    cc60:	8006      	strh	r6, [r0, #0]
    cc62:	75e1      	strb	r1, [r4, #23]
    cc64:	e7ec      	b.n	cc40 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000cc66 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    cc66:	b538      	push	{r3, r4, r5, lr}
    cc68:	88c4      	ldrh	r4, [r0, #6]
    cc6a:	8881      	ldrh	r1, [r0, #4]
    cc6c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    cc70:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    cc74:	441a      	add	r2, r3
    cc76:	42a1      	cmp	r1, r4
    cc78:	d010      	beq.n	cc9c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cc7a:	8983      	ldrh	r3, [r0, #12]
    cc7c:	8a05      	ldrh	r5, [r0, #16]
    cc7e:	8812      	ldrh	r2, [r2, #0]
    cc80:	442b      	add	r3, r5
    cc82:	4293      	cmp	r3, r2
    cc84:	d308      	bcc.n	cc98 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    cc86:	f8ad 1000 	strh.w	r1, [sp]
    cc8a:	4669      	mov	r1, sp
    cc8c:	f7ff fe54 	bl	c938 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cc90:	f8bd 0000 	ldrh.w	r0, [sp]
    cc94:	42a0      	cmp	r0, r4
    cc96:	d001      	beq.n	cc9c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    cc98:	2001      	movs	r0, #1
    cc9a:	bd38      	pop	{r3, r4, r5, pc}
    cc9c:	2000      	movs	r0, #0
    cc9e:	bd38      	pop	{r3, r4, r5, pc}

0000cca0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    cca0:	b570      	push	{r4, r5, r6, lr}
    cca2:	88c6      	ldrh	r6, [r0, #6]
    cca4:	8885      	ldrh	r5, [r0, #4]
    cca6:	4603      	mov	r3, r0
    cca8:	f100 0424 	add.w	r4, r0, #36	; 0x24
    ccac:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    ccb0:	4420      	add	r0, r4
    ccb2:	42b5      	cmp	r5, r6
    ccb4:	d102      	bne.n	ccbc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    ccb6:	2000      	movs	r0, #0
    ccb8:	8218      	strh	r0, [r3, #16]
    ccba:	bd70      	pop	{r4, r5, r6, pc}
    ccbc:	8804      	ldrh	r4, [r0, #0]
    ccbe:	899d      	ldrh	r5, [r3, #12]
    ccc0:	7f1e      	ldrb	r6, [r3, #28]
    ccc2:	1b64      	subs	r4, r4, r5
    ccc4:	4435      	add	r5, r6
    ccc6:	4428      	add	r0, r5
    ccc8:	880d      	ldrh	r5, [r1, #0]
    ccca:	b2a4      	uxth	r4, r4
    cccc:	1cc0      	adds	r0, r0, #3
    ccce:	42a5      	cmp	r5, r4
    ccd0:	d900      	bls.n	ccd4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    ccd2:	800c      	strh	r4, [r1, #0]
    ccd4:	899c      	ldrh	r4, [r3, #12]
    ccd6:	b124      	cbz	r4, cce2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    ccd8:	2400      	movs	r4, #0
    ccda:	7014      	strb	r4, [r2, #0]
    ccdc:	8809      	ldrh	r1, [r1, #0]
    ccde:	8219      	strh	r1, [r3, #16]
    cce0:	bd70      	pop	{r4, r5, r6, pc}
    cce2:	2401      	movs	r4, #1
    cce4:	e7f9      	b.n	ccda <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000cce6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    cce6:	b508      	push	{r3, lr}
    cce8:	8a81      	ldrh	r1, [r0, #20]
    ccea:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    ccee:	3aff      	subs	r2, #255	; 0xff
    ccf0:	d008      	beq.n	cd04 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    ccf2:	7d82      	ldrb	r2, [r0, #22]
    ccf4:	f88d 2000 	strb.w	r2, [sp]
    ccf8:	9a00      	ldr	r2, [sp, #0]
    ccfa:	9200      	str	r2, [sp, #0]
    ccfc:	f89d 2000 	ldrb.w	r2, [sp]
    cd00:	b952      	cbnz	r2, cd18 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    cd02:	e004      	b.n	cd0e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    cd04:	f44f 7162 	mov.w	r1, #904	; 0x388
    cd08:	2014      	movs	r0, #20
    cd0a:	f7f7 f89f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd0e:	8880      	ldrh	r0, [r0, #4]
    cd10:	4281      	cmp	r1, r0
    cd12:	d101      	bne.n	cd18 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    cd14:	2000      	movs	r0, #0
    cd16:	bd08      	pop	{r3, pc}
    cd18:	2001      	movs	r0, #1
    cd1a:	bd08      	pop	{r3, pc}

0000cd1c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    cd1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cd20:	8281      	strh	r1, [r0, #20]
    cd22:	2100      	movs	r1, #0
    cd24:	7581      	strb	r1, [r0, #22]
    cd26:	4770      	bx	lr

0000cd28 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    cd28:	b510      	push	{r4, lr}
    cd2a:	8a81      	ldrh	r1, [r0, #20]
    cd2c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    cd30:	3aff      	subs	r2, #255	; 0xff
    cd32:	d004      	beq.n	cd3e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    cd34:	f44f 7159 	mov.w	r1, #868	; 0x364
    cd38:	2014      	movs	r0, #20
    cd3a:	f7f7 f887 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd3e:	88c1      	ldrh	r1, [r0, #6]
    cd40:	8281      	strh	r1, [r0, #20]
    cd42:	89c1      	ldrh	r1, [r0, #14]
    cd44:	b109      	cbz	r1, cd4a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    cd46:	2101      	movs	r1, #1
    cd48:	e000      	b.n	cd4c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    cd4a:	2100      	movs	r1, #0
    cd4c:	7581      	strb	r1, [r0, #22]
    cd4e:	bd10      	pop	{r4, pc}

0000cd50 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd54:	461d      	mov	r5, r3
    cd56:	4616      	mov	r6, r2
    cd58:	9f06      	ldr	r7, [sp, #24]
    cd5a:	460b      	mov	r3, r1
    cd5c:	4604      	mov	r4, r0
    cd5e:	463a      	mov	r2, r7
    cd60:	4629      	mov	r1, r5
    cd62:	4630      	mov	r0, r6
    cd64:	f000 f84f 	bl	ce06 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cd68:	4283      	cmp	r3, r0
    cd6a:	d201      	bcs.n	cd70 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    cd6c:	21a8      	movs	r1, #168	; 0xa8
    cd6e:	e018      	b.n	cda2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cd70:	1ce0      	adds	r0, r4, #3
    cd72:	f020 0103 	bic.w	r1, r0, #3
    cd76:	4620      	mov	r0, r4
    cd78:	42a1      	cmp	r1, r4
    cd7a:	d001      	beq.n	cd80 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    cd7c:	21a9      	movs	r1, #169	; 0xa9
    cd7e:	e010      	b.n	cda2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    cd80:	2224      	movs	r2, #36	; 0x24
    cd82:	2100      	movs	r1, #0
    cd84:	f7ff f94b 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cd88:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cd8c:	82a0      	strh	r0, [r4, #20]
    cd8e:	19a8      	adds	r0, r5, r6
    cd90:	1d80      	adds	r0, r0, #6
    cd92:	4378      	muls	r0, r7
    cd94:	b280      	uxth	r0, r0
    cd96:	7725      	strb	r5, [r4, #28]
    cd98:	8060      	strh	r0, [r4, #2]
    cd9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    cd9e:	d903      	bls.n	cda8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    cda0:	21af      	movs	r1, #175	; 0xaf
    cda2:	2014      	movs	r0, #20
    cda4:	f7f7 f852 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cda8:	8026      	strh	r6, [r4, #0]
    cdaa:	2000      	movs	r0, #0
    cdac:	7760      	strb	r0, [r4, #29]
    cdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cdb2 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    cdb2:	6181      	str	r1, [r0, #24]
    cdb4:	6188      	str	r0, [r1, #24]
    cdb6:	4770      	bx	lr

0000cdb8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    cdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdbc:	460b      	mov	r3, r1
    cdbe:	4604      	mov	r4, r0
    cdc0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    cdc4:	8905      	ldrh	r5, [r0, #8]
    cdc6:	8946      	ldrh	r6, [r0, #10]
    cdc8:	8880      	ldrh	r0, [r0, #4]
    cdca:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    cdce:	4439      	add	r1, r7
    cdd0:	460f      	mov	r7, r1
    cdd2:	4285      	cmp	r5, r0
    cdd4:	d102      	bne.n	cddc <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    cdd6:	2000      	movs	r0, #0
    cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cddc:	b10a      	cbz	r2, cde2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    cdde:	1cc8      	adds	r0, r1, #3
    cde0:	6010      	str	r0, [r2, #0]
    cde2:	b123      	cbz	r3, cdee <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    cde4:	7f22      	ldrb	r2, [r4, #28]
    cde6:	1cf9      	adds	r1, r7, #3
    cde8:	4618      	mov	r0, r3
    cdea:	f7ff f89e 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cdee:	883f      	ldrh	r7, [r7, #0]
    cdf0:	f104 0108 	add.w	r1, r4, #8
    cdf4:	4620      	mov	r0, r4
    cdf6:	f7ff fd9f 	bl	c938 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cdfa:	42b5      	cmp	r5, r6
    cdfc:	d101      	bne.n	ce02 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    cdfe:	8920      	ldrh	r0, [r4, #8]
    ce00:	8160      	strh	r0, [r4, #10]
    ce02:	4638      	mov	r0, r7
    ce04:	e7e8      	b.n	cdd8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000ce06 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    ce06:	4401      	add	r1, r0
    ce08:	1d89      	adds	r1, r1, #6
    ce0a:	4351      	muls	r1, r2
    ce0c:	b28a      	uxth	r2, r1
    ce0e:	2100      	movs	r1, #0
    ce10:	2845      	cmp	r0, #69	; 0x45
    ce12:	d201      	bcs.n	ce18 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    ce14:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    ce18:	3224      	adds	r2, #36	; 0x24
    ce1a:	1850      	adds	r0, r2, r1
    ce1c:	b280      	uxth	r0, r0
    ce1e:	4770      	bx	lr

0000ce20 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    ce20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce24:	4688      	mov	r8, r1
    ce26:	88c1      	ldrh	r1, [r0, #6]
    ce28:	4604      	mov	r4, r0
    ce2a:	8900      	ldrh	r0, [r0, #8]
    ce2c:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    ce30:	f104 0524 	add.w	r5, r4, #36	; 0x24
    ce34:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    ce38:	eb05 0906 	add.w	r9, r5, r6
    ce3c:	f7ff fd9d 	bl	c97a <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    ce40:	2200      	movs	r2, #0
    ce42:	b998      	cbnz	r0, ce6c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    ce44:	8820      	ldrh	r0, [r4, #0]
    ce46:	2845      	cmp	r0, #69	; 0x45
    ce48:	d200      	bcs.n	ce4c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    ce4a:	2045      	movs	r0, #69	; 0x45
    ce4c:	42b7      	cmp	r7, r6
    ce4e:	d906      	bls.n	ce5e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ce50:	7f23      	ldrb	r3, [r4, #28]
    ce52:	1bb9      	subs	r1, r7, r6
    ce54:	1ac9      	subs	r1, r1, r3
    ce56:	1f89      	subs	r1, r1, #6
    ce58:	4281      	cmp	r1, r0
    ce5a:	da00      	bge.n	ce5e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    ce5c:	4608      	mov	r0, r1
    ce5e:	89e1      	ldrh	r1, [r4, #14]
    ce60:	b111      	cbz	r1, ce68 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    ce62:	f8b9 3000 	ldrh.w	r3, [r9]
    ce66:	1ac0      	subs	r0, r0, r3
    ce68:	4540      	cmp	r0, r8
    ce6a:	da03      	bge.n	ce74 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    ce6c:	8262      	strh	r2, [r4, #18]
    ce6e:	2000      	movs	r0, #0
    ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce74:	7f20      	ldrb	r0, [r4, #28]
    ce76:	4429      	add	r1, r5
    ce78:	1d80      	adds	r0, r0, #6
    ce7a:	4430      	add	r0, r6
    ce7c:	4408      	add	r0, r1
    ce7e:	f8a4 8012 	strh.w	r8, [r4, #18]
    ce82:	1ec0      	subs	r0, r0, #3
    ce84:	e7f4      	b.n	ce70 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000ce86 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    ce86:	2100      	movs	r1, #0
    ce88:	81c1      	strh	r1, [r0, #14]
    ce8a:	8241      	strh	r1, [r0, #18]
    ce8c:	7581      	strb	r1, [r0, #22]
    ce8e:	4770      	bx	lr

0000ce90 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    ce90:	b570      	push	{r4, r5, r6, lr}
    ce92:	2300      	movs	r3, #0
    ce94:	2908      	cmp	r1, #8
    ce96:	d204      	bcs.n	cea2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    ce98:	f240 11cb 	movw	r1, #459	; 0x1cb
    ce9c:	2015      	movs	r0, #21
    ce9e:	f7f6 ffd5 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cea2:	6802      	ldr	r2, [r0, #0]
    cea4:	b90a      	cbnz	r2, ceaa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    cea6:	e01e      	b.n	cee6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    cea8:	4610      	mov	r0, r2
    ceaa:	6802      	ldr	r2, [r0, #0]
    ceac:	8893      	ldrh	r3, [r2, #4]
    ceae:	428b      	cmp	r3, r1
    ceb0:	d002      	beq.n	ceb8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    ceb2:	6813      	ldr	r3, [r2, #0]
    ceb4:	2b00      	cmp	r3, #0
    ceb6:	d1f7      	bne.n	cea8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    ceb8:	8894      	ldrh	r4, [r2, #4]
    ceba:	4613      	mov	r3, r2
    cebc:	428c      	cmp	r4, r1
    cebe:	d101      	bne.n	cec4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    cec0:	6811      	ldr	r1, [r2, #0]
    cec2:	e00d      	b.n	cee0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    cec4:	f101 0508 	add.w	r5, r1, #8
    cec8:	b2ae      	uxth	r6, r5
    ceca:	2500      	movs	r5, #0
    cecc:	42b4      	cmp	r4, r6
    cece:	d309      	bcc.n	cee4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    ced0:	1a64      	subs	r4, r4, r1
    ced2:	4411      	add	r1, r2
    ced4:	600d      	str	r5, [r1, #0]
    ced6:	808c      	strh	r4, [r1, #4]
    ced8:	6802      	ldr	r2, [r0, #0]
    ceda:	6812      	ldr	r2, [r2, #0]
    cedc:	6002      	str	r2, [r0, #0]
    cede:	600a      	str	r2, [r1, #0]
    cee0:	6001      	str	r1, [r0, #0]
    cee2:	e000      	b.n	cee6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    cee4:	2300      	movs	r3, #0
    cee6:	4618      	mov	r0, r3
    cee8:	bd70      	pop	{r4, r5, r6, pc}

0000ceea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    ceea:	b510      	push	{r4, lr}
    ceec:	000c      	movs	r4, r1
    ceee:	d006      	beq.n	cefe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    cef0:	2c08      	cmp	r4, #8
    cef2:	d209      	bcs.n	cf08 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    cef4:	f240 1195 	movw	r1, #405	; 0x195
    cef8:	2015      	movs	r0, #21
    cefa:	f7f6 ffa7 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cefe:	b108      	cbz	r0, cf04 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    cf00:	2100      	movs	r1, #0
    cf02:	6001      	str	r1, [r0, #0]
    cf04:	2000      	movs	r0, #0
    cf06:	bd10      	pop	{r4, pc}
    cf08:	b118      	cbz	r0, cf12 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    cf0a:	b2a1      	uxth	r1, r4
    cf0c:	6800      	ldr	r0, [r0, #0]
    cf0e:	f000 f814 	bl	cf3a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    cf12:	1d20      	adds	r0, r4, #4
    cf14:	bd10      	pop	{r4, pc}

0000cf16 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    cf16:	2100      	movs	r1, #0
    cf18:	6802      	ldr	r2, [r0, #0]
    cf1a:	e003      	b.n	cf24 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    cf1c:	8893      	ldrh	r3, [r2, #4]
    cf1e:	6812      	ldr	r2, [r2, #0]
    cf20:	4419      	add	r1, r3
    cf22:	b289      	uxth	r1, r1
    cf24:	2a00      	cmp	r2, #0
    cf26:	d1f9      	bne.n	cf1c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    cf28:	f000 b807 	b.w	cf3a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000cf2c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    cf2c:	2300      	movs	r3, #0
    cf2e:	600b      	str	r3, [r1, #0]
    cf30:	808a      	strh	r2, [r1, #4]
    cf32:	6802      	ldr	r2, [r0, #0]
    cf34:	600a      	str	r2, [r1, #0]
    cf36:	6001      	str	r1, [r0, #0]
    cf38:	4770      	bx	lr
    cf3a:	2300      	movs	r3, #0
    cf3c:	6043      	str	r3, [r0, #4]
    cf3e:	1d02      	adds	r2, r0, #4
    cf40:	8101      	strh	r1, [r0, #8]
    cf42:	6002      	str	r2, [r0, #0]
    cf44:	4770      	bx	lr

0000cf46 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    cf46:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    cf4a:	3bff      	subs	r3, #255	; 0xff
    cf4c:	d001      	beq.n	cf52 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    cf4e:	2902      	cmp	r1, #2
    cf50:	d301      	bcc.n	cf56 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    cf52:	2000      	movs	r0, #0
    cf54:	4770      	bx	lr
    cf56:	f7f7 ba33 	b.w	43c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    cf5a:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    cf5e:	3aff      	subs	r2, #255	; 0xff
    cf60:	d001      	beq.n	cf66 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    cf62:	2902      	cmp	r1, #2
    cf64:	d301      	bcc.n	cf6a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    cf66:	2000      	movs	r0, #0
    cf68:	4770      	bx	lr
    cf6a:	f7f7 ba63 	b.w	4434 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000cf6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    cf6e:	b570      	push	{r4, r5, r6, lr}
    cf70:	4605      	mov	r5, r0
    cf72:	460c      	mov	r4, r1
    cf74:	4608      	mov	r0, r1
    cf76:	f000 f973 	bl	d260 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    cf7a:	b108      	cbz	r0, cf80 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    cf7c:	2010      	movs	r0, #16
    cf7e:	bd70      	pop	{r4, r5, r6, pc}
    cf80:	2d02      	cmp	r5, #2
    cf82:	d301      	bcc.n	cf88 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    cf84:	2007      	movs	r0, #7
    cf86:	bd70      	pop	{r4, r5, r6, pc}
    cf88:	7025      	strb	r5, [r4, #0]
    cf8a:	2000      	movs	r0, #0
    cf8c:	8060      	strh	r0, [r4, #2]
    cf8e:	bd70      	pop	{r4, r5, r6, pc}
    cf90:	b510      	push	{r4, lr}
    cf92:	4604      	mov	r4, r0
    cf94:	f7f7 fa9a 	bl	44cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    cf98:	42a0      	cmp	r0, r4
    cf9a:	d901      	bls.n	cfa0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    cf9c:	2001      	movs	r0, #1
    cf9e:	bd10      	pop	{r4, pc}
    cfa0:	2000      	movs	r0, #0
    cfa2:	bd10      	pop	{r4, pc}
    cfa4:	4770      	bx	lr

0000cfa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    cfa6:	b570      	push	{r4, r5, r6, lr}
    cfa8:	460e      	mov	r6, r1
    cfaa:	461d      	mov	r5, r3
    cfac:	4611      	mov	r1, r2
    cfae:	f000 f811 	bl	cfd4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    cfb2:	4604      	mov	r4, r0
    cfb4:	4629      	mov	r1, r5
    cfb6:	4630      	mov	r0, r6
    cfb8:	f000 f803 	bl	cfc2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    cfbc:	4420      	add	r0, r4
    cfbe:	1d00      	adds	r0, r0, #4
    cfc0:	bd70      	pop	{r4, r5, r6, pc}
    cfc2:	b510      	push	{r4, lr}
    cfc4:	460a      	mov	r2, r1
    cfc6:	2101      	movs	r1, #1
    cfc8:	f7ff ff1d 	bl	ce06 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cfcc:	1cc0      	adds	r0, r0, #3
    cfce:	f020 0003 	bic.w	r0, r0, #3
    cfd2:	bd10      	pop	{r4, pc}
    cfd4:	b510      	push	{r4, lr}
    cfd6:	460a      	mov	r2, r1
    cfd8:	2101      	movs	r1, #1
    cfda:	f7ff ff14 	bl	ce06 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    cfde:	1cc0      	adds	r0, r0, #3
    cfe0:	f020 0003 	bic.w	r0, r0, #3
    cfe4:	bd10      	pop	{r4, pc}
    cfe6:	b109      	cbz	r1, cfec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    cfe8:	2100      	movs	r1, #0
    cfea:	e000      	b.n	cfee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    cfec:	2102      	movs	r1, #2
    cfee:	1843      	adds	r3, r0, r1
    cff0:	7d1a      	ldrb	r2, [r3, #20]
    cff2:	2a02      	cmp	r2, #2
    cff4:	d008      	beq.n	d008 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    cff6:	7d5b      	ldrb	r3, [r3, #21]
    cff8:	2b02      	cmp	r3, #2
    cffa:	d009      	beq.n	d010 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    cffc:	2a03      	cmp	r2, #3
    cffe:	d003      	beq.n	d008 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d000:	2b03      	cmp	r3, #3
    d002:	d005      	beq.n	d010 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d004:	2000      	movs	r0, #0
    d006:	4770      	bx	lr
    d008:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d00c:	8b00      	ldrh	r0, [r0, #24]
    d00e:	4770      	bx	lr
    d010:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d014:	8b40      	ldrh	r0, [r0, #26]
    d016:	4770      	bx	lr
    d018:	b109      	cbz	r1, d01e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d01a:	2100      	movs	r1, #0
    d01c:	e000      	b.n	d020 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    d01e:	2102      	movs	r1, #2
    d020:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d024:	8b01      	ldrh	r1, [r0, #24]
    d026:	b911      	cbnz	r1, d02e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    d028:	8b40      	ldrh	r0, [r0, #26]
    d02a:	2800      	cmp	r0, #0
    d02c:	d000      	beq.n	d030 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    d02e:	2001      	movs	r0, #1
    d030:	4770      	bx	lr
    d032:	b538      	push	{r3, r4, r5, lr}
    d034:	7883      	ldrb	r3, [r0, #2]
    d036:	f88d 3000 	strb.w	r3, [sp]
    d03a:	9b00      	ldr	r3, [sp, #0]
    d03c:	9300      	str	r3, [sp, #0]
    d03e:	f89d 3000 	ldrb.w	r3, [sp]
    d042:	b953      	cbnz	r3, d05a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    d044:	b10a      	cbz	r2, d04a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    d046:	2300      	movs	r3, #0
    d048:	e000      	b.n	d04c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    d04a:	2302      	movs	r3, #2
    d04c:	18c2      	adds	r2, r0, r3
    d04e:	7d14      	ldrb	r4, [r2, #20]
    d050:	2c02      	cmp	r4, #2
    d052:	d004      	beq.n	d05e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d054:	7d52      	ldrb	r2, [r2, #21]
    d056:	2a02      	cmp	r2, #2
    d058:	d004      	beq.n	d064 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    d05a:	2000      	movs	r0, #0
    d05c:	bd38      	pop	{r3, r4, r5, pc}
    d05e:	461a      	mov	r2, r3
    d060:	1c5b      	adds	r3, r3, #1
    d062:	e000      	b.n	d066 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d064:	1c5a      	adds	r2, r3, #1
    d066:	b181      	cbz	r1, d08a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    d068:	18c5      	adds	r5, r0, r3
    d06a:	2400      	movs	r4, #0
    d06c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d070:	752c      	strb	r4, [r5, #20]
    d072:	831c      	strh	r4, [r3, #24]
    d074:	2303      	movs	r3, #3
    d076:	1884      	adds	r4, r0, r2
    d078:	7523      	strb	r3, [r4, #20]
    d07a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d07e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d082:	685b      	ldr	r3, [r3, #4]
    d084:	600b      	str	r3, [r1, #0]
    d086:	8b00      	ldrh	r0, [r0, #24]
    d088:	8088      	strh	r0, [r1, #4]
    d08a:	2001      	movs	r0, #1
    d08c:	bd38      	pop	{r3, r4, r5, pc}
    d08e:	b510      	push	{r4, lr}
    d090:	b109      	cbz	r1, d096 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    d092:	2100      	movs	r1, #0
    d094:	e000      	b.n	d098 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    d096:	2102      	movs	r1, #2
    d098:	1843      	adds	r3, r0, r1
    d09a:	7d1c      	ldrb	r4, [r3, #20]
    d09c:	4294      	cmp	r4, r2
    d09e:	d103      	bne.n	d0a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    d0a0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d0a4:	8b00      	ldrh	r0, [r0, #24]
    d0a6:	bd10      	pop	{r4, pc}
    d0a8:	7d5b      	ldrb	r3, [r3, #21]
    d0aa:	4293      	cmp	r3, r2
    d0ac:	d103      	bne.n	d0b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    d0ae:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d0b2:	8b40      	ldrh	r0, [r0, #26]
    d0b4:	bd10      	pop	{r4, pc}
    d0b6:	2000      	movs	r0, #0
    d0b8:	bd10      	pop	{r4, pc}
    d0ba:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d0be:	d201      	bcs.n	d0c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    d0c0:	0841      	lsrs	r1, r0, #1
    d0c2:	e000      	b.n	d0c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    d0c4:	21ff      	movs	r1, #255	; 0xff
    d0c6:	1a40      	subs	r0, r0, r1
    d0c8:	f240 6172 	movw	r1, #1650	; 0x672
    d0cc:	4288      	cmp	r0, r1
    d0ce:	db00      	blt.n	d0d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    d0d0:	4608      	mov	r0, r1
    d0d2:	b280      	uxth	r0, r0
    d0d4:	4770      	bx	lr

0000d0d6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d0d6:	2101      	movs	r1, #1
    d0d8:	f7ff bf85 	b.w	cfe6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0e0:	4606      	mov	r6, r0
    d0e2:	f342 0780 	sbfx	r7, r2, #2, #1
    d0e6:	7848      	ldrb	r0, [r1, #1]
    d0e8:	460c      	mov	r4, r1
    d0ea:	f022 0504 	bic.w	r5, r2, #4
    d0ee:	1c7f      	adds	r7, r7, #1
    d0f0:	b100      	cbz	r0, d0f4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d0f2:	b90d      	cbnz	r5, d0f8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d0f4:	4328      	orrs	r0, r5
    d0f6:	d104      	bne.n	d102 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d0f8:	b145      	cbz	r5, d10c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d0fa:	2100      	movs	r1, #0
    d0fc:	4620      	mov	r0, r4
    d0fe:	f7f7 faed 	bl	46dc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d102:	2101      	movs	r1, #1
    d104:	70a1      	strb	r1, [r4, #2]
    d106:	b11f      	cbz	r7, d110 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d108:	2000      	movs	r0, #0
    d10a:	e002      	b.n	d112 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d10c:	2101      	movs	r1, #1
    d10e:	e7f5      	b.n	d0fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d110:	2002      	movs	r0, #2
    d112:	1822      	adds	r2, r4, r0
    d114:	7d12      	ldrb	r2, [r2, #20]
    d116:	2a03      	cmp	r2, #3
    d118:	d102      	bne.n	d120 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d11a:	2d02      	cmp	r5, #2
    d11c:	d000      	beq.n	d120 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d11e:	1c40      	adds	r0, r0, #1
    d120:	1822      	adds	r2, r4, r0
    d122:	7511      	strb	r1, [r2, #20]
    d124:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d128:	2200      	movs	r2, #0
    d12a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d12e:	830a      	strh	r2, [r1, #24]
    d130:	6840      	ldr	r0, [r0, #4]
    d132:	70a2      	strb	r2, [r4, #2]
    d134:	4631      	mov	r1, r6
    d136:	f362 010f 	bfi	r1, r2, #0, #16
    d13a:	e9c6 0100 	strd	r0, r1, [r6]
    d13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d142 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d146:	461e      	mov	r6, r3
    d148:	4613      	mov	r3, r2
    d14a:	4604      	mov	r4, r0
    d14c:	b109      	cbz	r1, d152 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d14e:	2000      	movs	r0, #0
    d150:	e000      	b.n	d154 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d152:	2002      	movs	r0, #2
    d154:	2101      	movs	r1, #1
    d156:	70a1      	strb	r1, [r4, #2]
    d158:	1821      	adds	r1, r4, r0
    d15a:	7d0a      	ldrb	r2, [r1, #20]
    d15c:	2a01      	cmp	r2, #1
    d15e:	d003      	beq.n	d168 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d160:	7d49      	ldrb	r1, [r1, #21]
    d162:	2901      	cmp	r1, #1
    d164:	d10c      	bne.n	d180 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d166:	1c40      	adds	r0, r0, #1
    d168:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d16c:	2700      	movs	r7, #0
    d16e:	8b29      	ldrh	r1, [r5, #24]
    d170:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d174:	198a      	adds	r2, r1, r6
    d176:	4562      	cmp	r2, ip
    d178:	d905      	bls.n	d186 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d17a:	4420      	add	r0, r4
    d17c:	832f      	strh	r7, [r5, #24]
    d17e:	7507      	strb	r7, [r0, #20]
    d180:	2000      	movs	r0, #0
    d182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d186:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d18a:	4632      	mov	r2, r6
    d18c:	6840      	ldr	r0, [r0, #4]
    d18e:	4408      	add	r0, r1
    d190:	4619      	mov	r1, r3
    d192:	f7fe feca 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d196:	8b28      	ldrh	r0, [r5, #24]
    d198:	4430      	add	r0, r6
    d19a:	8328      	strh	r0, [r5, #24]
    d19c:	70a7      	strb	r7, [r4, #2]
    d19e:	2001      	movs	r0, #1
    d1a0:	e7ef      	b.n	d182 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d1a2 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    d1a2:	2202      	movs	r2, #2
    d1a4:	2100      	movs	r1, #0
    d1a6:	f7ff bf72 	b.w	d08e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d1aa <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d1aa:	b510      	push	{r4, lr}
    d1ac:	2101      	movs	r1, #1
    d1ae:	f7ff ff33 	bl	d018 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    d1b2:	2800      	cmp	r0, #0
    d1b4:	d000      	beq.n	d1b8 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d1b6:	2001      	movs	r0, #1
    d1b8:	bd10      	pop	{r4, pc}

0000d1ba <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d1ba:	2201      	movs	r2, #1
    d1bc:	f7ff bf39 	b.w	d032 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d1c0 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d1c0:	2200      	movs	r2, #0
    d1c2:	f7ff bf36 	b.w	d032 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000d1c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d1c6:	b570      	push	{r4, r5, r6, lr}
    d1c8:	b109      	cbz	r1, d1ce <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d1ca:	2300      	movs	r3, #0
    d1cc:	e000      	b.n	d1d0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d1ce:	2302      	movs	r3, #2
    d1d0:	2101      	movs	r1, #1
    d1d2:	7081      	strb	r1, [r0, #2]
    d1d4:	18c1      	adds	r1, r0, r3
    d1d6:	2402      	movs	r4, #2
    d1d8:	7d0d      	ldrb	r5, [r1, #20]
    d1da:	2d01      	cmp	r5, #1
    d1dc:	d007      	beq.n	d1ee <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d1de:	7d4d      	ldrb	r5, [r1, #21]
    d1e0:	2d01      	cmp	r5, #1
    d1e2:	d009      	beq.n	d1f8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d1e4:	f44f 718b 	mov.w	r1, #278	; 0x116
    d1e8:	2009      	movs	r0, #9
    d1ea:	f7f6 fe2f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d1f2:	831a      	strh	r2, [r3, #24]
    d1f4:	750c      	strb	r4, [r1, #20]
    d1f6:	e003      	b.n	d200 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d1f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d1fc:	835a      	strh	r2, [r3, #26]
    d1fe:	754c      	strb	r4, [r1, #21]
    d200:	2100      	movs	r1, #0
    d202:	7081      	strb	r1, [r0, #2]
    d204:	bd70      	pop	{r4, r5, r6, pc}

0000d206 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d206:	2101      	movs	r1, #1
    d208:	7001      	strb	r1, [r0, #0]
    d20a:	4770      	bx	lr

0000d20c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d20c:	2201      	movs	r2, #1
    d20e:	4611      	mov	r1, r2
    d210:	f7ff bf3d 	b.w	d08e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d214 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d214:	2201      	movs	r2, #1
    d216:	2100      	movs	r1, #0
    d218:	f7ff bf39 	b.w	d08e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000d21c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d21c:	2100      	movs	r1, #0
    d21e:	f7ff bee2 	b.w	cfe6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    d222:	2800      	cmp	r0, #0
    d224:	db09      	blt.n	d23a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d226:	f000 021f 	and.w	r2, r0, #31
    d22a:	2101      	movs	r1, #1
    d22c:	4091      	lsls	r1, r2
    d22e:	0940      	lsrs	r0, r0, #5
    d230:	0080      	lsls	r0, r0, #2
    d232:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d236:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d23a:	4770      	bx	lr
    d23c:	5840      	ldr	r0, [r0, r1]
    d23e:	2800      	cmp	r0, #0
    d240:	d000      	beq.n	d244 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
    d242:	2001      	movs	r0, #1
    d244:	4770      	bx	lr

0000d246 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d246:	f7f7 bb9f 	b.w	4988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d24a <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d24a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d24e:	2000      	movs	r0, #0
    d250:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d254:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d258:	2001      	movs	r0, #1
    d25a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d25e:	4770      	bx	lr

0000d260 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d260:	b108      	cbz	r0, d266 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d262:	2000      	movs	r0, #0
    d264:	4770      	bx	lr
    d266:	2001      	movs	r0, #1
    d268:	4770      	bx	lr

0000d26a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d26a:	f7f7 bcdf 	b.w	4c2c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d26e <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d26e:	f7f7 bccd 	b.w	4c0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d272 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d272:	b510      	push	{r4, lr}
    d274:	2900      	cmp	r1, #0
    d276:	4604      	mov	r4, r0
    d278:	f04f 0106 	mov.w	r1, #6
    d27c:	d002      	beq.n	d284 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d27e:	f7f6 fe71 	bl	3f64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d282:	e001      	b.n	d288 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d284:	f7f6 fe7c 	bl	3f80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d288:	7960      	ldrb	r0, [r4, #5]
    d28a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d28e:	7160      	strb	r0, [r4, #5]
    d290:	bd10      	pop	{r4, pc}

0000d292 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d292:	4770      	bx	lr

0000d294 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d294:	b530      	push	{r4, r5, lr}
    d296:	460c      	mov	r4, r1
    d298:	4605      	mov	r5, r0
    d29a:	b08d      	sub	sp, #52	; 0x34
    d29c:	f04f 0103 	mov.w	r1, #3
    d2a0:	f104 0003 	add.w	r0, r4, #3
    d2a4:	b112      	cbz	r2, d2ac <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d2a6:	f7f6 fe5d 	bl	3f64 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d2aa:	e001      	b.n	d2b0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d2ac:	f7f6 fe68 	bl	3f80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d2b0:	7960      	ldrb	r0, [r4, #5]
    d2b2:	220d      	movs	r2, #13
    d2b4:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d2b8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d2bc:	7160      	strb	r0, [r4, #5]
    d2be:	2100      	movs	r1, #0
    d2c0:	a804      	add	r0, sp, #16
    d2c2:	f7fe feac 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d2c6:	78e0      	ldrb	r0, [r4, #3]
    d2c8:	f88d 001f 	strb.w	r0, [sp, #31]
    d2cc:	7920      	ldrb	r0, [r4, #4]
    d2ce:	f88d 001e 	strb.w	r0, [sp, #30]
    d2d2:	7960      	ldrb	r0, [r4, #5]
    d2d4:	f88d 001d 	strb.w	r0, [sp, #29]
    d2d8:	2210      	movs	r2, #16
    d2da:	4629      	mov	r1, r5
    d2dc:	4668      	mov	r0, sp
    d2de:	f7fe fe24 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2e2:	4668      	mov	r0, sp
    d2e4:	f7ff ffaf 	bl	d246 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d2e8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d2ec:	7020      	strb	r0, [r4, #0]
    d2ee:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d2f2:	7060      	strb	r0, [r4, #1]
    d2f4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d2f8:	70a0      	strb	r0, [r4, #2]
    d2fa:	b00d      	add	sp, #52	; 0x34
    d2fc:	bd30      	pop	{r4, r5, pc}

0000d2fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d2fe:	f7f8 b86d 	b.w	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    d302:	07c1      	lsls	r1, r0, #31
    d304:	d001      	beq.n	d30a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    d306:	2001      	movs	r0, #1
    d308:	4770      	bx	lr
    d30a:	0780      	lsls	r0, r0, #30
    d30c:	d501      	bpl.n	d312 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    d30e:	2002      	movs	r0, #2
    d310:	4770      	bx	lr
    d312:	2000      	movs	r0, #0
    d314:	4770      	bx	lr
    d316:	b510      	push	{r4, lr}
    d318:	2801      	cmp	r0, #1
    d31a:	d008      	beq.n	d32e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d31c:	2802      	cmp	r0, #2
    d31e:	d004      	beq.n	d32a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    d320:	f240 31ad 	movw	r1, #941	; 0x3ad
    d324:	2006      	movs	r0, #6
    d326:	f7f6 fd91 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d32a:	2001      	movs	r0, #1
    d32c:	bd10      	pop	{r4, pc}
    d32e:	2000      	movs	r0, #0
    d330:	bd10      	pop	{r4, pc}
    d332:	2900      	cmp	r1, #0
    d334:	d004      	beq.n	d340 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    d336:	2801      	cmp	r0, #1
    d338:	d003      	beq.n	d342 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d33a:	2901      	cmp	r1, #1
    d33c:	d001      	beq.n	d342 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    d33e:	2002      	movs	r0, #2
    d340:	4770      	bx	lr
    d342:	2001      	movs	r0, #1
    d344:	4770      	bx	lr
    d346:	f7ff bcab 	b.w	cca0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d34a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d34a:	2101      	movs	r1, #1
    d34c:	f7f8 bbd6 	b.w	5afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d350 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d350:	b510      	push	{r4, lr}
    d352:	f002 fc46 	bl	fbe2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d356:	b118      	cbz	r0, d360 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d35c:	f7fd b92c 	b.w	a5b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d360:	20ff      	movs	r0, #255	; 0xff
    d362:	bd10      	pop	{r4, pc}

0000d364 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d364:	b510      	push	{r4, lr}
    d366:	f7f8 fc11 	bl	5b8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d36a:	2810      	cmp	r0, #16
    d36c:	d003      	beq.n	d376 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d36e:	f7f8 fbdd 	bl	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d372:	2810      	cmp	r0, #16
    d374:	d100      	bne.n	d378 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    d376:	2008      	movs	r0, #8
    d378:	bd10      	pop	{r4, pc}

0000d37a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d37a:	b510      	push	{r4, lr}
    d37c:	f7f8 fc06 	bl	5b8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d380:	2810      	cmp	r0, #16
    d382:	d007      	beq.n	d394 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d384:	f7f8 fbd2 	bl	5b2c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    d388:	2810      	cmp	r0, #16
    d38a:	d003      	beq.n	d394 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d38c:	f7f8 fc46 	bl	5c1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    d390:	2001      	movs	r0, #1
    d392:	bd10      	pop	{r4, pc}
    d394:	2000      	movs	r0, #0
    d396:	bd10      	pop	{r4, pc}

0000d398 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    d398:	b510      	push	{r4, lr}
    d39a:	f7f8 fbf7 	bl	5b8c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    d39e:	2810      	cmp	r0, #16
    d3a0:	d003      	beq.n	d3aa <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    d3a2:	f7f8 fc83 	bl	5cac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    d3a6:	2001      	movs	r0, #1
    d3a8:	bd10      	pop	{r4, pc}
    d3aa:	2000      	movs	r0, #0
    d3ac:	bd10      	pop	{r4, pc}

0000d3ae <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d3ae:	b570      	push	{r4, r5, r6, lr}
    d3b0:	460e      	mov	r6, r1
    d3b2:	b08c      	sub	sp, #48	; 0x30
    d3b4:	4614      	mov	r4, r2
    d3b6:	4601      	mov	r1, r0
    d3b8:	461d      	mov	r5, r3
    d3ba:	2210      	movs	r2, #16
    d3bc:	4668      	mov	r0, sp
    d3be:	f000 f91a 	bl	d5f6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3c2:	2210      	movs	r2, #16
    d3c4:	4631      	mov	r1, r6
    d3c6:	a804      	add	r0, sp, #16
    d3c8:	f000 f915 	bl	d5f6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3cc:	4668      	mov	r0, sp
    d3ce:	f7ff ff3a 	bl	d246 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d3d2:	a908      	add	r1, sp, #32
    d3d4:	f04f 0210 	mov.w	r2, #16
    d3d8:	4628      	mov	r0, r5
    d3da:	b11c      	cbz	r4, d3e4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d3dc:	f000 f90b 	bl	d5f6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d3e0:	b00c      	add	sp, #48	; 0x30
    d3e2:	bd70      	pop	{r4, r5, r6, pc}
    d3e4:	f7fe fda1 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3e8:	e7fa      	b.n	d3e0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d3ea:	b510      	push	{r4, lr}
    d3ec:	460c      	mov	r4, r1
    d3ee:	2100      	movs	r1, #0
    d3f0:	f7ff fdb3 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d3f4:	6060      	str	r0, [r4, #4]
    d3f6:	b118      	cbz	r0, d400 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d3f8:	2001      	movs	r0, #1
    d3fa:	7020      	strb	r0, [r4, #0]
    d3fc:	2000      	movs	r0, #0
    d3fe:	bd10      	pop	{r4, pc}
    d400:	2002      	movs	r0, #2
    d402:	bd10      	pop	{r4, pc}

0000d404 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d404:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d408:	4348      	muls	r0, r1
    d40a:	4770      	bx	lr

0000d40c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d40c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d410:	fbb0 f0f1 	udiv	r0, r0, r1
    d414:	b280      	uxth	r0, r0
    d416:	4770      	bx	lr

0000d418 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    d418:	b570      	push	{r4, r5, r6, lr}
    d41a:	4604      	mov	r4, r0
    d41c:	4290      	cmp	r0, r2
    d41e:	d20b      	bcs.n	d438 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    d420:	1b10      	subs	r0, r2, r4
    d422:	2865      	cmp	r0, #101	; 0x65
    d424:	d200      	bcs.n	d428 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    d426:	2065      	movs	r0, #101	; 0x65
    d428:	1825      	adds	r5, r4, r0
    d42a:	428d      	cmp	r5, r1
    d42c:	d803      	bhi.n	d436 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    d42e:	2104      	movs	r1, #4
    d430:	f7f4 f80a 	bl	1448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    d434:	b108      	cbz	r0, d43a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    d436:	4620      	mov	r0, r4
    d438:	bd70      	pop	{r4, r5, r6, pc}
    d43a:	4628      	mov	r0, r5
    d43c:	bd70      	pop	{r4, r5, r6, pc}

0000d43e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d43e:	b510      	push	{r4, lr}
    d440:	f1a2 030f 	sub.w	r3, r2, #15
    d444:	290c      	cmp	r1, #12
    d446:	d244      	bcs.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d448:	e8df f001 	tbb	[pc, r1]
    d44c:	120d0806 	.word	0x120d0806
    d450:	241c1815 	.word	0x241c1815
    d454:	312a4127 	.word	0x312a4127
    d458:	b3c2      	cbz	r2, d4cc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    d45a:	e03a      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d45c:	2a07      	cmp	r2, #7
    d45e:	d03a      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d460:	2a08      	cmp	r2, #8
    d462:	d038      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d464:	e035      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d466:	2a0c      	cmp	r2, #12
    d468:	d035      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d46a:	2a0b      	cmp	r2, #11
    d46c:	d033      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d46e:	e030      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d470:	2a0d      	cmp	r2, #13
    d472:	d030      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d474:	e02d      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d476:	2b0c      	cmp	r3, #12
    d478:	d92d      	bls.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d47a:	e02a      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d47c:	3a10      	subs	r2, #16
    d47e:	2a0b      	cmp	r2, #11
    d480:	d929      	bls.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d482:	e026      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d484:	2b03      	cmp	r3, #3
    d486:	d926      	bls.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d488:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    d48c:	b308      	cbz	r0, d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d48e:	2a1b      	cmp	r2, #27
    d490:	d921      	bls.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d492:	e01e      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d494:	2a04      	cmp	r2, #4
    d496:	d01e      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d498:	e01b      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d49a:	2a06      	cmp	r2, #6
    d49c:	d01b      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d49e:	e018      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4a0:	2a1c      	cmp	r2, #28
    d4a2:	d018      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4a4:	2a1d      	cmp	r2, #29
    d4a6:	d016      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4a8:	2a1e      	cmp	r2, #30
    d4aa:	d014      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ac:	e011      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4ae:	2a1f      	cmp	r2, #31
    d4b0:	d011      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b2:	2a20      	cmp	r2, #32
    d4b4:	d00f      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4b6:	2a21      	cmp	r2, #33	; 0x21
    d4b8:	d00d      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ba:	2a22      	cmp	r2, #34	; 0x22
    d4bc:	d00b      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4be:	2a23      	cmp	r2, #35	; 0x23
    d4c0:	d009      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4c2:	2a24      	cmp	r2, #36	; 0x24
    d4c4:	d007      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4c6:	2a26      	cmp	r2, #38	; 0x26
    d4c8:	d005      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ca:	e002      	b.n	d4d2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    d4cc:	e003      	b.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4ce:	2a0e      	cmp	r2, #14
    d4d0:	d001      	beq.n	d4d6 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    d4d2:	2000      	movs	r0, #0
    d4d4:	bd10      	pop	{r4, pc}
    d4d6:	2001      	movs	r0, #1
    d4d8:	bd10      	pop	{r4, pc}

0000d4da <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d4da:	280c      	cmp	r0, #12
    d4dc:	d013      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4de:	280b      	cmp	r0, #11
    d4e0:	d011      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4e2:	280d      	cmp	r0, #13
    d4e4:	d00f      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4e6:	281f      	cmp	r0, #31
    d4e8:	d00d      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4ea:	2820      	cmp	r0, #32
    d4ec:	d00b      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4ee:	2821      	cmp	r0, #33	; 0x21
    d4f0:	d009      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4f2:	2822      	cmp	r0, #34	; 0x22
    d4f4:	d007      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4f6:	2823      	cmp	r0, #35	; 0x23
    d4f8:	d005      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4fa:	2824      	cmp	r0, #36	; 0x24
    d4fc:	d003      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d4fe:	2826      	cmp	r0, #38	; 0x26
    d500:	d001      	beq.n	d506 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    d502:	2000      	movs	r0, #0
    d504:	4770      	bx	lr
    d506:	2001      	movs	r0, #1
    d508:	4770      	bx	lr

0000d50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    d50a:	f011 0f0c 	tst.w	r1, #12
    d50e:	d016      	beq.n	d53e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    d510:	074a      	lsls	r2, r1, #29
    d512:	f44f 7116 	mov.w	r1, #600	; 0x258
    d516:	2a00      	cmp	r2, #0
    d518:	da02      	bge.n	d520 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    d51a:	f04f 0210 	mov.w	r2, #16
    d51e:	e001      	b.n	d524 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    d520:	f04f 0240 	mov.w	r2, #64	; 0x40
    d524:	da01      	bge.n	d52a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    d526:	f04f 0196 	mov.w	r1, #150	; 0x96
    d52a:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    d52e:	eba0 0301 	sub.w	r3, r0, r1
    d532:	4288      	cmp	r0, r1
    d534:	d910      	bls.n	d558 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d536:	fb93 f0f2 	sdiv	r0, r3, r2
    d53a:	b280      	uxth	r0, r0
    d53c:	4770      	bx	lr
    d53e:	2902      	cmp	r1, #2
    d540:	d002      	beq.n	d548 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    d542:	2870      	cmp	r0, #112	; 0x70
    d544:	d80a      	bhi.n	d55c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    d546:	e007      	b.n	d558 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d548:	283c      	cmp	r0, #60	; 0x3c
    d54a:	d905      	bls.n	d558 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    d54c:	383c      	subs	r0, #60	; 0x3c
    d54e:	17c1      	asrs	r1, r0, #31
    d550:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d554:	1080      	asrs	r0, r0, #2
    d556:	e7f0      	b.n	d53a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d558:	2000      	movs	r0, #0
    d55a:	e7ee      	b.n	d53a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    d55c:	3870      	subs	r0, #112	; 0x70
    d55e:	17c1      	asrs	r1, r0, #31
    d560:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    d564:	10c0      	asrs	r0, r0, #3
    d566:	e7e8      	b.n	d53a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000d568 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    d568:	6809      	ldr	r1, [r1, #0]
    d56a:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    d56e:	4770      	bx	lr

0000d570 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    d570:	07c1      	lsls	r1, r0, #31
    d572:	d001      	beq.n	d578 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    d574:	2001      	movs	r0, #1
    d576:	4770      	bx	lr
    d578:	0781      	lsls	r1, r0, #30
    d57a:	d501      	bpl.n	d580 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    d57c:	2002      	movs	r0, #2
    d57e:	4770      	bx	lr
    d580:	0740      	lsls	r0, r0, #29
    d582:	d501      	bpl.n	d588 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    d584:	2008      	movs	r0, #8
    d586:	4770      	bx	lr
    d588:	2000      	movs	r0, #0
    d58a:	4770      	bx	lr

0000d58c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    d58c:	b510      	push	{r4, lr}
    d58e:	f640 12c4 	movw	r2, #2500	; 0x9c4
    d592:	2901      	cmp	r1, #1
    d594:	d006      	beq.n	d5a4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    d596:	2902      	cmp	r1, #2
    d598:	d005      	beq.n	d5a6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    d59a:	f240 31b1 	movw	r1, #945	; 0x3b1
    d59e:	2029      	movs	r0, #41	; 0x29
    d5a0:	f7f6 fc54 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5a4:	b108      	cbz	r0, d5aa <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    d5a6:	4610      	mov	r0, r2
    d5a8:	bd10      	pop	{r4, pc}
    d5aa:	f240 40e2 	movw	r0, #1250	; 0x4e2
    d5ae:	bd10      	pop	{r4, pc}

0000d5b0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5b4:	460c      	mov	r4, r1
    d5b6:	4605      	mov	r5, r0
    d5b8:	68c6      	ldr	r6, [r0, #12]
    d5ba:	f7f4 fb5f 	bl	1c7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    d5be:	b198      	cbz	r0, d5e8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    d5c0:	b1bc      	cbz	r4, d5f2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d5c2:	4630      	mov	r0, r6
    d5c4:	68e9      	ldr	r1, [r5, #12]
    d5c6:	f7f4 f843 	bl	1650 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    d5ca:	2800      	cmp	r0, #0
    d5cc:	dd11      	ble.n	d5f2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    d5ce:	4420      	add	r0, r4
    d5d0:	1e40      	subs	r0, r0, #1
    d5d2:	fbb0 f7f4 	udiv	r7, r0, r4
    d5d6:	fb07 f104 	mul.w	r1, r7, r4
    d5da:	4630      	mov	r0, r6
    d5dc:	f7f4 f806 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    d5e0:	60e8      	str	r0, [r5, #12]
    d5e2:	4638      	mov	r0, r7
    d5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5e8:	f240 2136 	movw	r1, #566	; 0x236
    d5ec:	2029      	movs	r0, #41	; 0x29
    d5ee:	f7f6 fc2d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5f2:	2000      	movs	r0, #0
    d5f4:	e7f6      	b.n	d5e4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000d5f6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    d5f6:	b530      	push	{r4, r5, lr}
    d5f8:	4613      	mov	r3, r2
    d5fa:	e006      	b.n	d60a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    d5fc:	18cc      	adds	r4, r1, r3
    d5fe:	1ad5      	subs	r5, r2, r3
    d600:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    d604:	1e5b      	subs	r3, r3, #1
    d606:	5544      	strb	r4, [r0, r5]
    d608:	b2db      	uxtb	r3, r3
    d60a:	2b00      	cmp	r3, #0
    d60c:	d1f6      	bne.n	d5fc <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    d60e:	bd30      	pop	{r4, r5, pc}

0000d610 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    d610:	b538      	push	{r3, r4, r5, lr}
    d612:	4605      	mov	r5, r0
    d614:	460c      	mov	r4, r1
    d616:	4668      	mov	r0, sp
    d618:	f7fd fd2e 	bl	b078 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d61c:	b310      	cbz	r0, d664 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    d61e:	f99d 0000 	ldrsb.w	r0, [sp]
    d622:	7260      	strb	r0, [r4, #9]
    d624:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    d628:	72a1      	strb	r1, [r4, #10]
    d62a:	f994 100b 	ldrsb.w	r1, [r4, #11]
    d62e:	2200      	movs	r2, #0
    d630:	1a41      	subs	r1, r0, r1
    d632:	d500      	bpl.n	d636 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    d634:	4249      	negs	r1, r1
    d636:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    d63a:	428b      	cmp	r3, r1
    d63c:	dc10      	bgt.n	d660 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d63e:	2bff      	cmp	r3, #255	; 0xff
    d640:	d00e      	beq.n	d660 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d642:	7b21      	ldrb	r1, [r4, #12]
    d644:	1c49      	adds	r1, r1, #1
    d646:	b2c9      	uxtb	r1, r1
    d648:	7321      	strb	r1, [r4, #12]
    d64a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    d64e:	4299      	cmp	r1, r3
    d650:	d802      	bhi.n	d658 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    d652:	7ae1      	ldrb	r1, [r4, #11]
    d654:	297f      	cmp	r1, #127	; 0x7f
    d656:	d103      	bne.n	d660 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d658:	72e0      	strb	r0, [r4, #11]
    d65a:	2000      	movs	r0, #0
    d65c:	7320      	strb	r0, [r4, #12]
    d65e:	2201      	movs	r2, #1
    d660:	4610      	mov	r0, r2
    d662:	bd38      	pop	{r3, r4, r5, pc}
    d664:	207f      	movs	r0, #127	; 0x7f
    d666:	7260      	strb	r0, [r4, #9]
    d668:	2000      	movs	r0, #0
    d66a:	bd38      	pop	{r3, r4, r5, pc}

0000d66c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d66c:	2300      	movs	r3, #0
    d66e:	6283      	str	r3, [r0, #40]	; 0x28
    d670:	8602      	strh	r2, [r0, #48]	; 0x30
    d672:	f240 2371 	movw	r3, #625	; 0x271
    d676:	435a      	muls	r2, r3
    d678:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d67c:	1e52      	subs	r2, r2, #1
    d67e:	fbb2 f1f1 	udiv	r1, r2, r1
    d682:	62c1      	str	r1, [r0, #44]	; 0x2c
    d684:	4770      	bx	lr

0000d686 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d686:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d68a:	4607      	mov	r7, r0
    d68c:	4690      	mov	r8, r2
    d68e:	468b      	mov	fp, r1
    d690:	2601      	movs	r6, #1
    d692:	4608      	mov	r0, r1
    d694:	f000 f941 	bl	d91a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d698:	4682      	mov	sl, r0
    d69a:	4658      	mov	r0, fp
    d69c:	f000 f949 	bl	d932 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d6a0:	4681      	mov	r9, r0
    d6a2:	f7ff ff65 	bl	d570 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d6a6:	4604      	mov	r4, r0
    d6a8:	4650      	mov	r0, sl
    d6aa:	f7ff ff61 	bl	d570 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d6ae:	4605      	mov	r5, r0
    d6b0:	ea54 0005 	orrs.w	r0, r4, r5
    d6b4:	d100      	bne.n	d6b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d6b6:	2600      	movs	r6, #0
    d6b8:	f7fc ff06 	bl	a4c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6bc:	ea10 0f09 	tst.w	r0, r9
    d6c0:	d100      	bne.n	d6c4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d6c2:	2400      	movs	r4, #0
    d6c4:	f7fc ff00 	bl	a4c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d6c8:	ea10 0f0a 	tst.w	r0, sl
    d6cc:	d100      	bne.n	d6d0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d6ce:	2500      	movs	r5, #0
    d6d0:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d6d4:	42a0      	cmp	r0, r4
    d6d6:	d100      	bne.n	d6da <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d6d8:	2400      	movs	r4, #0
    d6da:	f888 4000 	strb.w	r4, [r8]
    d6de:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d6e2:	42a8      	cmp	r0, r5
    d6e4:	d100      	bne.n	d6e8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d6e6:	2500      	movs	r5, #0
    d6e8:	f888 5001 	strb.w	r5, [r8, #1]
    d6ec:	b974      	cbnz	r4, d70c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d6ee:	b96d      	cbnz	r5, d70c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d6f0:	4658      	mov	r0, fp
    d6f2:	f000 f91c 	bl	d92e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d6f6:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d6fa:	1a40      	subs	r0, r0, r1
    d6fc:	b200      	sxth	r0, r0
    d6fe:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d702:	4288      	cmp	r0, r1
    d704:	dc01      	bgt.n	d70a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d706:	2800      	cmp	r0, #0
    d708:	dc00      	bgt.n	d70c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d70a:	2600      	movs	r6, #0
    d70c:	4630      	mov	r0, r6
    d70e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d712 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d712:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d716:	4348      	muls	r0, r1
    d718:	4770      	bx	lr

0000d71a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d71a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d71e:	fb10 f001 	smulbb	r0, r0, r1
    d722:	4770      	bx	lr

0000d724 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d724:	b510      	push	{r4, lr}
    d726:	2300      	movs	r3, #0
    d728:	461a      	mov	r2, r3
    d72a:	e003      	b.n	d734 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d72c:	5c84      	ldrb	r4, [r0, r2]
    d72e:	4323      	orrs	r3, r4
    d730:	1c52      	adds	r2, r2, #1
    d732:	b2d2      	uxtb	r2, r2
    d734:	428a      	cmp	r2, r1
    d736:	d3f9      	bcc.n	d72c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d738:	b10b      	cbz	r3, d73e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d73a:	2000      	movs	r0, #0
    d73c:	bd10      	pop	{r4, pc}
    d73e:	2001      	movs	r0, #1
    d740:	bd10      	pop	{r4, pc}

0000d742 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d742:	b510      	push	{r4, lr}
    d744:	4604      	mov	r4, r0
    d746:	f890 0020 	ldrb.w	r0, [r0, #32]
    d74a:	b108      	cbz	r0, d750 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d74c:	2825      	cmp	r0, #37	; 0x25
    d74e:	d901      	bls.n	d754 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d750:	2012      	movs	r0, #18
    d752:	bd10      	pop	{r4, pc}
    d754:	b12a      	cbz	r2, d762 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d756:	7d60      	ldrb	r0, [r4, #21]
    d758:	b128      	cbz	r0, d766 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d75a:	2801      	cmp	r0, #1
    d75c:	d009      	beq.n	d772 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d75e:	201f      	movs	r0, #31
    d760:	bd10      	pop	{r4, pc}
    d762:	2000      	movs	r0, #0
    d764:	bd10      	pop	{r4, pc}
    d766:	4620      	mov	r0, r4
    d768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d76c:	4611      	mov	r1, r2
    d76e:	f7f8 bb91 	b.w	5e94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    d772:	88a2      	ldrh	r2, [r4, #4]
    d774:	6909      	ldr	r1, [r1, #16]
    d776:	f104 0015 	add.w	r0, r4, #21
    d77a:	f7f8 fb37 	bl	5dec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d77e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    d782:	e7ee      	b.n	d762 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d784 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d784:	b530      	push	{r4, r5, lr}
    d786:	1c42      	adds	r2, r0, #1
    d788:	428a      	cmp	r2, r1
    d78a:	d004      	beq.n	d796 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    d78c:	680a      	ldr	r2, [r1, #0]
    d78e:	f8c0 2001 	str.w	r2, [r0, #1]
    d792:	7909      	ldrb	r1, [r1, #4]
    d794:	7141      	strb	r1, [r0, #5]
    d796:	7941      	ldrb	r1, [r0, #5]
    d798:	f001 011f 	and.w	r1, r1, #31
    d79c:	7141      	strb	r1, [r0, #5]
    d79e:	2100      	movs	r1, #0
    d7a0:	72c1      	strb	r1, [r0, #11]
    d7a2:	1843      	adds	r3, r0, r1
    d7a4:	1c49      	adds	r1, r1, #1
    d7a6:	785c      	ldrb	r4, [r3, #1]
    d7a8:	b2c9      	uxtb	r1, r1
    d7aa:	f004 0201 	and.w	r2, r4, #1
    d7ae:	0864      	lsrs	r4, r4, #1
    d7b0:	f004 0501 	and.w	r5, r4, #1
    d7b4:	4415      	add	r5, r2
    d7b6:	0862      	lsrs	r2, r4, #1
    d7b8:	f002 0401 	and.w	r4, r2, #1
    d7bc:	442c      	add	r4, r5
    d7be:	0852      	lsrs	r2, r2, #1
    d7c0:	f002 0501 	and.w	r5, r2, #1
    d7c4:	442c      	add	r4, r5
    d7c6:	0852      	lsrs	r2, r2, #1
    d7c8:	f002 0501 	and.w	r5, r2, #1
    d7cc:	442c      	add	r4, r5
    d7ce:	0852      	lsrs	r2, r2, #1
    d7d0:	f002 0501 	and.w	r5, r2, #1
    d7d4:	442c      	add	r4, r5
    d7d6:	0852      	lsrs	r2, r2, #1
    d7d8:	f002 0501 	and.w	r5, r2, #1
    d7dc:	442c      	add	r4, r5
    d7de:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    d7e2:	719a      	strb	r2, [r3, #6]
    d7e4:	7ac3      	ldrb	r3, [r0, #11]
    d7e6:	2905      	cmp	r1, #5
    d7e8:	441a      	add	r2, r3
    d7ea:	72c2      	strb	r2, [r0, #11]
    d7ec:	d3d9      	bcc.n	d7a2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    d7ee:	bd30      	pop	{r4, r5, pc}
    d7f0:	b570      	push	{r4, r5, r6, lr}
    d7f2:	f8d0 201f 	ldr.w	r2, [r0, #31]
    d7f6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d7fa:	f012 0fff 	tst.w	r2, #255	; 0xff
    d7fe:	f023 031f 	bic.w	r3, r3, #31
    d802:	d108      	bne.n	d816 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d804:	f3c2 2407 	ubfx	r4, r2, #8, #8
    d808:	b92c      	cbnz	r4, d816 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d80a:	f3c2 4407 	ubfx	r4, r2, #16, #8
    d80e:	b914      	cbnz	r4, d816 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d810:	0e12      	lsrs	r2, r2, #24
    d812:	d100      	bne.n	d816 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d814:	b35b      	cbz	r3, d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d816:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d81a:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d81e:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d822:	7d83      	ldrb	r3, [r0, #22]
    d824:	b141      	cbz	r1, d838 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d826:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d82a:	d905      	bls.n	d838 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d82c:	f640 5107 	movw	r1, #3335	; 0xd07
    d830:	428a      	cmp	r2, r1
    d832:	d801      	bhi.n	d838 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d834:	2101      	movs	r1, #1
    d836:	e000      	b.n	d83a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    d838:	2100      	movs	r1, #0
    d83a:	7846      	ldrb	r6, [r0, #1]
    d83c:	2e22      	cmp	r6, #34	; 0x22
    d83e:	d116      	bne.n	d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d840:	b959      	cbnz	r1, d85a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    d842:	1f91      	subs	r1, r2, #6
    d844:	f640 467a 	movw	r6, #3194	; 0xc7a
    d848:	42b1      	cmp	r1, r6
    d84a:	d810      	bhi.n	d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d84c:	b17b      	cbz	r3, d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d84e:	2b08      	cmp	r3, #8
    d850:	d80d      	bhi.n	d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d852:	4293      	cmp	r3, r2
    d854:	d20b      	bcs.n	d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d856:	4294      	cmp	r4, r2
    d858:	d809      	bhi.n	d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d85a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d85e:	d206      	bcs.n	d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d860:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d864:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d868:	d801      	bhi.n	d86e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d86a:	2001      	movs	r0, #1
    d86c:	bd70      	pop	{r4, r5, r6, pc}
    d86e:	2000      	movs	r0, #0
    d870:	bd70      	pop	{r4, r5, r6, pc}

0000d872 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d872:	b570      	push	{r4, r5, r6, lr}
    d874:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d878:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d87c:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d880:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d884:	88c0      	ldrh	r0, [r0, #6]
    d886:	b131      	cbz	r1, d896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d888:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d88c:	d903      	bls.n	d896 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d88e:	f640 5107 	movw	r1, #3335	; 0xd07
    d892:	428a      	cmp	r2, r1
    d894:	d90b      	bls.n	d8ae <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d896:	1f91      	subs	r1, r2, #6
    d898:	f640 467a 	movw	r6, #3194	; 0xc7a
    d89c:	42b1      	cmp	r1, r6
    d89e:	d80e      	bhi.n	d8be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8a0:	b16b      	cbz	r3, d8be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8a2:	2b08      	cmp	r3, #8
    d8a4:	d80b      	bhi.n	d8be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8a6:	4293      	cmp	r3, r2
    d8a8:	d209      	bcs.n	d8be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8aa:	4294      	cmp	r4, r2
    d8ac:	d807      	bhi.n	d8be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8ae:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d8b2:	d204      	bcs.n	d8be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8b4:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d8b8:	d801      	bhi.n	d8be <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d8ba:	2001      	movs	r0, #1
    d8bc:	bd70      	pop	{r4, r5, r6, pc}
    d8be:	2000      	movs	r0, #0
    d8c0:	bd70      	pop	{r4, r5, r6, pc}

0000d8c2 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d8c2:	6842      	ldr	r2, [r0, #4]
    d8c4:	600a      	str	r2, [r1, #0]
    d8c6:	7a00      	ldrb	r0, [r0, #8]
    d8c8:	7108      	strb	r0, [r1, #4]
    d8ca:	4770      	bx	lr

0000d8cc <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d8cc:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d8d0:	4770      	bx	lr

0000d8d2 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d8d2:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d8d6:	4770      	bx	lr

0000d8d8 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d8d8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d8dc:	4770      	bx	lr

0000d8de <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d8de:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d8e2:	4770      	bx	lr

0000d8e4 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d8e4:	8980      	ldrh	r0, [r0, #12]
    d8e6:	8008      	strh	r0, [r1, #0]
    d8e8:	4770      	bx	lr

0000d8ea <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d8ea:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d8ee:	6008      	str	r0, [r1, #0]
    d8f0:	4770      	bx	lr

0000d8f2 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d8f2:	6842      	ldr	r2, [r0, #4]
    d8f4:	600a      	str	r2, [r1, #0]
    d8f6:	6880      	ldr	r0, [r0, #8]
    d8f8:	6048      	str	r0, [r1, #4]
    d8fa:	4770      	bx	lr

0000d8fc <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d8fc:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d900:	600a      	str	r2, [r1, #0]
    d902:	6840      	ldr	r0, [r0, #4]
    d904:	6048      	str	r0, [r1, #4]
    d906:	4770      	bx	lr

0000d908 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d908:	6842      	ldr	r2, [r0, #4]
    d90a:	600a      	str	r2, [r1, #0]
    d90c:	6880      	ldr	r0, [r0, #8]
    d90e:	6048      	str	r0, [r1, #4]
    d910:	4770      	bx	lr

0000d912 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d912:	7800      	ldrb	r0, [r0, #0]
    d914:	f000 0003 	and.w	r0, r0, #3
    d918:	4770      	bx	lr

0000d91a <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d91a:	7900      	ldrb	r0, [r0, #4]
    d91c:	4770      	bx	lr

0000d91e <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d91e:	8880      	ldrh	r0, [r0, #4]
    d920:	4770      	bx	lr

0000d922 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d922:	88c0      	ldrh	r0, [r0, #6]
    d924:	4770      	bx	lr

0000d926 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d926:	8900      	ldrh	r0, [r0, #8]
    d928:	4770      	bx	lr

0000d92a <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d92a:	8940      	ldrh	r0, [r0, #10]
    d92c:	4770      	bx	lr

0000d92e <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d92e:	88c0      	ldrh	r0, [r0, #6]
    d930:	4770      	bx	lr

0000d932 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d932:	7940      	ldrb	r0, [r0, #5]
    d934:	4770      	bx	lr

0000d936 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d936:	7900      	ldrb	r0, [r0, #4]
    d938:	4770      	bx	lr

0000d93a <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d93a:	7900      	ldrb	r0, [r0, #4]
    d93c:	4770      	bx	lr

0000d93e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d93e:	8901      	ldrh	r1, [r0, #8]
    d940:	291b      	cmp	r1, #27
    d942:	d30c      	bcc.n	d95e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d944:	8941      	ldrh	r1, [r0, #10]
    d946:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d94a:	4291      	cmp	r1, r2
    d94c:	d307      	bcc.n	d95e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d94e:	8881      	ldrh	r1, [r0, #4]
    d950:	291b      	cmp	r1, #27
    d952:	d304      	bcc.n	d95e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d954:	88c0      	ldrh	r0, [r0, #6]
    d956:	4290      	cmp	r0, r2
    d958:	d301      	bcc.n	d95e <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d95a:	2001      	movs	r0, #1
    d95c:	4770      	bx	lr
    d95e:	2000      	movs	r0, #0
    d960:	4770      	bx	lr

0000d962 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d962:	b510      	push	{r4, lr}
    d964:	29fb      	cmp	r1, #251	; 0xfb
    d966:	d904      	bls.n	d972 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d968:	f44f 61af 	mov.w	r1, #1400	; 0x578
    d96c:	202a      	movs	r0, #42	; 0x2a
    d96e:	f7f6 fa6d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d972:	7041      	strb	r1, [r0, #1]
    d974:	bd10      	pop	{r4, pc}

0000d976 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d976:	7901      	ldrb	r1, [r0, #4]
    d978:	0749      	lsls	r1, r1, #29
    d97a:	d004      	beq.n	d986 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d97c:	7940      	ldrb	r0, [r0, #5]
    d97e:	0740      	lsls	r0, r0, #29
    d980:	d001      	beq.n	d986 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d982:	2001      	movs	r0, #1
    d984:	4770      	bx	lr
    d986:	2000      	movs	r0, #0
    d988:	4770      	bx	lr

0000d98a <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d98a:	7900      	ldrb	r0, [r0, #4]
    d98c:	4770      	bx	lr

0000d98e <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d98e:	7940      	ldrb	r0, [r0, #5]
    d990:	4770      	bx	lr

0000d992 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d992:	7101      	strb	r1, [r0, #4]
    d994:	4770      	bx	lr

0000d996 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d996:	7141      	strb	r1, [r0, #5]
    d998:	4770      	bx	lr

0000d99a <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d99a:	b510      	push	{r4, lr}
    d99c:	2a1b      	cmp	r2, #27
    d99e:	d904      	bls.n	d9aa <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d9a0:	f240 31df 	movw	r1, #991	; 0x3df
    d9a4:	202a      	movs	r0, #42	; 0x2a
    d9a6:	f7f6 fa51 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9aa:	7042      	strb	r2, [r0, #1]
    d9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9b0:	1cc0      	adds	r0, r0, #3
    d9b2:	f7fe baba 	b.w	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d9b6 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d9b6:	6809      	ldr	r1, [r1, #0]
    d9b8:	60c1      	str	r1, [r0, #12]
    d9ba:	4770      	bx	lr

0000d9bc <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d9bc:	680a      	ldr	r2, [r1, #0]
    d9be:	6042      	str	r2, [r0, #4]
    d9c0:	6849      	ldr	r1, [r1, #4]
    d9c2:	6081      	str	r1, [r0, #8]
    d9c4:	4770      	bx	lr

0000d9c6 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d9c6:	680a      	ldr	r2, [r1, #0]
    d9c8:	6042      	str	r2, [r0, #4]
    d9ca:	6849      	ldr	r1, [r1, #4]
    d9cc:	6081      	str	r1, [r0, #8]
    d9ce:	4770      	bx	lr

0000d9d0 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d9d0:	680a      	ldr	r2, [r1, #0]
    d9d2:	6042      	str	r2, [r0, #4]
    d9d4:	6849      	ldr	r1, [r1, #4]
    d9d6:	6081      	str	r1, [r0, #8]
    d9d8:	4770      	bx	lr

0000d9da <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d9da:	7802      	ldrb	r2, [r0, #0]
    d9dc:	f001 0103 	and.w	r1, r1, #3
    d9e0:	f022 0203 	bic.w	r2, r2, #3
    d9e4:	430a      	orrs	r2, r1
    d9e6:	7002      	strb	r2, [r0, #0]
    d9e8:	4770      	bx	lr

0000d9ea <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d9ea:	7101      	strb	r1, [r0, #4]
    d9ec:	0a09      	lsrs	r1, r1, #8
    d9ee:	7141      	strb	r1, [r0, #5]
    d9f0:	4770      	bx	lr

0000d9f2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d9f2:	7181      	strb	r1, [r0, #6]
    d9f4:	0a09      	lsrs	r1, r1, #8
    d9f6:	71c1      	strb	r1, [r0, #7]
    d9f8:	4770      	bx	lr

0000d9fa <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d9fa:	7201      	strb	r1, [r0, #8]
    d9fc:	0a09      	lsrs	r1, r1, #8
    d9fe:	7241      	strb	r1, [r0, #9]
    da00:	4770      	bx	lr

0000da02 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    da02:	7281      	strb	r1, [r0, #10]
    da04:	0a09      	lsrs	r1, r1, #8
    da06:	72c1      	strb	r1, [r0, #11]
    da08:	4770      	bx	lr

0000da0a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    da0a:	7802      	ldrb	r2, [r0, #0]
    da0c:	f002 020f 	and.w	r2, r2, #15
    da10:	2a03      	cmp	r2, #3
    da12:	d003      	beq.n	da1c <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    da14:	2a05      	cmp	r2, #5
    da16:	d104      	bne.n	da22 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    da18:	f7ff beea 	b.w	d7f0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    da1c:	7840      	ldrb	r0, [r0, #1]
    da1e:	280c      	cmp	r0, #12
    da20:	d001      	beq.n	da26 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    da22:	2000      	movs	r0, #0
    da24:	4770      	bx	lr
    da26:	2001      	movs	r0, #1
    da28:	4770      	bx	lr

0000da2a <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    da2a:	b570      	push	{r4, r5, r6, lr}
    da2c:	4614      	mov	r4, r2
    da2e:	4605      	mov	r5, r0
    da30:	2a1f      	cmp	r2, #31
    da32:	d903      	bls.n	da3c <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    da34:	21b2      	movs	r1, #178	; 0xb2
    da36:	202a      	movs	r0, #42	; 0x2a
    da38:	f7f6 fa08 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da3c:	f105 0009 	add.w	r0, r5, #9
    da40:	f7fe fa73 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da44:	1da4      	adds	r4, r4, #6
    da46:	706c      	strb	r4, [r5, #1]
    da48:	bd70      	pop	{r4, r5, r6, pc}

0000da4a <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    da4a:	b510      	push	{r4, lr}
    da4c:	7802      	ldrb	r2, [r0, #0]
    da4e:	f001 030f 	and.w	r3, r1, #15
    da52:	f022 020f 	bic.w	r2, r2, #15
    da56:	431a      	orrs	r2, r3
    da58:	7002      	strb	r2, [r0, #0]
    da5a:	2907      	cmp	r1, #7
    da5c:	d20c      	bcs.n	da78 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    da5e:	e8df f001 	tbb	[pc, r1]
    da62:	0604      	.short	0x0604
    da64:	08040604 	.word	0x08040604
    da68:	0004      	.short	0x0004
    da6a:	2106      	movs	r1, #6
    da6c:	e002      	b.n	da74 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    da6e:	210c      	movs	r1, #12
    da70:	e000      	b.n	da74 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    da72:	2122      	movs	r1, #34	; 0x22
    da74:	7041      	strb	r1, [r0, #1]
    da76:	bd10      	pop	{r4, pc}
    da78:	216e      	movs	r1, #110	; 0x6e
    da7a:	202a      	movs	r0, #42	; 0x2a
    da7c:	f7f6 f9e6 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000da80 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    da80:	680a      	ldr	r2, [r1, #0]
    da82:	f840 2f09 	str.w	r2, [r0, #9]!
    da86:	8889      	ldrh	r1, [r1, #4]
    da88:	8081      	strh	r1, [r0, #4]
    da8a:	4770      	bx	lr

0000da8c <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    da8c:	7802      	ldrb	r2, [r0, #0]
    da8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    da92:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    da96:	7002      	strb	r2, [r0, #0]
    da98:	4770      	bx	lr

0000da9a <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    da9a:	680a      	ldr	r2, [r1, #0]
    da9c:	f840 2f03 	str.w	r2, [r0, #3]!
    daa0:	8889      	ldrh	r1, [r1, #4]
    daa2:	8081      	strh	r1, [r0, #4]
    daa4:	4770      	bx	lr

0000daa6 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    daa6:	7802      	ldrb	r2, [r0, #0]
    daa8:	2340      	movs	r3, #64	; 0x40
    daaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    daae:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dab2:	430a      	orrs	r2, r1
    dab4:	7002      	strb	r2, [r0, #0]
    dab6:	4770      	bx	lr

0000dab8 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    dab8:	b570      	push	{r4, r5, r6, lr}
    daba:	4614      	mov	r4, r2
    dabc:	4605      	mov	r5, r0
    dabe:	2a1f      	cmp	r2, #31
    dac0:	d903      	bls.n	daca <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    dac2:	21d4      	movs	r1, #212	; 0xd4
    dac4:	202a      	movs	r0, #42	; 0x2a
    dac6:	f7f6 f9c1 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daca:	f105 0009 	add.w	r0, r5, #9
    dace:	f7fe fa2c 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dad2:	1da4      	adds	r4, r4, #6
    dad4:	706c      	strb	r4, [r5, #1]
    dad6:	bd70      	pop	{r4, r5, r6, pc}

0000dad8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    dad8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dadc:	4604      	mov	r4, r0
    dade:	2000      	movs	r0, #0
    dae0:	f7f6 fb9e 	bl	4220 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dae4:	2600      	movs	r6, #0
    dae6:	4605      	mov	r5, r0
    dae8:	4637      	mov	r7, r6
    daea:	e00e      	b.n	db0a <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    daec:	8820      	ldrh	r0, [r4, #0]
    daee:	1c40      	adds	r0, r0, #1
    daf0:	b280      	uxth	r0, r0
    daf2:	8020      	strh	r0, [r4, #0]
    daf4:	42a8      	cmp	r0, r5
    daf6:	d300      	bcc.n	dafa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    daf8:	8027      	strh	r7, [r4, #0]
    dafa:	8820      	ldrh	r0, [r4, #0]
    dafc:	4669      	mov	r1, sp
    dafe:	f7ff fc74 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    db02:	2800      	cmp	r0, #0
    db04:	d007      	beq.n	db16 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    db06:	1c76      	adds	r6, r6, #1
    db08:	b2f6      	uxtb	r6, r6
    db0a:	42ae      	cmp	r6, r5
    db0c:	d3ee      	bcc.n	daec <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    db0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    db12:	8020      	strh	r0, [r4, #0]
    db14:	2012      	movs	r0, #18
    db16:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000db1a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    db1a:	6841      	ldr	r1, [r0, #4]
    db1c:	2200      	movs	r2, #0
    db1e:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    db22:	2b00      	cmp	r3, #0
    db24:	d004      	beq.n	db30 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    db26:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    db2a:	6840      	ldr	r0, [r0, #4]
    db2c:	f000 bc64 	b.w	e3f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    db30:	4770      	bx	lr

0000db32 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    db32:	b510      	push	{r4, lr}
    db34:	7901      	ldrb	r1, [r0, #4]
    db36:	b119      	cbz	r1, db40 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    db38:	2901      	cmp	r1, #1
    db3a:	d006      	beq.n	db4a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    db3c:	2000      	movs	r0, #0
    db3e:	bd10      	pop	{r4, pc}
    db40:	8842      	ldrh	r2, [r0, #2]
    db42:	6883      	ldr	r3, [r0, #8]
    db44:	8800      	ldrh	r0, [r0, #0]
    db46:	2102      	movs	r1, #2
    db48:	e003      	b.n	db52 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    db4a:	8842      	ldrh	r2, [r0, #2]
    db4c:	6883      	ldr	r3, [r0, #8]
    db4e:	8800      	ldrh	r0, [r0, #0]
    db50:	2101      	movs	r1, #1
    db52:	f7f8 fa4d 	bl	5ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    db56:	b908      	cbnz	r0, db5c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    db58:	f7f8 faa0 	bl	609c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    db5c:	2001      	movs	r0, #1
    db5e:	bd10      	pop	{r4, pc}
    db60:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    db64:	460e      	mov	r6, r1
    db66:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    db6a:	4617      	mov	r7, r2
    db6c:	39ff      	subs	r1, #255	; 0xff
    db6e:	d014      	beq.n	db9a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    db70:	8030      	strh	r0, [r6, #0]
    db72:	2100      	movs	r1, #0
    db74:	7171      	strb	r1, [r6, #5]
    db76:	f7f6 fd83 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    db7a:	4604      	mov	r4, r0
    db7c:	f7ff f81b 	bl	cbb6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    db80:	0005      	movs	r5, r0
    db82:	d00a      	beq.n	db9a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    db84:	4620      	mov	r0, r4
    db86:	4629      	mov	r1, r5
    db88:	aa01      	add	r2, sp, #4
    db8a:	f7ff f837 	bl	cbfc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    db8e:	8070      	strh	r0, [r6, #2]
    db90:	b130      	cbz	r0, dba0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    db92:	28fb      	cmp	r0, #251	; 0xfb
    db94:	d906      	bls.n	dba4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    db96:	21ae      	movs	r1, #174	; 0xae
    db98:	e026      	b.n	dbe8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    db9a:	2000      	movs	r0, #0
    db9c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dba0:	21ad      	movs	r1, #173	; 0xad
    dba2:	e021      	b.n	dbe8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    dba4:	9801      	ldr	r0, [sp, #4]
    dba6:	f7ff feb4 	bl	d912 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    dbaa:	2801      	cmp	r0, #1
    dbac:	d003      	beq.n	dbb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    dbae:	2802      	cmp	r0, #2
    dbb0:	d001      	beq.n	dbb6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    dbb2:	21bd      	movs	r1, #189	; 0xbd
    dbb4:	e018      	b.n	dbe8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    dbb6:	7130      	strb	r0, [r6, #4]
    dbb8:	4629      	mov	r1, r5
    dbba:	8873      	ldrh	r3, [r6, #2]
    dbbc:	2503      	movs	r5, #3
    dbbe:	4620      	mov	r0, r4
    dbc0:	463a      	mov	r2, r7
    dbc2:	9500      	str	r5, [sp, #0]
    dbc4:	f7fe fee9 	bl	c99a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    dbc8:	4620      	mov	r0, r4
    dbca:	60b7      	str	r7, [r6, #8]
    dbcc:	f7fe ffa2 	bl	cb14 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    dbd0:	b138      	cbz	r0, dbe2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    dbd2:	2100      	movs	r1, #0
    dbd4:	4620      	mov	r0, r4
    dbd6:	460a      	mov	r2, r1
    dbd8:	f7ff f8ee 	bl	cdb8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    dbdc:	b118      	cbz	r0, dbe6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    dbde:	2001      	movs	r0, #1
    dbe0:	e7dc      	b.n	db9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    dbe2:	21cd      	movs	r1, #205	; 0xcd
    dbe4:	e000      	b.n	dbe8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    dbe6:	21d2      	movs	r1, #210	; 0xd2
    dbe8:	202b      	movs	r0, #43	; 0x2b
    dbea:	f7f6 f92f 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dbee <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    dbee:	f7f8 bc13 	b.w	6418 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x298>
    dbf2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    dbf6:	4604      	mov	r4, r0
    dbf8:	2000      	movs	r0, #0
    dbfa:	f7f6 fb11 	bl	4220 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dbfe:	4605      	mov	r5, r0
    dc00:	2001      	movs	r0, #1
    dc02:	f7f6 fb0d 	bl	4220 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    dc06:	4428      	add	r0, r5
    dc08:	2600      	movs	r6, #0
    dc0a:	b2c7      	uxtb	r7, r0
    dc0c:	46b0      	mov	r8, r6
    dc0e:	e017      	b.n	dc40 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    dc10:	8820      	ldrh	r0, [r4, #0]
    dc12:	1c40      	adds	r0, r0, #1
    dc14:	b280      	uxth	r0, r0
    dc16:	8020      	strh	r0, [r4, #0]
    dc18:	42b8      	cmp	r0, r7
    dc1a:	d302      	bcc.n	dc22 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    dc1c:	4640      	mov	r0, r8
    dc1e:	f8a4 8000 	strh.w	r8, [r4]
    dc22:	b280      	uxth	r0, r0
    dc24:	42a8      	cmp	r0, r5
    dc26:	d304      	bcc.n	dc32 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    dc28:	42b8      	cmp	r0, r7
    dc2a:	d202      	bcs.n	dc32 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    dc2c:	2000      	movs	r0, #0
    dc2e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    dc32:	4669      	mov	r1, sp
    dc34:	f7ff fbd9 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    dc38:	2800      	cmp	r0, #0
    dc3a:	d0f8      	beq.n	dc2e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    dc3c:	1c76      	adds	r6, r6, #1
    dc3e:	b2f6      	uxtb	r6, r6
    dc40:	42be      	cmp	r6, r7
    dc42:	d3e5      	bcc.n	dc10 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    dc44:	f64f 70ff 	movw	r0, #65535	; 0xffff
    dc48:	8020      	strh	r0, [r4, #0]
    dc4a:	2012      	movs	r0, #18
    dc4c:	e7ef      	b.n	dc2e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000dc4e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    dc4e:	b570      	push	{r4, r5, r6, lr}
    dc50:	8050      	strh	r0, [r2, #2]
    dc52:	890c      	ldrh	r4, [r1, #8]
    dc54:	8094      	strh	r4, [r2, #4]
    dc56:	898b      	ldrh	r3, [r1, #12]
    dc58:	80d3      	strh	r3, [r2, #6]
    dc5a:	8948      	ldrh	r0, [r1, #10]
    dc5c:	8110      	strh	r0, [r2, #8]
    dc5e:	89cd      	ldrh	r5, [r1, #14]
    dc60:	8155      	strh	r5, [r2, #10]
    dc62:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    dc64:	42ae      	cmp	r6, r5
    dc66:	d108      	bne.n	dc7a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc68:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    dc6a:	4285      	cmp	r5, r0
    dc6c:	d105      	bne.n	dc7a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc6e:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    dc70:	429d      	cmp	r5, r3
    dc72:	d102      	bne.n	dc7a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    dc74:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    dc76:	42a3      	cmp	r3, r4
    dc78:	d001      	beq.n	dc7e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    dc7a:	2301      	movs	r3, #1
    dc7c:	e000      	b.n	dc80 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    dc7e:	2300      	movs	r3, #0
    dc80:	7313      	strb	r3, [r2, #12]
    dc82:	8548      	strh	r0, [r1, #42]	; 0x2a
    dc84:	8950      	ldrh	r0, [r2, #10]
    dc86:	85c8      	strh	r0, [r1, #46]	; 0x2e
    dc88:	8890      	ldrh	r0, [r2, #4]
    dc8a:	8588      	strh	r0, [r1, #44]	; 0x2c
    dc8c:	88d0      	ldrh	r0, [r2, #6]
    dc8e:	8608      	strh	r0, [r1, #48]	; 0x30
    dc90:	2001      	movs	r0, #1
    dc92:	7010      	strb	r0, [r2, #0]
    dc94:	bd70      	pop	{r4, r5, r6, pc}

0000dc96 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    dc96:	b510      	push	{r4, lr}
    dc98:	888c      	ldrh	r4, [r1, #4]
    dc9a:	890a      	ldrh	r2, [r1, #8]
    dc9c:	884b      	ldrh	r3, [r1, #2]
    dc9e:	88c9      	ldrh	r1, [r1, #6]
    dca0:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    dca4:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    dca8:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    dcac:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    dcb0:	bd10      	pop	{r4, pc}

0000dcb2 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    dcb2:	b570      	push	{r4, r5, r6, lr}
    dcb4:	4615      	mov	r5, r2
    dcb6:	460c      	mov	r4, r1
    dcb8:	f000 f8c7 	bl	de4a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dcbc:	3096      	adds	r0, #150	; 0x96
    dcbe:	4428      	add	r0, r5
    dcc0:	42a0      	cmp	r0, r4
    dcc2:	d801      	bhi.n	dcc8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    dcc4:	1a20      	subs	r0, r4, r0
    dcc6:	bd70      	pop	{r4, r5, r6, pc}
    dcc8:	2000      	movs	r0, #0
    dcca:	bd70      	pop	{r4, r5, r6, pc}

0000dccc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcd0:	4604      	mov	r4, r0
    dcd2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    dcd4:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    dcd6:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    dcda:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    dcde:	4285      	cmp	r5, r0
    dce0:	d300      	bcc.n	dce4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    dce2:	4605      	mov	r5, r0
    dce4:	4620      	mov	r0, r4
    dce6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    dcea:	f000 f89e 	bl	de2a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    dcee:	4601      	mov	r1, r0
    dcf0:	86e5      	strh	r5, [r4, #54]	; 0x36
    dcf2:	8761      	strh	r1, [r4, #58]	; 0x3a
    dcf4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    dcf6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    dcfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    dcfc:	4680      	mov	r8, r0
    dcfe:	42aa      	cmp	r2, r5
    dd00:	d200      	bcs.n	dd04 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    dd02:	462a      	mov	r2, r5
    dd04:	428b      	cmp	r3, r1
    dd06:	d200      	bcs.n	dd0a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    dd08:	460b      	mov	r3, r1
    dd0a:	8202      	strh	r2, [r0, #16]
    dd0c:	f8a8 3012 	strh.w	r3, [r8, #18]
    dd10:	42bd      	cmp	r5, r7
    dd12:	d101      	bne.n	dd18 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    dd14:	42b1      	cmp	r1, r6
    dd16:	d001      	beq.n	dd1c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    dd18:	2001      	movs	r0, #1
    dd1a:	e000      	b.n	dd1e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    dd1c:	2000      	movs	r0, #0
    dd1e:	4681      	mov	r9, r0
    dd20:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    dd24:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    dd28:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    dd2a:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    dd2c:	4285      	cmp	r5, r0
    dd2e:	d300      	bcc.n	dd32 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    dd30:	4605      	mov	r5, r0
    dd32:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    dd36:	4620      	mov	r0, r4
    dd38:	f000 f87f 	bl	de3a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    dd3c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    dd40:	2902      	cmp	r1, #2
    dd42:	d108      	bne.n	dd56 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    dd44:	42af      	cmp	r7, r5
    dd46:	d200      	bcs.n	dd4a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    dd48:	463d      	mov	r5, r7
    dd4a:	4286      	cmp	r6, r0
    dd4c:	d200      	bcs.n	dd50 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    dd4e:	4630      	mov	r0, r6
    dd50:	2100      	movs	r1, #0
    dd52:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    dd56:	f8a8 5008 	strh.w	r5, [r8, #8]
    dd5a:	f8a8 000c 	strh.w	r0, [r8, #12]
    dd5e:	42bd      	cmp	r5, r7
    dd60:	d101      	bne.n	dd66 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    dd62:	42b0      	cmp	r0, r6
    dd64:	d001      	beq.n	dd6a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    dd66:	2001      	movs	r0, #1
    dd68:	e000      	b.n	dd6c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    dd6a:	2000      	movs	r0, #0
    dd6c:	ea40 0009 	orr.w	r0, r0, r9
    dd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dd74 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    dd74:	6840      	ldr	r0, [r0, #4]
    dd76:	4770      	bx	lr

0000dd78 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    dd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd7c:	4616      	mov	r6, r2
    dd7e:	460f      	mov	r7, r1
    dd80:	4604      	mov	r4, r0
    dd82:	f000 f862 	bl	de4a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    dd86:	4605      	mov	r5, r0
    dd88:	463a      	mov	r2, r7
    dd8a:	68e1      	ldr	r1, [r4, #12]
    dd8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dd8e:	f000 f847 	bl	de20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    dd92:	19a9      	adds	r1, r5, r6
    dd94:	4281      	cmp	r1, r0
    dd96:	d300      	bcc.n	dd9a <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    dd98:	4608      	mov	r0, r1
    dd9a:	6320      	str	r0, [r4, #48]	; 0x30
    dd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dda0 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    dda0:	221b      	movs	r2, #27
    dda2:	8402      	strh	r2, [r0, #32]
    dda4:	8382      	strh	r2, [r0, #28]
    dda6:	82c2      	strh	r2, [r0, #22]
    dda8:	8282      	strh	r2, [r0, #20]
    ddaa:	8142      	strh	r2, [r0, #10]
    ddac:	8202      	strh	r2, [r0, #16]
    ddae:	8102      	strh	r2, [r0, #8]
    ddb0:	8542      	strh	r2, [r0, #42]	; 0x2a
    ddb2:	8582      	strh	r2, [r0, #44]	; 0x2c
    ddb4:	8482      	strh	r2, [r0, #36]	; 0x24
    ddb6:	2900      	cmp	r1, #0
    ddb8:	d10a      	bne.n	ddd0 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    ddba:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ddbe:	8441      	strh	r1, [r0, #34]	; 0x22
    ddc0:	83c1      	strh	r1, [r0, #30]
    ddc2:	8341      	strh	r1, [r0, #26]
    ddc4:	8301      	strh	r1, [r0, #24]
    ddc6:	81c1      	strh	r1, [r0, #14]
    ddc8:	8241      	strh	r1, [r0, #18]
    ddca:	8181      	strh	r1, [r0, #12]
    ddcc:	85c1      	strh	r1, [r0, #46]	; 0x2e
    ddce:	8601      	strh	r1, [r0, #48]	; 0x30
    ddd0:	4770      	bx	lr

0000ddd2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    ddd2:	6800      	ldr	r0, [r0, #0]
    ddd4:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    ddd8:	4290      	cmp	r0, r2
    ddda:	d903      	bls.n	dde4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    dddc:	1a40      	subs	r0, r0, r1
    ddde:	389c      	subs	r0, #156	; 0x9c
    dde0:	0840      	lsrs	r0, r0, #1
    dde2:	4770      	bx	lr
    dde4:	2000      	movs	r0, #0
    dde6:	4770      	bx	lr

0000dde8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    dde8:	b510      	push	{r4, lr}
    ddea:	9c02      	ldr	r4, [sp, #8]
    ddec:	8281      	strh	r1, [r0, #20]
    ddee:	82c2      	strh	r2, [r0, #22]
    ddf0:	8303      	strh	r3, [r0, #24]
    ddf2:	8344      	strh	r4, [r0, #26]
    ddf4:	bd10      	pop	{r4, pc}

0000ddf6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    ddf6:	8050      	strh	r0, [r2, #2]
    ddf8:	8a88      	ldrh	r0, [r1, #20]
    ddfa:	8090      	strh	r0, [r2, #4]
    ddfc:	8ac8      	ldrh	r0, [r1, #22]
    ddfe:	80d0      	strh	r0, [r2, #6]
    de00:	8b08      	ldrh	r0, [r1, #24]
    de02:	8110      	strh	r0, [r2, #8]
    de04:	8b48      	ldrh	r0, [r1, #26]
    de06:	8150      	strh	r0, [r2, #10]
    de08:	2001      	movs	r0, #1
    de0a:	7010      	strb	r0, [r2, #0]
    de0c:	4770      	bx	lr
    de0e:	2902      	cmp	r1, #2
    de10:	d003      	beq.n	de1a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    de12:	00c0      	lsls	r0, r0, #3
    de14:	3070      	adds	r0, #112	; 0x70
    de16:	b280      	uxth	r0, r0
    de18:	4770      	bx	lr
    de1a:	0080      	lsls	r0, r0, #2
    de1c:	303c      	adds	r0, #60	; 0x3c
    de1e:	e7fa      	b.n	de16 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    de20:	4288      	cmp	r0, r1
    de22:	d300      	bcc.n	de26 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    de24:	4608      	mov	r0, r1
    de26:	1a80      	subs	r0, r0, r2
    de28:	4770      	bx	lr
    de2a:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    de2e:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    de32:	4281      	cmp	r1, r0
    de34:	d200      	bcs.n	de38 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    de36:	4608      	mov	r0, r1
    de38:	4770      	bx	lr
    de3a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    de3e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    de42:	4281      	cmp	r1, r0
    de44:	d200      	bcs.n	de48 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    de46:	4608      	mov	r0, r1
    de48:	4770      	bx	lr
    de4a:	2196      	movs	r1, #150	; 0x96
    de4c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    de50:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    de54:	f000 b800 	b.w	de58 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de5c:	460d      	mov	r5, r1
    de5e:	4606      	mov	r6, r0
    de60:	4698      	mov	r8, r3
    de62:	4617      	mov	r7, r2
    de64:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    de66:	4611      	mov	r1, r2
    de68:	f7ff ffd1 	bl	de0e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de6c:	4604      	mov	r4, r0
    de6e:	4639      	mov	r1, r7
    de70:	4630      	mov	r0, r6
    de72:	f7ff ffe2 	bl	de3a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    de76:	42a0      	cmp	r0, r4
    de78:	d200      	bcs.n	de7c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    de7a:	4604      	mov	r4, r0
    de7c:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    de7e:	4641      	mov	r1, r8
    de80:	f7ff ffc5 	bl	de0e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    de84:	4607      	mov	r7, r0
    de86:	4641      	mov	r1, r8
    de88:	4630      	mov	r0, r6
    de8a:	f7ff ffce 	bl	de2a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    de8e:	42b8      	cmp	r0, r7
    de90:	d300      	bcc.n	de94 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    de92:	4638      	mov	r0, r7
    de94:	4420      	add	r0, r4
    de96:	4428      	add	r0, r5
    de98:	1d80      	adds	r0, r0, #6
    de9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000de9e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    de9e:	b510      	push	{r4, lr}
    dea0:	4604      	mov	r4, r0
    dea2:	2108      	movs	r1, #8
    dea4:	4620      	mov	r0, r4
    dea6:	f7f6 f86b 	bl	3f80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    deaa:	6820      	ldr	r0, [r4, #0]
    deac:	2800      	cmp	r0, #0
    deae:	d102      	bne.n	deb6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    deb0:	6860      	ldr	r0, [r4, #4]
    deb2:	2800      	cmp	r0, #0
    deb4:	d0f5      	beq.n	dea2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    deb6:	bd10      	pop	{r4, pc}
    deb8:	2801      	cmp	r0, #1
    deba:	d102      	bne.n	dec2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    debc:	7948      	ldrb	r0, [r1, #5]
    debe:	0980      	lsrs	r0, r0, #6
    dec0:	d001      	beq.n	dec6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    dec2:	2000      	movs	r0, #0
    dec4:	4770      	bx	lr
    dec6:	2001      	movs	r0, #1
    dec8:	4770      	bx	lr
    deca:	2801      	cmp	r0, #1
    decc:	d106      	bne.n	dedc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    dece:	7948      	ldrb	r0, [r1, #5]
    ded0:	2101      	movs	r1, #1
    ded2:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ded6:	d101      	bne.n	dedc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    ded8:	2001      	movs	r0, #1
    deda:	4770      	bx	lr
    dedc:	2000      	movs	r0, #0
    dede:	4770      	bx	lr
    dee0:	2802      	cmp	r0, #2
    dee2:	d003      	beq.n	deec <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    dee4:	2803      	cmp	r0, #3
    dee6:	d001      	beq.n	deec <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    dee8:	2000      	movs	r0, #0
    deea:	4770      	bx	lr
    deec:	2001      	movs	r0, #1
    deee:	4770      	bx	lr

0000def0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    def0:	b510      	push	{r4, lr}
    def2:	4604      	mov	r4, r0
    def4:	7c00      	ldrb	r0, [r0, #16]
    def6:	f7ff fff3 	bl	dee0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    defa:	b148      	cbz	r0, df10 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    defc:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    df00:	f104 0150 	add.w	r1, r4, #80	; 0x50
    df04:	f7ff fa2e 	bl	d364 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    df08:	2808      	cmp	r0, #8
    df0a:	d001      	beq.n	df10 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    df0c:	2001      	movs	r0, #1
    df0e:	bd10      	pop	{r4, pc}
    df10:	7c20      	ldrb	r0, [r4, #16]
    df12:	b118      	cbz	r0, df1c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df14:	2802      	cmp	r0, #2
    df16:	d001      	beq.n	df1c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    df18:	7de0      	ldrb	r0, [r4, #23]
    df1a:	bd10      	pop	{r4, pc}
    df1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df20:	2000      	movs	r0, #0
    df22:	f7f6 bebd 	b.w	4ca0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000df26 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    df26:	b508      	push	{r3, lr}
    df28:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    df2c:	f88d 1000 	strb.w	r1, [sp]
    df30:	9900      	ldr	r1, [sp, #0]
    df32:	9100      	str	r1, [sp, #0]
    df34:	f89d 1000 	ldrb.w	r1, [sp]
    df38:	b109      	cbz	r1, df3e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    df3a:	2001      	movs	r0, #1
    df3c:	bd08      	pop	{r3, pc}
    df3e:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    df42:	f88d 0000 	strb.w	r0, [sp]
    df46:	9800      	ldr	r0, [sp, #0]
    df48:	9000      	str	r0, [sp, #0]
    df4a:	f89d 0000 	ldrb.w	r0, [sp]
    df4e:	2000      	movs	r0, #0
    df50:	bd08      	pop	{r3, pc}

0000df52 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    df52:	20ff      	movs	r0, #255	; 0xff
    df54:	7008      	strb	r0, [r1, #0]
    df56:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    df58:	f7ff b955 	b.w	d206 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000df5c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    df5c:	b51c      	push	{r2, r3, r4, lr}
    df5e:	4604      	mov	r4, r0
    df60:	22d4      	movs	r2, #212	; 0xd4
    df62:	2100      	movs	r1, #0
    df64:	f7fe f85b 	bl	c01e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df68:	20ff      	movs	r0, #255	; 0xff
    df6a:	7020      	strb	r0, [r4, #0]
    df6c:	207f      	movs	r0, #127	; 0x7f
    df6e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    df72:	2013      	movs	r0, #19
    df74:	8060      	strh	r0, [r4, #2]
    df76:	f7f6 fc43 	bl	4800 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    df7a:	4601      	mov	r1, r0
    df7c:	62e0      	str	r0, [r4, #44]	; 0x2c
    df7e:	2200      	movs	r2, #0
    df80:	4668      	mov	r0, sp
    df82:	f7ff f8ab 	bl	d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    df86:	2200      	movs	r2, #0
    df88:	2101      	movs	r1, #1
    df8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    df8c:	f7ff f91b 	bl	d1c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    df90:	2204      	movs	r2, #4
    df92:	4668      	mov	r0, sp
    df94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    df96:	f7ff f8a1 	bl	d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    df9a:	2200      	movs	r2, #0
    df9c:	4611      	mov	r1, r2
    df9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    dfa0:	f7ff f911 	bl	d1c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    dfa4:	2000      	movs	r0, #0
    dfa6:	73a0      	strb	r0, [r4, #14]
    dfa8:	f104 0020 	add.w	r0, r4, #32
    dfac:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    dfb0:	f000 b962 	b.w	e278 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000dfb4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    dfb4:	7880      	ldrb	r0, [r0, #2]
    dfb6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    dfba:	b108      	cbz	r0, dfc0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    dfbc:	2000      	movs	r0, #0
    dfbe:	4770      	bx	lr
    dfc0:	201f      	movs	r0, #31
    dfc2:	4770      	bx	lr

0000dfc4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    dfc4:	f7f8 bfa2 	b.w	6f0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0000dfc8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    dfc8:	6880      	ldr	r0, [r0, #8]
    dfca:	4770      	bx	lr

0000dfcc <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    dfcc:	2001      	movs	r0, #1
    dfce:	4770      	bx	lr

0000dfd0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    dfd0:	b510      	push	{r4, lr}
    dfd2:	4604      	mov	r4, r0
    dfd4:	3020      	adds	r0, #32
    dfd6:	f000 f90f 	bl	e1f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    dfda:	8861      	ldrh	r1, [r4, #2]
    dfdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfe0:	2228      	movs	r2, #40	; 0x28
    dfe2:	f7f9 b973 	b.w	72cc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000dfe6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    dfe6:	2200      	movs	r2, #0
    dfe8:	6282      	str	r2, [r0, #40]	; 0x28
    dfea:	8843      	ldrh	r3, [r0, #2]
    dfec:	2b1d      	cmp	r3, #29
    dfee:	d001      	beq.n	dff4 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    dff0:	7341      	strb	r1, [r0, #13]
    dff2:	4770      	bx	lr
    dff4:	7342      	strb	r2, [r0, #13]
    dff6:	4770      	bx	lr

0000dff8 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    dff8:	b510      	push	{r4, lr}
    dffa:	2400      	movs	r4, #0
    dffc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    dffe:	f7ff f8d0 	bl	d1a2 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e002:	b100      	cbz	r0, e006 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e004:	2001      	movs	r0, #1
    e006:	4384      	bics	r4, r0
    e008:	f084 0001 	eor.w	r0, r4, #1
    e00c:	bd10      	pop	{r4, pc}

0000e00e <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e00e:	2000      	movs	r0, #0
    e010:	4770      	bx	lr

0000e012 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e012:	7880      	ldrb	r0, [r0, #2]
    e014:	f000 0001 	and.w	r0, r0, #1
    e018:	4770      	bx	lr

0000e01a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e01a:	7880      	ldrb	r0, [r0, #2]
    e01c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e020:	4770      	bx	lr

0000e022 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e022:	2001      	movs	r0, #1
    e024:	4770      	bx	lr

0000e026 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e026:	7880      	ldrb	r0, [r0, #2]
    e028:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e02c:	4770      	bx	lr

0000e02e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e02e:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e032:	4770      	bx	lr

0000e034 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e034:	7800      	ldrb	r0, [r0, #0]
    e036:	28ff      	cmp	r0, #255	; 0xff
    e038:	d001      	beq.n	e03e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e03a:	2001      	movs	r0, #1
    e03c:	4770      	bx	lr
    e03e:	2000      	movs	r0, #0
    e040:	4770      	bx	lr

0000e042 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e042:	680a      	ldr	r2, [r1, #0]
    e044:	f840 2f11 	str.w	r2, [r0, #17]!
    e048:	8889      	ldrh	r1, [r1, #4]
    e04a:	8081      	strh	r1, [r0, #4]
    e04c:	2101      	movs	r1, #1
    e04e:	7181      	strb	r1, [r0, #6]
    e050:	4770      	bx	lr

0000e052 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e052:	7b00      	ldrb	r0, [r0, #12]
    e054:	4770      	bx	lr

0000e056 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e056:	2001      	movs	r0, #1
    e058:	4770      	bx	lr

0000e05a <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e05a:	61c1      	str	r1, [r0, #28]
    e05c:	4770      	bx	lr

0000e05e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e05e:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    e062:	4770      	bx	lr

0000e064 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e064:	b570      	push	{r4, r5, r6, lr}
    e066:	4604      	mov	r4, r0
    e068:	7880      	ldrb	r0, [r0, #2]
    e06a:	2501      	movs	r5, #1
    e06c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e070:	b138      	cbz	r0, e082 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e072:	233c      	movs	r3, #60	; 0x3c
    e074:	22ff      	movs	r2, #255	; 0xff
    e076:	4620      	mov	r0, r4
    e078:	69e1      	ldr	r1, [r4, #28]
    e07a:	f7f8 ff73 	bl	6f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    e07e:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    e082:	78a0      	ldrb	r0, [r4, #2]
    e084:	07c0      	lsls	r0, r0, #31
    e086:	f7f8 f86d 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e08a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    e08e:	bd70      	pop	{r4, r5, r6, pc}

0000e090 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e090:	7bc0      	ldrb	r0, [r0, #15]
    e092:	2800      	cmp	r0, #0
    e094:	d000      	beq.n	e098 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e096:	2001      	movs	r0, #1
    e098:	4770      	bx	lr
    e09a:	b510      	push	{r4, lr}
    e09c:	f7ff f962 	bl	d364 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e0a0:	4604      	mov	r4, r0
    e0a2:	f7f7 fc9f 	bl	59e4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    e0a6:	b138      	cbz	r0, e0b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e0a8:	4620      	mov	r0, r4
    e0aa:	f7f7 fbd3 	bl	5854 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    e0ae:	b118      	cbz	r0, e0b8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    e0b0:	2110      	movs	r1, #16
    e0b2:	f7ff fb37 	bl	d724 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    e0b6:	b108      	cbz	r0, e0bc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    e0b8:	2000      	movs	r0, #0
    e0ba:	bd10      	pop	{r4, pc}
    e0bc:	2001      	movs	r0, #1
    e0be:	bd10      	pop	{r4, pc}
    e0c0:	2101      	movs	r1, #1
    e0c2:	f7f8 bbaf 	b.w	6824 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e0c6:	2101      	movs	r1, #1
    e0c8:	f7f8 bbac 	b.w	6824 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    e0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0d0:	4604      	mov	r4, r0
    e0d2:	2700      	movs	r7, #0
    e0d4:	704f      	strb	r7, [r1, #1]
    e0d6:	2011      	movs	r0, #17
    e0d8:	460d      	mov	r5, r1
    e0da:	7008      	strb	r0, [r1, #0]
    e0dc:	2220      	movs	r2, #32
    e0de:	f104 0166 	add.w	r1, r4, #102	; 0x66
    e0e2:	1d28      	adds	r0, r5, #4
    e0e4:	f7fd ff21 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0e8:	2601      	movs	r6, #1
    e0ea:	722e      	strb	r6, [r5, #8]
    e0ec:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    e0f0:	7928      	ldrb	r0, [r5, #4]
    e0f2:	2800      	cmp	r0, #0
    e0f4:	d111      	bne.n	e11a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    e0f6:	88e8      	ldrh	r0, [r5, #6]
    e0f8:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    e0fc:	69e0      	ldr	r0, [r4, #28]
    e0fe:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    e102:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    e106:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    e10a:	8800      	ldrh	r0, [r0, #0]
    e10c:	f7f6 fab8 	bl	4680 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e110:	f7fe fe04 	bl	cd1c <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    e114:	69e0      	ldr	r0, [r4, #28]
    e116:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    e11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e122:	4604      	mov	r4, r0
    e124:	460f      	mov	r7, r1
    e126:	7e40      	ldrb	r0, [r0, #25]
    e128:	f7f7 fb54 	bl	57d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e12c:	4606      	mov	r6, r0
    e12e:	7e20      	ldrb	r0, [r4, #24]
    e130:	f104 0549 	add.w	r5, r4, #73	; 0x49
    e134:	b120      	cbz	r0, e140 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e136:	b11e      	cbz	r6, e140 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    e138:	7e60      	ldrb	r0, [r4, #25]
    e13a:	f7f7 fb3f 	bl	57bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e13e:	b1a0      	cbz	r0, e16a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    e140:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    e144:	2800      	cmp	r0, #0
    e146:	d024      	beq.n	e192 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e148:	7ea0      	ldrb	r0, [r4, #26]
    e14a:	2800      	cmp	r0, #0
    e14c:	d021      	beq.n	e192 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    e14e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    e152:	4629      	mov	r1, r5
    e154:	f7ff feb9 	bl	deca <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    e158:	b1a8      	cbz	r0, e186 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    e15a:	f7f7 fb2b 	bl	57b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e15e:	463a      	mov	r2, r7
    e160:	4629      	mov	r1, r5
    e162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e166:	f7ff b895 	b.w	d294 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e16a:	2001      	movs	r0, #1
    e16c:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    e170:	463a      	mov	r2, r7
    e172:	4629      	mov	r1, r5
    e174:	4630      	mov	r0, r6
    e176:	f7ff f88d 	bl	d294 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    e17a:	7e61      	ldrb	r1, [r4, #25]
    e17c:	4628      	mov	r0, r5
    e17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e182:	f7f7 bb33 	b.w	57ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    e186:	4639      	mov	r1, r7
    e188:	4628      	mov	r0, r5
    e18a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e18e:	f7ff b870 	b.w	d272 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    e192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e196:	b510      	push	{r4, lr}
    e198:	4604      	mov	r4, r0
    e19a:	4608      	mov	r0, r1
    e19c:	f7fc ffb0 	bl	b100 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    e1a0:	7921      	ldrb	r1, [r4, #4]
    e1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1a6:	2025      	movs	r0, #37	; 0x25
    e1a8:	f001 bdad 	b.w	fd06 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    e1ac:	b510      	push	{r4, lr}
    e1ae:	4604      	mov	r4, r0
    e1b0:	3026      	adds	r0, #38	; 0x26
    e1b2:	f7fc ff61 	bl	b078 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e1b6:	2800      	cmp	r0, #0
    e1b8:	d102      	bne.n	e1c0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    e1ba:	207f      	movs	r0, #127	; 0x7f
    e1bc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e1c0:	bd10      	pop	{r4, pc}
    e1c2:	7802      	ldrb	r2, [r0, #0]
    e1c4:	2320      	movs	r3, #32
    e1c6:	f022 0220 	bic.w	r2, r2, #32
    e1ca:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e1ce:	430a      	orrs	r2, r1
    e1d0:	7002      	strb	r2, [r0, #0]
    e1d2:	4770      	bx	lr

0000e1d4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    e1d4:	b570      	push	{r4, r5, r6, lr}
    e1d6:	7001      	strb	r1, [r0, #0]
    e1d8:	7042      	strb	r2, [r0, #1]
    e1da:	4614      	mov	r4, r2
    e1dc:	460d      	mov	r5, r1
    e1de:	7880      	ldrb	r0, [r0, #2]
    e1e0:	f000 f87f 	bl	e2e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e1e4:	fb10 f005 	smulbb	r0, r0, r5
    e1e8:	4360      	muls	r0, r4
    e1ea:	28ff      	cmp	r0, #255	; 0xff
    e1ec:	d303      	bcc.n	e1f6 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    e1ee:	215c      	movs	r1, #92	; 0x5c
    e1f0:	202e      	movs	r0, #46	; 0x2e
    e1f2:	f7f5 fe2b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1f6:	bd70      	pop	{r4, r5, r6, pc}

0000e1f8 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    e1f8:	b510      	push	{r4, lr}
    e1fa:	4604      	mov	r4, r0
    e1fc:	7880      	ldrb	r0, [r0, #2]
    e1fe:	f000 f870 	bl	e2e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e202:	7861      	ldrb	r1, [r4, #1]
    e204:	7822      	ldrb	r2, [r4, #0]
    e206:	fb11 f102 	smulbb	r1, r1, r2
    e20a:	4348      	muls	r0, r1
    e20c:	b2c0      	uxtb	r0, r0
    e20e:	bd10      	pop	{r4, pc}

0000e210 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    e210:	b510      	push	{r4, lr}
    e212:	4604      	mov	r4, r0
    e214:	f000 f84d 	bl	e2b2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    e218:	7961      	ldrb	r1, [r4, #5]
    e21a:	1c49      	adds	r1, r1, #1
    e21c:	b2c9      	uxtb	r1, r1
    e21e:	7161      	strb	r1, [r4, #5]
    e220:	7862      	ldrb	r2, [r4, #1]
    e222:	4291      	cmp	r1, r2
    e224:	d10b      	bne.n	e23e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e226:	2200      	movs	r2, #0
    e228:	7162      	strb	r2, [r4, #5]
    e22a:	78e1      	ldrb	r1, [r4, #3]
    e22c:	4301      	orrs	r1, r0
    e22e:	70e1      	strb	r1, [r4, #3]
    e230:	78a3      	ldrb	r3, [r4, #2]
    e232:	4299      	cmp	r1, r3
    e234:	d103      	bne.n	e23e <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    e236:	70e2      	strb	r2, [r4, #3]
    e238:	7921      	ldrb	r1, [r4, #4]
    e23a:	1c49      	adds	r1, r1, #1
    e23c:	7121      	strb	r1, [r4, #4]
    e23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e242:	f000 b825 	b.w	e290 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000e246 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    e246:	7081      	strb	r1, [r0, #2]
    e248:	4770      	bx	lr

0000e24a <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    e24a:	b570      	push	{r4, r5, r6, lr}
    e24c:	4604      	mov	r4, r0
    e24e:	7880      	ldrb	r0, [r0, #2]
    e250:	f000 f847 	bl	e2e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e254:	7861      	ldrb	r1, [r4, #1]
    e256:	fb11 f500 	smulbb	r5, r1, r0
    e25a:	78e0      	ldrb	r0, [r4, #3]
    e25c:	f000 f841 	bl	e2e2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    e260:	7861      	ldrb	r1, [r4, #1]
    e262:	7962      	ldrb	r2, [r4, #5]
    e264:	fb10 2001 	smlabb	r0, r0, r1, r2
    e268:	7821      	ldrb	r1, [r4, #0]
    e26a:	7922      	ldrb	r2, [r4, #4]
    e26c:	1a89      	subs	r1, r1, r2
    e26e:	fb11 f105 	smulbb	r1, r1, r5
    e272:	1a08      	subs	r0, r1, r0
    e274:	b2c0      	uxtb	r0, r0
    e276:	bd70      	pop	{r4, r5, r6, pc}

0000e278 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    e278:	2100      	movs	r1, #0
    e27a:	6001      	str	r1, [r0, #0]
    e27c:	8081      	strh	r1, [r0, #4]
    e27e:	2101      	movs	r1, #1
    e280:	7041      	strb	r1, [r0, #1]
    e282:	7001      	strb	r1, [r0, #0]
    e284:	4770      	bx	lr

0000e286 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    e286:	2100      	movs	r1, #0
    e288:	70c1      	strb	r1, [r0, #3]
    e28a:	7141      	strb	r1, [r0, #5]
    e28c:	7101      	strb	r1, [r0, #4]
    e28e:	4770      	bx	lr
    e290:	b510      	push	{r4, lr}
    e292:	2801      	cmp	r0, #1
    e294:	d007      	beq.n	e2a6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    e296:	2802      	cmp	r0, #2
    e298:	d007      	beq.n	e2aa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    e29a:	2804      	cmp	r0, #4
    e29c:	d007      	beq.n	e2ae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    e29e:	2139      	movs	r1, #57	; 0x39
    e2a0:	202e      	movs	r0, #46	; 0x2e
    e2a2:	f7f5 fdd3 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2a6:	2025      	movs	r0, #37	; 0x25
    e2a8:	bd10      	pop	{r4, pc}
    e2aa:	2026      	movs	r0, #38	; 0x26
    e2ac:	bd10      	pop	{r4, pc}
    e2ae:	2027      	movs	r0, #39	; 0x27
    e2b0:	bd10      	pop	{r4, pc}
    e2b2:	4601      	mov	r1, r0
    e2b4:	2000      	movs	r0, #0
    e2b6:	788a      	ldrb	r2, [r1, #2]
    e2b8:	07d3      	lsls	r3, r2, #31
    e2ba:	d002      	beq.n	e2c2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    e2bc:	78cb      	ldrb	r3, [r1, #3]
    e2be:	07db      	lsls	r3, r3, #31
    e2c0:	d006      	beq.n	e2d0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    e2c2:	0793      	lsls	r3, r2, #30
    e2c4:	d506      	bpl.n	e2d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e2c6:	78cb      	ldrb	r3, [r1, #3]
    e2c8:	079b      	lsls	r3, r3, #30
    e2ca:	d403      	bmi.n	e2d4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    e2cc:	2002      	movs	r0, #2
    e2ce:	4770      	bx	lr
    e2d0:	2001      	movs	r0, #1
    e2d2:	4770      	bx	lr
    e2d4:	0752      	lsls	r2, r2, #29
    e2d6:	d5fc      	bpl.n	e2d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2d8:	78c9      	ldrb	r1, [r1, #3]
    e2da:	0749      	lsls	r1, r1, #29
    e2dc:	d4f9      	bmi.n	e2d2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    e2de:	2004      	movs	r0, #4
    e2e0:	4770      	bx	lr
    e2e2:	f3c0 0180 	ubfx	r1, r0, #2, #1
    e2e6:	f3c0 0240 	ubfx	r2, r0, #1, #1
    e2ea:	4411      	add	r1, r2
    e2ec:	f000 0001 	and.w	r0, r0, #1
    e2f0:	4408      	add	r0, r1
    e2f2:	4770      	bx	lr

0000e2f4 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    e2f4:	f240 315a 	movw	r1, #858	; 0x35a
    e2f8:	4348      	muls	r0, r1
    e2fa:	4770      	bx	lr

0000e2fc <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    e2fc:	f240 20ef 	movw	r0, #751	; 0x2ef
    e300:	4770      	bx	lr
    e302:	020e      	.short	0x020e
    e304:	0630041c 	.word	0x0630041c
    e308:	035a0c60 	.word	0x035a0c60
    e30c:	05c506b4 	.word	0x05c506b4
    e310:	12250bf5 	.word	0x12250bf5
    e314:	03b101a3 	.word	0x03b101a3
    e318:	02ef05bf 	.word	0x02ef05bf
    e31c:	09a30649 	.word	0x09a30649

0000e320 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    e320:	b510      	push	{r4, lr}
    e322:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    e326:	b109      	cbz	r1, e32c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    e328:	2000      	movs	r0, #0
    e32a:	bd10      	pop	{r4, pc}
    e32c:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    e330:	b949      	cbnz	r1, e346 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e332:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    e336:	b131      	cbz	r1, e346 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e338:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    e33c:	428a      	cmp	r2, r1
    e33e:	d902      	bls.n	e346 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    e340:	f7ff fe90 	bl	e064 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e344:	e7f0      	b.n	e328 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    e346:	2001      	movs	r0, #1
    e348:	bd10      	pop	{r4, pc}

0000e34a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    e34a:	b510      	push	{r4, lr}
    e34c:	b131      	cbz	r1, e35c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    e34e:	2901      	cmp	r1, #1
    e350:	d008      	beq.n	e364 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    e352:	f240 718b 	movw	r1, #1931	; 0x78b
    e356:	2030      	movs	r0, #48	; 0x30
    e358:	f7f5 fd78 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e360:	f000 b9d4 	b.w	e70c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
    e364:	2100      	movs	r1, #0
    e366:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    e36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e36e:	f000 b93b 	b.w	e5e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0000e372 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    e372:	b510      	push	{r4, lr}
    e374:	4604      	mov	r4, r0
    e376:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e37a:	2800      	cmp	r0, #0
    e37c:	d019      	beq.n	e3b2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    e37e:	2001      	movs	r0, #1
    e380:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    e384:	4601      	mov	r1, r0
    e386:	4620      	mov	r0, r4
    e388:	f7ff fe69 	bl	e05e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    e38c:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    e390:	b170      	cbz	r0, e3b0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    e392:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    e396:	f7f3 fdd3 	bl	1f40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e39a:	7820      	ldrb	r0, [r4, #0]
    e39c:	f7f3 ff1e 	bl	21dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    e3a0:	f814 09a0 	ldrb.w	r0, [r4], #-160
    e3a4:	f7f3 fef8 	bl	2198 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e3a8:	b120      	cbz	r0, e3b4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    e3aa:	2000      	movs	r0, #0
    e3ac:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    e3b0:	2000      	movs	r0, #0
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	f240 2103 	movw	r1, #515	; 0x203
    e3b8:	2030      	movs	r0, #48	; 0x30
    e3ba:	f7f5 fd47 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e3be <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    e3be:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e3c2:	4770      	bx	lr

0000e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    e3c4:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    e3c8:	4770      	bx	lr

0000e3ca <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    e3ca:	b50e      	push	{r1, r2, r3, lr}
    e3cc:	4669      	mov	r1, sp
    e3ce:	2001      	movs	r0, #1
    e3d0:	f7fe fdcd 	bl	cf6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e3d4:	b138      	cbz	r0, e3e6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    e3d6:	f44f 71a1 	mov.w	r1, #322	; 0x142
    e3da:	2030      	movs	r0, #48	; 0x30
    e3dc:	f7f5 fd36 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3e0:	9802      	ldr	r0, [sp, #8]
    e3e2:	f7ff ffc6 	bl	e372 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    e3e6:	4668      	mov	r0, sp
    e3e8:	f7f5 ff68 	bl	42bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e3ec:	2800      	cmp	r0, #0
    e3ee:	d0f7      	beq.n	e3e0 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    e3f0:	f7f9 f8f6 	bl	75e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    e3f4:	2000      	movs	r0, #0
    e3f6:	bd0e      	pop	{r1, r2, r3, pc}

0000e3f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    e3f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e3fa:	4604      	mov	r4, r0
    e3fc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    e400:	2800      	cmp	r0, #0
    e402:	d153      	bne.n	e4ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e404:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e408:	2803      	cmp	r0, #3
    e40a:	d14f      	bne.n	e4ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e40c:	f7fd fc18 	bl	bc40 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e410:	4601      	mov	r1, r0
    e412:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e416:	f7f3 f91b 	bl	1650 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e41a:	2800      	cmp	r0, #0
    e41c:	dd46      	ble.n	e4ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e41e:	68e1      	ldr	r1, [r4, #12]
    e420:	b111      	cbz	r1, e428 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    e422:	fbb0 f0f1 	udiv	r0, r0, r1
    e426:	e000      	b.n	e42a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    e428:	2000      	movs	r0, #0
    e42a:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e42e:	1c40      	adds	r0, r0, #1
    e430:	4408      	add	r0, r1
    e432:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e436:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e43a:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    e43e:	1a08      	subs	r0, r1, r0
    e440:	b200      	sxth	r0, r0
    e442:	2800      	cmp	r0, #0
    e444:	dd32      	ble.n	e4ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e446:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e44a:	f7f3 fd79 	bl	1f40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    e44e:	2800      	cmp	r0, #0
    e450:	d02c      	beq.n	e4ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e452:	2001      	movs	r0, #1
    e454:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    e458:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    e45c:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    e460:	ae01      	add	r6, sp, #4
    e462:	1a40      	subs	r0, r0, r1
    e464:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e468:	1e40      	subs	r0, r0, #1
    e46a:	4408      	add	r0, r1
    e46c:	b285      	uxth	r5, r0
    e46e:	e017      	b.n	e4a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    e470:	9600      	str	r6, [sp, #0]
    e472:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    e476:	2300      	movs	r3, #0
    e478:	2201      	movs	r2, #1
    e47a:	4620      	mov	r0, r4
    e47c:	f7f9 f980 	bl	7780 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e480:	2800      	cmp	r0, #0
    e482:	d013      	beq.n	e4ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    e484:	2801      	cmp	r0, #1
    e486:	d004      	beq.n	e492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    e488:	f240 6101 	movw	r1, #1537	; 0x601
    e48c:	2030      	movs	r0, #48	; 0x30
    e48e:	f7f5 fcdd 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e492:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e496:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e49a:	4408      	add	r0, r1
    e49c:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    e4a0:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    e4a4:	1a28      	subs	r0, r5, r0
    e4a6:	b200      	sxth	r0, r0
    e4a8:	2800      	cmp	r0, #0
    e4aa:	dae1      	bge.n	e470 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    e4ac:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e4ae:	2000      	movs	r0, #0
    e4b0:	4770      	bx	lr
    e4b2:	b570      	push	{r4, r5, r6, lr}
    e4b4:	4604      	mov	r4, r0
    e4b6:	2601      	movs	r6, #1
    e4b8:	f000 f90c 	bl	e6d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    e4bc:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e4c0:	2000      	movs	r0, #0
    e4c2:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    e4c6:	2001      	movs	r0, #1
    e4c8:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    e4cc:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    e4d0:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    e4d4:	b160      	cbz	r0, e4f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
    e4d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e4da:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e4de:	f7f3 f885 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e4e2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e4e6:	2100      	movs	r1, #0
    e4e8:	4628      	mov	r0, r5
    e4ea:	f7ff f861 	bl	d5b0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e4ee:	e00f      	b.n	e510 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    e4f0:	4620      	mov	r0, r4
    e4f2:	f7ff fd69 	bl	dfc8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e4f6:	4606      	mov	r6, r0
    e4f8:	4631      	mov	r1, r6
    e4fa:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e4fe:	f7f3 f875 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e502:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    e506:	4631      	mov	r1, r6
    e508:	4628      	mov	r0, r5
    e50a:	f7ff f851 	bl	d5b0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    e50e:	1c46      	adds	r6, r0, #1
    e510:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e514:	1c41      	adds	r1, r0, #1
    e516:	290a      	cmp	r1, #10
    e518:	d202      	bcs.n	e520 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
    e51a:	4430      	add	r0, r6
    e51c:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    e520:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    e524:	b130      	cbz	r0, e534 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    e526:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e52a:	1c40      	adds	r0, r0, #1
    e52c:	280a      	cmp	r0, #10
    e52e:	d301      	bcc.n	e534 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    e530:	2002      	movs	r0, #2
    e532:	e000      	b.n	e536 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
    e534:	2003      	movs	r0, #3
    e536:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    e53a:	2100      	movs	r1, #0
    e53c:	4620      	mov	r0, r4
    e53e:	f000 f822 	bl	e586 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    e542:	b120      	cbz	r0, e54e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    e544:	4620      	mov	r0, r4
    e546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e54a:	f000 b80d 	b.w	e568 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    e54e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e552:	4629      	mov	r1, r5
    e554:	f000 f8bc 	bl	e6d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    e558:	2800      	cmp	r0, #0
    e55a:	d104      	bne.n	e566 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    e55c:	f240 61a2 	movw	r1, #1698	; 0x6a2
    e560:	2030      	movs	r0, #48	; 0x30
    e562:	f7f5 fc73 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e566:	bd70      	pop	{r4, r5, r6, pc}
    e568:	b510      	push	{r4, lr}
    e56a:	4604      	mov	r4, r0
    e56c:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    e570:	f7f3 fe12 	bl	2198 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e574:	2000      	movs	r0, #0
    e576:	7520      	strb	r0, [r4, #20]
    e578:	bd10      	pop	{r4, pc}
    e57a:	b510      	push	{r4, lr}
    e57c:	f7ff fd28 	bl	dfd0 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    e580:	f200 1009 	addw	r0, r0, #265	; 0x109
    e584:	bd10      	pop	{r4, pc}
    e586:	b570      	push	{r4, r5, r6, lr}
    e588:	4604      	mov	r4, r0
    e58a:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    e58e:	460d      	mov	r5, r1
    e590:	b108      	cbz	r0, e596 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
    e592:	2001      	movs	r0, #1
    e594:	bd70      	pop	{r4, r5, r6, pc}
    e596:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e59a:	b1a8      	cbz	r0, e5c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    e59c:	4620      	mov	r0, r4
    e59e:	f7ff fd13 	bl	dfc8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e5a2:	4405      	add	r5, r0
    e5a4:	4620      	mov	r0, r4
    e5a6:	f7ff ffe8 	bl	e57a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    e5aa:	1941      	adds	r1, r0, r5
    e5ac:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    e5b0:	4288      	cmp	r0, r1
    e5b2:	d206      	bcs.n	e5c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
    e5b4:	2001      	movs	r0, #1
    e5b6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    e5ba:	4620      	mov	r0, r4
    e5bc:	f7ff fd52 	bl	e064 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    e5c0:	e7e7      	b.n	e592 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
    e5c2:	1b40      	subs	r0, r0, r5
    e5c4:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    e5c8:	2000      	movs	r0, #0
    e5ca:	bd70      	pop	{r4, r5, r6, pc}
    e5cc:	b510      	push	{r4, lr}
    e5ce:	4604      	mov	r4, r0
    e5d0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    e5d4:	f000 f9e8 	bl	e9a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    e5d8:	4602      	mov	r2, r0
    e5da:	4620      	mov	r0, r4
    e5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5e0:	f240 111b 	movw	r1, #283	; 0x11b
    e5e4:	f7ff bbc8 	b.w	dd78 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e5e8:	b510      	push	{r4, lr}
    e5ea:	f7fc fbdb 	bl	ada4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    e5ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5f2:	f7f3 bf27 	b.w	2444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    e5f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e5fa:	4604      	mov	r4, r0
    e5fc:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    e600:	2800      	cmp	r0, #0
    e602:	d051      	beq.n	e6a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    e604:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e608:	2803      	cmp	r0, #3
    e60a:	d14d      	bne.n	e6a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    e60c:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    e610:	f001 fac2 	bl	fb98 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    e614:	4605      	mov	r5, r0
    e616:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e61a:	f7f8 ffd3 	bl	75c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e61e:	4428      	add	r0, r5
    e620:	b286      	uxth	r6, r0
    e622:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    e626:	f7f8 ffcd 	bl	75c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    e62a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    e62e:	fa1f f880 	uxth.w	r8, r0
    e632:	4648      	mov	r0, r9
    e634:	f001 fb49 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e638:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    e63c:	1a0d      	subs	r5, r1, r0
    e63e:	4648      	mov	r0, r9
    e640:	f001 fb51 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e644:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e648:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    e64c:	fbb0 f0fa 	udiv	r0, r0, sl
    e650:	1a2d      	subs	r5, r5, r0
    e652:	4648      	mov	r0, r9
    e654:	f001 fb39 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e658:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    e65c:	1a0f      	subs	r7, r1, r0
    e65e:	4648      	mov	r0, r9
    e660:	f001 fb41 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e664:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e668:	4401      	add	r1, r0
    e66a:	fbb1 f0fa 	udiv	r0, r1, sl
    e66e:	1a39      	subs	r1, r7, r0
    e670:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    e674:	4370      	muls	r0, r6
    e676:	fbb0 f2f8 	udiv	r2, r0, r8
    e67a:	2029      	movs	r0, #41	; 0x29
    e67c:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    e680:	3260      	adds	r2, #96	; 0x60
    e682:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    e686:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    e68a:	42a9      	cmp	r1, r5
    e68c:	d801      	bhi.n	e692 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
    e68e:	4285      	cmp	r5, r0
    e690:	d901      	bls.n	e696 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
    e692:	f7f5 f83d 	bl	3710 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    e696:	4631      	mov	r1, r6
    e698:	68e0      	ldr	r0, [r4, #12]
    e69a:	f7fd fb05 	bl	bca8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    e69e:	2100      	movs	r1, #0
    e6a0:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    e6a4:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    e6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6ac:	b570      	push	{r4, r5, r6, lr}
    e6ae:	460c      	mov	r4, r1
    e6b0:	4605      	mov	r5, r0
    e6b2:	f001 fb18 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e6b6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    e6ba:	4408      	add	r0, r1
    e6bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e6c0:	fbb0 f6f1 	udiv	r6, r0, r1
    e6c4:	4628      	mov	r0, r5
    e6c6:	f001 fb00 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    e6ca:	4430      	add	r0, r6
    e6cc:	4420      	add	r0, r4
    e6ce:	bd70      	pop	{r4, r5, r6, pc}
    e6d0:	f7f3 b906 	b.w	18e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e6d4:	b510      	push	{r4, lr}
    e6d6:	4604      	mov	r4, r0
    e6d8:	f7ff fca3 	bl	e022 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e6dc:	b1a0      	cbz	r0, e708 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    e6de:	4620      	mov	r0, r4
    e6e0:	f7ff fc97 	bl	e012 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e6e4:	b918      	cbnz	r0, e6ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    e6e6:	4620      	mov	r0, r4
    e6e8:	f7ff fc9d 	bl	e026 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e6ec:	b120      	cbz	r0, e6f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    e6ee:	2449      	movs	r4, #73	; 0x49
    e6f0:	f001 fab7 	bl	fc62 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e6f4:	b928      	cbnz	r0, e702 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    e6f6:	e001      	b.n	e6fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    e6f8:	2442      	movs	r4, #66	; 0x42
    e6fa:	e7f9      	b.n	e6f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
    e6fc:	f001 faa7 	bl	fc4e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e700:	b100      	cbz	r0, e704 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    e702:	1de4      	adds	r4, r4, #7
    e704:	4620      	mov	r0, r4
    e706:	bd10      	pop	{r4, pc}
    e708:	206b      	movs	r0, #107	; 0x6b
    e70a:	bd10      	pop	{r4, pc}
    e70c:	b570      	push	{r4, r5, r6, lr}
    e70e:	4604      	mov	r4, r0
    e710:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    e714:	2500      	movs	r5, #0
    e716:	b118      	cbz	r0, e720 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    e718:	2001      	movs	r0, #1
    e71a:	f000 f887 	bl	e82c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    e71e:	4605      	mov	r5, r0
    e720:	4620      	mov	r0, r4
    e722:	f7ff fc51 	bl	dfc8 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e726:	1941      	adds	r1, r0, r5
    e728:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e72c:	34b8      	adds	r4, #184	; 0xb8
    e72e:	f7f2 ff5d 	bl	15ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e732:	2600      	movs	r6, #0
    e734:	60e0      	str	r0, [r4, #12]
    e736:	f804 6b0b 	strb.w	r6, [r4], #11
    e73a:	2001      	movs	r0, #1
    e73c:	f804 0901 	strb.w	r0, [r4], #-1
    e740:	2003      	movs	r0, #3
    e742:	f804 09c2 	strb.w	r0, [r4], #-194
    e746:	4620      	mov	r0, r4
    e748:	f7ff ffc4 	bl	e6d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    e74c:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e750:	4629      	mov	r1, r5
    e752:	4620      	mov	r0, r4
    e754:	f7ff ff17 	bl	e586 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    e758:	b930      	cbnz	r0, e768 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
    e75a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e75e:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e762:	f7ff ffb5 	bl	e6d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    e766:	b128      	cbz	r0, e774 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    e768:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    e76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e770:	f7ff bf3a 	b.w	e5e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    e774:	f240 61eb 	movw	r1, #1771	; 0x6eb
    e778:	2030      	movs	r0, #48	; 0x30
    e77a:	f7f5 fb67 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e77e:	b510      	push	{r4, lr}
    e780:	4604      	mov	r4, r0
    e782:	2000      	movs	r0, #0
    e784:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    e788:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e78c:	f7f3 fd04 	bl	2198 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e790:	2020      	movs	r0, #32
    e792:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    e796:	bd10      	pop	{r4, pc}
    e798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e79c:	2500      	movs	r5, #0
    e79e:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    e7a2:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    e7a6:	4688      	mov	r8, r1
    e7a8:	4604      	mov	r4, r0
    e7aa:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    e7ae:	2701      	movs	r7, #1
    e7b0:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    e7b4:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e7b8:	4639      	mov	r1, r7
    e7ba:	34a0      	adds	r4, #160	; 0xa0
    e7bc:	f7f7 fa84 	bl	5cc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e7c0:	6860      	ldr	r0, [r4, #4]
    e7c2:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    e7c6:	6861      	ldr	r1, [r4, #4]
    e7c8:	7820      	ldrb	r0, [r4, #0]
    e7ca:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    e7ce:	6861      	ldr	r1, [r4, #4]
    e7d0:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    e7d4:	6860      	ldr	r0, [r4, #4]
    e7d6:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    e7da:	6864      	ldr	r4, [r4, #4]
    e7dc:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    e7e0:	2300      	movs	r3, #0
    e7e2:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    e7e6:	461a      	mov	r2, r3
    e7e8:	4619      	mov	r1, r3
    e7ea:	4620      	mov	r0, r4
    e7ec:	9500      	str	r5, [sp, #0]
    e7ee:	f7f8 ffc7 	bl	7780 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    e7f2:	b120      	cbz	r0, e7fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    e7f4:	f240 2117 	movw	r1, #535	; 0x217
    e7f8:	2030      	movs	r0, #48	; 0x30
    e7fa:	f7f5 fb27 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7fe:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    e802:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e806:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    e80a:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    e80e:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    e812:	f504 7498 	add.w	r4, r4, #304	; 0x130
    e816:	7665      	strb	r5, [r4, #25]
    e818:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    e81c:	1e40      	subs	r0, r0, #1
    e81e:	f824 0cbc 	strh.w	r0, [r4, #-188]
    e822:	86e5      	strh	r5, [r4, #54]	; 0x36
    e824:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e828:	f7ff bede 	b.w	e5e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    e82c:	b510      	push	{r4, lr}
    e82e:	f7f9 f9b3 	bl	7b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    e832:	f242 7110 	movw	r1, #10000	; 0x2710
    e836:	fbb0 f2f1 	udiv	r2, r0, r1
    e83a:	fb01 0012 	mls	r0, r1, r2, r0
    e83e:	bd10      	pop	{r4, pc}
    e840:	b570      	push	{r4, r5, r6, lr}
    e842:	b140      	cbz	r0, e856 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
    e844:	2909      	cmp	r1, #9
    e846:	d248      	bcs.n	e8da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
    e848:	e8df f001 	tbb	[pc, r1]
    e84c:	3b3b1507 	.word	0x3b3b1507
    e850:	3f294737 	.word	0x3f294737
    e854:	0043      	.short	0x0043
    e856:	21cd      	movs	r1, #205	; 0xcd
    e858:	e03c      	b.n	e8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e85a:	4604      	mov	r4, r0
    e85c:	f7f7 ffb2 	bl	67c4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    e860:	b110      	cbz	r0, e868 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
    e862:	f240 2175 	movw	r1, #629	; 0x275
    e866:	e035      	b.n	e8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e868:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    e86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e870:	38f8      	subs	r0, #248	; 0xf8
    e872:	f7f3 bec9 	b.w	2608 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    e876:	4605      	mov	r5, r0
    e878:	f7ff fbcf 	bl	e01a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e87c:	b9a8      	cbnz	r0, e8aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
    e87e:	4628      	mov	r0, r5
    e880:	f7ff fe7b 	bl	e57a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    e884:	4604      	mov	r4, r0
    e886:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    e88a:	42a0      	cmp	r0, r4
    e88c:	d20b      	bcs.n	e8a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    e88e:	1a20      	subs	r0, r4, r0
    e890:	2104      	movs	r1, #4
    e892:	f7f2 fdd9 	bl	1448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e896:	b130      	cbz	r0, e8a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    e898:	4628      	mov	r0, r5
    e89a:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    e89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8a2:	f7ff bb8f 	b.w	dfc4 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    e8a6:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    e8aa:	4628      	mov	r0, r5
    e8ac:	f7f7 ffa6 	bl	67fc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    e8b0:	2800      	cmp	r0, #0
    e8b2:	d014      	beq.n	e8de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
    e8b4:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    e8b8:	e00c      	b.n	e8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8be:	f7fc bc25 	b.w	b10c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e8c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8c6:	f7ff bdf4 	b.w	e4b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    e8ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8ce:	f7ff be4b 	b.w	e568 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    e8d2:	21ed      	movs	r1, #237	; 0xed
    e8d4:	2030      	movs	r0, #48	; 0x30
    e8d6:	f7f5 fab9 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8da:	21f1      	movs	r1, #241	; 0xf1
    e8dc:	e7fa      	b.n	e8d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    e8de:	bd70      	pop	{r4, r5, r6, pc}
    e8e0:	b510      	push	{r4, lr}
    e8e2:	0004      	movs	r4, r0
    e8e4:	d008      	beq.n	e8f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
    e8e6:	2909      	cmp	r1, #9
    e8e8:	d25c      	bcs.n	e9a4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
    e8ea:	e8df f001 	tbb	[pc, r1]
    e8ee:	3607      	.short	0x3607
    e8f0:	5b3a3e3e 	.word	0x5b3a3e3e
    e8f4:	00574a43 	.word	0x00574a43
    e8f8:	2196      	movs	r1, #150	; 0x96
    e8fa:	e050      	b.n	e99e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e8fc:	2100      	movs	r1, #0
    e8fe:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    e902:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    e906:	4620      	mov	r0, r4
    e908:	b189      	cbz	r1, e92e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
    e90a:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    e90e:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    e912:	428a      	cmp	r2, r1
    e914:	d106      	bne.n	e924 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
    e916:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    e91a:	1a51      	subs	r1, r2, r1
    e91c:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e920:	4611      	mov	r1, r2
    e922:	e00d      	b.n	e940 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    e924:	1a51      	subs	r1, r2, r1
    e926:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e92a:	b291      	uxth	r1, r2
    e92c:	e008      	b.n	e940 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    e92e:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e932:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    e936:	1a89      	subs	r1, r1, r2
    e938:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e93c:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e940:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    e944:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    e948:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    e94c:	f7f9 fb40 	bl	7fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e950:	4620      	mov	r0, r4
    e952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e956:	f7f9 b929 	b.w	7bac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    e95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e95e:	f000 b905 	b.w	eb6c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e966:	f7fc bbd1 	b.w	b10c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e96a:	4620      	mov	r0, r4
    e96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e970:	f000 b827 	b.w	e9c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
    e974:	2001      	movs	r0, #1
    e976:	f7f2 fd57 	bl	1428 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e97a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e97e:	f7fe bcbe 	b.w	d2fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    e982:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e986:	2804      	cmp	r0, #4
    e988:	d001      	beq.n	e98e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    e98a:	21b8      	movs	r1, #184	; 0xb8
    e98c:	e007      	b.n	e99e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e98e:	4620      	mov	r0, r4
    e990:	f7ff fef5 	bl	e77e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    e994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e998:	f7f7 bbe4 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e99c:	21c1      	movs	r1, #193	; 0xc1
    e99e:	2030      	movs	r0, #48	; 0x30
    e9a0:	f7f5 fa54 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a4:	21c5      	movs	r1, #197	; 0xc5
    e9a6:	e7fa      	b.n	e99e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    e9a8:	b510      	push	{r4, lr}
    e9aa:	f001 f99c 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e9ae:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e9b2:	4408      	add	r0, r1
    e9b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e9b8:	fbb0 f0f1 	udiv	r0, r0, r1
    e9bc:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    e9c0:	bd10      	pop	{r4, pc}
    e9c2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e9c4:	4604      	mov	r4, r0
    e9c6:	f7fd f93b 	bl	bc40 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e9ca:	4601      	mov	r1, r0
    e9cc:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e9d0:	f7f2 fe3e 	bl	1650 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e9d4:	68e1      	ldr	r1, [r4, #12]
    e9d6:	b111      	cbz	r1, e9de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
    e9d8:	fbb0 f0f1 	udiv	r0, r0, r1
    e9dc:	e000      	b.n	e9e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
    e9de:	2000      	movs	r0, #0
    e9e0:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    e9e4:	290d      	cmp	r1, #13
    e9e6:	d00c      	beq.n	ea02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
    e9e8:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    e9ec:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e9f0:	1813      	adds	r3, r2, r0
    e9f2:	1acb      	subs	r3, r1, r3
    e9f4:	b21b      	sxth	r3, r3
    e9f6:	2b00      	cmp	r3, #0
    e9f8:	db06      	blt.n	ea08 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
    e9fa:	1c49      	adds	r1, r1, #1
    e9fc:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    ea00:	e006      	b.n	ea10 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
    ea02:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    ea06:	e012      	b.n	ea2e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    ea08:	1c40      	adds	r0, r0, #1
    ea0a:	4410      	add	r0, r2
    ea0c:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    ea10:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    ea14:	f88d 0000 	strb.w	r0, [sp]
    ea18:	9800      	ldr	r0, [sp, #0]
    ea1a:	9000      	str	r0, [sp, #0]
    ea1c:	f89d 0000 	ldrb.w	r0, [sp]
    ea20:	b940      	cbnz	r0, ea34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    ea22:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    ea26:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    ea2a:	4288      	cmp	r0, r1
    ea2c:	d102      	bne.n	ea34 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    ea2e:	1c40      	adds	r0, r0, #1
    ea30:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    ea34:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    ea38:	1c40      	adds	r0, r0, #1
    ea3a:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    ea3e:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    ea42:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    ea46:	1a40      	subs	r0, r0, r1
    ea48:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ea4c:	1e40      	subs	r0, r0, #1
    ea4e:	4408      	add	r0, r1
    ea50:	b285      	uxth	r5, r0
    ea52:	e026      	b.n	eaa2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    ea54:	a801      	add	r0, sp, #4
    ea56:	2300      	movs	r3, #0
    ea58:	9000      	str	r0, [sp, #0]
    ea5a:	461a      	mov	r2, r3
    ea5c:	4620      	mov	r0, r4
    ea5e:	f7f8 fe8f 	bl	7780 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ea62:	2800      	cmp	r0, #0
    ea64:	d038      	beq.n	ead8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
    ea66:	2801      	cmp	r0, #1
    ea68:	d004      	beq.n	ea74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
    ea6a:	f240 614e 	movw	r1, #1614	; 0x64e
    ea6e:	2030      	movs	r0, #48	; 0x30
    ea70:	f7f5 f9ec 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea74:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    ea78:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    ea7c:	1a42      	subs	r2, r0, r1
    ea7e:	b212      	sxth	r2, r2
    ea80:	2a00      	cmp	r2, #0
    ea82:	da09      	bge.n	ea98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    ea84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ea88:	4402      	add	r2, r0
    ea8a:	1aaa      	subs	r2, r5, r2
    ea8c:	b212      	sxth	r2, r2
    ea8e:	2a00      	cmp	r2, #0
    ea90:	da02      	bge.n	ea98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    ea92:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    ea96:	e004      	b.n	eaa2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    ea98:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ea9c:	4408      	add	r0, r1
    ea9e:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    eaa2:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    eaa6:	1a68      	subs	r0, r5, r1
    eaa8:	b200      	sxth	r0, r0
    eaaa:	2800      	cmp	r0, #0
    eaac:	dad2      	bge.n	ea54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
    eaae:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    eab2:	b178      	cbz	r0, ead4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
    eab4:	2008      	movs	r0, #8
    eab6:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    eaba:	2001      	movs	r0, #1
    eabc:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    eac0:	4620      	mov	r0, r4
    eac2:	f000 f855 	bl	eb70 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    eac6:	4620      	mov	r0, r4
    eac8:	f7ff fe59 	bl	e77e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    eacc:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    ead0:	f7f7 bb48 	b.w	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ead4:	203e      	movs	r0, #62	; 0x3e
    ead6:	e7ee      	b.n	eab6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
    ead8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    eada:	01f4      	.short	0x01f4
    eadc:	009600fa 	.word	0x009600fa
    eae0:	004b0064 	.word	0x004b0064
    eae4:	001e0032 	.word	0x001e0032
    eae8:	000a0014 	.word	0x000a0014
    eaec:	00020005 	.word	0x00020005
    eaf0:	0001      	.short	0x0001
    eaf2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    eaf6:	f001 0307 	and.w	r3, r1, #7
    eafa:	7802      	ldrb	r2, [r0, #0]
    eafc:	2101      	movs	r1, #1
    eafe:	4099      	lsls	r1, r3
    eb00:	438a      	bics	r2, r1
    eb02:	7002      	strb	r2, [r0, #0]
    eb04:	4770      	bx	lr

0000eb06 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    eb06:	b510      	push	{r4, lr}
    eb08:	4604      	mov	r4, r0
    eb0a:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    eb0e:	68e1      	ldr	r1, [r4, #12]
    eb10:	4288      	cmp	r0, r1
    eb12:	d109      	bne.n	eb28 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    eb14:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    eb18:	8aa2      	ldrh	r2, [r4, #20]
    eb1a:	4291      	cmp	r1, r2
    eb1c:	d104      	bne.n	eb28 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    eb1e:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    eb22:	8ae2      	ldrh	r2, [r4, #22]
    eb24:	4291      	cmp	r1, r2
    eb26:	d013      	beq.n	eb50 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    eb28:	8821      	ldrh	r1, [r4, #0]
    eb2a:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    eb2e:	f7fe fc6d 	bl	d40c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    eb32:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    eb36:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    eb3a:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    eb3e:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    eb42:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    eb46:	2001      	movs	r0, #1
    eb48:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    eb4c:	f7f7 fb0a 	bl	6164 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eb50:	2102      	movs	r1, #2
    eb52:	4620      	mov	r0, r4
    eb54:	f7f7 f8b8 	bl	5cc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    eb58:	2000      	movs	r0, #0
    eb5a:	f804 0f7e 	strb.w	r0, [r4, #126]!
    eb5e:	2003      	movs	r0, #3
    eb60:	70e0      	strb	r0, [r4, #3]
    eb62:	bd10      	pop	{r4, pc}

0000eb64 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    eb64:	f7f5 bd18 	b.w	4598 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000eb68 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    eb68:	2000      	movs	r0, #0
    eb6a:	4770      	bx	lr

0000eb6c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    eb6c:	f7f6 ba4c 	b.w	5008 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000eb70 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    eb70:	2100      	movs	r1, #0
    eb72:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    eb76:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    eb7a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    eb7e:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    eb82:	b109      	cbz	r1, eb88 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    eb84:	2102      	movs	r1, #2
    eb86:	e000      	b.n	eb8a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    eb88:	2103      	movs	r1, #3
    eb8a:	f7f8 bcc9 	b.w	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    eb8e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    eb92:	28fe      	cmp	r0, #254	; 0xfe
    eb94:	d001      	beq.n	eb9a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    eb96:	2001      	movs	r0, #1
    eb98:	4770      	bx	lr
    eb9a:	2000      	movs	r0, #0
    eb9c:	4770      	bx	lr
    eb9e:	b510      	push	{r4, lr}
    eba0:	2801      	cmp	r0, #1
    eba2:	d006      	beq.n	ebb2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eba4:	2802      	cmp	r0, #2
    eba6:	d004      	beq.n	ebb2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    eba8:	f240 2163 	movw	r1, #611	; 0x263
    ebac:	2006      	movs	r0, #6
    ebae:	f7f5 f94d 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebb2:	bd10      	pop	{r4, pc}
    ebb4:	2801      	cmp	r0, #1
    ebb6:	d002      	beq.n	ebbe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    ebb8:	2802      	cmp	r0, #2
    ebba:	d105      	bne.n	ebc8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ebbc:	e002      	b.n	ebc4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    ebbe:	2901      	cmp	r1, #1
    ebc0:	d004      	beq.n	ebcc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ebc2:	e001      	b.n	ebc8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    ebc4:	2902      	cmp	r1, #2
    ebc6:	d001      	beq.n	ebcc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    ebc8:	2000      	movs	r0, #0
    ebca:	4770      	bx	lr
    ebcc:	2001      	movs	r0, #1
    ebce:	4770      	bx	lr
    ebd0:	1a40      	subs	r0, r0, r1
    ebd2:	b200      	sxth	r0, r0
    ebd4:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    ebd8:	4288      	cmp	r0, r1
    ebda:	dc01      	bgt.n	ebe0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    ebdc:	2800      	cmp	r0, #0
    ebde:	dc01      	bgt.n	ebe4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    ebe0:	2001      	movs	r0, #1
    ebe2:	4770      	bx	lr
    ebe4:	2000      	movs	r0, #0
    ebe6:	4770      	bx	lr
    ebe8:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ebec:	f001 0107 	and.w	r1, r1, #7
    ebf0:	7800      	ldrb	r0, [r0, #0]
    ebf2:	2201      	movs	r2, #1
    ebf4:	408a      	lsls	r2, r1
    ebf6:	4010      	ands	r0, r2
    ebf8:	40c8      	lsrs	r0, r1
    ebfa:	4770      	bx	lr
    ebfc:	b118      	cbz	r0, ec06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ebfe:	2802      	cmp	r0, #2
    ec00:	d001      	beq.n	ec06 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    ec02:	2001      	movs	r0, #1
    ec04:	4770      	bx	lr
    ec06:	2000      	movs	r0, #0
    ec08:	4770      	bx	lr

0000ec0a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    ec0a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ec0c:	7881      	ldrb	r1, [r0, #2]
    ec0e:	4604      	mov	r4, r0
    ec10:	291a      	cmp	r1, #26
    ec12:	d025      	beq.n	ec60 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    ec14:	dc0e      	bgt.n	ec34 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    ec16:	2916      	cmp	r1, #22
    ec18:	d22d      	bcs.n	ec76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec1a:	e8df f001 	tbb	[pc, r1]
    ec1e:	2c2c      	.short	0x2c2c
    ec20:	212c2c2c 	.word	0x212c2c2c
    ec24:	2c2c2c2c 	.word	0x2c2c2c2c
    ec28:	2c2c2c2c 	.word	0x2c2c2c2c
    ec2c:	2c2c2c2c 	.word	0x2c2c2c2c
    ec30:	2121212c 	.word	0x2121212c
    ec34:	292a      	cmp	r1, #42	; 0x2a
    ec36:	d01e      	beq.n	ec76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec38:	dc0b      	bgt.n	ec52 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    ec3a:	f1a1 011e 	sub.w	r1, r1, #30
    ec3e:	290c      	cmp	r1, #12
    ec40:	d219      	bcs.n	ec76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec42:	e8df f001 	tbb	[pc, r1]
    ec46:	1818      	.short	0x1818
    ec48:	18181818 	.word	0x18181818
    ec4c:	18181818 	.word	0x18181818
    ec50:	0d18      	.short	0x0d18
    ec52:	393a      	subs	r1, #58	; 0x3a
    ec54:	2904      	cmp	r1, #4
    ec56:	d20e      	bcs.n	ec76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec58:	e8df f001 	tbb	[pc, r1]
    ec5c:	020d020d 	.word	0x020d020d
    ec60:	8820      	ldrh	r0, [r4, #0]
    ec62:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ec66:	d206      	bcs.n	ec76 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec68:	2701      	movs	r7, #1
    ec6a:	4669      	mov	r1, sp
    ec6c:	f7fe fbbd 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ec70:	b118      	cbz	r0, ec7a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ec72:	2002      	movs	r0, #2
    ec74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec76:	2012      	movs	r0, #18
    ec78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec7a:	9d01      	ldr	r5, [sp, #4]
    ec7c:	4668      	mov	r0, sp
    ec7e:	462e      	mov	r6, r5
    ec80:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    ec84:	f206 1679 	addw	r6, r6, #377	; 0x179
    ec88:	f000 fe8d 	bl	f9a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    ec8c:	b138      	cbz	r0, ec9e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    ec8e:	7828      	ldrb	r0, [r5, #0]
    ec90:	f88d 0008 	strb.w	r0, [sp, #8]
    ec94:	9802      	ldr	r0, [sp, #8]
    ec96:	9002      	str	r0, [sp, #8]
    ec98:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ec9c:	b108      	cbz	r0, eca2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    ec9e:	200c      	movs	r0, #12
    eca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eca2:	702f      	strb	r7, [r5, #0]
    eca4:	78a0      	ldrb	r0, [r4, #2]
    eca6:	7030      	strb	r0, [r6, #0]
    eca8:	4668      	mov	r0, sp
    ecaa:	f7fe ff36 	bl	db1a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ecae:	2000      	movs	r0, #0
    ecb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ecb2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ecb2:	b510      	push	{r4, lr}
    ecb4:	4604      	mov	r4, r0
    ecb6:	7800      	ldrb	r0, [r0, #0]
    ecb8:	b118      	cbz	r0, ecc2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ecba:	2801      	cmp	r0, #1
    ecbc:	d001      	beq.n	ecc2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ecbe:	2012      	movs	r0, #18
    ecc0:	bd10      	pop	{r4, pc}
    ecc2:	f000 fe9e 	bl	fa02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    ecc6:	b120      	cbz	r0, ecd2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ecc8:	f7f6 fdf0 	bl	58ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eccc:	b108      	cbz	r0, ecd2 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ecce:	200c      	movs	r0, #12
    ecd0:	bd10      	pop	{r4, pc}
    ecd2:	7820      	ldrb	r0, [r4, #0]
    ecd4:	f7ff ff92 	bl	ebfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ecd8:	1de2      	adds	r2, r4, #7
    ecda:	f104 0317 	add.w	r3, r4, #23
    ecde:	1c61      	adds	r1, r4, #1
    ece0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ece4:	f7f6 be14 	b.w	5910 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ece8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ece8:	b510      	push	{r4, lr}
    ecea:	4604      	mov	r4, r0
    ecec:	f000 fef2 	bl	fad4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    ecf0:	b108      	cbz	r0, ecf6 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ecf2:	200c      	movs	r0, #12
    ecf4:	bd10      	pop	{r4, pc}
    ecf6:	7820      	ldrb	r0, [r4, #0]
    ecf8:	b118      	cbz	r0, ed02 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ecfa:	2801      	cmp	r0, #1
    ecfc:	d001      	beq.n	ed02 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ecfe:	2012      	movs	r0, #18
    ed00:	bd10      	pop	{r4, pc}
    ed02:	f7ff ff7b 	bl	ebfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ed06:	1c61      	adds	r1, r4, #1
    ed08:	f7f6 fe7a 	bl	5a00 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ed0c:	b108      	cbz	r0, ed12 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ed0e:	2000      	movs	r0, #0
    ed10:	bd10      	pop	{r4, pc}
    ed12:	2007      	movs	r0, #7
    ed14:	bd10      	pop	{r4, pc}

0000ed16 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ed16:	b510      	push	{r4, lr}
    ed18:	f000 fe73 	bl	fa02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    ed1c:	b120      	cbz	r0, ed28 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ed1e:	f7f6 fdc5 	bl	58ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ed22:	b108      	cbz	r0, ed28 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ed24:	200c      	movs	r0, #12
    ed26:	bd10      	pop	{r4, pc}
    ed28:	f7f6 fe38 	bl	599c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ed2c:	2000      	movs	r0, #0
    ed2e:	bd10      	pop	{r4, pc}

0000ed30 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ed30:	b510      	push	{r4, lr}
    ed32:	f000 fecf 	bl	fad4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    ed36:	b108      	cbz	r0, ed3c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ed38:	200c      	movs	r0, #12
    ed3a:	bd10      	pop	{r4, pc}
    ed3c:	f7f6 fe88 	bl	5a50 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ed40:	2000      	movs	r0, #0
    ed42:	bd10      	pop	{r4, pc}

0000ed44 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ed44:	b510      	push	{r4, lr}
    ed46:	460b      	mov	r3, r1
    ed48:	2201      	movs	r2, #1
    ed4a:	f100 0110 	add.w	r1, r0, #16
    ed4e:	f7fe fb2e 	bl	d3ae <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ed52:	2000      	movs	r0, #0
    ed54:	bd10      	pop	{r4, pc}

0000ed56 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    ed56:	b510      	push	{r4, lr}
    ed58:	8800      	ldrh	r0, [r0, #0]
    ed5a:	2100      	movs	r1, #0
    ed5c:	f7fe f8fd 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed60:	b118      	cbz	r0, ed6a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    ed62:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    ed66:	b111      	cbz	r1, ed6e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    ed68:	e007      	b.n	ed7a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    ed6a:	2002      	movs	r0, #2
    ed6c:	bd10      	pop	{r4, pc}
    ed6e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    ed72:	2914      	cmp	r1, #20
    ed74:	d003      	beq.n	ed7e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ed76:	2915      	cmp	r1, #21
    ed78:	d001      	beq.n	ed7e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    ed7a:	200c      	movs	r0, #12
    ed7c:	bd10      	pop	{r4, pc}
    ed7e:	2102      	movs	r1, #2
    ed80:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    ed84:	2000      	movs	r0, #0
    ed86:	bd10      	pop	{r4, pc}

0000ed88 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    ed88:	b538      	push	{r3, r4, r5, lr}
    ed8a:	4605      	mov	r5, r0
    ed8c:	8800      	ldrh	r0, [r0, #0]
    ed8e:	2100      	movs	r1, #0
    ed90:	f7fe f8e3 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed94:	0004      	movs	r4, r0
    ed96:	d003      	beq.n	eda0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    ed98:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    ed9c:	b110      	cbz	r0, eda4 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    ed9e:	e010      	b.n	edc2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    eda0:	2002      	movs	r0, #2
    eda2:	bd38      	pop	{r3, r4, r5, pc}
    eda4:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    eda8:	2814      	cmp	r0, #20
    edaa:	d001      	beq.n	edb0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    edac:	2815      	cmp	r0, #21
    edae:	d108      	bne.n	edc2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    edb0:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    edb4:	f88d 0000 	strb.w	r0, [sp]
    edb8:	9800      	ldr	r0, [sp, #0]
    edba:	9000      	str	r0, [sp, #0]
    edbc:	f89d 0000 	ldrb.w	r0, [sp]
    edc0:	b108      	cbz	r0, edc6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    edc2:	200c      	movs	r0, #12
    edc4:	bd38      	pop	{r3, r4, r5, pc}
    edc6:	2210      	movs	r2, #16
    edc8:	1ca9      	adds	r1, r5, #2
    edca:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    edce:	f7fd f8ac 	bl	bf2a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    edd2:	2001      	movs	r0, #1
    edd4:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    edd8:	2000      	movs	r0, #0
    edda:	bd38      	pop	{r3, r4, r5, pc}

0000eddc <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    eddc:	b510      	push	{r4, lr}
    edde:	2108      	movs	r1, #8
    ede0:	f7f5 f8ce 	bl	3f80 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ede4:	2000      	movs	r0, #0
    ede6:	bd10      	pop	{r4, pc}

0000ede8 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    ede8:	b510      	push	{r4, lr}
    edea:	4604      	mov	r4, r0
    edec:	f000 fdf2 	bl	f9d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    edf0:	f7ff f91d 	bl	e02e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    edf4:	7020      	strb	r0, [r4, #0]
    edf6:	2000      	movs	r0, #0
    edf8:	bd10      	pop	{r4, pc}

0000edfa <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    edfa:	b510      	push	{r4, lr}
    edfc:	4604      	mov	r4, r0
    edfe:	f000 fdcc 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ee02:	b140      	cbz	r0, ee16 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    ee04:	20fb      	movs	r0, #251	; 0xfb
    ee06:	8020      	strh	r0, [r4, #0]
    ee08:	f640 0148 	movw	r1, #2120	; 0x848
    ee0c:	8061      	strh	r1, [r4, #2]
    ee0e:	80a0      	strh	r0, [r4, #4]
    ee10:	80e1      	strh	r1, [r4, #6]
    ee12:	2000      	movs	r0, #0
    ee14:	bd10      	pop	{r4, pc}
    ee16:	2001      	movs	r0, #1
    ee18:	bd10      	pop	{r4, pc}

0000ee1a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    ee1a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ee1c:	460d      	mov	r5, r1
    ee1e:	4606      	mov	r6, r0
    ee20:	f7fb fb4c 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ee24:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ee28:	b300      	cbz	r0, ee6c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    ee2a:	8830      	ldrh	r0, [r6, #0]
    ee2c:	4669      	mov	r1, sp
    ee2e:	f7fe fadc 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ee32:	2800      	cmp	r0, #0
    ee34:	d119      	bne.n	ee6a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    ee36:	9c01      	ldr	r4, [sp, #4]
    ee38:	2700      	movs	r7, #0
    ee3a:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    ee3e:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    ee42:	f000 fc46 	bl	f6d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    ee46:	70a8      	strb	r0, [r5, #2]
    ee48:	7860      	ldrb	r0, [r4, #1]
    ee4a:	f000 fc42 	bl	f6d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    ee4e:	70e8      	strb	r0, [r5, #3]
    ee50:	78a0      	ldrb	r0, [r4, #2]
    ee52:	f88d 0008 	strb.w	r0, [sp, #8]
    ee56:	9802      	ldr	r0, [sp, #8]
    ee58:	9002      	str	r0, [sp, #8]
    ee5a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ee5e:	3c6a      	subs	r4, #106	; 0x6a
    ee60:	2800      	cmp	r0, #0
    ee62:	d1ea      	bne.n	ee3a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    ee64:	8830      	ldrh	r0, [r6, #0]
    ee66:	8028      	strh	r0, [r5, #0]
    ee68:	2000      	movs	r0, #0
    ee6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ee6c:	2001      	movs	r0, #1
    ee6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ee70 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    ee70:	2108      	movs	r1, #8
    ee72:	7001      	strb	r1, [r0, #0]
    ee74:	2000      	movs	r0, #0
    ee76:	4770      	bx	lr

0000ee78 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    ee78:	b510      	push	{r4, lr}
    ee7a:	4604      	mov	r4, r0
    ee7c:	20d8      	movs	r0, #216	; 0xd8
    ee7e:	7020      	strb	r0, [r4, #0]
    ee80:	f000 fd6c 	bl	f95c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    ee84:	7060      	strb	r0, [r4, #1]
    ee86:	2000      	movs	r0, #0
    ee88:	bd10      	pop	{r4, pc}

0000ee8a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ee8a:	2108      	movs	r1, #8
    ee8c:	7001      	strb	r1, [r0, #0]
    ee8e:	2000      	movs	r0, #0
    ee90:	4770      	bx	lr

0000ee92 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ee92:	b510      	push	{r4, lr}
    ee94:	4604      	mov	r4, r0
    ee96:	7800      	ldrb	r0, [r0, #0]
    ee98:	b108      	cbz	r0, ee9e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ee9a:	2801      	cmp	r0, #1
    ee9c:	d110      	bne.n	eec0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ee9e:	f000 fdb0 	bl	fa02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    eea2:	b120      	cbz	r0, eeae <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    eea4:	f7f6 fd02 	bl	58ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    eea8:	b108      	cbz	r0, eeae <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    eeaa:	200c      	movs	r0, #12
    eeac:	bd10      	pop	{r4, pc}
    eeae:	7820      	ldrb	r0, [r4, #0]
    eeb0:	f7ff fea4 	bl	ebfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eeb4:	1c61      	adds	r1, r4, #1
    eeb6:	f7fe fa60 	bl	d37a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    eeba:	b108      	cbz	r0, eec0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    eebc:	2000      	movs	r0, #0
    eebe:	bd10      	pop	{r4, pc}
    eec0:	2012      	movs	r0, #18
    eec2:	bd10      	pop	{r4, pc}

0000eec4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    eec4:	b510      	push	{r4, lr}
    eec6:	4604      	mov	r4, r0
    eec8:	f000 fe04 	bl	fad4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    eecc:	b108      	cbz	r0, eed2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    eece:	200c      	movs	r0, #12
    eed0:	bd10      	pop	{r4, pc}
    eed2:	7820      	ldrb	r0, [r4, #0]
    eed4:	b108      	cbz	r0, eeda <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    eed6:	2801      	cmp	r0, #1
    eed8:	d107      	bne.n	eeea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    eeda:	f7ff fe8f 	bl	ebfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    eede:	1c61      	adds	r1, r4, #1
    eee0:	f7fe fa5a 	bl	d398 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    eee4:	b108      	cbz	r0, eeea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    eee6:	2000      	movs	r0, #0
    eee8:	bd10      	pop	{r4, pc}
    eeea:	2012      	movs	r0, #18
    eeec:	bd10      	pop	{r4, pc}

0000eeee <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    eeee:	b510      	push	{r4, lr}
    eef0:	4604      	mov	r4, r0
    eef2:	f000 fd86 	bl	fa02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    eef6:	b108      	cbz	r0, eefc <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    eef8:	200c      	movs	r0, #12
    eefa:	bd10      	pop	{r4, pc}
    eefc:	7820      	ldrb	r0, [r4, #0]
    eefe:	f000 0001 	and.w	r0, r0, #1
    ef02:	f7f6 fccd 	bl	58a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ef06:	2000      	movs	r0, #0
    ef08:	bd10      	pop	{r4, pc}

0000ef0a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    ef0a:	b51c      	push	{r2, r3, r4, lr}
    ef0c:	4604      	mov	r4, r0
    ef0e:	f000 fd61 	bl	f9d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    ef12:	2000      	movs	r0, #0
    ef14:	f88d 0002 	strb.w	r0, [sp, #2]
    ef18:	2103      	movs	r1, #3
    ef1a:	f88d 1001 	strb.w	r1, [sp, #1]
    ef1e:	f814 1b01 	ldrb.w	r1, [r4], #1
    ef22:	f88d 1003 	strb.w	r1, [sp, #3]
    ef26:	f88d 0000 	strb.w	r0, [sp]
    ef2a:	4668      	mov	r0, sp
    ef2c:	9401      	str	r4, [sp, #4]
    ef2e:	f000 f9f8 	bl	f322 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    ef32:	bd1c      	pop	{r2, r3, r4, pc}

0000ef34 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    ef34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ef36:	4605      	mov	r5, r0
    ef38:	f000 fd4c 	bl	f9d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    ef3c:	4606      	mov	r6, r0
    ef3e:	7828      	ldrb	r0, [r5, #0]
    ef40:	2400      	movs	r4, #0
    ef42:	b160      	cbz	r0, ef5e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    ef44:	f88d 4000 	strb.w	r4, [sp]
    ef48:	2001      	movs	r0, #1
    ef4a:	f10d 0101 	add.w	r1, sp, #1
    ef4e:	f7f5 fe7b 	bl	4c48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ef52:	b120      	cbz	r0, ef5e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    ef54:	4668      	mov	r0, sp
    ef56:	f000 f897 	bl	f088 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    ef5a:	2800      	cmp	r0, #0
    ef5c:	d112      	bne.n	ef84 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    ef5e:	f88d 400c 	strb.w	r4, [sp, #12]
    ef62:	4630      	mov	r0, r6
    ef64:	f7ff f859 	bl	e01a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    ef68:	b118      	cbz	r0, ef72 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    ef6a:	2080      	movs	r0, #128	; 0x80
    ef6c:	f8ad 000d 	strh.w	r0, [sp, #13]
    ef70:	e001      	b.n	ef76 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    ef72:	f8ad 400d 	strh.w	r4, [sp, #13]
    ef76:	f88d 400f 	strb.w	r4, [sp, #15]
    ef7a:	7828      	ldrb	r0, [r5, #0]
    ef7c:	2801      	cmp	r0, #1
    ef7e:	d003      	beq.n	ef88 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    ef80:	b138      	cbz	r0, ef92 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    ef82:	2012      	movs	r0, #18
    ef84:	b004      	add	sp, #16
    ef86:	bd70      	pop	{r4, r5, r6, pc}
    ef88:	a903      	add	r1, sp, #12
    ef8a:	4630      	mov	r0, r6
    ef8c:	f7fb f896 	bl	a0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    ef90:	e7f8      	b.n	ef84 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    ef92:	4630      	mov	r0, r6
    ef94:	f000 fd3c 	bl	fa10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    ef98:	e7f4      	b.n	ef84 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000ef9a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    ef9a:	b530      	push	{r4, r5, lr}
    ef9c:	b08b      	sub	sp, #44	; 0x2c
    ef9e:	4604      	mov	r4, r0
    efa0:	f000 fd18 	bl	f9d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    efa4:	4602      	mov	r2, r0
    efa6:	7920      	ldrb	r0, [r4, #4]
    efa8:	2804      	cmp	r0, #4
    efaa:	d803      	bhi.n	efb4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    efac:	8860      	ldrh	r0, [r4, #2]
    efae:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    efb2:	d902      	bls.n	efba <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    efb4:	2012      	movs	r0, #18
    efb6:	b00b      	add	sp, #44	; 0x2c
    efb8:	bd30      	pop	{r4, r5, pc}
    efba:	2500      	movs	r5, #0
    efbc:	f88d 5004 	strb.w	r5, [sp, #4]
    efc0:	7921      	ldrb	r1, [r4, #4]
    efc2:	9500      	str	r5, [sp, #0]
    efc4:	f89d 0000 	ldrb.w	r0, [sp]
    efc8:	2905      	cmp	r1, #5
    efca:	f040 0010 	orr.w	r0, r0, #16
    efce:	f88d 0000 	strb.w	r0, [sp]
    efd2:	d254      	bcs.n	f07e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    efd4:	e8df f001 	tbb	[pc, r1]
    efd8:	11050803 	.word	0x11050803
    efdc:	000b      	.short	0x000b
    efde:	f040 0001 	orr.w	r0, r0, #1
    efe2:	f040 0002 	orr.w	r0, r0, #2
    efe6:	e006      	b.n	eff6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    efe8:	f040 0009 	orr.w	r0, r0, #9
    efec:	e001      	b.n	eff2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    efee:	f040 0001 	orr.w	r0, r0, #1
    eff2:	f040 0004 	orr.w	r0, r0, #4
    eff6:	f88d 0000 	strb.w	r0, [sp]
    effa:	f8bd 0000 	ldrh.w	r0, [sp]
    effe:	9000      	str	r0, [sp, #0]
    f000:	f8bd 0000 	ldrh.w	r0, [sp]
    f004:	f8ad 0005 	strh.w	r0, [sp, #5]
    f008:	8821      	ldrh	r1, [r4, #0]
    f00a:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f00e:	f361 201f 	bfi	r0, r1, #8, #24
    f012:	f8cd 0006 	str.w	r0, [sp, #6]
    f016:	8861      	ldrh	r1, [r4, #2]
    f018:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f01c:	f361 201f 	bfi	r0, r1, #8, #24
    f020:	f8cd 0009 	str.w	r0, [sp, #9]
    f024:	7b60      	ldrb	r0, [r4, #13]
    f026:	f88d 000d 	strb.w	r0, [sp, #13]
    f02a:	7960      	ldrb	r0, [r4, #5]
    f02c:	f88d 000e 	strb.w	r0, [sp, #14]
    f030:	79a0      	ldrb	r0, [r4, #6]
    f032:	f88d 000f 	strb.w	r0, [sp, #15]
    f036:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f03a:	9004      	str	r0, [sp, #16]
    f03c:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f040:	f8ad 0014 	strh.w	r0, [sp, #20]
    f044:	7ba0      	ldrb	r0, [r4, #14]
    f046:	f88d 0016 	strb.w	r0, [sp, #22]
    f04a:	207f      	movs	r0, #127	; 0x7f
    f04c:	f88d 0017 	strb.w	r0, [sp, #23]
    f050:	2001      	movs	r0, #1
    f052:	f88d 0018 	strb.w	r0, [sp, #24]
    f056:	f88d 5019 	strb.w	r5, [sp, #25]
    f05a:	f88d 001a 	strb.w	r0, [sp, #26]
    f05e:	f88d 501b 	strb.w	r5, [sp, #27]
    f062:	4610      	mov	r0, r2
    f064:	f7fe fff5 	bl	e052 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f068:	f88d 001c 	strb.w	r0, [sp, #28]
    f06c:	f88d 501d 	strb.w	r5, [sp, #29]
    f070:	f88d 501e 	strb.w	r5, [sp, #30]
    f074:	a909      	add	r1, sp, #36	; 0x24
    f076:	a801      	add	r0, sp, #4
    f078:	f000 f8de 	bl	f238 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f07c:	e79b      	b.n	efb6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f07e:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
    f082:	2039      	movs	r0, #57	; 0x39
    f084:	f7f4 fee2 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f088 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f088:	b570      	push	{r4, r5, r6, lr}
    f08a:	4604      	mov	r4, r0
    f08c:	7800      	ldrb	r0, [r0, #0]
    f08e:	2101      	movs	r1, #1
    f090:	f7fd ff63 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f094:	0005      	movs	r5, r0
    f096:	d007      	beq.n	f0a8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f098:	f7ff f994 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f09c:	b160      	cbz	r0, f0b8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f09e:	4628      	mov	r0, r5
    f0a0:	f7fe ffc1 	bl	e026 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f0a4:	b110      	cbz	r0, f0ac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f0a6:	e005      	b.n	f0b4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f0a8:	2042      	movs	r0, #66	; 0x42
    f0aa:	bd70      	pop	{r4, r5, r6, pc}
    f0ac:	4628      	mov	r0, r5
    f0ae:	f7fe ffb0 	bl	e012 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f0b2:	b108      	cbz	r0, f0b8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f0b4:	200c      	movs	r0, #12
    f0b6:	bd70      	pop	{r4, r5, r6, pc}
    f0b8:	1c61      	adds	r1, r4, #1
    f0ba:	4628      	mov	r0, r5
    f0bc:	f7fe ffc1 	bl	e042 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f0c0:	2000      	movs	r0, #0
    f0c2:	bd70      	pop	{r4, r5, r6, pc}

0000f0c4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f0c4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f0c6:	460d      	mov	r5, r1
    f0c8:	4604      	mov	r4, r0
    f0ca:	f000 fc66 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f0ce:	b130      	cbz	r0, f0de <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f0d0:	88a2      	ldrh	r2, [r4, #4]
    f0d2:	f244 2090 	movw	r0, #17040	; 0x4290
    f0d6:	4282      	cmp	r2, r0
    f0d8:	d903      	bls.n	f0e2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f0da:	2012      	movs	r0, #18
    f0dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f0de:	2001      	movs	r0, #1
    f0e0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f0e2:	f640 0048 	movw	r0, #2120	; 0x848
    f0e6:	4282      	cmp	r2, r0
    f0e8:	d300      	bcc.n	f0ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f0ea:	4602      	mov	r2, r0
    f0ec:	8820      	ldrh	r0, [r4, #0]
    f0ee:	f8ad 0000 	strh.w	r0, [sp]
    f0f2:	8860      	ldrh	r0, [r4, #2]
    f0f4:	f8ad 0002 	strh.w	r0, [sp, #2]
    f0f8:	f8ad 2004 	strh.w	r2, [sp, #4]
    f0fc:	8860      	ldrh	r0, [r4, #2]
    f0fe:	f8ad 0006 	strh.w	r0, [sp, #6]
    f102:	f8ad 2008 	strh.w	r2, [sp, #8]
    f106:	8820      	ldrh	r0, [r4, #0]
    f108:	8028      	strh	r0, [r5, #0]
    f10a:	4668      	mov	r0, sp
    f10c:	f7fb f8a4 	bl	a258 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f110:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f112 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f112:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f114:	4604      	mov	r4, r0
    f116:	f7fb f9d1 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f11a:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f11e:	b1b0      	cbz	r0, f14e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f120:	f10d 0007 	add.w	r0, sp, #7
    f124:	9000      	str	r0, [sp, #0]
    f126:	7922      	ldrb	r2, [r4, #4]
    f128:	78e1      	ldrb	r1, [r4, #3]
    f12a:	78a0      	ldrb	r0, [r4, #2]
    f12c:	f10d 0306 	add.w	r3, sp, #6
    f130:	f000 fc94 	bl	fa5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    f134:	2800      	cmp	r0, #0
    f136:	d109      	bne.n	f14c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f138:	8820      	ldrh	r0, [r4, #0]
    f13a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f13e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f142:	f8ad 0008 	strh.w	r0, [sp, #8]
    f146:	a801      	add	r0, sp, #4
    f148:	f000 f9a6 	bl	f498 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f14c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f14e:	2001      	movs	r0, #1
    f150:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f152 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f152:	b510      	push	{r4, lr}
    f154:	4604      	mov	r4, r0
    f156:	f000 fc54 	bl	fa02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f15a:	b120      	cbz	r0, f166 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f15c:	f7f6 fba6 	bl	58ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f160:	b108      	cbz	r0, f166 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f162:	200c      	movs	r0, #12
    f164:	bd10      	pop	{r4, pc}
    f166:	7820      	ldrb	r0, [r4, #0]
    f168:	f7ff fd48 	bl	ebfc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f16c:	79e2      	ldrb	r2, [r4, #7]
    f16e:	1c61      	adds	r1, r4, #1
    f170:	f7f6 fb4a 	bl	5808 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f174:	b108      	cbz	r0, f17a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f176:	2000      	movs	r0, #0
    f178:	bd10      	pop	{r4, pc}
    f17a:	2002      	movs	r0, #2
    f17c:	bd10      	pop	{r4, pc}

0000f17e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f17e:	b510      	push	{r4, lr}
    f180:	4604      	mov	r4, r0
    f182:	2001      	movs	r0, #1
    f184:	f000 fac8 	bl	f718 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f188:	b128      	cbz	r0, f196 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f18a:	4621      	mov	r1, r4
    f18c:	2001      	movs	r0, #1
    f18e:	f7f5 fd73 	bl	4c78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f192:	2000      	movs	r0, #0
    f194:	bd10      	pop	{r4, pc}
    f196:	200c      	movs	r0, #12
    f198:	bd10      	pop	{r4, pc}

0000f19a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f19a:	b510      	push	{r4, lr}
    f19c:	8800      	ldrh	r0, [r0, #0]
    f19e:	f7f6 fc13 	bl	59c8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f1a2:	b108      	cbz	r0, f1a8 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f1a4:	2000      	movs	r0, #0
    f1a6:	bd10      	pop	{r4, pc}
    f1a8:	2030      	movs	r0, #48	; 0x30
    f1aa:	bd10      	pop	{r4, pc}

0000f1ac <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    f1ac:	b51c      	push	{r2, r3, r4, lr}
    f1ae:	4604      	mov	r4, r0
    f1b0:	f000 fc10 	bl	f9d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f1b4:	2000      	movs	r0, #0
    f1b6:	f88d 0000 	strb.w	r0, [sp]
    f1ba:	f88d 0002 	strb.w	r0, [sp, #2]
    f1be:	2003      	movs	r0, #3
    f1c0:	f88d 0001 	strb.w	r0, [sp, #1]
    f1c4:	f814 0b01 	ldrb.w	r0, [r4], #1
    f1c8:	f88d 0003 	strb.w	r0, [sp, #3]
    f1cc:	4668      	mov	r0, sp
    f1ce:	9401      	str	r4, [sp, #4]
    f1d0:	f000 f910 	bl	f3f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    f1d4:	bd1c      	pop	{r2, r3, r4, pc}

0000f1d6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f1d6:	b51c      	push	{r2, r3, r4, lr}
    f1d8:	4604      	mov	r4, r0
    f1da:	f000 fbde 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f1de:	b178      	cbz	r0, f200 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f1e0:	8820      	ldrh	r0, [r4, #0]
    f1e2:	f8ad 0000 	strh.w	r0, [sp]
    f1e6:	8860      	ldrh	r0, [r4, #2]
    f1e8:	f8ad 0002 	strh.w	r0, [sp, #2]
    f1ec:	8820      	ldrh	r0, [r4, #0]
    f1ee:	f8ad 0004 	strh.w	r0, [sp, #4]
    f1f2:	8860      	ldrh	r0, [r4, #2]
    f1f4:	f8ad 0006 	strh.w	r0, [sp, #6]
    f1f8:	4668      	mov	r0, sp
    f1fa:	f7fb f8b1 	bl	a360 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    f1fe:	bd1c      	pop	{r2, r3, r4, pc}
    f200:	2001      	movs	r0, #1
    f202:	bd1c      	pop	{r2, r3, r4, pc}

0000f204 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f204:	b510      	push	{r4, lr}
    f206:	f7f5 fd5b 	bl	4cc0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f20a:	2000      	movs	r0, #0
    f20c:	bd10      	pop	{r4, pc}

0000f20e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f20e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f210:	460c      	mov	r4, r1
    f212:	4605      	mov	r5, r0
    f214:	f000 fbc1 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f218:	b160      	cbz	r0, f234 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f21a:	4669      	mov	r1, sp
    f21c:	4628      	mov	r0, r5
    f21e:	f7fe f8e4 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f222:	2800      	cmp	r0, #0
    f224:	d105      	bne.n	f232 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f226:	2100      	movs	r1, #0
    f228:	4622      	mov	r2, r4
    f22a:	9801      	ldr	r0, [sp, #4]
    f22c:	f000 fb40 	bl	f8b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    f230:	2000      	movs	r0, #0
    f232:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f234:	2001      	movs	r0, #1
    f236:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f238 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    f238:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f23c:	460f      	mov	r7, r1
    f23e:	4605      	mov	r5, r0
    f240:	7806      	ldrb	r6, [r0, #0]
    f242:	f000 fac5 	bl	f7d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    f246:	2800      	cmp	r0, #0
    f248:	d10a      	bne.n	f260 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f24a:	4628      	mov	r0, r5
    f24c:	f000 fa9a 	bl	f784 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    f250:	2800      	cmp	r0, #0
    f252:	d105      	bne.n	f260 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f254:	2001      	movs	r0, #1
    f256:	f7f4 ffe3 	bl	4220 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f25a:	4286      	cmp	r6, r0
    f25c:	d302      	bcc.n	f264 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    f25e:	2007      	movs	r0, #7
    f260:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f264:	2101      	movs	r1, #1
    f266:	4630      	mov	r0, r6
    f268:	f7fd fe77 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f26c:	0004      	movs	r4, r0
    f26e:	d004      	beq.n	f27a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    f270:	f7ff f8a8 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f274:	b150      	cbz	r0, f28c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    f276:	200c      	movs	r0, #12
    f278:	e7f2      	b.n	f260 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    f27a:	2200      	movs	r2, #0
    f27c:	2101      	movs	r1, #1
    f27e:	4630      	mov	r0, r6
    f280:	f7fd fe61 	bl	cf46 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f284:	0004      	movs	r4, r0
    f286:	d00f      	beq.n	f2a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    f288:	f7fe fe68 	bl	df5c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f28c:	4620      	mov	r0, r4
    f28e:	f7fe fece 	bl	e02e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f292:	7038      	strb	r0, [r7, #0]
    f294:	74e8      	strb	r0, [r5, #19]
    f296:	4629      	mov	r1, r5
    f298:	4620      	mov	r0, r4
    f29a:	f7f7 f9cb 	bl	6634 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    f29e:	4606      	mov	r6, r0
    f2a0:	7e68      	ldrb	r0, [r5, #25]
    f2a2:	b1d0      	cbz	r0, f2da <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f2a4:	b12e      	cbz	r6, f2b2 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    f2a6:	e018      	b.n	f2da <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    f2a8:	f241 212d 	movw	r1, #4653	; 0x122d
    f2ac:	2039      	movs	r0, #57	; 0x39
    f2ae:	f7f4 fdcd 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2b2:	2200      	movs	r2, #0
    f2b4:	4668      	mov	r0, sp
    f2b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f2b8:	f7fd ff10 	bl	d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f2bc:	2200      	movs	r2, #0
    f2be:	2101      	movs	r1, #1
    f2c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f2c2:	f7fd ff80 	bl	d1c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f2c6:	2204      	movs	r2, #4
    f2c8:	4668      	mov	r0, sp
    f2ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f2cc:	f7fd ff06 	bl	d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f2d0:	2200      	movs	r2, #0
    f2d2:	4611      	mov	r1, r2
    f2d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f2d6:	f7fd ff76 	bl	d1c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f2da:	4630      	mov	r0, r6
    f2dc:	e7c0      	b.n	f260 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000f2de <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f2de:	b510      	push	{r4, lr}
    f2e0:	4604      	mov	r4, r0
    f2e2:	2000      	movs	r0, #0
    f2e4:	f000 fa18 	bl	f718 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    f2e8:	b128      	cbz	r0, f2f6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f2ea:	4621      	mov	r1, r4
    f2ec:	2000      	movs	r0, #0
    f2ee:	f7f5 fcc3 	bl	4c78 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f2f2:	2000      	movs	r0, #0
    f2f4:	bd10      	pop	{r4, pc}
    f2f6:	200c      	movs	r0, #12
    f2f8:	bd10      	pop	{r4, pc}

0000f2fa <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f2fa:	b510      	push	{r4, lr}
    f2fc:	7800      	ldrb	r0, [r0, #0]
    f2fe:	f000 0001 	and.w	r0, r0, #1
    f302:	f7f8 f8d3 	bl	74ac <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    f306:	2000      	movs	r0, #0
    f308:	bd10      	pop	{r4, pc}

0000f30a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f30a:	b510      	push	{r4, lr}
    f30c:	4604      	mov	r4, r0
    f30e:	f000 fb44 	bl	f99a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f312:	b120      	cbz	r0, f31e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f314:	4620      	mov	r0, r4
    f316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f31a:	f7fa bf9d 	b.w	a258 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f31e:	2001      	movs	r0, #1
    f320:	bd10      	pop	{r4, pc}

0000f322 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    f322:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f326:	4606      	mov	r6, r0
    f328:	7845      	ldrb	r5, [r0, #1]
    f32a:	7800      	ldrb	r0, [r0, #0]
    f32c:	2101      	movs	r1, #1
    f32e:	f7fd fe14 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f332:	0004      	movs	r4, r0
    f334:	d01e      	beq.n	f374 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    f336:	f7fe fe3d 	bl	dfb4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    f33a:	78f1      	ldrb	r1, [r6, #3]
    f33c:	4281      	cmp	r1, r0
    f33e:	d800      	bhi.n	f342 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    f340:	4608      	mov	r0, r1
    f342:	4607      	mov	r7, r0
    f344:	2d04      	cmp	r5, #4
    f346:	d018      	beq.n	f37a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    f348:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f34a:	f7fd ff5f 	bl	d20c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f34e:	4438      	add	r0, r7
    f350:	b281      	uxth	r1, r0
    f352:	4620      	mov	r0, r4
    f354:	2201      	movs	r2, #1
    f356:	f000 f9f1 	bl	f73c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f35a:	2800      	cmp	r0, #0
    f35c:	d10b      	bne.n	f376 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f35e:	2d03      	cmp	r5, #3
    f360:	d000      	beq.n	f364 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f362:	b1df      	cbz	r7, f39c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f364:	4620      	mov	r0, r4
    f366:	f7fe fe5c 	bl	e022 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f36a:	7871      	ldrb	r1, [r6, #1]
    f36c:	2903      	cmp	r1, #3
    f36e:	d010      	beq.n	f392 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f370:	b9a0      	cbnz	r0, f39c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f372:	e004      	b.n	f37e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    f374:	2042      	movs	r0, #66	; 0x42
    f376:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f37a:	b97f      	cbnz	r7, f39c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f37c:	e7f2      	b.n	f364 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    f37e:	2904      	cmp	r1, #4
    f380:	d107      	bne.n	f392 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    f382:	4620      	mov	r0, r4
    f384:	f7ff f81e 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f388:	b140      	cbz	r0, f39c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f38a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f38c:	f7fd ff0d 	bl	d1aa <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    f390:	b120      	cbz	r0, f39c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    f392:	2d01      	cmp	r5, #1
    f394:	d004      	beq.n	f3a0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f396:	2d03      	cmp	r5, #3
    f398:	d002      	beq.n	f3a0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    f39a:	e00e      	b.n	f3ba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    f39c:	2012      	movs	r0, #18
    f39e:	e7ea      	b.n	f376 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f3a0:	4620      	mov	r0, r4
    f3a2:	f7fe fe3e 	bl	e022 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f3a6:	b108      	cbz	r0, f3ac <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    f3a8:	2200      	movs	r2, #0
    f3aa:	e002      	b.n	f3b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f3ac:	2d01      	cmp	r5, #1
    f3ae:	d013      	beq.n	f3d8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    f3b0:	2201      	movs	r2, #1
    f3b2:	4668      	mov	r0, sp
    f3b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f3b6:	f7fd fe91 	bl	d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f3ba:	2d04      	cmp	r5, #4
    f3bc:	d018      	beq.n	f3f0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f3be:	6872      	ldr	r2, [r6, #4]
    f3c0:	463b      	mov	r3, r7
    f3c2:	2101      	movs	r1, #1
    f3c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3c6:	f7fd febc 	bl	d142 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f3ca:	b138      	cbz	r0, f3dc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    f3cc:	7870      	ldrb	r0, [r6, #1]
    f3ce:	2802      	cmp	r0, #2
    f3d0:	d006      	beq.n	f3e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f3d2:	2803      	cmp	r0, #3
    f3d4:	d004      	beq.n	f3e0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    f3d6:	e00b      	b.n	f3f0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    f3d8:	2202      	movs	r2, #2
    f3da:	e7ea      	b.n	f3b2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    f3dc:	2007      	movs	r0, #7
    f3de:	e7ca      	b.n	f376 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    f3e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3e2:	f7fd ff13 	bl	d20c <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    f3e6:	4602      	mov	r2, r0
    f3e8:	2101      	movs	r1, #1
    f3ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f3ec:	f7fd feeb 	bl	d1c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f3f0:	2000      	movs	r0, #0
    f3f2:	e7c0      	b.n	f376 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000f3f4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    f3f4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f3f8:	4607      	mov	r7, r0
    f3fa:	7845      	ldrb	r5, [r0, #1]
    f3fc:	78c6      	ldrb	r6, [r0, #3]
    f3fe:	7800      	ldrb	r0, [r0, #0]
    f400:	2101      	movs	r1, #1
    f402:	f7fd fdaa 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f406:	0004      	movs	r4, r0
    f408:	d003      	beq.n	f412 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    f40a:	f7fe fe0c 	bl	e026 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f40e:	b118      	cbz	r0, f418 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    f410:	e003      	b.n	f41a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    f412:	2042      	movs	r0, #66	; 0x42
    f414:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f418:	2600      	movs	r6, #0
    f41a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f41c:	f7fd fefa 	bl	d214 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    f420:	4430      	add	r0, r6
    f422:	b281      	uxth	r1, r0
    f424:	4688      	mov	r8, r1
    f426:	4620      	mov	r0, r4
    f428:	2201      	movs	r2, #1
    f42a:	f000 f987 	bl	f73c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    f42e:	2800      	cmp	r0, #0
    f430:	d1f0      	bne.n	f414 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f432:	2d04      	cmp	r5, #4
    f434:	d008      	beq.n	f448 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f436:	2d03      	cmp	r5, #3
    f438:	d00a      	beq.n	f450 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    f43a:	b12e      	cbz	r6, f448 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    f43c:	4620      	mov	r0, r4
    f43e:	f7fe ffc1 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f442:	b118      	cbz	r0, f44c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    f444:	200c      	movs	r0, #12
    f446:	e7e5      	b.n	f414 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f448:	2012      	movs	r0, #18
    f44a:	e7e3      	b.n	f414 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f44c:	2d01      	cmp	r5, #1
    f44e:	d10c      	bne.n	f46a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    f450:	4620      	mov	r0, r4
    f452:	f7fe fde6 	bl	e022 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f456:	b108      	cbz	r0, f45c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    f458:	2204      	movs	r2, #4
    f45a:	e002      	b.n	f462 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f45c:	2d01      	cmp	r5, #1
    f45e:	d010      	beq.n	f482 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    f460:	2205      	movs	r2, #5
    f462:	4668      	mov	r0, sp
    f464:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    f466:	f7fd fe39 	bl	d0dc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    f46a:	687a      	ldr	r2, [r7, #4]
    f46c:	4633      	mov	r3, r6
    f46e:	2100      	movs	r1, #0
    f470:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f472:	f7fd fe66 	bl	d142 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    f476:	b130      	cbz	r0, f486 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    f478:	2d02      	cmp	r5, #2
    f47a:	d006      	beq.n	f48a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f47c:	2d03      	cmp	r5, #3
    f47e:	d004      	beq.n	f48a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    f480:	e008      	b.n	f494 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    f482:	2206      	movs	r2, #6
    f484:	e7ed      	b.n	f462 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    f486:	2007      	movs	r0, #7
    f488:	e7c4      	b.n	f414 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    f48a:	4642      	mov	r2, r8
    f48c:	2100      	movs	r1, #0
    f48e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f490:	f7fd fe99 	bl	d1c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    f494:	2000      	movs	r0, #0
    f496:	e7bd      	b.n	f414 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000f498 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f498:	b510      	push	{r4, lr}
    f49a:	4604      	mov	r4, r0
    f49c:	8880      	ldrh	r0, [r0, #4]
    f49e:	b128      	cbz	r0, f4ac <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f4a0:	2801      	cmp	r0, #1
    f4a2:	d003      	beq.n	f4ac <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f4a4:	2802      	cmp	r0, #2
    f4a6:	d001      	beq.n	f4ac <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f4a8:	2012      	movs	r0, #18
    f4aa:	bd10      	pop	{r4, pc}
    f4ac:	78e0      	ldrb	r0, [r4, #3]
    f4ae:	f000 f9dc 	bl	f86a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f4b2:	b148      	cbz	r0, f4c8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f4b4:	78a0      	ldrb	r0, [r4, #2]
    f4b6:	f000 f9d8 	bl	f86a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    f4ba:	b128      	cbz	r0, f4c8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f4bc:	4620      	mov	r0, r4
    f4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4c2:	2101      	movs	r1, #1
    f4c4:	f000 b884 	b.w	f5d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f4c8:	2011      	movs	r0, #17
    f4ca:	bd10      	pop	{r4, pc}

0000f4cc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f4cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f4ce:	460c      	mov	r4, r1
    f4d0:	4605      	mov	r5, r0
    f4d2:	8800      	ldrh	r0, [r0, #0]
    f4d4:	4669      	mov	r1, sp
    f4d6:	f7fd ff88 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f4da:	2800      	cmp	r0, #0
    f4dc:	d106      	bne.n	f4ec <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f4de:	9801      	ldr	r0, [sp, #4]
    f4e0:	8829      	ldrh	r1, [r5, #0]
    f4e2:	8021      	strh	r1, [r4, #0]
    f4e4:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    f4e8:	8060      	strh	r0, [r4, #2]
    f4ea:	2000      	movs	r0, #0
    f4ec:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f4ee <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f4ee:	b510      	push	{r4, lr}
    f4f0:	4604      	mov	r4, r0
    f4f2:	4601      	mov	r1, r0
    f4f4:	2000      	movs	r0, #0
    f4f6:	f7f5 fba7 	bl	4c48 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f4fa:	b910      	cbnz	r0, f502 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f4fc:	2000      	movs	r0, #0
    f4fe:	6020      	str	r0, [r4, #0]
    f500:	80a0      	strh	r0, [r4, #4]
    f502:	2000      	movs	r0, #0
    f504:	bd10      	pop	{r4, pc}

0000f506 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f506:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f508:	8800      	ldrh	r0, [r0, #0]
    f50a:	4669      	mov	r1, sp
    f50c:	f7fd ff6d 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f510:	b958      	cbnz	r0, f52a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f512:	4668      	mov	r0, sp
    f514:	f000 fa47 	bl	f9a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    f518:	b138      	cbz	r0, f52a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    f51a:	9c01      	ldr	r4, [sp, #4]
    f51c:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    f520:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    f524:	3470      	adds	r4, #112	; 0x70
    f526:	b929      	cbnz	r1, f534 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    f528:	e001      	b.n	f52e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f52a:	2002      	movs	r0, #2
    f52c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f52e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f532:	b109      	cbz	r1, f538 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f534:	203a      	movs	r0, #58	; 0x3a
    f536:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f538:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    f53c:	f04f 0501 	mov.w	r5, #1
    f540:	0789      	lsls	r1, r1, #30
    f542:	d103      	bne.n	f54c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    f544:	7005      	strb	r5, [r0, #0]
    f546:	4668      	mov	r0, sp
    f548:	f7fe fae7 	bl	db1a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f54c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    f550:	2000      	movs	r0, #0
    f552:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f554 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f554:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f556:	460c      	mov	r4, r1
    f558:	4605      	mov	r5, r0
    f55a:	8800      	ldrh	r0, [r0, #0]
    f55c:	4669      	mov	r1, sp
    f55e:	f7fd ff44 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f562:	b108      	cbz	r0, f568 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f564:	2002      	movs	r0, #2
    f566:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f568:	78a8      	ldrb	r0, [r5, #2]
    f56a:	b130      	cbz	r0, f57a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f56c:	f000 f9f6 	bl	f95c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    f570:	70a0      	strb	r0, [r4, #2]
    f572:	8828      	ldrh	r0, [r5, #0]
    f574:	8020      	strh	r0, [r4, #0]
    f576:	2000      	movs	r0, #0
    f578:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f57a:	9801      	ldr	r0, [sp, #4]
    f57c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f580:	e7f6      	b.n	f570 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f582 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f582:	b510      	push	{r4, lr}
    f584:	f7fa ff26 	bl	a3d4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f588:	2000      	movs	r0, #0
    f58a:	bd10      	pop	{r4, pc}

0000f58c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f58c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f590:	4604      	mov	r4, r0
    f592:	8840      	ldrh	r0, [r0, #2]
    f594:	460d      	mov	r5, r1
    f596:	b1b8      	cbz	r0, f5c8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f598:	8820      	ldrh	r0, [r4, #0]
    f59a:	4669      	mov	r1, sp
    f59c:	f7fd ff25 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f5a0:	2800      	cmp	r0, #0
    f5a2:	d10f      	bne.n	f5c4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f5a4:	8820      	ldrh	r0, [r4, #0]
    f5a6:	8028      	strh	r0, [r5, #0]
    f5a8:	9e01      	ldr	r6, [sp, #4]
    f5aa:	f106 050c 	add.w	r5, r6, #12
    f5ae:	3670      	adds	r6, #112	; 0x70
    f5b0:	682f      	ldr	r7, [r5, #0]
    f5b2:	8862      	ldrh	r2, [r4, #2]
    f5b4:	4639      	mov	r1, r7
    f5b6:	4630      	mov	r0, r6
    f5b8:	f7fe f858 	bl	d66c <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f5bc:	6828      	ldr	r0, [r5, #0]
    f5be:	42b8      	cmp	r0, r7
    f5c0:	d1f6      	bne.n	f5b0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f5c2:	2000      	movs	r0, #0
    f5c4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f5c8:	2012      	movs	r0, #18
    f5ca:	e7fb      	b.n	f5c4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f5cc <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f5cc:	f7fa bcda 	b.w	9f84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f5d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    f5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5d4:	b086      	sub	sp, #24
    f5d6:	468a      	mov	sl, r1
    f5d8:	4606      	mov	r6, r0
    f5da:	8800      	ldrh	r0, [r0, #0]
    f5dc:	a901      	add	r1, sp, #4
    f5de:	f7fd ff04 	bl	d3ea <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f5e2:	2800      	cmp	r0, #0
    f5e4:	d138      	bne.n	f658 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f5e6:	9802      	ldr	r0, [sp, #8]
    f5e8:	f04f 0800 	mov.w	r8, #0
    f5ec:	4601      	mov	r1, r0
    f5ee:	4689      	mov	r9, r1
    f5f0:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    f5f4:	f88d 1000 	strb.w	r1, [sp]
    f5f8:	9900      	ldr	r1, [sp, #0]
    f5fa:	9100      	str	r1, [sp, #0]
    f5fc:	f89d 5000 	ldrb.w	r5, [sp]
    f600:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f604:	3070      	adds	r0, #112	; 0x70
    f606:	2921      	cmp	r1, #33	; 0x21
    f608:	d100      	bne.n	f60c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    f60a:	b13d      	cbz	r5, f61c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    f60c:	2400      	movs	r4, #0
    f60e:	304c      	adds	r0, #76	; 0x4c
    f610:	2108      	movs	r1, #8
    f612:	4607      	mov	r7, r0
    f614:	f7ff fae8 	bl	ebe8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f618:	b110      	cbz	r0, f620 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    f61a:	e007      	b.n	f62c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f61c:	2401      	movs	r4, #1
    f61e:	e7f6      	b.n	f60e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    f620:	210b      	movs	r1, #11
    f622:	4638      	mov	r0, r7
    f624:	f7ff fae0 	bl	ebe8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f628:	b900      	cbnz	r0, f62c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    f62a:	b1a4      	cbz	r4, f656 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    f62c:	a804      	add	r0, sp, #16
    f62e:	9000      	str	r0, [sp, #0]
    f630:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f634:	ab03      	add	r3, sp, #12
    f636:	4632      	mov	r2, r6
    f638:	4649      	mov	r1, r9
    f63a:	f000 f96f 	bl	f91c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    f63e:	0007      	movs	r7, r0
    f640:	d10a      	bne.n	f658 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    f642:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f646:	9c02      	ldr	r4, [sp, #8]
    f648:	b148      	cbz	r0, f65e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    f64a:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    f64e:	2001      	movs	r0, #1
    f650:	7060      	strb	r0, [r4, #1]
    f652:	b94d      	cbnz	r5, f668 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    f654:	e006      	b.n	f664 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    f656:	201a      	movs	r0, #26
    f658:	b006      	add	sp, #24
    f65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f65e:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    f662:	e7f4      	b.n	f64e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    f664:	7820      	ldrb	r0, [r4, #0]
    f666:	b108      	cbz	r0, f66c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    f668:	273a      	movs	r7, #58	; 0x3a
    f66a:	e012      	b.n	f692 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    f66c:	f884 a000 	strb.w	sl, [r4]
    f670:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f674:	70a0      	strb	r0, [r4, #2]
    f676:	f89d 1010 	ldrb.w	r1, [sp, #16]
    f67a:	70e1      	strb	r1, [r4, #3]
    f67c:	f88d 0000 	strb.w	r0, [sp]
    f680:	f88d 1001 	strb.w	r1, [sp, #1]
    f684:	88b0      	ldrh	r0, [r6, #4]
    f686:	f8ad 0002 	strh.w	r0, [sp, #2]
    f68a:	4669      	mov	r1, sp
    f68c:	4648      	mov	r0, r9
    f68e:	f7fd ff6b 	bl	d568 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    f692:	f884 8001 	strb.w	r8, [r4, #1]
    f696:	4638      	mov	r0, r7
    f698:	e7de      	b.n	f658 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000f69a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f69a:	b510      	push	{r4, lr}
    f69c:	2008      	movs	r0, #8
    f69e:	f7fa ff03 	bl	a4a8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6a6:	f7f8 bc7b 	b.w	7fa0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    f6aa:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f6ae:	4288      	cmp	r0, r1
    f6b0:	d303      	bcc.n	f6ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    f6b2:	f640 0148 	movw	r1, #2120	; 0x848
    f6b6:	4288      	cmp	r0, r1
    f6b8:	d300      	bcc.n	f6bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    f6ba:	4608      	mov	r0, r1
    f6bc:	4770      	bx	lr
    f6be:	07c1      	lsls	r1, r0, #31
    f6c0:	d001      	beq.n	f6c6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    f6c2:	2001      	movs	r0, #1
    f6c4:	4770      	bx	lr
    f6c6:	0780      	lsls	r0, r0, #30
    f6c8:	d501      	bpl.n	f6ce <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    f6ca:	2002      	movs	r0, #2
    f6cc:	4770      	bx	lr
    f6ce:	2000      	movs	r0, #0
    f6d0:	4770      	bx	lr
    f6d2:	b510      	push	{r4, lr}
    f6d4:	2801      	cmp	r0, #1
    f6d6:	d006      	beq.n	f6e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f6d8:	2802      	cmp	r0, #2
    f6da:	d004      	beq.n	f6e6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    f6dc:	f240 2163 	movw	r1, #611	; 0x263
    f6e0:	2006      	movs	r0, #6
    f6e2:	f7f4 fbb3 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6e6:	bd10      	pop	{r4, pc}
    f6e8:	b50e      	push	{r1, r2, r3, lr}
    f6ea:	4669      	mov	r1, sp
    f6ec:	2001      	movs	r0, #1
    f6ee:	f7fd fc3e 	bl	cf6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f6f2:	b150      	cbz	r0, f70a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f6f4:	f240 114f 	movw	r1, #335	; 0x14f
    f6f8:	2039      	movs	r0, #57	; 0x39
    f6fa:	f7f4 fba7 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6fe:	9802      	ldr	r0, [sp, #8]
    f700:	f7fe fe60 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    f704:	b108      	cbz	r0, f70a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    f706:	2001      	movs	r0, #1
    f708:	bd0e      	pop	{r1, r2, r3, pc}
    f70a:	4668      	mov	r0, sp
    f70c:	f7f4 fdd6 	bl	42bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f710:	2800      	cmp	r0, #0
    f712:	d0f4      	beq.n	f6fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    f714:	2000      	movs	r0, #0
    f716:	bd0e      	pop	{r1, r2, r3, pc}
    f718:	b510      	push	{r4, lr}
    f71a:	f7ff ffe5 	bl	f6e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f71e:	b158      	cbz	r0, f738 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f720:	f000 f958 	bl	f9d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f724:	4604      	mov	r4, r0
    f726:	f7fe fc7e 	bl	e026 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f72a:	b918      	cbnz	r0, f734 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    f72c:	4620      	mov	r0, r4
    f72e:	f7fe fc70 	bl	e012 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f732:	b108      	cbz	r0, f738 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    f734:	2000      	movs	r0, #0
    f736:	bd10      	pop	{r4, pc}
    f738:	2001      	movs	r0, #1
    f73a:	bd10      	pop	{r4, pc}
    f73c:	b570      	push	{r4, r5, r6, lr}
    f73e:	460c      	mov	r4, r1
    f740:	4605      	mov	r5, r0
    f742:	b112      	cbz	r2, f74a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    f744:	291f      	cmp	r1, #31
    f746:	d80c      	bhi.n	f762 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
    f748:	e016      	b.n	f778 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    f74a:	f7f5 f87d 	bl	4848 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    f74e:	42a0      	cmp	r0, r4
    f750:	d201      	bcs.n	f756 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    f752:	2007      	movs	r0, #7
    f754:	bd70      	pop	{r4, r5, r6, pc}
    f756:	4628      	mov	r0, r5
    f758:	f7fe fc63 	bl	e022 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f75c:	b118      	cbz	r0, f766 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f75e:	2c1f      	cmp	r4, #31
    f760:	d901      	bls.n	f766 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f762:	2012      	movs	r0, #18
    f764:	bd70      	pop	{r4, r5, r6, pc}
    f766:	4628      	mov	r0, r5
    f768:	f7fe fc64 	bl	e034 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f76c:	b130      	cbz	r0, f77c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
    f76e:	4621      	mov	r1, r4
    f770:	4628      	mov	r0, r5
    f772:	f7fe fc2b 	bl	dfcc <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f776:	b118      	cbz	r0, f780 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
    f778:	2000      	movs	r0, #0
    f77a:	bd70      	pop	{r4, r5, r6, pc}
    f77c:	2042      	movs	r0, #66	; 0x42
    f77e:	bd70      	pop	{r4, r5, r6, pc}
    f780:	2045      	movs	r0, #69	; 0x45
    f782:	bd70      	pop	{r4, r5, r6, pc}
    f784:	b510      	push	{r4, lr}
    f786:	4604      	mov	r4, r0
    f788:	7840      	ldrb	r0, [r0, #1]
    f78a:	06c1      	lsls	r1, r0, #27
    f78c:	d51c      	bpl.n	f7c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f78e:	07c0      	lsls	r0, r0, #31
    f790:	d00b      	beq.n	f7aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f792:	f7fa fe5d 	bl	a450 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f796:	b1b8      	cbz	r0, f7c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f798:	7860      	ldrb	r0, [r4, #1]
    f79a:	06c1      	lsls	r1, r0, #27
    f79c:	d405      	bmi.n	f7aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f79e:	0700      	lsls	r0, r0, #28
    f7a0:	d503      	bpl.n	f7aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f7a2:	7d20      	ldrb	r0, [r4, #20]
    f7a4:	2802      	cmp	r0, #2
    f7a6:	d10f      	bne.n	f7c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f7a8:	e010      	b.n	f7cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f7aa:	7d20      	ldrb	r0, [r4, #20]
    f7ac:	2802      	cmp	r0, #2
    f7ae:	d001      	beq.n	f7b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
    f7b0:	7ea0      	ldrb	r0, [r4, #26]
    f7b2:	b948      	cbnz	r0, f7c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f7b4:	7860      	ldrb	r0, [r4, #1]
    f7b6:	0700      	lsls	r0, r0, #28
    f7b8:	d408      	bmi.n	f7cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f7ba:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f7be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f7c2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    f7c6:	d201      	bcs.n	f7cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f7c8:	2011      	movs	r0, #17
    f7ca:	bd10      	pop	{r4, pc}
    f7cc:	2000      	movs	r0, #0
    f7ce:	bd10      	pop	{r4, pc}
    f7d0:	b538      	push	{r3, r4, r5, lr}
    f7d2:	4604      	mov	r4, r0
    f7d4:	7800      	ldrb	r0, [r0, #0]
    f7d6:	28ef      	cmp	r0, #239	; 0xef
    f7d8:	d843      	bhi.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f7da:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f7de:	f8ad 0000 	strh.w	r0, [sp]
    f7e2:	9800      	ldr	r0, [sp, #0]
    f7e4:	f000 f951 	bl	fa8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    f7e8:	b3a0      	cbz	r0, f854 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f7ea:	7861      	ldrb	r1, [r4, #1]
    f7ec:	0708      	lsls	r0, r1, #28
    f7ee:	d40b      	bmi.n	f808 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
    f7f0:	f8d4 0002 	ldr.w	r0, [r4, #2]
    f7f4:	f8d4 3005 	ldr.w	r3, [r4, #5]
    f7f8:	0a02      	lsrs	r2, r0, #8
    f7fa:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    f7fe:	d830      	bhi.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f800:	2220      	movs	r2, #32
    f802:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f806:	d82c      	bhi.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f808:	7a60      	ldrb	r0, [r4, #9]
    f80a:	b318      	cbz	r0, f854 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f80c:	2807      	cmp	r0, #7
    f80e:	d828      	bhi.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f810:	7aa0      	ldrb	r0, [r4, #10]
    f812:	b128      	cbz	r0, f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f814:	2801      	cmp	r0, #1
    f816:	d003      	beq.n	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f818:	2802      	cmp	r0, #2
    f81a:	d001      	beq.n	f820 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f81c:	2803      	cmp	r0, #3
    f81e:	d120      	bne.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f820:	074a      	lsls	r2, r1, #29
    f822:	d403      	bmi.n	f82c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f824:	2802      	cmp	r0, #2
    f826:	d001      	beq.n	f82c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f828:	2803      	cmp	r0, #3
    f82a:	d105      	bne.n	f838 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    f82c:	7ae0      	ldrb	r0, [r4, #11]
    f82e:	b108      	cbz	r0, f834 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f830:	2801      	cmp	r0, #1
    f832:	d116      	bne.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f834:	0748      	lsls	r0, r1, #29
    f836:	d407      	bmi.n	f848 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f838:	7ca0      	ldrb	r0, [r4, #18]
    f83a:	b128      	cbz	r0, f848 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f83c:	2801      	cmp	r0, #1
    f83e:	d003      	beq.n	f848 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f840:	2802      	cmp	r0, #2
    f842:	d001      	beq.n	f848 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f844:	2803      	cmp	r0, #3
    f846:	d10c      	bne.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f848:	06c8      	lsls	r0, r1, #27
    f84a:	7d20      	ldrb	r0, [r4, #20]
    f84c:	d503      	bpl.n	f856 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
    f84e:	2801      	cmp	r0, #1
    f850:	d107      	bne.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f852:	e002      	b.n	f85a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    f854:	e005      	b.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f856:	2802      	cmp	r0, #2
    f858:	d003      	beq.n	f862 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f85a:	7e20      	ldrb	r0, [r4, #24]
    f85c:	b118      	cbz	r0, f866 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f85e:	2801      	cmp	r0, #1
    f860:	d001      	beq.n	f866 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f862:	2012      	movs	r0, #18
    f864:	bd38      	pop	{r3, r4, r5, pc}
    f866:	2000      	movs	r0, #0
    f868:	bd38      	pop	{r3, r4, r5, pc}
    f86a:	b510      	push	{r4, lr}
    f86c:	0004      	movs	r4, r0
    f86e:	d005      	beq.n	f87c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f870:	f7fa fe2a 	bl	a4c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f874:	4384      	bics	r4, r0
    f876:	d001      	beq.n	f87c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f878:	2000      	movs	r0, #0
    f87a:	bd10      	pop	{r4, pc}
    f87c:	2001      	movs	r0, #1
    f87e:	bd10      	pop	{r4, pc}
    f880:	28fb      	cmp	r0, #251	; 0xfb
    f882:	d803      	bhi.n	f88c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f884:	f640 0048 	movw	r0, #2120	; 0x848
    f888:	4281      	cmp	r1, r0
    f88a:	d901      	bls.n	f890 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f88c:	2011      	movs	r0, #17
    f88e:	4770      	bx	lr
    f890:	2000      	movs	r0, #0
    f892:	4770      	bx	lr
    f894:	381b      	subs	r0, #27
    f896:	28e1      	cmp	r0, #225	; 0xe1
    f898:	d206      	bcs.n	f8a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f89a:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f89e:	d303      	bcc.n	f8a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f8a0:	f244 2090 	movw	r0, #17040	; 0x4290
    f8a4:	4281      	cmp	r1, r0
    f8a6:	d901      	bls.n	f8ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
    f8a8:	2012      	movs	r0, #18
    f8aa:	4770      	bx	lr
    f8ac:	2000      	movs	r0, #0
    f8ae:	4770      	bx	lr
    f8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8b4:	4606      	mov	r6, r0
    f8b6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f8ba:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f8be:	4615      	mov	r5, r2
    f8c0:	302c      	adds	r0, #44	; 0x2c
    f8c2:	f7f7 fdf9 	bl	74b8 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
    f8c6:	4680      	mov	r8, r0
    f8c8:	2102      	movs	r1, #2
    f8ca:	f7fd fe1e 	bl	d50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f8ce:	4287      	cmp	r7, r0
    f8d0:	d200      	bcs.n	f8d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
    f8d2:	4638      	mov	r0, r7
    f8d4:	4607      	mov	r7, r0
    f8d6:	2102      	movs	r1, #2
    f8d8:	4640      	mov	r0, r8
    f8da:	f7fd fe16 	bl	d50a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f8de:	4284      	cmp	r4, r0
    f8e0:	d200      	bcs.n	f8e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
    f8e2:	4620      	mov	r0, r4
    f8e4:	8831      	ldrh	r1, [r6, #0]
    f8e6:	8029      	strh	r1, [r5, #0]
    f8e8:	2f1b      	cmp	r7, #27
    f8ea:	d913      	bls.n	f914 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
    f8ec:	2ffb      	cmp	r7, #251	; 0xfb
    f8ee:	d300      	bcc.n	f8f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f8f0:	27fb      	movs	r7, #251	; 0xfb
    f8f2:	806f      	strh	r7, [r5, #2]
    f8f4:	281b      	cmp	r0, #27
    f8f6:	d90f      	bls.n	f918 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f8f8:	28fb      	cmp	r0, #251	; 0xfb
    f8fa:	d300      	bcc.n	f8fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f8fc:	20fb      	movs	r0, #251	; 0xfb
    f8fe:	80e8      	strh	r0, [r5, #6]
    f900:	4640      	mov	r0, r8
    f902:	f7ff fed2 	bl	f6aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f906:	80a8      	strh	r0, [r5, #4]
    f908:	4640      	mov	r0, r8
    f90a:	f7ff fece 	bl	f6aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f90e:	8128      	strh	r0, [r5, #8]
    f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f914:	271b      	movs	r7, #27
    f916:	e7ec      	b.n	f8f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f918:	201b      	movs	r0, #27
    f91a:	e7f0      	b.n	f8fe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f920:	7890      	ldrb	r0, [r2, #2]
    f922:	9e06      	ldr	r6, [sp, #24]
    f924:	461d      	mov	r5, r3
    f926:	4614      	mov	r4, r2
    f928:	b908      	cbnz	r0, f92e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
    f92a:	f7fa fdcd 	bl	a4c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f92e:	78e4      	ldrb	r4, [r4, #3]
    f930:	4607      	mov	r7, r0
    f932:	b914      	cbnz	r4, f93a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
    f934:	f7fa fdc8 	bl	a4c8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f938:	4604      	mov	r4, r0
    f93a:	b16f      	cbz	r7, f958 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f93c:	b164      	cbz	r4, f958 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f93e:	4638      	mov	r0, r7
    f940:	f7ff febd 	bl	f6be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f944:	4620      	mov	r0, r4
    f946:	f7ff feba 	bl	f6be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f94a:	b12f      	cbz	r7, f958 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f94c:	b124      	cbz	r4, f958 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
    f94e:	702f      	strb	r7, [r5, #0]
    f950:	7034      	strb	r4, [r6, #0]
    f952:	2000      	movs	r0, #0
    f954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f958:	2009      	movs	r0, #9
    f95a:	e7fb      	b.n	f954 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
    f95c:	b510      	push	{r4, lr}
    f95e:	f7fc fa88 	bl	be72 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f962:	b928      	cbnz	r0, f970 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    f964:	f7fc fabb 	bl	bede <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f968:	b910      	cbnz	r0, f970 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
    f96a:	f7fc fac2 	bl	bef2 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f96e:	b108      	cbz	r0, f974 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
    f970:	2008      	movs	r0, #8
    f972:	bd10      	pop	{r4, pc}
    f974:	f7fc fa52 	bl	be1c <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f978:	b940      	cbnz	r0, f98c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f97a:	f7fc fa59 	bl	be30 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f97e:	b928      	cbnz	r0, f98c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f980:	f7fc fa6d 	bl	be5e <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f984:	b910      	cbnz	r0, f98c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
    f986:	f7fc fa7e 	bl	be86 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f98a:	b108      	cbz	r0, f990 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
    f98c:	2004      	movs	r0, #4
    f98e:	bd10      	pop	{r4, pc}
    f990:	f240 519c 	movw	r1, #1436	; 0x59c
    f994:	2039      	movs	r0, #57	; 0x39
    f996:	f7f4 fa59 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f99a:	b510      	push	{r4, lr}
    f99c:	f7fa fd8e 	bl	a4bc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f9a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f9a4:	bd10      	pop	{r4, pc}
    f9a6:	6840      	ldr	r0, [r0, #4]
    f9a8:	f000 b800 	b.w	f9ac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    f9ac:	b508      	push	{r3, lr}
    f9ae:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    f9b2:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    f9b6:	f88d 0000 	strb.w	r0, [sp]
    f9ba:	9800      	ldr	r0, [sp, #0]
    f9bc:	9000      	str	r0, [sp, #0]
    f9be:	f89d 0000 	ldrb.w	r0, [sp]
    f9c2:	1e40      	subs	r0, r0, #1
    f9c4:	4208      	tst	r0, r1
    f9c6:	d003      	beq.n	f9d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    f9c8:	2904      	cmp	r1, #4
    f9ca:	d001      	beq.n	f9d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
    f9cc:	2001      	movs	r0, #1
    f9ce:	bd08      	pop	{r3, pc}
    f9d0:	2000      	movs	r0, #0
    f9d2:	bd08      	pop	{r3, pc}
    f9d4:	b510      	push	{r4, lr}
    f9d6:	2101      	movs	r1, #1
    f9d8:	2000      	movs	r0, #0
    f9da:	f7fd fabe 	bl	cf5a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f9de:	0004      	movs	r4, r0
    f9e0:	d108      	bne.n	f9f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
    f9e2:	2200      	movs	r2, #0
    f9e4:	2101      	movs	r1, #1
    f9e6:	4610      	mov	r0, r2
    f9e8:	f7fd faad 	bl	cf46 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f9ec:	0004      	movs	r4, r0
    f9ee:	d003      	beq.n	f9f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
    f9f0:	f7fe fab4 	bl	df5c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f9f4:	4620      	mov	r0, r4
    f9f6:	bd10      	pop	{r4, pc}
    f9f8:	f240 2135 	movw	r1, #565	; 0x235
    f9fc:	2039      	movs	r0, #57	; 0x39
    f9fe:	f7f4 fa25 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa02:	b510      	push	{r4, lr}
    fa04:	f7ff fe70 	bl	f6e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    fa08:	2800      	cmp	r0, #0
    fa0a:	d000      	beq.n	fa0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
    fa0c:	2001      	movs	r0, #1
    fa0e:	bd10      	pop	{r4, pc}
    fa10:	b570      	push	{r4, r5, r6, lr}
    fa12:	4605      	mov	r5, r0
    fa14:	f7fe fb0e 	bl	e034 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    fa18:	b170      	cbz	r0, fa38 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
    fa1a:	4628      	mov	r0, r5
    fa1c:	f7fe fcd2 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fa20:	2800      	cmp	r0, #0
    fa22:	d008      	beq.n	fa36 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
    fa24:	4628      	mov	r0, r5
    fa26:	f7fe fcca 	bl	e3be <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    fa2a:	4604      	mov	r4, r0
    fa2c:	4628      	mov	r0, r5
    fa2e:	f7fe fca0 	bl	e372 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    fa32:	b118      	cbz	r0, fa3c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
    fa34:	200c      	movs	r0, #12
    fa36:	bd70      	pop	{r4, r5, r6, pc}
    fa38:	2042      	movs	r0, #66	; 0x42
    fa3a:	bd70      	pop	{r4, r5, r6, pc}
    fa3c:	b164      	cbz	r4, fa58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    fa3e:	8820      	ldrh	r0, [r4, #0]
    fa40:	f7fd fc13 	bl	d26a <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fa44:	8820      	ldrh	r0, [r4, #0]
    fa46:	2100      	movs	r1, #0
    fa48:	f7f4 fc88 	bl	435c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fa4c:	b120      	cbz	r0, fa58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    fa4e:	f241 41ca 	movw	r1, #5322	; 0x14ca
    fa52:	2039      	movs	r0, #57	; 0x39
    fa54:	f7f4 f9fa 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa58:	2000      	movs	r0, #0
    fa5a:	bd70      	pop	{r4, r5, r6, pc}
    fa5c:	b530      	push	{r4, r5, lr}
    fa5e:	f340 0400 	sbfx	r4, r0, #0, #1
    fa62:	f340 0040 	sbfx	r0, r0, #1, #1
    fa66:	1c40      	adds	r0, r0, #1
    fa68:	9d03      	ldr	r5, [sp, #12]
    fa6a:	1c64      	adds	r4, r4, #1
    fa6c:	d000      	beq.n	fa70 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
    fa6e:	b119      	cbz	r1, fa78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    fa70:	b100      	cbz	r0, fa74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
    fa72:	b10a      	cbz	r2, fa78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    fa74:	b91c      	cbnz	r4, fa7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
    fa76:	e001      	b.n	fa7c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
    fa78:	2011      	movs	r0, #17
    fa7a:	bd30      	pop	{r4, r5, pc}
    fa7c:	2100      	movs	r1, #0
    fa7e:	7019      	strb	r1, [r3, #0]
    fa80:	b900      	cbnz	r0, fa84 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
    fa82:	2200      	movs	r2, #0
    fa84:	702a      	strb	r2, [r5, #0]
    fa86:	2000      	movs	r0, #0
    fa88:	bd30      	pop	{r4, r5, pc}
    fa8a:	b2c0      	uxtb	r0, r0
    fa8c:	06c1      	lsls	r1, r0, #27
    fa8e:	d40c      	bmi.n	faaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
    fa90:	0681      	lsls	r1, r0, #26
    fa92:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    fa96:	d503      	bpl.n	faa0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    fa98:	b9d1      	cbnz	r1, fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fa9a:	0781      	lsls	r1, r0, #30
    fa9c:	d418      	bmi.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fa9e:	e001      	b.n	faa4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
    faa0:	2900      	cmp	r1, #0
    faa2:	d1fa      	bne.n	fa9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    faa4:	0700      	lsls	r0, r0, #28
    faa6:	d413      	bmi.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    faa8:	e010      	b.n	facc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    faaa:	0641      	lsls	r1, r0, #25
    faac:	d410      	bmi.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    faae:	0681      	lsls	r1, r0, #26
    fab0:	d40e      	bmi.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fab2:	07c1      	lsls	r1, r0, #31
    fab4:	ea4f 7180 	mov.w	r1, r0, lsl #30
    fab8:	d004      	beq.n	fac4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    faba:	2900      	cmp	r1, #0
    fabc:	db02      	blt.n	fac4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    fabe:	0740      	lsls	r0, r0, #29
    fac0:	d404      	bmi.n	facc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    fac2:	e005      	b.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fac4:	0701      	lsls	r1, r0, #28
    fac6:	d403      	bmi.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    fac8:	0740      	lsls	r0, r0, #29
    faca:	d401      	bmi.n	fad0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    facc:	2001      	movs	r0, #1
    face:	4770      	bx	lr
    fad0:	2000      	movs	r0, #0
    fad2:	4770      	bx	lr
    fad4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fad6:	4669      	mov	r1, sp
    fad8:	2001      	movs	r0, #1
    fada:	f7fd fa48 	bl	cf6e <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fade:	b178      	cbz	r0, fb00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    fae0:	f240 116d 	movw	r1, #365	; 0x16d
    fae4:	2039      	movs	r0, #57	; 0x39
    fae6:	f7f4 f9b1 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faea:	9c02      	ldr	r4, [sp, #8]
    faec:	4620      	mov	r0, r4
    faee:	f7fe fc69 	bl	e3c4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    faf2:	b128      	cbz	r0, fb00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    faf4:	4620      	mov	r0, r4
    faf6:	f7fe facb 	bl	e090 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    fafa:	b108      	cbz	r0, fb00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    fafc:	2001      	movs	r0, #1
    fafe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb00:	4668      	mov	r0, sp
    fb02:	f7f4 fbdb 	bl	42bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fb06:	2800      	cmp	r0, #0
    fb08:	d0ef      	beq.n	faea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    fb0a:	2000      	movs	r0, #0
    fb0c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fb0e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    fb0e:	6802      	ldr	r2, [r0, #0]
    fb10:	b912      	cbnz	r2, fb18 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    fb12:	6001      	str	r1, [r0, #0]
    fb14:	4770      	bx	lr
    fb16:	4602      	mov	r2, r0
    fb18:	6850      	ldr	r0, [r2, #4]
    fb1a:	b108      	cbz	r0, fb20 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    fb1c:	428a      	cmp	r2, r1
    fb1e:	d1fa      	bne.n	fb16 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    fb20:	428a      	cmp	r2, r1
    fb22:	d0f7      	beq.n	fb14 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    fb24:	6051      	str	r1, [r2, #4]
    fb26:	4770      	bx	lr
    fb28:	b510      	push	{r4, lr}
    fb2a:	f7fe fc4e 	bl	e3ca <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    fb2e:	b108      	cbz	r0, fb34 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    fb30:	21d9      	movs	r1, #217	; 0xd9
    fb32:	e003      	b.n	fb3c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    fb34:	f7f6 fe4e 	bl	67d4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    fb38:	b118      	cbz	r0, fb42 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    fb3a:	21de      	movs	r1, #222	; 0xde
    fb3c:	2001      	movs	r0, #1
    fb3e:	f7f4 f985 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb46:	2001      	movs	r0, #1
    fb48:	f7f4 bb4e 	b.w	41e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fb4c:	b510      	push	{r4, lr}
    fb4e:	4604      	mov	r4, r0
    fb50:	e002      	b.n	fb58 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    fb52:	6820      	ldr	r0, [r4, #0]
    fb54:	4780      	blx	r0
    fb56:	6864      	ldr	r4, [r4, #4]
    fb58:	2c00      	cmp	r4, #0
    fb5a:	d1fa      	bne.n	fb52 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    fb5c:	bd10      	pop	{r4, pc}
    fb5e:	b510      	push	{r4, lr}
    fb60:	2000      	movs	r0, #0
    fb62:	f7f4 fb41 	bl	41e8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    fb66:	f7f4 fd77 	bl	4658 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    fb6a:	f7f5 f84f 	bl	4c0c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    fb6e:	f7f5 fa3d 	bl	4fec <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    fb72:	2800      	cmp	r0, #0
    fb74:	d003      	beq.n	fb7e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    fb76:	21b8      	movs	r1, #184	; 0xb8
    fb78:	2001      	movs	r0, #1
    fb7a:	f7f4 f967 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb7e:	bd10      	pop	{r4, pc}
    fb80:	b510      	push	{r4, lr}
    fb82:	f7ff ffd1 	bl	fb28 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    fb86:	f7fe ffef 	bl	eb68 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    fb8a:	2800      	cmp	r0, #0
    fb8c:	d003      	beq.n	fb96 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    fb8e:	21f5      	movs	r1, #245	; 0xf5
    fb90:	2001      	movs	r0, #1
    fb92:	f7f4 f95b 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb96:	bd10      	pop	{r4, pc}

0000fb98 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    fb98:	f7f3 bdb4 	b.w	3704 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    fb9c:	000b0001 	.word	0x000b0001
    fba0:	000a0002 	.word	0x000a0002
    fba4:	00090005 	.word	0x00090005
    fba8:	0008000a 	.word	0x0008000a
    fbac:	00070014 	.word	0x00070014
    fbb0:	0006001e 	.word	0x0006001e
    fbb4:	00050032 	.word	0x00050032
    fbb8:	0004004b 	.word	0x0004004b
    fbbc:	00030064 	.word	0x00030064
    fbc0:	00020096 	.word	0x00020096
    fbc4:	000100fa 	.word	0x000100fa
    fbc8:	000001f4 	.word	0x000001f4

0000fbcc <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fbcc:	b510      	push	{r4, lr}
    fbce:	f7fb f86f 	bl	acb0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fbd2:	f000 f850 	bl	fc76 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fbd6:	f7fa fce5 	bl	a5a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fbda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbde:	f7fa bde3 	b.w	a7a8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fbe2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fbe2:	b510      	push	{r4, lr}
    fbe4:	24c8      	movs	r4, #200	; 0xc8
    fbe6:	1e64      	subs	r4, r4, #1
    fbe8:	b2e4      	uxtb	r4, r4
    fbea:	f7fa fcf9 	bl	a5e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fbee:	2802      	cmp	r0, #2
    fbf0:	d003      	beq.n	fbfa <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fbf2:	2801      	cmp	r0, #1
    fbf4:	d000      	beq.n	fbf8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fbf6:	2000      	movs	r0, #0
    fbf8:	bd10      	pop	{r4, pc}
    fbfa:	2c00      	cmp	r4, #0
    fbfc:	d1f3      	bne.n	fbe6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fbfe:	2193      	movs	r1, #147	; 0x93
    fc00:	203b      	movs	r0, #59	; 0x3b
    fc02:	f7f4 f923 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fc06 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fc06:	b510      	push	{r4, lr}
    fc08:	f7f3 ffea 	bl	3be0 <mpsl_fem_lna_configuration_clear>
    fc0c:	2800      	cmp	r0, #0
    fc0e:	d005      	beq.n	fc1c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fc10:	1c40      	adds	r0, r0, #1
    fc12:	d003      	beq.n	fc1c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fc14:	2150      	movs	r1, #80	; 0x50
    fc16:	2040      	movs	r0, #64	; 0x40
    fc18:	f7f4 f918 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc1c:	bd10      	pop	{r4, pc}

0000fc1e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    fc1e:	b510      	push	{r4, lr}
    fc20:	f7f3 ffea 	bl	3bf8 <mpsl_fem_pa_configuration_clear>
    fc24:	2800      	cmp	r0, #0
    fc26:	d005      	beq.n	fc34 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fc28:	1c40      	adds	r0, r0, #1
    fc2a:	d003      	beq.n	fc34 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fc2c:	2149      	movs	r1, #73	; 0x49
    fc2e:	2040      	movs	r0, #64	; 0x40
    fc30:	f7f4 f90c 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc34:	bd10      	pop	{r4, pc}

0000fc36 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    fc36:	b510      	push	{r4, lr}
    fc38:	f7f3 ffcc 	bl	3bd4 <mpsl_fem_disable>
    fc3c:	2800      	cmp	r0, #0
    fc3e:	d005      	beq.n	fc4c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fc40:	1c40      	adds	r0, r0, #1
    fc42:	d003      	beq.n	fc4c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fc44:	2157      	movs	r1, #87	; 0x57
    fc46:	2040      	movs	r0, #64	; 0x40
    fc48:	f7f4 f900 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc4c:	bd10      	pop	{r4, pc}

0000fc4e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    fc4e:	b510      	push	{r4, lr}
    fc50:	2100      	movs	r1, #0
    fc52:	4608      	mov	r0, r1
    fc54:	f7f3 ffca 	bl	3bec <mpsl_fem_lna_configuration_set>
    fc58:	b108      	cbz	r0, fc5e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    fc5a:	2000      	movs	r0, #0
    fc5c:	bd10      	pop	{r4, pc}
    fc5e:	2001      	movs	r0, #1
    fc60:	bd10      	pop	{r4, pc}

0000fc62 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    fc62:	b508      	push	{r3, lr}
    fc64:	4668      	mov	r0, sp
    fc66:	f7f3 ffd3 	bl	3c10 <mpsl_fem_pa_is_configured>
    fc6a:	f89d 0000 	ldrb.w	r0, [sp]
    fc6e:	2800      	cmp	r0, #0
    fc70:	d000      	beq.n	fc74 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    fc72:	2001      	movs	r0, #1
    fc74:	bd08      	pop	{r3, pc}

0000fc76 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    fc76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    fc7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fc7e:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    fc82:	f3bf 8f4f 	dsb	sy
    fc86:	f3bf 8f6f 	isb	sy
    fc8a:	f7fa be67 	b.w	a95c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    fc8e:	2800      	cmp	r0, #0
    fc90:	db09      	blt.n	fca6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    fc92:	f000 021f 	and.w	r2, r0, #31
    fc96:	2101      	movs	r1, #1
    fc98:	4091      	lsls	r1, r2
    fc9a:	0940      	lsrs	r0, r0, #5
    fc9c:	0080      	lsls	r0, r0, #2
    fc9e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fca2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    fca6:	4770      	bx	lr
    fca8:	2800      	cmp	r0, #0
    fcaa:	db0d      	blt.n	fcc8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    fcac:	f000 021f 	and.w	r2, r0, #31
    fcb0:	2101      	movs	r1, #1
    fcb2:	4091      	lsls	r1, r2
    fcb4:	0940      	lsrs	r0, r0, #5
    fcb6:	0080      	lsls	r0, r0, #2
    fcb8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fcbc:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fcc0:	f3bf 8f4f 	dsb	sy
    fcc4:	f3bf 8f6f 	isb	sy
    fcc8:	4770      	bx	lr

0000fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    fcca:	b510      	push	{r4, lr}
    fccc:	2801      	cmp	r0, #1
    fcce:	d006      	beq.n	fcde <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    fcd0:	2802      	cmp	r0, #2
    fcd2:	d006      	beq.n	fce2 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    fcd4:	f640 3141 	movw	r1, #2881	; 0xb41
    fcd8:	203e      	movs	r0, #62	; 0x3e
    fcda:	f7f4 f8b7 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcde:	2028      	movs	r0, #40	; 0x28
    fce0:	bd10      	pop	{r4, pc}
    fce2:	2018      	movs	r0, #24
    fce4:	bd10      	pop	{r4, pc}

0000fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    fce6:	b510      	push	{r4, lr}
    fce8:	2801      	cmp	r0, #1
    fcea:	d006      	beq.n	fcfa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    fcec:	2802      	cmp	r0, #2
    fcee:	d007      	beq.n	fd00 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    fcf0:	f640 3155 	movw	r1, #2901	; 0xb55
    fcf4:	203e      	movs	r0, #62	; 0x3e
    fcf6:	f7f4 f8a9 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fcfa:	f641 6014 	movw	r0, #7700	; 0x1e14
    fcfe:	bd10      	pop	{r4, pc}
    fd00:	f241 1030 	movw	r0, #4400	; 0x1130
    fd04:	bd10      	pop	{r4, pc}

0000fd06 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    fd06:	f7fb bd2b 	b.w	b760 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    fd0a:	b510      	push	{r4, lr}
    fd0c:	460a      	mov	r2, r1
    fd0e:	b130      	cbz	r0, fd1e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    fd10:	2801      	cmp	r0, #1
    fd12:	d00b      	beq.n	fd2c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    fd14:	f240 6114 	movw	r1, #1556	; 0x614
    fd18:	203e      	movs	r0, #62	; 0x3e
    fd1a:	f7f4 f897 	bl	3e4c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd22:	f102 0128 	add.w	r1, r2, #40	; 0x28
    fd26:	4610      	mov	r0, r2
    fd28:	f7fa bcae 	b.w	a688 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    fd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd30:	f102 0129 	add.w	r1, r2, #41	; 0x29
    fd34:	4610      	mov	r0, r2
    fd36:	f7fa bc91 	b.w	a65c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    fd3a:	5840      	ldr	r0, [r0, r1]
    fd3c:	2800      	cmp	r0, #0
    fd3e:	d000      	beq.n	fd42 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    fd40:	2001      	movs	r0, #1
    fd42:	4770      	bx	lr
    fd44:	5840      	ldr	r0, [r0, r1]
    fd46:	2800      	cmp	r0, #0
    fd48:	d000      	beq.n	fd4c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    fd4a:	2001      	movs	r0, #1
    fd4c:	4770      	bx	lr

0000fd4e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    fd4e:	b570      	push	{r4, r5, r6, lr}
    fd50:	4605      	mov	r5, r0
    fd52:	4614      	mov	r4, r2
    fd54:	4608      	mov	r0, r1
    fd56:	f7ff ffc6 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd5a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    fd5e:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    fd62:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fd66:	4620      	mov	r0, r4
    fd68:	f7ff ffbd 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd6c:	4428      	add	r0, r5
    fd6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fd72:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    fd76:	fbb0 f5f1 	udiv	r5, r0, r1
    fd7a:	4620      	mov	r0, r4
    fd7c:	f7ff ffa5 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fd80:	4428      	add	r0, r5
    fd82:	1d40      	adds	r0, r0, #5
    fd84:	bd70      	pop	{r4, r5, r6, pc}

0000fd86 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    fd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd8a:	4607      	mov	r7, r0
    fd8c:	461d      	mov	r5, r3
    fd8e:	460e      	mov	r6, r1
    fd90:	4614      	mov	r4, r2
    fd92:	4610      	mov	r0, r2
    fd94:	f7ff ffa7 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fd98:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    fd9c:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    fda0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fda4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fda8:	2e02      	cmp	r6, #2
    fdaa:	d00e      	beq.n	fdca <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    fdac:	f240 52dc 	movw	r2, #1500	; 0x5dc
    fdb0:	4411      	add	r1, r2
    fdb2:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    fdb6:	fbb1 f6f0 	udiv	r6, r1, r0
    fdba:	4620      	mov	r0, r4
    fdbc:	f7ff ff85 	bl	fcca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fdc0:	4430      	add	r0, r6
    fdc2:	4428      	add	r0, r5
    fdc4:	1d40      	adds	r0, r0, #5
    fdc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdca:	4602      	mov	r2, r0
    fdcc:	e7f0      	b.n	fdb0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000fdce <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    fdce:	b510      	push	{r4, lr}
    fdd0:	4604      	mov	r4, r0
    fdd2:	4608      	mov	r0, r1
    fdd4:	f7ff ff87 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fdd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fddc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fde0:	fbb0 f0f1 	udiv	r0, r0, r1
    fde4:	1a20      	subs	r0, r4, r0
    fde6:	1e80      	subs	r0, r0, #2
    fde8:	bd10      	pop	{r4, pc}

0000fdea <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    fdea:	b510      	push	{r4, lr}
    fdec:	4604      	mov	r4, r0
    fdee:	4608      	mov	r0, r1
    fdf0:	f7ff ff79 	bl	fce6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fdf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fdf8:	fbb0 f0f1 	udiv	r0, r0, r1
    fdfc:	1a20      	subs	r0, r4, r0
    fdfe:	bd10      	pop	{r4, pc}

0000fe00 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    fe00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe04:	2902      	cmp	r1, #2
    fe06:	d008      	beq.n	fe1a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    fe08:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fe0c:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    fe10:	fbb1 f1f2 	udiv	r1, r1, r2
    fe14:	4408      	add	r0, r1
    fe16:	1e80      	subs	r0, r0, #2
    fe18:	4770      	bx	lr
    fe1a:	4611      	mov	r1, r2
    fe1c:	e7f6      	b.n	fe0c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000fe1e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    fe1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe22:	2902      	cmp	r1, #2
    fe24:	d007      	beq.n	fe36 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    fe26:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fe2a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    fe2e:	fbb1 f1f2 	udiv	r1, r1, r2
    fe32:	4408      	add	r0, r1
    fe34:	4770      	bx	lr
    fe36:	4611      	mov	r1, r2
    fe38:	e7f7      	b.n	fe2a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    fe3a:	080c      	.short	0x080c
    fe3c:	010d1702 	.word	0x010d1702
    fe40:	09090201 	.word	0x09090201
    fe44:	02060101 	.word	0x02060101
    fe48:	03181809 	.word	0x03181809
    fe4c:	09090101 	.word	0x09090101
    fe50:	00050303 	.word	0x00050303
    fe54:	00000000 	.word	0x00000000

0000fe58 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    fe58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    fe5a:	4d44      	ldr	r5, [pc, #272]	; (ff6c <bt_init+0x114>)
    fe5c:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
    fe60:	6899      	ldr	r1, [r3, #8]
    fe62:	f011 0101 	ands.w	r1, r1, #1
    fe66:	d121      	bne.n	feac <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    fe68:	aa01      	add	r2, sp, #4
    fe6a:	f640 4003 	movw	r0, #3075	; 0xc03
    fe6e:	f006 fbc5 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
    fe72:	4604      	mov	r4, r0
    fe74:	2800      	cmp	r0, #0
    fe76:	d176      	bne.n	ff66 <bt_init+0x10e>
	uint8_t status = buf->data[0];
    fe78:	9b01      	ldr	r3, [sp, #4]
    fe7a:	689b      	ldr	r3, [r3, #8]
	if (status) {
    fe7c:	781b      	ldrb	r3, [r3, #0]
    fe7e:	b993      	cbnz	r3, fea6 <bt_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    fe80:	f3bf 8f5b 	dmb	ish
    fe84:	462b      	mov	r3, r5
    fe86:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    fe8a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    fe8e:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fe92:	f3bf 8f5b 	dmb	ish
    fe96:	e853 1f00 	ldrex	r1, [r3]
    fe9a:	e843 2000 	strex	r0, r2, [r3]
    fe9e:	2800      	cmp	r0, #0
    fea0:	d1f9      	bne.n	fe96 <bt_init+0x3e>
    fea2:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    fea6:	9801      	ldr	r0, [sp, #4]
    fea8:	f00d fe02 	bl	1dab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    feac:	aa01      	add	r2, sp, #4
    feae:	2100      	movs	r1, #0
    feb0:	f241 0003 	movw	r0, #4099	; 0x1003
    feb4:	f006 fba2 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
    feb8:	4604      	mov	r4, r0
    feba:	2800      	cmp	r0, #0
    febc:	d153      	bne.n	ff66 <bt_init+0x10e>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    febe:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    fec0:	482b      	ldr	r0, [pc, #172]	; (ff70 <bt_init+0x118>)
    fec2:	6899      	ldr	r1, [r3, #8]
    fec4:	2208      	movs	r2, #8
    fec6:	3101      	adds	r1, #1
    fec8:	f01a fde7 	bl	2aa9a <memcpy>
	net_buf_unref(rsp);
    fecc:	9801      	ldr	r0, [sp, #4]
    fece:	f00d fdef 	bl	1dab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    fed2:	4621      	mov	r1, r4
    fed4:	aa01      	add	r2, sp, #4
    fed6:	f241 0001 	movw	r0, #4097	; 0x1001
    feda:	f006 fb8f 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
    fede:	4604      	mov	r4, r0
    fee0:	2800      	cmp	r0, #0
    fee2:	d140      	bne.n	ff66 <bt_init+0x10e>
	read_local_ver_complete(rsp);
    fee4:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    fee6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    fee8:	785a      	ldrb	r2, [r3, #1]
    feea:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    feee:	78d9      	ldrb	r1, [r3, #3]
    fef0:	789a      	ldrb	r2, [r3, #2]
    fef2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fef6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    fefa:	791a      	ldrb	r2, [r3, #4]
    fefc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    ff00:	7a19      	ldrb	r1, [r3, #8]
    ff02:	79da      	ldrb	r2, [r3, #7]
    ff04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff08:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    ff0c:	795a      	ldrb	r2, [r3, #5]
    ff0e:	799b      	ldrb	r3, [r3, #6]
    ff10:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ff14:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    ff18:	f00d fdca 	bl	1dab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    ff1c:	4621      	mov	r1, r4
    ff1e:	aa01      	add	r2, sp, #4
    ff20:	f241 0002 	movw	r0, #4098	; 0x1002
    ff24:	f006 fb6a 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
    ff28:	4604      	mov	r4, r0
    ff2a:	b9e0      	cbnz	r0, ff66 <bt_init+0x10e>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    ff2c:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    ff2e:	4811      	ldr	r0, [pc, #68]	; (ff74 <bt_init+0x11c>)
    ff30:	6899      	ldr	r1, [r3, #8]
    ff32:	2240      	movs	r2, #64	; 0x40
    ff34:	3101      	adds	r1, #1
    ff36:	f01a fdb0 	bl	2aa9a <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    ff3a:	480e      	ldr	r0, [pc, #56]	; (ff74 <bt_init+0x11c>)
    ff3c:	f01a fe43 	bl	2abc6 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    ff40:	9801      	ldr	r0, [sp, #4]
    ff42:	f00d fdb5 	bl	1dab0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    ff46:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    ff4a:	065a      	lsls	r2, r3, #25
    ff4c:	d41a      	bmi.n	ff84 <bt_init+0x12c>
    ff4e:	4b0a      	ldr	r3, [pc, #40]	; (ff78 <bt_init+0x120>)
    ff50:	490a      	ldr	r1, [pc, #40]	; (ff7c <bt_init+0x124>)
		BT_ERR("Non-LE capable controller detected!");
    ff52:	480b      	ldr	r0, [pc, #44]	; (ff80 <bt_init+0x128>)
    ff54:	1ac9      	subs	r1, r1, r3
    ff56:	08c9      	lsrs	r1, r1, #3
    ff58:	0189      	lsls	r1, r1, #6
    ff5a:	f041 0101 	orr.w	r1, r1, #1
    ff5e:	f018 fe26 	bl	28bae <log_0>
		return -ENODEV;
    ff62:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    ff66:	4620      	mov	r0, r4
    ff68:	b002      	add	sp, #8
    ff6a:	bd70      	pop	{r4, r5, r6, pc}
    ff6c:	200002b0 	.word	0x200002b0
    ff70:	20000320 	.word	0x20000320
    ff74:	20000328 	.word	0x20000328
    ff78:	0002d948 	.word	0x0002d948
    ff7c:	0002d978 	.word	0x0002d978
    ff80:	00030383 	.word	0x00030383
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    ff84:	4621      	mov	r1, r4
    ff86:	aa01      	add	r2, sp, #4
    ff88:	f242 0003 	movw	r0, #8195	; 0x2003
    ff8c:	f006 fb36 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
    ff90:	4604      	mov	r4, r0
    ff92:	2800      	cmp	r0, #0
    ff94:	d1e7      	bne.n	ff66 <bt_init+0x10e>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    ff96:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    ff98:	48b9      	ldr	r0, [pc, #740]	; (10280 <bt_init+0x428>)
    ff9a:	6899      	ldr	r1, [r3, #8]
    ff9c:	2208      	movs	r2, #8
    ff9e:	3101      	adds	r1, #1
    ffa0:	f01a fd7b 	bl	2aa9a <memcpy>
	net_buf_unref(rsp);
    ffa4:	9801      	ldr	r0, [sp, #4]
    ffa6:	f00d fd83 	bl	1dab0 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    ffaa:	4621      	mov	r1, r4
    ffac:	aa01      	add	r2, sp, #4
    ffae:	f242 0002 	movw	r0, #8194	; 0x2002
    ffb2:	f006 fb23 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
    ffb6:	4604      	mov	r4, r0
    ffb8:	2800      	cmp	r0, #0
    ffba:	d1d4      	bne.n	ff66 <bt_init+0x10e>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    ffbc:	9b01      	ldr	r3, [sp, #4]
    ffbe:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    ffc0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    ffc4:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    ffc8:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    ffca:	b121      	cbz	r1, ffd6 <bt_init+0x17e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    ffcc:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    ffce:	48ad      	ldr	r0, [pc, #692]	; (10284 <bt_init+0x42c>)
    ffd0:	4611      	mov	r1, r2
    ffd2:	f01d f99e 	bl	2d312 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    ffd6:	9801      	ldr	r0, [sp, #4]
    ffd8:	f00d fd6a 	bl	1dab0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    ffdc:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    ffe0:	f016 0620 	ands.w	r6, r6, #32
    ffe4:	f000 8105 	beq.w	101f2 <bt_init+0x39a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    ffe8:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    ffec:	071b      	lsls	r3, r3, #28
    ffee:	d511      	bpl.n	10014 <bt_init+0x1bc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    fff0:	aa01      	add	r2, sp, #4
    fff2:	2100      	movs	r1, #0
    fff4:	f242 001c 	movw	r0, #8220	; 0x201c
    fff8:	f006 fb00 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
    fffc:	4604      	mov	r4, r0
    fffe:	2800      	cmp	r0, #0
   10000:	d1b1      	bne.n	ff66 <bt_init+0x10e>
		le_read_supp_states_complete(rsp);
   10002:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10004:	6883      	ldr	r3, [r0, #8]
   10006:	f853 2f01 	ldr.w	r2, [r3, #1]!
   1000a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1000c:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   10010:	f00d fd4e 	bl	1dab0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10014:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10018:	069e      	lsls	r6, r3, #26
   1001a:	d523      	bpl.n	10064 <bt_init+0x20c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1001c:	f10d 0102 	add.w	r1, sp, #2
   10020:	4668      	mov	r0, sp
   10022:	f006 fb63 	bl	166ec <hci_le_read_max_data_len>
		if (err) {
   10026:	4604      	mov	r4, r0
   10028:	2800      	cmp	r0, #0
   1002a:	d19c      	bne.n	ff66 <bt_init+0x10e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1002c:	2104      	movs	r1, #4
   1002e:	f242 0024 	movw	r0, #8228	; 0x2024
   10032:	f006 f977 	bl	16324 <bt_hci_cmd_create>
		if (!buf) {
   10036:	4606      	mov	r6, r0
   10038:	2800      	cmp	r0, #0
   1003a:	f000 80e1 	beq.w	10200 <bt_init+0x3a8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   1003e:	2104      	movs	r1, #4
   10040:	3008      	adds	r0, #8
   10042:	f00d fe65 	bl	1dd10 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10046:	f8bd 3000 	ldrh.w	r3, [sp]
   1004a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1004c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10050:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10052:	4622      	mov	r2, r4
   10054:	4631      	mov	r1, r6
   10056:	f242 0024 	movw	r0, #8228	; 0x2024
   1005a:	f006 facf 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
   1005e:	4604      	mov	r4, r0
   10060:	2800      	cmp	r0, #0
   10062:	d180      	bne.n	ff66 <bt_init+0x10e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10064:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10068:	065c      	lsls	r4, r3, #25
   1006a:	d510      	bpl.n	1008e <bt_init+0x236>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   1006c:	aa01      	add	r2, sp, #4
   1006e:	2100      	movs	r1, #0
   10070:	f242 002a 	movw	r0, #8234	; 0x202a
   10074:	f006 fac2 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
   10078:	4604      	mov	r4, r0
   1007a:	2800      	cmp	r0, #0
   1007c:	f47f af73 	bne.w	ff66 <bt_init+0x10e>
		le_read_resolving_list_size_complete(rsp);
   10080:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   10082:	6883      	ldr	r3, [r0, #8]
   10084:	785b      	ldrb	r3, [r3, #1]
   10086:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   1008a:	f00d fd11 	bl	1dab0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1008e:	2108      	movs	r1, #8
   10090:	f242 0001 	movw	r0, #8193	; 0x2001
   10094:	f006 f946 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   10098:	4604      	mov	r4, r0
   1009a:	2800      	cmp	r0, #0
   1009c:	f000 80b0 	beq.w	10200 <bt_init+0x3a8>
   100a0:	2108      	movs	r1, #8
   100a2:	4408      	add	r0, r1
   100a4:	f00d fe34 	bl	1dd10 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   100a8:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   100ac:	f011 0f40 	tst.w	r1, #64	; 0x40
   100b0:	4602      	mov	r2, r0
   100b2:	f240 2302 	movw	r3, #514	; 0x202
   100b6:	bf08      	it	eq
   100b8:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   100ba:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   100bc:	bf4c      	ite	mi
   100be:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   100c2:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   100c6:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100c8:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   100cc:	bf48      	it	mi
   100ce:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100d2:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   100d6:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   100da:	bf18      	it	ne
   100dc:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   100e0:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   100e4:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   100e6:	bf48      	it	mi
   100e8:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   100ec:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   100ee:	bf08      	it	eq
   100f0:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   100f4:	2100      	movs	r1, #0
   100f6:	f01a fe37 	bl	2ad68 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   100fa:	4621      	mov	r1, r4
   100fc:	2200      	movs	r2, #0
   100fe:	f242 0001 	movw	r0, #8193	; 0x2001
   10102:	f006 fa7b 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   10106:	4604      	mov	r4, r0
   10108:	2800      	cmp	r0, #0
   1010a:	f47f af2c 	bne.w	ff66 <bt_init+0x10e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1010e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   10112:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   10116:	0698      	lsls	r0, r3, #26
   10118:	f100 8087 	bmi.w	1022a <bt_init+0x3d2>
	if (bt_dev.le.acl_mtu) {
   1011c:	b9d9      	cbnz	r1, 10156 <bt_init+0x2fe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1011e:	aa01      	add	r2, sp, #4
   10120:	f241 0005 	movw	r0, #4101	; 0x1005
   10124:	f006 fa6a 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   10128:	4604      	mov	r4, r0
   1012a:	2800      	cmp	r0, #0
   1012c:	f47f af1b 	bne.w	ff66 <bt_init+0x10e>
	if (bt_dev.le.acl_mtu) {
   10130:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   10134:	b963      	cbnz	r3, 10150 <bt_init+0x2f8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   10136:	9b01      	ldr	r3, [sp, #4]
   10138:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1013a:	785a      	ldrb	r2, [r3, #1]
   1013c:	7899      	ldrb	r1, [r3, #2]
   1013e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10142:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10146:	889a      	ldrh	r2, [r3, #4]
   10148:	484e      	ldr	r0, [pc, #312]	; (10284 <bt_init+0x42c>)
   1014a:	4611      	mov	r1, r2
   1014c:	f01d f8e1 	bl	2d312 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10150:	9801      	ldr	r0, [sp, #4]
   10152:	f00d fcad 	bl	1dab0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10156:	2108      	movs	r1, #8
   10158:	f640 4001 	movw	r0, #3073	; 0xc01
   1015c:	f006 f8e2 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   10160:	4604      	mov	r4, r0
   10162:	2800      	cmp	r0, #0
   10164:	d04c      	beq.n	10200 <bt_init+0x3a8>
   10166:	2108      	movs	r1, #8
   10168:	4408      	add	r0, r1
   1016a:	f00d fdd1 	bl	1dd10 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1016e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10172:	07d9      	lsls	r1, r3, #31
   10174:	4602      	mov	r2, r0
   10176:	d567      	bpl.n	10248 <bt_init+0x3f0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10178:	a13f      	add	r1, pc, #252	; (adr r1, 10278 <bt_init+0x420>)
   1017a:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   1017e:	f01a fdf3 	bl	2ad68 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10182:	4621      	mov	r1, r4
   10184:	2200      	movs	r2, #0
   10186:	f640 4001 	movw	r0, #3073	; 0xc01
   1018a:	f006 fa37 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   1018e:	4604      	mov	r4, r0
   10190:	2800      	cmp	r0, #0
   10192:	f47f aee8 	bne.w	ff66 <bt_init+0x10e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10196:	4601      	mov	r1, r0
   10198:	aa01      	add	r2, sp, #4
   1019a:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1019e:	f006 fa2d 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   101a2:	4604      	mov	r4, r0
   101a4:	2800      	cmp	r0, #0
   101a6:	d053      	beq.n	10250 <bt_init+0x3f8>
   101a8:	4937      	ldr	r1, [pc, #220]	; (10288 <bt_init+0x430>)
   101aa:	4b38      	ldr	r3, [pc, #224]	; (1028c <bt_init+0x434>)
		BT_WARN("Vendor HCI extensions not available");
   101ac:	4838      	ldr	r0, [pc, #224]	; (10290 <bt_init+0x438>)
   101ae:	1ac9      	subs	r1, r1, r3
   101b0:	08c9      	lsrs	r1, r1, #3
   101b2:	0189      	lsls	r1, r1, #6
   101b4:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
   101b8:	f018 fcf9 	bl	28bae <log_0>
	err = bt_id_init();
   101bc:	f01a ff58 	bl	2b070 <bt_id_init>
	if (err) {
   101c0:	4604      	mov	r4, r0
   101c2:	2800      	cmp	r0, #0
   101c4:	f47f aecf 	bne.w	ff66 <bt_init+0x10e>
		err = bt_conn_init();
   101c8:	f008 fd86 	bl	18cd8 <bt_conn_init>
		if (err) {
   101cc:	4604      	mov	r4, r0
   101ce:	2800      	cmp	r0, #0
   101d0:	f47f aec9 	bne.w	ff66 <bt_init+0x10e>
		if (!bt_dev.id_count) {
   101d4:	79eb      	ldrb	r3, [r5, #7]
   101d6:	2b00      	cmp	r3, #0
   101d8:	f040 808e 	bne.w	102f8 <bt_init+0x4a0>
   101dc:	4b2b      	ldr	r3, [pc, #172]	; (1028c <bt_init+0x434>)
   101de:	492a      	ldr	r1, [pc, #168]	; (10288 <bt_init+0x430>)
			BT_INFO("No ID address. App must call settings_load()");
   101e0:	482c      	ldr	r0, [pc, #176]	; (10294 <bt_init+0x43c>)
   101e2:	1ac9      	subs	r1, r1, r3
   101e4:	08c9      	lsrs	r1, r1, #3
   101e6:	0189      	lsls	r1, r1, #6
   101e8:	f041 0103 	orr.w	r1, r1, #3
   101ec:	f018 fcdf 	bl	28bae <log_0>
			return 0;
   101f0:	e6b9      	b.n	ff66 <bt_init+0x10e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   101f2:	2102      	movs	r1, #2
   101f4:	f640 406d 	movw	r0, #3181	; 0xc6d
   101f8:	f006 f894 	bl	16324 <bt_hci_cmd_create>
		if (!buf) {
   101fc:	4604      	mov	r4, r0
   101fe:	b910      	cbnz	r0, 10206 <bt_init+0x3ae>
		return -ENOBUFS;
   10200:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10204:	e6af      	b.n	ff66 <bt_init+0x10e>
   10206:	2102      	movs	r1, #2
   10208:	3008      	adds	r0, #8
   1020a:	f00d fd81 	bl	1dd10 <net_buf_simple_add>
		cp_le->le = 0x01;
   1020e:	2301      	movs	r3, #1
   10210:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10212:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10214:	4621      	mov	r1, r4
   10216:	4632      	mov	r2, r6
   10218:	f640 406d 	movw	r0, #3181	; 0xc6d
   1021c:	f006 f9ee 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
   10220:	4604      	mov	r4, r0
   10222:	2800      	cmp	r0, #0
   10224:	f43f aee0 	beq.w	ffe8 <bt_init+0x190>
   10228:	e69d      	b.n	ff66 <bt_init+0x10e>
	else if (!bt_dev.le.acl_mtu) {
   1022a:	2900      	cmp	r1, #0
   1022c:	d193      	bne.n	10156 <bt_init+0x2fe>
   1022e:	4b17      	ldr	r3, [pc, #92]	; (1028c <bt_init+0x434>)
   10230:	4915      	ldr	r1, [pc, #84]	; (10288 <bt_init+0x430>)
		BT_ERR("ACL BR/EDR buffers not initialized");
   10232:	4819      	ldr	r0, [pc, #100]	; (10298 <bt_init+0x440>)
   10234:	1ac9      	subs	r1, r1, r3
   10236:	08c9      	lsrs	r1, r1, #3
   10238:	0189      	lsls	r1, r1, #6
   1023a:	f041 0101 	orr.w	r1, r1, #1
   1023e:	f018 fcb6 	bl	28bae <log_0>
		return -EIO;
   10242:	f06f 0404 	mvn.w	r4, #4
   10246:	e68e      	b.n	ff66 <bt_init+0x10e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10248:	4814      	ldr	r0, [pc, #80]	; (1029c <bt_init+0x444>)
   1024a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1024e:	e796      	b.n	1017e <bt_init+0x326>
	net_buf_unref(rsp);
   10250:	9801      	ldr	r0, [sp, #4]
   10252:	f00d fc2d 	bl	1dab0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10256:	4621      	mov	r1, r4
   10258:	aa01      	add	r2, sp, #4
   1025a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1025e:	f006 f9cd 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   10262:	4604      	mov	r4, r0
   10264:	b1f0      	cbz	r0, 102a4 <bt_init+0x44c>
   10266:	4908      	ldr	r1, [pc, #32]	; (10288 <bt_init+0x430>)
   10268:	4b08      	ldr	r3, [pc, #32]	; (1028c <bt_init+0x434>)
		BT_WARN("Failed to read supported vendor commands");
   1026a:	480d      	ldr	r0, [pc, #52]	; (102a0 <bt_init+0x448>)
   1026c:	1ac9      	subs	r1, r1, r3
   1026e:	08c9      	lsrs	r1, r1, #3
   10270:	0189      	lsls	r1, r1, #6
   10272:	f041 0102 	orr.w	r1, r1, #2
   10276:	e79f      	b.n	101b8 <bt_init+0x360>
   10278:	02008890 	.word	0x02008890
   1027c:	20008000 	.word	0x20008000
   10280:	20000380 	.word	0x20000380
   10284:	200003b0 	.word	0x200003b0
   10288:	0002d978 	.word	0x0002d978
   1028c:	0002d948 	.word	0x0002d948
   10290:	000303ca 	.word	0x000303ca
   10294:	00030440 	.word	0x00030440
   10298:	000303a7 	.word	0x000303a7
   1029c:	02008810 	.word	0x02008810
   102a0:	000303ee 	.word	0x000303ee
	rp.cmds = (void *)rsp->data;
   102a4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   102a6:	4818      	ldr	r0, [pc, #96]	; (10308 <bt_init+0x4b0>)
   102a8:	6899      	ldr	r1, [r3, #8]
   102aa:	2202      	movs	r2, #2
   102ac:	3101      	adds	r1, #1
   102ae:	f01a fbf4 	bl	2aa9a <memcpy>
	net_buf_unref(rsp);
   102b2:	9801      	ldr	r0, [sp, #4]
   102b4:	f00d fbfc 	bl	1dab0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   102b8:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   102bc:	075b      	lsls	r3, r3, #29
   102be:	f57f af7d 	bpl.w	101bc <bt_init+0x364>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   102c2:	aa01      	add	r2, sp, #4
   102c4:	4621      	mov	r1, r4
   102c6:	f64f 4003 	movw	r0, #64515	; 0xfc03
   102ca:	f006 f997 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
   102ce:	b140      	cbz	r0, 102e2 <bt_init+0x48a>
   102d0:	490e      	ldr	r1, [pc, #56]	; (1030c <bt_init+0x4b4>)
   102d2:	4b0f      	ldr	r3, [pc, #60]	; (10310 <bt_init+0x4b8>)
			BT_WARN("Failed to read supported vendor features");
   102d4:	480f      	ldr	r0, [pc, #60]	; (10314 <bt_init+0x4bc>)
   102d6:	1ac9      	subs	r1, r1, r3
   102d8:	08c9      	lsrs	r1, r1, #3
   102da:	0189      	lsls	r1, r1, #6
   102dc:	f041 0102 	orr.w	r1, r1, #2
   102e0:	e76a      	b.n	101b8 <bt_init+0x360>
		rp.feat = (void *)rsp->data;
   102e2:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   102e4:	480c      	ldr	r0, [pc, #48]	; (10318 <bt_init+0x4c0>)
   102e6:	6899      	ldr	r1, [r3, #8]
   102e8:	2201      	movs	r2, #1
   102ea:	4411      	add	r1, r2
   102ec:	f01a fbd5 	bl	2aa9a <memcpy>
		net_buf_unref(rsp);
   102f0:	9801      	ldr	r0, [sp, #4]
   102f2:	f00d fbdd 	bl	1dab0 <net_buf_unref>
   102f6:	e761      	b.n	101bc <bt_init+0x364>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   102f8:	2104      	movs	r1, #4
   102fa:	4808      	ldr	r0, [pc, #32]	; (1031c <bt_init+0x4c4>)
   102fc:	f01a fd25 	bl	2ad4a <atomic_or>
	bt_finalize_init();
   10300:	f006 fcb6 	bl	16c70 <bt_finalize_init>
	return 0;
   10304:	e62f      	b.n	ff66 <bt_init+0x10e>
   10306:	bf00      	nop
   10308:	20000369 	.word	0x20000369
   1030c:	0002d978 	.word	0x0002d978
   10310:	0002d948 	.word	0x0002d948
   10314:	00030417 	.word	0x00030417
   10318:	20000368 	.word	0x20000368
   1031c:	2000037c 	.word	0x2000037c

00010320 <bt_send_enabled>:
	.received = bt_receive_cb,
};
*/

void bt_send_enabled(enum bt_nus_send_status status)
{
   10320:	b538      	push	{r3, r4, r5, lr}
   10322:	4a0b      	ldr	r2, [pc, #44]	; (10350 <bt_send_enabled+0x30>)
   10324:	4c0b      	ldr	r4, [pc, #44]	; (10354 <bt_send_enabled+0x34>)
   10326:	1aa4      	subs	r4, r4, r2
   10328:	08e4      	lsrs	r4, r4, #3
    LOG_INF("notification callback");
   1032a:	01a4      	lsls	r4, r4, #6
   1032c:	f044 0403 	orr.w	r4, r4, #3
{
   10330:	4605      	mov	r5, r0
    LOG_INF("notification callback");
   10332:	4621      	mov	r1, r4
   10334:	4808      	ldr	r0, [pc, #32]	; (10358 <bt_send_enabled+0x38>)
   10336:	f018 fc3a 	bl	28bae <log_0>
    LOG_INF("notifications %s", (status==BT_NUS_SEND_STATUS_ENABLED)?"enabled":"disabled");
   1033a:	4b08      	ldr	r3, [pc, #32]	; (1035c <bt_send_enabled+0x3c>)
   1033c:	4908      	ldr	r1, [pc, #32]	; (10360 <bt_send_enabled+0x40>)
   1033e:	4809      	ldr	r0, [pc, #36]	; (10364 <bt_send_enabled+0x44>)
   10340:	4622      	mov	r2, r4
   10342:	2d00      	cmp	r5, #0
   10344:	bf08      	it	eq
   10346:	4619      	moveq	r1, r3
}
   10348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    LOG_INF("notifications %s", (status==BT_NUS_SEND_STATUS_ENABLED)?"enabled":"disabled");
   1034c:	f018 bc3c 	b.w	28bc8 <log_1>
   10350:	0002d948 	.word	0x0002d948
   10354:	0002da18 	.word	0x0002da18
   10358:	0002e4f0 	.word	0x0002e4f0
   1035c:	0002e506 	.word	0x0002e506
   10360:	0002e50e 	.word	0x0002e50e
   10364:	0002e517 	.word	0x0002e517

00010368 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10368:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1036a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1036c:	b08a      	sub	sp, #40	; 0x28
   1036e:	4604      	mov	r4, r0
   10370:	460e      	mov	r6, r1
   10372:	ad07      	add	r5, sp, #28
   10374:	2b03      	cmp	r3, #3
   10376:	d820      	bhi.n	103ba <bt_addr_le_to_str.constprop.0+0x52>
   10378:	e8df f003 	tbb	[pc, r3]
   1037c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10380:	4911      	ldr	r1, [pc, #68]	; (103c8 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10382:	4628      	mov	r0, r5
   10384:	f01a fb11 	bl	2a9aa <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10388:	7863      	ldrb	r3, [r4, #1]
   1038a:	9304      	str	r3, [sp, #16]
   1038c:	78a3      	ldrb	r3, [r4, #2]
   1038e:	9303      	str	r3, [sp, #12]
   10390:	78e3      	ldrb	r3, [r4, #3]
   10392:	9302      	str	r3, [sp, #8]
   10394:	7923      	ldrb	r3, [r4, #4]
   10396:	9301      	str	r3, [sp, #4]
   10398:	7963      	ldrb	r3, [r4, #5]
   1039a:	9300      	str	r3, [sp, #0]
   1039c:	4a0b      	ldr	r2, [pc, #44]	; (103cc <bt_addr_le_to_str.constprop.0+0x64>)
   1039e:	79a3      	ldrb	r3, [r4, #6]
   103a0:	9505      	str	r5, [sp, #20]
   103a2:	211e      	movs	r1, #30
   103a4:	4630      	mov	r0, r6
   103a6:	f018 f9f0 	bl	2878a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   103aa:	b00a      	add	sp, #40	; 0x28
   103ac:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   103ae:	4908      	ldr	r1, [pc, #32]	; (103d0 <bt_addr_le_to_str.constprop.0+0x68>)
   103b0:	e7e7      	b.n	10382 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
   103b2:	4908      	ldr	r1, [pc, #32]	; (103d4 <bt_addr_le_to_str.constprop.0+0x6c>)
   103b4:	e7e5      	b.n	10382 <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
   103b6:	4908      	ldr	r1, [pc, #32]	; (103d8 <bt_addr_le_to_str.constprop.0+0x70>)
   103b8:	e7e3      	b.n	10382 <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   103ba:	4a08      	ldr	r2, [pc, #32]	; (103dc <bt_addr_le_to_str.constprop.0+0x74>)
   103bc:	210a      	movs	r1, #10
   103be:	4628      	mov	r0, r5
   103c0:	f018 f9e3 	bl	2878a <snprintk>
		break;
   103c4:	e7e0      	b.n	10388 <bt_addr_le_to_str.constprop.0+0x20>
   103c6:	bf00      	nop
   103c8:	0002e528 	.word	0x0002e528
   103cc:	0002e54a 	.word	0x0002e54a
   103d0:	0002e52f 	.word	0x0002e52f
   103d4:	0002e536 	.word	0x0002e536
   103d8:	0002e540 	.word	0x0002e540
   103dc:	0003157b 	.word	0x0003157b

000103e0 <auth_passkey_confirm>:
{
   103e0:	b530      	push	{r4, r5, lr}
   103e2:	b089      	sub	sp, #36	; 0x24
   103e4:	460d      	mov	r5, r1
   103e6:	4604      	mov	r4, r0
	auth_conn = bt_conn_ref(conn);
   103e8:	f01a ff5f 	bl	2b2aa <bt_conn_ref>
   103ec:	4b0e      	ldr	r3, [pc, #56]	; (10428 <auth_passkey_confirm+0x48>)
   103ee:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   103f0:	4620      	mov	r0, r4
   103f2:	f01b f819 	bl	2b428 <bt_conn_get_dst>
   103f6:	4669      	mov	r1, sp
   103f8:	f7ff ffb6 	bl	10368 <bt_addr_le_to_str.constprop.0>
   103fc:	4c0b      	ldr	r4, [pc, #44]	; (1042c <auth_passkey_confirm+0x4c>)
   103fe:	4b0c      	ldr	r3, [pc, #48]	; (10430 <auth_passkey_confirm+0x50>)
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   10400:	4668      	mov	r0, sp
   10402:	1ae4      	subs	r4, r4, r3
   10404:	08e4      	lsrs	r4, r4, #3
   10406:	f001 ffcb 	bl	123a0 <z_log_strdup>
	LOG_INF("Passkey for %s: %06u", log_strdup(addr), passkey);
   1040a:	01a4      	lsls	r4, r4, #6
   1040c:	f044 0403 	orr.w	r4, r4, #3
   10410:	4601      	mov	r1, r0
   10412:	4623      	mov	r3, r4
   10414:	462a      	mov	r2, r5
   10416:	4807      	ldr	r0, [pc, #28]	; (10434 <auth_passkey_confirm+0x54>)
   10418:	f018 fbea 	bl	28bf0 <log_2>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
   1041c:	4806      	ldr	r0, [pc, #24]	; (10438 <auth_passkey_confirm+0x58>)
   1041e:	4621      	mov	r1, r4
   10420:	f018 fbc5 	bl	28bae <log_0>
}
   10424:	b009      	add	sp, #36	; 0x24
   10426:	bd30      	pop	{r4, r5, pc}
   10428:	20002328 	.word	0x20002328
   1042c:	0002da18 	.word	0x0002da18
   10430:	0002d948 	.word	0x0002d948
   10434:	0002e56d 	.word	0x0002e56d
   10438:	0002e582 	.word	0x0002e582

0001043c <connected>:
{
   1043c:	b530      	push	{r4, r5, lr}
   1043e:	4a12      	ldr	r2, [pc, #72]	; (10488 <connected+0x4c>)
   10440:	4c12      	ldr	r4, [pc, #72]	; (1048c <connected+0x50>)
   10442:	1aa4      	subs	r4, r4, r2
   10444:	08e4      	lsrs	r4, r4, #3
   10446:	b089      	sub	sp, #36	; 0x24
   10448:	4605      	mov	r5, r0
   1044a:	01a4      	lsls	r4, r4, #6
	if (err) {
   1044c:	b131      	cbz	r1, 1045c <connected+0x20>
		LOG_ERR("Connection failed (err %u)", err);
   1044e:	4810      	ldr	r0, [pc, #64]	; (10490 <connected+0x54>)
   10450:	f044 0201 	orr.w	r2, r4, #1
   10454:	f018 fbb8 	bl	28bc8 <log_1>
}
   10458:	b009      	add	sp, #36	; 0x24
   1045a:	bd30      	pop	{r4, r5, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1045c:	f01a ffe4 	bl	2b428 <bt_conn_get_dst>
   10460:	4669      	mov	r1, sp
   10462:	f7ff ff81 	bl	10368 <bt_addr_le_to_str.constprop.0>
   10466:	4668      	mov	r0, sp
   10468:	f001 ff9a 	bl	123a0 <z_log_strdup>
	LOG_INF("Connected %s", log_strdup(addr));
   1046c:	f044 0403 	orr.w	r4, r4, #3
   10470:	4601      	mov	r1, r0
   10472:	4622      	mov	r2, r4
   10474:	4807      	ldr	r0, [pc, #28]	; (10494 <connected+0x58>)
   10476:	f018 fba7 	bl	28bc8 <log_1>
	current_conn = bt_conn_ref(conn);
   1047a:	4628      	mov	r0, r5
   1047c:	f01a ff15 	bl	2b2aa <bt_conn_ref>
   10480:	4b05      	ldr	r3, [pc, #20]	; (10498 <connected+0x5c>)
   10482:	6018      	str	r0, [r3, #0]
   10484:	e7e8      	b.n	10458 <connected+0x1c>
   10486:	bf00      	nop
   10488:	0002d948 	.word	0x0002d948
   1048c:	0002da18 	.word	0x0002da18
   10490:	0002e5b1 	.word	0x0002e5b1
   10494:	0002e5cc 	.word	0x0002e5cc
   10498:	20002330 	.word	0x20002330

0001049c <auth_cancel>:
{
   1049c:	b510      	push	{r4, lr}
   1049e:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   104a0:	f01a ffc2 	bl	2b428 <bt_conn_get_dst>
   104a4:	4669      	mov	r1, sp
   104a6:	f7ff ff5f 	bl	10368 <bt_addr_le_to_str.constprop.0>
   104aa:	4c08      	ldr	r4, [pc, #32]	; (104cc <auth_cancel+0x30>)
   104ac:	4a08      	ldr	r2, [pc, #32]	; (104d0 <auth_cancel+0x34>)
   104ae:	4668      	mov	r0, sp
   104b0:	1aa4      	subs	r4, r4, r2
   104b2:	08e4      	lsrs	r4, r4, #3
   104b4:	f001 ff74 	bl	123a0 <z_log_strdup>
	LOG_INF("Pairing cancelled: %s", log_strdup(addr));
   104b8:	01a4      	lsls	r4, r4, #6
   104ba:	f044 0403 	orr.w	r4, r4, #3
   104be:	4601      	mov	r1, r0
   104c0:	4622      	mov	r2, r4
   104c2:	4804      	ldr	r0, [pc, #16]	; (104d4 <auth_cancel+0x38>)
   104c4:	f018 fb80 	bl	28bc8 <log_1>
}
   104c8:	b008      	add	sp, #32
   104ca:	bd10      	pop	{r4, pc}
   104cc:	0002da18 	.word	0x0002da18
   104d0:	0002d948 	.word	0x0002d948
   104d4:	0002e5d9 	.word	0x0002e5d9

000104d8 <disconnected>:
{
   104d8:	b530      	push	{r4, r5, lr}
   104da:	b089      	sub	sp, #36	; 0x24
   104dc:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   104de:	f01a ffa3 	bl	2b428 <bt_conn_get_dst>
   104e2:	4669      	mov	r1, sp
   104e4:	f7ff ff40 	bl	10368 <bt_addr_le_to_str.constprop.0>
   104e8:	4c0f      	ldr	r4, [pc, #60]	; (10528 <disconnected+0x50>)
   104ea:	4b10      	ldr	r3, [pc, #64]	; (1052c <disconnected+0x54>)
   104ec:	1ae4      	subs	r4, r4, r3
   104ee:	08e4      	lsrs	r4, r4, #3
   104f0:	4668      	mov	r0, sp
   104f2:	f001 ff55 	bl	123a0 <z_log_strdup>
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr), reason);
   104f6:	01a4      	lsls	r4, r4, #6
   104f8:	f044 0403 	orr.w	r4, r4, #3
   104fc:	4623      	mov	r3, r4
	if (auth_conn) {
   104fe:	4c0c      	ldr	r4, [pc, #48]	; (10530 <disconnected+0x58>)
   10500:	4601      	mov	r1, r0
	LOG_INF("Disconnected: %s (reason %u)", log_strdup(addr), reason);
   10502:	462a      	mov	r2, r5
   10504:	480b      	ldr	r0, [pc, #44]	; (10534 <disconnected+0x5c>)
   10506:	f018 fb73 	bl	28bf0 <log_2>
	if (auth_conn) {
   1050a:	6820      	ldr	r0, [r4, #0]
   1050c:	b118      	cbz	r0, 10516 <disconnected+0x3e>
		bt_conn_unref(auth_conn);
   1050e:	f007 ff13 	bl	18338 <bt_conn_unref>
		auth_conn = NULL;
   10512:	2300      	movs	r3, #0
   10514:	6023      	str	r3, [r4, #0]
	if (current_conn) {
   10516:	4c08      	ldr	r4, [pc, #32]	; (10538 <disconnected+0x60>)
   10518:	6820      	ldr	r0, [r4, #0]
   1051a:	b118      	cbz	r0, 10524 <disconnected+0x4c>
		bt_conn_unref(current_conn);
   1051c:	f007 ff0c 	bl	18338 <bt_conn_unref>
		current_conn = NULL;
   10520:	2300      	movs	r3, #0
   10522:	6023      	str	r3, [r4, #0]
}
   10524:	b009      	add	sp, #36	; 0x24
   10526:	bd30      	pop	{r4, r5, pc}
   10528:	0002da18 	.word	0x0002da18
   1052c:	0002d948 	.word	0x0002d948
   10530:	20002328 	.word	0x20002328
   10534:	0002e5ef 	.word	0x0002e5ef
   10538:	20002330 	.word	0x20002330

0001053c <auth_passkey_display>:
{
   1053c:	b530      	push	{r4, r5, lr}
   1053e:	b089      	sub	sp, #36	; 0x24
   10540:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10542:	f01a ff71 	bl	2b428 <bt_conn_get_dst>
   10546:	4669      	mov	r1, sp
   10548:	f7ff ff0e 	bl	10368 <bt_addr_le_to_str.constprop.0>
   1054c:	4c08      	ldr	r4, [pc, #32]	; (10570 <auth_passkey_display+0x34>)
   1054e:	4b09      	ldr	r3, [pc, #36]	; (10574 <auth_passkey_display+0x38>)
   10550:	4668      	mov	r0, sp
   10552:	1ae4      	subs	r4, r4, r3
   10554:	08e4      	lsrs	r4, r4, #3
   10556:	f001 ff23 	bl	123a0 <z_log_strdup>
	LOG_INF("Passkey for %s: %06u", log_strdup(addr), passkey);
   1055a:	01a4      	lsls	r4, r4, #6
   1055c:	f044 0403 	orr.w	r4, r4, #3
   10560:	4601      	mov	r1, r0
   10562:	4623      	mov	r3, r4
   10564:	4804      	ldr	r0, [pc, #16]	; (10578 <auth_passkey_display+0x3c>)
   10566:	462a      	mov	r2, r5
   10568:	f018 fb42 	bl	28bf0 <log_2>
}
   1056c:	b009      	add	sp, #36	; 0x24
   1056e:	bd30      	pop	{r4, r5, pc}
   10570:	0002da18 	.word	0x0002da18
   10574:	0002d948 	.word	0x0002d948
   10578:	0002e56d 	.word	0x0002e56d

0001057c <pairing_complete>:
{
   1057c:	b530      	push	{r4, r5, lr}
   1057e:	b089      	sub	sp, #36	; 0x24
   10580:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10582:	f01a ff51 	bl	2b428 <bt_conn_get_dst>
   10586:	4669      	mov	r1, sp
   10588:	f7ff feee 	bl	10368 <bt_addr_le_to_str.constprop.0>
   1058c:	4c08      	ldr	r4, [pc, #32]	; (105b0 <pairing_complete+0x34>)
   1058e:	4b09      	ldr	r3, [pc, #36]	; (105b4 <pairing_complete+0x38>)
   10590:	4668      	mov	r0, sp
   10592:	1ae4      	subs	r4, r4, r3
   10594:	08e4      	lsrs	r4, r4, #3
   10596:	f001 ff03 	bl	123a0 <z_log_strdup>
	LOG_INF("Pairing completed: %s, bonded: %d", log_strdup(addr),
   1059a:	01a4      	lsls	r4, r4, #6
   1059c:	f044 0403 	orr.w	r4, r4, #3
   105a0:	4601      	mov	r1, r0
   105a2:	4623      	mov	r3, r4
   105a4:	4804      	ldr	r0, [pc, #16]	; (105b8 <pairing_complete+0x3c>)
   105a6:	462a      	mov	r2, r5
   105a8:	f018 fb22 	bl	28bf0 <log_2>
}
   105ac:	b009      	add	sp, #36	; 0x24
   105ae:	bd30      	pop	{r4, r5, pc}
   105b0:	0002da18 	.word	0x0002da18
   105b4:	0002d948 	.word	0x0002d948
   105b8:	0002e60c 	.word	0x0002e60c

000105bc <pairing_failed>:
{
   105bc:	b530      	push	{r4, r5, lr}
   105be:	b089      	sub	sp, #36	; 0x24
   105c0:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   105c2:	f01a ff31 	bl	2b428 <bt_conn_get_dst>
   105c6:	4669      	mov	r1, sp
   105c8:	f7ff fece 	bl	10368 <bt_addr_le_to_str.constprop.0>
   105cc:	4c08      	ldr	r4, [pc, #32]	; (105f0 <pairing_failed+0x34>)
   105ce:	4b09      	ldr	r3, [pc, #36]	; (105f4 <pairing_failed+0x38>)
   105d0:	4668      	mov	r0, sp
   105d2:	1ae4      	subs	r4, r4, r3
   105d4:	08e4      	lsrs	r4, r4, #3
   105d6:	f001 fee3 	bl	123a0 <z_log_strdup>
	LOG_INF("Pairing failed conn: %s, reason %d", log_strdup(addr),
   105da:	01a4      	lsls	r4, r4, #6
   105dc:	f044 0403 	orr.w	r4, r4, #3
   105e0:	4601      	mov	r1, r0
   105e2:	4623      	mov	r3, r4
   105e4:	4804      	ldr	r0, [pc, #16]	; (105f8 <pairing_failed+0x3c>)
   105e6:	462a      	mov	r2, r5
   105e8:	f018 fb02 	bl	28bf0 <log_2>
}
   105ec:	b009      	add	sp, #36	; 0x24
   105ee:	bd30      	pop	{r4, r5, pc}
   105f0:	0002da18 	.word	0x0002da18
   105f4:	0002d948 	.word	0x0002d948
   105f8:	0002e62e 	.word	0x0002e62e

000105fc <security_changed>:
{
   105fc:	b570      	push	{r4, r5, r6, lr}
   105fe:	b08a      	sub	sp, #40	; 0x28
   10600:	460d      	mov	r5, r1
   10602:	4616      	mov	r6, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10604:	f01a ff10 	bl	2b428 <bt_conn_get_dst>
   10608:	a902      	add	r1, sp, #8
   1060a:	f7ff fead 	bl	10368 <bt_addr_le_to_str.constprop.0>
	if (!err) {
   1060e:	4810      	ldr	r0, [pc, #64]	; (10650 <security_changed+0x54>)
   10610:	4b10      	ldr	r3, [pc, #64]	; (10654 <security_changed+0x58>)
   10612:	1ac0      	subs	r0, r0, r3
   10614:	08c0      	lsrs	r0, r0, #3
   10616:	0180      	lsls	r0, r0, #6
   10618:	b966      	cbnz	r6, 10634 <security_changed+0x38>
		LOG_INF("Security changed: %s level %u", log_strdup(addr),
   1061a:	f040 0403 	orr.w	r4, r0, #3
   1061e:	a802      	add	r0, sp, #8
   10620:	f001 febe 	bl	123a0 <z_log_strdup>
   10624:	4623      	mov	r3, r4
   10626:	4601      	mov	r1, r0
   10628:	462a      	mov	r2, r5
   1062a:	480b      	ldr	r0, [pc, #44]	; (10658 <security_changed+0x5c>)
   1062c:	f018 fae0 	bl	28bf0 <log_2>
}
   10630:	b00a      	add	sp, #40	; 0x28
   10632:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", log_strdup(addr),
   10634:	f040 0402 	orr.w	r4, r0, #2
   10638:	a802      	add	r0, sp, #8
   1063a:	f001 feb1 	bl	123a0 <z_log_strdup>
   1063e:	f8ad 4000 	strh.w	r4, [sp]
   10642:	4601      	mov	r1, r0
   10644:	4633      	mov	r3, r6
   10646:	4805      	ldr	r0, [pc, #20]	; (1065c <security_changed+0x60>)
   10648:	462a      	mov	r2, r5
   1064a:	f018 faea 	bl	28c22 <log_3>
}
   1064e:	e7ef      	b.n	10630 <security_changed+0x34>
   10650:	0002da18 	.word	0x0002da18
   10654:	0002d948 	.word	0x0002d948
   10658:	0002e651 	.word	0x0002e651
   1065c:	0002e66f 	.word	0x0002e66f

00010660 <ble_write_thread>:

    }
}

void ble_write_thread(void)
{
   10660:	b510      	push	{r4, lr}
   10662:	b086      	sub	sp, #24
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   10664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1066c:	481b      	ldr	r0, [pc, #108]	; (106dc <ble_write_thread+0x7c>)
   1066e:	4c1c      	ldr	r4, [pc, #112]	; (106e0 <ble_write_thread+0x80>)
   10670:	f012 fa36 	bl	22ae0 <z_impl_k_sem_take>
	/*
	uint8_t buffer = 67;
	const uint8_t *p = &buffer;
	uint16_t len = sizeof(buffer)/sizeof(uint8_t);
	*/
	unsigned char message[5] = {0x80,0x80,0x90,0x3C,0x7F};
   10674:	4b1b      	ldr	r3, [pc, #108]	; (106e4 <ble_write_thread+0x84>)
	unsigned char messages[11] = {0x80,0x80,0x90,0x3C,0x7F,0x80,0x90,0x40,0x7F,0x44,0x7F};
   10676:	4a1c      	ldr	r2, [pc, #112]	; (106e8 <ble_write_thread+0x88>)
	unsigned char message[5] = {0x80,0x80,0x90,0x3C,0x7F};
   10678:	6818      	ldr	r0, [r3, #0]
	unsigned char messages[11] = {0x80,0x80,0x90,0x3C,0x7F,0x80,0x90,0x40,0x7F,0x44,0x7F};
   1067a:	6851      	ldr	r1, [r2, #4]
	unsigned char message[5] = {0x80,0x80,0x90,0x3C,0x7F};
   1067c:	791b      	ldrb	r3, [r3, #4]
   1067e:	9001      	str	r0, [sp, #4]
	unsigned char messages[11] = {0x80,0x80,0x90,0x3C,0x7F,0x80,0x90,0x40,0x7F,0x44,0x7F};
   10680:	6810      	ldr	r0, [r2, #0]
	unsigned char message[5] = {0x80,0x80,0x90,0x3C,0x7F};
   10682:	f88d 3008 	strb.w	r3, [sp, #8]
	unsigned char messages[11] = {0x80,0x80,0x90,0x3C,0x7F,0x80,0x90,0x40,0x7F,0x44,0x7F};
   10686:	ab03      	add	r3, sp, #12
   10688:	c303      	stmia	r3!, {r0, r1}
   1068a:	8911      	ldrh	r1, [r2, #8]
   1068c:	7a92      	ldrb	r2, [r2, #10]
   1068e:	8019      	strh	r1, [r3, #0]
   10690:	709a      	strb	r2, [r3, #2]
   10692:	4b16      	ldr	r3, [pc, #88]	; (106ec <ble_write_thread+0x8c>)
   10694:	1ae4      	subs	r4, r4, r3
   10696:	08e4      	lsrs	r4, r4, #3
			LOG_WRN("Failed to send data over BLE connection");
		}
*/

		if (bt_nus_send(NULL, message, sizeof(message))) {
			LOG_WRN("Failed to send data over BLE connection");
   10698:	01a4      	lsls	r4, r4, #6
   1069a:	f044 0402 	orr.w	r4, r4, #2
		if (bt_nus_send(NULL, message, sizeof(message))) {
   1069e:	2205      	movs	r2, #5
   106a0:	a901      	add	r1, sp, #4
   106a2:	2000      	movs	r0, #0
   106a4:	f000 fa90 	bl	10bc8 <bt_nus_send>
   106a8:	b118      	cbz	r0, 106b2 <ble_write_thread+0x52>
			LOG_WRN("Failed to send data over BLE connection");
   106aa:	4811      	ldr	r0, [pc, #68]	; (106f0 <ble_write_thread+0x90>)
   106ac:	4621      	mov	r1, r4
   106ae:	f018 fa7e 	bl	28bae <log_0>
	return z_impl_k_sleep(timeout);
   106b2:	2100      	movs	r1, #0
   106b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   106b8:	f014 f8c6 	bl	24848 <z_impl_k_sleep>
		}
		// printk("midi message: C\n");
		k_sleep(K_MSEC(1000));

		if (bt_nus_send(NULL, messages, sizeof(messages))) {
   106bc:	220b      	movs	r2, #11
   106be:	a903      	add	r1, sp, #12
   106c0:	2000      	movs	r0, #0
   106c2:	f000 fa81 	bl	10bc8 <bt_nus_send>
   106c6:	b118      	cbz	r0, 106d0 <ble_write_thread+0x70>
			LOG_WRN("Failed to send data over BLE connection");
   106c8:	4809      	ldr	r0, [pc, #36]	; (106f0 <ble_write_thread+0x90>)
   106ca:	4621      	mov	r1, r4
   106cc:	f018 fa6f 	bl	28bae <log_0>
   106d0:	2100      	movs	r1, #0
   106d2:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
   106d6:	f014 f8b7 	bl	24848 <z_impl_k_sleep>
	for (;;) {
   106da:	e7e0      	b.n	1069e <ble_write_thread+0x3e>
   106dc:	200008c4 	.word	0x200008c4
   106e0:	0002da18 	.word	0x0002da18
   106e4:	0002e6bb 	.word	0x0002e6bb
   106e8:	0002e6c1 	.word	0x0002e6c1
   106ec:	0002d948 	.word	0x0002d948
   106f0:	0002e693 	.word	0x0002e693

000106f4 <bt_receive_cb>:
{
   106f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   106f8:	2400      	movs	r4, #0
{
   106fa:	b08b      	sub	sp, #44	; 0x2c
   106fc:	4605      	mov	r5, r0
   106fe:	4688      	mov	r8, r1
   10700:	4617      	mov	r7, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   10702:	4621      	mov	r1, r4
   10704:	221a      	movs	r2, #26
   10706:	a803      	add	r0, sp, #12
   10708:	9402      	str	r4, [sp, #8]
   1070a:	f01a f9d1 	bl	2aab0 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
   1070e:	4628      	mov	r0, r5
   10710:	f01a fe8a 	bl	2b428 <bt_conn_get_dst>
   10714:	a902      	add	r1, sp, #8
   10716:	f7ff fe27 	bl	10368 <bt_addr_le_to_str.constprop.0>
   1071a:	4e29      	ldr	r6, [pc, #164]	; (107c0 <bt_receive_cb+0xcc>)
   1071c:	4b29      	ldr	r3, [pc, #164]	; (107c4 <bt_receive_cb+0xd0>)
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   1071e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 107d0 <bt_receive_cb+0xdc>
			k_fifo_put(&fifo_uart_tx_data, tx);
   10722:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 107d4 <bt_receive_cb+0xe0>
   10726:	1af6      	subs	r6, r6, r3
   10728:	08f6      	lsrs	r6, r6, #3
	LOG_INF("Received data from: %s", log_strdup(addr));
   1072a:	01b3      	lsls	r3, r6, #6
   1072c:	a802      	add	r0, sp, #8
   1072e:	f043 0503 	orr.w	r5, r3, #3
   10732:	9301      	str	r3, [sp, #4]
   10734:	f001 fe34 	bl	123a0 <z_log_strdup>
   10738:	462a      	mov	r2, r5
   1073a:	4601      	mov	r1, r0
   1073c:	4822      	ldr	r0, [pc, #136]	; (107c8 <bt_receive_cb+0xd4>)
   1073e:	f018 fa43 	bl	28bc8 <log_1>
	for (uint16_t pos = 0; pos != len;) {
   10742:	42a7      	cmp	r7, r4
   10744:	d00a      	beq.n	1075c <bt_receive_cb+0x68>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   10746:	2030      	movs	r0, #48	; 0x30
   10748:	f01c ff18 	bl	2d57c <k_malloc>
		if (!tx) {
   1074c:	4605      	mov	r5, r0
   1074e:	b940      	cbnz	r0, 10762 <bt_receive_cb+0x6e>
			LOG_WRN("Not able to allocate UART send data buffer");
   10750:	9b01      	ldr	r3, [sp, #4]
   10752:	481e      	ldr	r0, [pc, #120]	; (107cc <bt_receive_cb+0xd8>)
   10754:	f043 0102 	orr.w	r1, r3, #2
   10758:	f018 fa29 	bl	28bae <log_0>
}
   1075c:	b00b      	add	sp, #44	; 0x2c
   1075e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((len - pos) > tx_data_size) {
   10762:	1b3a      	subs	r2, r7, r4
   10764:	2a27      	cmp	r2, #39	; 0x27
			tx->len = (len - pos);
   10766:	bf94      	ite	ls
   10768:	b292      	uxthls	r2, r2
			tx->len = tx_data_size;
   1076a:	2227      	movhi	r2, #39	; 0x27
		memcpy(tx->data, &data[pos], tx->len);
   1076c:	f100 0904 	add.w	r9, r0, #4
   10770:	8582      	strh	r2, [r0, #44]	; 0x2c
   10772:	eb08 0104 	add.w	r1, r8, r4
   10776:	4648      	mov	r0, r9
   10778:	f01a f98f 	bl	2aa9a <memcpy>
		pos += tx->len;
   1077c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1077e:	441c      	add	r4, r3
   10780:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
   10782:	42bc      	cmp	r4, r7
   10784:	d10a      	bne.n	1079c <bt_receive_cb+0xa8>
   10786:	eb08 0204 	add.w	r2, r8, r4
   1078a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1078e:	2a0d      	cmp	r2, #13
   10790:	d104      	bne.n	1079c <bt_receive_cb+0xa8>
			tx->data[tx->len] = '\n';
   10792:	18ea      	adds	r2, r5, r3
   10794:	210a      	movs	r1, #10
			tx->len++;
   10796:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
   10798:	7111      	strb	r1, [r2, #4]
			tx->len++;
   1079a:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   1079c:	f8db 0000 	ldr.w	r0, [fp]
   107a0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
   107a2:	6883      	ldr	r3, [r0, #8]
   107a4:	685b      	ldr	r3, [r3, #4]
   107a6:	4649      	mov	r1, r9
   107a8:	461e      	mov	r6, r3
   107aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   107ae:	47b0      	blx	r6
		if (err) {
   107b0:	2800      	cmp	r0, #0
   107b2:	d0c6      	beq.n	10742 <bt_receive_cb+0x4e>
			k_fifo_put(&fifo_uart_tx_data, tx);
   107b4:	4629      	mov	r1, r5
   107b6:	4650      	mov	r0, sl
   107b8:	f01c fd96 	bl	2d2e8 <k_queue_append>
   107bc:	e7c1      	b.n	10742 <bt_receive_cb+0x4e>
   107be:	bf00      	nop
   107c0:	0002da18 	.word	0x0002da18
   107c4:	0002d948 	.word	0x0002d948
   107c8:	0002e6cd 	.word	0x0002e6cd
   107cc:	0002e6e4 	.word	0x0002e6e4
   107d0:	20002334 	.word	0x20002334
   107d4:	20000970 	.word	0x20000970

000107d8 <uart_work_handler>:
{
   107d8:	b510      	push	{r4, lr}
	buf = k_malloc(sizeof(*buf));
   107da:	2030      	movs	r0, #48	; 0x30
   107dc:	f01c fece 	bl	2d57c <k_malloc>
	if (buf) {
   107e0:	4601      	mov	r1, r0
   107e2:	b160      	cbz	r0, 107fe <uart_work_handler+0x26>
		buf->len = 0;
   107e4:	2300      	movs	r3, #0
   107e6:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   107e8:	4b0e      	ldr	r3, [pc, #56]	; (10824 <uart_work_handler+0x4c>)
   107ea:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
   107ec:	6883      	ldr	r3, [r0, #8]
   107ee:	68dc      	ldr	r4, [r3, #12]
   107f0:	2228      	movs	r2, #40	; 0x28
   107f2:	46a4      	mov	ip, r4
   107f4:	2332      	movs	r3, #50	; 0x32
}
   107f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107fa:	3104      	adds	r1, #4
   107fc:	4760      	bx	ip
   107fe:	4b0a      	ldr	r3, [pc, #40]	; (10828 <uart_work_handler+0x50>)
   10800:	490a      	ldr	r1, [pc, #40]	; (1082c <uart_work_handler+0x54>)
		LOG_WRN("Not able to allocate UART receive buffer");
   10802:	480b      	ldr	r0, [pc, #44]	; (10830 <uart_work_handler+0x58>)
   10804:	1ac9      	subs	r1, r1, r3
   10806:	08c9      	lsrs	r1, r1, #3
   10808:	0189      	lsls	r1, r1, #6
   1080a:	f041 0102 	orr.w	r1, r1, #2
   1080e:	f018 f9ce 	bl	28bae <log_0>
}
   10812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   10816:	4807      	ldr	r0, [pc, #28]	; (10834 <uart_work_handler+0x5c>)
   10818:	f240 6267 	movw	r2, #1639	; 0x667
   1081c:	2300      	movs	r3, #0
   1081e:	f012 be57 	b.w	234d0 <k_work_reschedule>
   10822:	bf00      	nop
   10824:	20002334 	.word	0x20002334
   10828:	0002d948 	.word	0x0002d948
   1082c:	0002da18 	.word	0x0002da18
   10830:	0002e70f 	.word	0x0002e70f
   10834:	20001770 	.word	0x20001770

00010838 <uart_cb>:
{
   10838:	b570      	push	{r4, r5, r6, lr}
   1083a:	780b      	ldrb	r3, [r1, #0]
   1083c:	460c      	mov	r4, r1
   1083e:	2b05      	cmp	r3, #5
   10840:	f200 80aa 	bhi.w	10998 <uart_cb+0x160>
   10844:	e8df f003 	tbb	[pc, r3]
   10848:	8134a903 	.word	0x8134a903
   1084c:	5d9a      	.short	0x5d9a
		if ((evt->data.tx.len == 0) ||
   1084e:	688b      	ldr	r3, [r1, #8]
   10850:	2b00      	cmp	r3, #0
   10852:	f000 80a1 	beq.w	10998 <uart_cb+0x160>
		    (!evt->data.tx.buf)) {
   10856:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
   10858:	2800      	cmp	r0, #0
   1085a:	f000 809d 	beq.w	10998 <uart_cb+0x160>
		if (aborted_buf) {
   1085e:	4a59      	ldr	r2, [pc, #356]	; (109c4 <uart_cb+0x18c>)
   10860:	6813      	ldr	r3, [r2, #0]
   10862:	b31b      	cbz	r3, 108ac <uart_cb+0x74>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   10864:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
   10866:	2300      	movs	r3, #0
   10868:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   1086a:	4a57      	ldr	r2, [pc, #348]	; (109c8 <uart_cb+0x190>)
   1086c:	6013      	str	r3, [r2, #0]
		k_free(buf);
   1086e:	f01c fe7e 	bl	2d56e <k_free>
	return z_impl_k_queue_get(queue, timeout);
   10872:	4856      	ldr	r0, [pc, #344]	; (109cc <uart_cb+0x194>)
   10874:	2200      	movs	r2, #0
   10876:	2300      	movs	r3, #0
   10878:	f012 f882 	bl	22980 <z_impl_k_queue_get>
		if (!buf) {
   1087c:	2800      	cmp	r0, #0
   1087e:	f000 808b 	beq.w	10998 <uart_cb+0x160>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   10882:	4b53      	ldr	r3, [pc, #332]	; (109d0 <uart_cb+0x198>)
   10884:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   10886:	1d01      	adds	r1, r0, #4
   10888:	6818      	ldr	r0, [r3, #0]
   1088a:	f017 fec6 	bl	2861a <uart_tx.constprop.0>
   1088e:	2800      	cmp	r0, #0
   10890:	f000 8082 	beq.w	10998 <uart_cb+0x160>
   10894:	494f      	ldr	r1, [pc, #316]	; (109d4 <uart_cb+0x19c>)
   10896:	4b50      	ldr	r3, [pc, #320]	; (109d8 <uart_cb+0x1a0>)
			LOG_WRN("Failed to send data over UART");
   10898:	4850      	ldr	r0, [pc, #320]	; (109dc <uart_cb+0x1a4>)
   1089a:	1ac9      	subs	r1, r1, r3
   1089c:	08c9      	lsrs	r1, r1, #3
   1089e:	0189      	lsls	r1, r1, #6
   108a0:	f041 0102 	orr.w	r1, r1, #2
}
   108a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_WRN("Not able to allocate UART receive buffer");
   108a8:	f018 b981 	b.w	28bae <log_0>
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
   108ac:	3804      	subs	r0, #4
   108ae:	e7de      	b.n	1086e <uart_cb+0x36>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   108b0:	6848      	ldr	r0, [r1, #4]
		buf->len += evt->data.rx.len;
   108b2:	68e2      	ldr	r2, [r4, #12]
   108b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   108b6:	4413      	add	r3, r2
   108b8:	b29b      	uxth	r3, r3
		buf_release = false;
   108ba:	4a49      	ldr	r2, [pc, #292]	; (109e0 <uart_cb+0x1a8>)
		buf->len += evt->data.rx.len;
   108bc:	8503      	strh	r3, [r0, #40]	; 0x28
		buf_release = false;
   108be:	2500      	movs	r5, #0
		if (buf->len == UART_BUF_SIZE) {
   108c0:	2b28      	cmp	r3, #40	; 0x28
		buf_release = false;
   108c2:	7015      	strb	r5, [r2, #0]
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   108c4:	f1a0 0104 	sub.w	r1, r0, #4
		if (buf->len == UART_BUF_SIZE) {
   108c8:	4615      	mov	r5, r2
   108ca:	d104      	bne.n	108d6 <uart_cb+0x9e>
}
   108cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
   108d0:	4844      	ldr	r0, [pc, #272]	; (109e4 <uart_cb+0x1ac>)
   108d2:	f01c bd09 	b.w	2d2e8 <k_queue_append>
		} else if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
   108d6:	4403      	add	r3, r0
   108d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   108dc:	2b0a      	cmp	r3, #10
   108de:	d001      	beq.n	108e4 <uart_cb+0xac>
   108e0:	2b0d      	cmp	r3, #13
   108e2:	d159      	bne.n	10998 <uart_cb+0x160>
			k_fifo_put(&fifo_uart_rx_data, buf);
   108e4:	483f      	ldr	r0, [pc, #252]	; (109e4 <uart_cb+0x1ac>)
   108e6:	f01c fcff 	bl	2d2e8 <k_queue_append>
			current_buf = evt->data.rx.buf;
   108ea:	4b3f      	ldr	r3, [pc, #252]	; (109e8 <uart_cb+0x1b0>)
   108ec:	6862      	ldr	r2, [r4, #4]
   108ee:	601a      	str	r2, [r3, #0]
			buf_release = true;
   108f0:	2301      	movs	r3, #1
   108f2:	702b      	strb	r3, [r5, #0]
			uart_rx_disable(uart);
   108f4:	4b36      	ldr	r3, [pc, #216]	; (109d0 <uart_cb+0x198>)
   108f6:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   108f8:	6883      	ldr	r3, [r0, #8]
}
   108fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   108fe:	695b      	ldr	r3, [r3, #20]
   10900:	4718      	bx	r3
		buf = k_malloc(sizeof(*buf));
   10902:	2030      	movs	r0, #48	; 0x30
   10904:	f01c fe3a 	bl	2d57c <k_malloc>
		if (buf) {
   10908:	4601      	mov	r1, r0
   1090a:	b160      	cbz	r0, 10926 <uart_cb+0xee>
			buf->len = 0;
   1090c:	2300      	movs	r3, #0
   1090e:	8583      	strh	r3, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   10910:	4b2f      	ldr	r3, [pc, #188]	; (109d0 <uart_cb+0x198>)
   10912:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
   10914:	6883      	ldr	r3, [r0, #8]
   10916:	68dc      	ldr	r4, [r3, #12]
   10918:	2228      	movs	r2, #40	; 0x28
   1091a:	46a4      	mov	ip, r4
   1091c:	2332      	movs	r3, #50	; 0x32
}
   1091e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10922:	3104      	adds	r1, #4
   10924:	4760      	bx	ip
   10926:	4b2c      	ldr	r3, [pc, #176]	; (109d8 <uart_cb+0x1a0>)
   10928:	492a      	ldr	r1, [pc, #168]	; (109d4 <uart_cb+0x19c>)
			LOG_WRN("Not able to allocate UART receive buffer");
   1092a:	4830      	ldr	r0, [pc, #192]	; (109ec <uart_cb+0x1b4>)
   1092c:	1ac9      	subs	r1, r1, r3
   1092e:	08c9      	lsrs	r1, r1, #3
   10930:	0189      	lsls	r1, r1, #6
   10932:	f041 0102 	orr.w	r1, r1, #2
   10936:	f018 f93a 	bl	28bae <log_0>
}
   1093a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   1093e:	482c      	ldr	r0, [pc, #176]	; (109f0 <uart_cb+0x1b8>)
   10940:	f240 6267 	movw	r2, #1639	; 0x667
   10944:	2300      	movs	r3, #0
   10946:	f012 bdc3 	b.w	234d0 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
   1094a:	2030      	movs	r0, #48	; 0x30
   1094c:	f01c fe16 	bl	2d57c <k_malloc>
		if (buf) {
   10950:	4601      	mov	r1, r0
   10952:	b150      	cbz	r0, 1096a <uart_cb+0x132>
			buf->len = 0;
   10954:	2300      	movs	r3, #0
   10956:	8583      	strh	r3, [r0, #44]	; 0x2c
			uart_rx_buf_rsp(uart, buf->data, sizeof(buf->data));
   10958:	4b1d      	ldr	r3, [pc, #116]	; (109d0 <uart_cb+0x198>)
   1095a:	6818      	ldr	r0, [r3, #0]
	return api->rx_buf_rsp(dev, buf, len);
   1095c:	6883      	ldr	r3, [r0, #8]
}
   1095e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10962:	691b      	ldr	r3, [r3, #16]
   10964:	2228      	movs	r2, #40	; 0x28
   10966:	3104      	adds	r1, #4
   10968:	4718      	bx	r3
   1096a:	491a      	ldr	r1, [pc, #104]	; (109d4 <uart_cb+0x19c>)
   1096c:	4b1a      	ldr	r3, [pc, #104]	; (109d8 <uart_cb+0x1a0>)
			LOG_WRN("Not able to allocate UART receive buffer");
   1096e:	481f      	ldr	r0, [pc, #124]	; (109ec <uart_cb+0x1b4>)
   10970:	1ac9      	subs	r1, r1, r3
   10972:	08c9      	lsrs	r1, r1, #3
   10974:	0189      	lsls	r1, r1, #6
   10976:	f041 0102 	orr.w	r1, r1, #2
   1097a:	e793      	b.n	108a4 <uart_cb+0x6c>
		if (buf_release && (current_buf != evt->data.rx_buf.buf)) {
   1097c:	4d18      	ldr	r5, [pc, #96]	; (109e0 <uart_cb+0x1a8>)
   1097e:	782b      	ldrb	r3, [r5, #0]
   10980:	b153      	cbz	r3, 10998 <uart_cb+0x160>
   10982:	4c19      	ldr	r4, [pc, #100]	; (109e8 <uart_cb+0x1b0>)
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
   10984:	6848      	ldr	r0, [r1, #4]
		if (buf_release && (current_buf != evt->data.rx_buf.buf)) {
   10986:	6823      	ldr	r3, [r4, #0]
   10988:	4298      	cmp	r0, r3
   1098a:	d005      	beq.n	10998 <uart_cb+0x160>
			k_free(buf);
   1098c:	3804      	subs	r0, #4
   1098e:	f01c fdee 	bl	2d56e <k_free>
			buf_release = false;
   10992:	2300      	movs	r3, #0
   10994:	702b      	strb	r3, [r5, #0]
			current_buf = NULL;
   10996:	6023      	str	r3, [r4, #0]
}
   10998:	bd70      	pop	{r4, r5, r6, pc}
			if (!aborted_buf) {
   1099a:	4a0a      	ldr	r2, [pc, #40]	; (109c4 <uart_cb+0x18c>)
   1099c:	6813      	ldr	r3, [r2, #0]
   1099e:	b90b      	cbnz	r3, 109a4 <uart_cb+0x16c>
				aborted_buf = (uint8_t *)evt->data.tx.buf;
   109a0:	684b      	ldr	r3, [r1, #4]
   109a2:	6013      	str	r3, [r2, #0]
			aborted_len += evt->data.tx.len;
   109a4:	4808      	ldr	r0, [pc, #32]	; (109c8 <uart_cb+0x190>)
   109a6:	68a3      	ldr	r3, [r4, #8]
   109a8:	6801      	ldr	r1, [r0, #0]
   109aa:	440b      	add	r3, r1
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   109ac:	6811      	ldr	r1, [r2, #0]
			aborted_len += evt->data.tx.len;
   109ae:	6003      	str	r3, [r0, #0]
				buf->len - aborted_len, SYS_FOREVER_MS);
   109b0:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
			uart_tx(uart, &buf->data[aborted_len],
   109b2:	4419      	add	r1, r3
   109b4:	1ad2      	subs	r2, r2, r3
   109b6:	4b06      	ldr	r3, [pc, #24]	; (109d0 <uart_cb+0x198>)
}
   109b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			uart_tx(uart, &buf->data[aborted_len],
   109bc:	6818      	ldr	r0, [r3, #0]
   109be:	f017 be2c 	b.w	2861a <uart_tx.constprop.0>
   109c2:	bf00      	nop
   109c4:	20002320 	.word	0x20002320
   109c8:	20002324 	.word	0x20002324
   109cc:	20000970 	.word	0x20000970
   109d0:	20002334 	.word	0x20002334
   109d4:	0002da18 	.word	0x0002da18
   109d8:	0002d948 	.word	0x0002d948
   109dc:	0002e738 	.word	0x0002e738
   109e0:	2000374c 	.word	0x2000374c
   109e4:	20000954 	.word	0x20000954
   109e8:	2000232c 	.word	0x2000232c
   109ec:	0002e70f 	.word	0x0002e70f
   109f0:	20001770 	.word	0x20001770

000109f4 <main>:
{
   109f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   109f8:	b088      	sub	sp, #32
	button_check();
   109fa:	f000 f917 	bl	10c2c <button_check>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   109fe:	484f      	ldr	r0, [pc, #316]	; (10b3c <main+0x148>)
	uart = device_get_binding(CONFIG_BT_NUS_UART_DEV);
   10a00:	f8df 9180 	ldr.w	r9, [pc, #384]	; 10b84 <main+0x190>
   10a04:	f010 ffc0 	bl	21988 <z_impl_device_get_binding>
   10a08:	f8c9 0000 	str.w	r0, [r9]
	if (!uart) {
   10a0c:	b1d8      	cbz	r0, 10a46 <main+0x52>
	rx = k_malloc(sizeof(*rx));
   10a0e:	2030      	movs	r0, #48	; 0x30
   10a10:	f01c fdb4 	bl	2d57c <k_malloc>
	if (rx) {
   10a14:	4607      	mov	r7, r0
   10a16:	b1b0      	cbz	r0, 10a46 <main+0x52>
		rx->len = 0;
   10a18:	2500      	movs	r5, #0
   10a1a:	8585      	strh	r5, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
   10a1c:	4948      	ldr	r1, [pc, #288]	; (10b40 <main+0x14c>)
   10a1e:	4849      	ldr	r0, [pc, #292]	; (10b44 <main+0x150>)
   10a20:	f8df 8164 	ldr.w	r8, [pc, #356]	; 10b88 <main+0x194>
   10a24:	4c48      	ldr	r4, [pc, #288]	; (10b48 <main+0x154>)
   10a26:	f012 fc2f 	bl	23288 <k_work_init_delayable>
	err = uart_callback_set(uart, uart_cb, NULL);
   10a2a:	f8d9 0000 	ldr.w	r0, [r9]
	if (api->callback_set == NULL) {
   10a2e:	6883      	ldr	r3, [r0, #8]
   10a30:	681b      	ldr	r3, [r3, #0]
   10a32:	b953      	cbnz	r3, 10a4a <main+0x56>
   10a34:	eba8 0104 	sub.w	r1, r8, r4
   10a38:	08c9      	lsrs	r1, r1, #3
		LOG_ERR("Cannot initialize UART callback");
   10a3a:	0189      	lsls	r1, r1, #6
   10a3c:	4843      	ldr	r0, [pc, #268]	; (10b4c <main+0x158>)
   10a3e:	f041 0101 	orr.w	r1, r1, #1
   10a42:	f018 f8b4 	bl	28bae <log_0>
		error();
   10a46:	f017 fdf0 	bl	2862a <error>
	return api->callback_set(dev, callback, user_data);
   10a4a:	4941      	ldr	r1, [pc, #260]	; (10b50 <main+0x15c>)
   10a4c:	462a      	mov	r2, r5
   10a4e:	4798      	blx	r3
	if (err) {
   10a50:	2800      	cmp	r0, #0
   10a52:	d1ef      	bne.n	10a34 <main+0x40>
	tx = k_malloc(sizeof(*tx));
   10a54:	2030      	movs	r0, #48	; 0x30
   10a56:	f01c fd91 	bl	2d57c <k_malloc>
	if (tx) {
   10a5a:	4606      	mov	r6, r0
   10a5c:	2800      	cmp	r0, #0
   10a5e:	d0f2      	beq.n	10a46 <main+0x52>
		pos = snprintf(tx->data, sizeof(tx->data),
   10a60:	f100 0a04 	add.w	sl, r0, #4
   10a64:	4a3b      	ldr	r2, [pc, #236]	; (10b54 <main+0x160>)
   10a66:	2128      	movs	r1, #40	; 0x28
   10a68:	4650      	mov	r0, sl
   10a6a:	f004 fae5 	bl	15038 <snprintf>
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   10a6e:	2827      	cmp	r0, #39	; 0x27
		pos = snprintf(tx->data, sizeof(tx->data),
   10a70:	4605      	mov	r5, r0
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   10a72:	d90d      	bls.n	10a90 <main+0x9c>
			k_free(tx);
   10a74:	4630      	mov	r0, r6
   10a76:	f01c fd7a 	bl	2d56e <k_free>
   10a7a:	eba8 0204 	sub.w	r2, r8, r4
   10a7e:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("snprintf returned %d", pos);
   10a80:	0192      	lsls	r2, r2, #6
   10a82:	4835      	ldr	r0, [pc, #212]	; (10b58 <main+0x164>)
   10a84:	f042 0201 	orr.w	r2, r2, #1
   10a88:	4629      	mov	r1, r5
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   10a8a:	f018 f89d 	bl	28bc8 <log_1>
		return err;
   10a8e:	e7da      	b.n	10a46 <main+0x52>
		tx->len = pos;
   10a90:	85b0      	strh	r0, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   10a92:	4602      	mov	r2, r0
   10a94:	4651      	mov	r1, sl
   10a96:	f8d9 0000 	ldr.w	r0, [r9]
   10a9a:	f017 fdbe 	bl	2861a <uart_tx.constprop.0>
	if (err) {
   10a9e:	4601      	mov	r1, r0
   10aa0:	b138      	cbz	r0, 10ab2 <main+0xbe>
   10aa2:	eba8 0204 	sub.w	r2, r8, r4
   10aa6:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   10aa8:	0192      	lsls	r2, r2, #6
   10aaa:	482c      	ldr	r0, [pc, #176]	; (10b5c <main+0x168>)
   10aac:	f042 0201 	orr.w	r2, r2, #1
   10ab0:	e7eb      	b.n	10a8a <main+0x96>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
   10ab2:	f8d9 0000 	ldr.w	r0, [r9]
	return api->rx_enable(dev, buf, len, timeout);
   10ab6:	6883      	ldr	r3, [r0, #8]
   10ab8:	2228      	movs	r2, #40	; 0x28
   10aba:	68dd      	ldr	r5, [r3, #12]
   10abc:	1d39      	adds	r1, r7, #4
   10abe:	2332      	movs	r3, #50	; 0x32
   10ac0:	47a8      	blx	r5
	if (err) {
   10ac2:	4605      	mov	r5, r0
   10ac4:	2800      	cmp	r0, #0
   10ac6:	d1be      	bne.n	10a46 <main+0x52>
		bt_conn_auth_cb_register(&conn_auth_callbacks);
   10ac8:	4825      	ldr	r0, [pc, #148]	; (10b60 <main+0x16c>)
   10aca:	f008 f8e9 	bl	18ca0 <bt_conn_auth_cb_register>
	err = bt_enable(NULL);
   10ace:	4628      	mov	r0, r5
   10ad0:	f006 f8e0 	bl	16c94 <bt_enable>
	if (err) {
   10ad4:	2800      	cmp	r0, #0
   10ad6:	d1b6      	bne.n	10a46 <main+0x52>
   10ad8:	eba8 0404 	sub.w	r4, r8, r4
   10adc:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Bluetooth initialized");
   10ade:	01a4      	lsls	r4, r4, #6
   10ae0:	4820      	ldr	r0, [pc, #128]	; (10b64 <main+0x170>)
   10ae2:	f044 0103 	orr.w	r1, r4, #3
   10ae6:	f018 f862 	bl	28bae <log_0>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10aea:	481f      	ldr	r0, [pc, #124]	; (10b68 <main+0x174>)
   10aec:	f011 ffb4 	bl	22a58 <z_impl_k_sem_give>
		settings_load();
   10af0:	f018 fd10 	bl	29514 <settings_load>
	err = bt_nus_init(&nus_cb);
   10af4:	481d      	ldr	r0, [pc, #116]	; (10b6c <main+0x178>)
   10af6:	f000 f85b 	bl	10bb0 <bt_nus_init>
	if (err) {
   10afa:	4601      	mov	r1, r0
   10afc:	b138      	cbz	r0, 10b0e <main+0x11a>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   10afe:	481c      	ldr	r0, [pc, #112]	; (10b70 <main+0x17c>)
   10b00:	f044 0201 	orr.w	r2, r4, #1
		LOG_ERR("Advertising failed to start (err %d)", err);
   10b04:	f018 f860 	bl	28bc8 <log_1>
}
   10b08:	b008      	add	sp, #32
   10b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
   10b0e:	4e19      	ldr	r6, [pc, #100]	; (10b74 <main+0x180>)
   10b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10b12:	ad03      	add	r5, sp, #12
   10b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10b16:	6833      	ldr	r3, [r6, #0]
   10b18:	602b      	str	r3, [r5, #0]
   10b1a:	2301      	movs	r3, #1
   10b1c:	4916      	ldr	r1, [pc, #88]	; (10b78 <main+0x184>)
   10b1e:	9300      	str	r3, [sp, #0]
   10b20:	2202      	movs	r2, #2
   10b22:	4b16      	ldr	r3, [pc, #88]	; (10b7c <main+0x188>)
   10b24:	a803      	add	r0, sp, #12
   10b26:	f006 ff23 	bl	17970 <bt_le_adv_start>
	if (err) {
   10b2a:	4601      	mov	r1, r0
   10b2c:	b118      	cbz	r0, 10b36 <main+0x142>
		LOG_ERR("Advertising failed to start (err %d)", err);
   10b2e:	4814      	ldr	r0, [pc, #80]	; (10b80 <main+0x18c>)
   10b30:	f044 0201 	orr.w	r2, r4, #1
   10b34:	e7e6      	b.n	10b04 <main+0x110>
		button_loop();
   10b36:	f000 f9b1 	bl	10e9c <button_loop>
	for (;;) {
   10b3a:	e7fc      	b.n	10b36 <main+0x142>
   10b3c:	0002e756 	.word	0x0002e756
   10b40:	000107d9 	.word	0x000107d9
   10b44:	20001770 	.word	0x20001770
   10b48:	0002d948 	.word	0x0002d948
   10b4c:	0002e75d 	.word	0x0002e75d
   10b50:	00010839 	.word	0x00010839
   10b54:	0002e77d 	.word	0x0002e77d
   10b58:	0002e7a1 	.word	0x0002e7a1
   10b5c:	0002e7b6 	.word	0x0002e7b6
   10b60:	20000428 	.word	0x20000428
   10b64:	0002e7df 	.word	0x0002e7df
   10b68:	200008c4 	.word	0x200008c4
   10b6c:	2000044c 	.word	0x2000044c
   10b70:	0002e7f5 	.word	0x0002e7f5
   10b74:	0002daa0 	.word	0x0002daa0
   10b78:	0002db48 	.word	0x0002db48
   10b7c:	0002db58 	.word	0x0002db58
   10b80:	0002e821 	.word	0x0002e821
   10b84:	20002334 	.word	0x20002334
   10b88:	0002da18 	.word	0x0002da18

00010b8c <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10b8c:	4b03      	ldr	r3, [pc, #12]	; (10b9c <nus_ccc_cfg_changed+0x10>)
   10b8e:	689b      	ldr	r3, [r3, #8]
   10b90:	b11b      	cbz	r3, 10b9a <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10b92:	1e48      	subs	r0, r1, #1
   10b94:	bf18      	it	ne
   10b96:	2001      	movne	r0, #1
   10b98:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10b9a:	4770      	bx	lr
   10b9c:	20002338 	.word	0x20002338

00010ba0 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   10ba0:	4b02      	ldr	r3, [pc, #8]	; (10bac <on_sent+0xc>)
   10ba2:	685b      	ldr	r3, [r3, #4]
   10ba4:	b103      	cbz	r3, 10ba8 <on_sent+0x8>
		nus_cb.sent(conn);
   10ba6:	4718      	bx	r3
	}
}
   10ba8:	4770      	bx	lr
   10baa:	bf00      	nop
   10bac:	20002338 	.word	0x20002338

00010bb0 <bt_nus_init>:
	// 		       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   10bb0:	b130      	cbz	r0, 10bc0 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   10bb2:	4b04      	ldr	r3, [pc, #16]	; (10bc4 <bt_nus_init+0x14>)
   10bb4:	6802      	ldr	r2, [r0, #0]
   10bb6:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   10bb8:	6842      	ldr	r2, [r0, #4]
   10bba:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   10bbc:	6882      	ldr	r2, [r0, #8]
   10bbe:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   10bc0:	2000      	movs	r0, #0
   10bc2:	4770      	bx	lr
   10bc4:	20002338 	.word	0x20002338

00010bc8 <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const char *data, uint16_t len)
{
   10bc8:	b570      	push	{r4, r5, r6, lr}
   10bca:	b086      	sub	sp, #24
   10bcc:	460e      	mov	r6, r1
   10bce:	4615      	mov	r5, r2
	struct bt_gatt_notify_params params = {0};
   10bd0:	2100      	movs	r1, #0
{
   10bd2:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {0};
   10bd4:	2218      	movs	r2, #24
   10bd6:	4668      	mov	r0, sp
   10bd8:	f019 ff6a 	bl	2aab0 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   10bdc:	490b      	ldr	r1, [pc, #44]	; (10c0c <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   10bde:	4b0c      	ldr	r3, [pc, #48]	; (10c10 <bt_nus_send+0x48>)
	params.len = len;
   10be0:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.data = data;
   10be4:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.func = on_sent;
   10be8:	9304      	str	r3, [sp, #16]

	if (!conn) {
   10bea:	b92c      	cbnz	r4, 10bf8 <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10bec:	4669      	mov	r1, sp
   10bee:	4620      	mov	r0, r4
   10bf0:	f00a fbd4 	bl	1b39c <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10bf4:	b006      	add	sp, #24
   10bf6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   10bf8:	2201      	movs	r2, #1
   10bfa:	4620      	mov	r0, r4
   10bfc:	f00a fd7e 	bl	1b6fc <bt_gatt_is_subscribed>
   10c00:	2800      	cmp	r0, #0
   10c02:	d1f3      	bne.n	10bec <bt_nus_send+0x24>
		return -EINVAL;
   10c04:	f06f 0015 	mvn.w	r0, #21
   10c08:	e7f4      	b.n	10bf4 <bt_nus_send+0x2c>
   10c0a:	bf00      	nop
   10c0c:	0002db88 	.word	0x0002db88
   10c10:	00010ba1 	.word	0x00010ba1

00010c14 <button_pressed>:
// static struct gpio_callback button_cb_data[7];

// define callback handler named button_pressed
void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   10c14:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   10c16:	f01c fa04 	bl	2d022 <sys_clock_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
   10c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10c1e:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
   10c20:	4801      	ldr	r0, [pc, #4]	; (10c28 <button_pressed+0x14>)
   10c22:	f017 bda5 	b.w	28770 <printk>
   10c26:	bf00      	nop
   10c28:	0002e876 	.word	0x0002e876

00010c2c <button_check>:

void button_check(void){
   10c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret[7];
        
    /* button available check */
    for(int i = 0; i < 7; i++) {
   10c30:	2400      	movs	r4, #0
void button_check(void){
   10c32:	b087      	sub	sp, #28
        if (!device_is_ready(buttons[i].port)) {
   10c34:	4b88      	ldr	r3, [pc, #544]	; (10e58 <button_check+0x22c>)
   10c36:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   10c3a:	4628      	mov	r0, r5
   10c3c:	f01c faf2 	bl	2d224 <z_device_ready>
   10c40:	2800      	cmp	r0, #0
   10c42:	f000 8087 	beq.w	10d54 <button_check+0x128>
    for(int i = 0; i < 7; i++) {
   10c46:	3401      	adds	r4, #1
   10c48:	2c07      	cmp	r4, #7
   10c4a:	d1f3      	bne.n	10c34 <button_check+0x8>
   10c4c:	4b82      	ldr	r3, [pc, #520]	; (10e58 <button_check+0x22c>)
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   10c4e:	4d83      	ldr	r5, [pc, #524]	; (10e5c <button_check+0x230>)
   10c50:	f8df 9244 	ldr.w	r9, [pc, #580]	; 10e98 <button_check+0x26c>
   10c54:	9301      	str	r3, [sp, #4]
   10c56:	461f      	mov	r7, r3
            return;
        }
    }
        
    /* adding extra flags : GPIO_INPUT */
    for(int i = 0; i < 7; i++) {
   10c58:	2600      	movs	r6, #0
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
   10c5a:	f897 8005 	ldrb.w	r8, [r7, #5]
	return gpio_pin_configure(spec->port,
   10c5e:	f8d7 a000 	ldr.w	sl, [r7]
   10c62:	f897 b004 	ldrb.w	fp, [r7, #4]
   10c66:	f448 7380 	orr.w	r3, r8, #256	; 0x100
   10c6a:	9303      	str	r3, [sp, #12]
	const struct gpio_driver_api *api =
   10c6c:	f8da 3008 	ldr.w	r3, [sl, #8]
   10c70:	9304      	str	r3, [sp, #16]
	const struct gpio_driver_config *const cfg =
   10c72:	f8da 3004 	ldr.w	r3, [sl, #4]
   10c76:	9305      	str	r3, [sp, #20]
	struct gpio_driver_data *data =
   10c78:	f8da 3010 	ldr.w	r3, [sl, #16]
   10c7c:	9302      	str	r3, [sp, #8]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   10c7e:	f008 0330 	and.w	r3, r8, #48	; 0x30
   10c82:	2b30      	cmp	r3, #48	; 0x30
   10c84:	d10e      	bne.n	10ca4 <button_check+0x78>
   10c86:	4976      	ldr	r1, [pc, #472]	; (10e60 <button_check+0x234>)
   10c88:	f240 23e1 	movw	r3, #737	; 0x2e1
   10c8c:	462a      	mov	r2, r5
   10c8e:	4648      	mov	r0, r9
   10c90:	f017 fd6e 	bl	28770 <printk>
   10c94:	4873      	ldr	r0, [pc, #460]	; (10e64 <button_check+0x238>)
   10c96:	f017 fd6b 	bl	28770 <printk>
   10c9a:	f240 21e1 	movw	r1, #737	; 0x2e1
   10c9e:	4628      	mov	r0, r5
   10ca0:	f017 ff57 	bl	28b52 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   10ca4:	f008 0302 	and.w	r3, r8, #2
   10ca8:	b173      	cbz	r3, 10cc8 <button_check+0x9c>
   10caa:	496f      	ldr	r1, [pc, #444]	; (10e68 <button_check+0x23c>)
   10cac:	f240 23e5 	movw	r3, #741	; 0x2e5
   10cb0:	462a      	mov	r2, r5
   10cb2:	4648      	mov	r0, r9
   10cb4:	f017 fd5c 	bl	28770 <printk>
   10cb8:	486c      	ldr	r0, [pc, #432]	; (10e6c <button_check+0x240>)
   10cba:	f017 fd59 	bl	28770 <printk>
   10cbe:	f240 21e5 	movw	r1, #741	; 0x2e5
   10cc2:	4628      	mov	r0, r5
   10cc4:	f017 ff45 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   10cc8:	f008 0306 	and.w	r3, r8, #6
   10ccc:	2b04      	cmp	r3, #4
   10cce:	d10b      	bne.n	10ce8 <button_check+0xbc>
   10cd0:	4967      	ldr	r1, [pc, #412]	; (10e70 <button_check+0x244>)
   10cd2:	4648      	mov	r0, r9
   10cd4:	f240 23e9 	movw	r3, #745	; 0x2e9
   10cd8:	462a      	mov	r2, r5
   10cda:	f017 fd49 	bl	28770 <printk>
   10cde:	f240 21e9 	movw	r1, #745	; 0x2e9
   10ce2:	4628      	mov	r0, r5
   10ce4:	f017 ff35 	bl	28b52 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10ce8:	9b05      	ldr	r3, [sp, #20]
   10cea:	2401      	movs	r4, #1
   10cec:	681b      	ldr	r3, [r3, #0]
   10cee:	fa04 f40b 	lsl.w	r4, r4, fp
   10cf2:	421c      	tst	r4, r3
   10cf4:	d10e      	bne.n	10d14 <button_check+0xe8>
   10cf6:	495f      	ldr	r1, [pc, #380]	; (10e74 <button_check+0x248>)
   10cf8:	f240 23fd 	movw	r3, #765	; 0x2fd
   10cfc:	462a      	mov	r2, r5
   10cfe:	4648      	mov	r0, r9
   10d00:	f017 fd36 	bl	28770 <printk>
   10d04:	485c      	ldr	r0, [pc, #368]	; (10e78 <button_check+0x24c>)
   10d06:	f017 fd33 	bl	28770 <printk>
   10d0a:	f240 21fd 	movw	r1, #765	; 0x2fd
   10d0e:	4628      	mov	r0, r5
   10d10:	f017 ff1f 	bl	28b52 <assert_post_action>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   10d14:	9b02      	ldr	r3, [sp, #8]
	return api->pin_configure(port, pin, flags);
   10d16:	9a03      	ldr	r2, [sp, #12]
   10d18:	681b      	ldr	r3, [r3, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   10d1a:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   10d1e:	bf14      	ite	ne
   10d20:	431c      	orrne	r4, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   10d22:	ea23 0404 	biceq.w	r4, r3, r4
   10d26:	9b02      	ldr	r3, [sp, #8]
   10d28:	601c      	str	r4, [r3, #0]
	return api->pin_configure(port, pin, flags);
   10d2a:	9b04      	ldr	r3, [sp, #16]
   10d2c:	4659      	mov	r1, fp
   10d2e:	681b      	ldr	r3, [r3, #0]
   10d30:	4650      	mov	r0, sl
   10d32:	4798      	blx	r3
        ret[i] = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT);

        if (ret[i] != 0) {
   10d34:	4604      	mov	r4, r0
   10d36:	b1a0      	cbz	r0, 10d62 <button_check+0x136>
            printk("Error %d: failed to configure %s pin %d\n",
                   ret[i], buttons[i].port->name, buttons[i].pin);
   10d38:	4b47      	ldr	r3, [pc, #284]	; (10e58 <button_check+0x22c>)
            printk("Error %d: failed to configure %s pin %d\n",
   10d3a:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
                   ret[i], buttons[i].port->name, buttons[i].pin);
   10d3e:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
            printk("Error %d: failed to configure %s pin %d\n",
   10d42:	6812      	ldr	r2, [r2, #0]
   10d44:	790b      	ldrb	r3, [r1, #4]
   10d46:	4601      	mov	r1, r0
   10d48:	484c      	ldr	r0, [pc, #304]	; (10e7c <button_check+0x250>)
        gpio_add_callback(buttons[i].port, &button_cb_data[i]);
        printk("Set up button at %s pin %d\n", buttons[i].port->name, buttons[i].pin);
    }

	printk("Press the button\n");
}
   10d4a:	b007      	add	sp, #28
   10d4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10d50:	f017 bd0e 	b.w	28770 <printk>
            printk("Error: button device %s is not ready\n",
   10d54:	6829      	ldr	r1, [r5, #0]
   10d56:	484a      	ldr	r0, [pc, #296]	; (10e80 <button_check+0x254>)
}
   10d58:	b007      	add	sp, #28
   10d5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            printk("Error: button device %s is not ready\n",
   10d5e:	f017 bd07 	b.w	28770 <printk>
    for(int i = 0; i < 7; i++) {
   10d62:	3601      	adds	r6, #1
   10d64:	2e07      	cmp	r6, #7
   10d66:	f107 0708 	add.w	r7, r7, #8
   10d6a:	f47f af76 	bne.w	10c5a <button_check+0x2e>
   10d6e:	4d3a      	ldr	r5, [pc, #232]	; (10e58 <button_check+0x22c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10d70:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 10e5c <button_check+0x230>
   10d74:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 10e74 <button_check+0x248>
   10d78:	f8df b11c 	ldr.w	fp, [pc, #284]	; 10e98 <button_check+0x26c>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   10d7c:	682e      	ldr	r6, [r5, #0]
   10d7e:	f895 9004 	ldrb.w	r9, [r5, #4]
	const struct gpio_driver_api *api =
   10d82:	68b3      	ldr	r3, [r6, #8]
   10d84:	9302      	str	r3, [sp, #8]
	const struct gpio_driver_data *const data =
   10d86:	6933      	ldr	r3, [r6, #16]
   10d88:	9303      	str	r3, [sp, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10d8a:	6873      	ldr	r3, [r6, #4]
   10d8c:	2701      	movs	r7, #1
   10d8e:	681b      	ldr	r3, [r3, #0]
   10d90:	fa07 f709 	lsl.w	r7, r7, r9
   10d94:	421f      	tst	r7, r3
   10d96:	d10e      	bne.n	10db6 <button_check+0x18a>
   10d98:	4651      	mov	r1, sl
   10d9a:	f240 239d 	movw	r3, #669	; 0x29d
   10d9e:	4642      	mov	r2, r8
   10da0:	4658      	mov	r0, fp
   10da2:	f017 fce5 	bl	28770 <printk>
   10da6:	4834      	ldr	r0, [pc, #208]	; (10e78 <button_check+0x24c>)
   10da8:	f017 fce2 	bl	28770 <printk>
   10dac:	f240 219d 	movw	r1, #669	; 0x29d
   10db0:	4640      	mov	r0, r8
   10db2:	f017 fece 	bl	28b52 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   10db6:	9b03      	ldr	r3, [sp, #12]
   10db8:	681b      	ldr	r3, [r3, #0]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   10dba:	421f      	tst	r7, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10dbc:	9b02      	ldr	r3, [sp, #8]
   10dbe:	4630      	mov	r0, r6
   10dc0:	699f      	ldr	r7, [r3, #24]
   10dc2:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
   10dc6:	bf14      	ite	ne
   10dc8:	f44f 3300 	movne.w	r3, #131072	; 0x20000
   10dcc:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
   10dd0:	4649      	mov	r1, r9
   10dd2:	47b8      	blx	r7
        if (ret[i] != 0) {
   10dd4:	4606      	mov	r6, r0
   10dd6:	b148      	cbz	r0, 10dec <button_check+0x1c0>
                   ret[i], buttons[i].port->name, buttons[i].pin);
   10dd8:	4b1f      	ldr	r3, [pc, #124]	; (10e58 <button_check+0x22c>)
            printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10dda:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
                   ret[i], buttons[i].port->name, buttons[i].pin);
   10dde:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
            printk("Error %d: failed to configure interrupt on %s pin %d\n",
   10de2:	6812      	ldr	r2, [r2, #0]
   10de4:	790b      	ldrb	r3, [r1, #4]
   10de6:	4601      	mov	r1, r0
   10de8:	4826      	ldr	r0, [pc, #152]	; (10e84 <button_check+0x258>)
   10dea:	e7ae      	b.n	10d4a <button_check+0x11e>
    for(int i = 0; i < 7; i++) {
   10dec:	3401      	adds	r4, #1
   10dee:	2c07      	cmp	r4, #7
   10df0:	f105 0508 	add.w	r5, r5, #8
   10df4:	d1c2      	bne.n	10d7c <button_check+0x150>
   10df6:	4c24      	ldr	r4, [pc, #144]	; (10e88 <button_check+0x25c>)
        gpio_init_callback(&button_cb_data[i], button_pressed, BIT(buttons[i].pin));
   10df8:	4f17      	ldr	r7, [pc, #92]	; (10e58 <button_check+0x22c>)
    for(int i = 0; i < 7; i++) {
   10dfa:	4603      	mov	r3, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   10dfc:	4823      	ldr	r0, [pc, #140]	; (10e8c <button_check+0x260>)
    for(int i = 0; i < 7; i++) {
   10dfe:	4622      	mov	r2, r4
        gpio_init_callback(&button_cb_data[i], button_pressed, BIT(buttons[i].pin));
   10e00:	2501      	movs	r5, #1
   10e02:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    for(int i = 0; i < 7; i++) {
   10e06:	3301      	adds	r3, #1
        gpio_init_callback(&button_cb_data[i], button_pressed, BIT(buttons[i].pin));
   10e08:	7909      	ldrb	r1, [r1, #4]
    for(int i = 0; i < 7; i++) {
   10e0a:	2b07      	cmp	r3, #7
        gpio_init_callback(&button_cb_data[i], button_pressed, BIT(buttons[i].pin));
   10e0c:	fa05 f101 	lsl.w	r1, r5, r1
	callback->pin_mask = pin_mask;
   10e10:	e9c2 0101 	strd	r0, r1, [r2, #4]
    for(int i = 0; i < 7; i++) {
   10e14:	f102 020c 	add.w	r2, r2, #12
   10e18:	d1f3      	bne.n	10e02 <button_check+0x1d6>
        printk("Set up button at %s pin %d\n", buttons[i].port->name, buttons[i].pin);
   10e1a:	4f1d      	ldr	r7, [pc, #116]	; (10e90 <button_check+0x264>)
        gpio_add_callback(buttons[i].port, &button_cb_data[i]);
   10e1c:	9b01      	ldr	r3, [sp, #4]
   10e1e:	681d      	ldr	r5, [r3, #0]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   10e20:	68ab      	ldr	r3, [r5, #8]
   10e22:	69db      	ldr	r3, [r3, #28]
   10e24:	b11b      	cbz	r3, 10e2e <button_check+0x202>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   10e26:	2201      	movs	r2, #1
   10e28:	4621      	mov	r1, r4
   10e2a:	4628      	mov	r0, r5
   10e2c:	4798      	blx	r3
        printk("Set up button at %s pin %d\n", buttons[i].port->name, buttons[i].pin);
   10e2e:	9b01      	ldr	r3, [sp, #4]
   10e30:	6829      	ldr	r1, [r5, #0]
   10e32:	791a      	ldrb	r2, [r3, #4]
   10e34:	4638      	mov	r0, r7
   10e36:	f017 fc9b 	bl	28770 <printk>
    for(int i = 0; i < 7; i++) {
   10e3a:	9b01      	ldr	r3, [sp, #4]
   10e3c:	3601      	adds	r6, #1
   10e3e:	3308      	adds	r3, #8
   10e40:	2e07      	cmp	r6, #7
   10e42:	9301      	str	r3, [sp, #4]
   10e44:	f104 040c 	add.w	r4, r4, #12
   10e48:	d1e8      	bne.n	10e1c <button_check+0x1f0>
	printk("Press the button\n");
   10e4a:	4812      	ldr	r0, [pc, #72]	; (10e94 <button_check+0x268>)
}
   10e4c:	b007      	add	sp, #28
   10e4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	printk("Press the button\n");
   10e52:	f017 bc8d 	b.w	28770 <printk>
   10e56:	bf00      	nop
   10e58:	0002dbc4 	.word	0x0002dbc4
   10e5c:	0002e8b2 	.word	0x0002e8b2
   10e60:	0002e8dc 	.word	0x0002e8dc
   10e64:	0002e932 	.word	0x0002e932
   10e68:	0002e96f 	.word	0x0002e96f
   10e6c:	0002e9a3 	.word	0x0002e9a3
   10e70:	0002e9f5 	.word	0x0002e9f5
   10e74:	0002ea28 	.word	0x0002ea28
   10e78:	0002ea66 	.word	0x0002ea66
   10e7c:	0002ea78 	.word	0x0002ea78
   10e80:	0002e88c 	.word	0x0002e88c
   10e84:	0002eaa1 	.word	0x0002eaa1
   10e88:	20002344 	.word	0x20002344
   10e8c:	00010c15 	.word	0x00010c15
   10e90:	0002ead7 	.word	0x0002ead7
   10e94:	0002eaf3 	.word	0x0002eaf3
   10e98:	0002e915 	.word	0x0002e915

00010e9c <button_loop>:

void button_loop(void){
   10e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ea0:	4e5b      	ldr	r6, [pc, #364]	; (11010 <button_loop+0x174>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10ea2:	f8df b184 	ldr.w	fp, [pc, #388]	; 11028 <button_loop+0x18c>
   10ea6:	b09f      	sub	sp, #124	; 0x7c
   10ea8:	af03      	add	r7, sp, #12
   10eaa:	46ba      	mov	sl, r7
   10eac:	4634      	mov	r4, r6
    	int val[7];
        for(int i = 0; i < 7; i++) {
   10eae:	f04f 0900 	mov.w	r9, #0
   10eb2:	7923      	ldrb	r3, [r4, #4]
	return gpio_pin_get(spec->port, spec->pin);
   10eb4:	f8d4 8000 	ldr.w	r8, [r4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10eb8:	2501      	movs	r5, #1
   10eba:	409d      	lsls	r5, r3
   10ebc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10ec0:	681b      	ldr	r3, [r3, #0]
   10ec2:	421d      	tst	r5, r3
   10ec4:	d10e      	bne.n	10ee4 <button_loop+0x48>
   10ec6:	4953      	ldr	r1, [pc, #332]	; (11014 <button_loop+0x178>)
   10ec8:	4853      	ldr	r0, [pc, #332]	; (11018 <button_loop+0x17c>)
   10eca:	f44f 638c 	mov.w	r3, #1120	; 0x460
   10ece:	465a      	mov	r2, fp
   10ed0:	f017 fc4e 	bl	28770 <printk>
   10ed4:	4851      	ldr	r0, [pc, #324]	; (1101c <button_loop+0x180>)
   10ed6:	f017 fc4b 	bl	28770 <printk>
   10eda:	f44f 618c 	mov.w	r1, #1120	; 0x460
   10ede:	4658      	mov	r0, fp
   10ee0:	f017 fe37 	bl	28b52 <assert_post_action>
	const struct gpio_driver_data *const data =
   10ee4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   10ee8:	9301      	str	r3, [sp, #4]
	return api->port_get_raw(port, value);
   10eea:	f8d8 2008 	ldr.w	r2, [r8, #8]
   10eee:	a90a      	add	r1, sp, #40	; 0x28
   10ef0:	6852      	ldr	r2, [r2, #4]
   10ef2:	4640      	mov	r0, r8
   10ef4:	4790      	blx	r2
	if (ret == 0) {
   10ef6:	b938      	cbnz	r0, 10f08 <button_loop+0x6c>
		*value ^= data->invert;
   10ef8:	9b01      	ldr	r3, [sp, #4]
   10efa:	681a      	ldr	r2, [r3, #0]
   10efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10efe:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   10f00:	422b      	tst	r3, r5
   10f02:	bf14      	ite	ne
   10f04:	2001      	movne	r0, #1
   10f06:	2000      	moveq	r0, #0
   10f08:	f109 0901 	add.w	r9, r9, #1
   10f0c:	f1b9 0f07 	cmp.w	r9, #7
            val[i] = gpio_pin_get_dt(&buttons[i]);
   10f10:	f84a 0b04 	str.w	r0, [sl], #4
        for(int i = 0; i < 7; i++) {
   10f14:	f104 0408 	add.w	r4, r4, #8
   10f18:	d1cb      	bne.n	10eb2 <button_loop+0x16>
	return z_impl_k_sleep(timeout);
   10f1a:	2063      	movs	r0, #99	; 0x63
   10f1c:	2100      	movs	r1, #0
   10f1e:	f013 fc93 	bl	24848 <z_impl_k_sleep>
                            break;
                        default:
                            printk("Fransfer Error!");
                    }
                    strcat(str, appendStr); // 40 represents E notes above 3C( modify it according to the index)
                    strcat(str, "7F"); // 7F represents the MIDI_VELOCITY_MAX
   10f22:	f8df 8108 	ldr.w	r8, [pc, #264]	; 1102c <button_loop+0x190>
                if(i == 0) {
   10f26:	f8df 9108 	ldr.w	r9, [pc, #264]	; 11030 <button_loop+0x194>
   10f2a:	f8df a108 	ldr.w	sl, [pc, #264]	; 11034 <button_loop+0x198>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   10f2e:	463d      	mov	r5, r7
   10f30:	f06f 0401 	mvn.w	r4, #1
            if(val[i] == 1) {
   10f34:	f855 3b04 	ldr.w	r3, [r5], #4
   10f38:	2b01      	cmp	r3, #1
   10f3a:	d109      	bne.n	10f50 <button_loop+0xb4>
                if(i == 0) {
   10f3c:	1ca3      	adds	r3, r4, #2
   10f3e:	d15a      	bne.n	10ff6 <button_loop+0x15a>
                    strcpy(str, "8080903C7F");
   10f40:	4937      	ldr	r1, [pc, #220]	; (11020 <button_loop+0x184>)
   10f42:	a80a      	add	r0, sp, #40	; 0x28
   10f44:	f019 fd31 	bl	2a9aa <strcpy>
                    strcat(str, "8090");
   10f48:	4936      	ldr	r1, [pc, #216]	; (11024 <button_loop+0x188>)
                    strcat(str, "7F"); // 7F represents the MIDI_VELOCITY_MAX
   10f4a:	a80a      	add	r0, sp, #40	; 0x28
   10f4c:	f019 fd75 	bl	2aa3a <strcat>
        for(int i = 0; i < 7; i++) {
   10f50:	3401      	adds	r4, #1
   10f52:	2c05      	cmp	r4, #5
   10f54:	d1ee      	bne.n	10f34 <button_loop+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10f56:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 11028 <button_loop+0x18c>
   10f5a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 11014 <button_loop+0x178>
   10f5e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 11018 <button_loop+0x17c>
                }
            }
        }

        /* set the val array and button value to zero (unpressed) */
        for(int i = 0; i < 7; i++) {
   10f62:	f04f 0900 	mov.w	r9, #0
            if(val[i] > 0) {
   10f66:	f857 3b04 	ldr.w	r3, [r7], #4
   10f6a:	2b00      	cmp	r3, #0
   10f6c:	dd39      	ble.n	10fe2 <button_loop+0x146>
	return gpio_pin_set(spec->port, spec->pin, value);
   10f6e:	6834      	ldr	r4, [r6, #0]
                val[i] = 0;
   10f70:	2300      	movs	r3, #0
   10f72:	f847 3c04 	str.w	r3, [r7, #-4]
	const struct gpio_driver_data *const data =
   10f76:	6923      	ldr	r3, [r4, #16]
   10f78:	9301      	str	r3, [sp, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10f7a:	7933      	ldrb	r3, [r6, #4]
   10f7c:	2501      	movs	r5, #1
   10f7e:	409d      	lsls	r5, r3
   10f80:	6863      	ldr	r3, [r4, #4]
   10f82:	681b      	ldr	r3, [r3, #0]
   10f84:	421d      	tst	r5, r3
   10f86:	d10e      	bne.n	10fa6 <button_loop+0x10a>
   10f88:	4651      	mov	r1, sl
   10f8a:	f240 43bb 	movw	r3, #1211	; 0x4bb
   10f8e:	4642      	mov	r2, r8
   10f90:	4658      	mov	r0, fp
   10f92:	f017 fbed 	bl	28770 <printk>
   10f96:	4821      	ldr	r0, [pc, #132]	; (1101c <button_loop+0x180>)
   10f98:	f017 fbea 	bl	28770 <printk>
   10f9c:	f240 41bb 	movw	r1, #1211	; 0x4bb
   10fa0:	4640      	mov	r0, r8
   10fa2:	f017 fdd6 	bl	28b52 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   10fa6:	9b01      	ldr	r3, [sp, #4]
   10fa8:	681b      	ldr	r3, [r3, #0]
   10faa:	402b      	ands	r3, r5
   10fac:	9301      	str	r3, [sp, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10fae:	6863      	ldr	r3, [r4, #4]
   10fb0:	681b      	ldr	r3, [r3, #0]
   10fb2:	421d      	tst	r5, r3
   10fb4:	d10e      	bne.n	10fd4 <button_loop+0x138>
   10fb6:	4651      	mov	r1, sl
   10fb8:	f240 4391 	movw	r3, #1169	; 0x491
   10fbc:	4642      	mov	r2, r8
   10fbe:	4658      	mov	r0, fp
   10fc0:	f017 fbd6 	bl	28770 <printk>
   10fc4:	4815      	ldr	r0, [pc, #84]	; (1101c <button_loop+0x180>)
   10fc6:	f017 fbd3 	bl	28770 <printk>
   10fca:	f240 4191 	movw	r1, #1169	; 0x491
   10fce:	4640      	mov	r0, r8
   10fd0:	f017 fdbf 	bl	28b52 <assert_post_action>
	if (value != 0)	{
   10fd4:	9b01      	ldr	r3, [sp, #4]
   10fd6:	b1c3      	cbz	r3, 1100a <button_loop+0x16e>
	return api->port_set_bits_raw(port, pins);
   10fd8:	68a3      	ldr	r3, [r4, #8]
   10fda:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   10fdc:	4629      	mov	r1, r5
   10fde:	4620      	mov	r0, r4
   10fe0:	4798      	blx	r3
        for(int i = 0; i < 7; i++) {
   10fe2:	f109 0901 	add.w	r9, r9, #1
   10fe6:	f1b9 0f07 	cmp.w	r9, #7
   10fea:	f106 0608 	add.w	r6, r6, #8
   10fee:	d1ba      	bne.n	10f66 <button_loop+0xca>
                gpio_pin_set_dt(&buttons[i], 0);
            }
        }
}
   10ff0:	b01f      	add	sp, #124	; 0x7c
   10ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    switch(i) {
   10ff6:	2c04      	cmp	r4, #4
   10ff8:	bf94      	ite	ls
   10ffa:	f85a 1024 	ldrls.w	r1, [sl, r4, lsl #2]
                if(i == 0) {
   10ffe:	4649      	movhi	r1, r9
                    strcat(str, appendStr); // 40 represents E notes above 3C( modify it according to the index)
   11000:	a80a      	add	r0, sp, #40	; 0x28
   11002:	f019 fd1a 	bl	2aa3a <strcat>
                    strcat(str, "7F"); // 7F represents the MIDI_VELOCITY_MAX
   11006:	4641      	mov	r1, r8
   11008:	e79f      	b.n	10f4a <button_loop+0xae>
   1100a:	68a3      	ldr	r3, [r4, #8]
   1100c:	691b      	ldr	r3, [r3, #16]
   1100e:	e7e5      	b.n	10fdc <button_loop+0x140>
   11010:	0002dbc4 	.word	0x0002dbc4
   11014:	0002ea28 	.word	0x0002ea28
   11018:	0002e915 	.word	0x0002e915
   1101c:	0002ea66 	.word	0x0002ea66
   11020:	0002eb08 	.word	0x0002eb08
   11024:	0002eb13 	.word	0x0002eb13
   11028:	0002e8b2 	.word	0x0002e8b2
   1102c:	0002eb10 	.word	0x0002eb10
   11030:	0002eb05 	.word	0x0002eb05
   11034:	0002dbb0 	.word	0x0002dbb0

00011038 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   11038:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1103a:	4c0a      	ldr	r4, [pc, #40]	; (11064 <crc8_ccitt+0x2c>)
   1103c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1103e:	4291      	cmp	r1, r2
   11040:	d100      	bne.n	11044 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   11042:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   11044:	f811 3b01 	ldrb.w	r3, [r1], #1
   11048:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1104a:	0903      	lsrs	r3, r0, #4
   1104c:	5ce3      	ldrb	r3, [r4, r3]
   1104e:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   11052:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   11054:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11058:	5ce0      	ldrb	r0, [r4, r3]
   1105a:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   1105e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   11060:	e7ed      	b.n	1103e <crc8_ccitt+0x6>
   11062:	bf00      	nop
   11064:	0002eb27 	.word	0x0002eb27

00011068 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11068:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   1106a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1106e:	2b02      	cmp	r3, #2
{
   11070:	b570      	push	{r4, r5, r6, lr}
   11072:	4604      	mov	r4, r0
   11074:	460e      	mov	r6, r1
	notify->result = res;
   11076:	6081      	str	r1, [r0, #8]
	switch (method) {
   11078:	d010      	beq.n	1109c <sys_notify_finalize+0x34>
   1107a:	2b03      	cmp	r3, #3
   1107c:	d004      	beq.n	11088 <sys_notify_finalize+0x20>
   1107e:	2b01      	cmp	r3, #1
   11080:	d10f      	bne.n	110a2 <sys_notify_finalize+0x3a>
   11082:	2500      	movs	r5, #0
   11084:	4628      	mov	r0, r5
   11086:	e001      	b.n	1108c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   11088:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1108a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1108c:	2300      	movs	r3, #0
   1108e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   11090:	b110      	cbz	r0, 11098 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   11092:	4631      	mov	r1, r6
   11094:	f014 fd5a 	bl	25b4c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   11098:	4628      	mov	r0, r5
   1109a:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   1109c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1109e:	2500      	movs	r5, #0
		break;
   110a0:	e7f4      	b.n	1108c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   110a2:	4a06      	ldr	r2, [pc, #24]	; (110bc <sys_notify_finalize+0x54>)
   110a4:	4906      	ldr	r1, [pc, #24]	; (110c0 <sys_notify_finalize+0x58>)
   110a6:	4807      	ldr	r0, [pc, #28]	; (110c4 <sys_notify_finalize+0x5c>)
   110a8:	2345      	movs	r3, #69	; 0x45
   110aa:	f017 fb61 	bl	28770 <printk>
   110ae:	4803      	ldr	r0, [pc, #12]	; (110bc <sys_notify_finalize+0x54>)
   110b0:	2145      	movs	r1, #69	; 0x45
   110b2:	f017 fd4e 	bl	28b52 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   110b6:	2500      	movs	r5, #0
   110b8:	e7e7      	b.n	1108a <sys_notify_finalize+0x22>
   110ba:	bf00      	nop
   110bc:	0002eb37 	.word	0x0002eb37
   110c0:	00032bb3 	.word	0x00032bb3
   110c4:	0002e915 	.word	0x0002e915

000110c8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   110c8:	680b      	ldr	r3, [r1, #0]
   110ca:	3301      	adds	r3, #1
   110cc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   110ce:	4b01      	ldr	r3, [pc, #4]	; (110d4 <char_out+0xc>)
   110d0:	681b      	ldr	r3, [r3, #0]
   110d2:	4718      	bx	r3
   110d4:	20000478 	.word	0x20000478

000110d8 <__printk_hook_install>:
	_char_out = fn;
   110d8:	4b01      	ldr	r3, [pc, #4]	; (110e0 <__printk_hook_install+0x8>)
   110da:	6018      	str	r0, [r3, #0]
}
   110dc:	4770      	bx	lr
   110de:	bf00      	nop
   110e0:	20000478 	.word	0x20000478

000110e4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   110e4:	b507      	push	{r0, r1, r2, lr}
   110e6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   110e8:	2100      	movs	r1, #0
{
   110ea:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   110ec:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   110ee:	4803      	ldr	r0, [pc, #12]	; (110fc <vprintk+0x18>)
   110f0:	a901      	add	r1, sp, #4
   110f2:	f000 fc41 	bl	11978 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   110f6:	b003      	add	sp, #12
   110f8:	f85d fb04 	ldr.w	pc, [sp], #4
   110fc:	000110c9 	.word	0x000110c9

00011100 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11100:	b530      	push	{r4, r5, lr}
   11102:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   11104:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   11108:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1110a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   1110c:	a901      	add	r1, sp, #4
   1110e:	4805      	ldr	r0, [pc, #20]	; (11124 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   11110:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   11112:	f000 fc31 	bl	11978 <cbvprintf>

	if (ctx.count < ctx.max) {
   11116:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1111a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1111c:	bfb8      	it	lt
   1111e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11120:	b005      	add	sp, #20
   11122:	bd30      	pop	{r4, r5, pc}
   11124:	0002874b 	.word	0x0002874b

00011128 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1112c:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   11130:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11132:	f019 0f08 	tst.w	r9, #8
{
   11136:	4604      	mov	r4, r0
   11138:	9203      	str	r2, [sp, #12]
	if (processing) {
   1113a:	d022      	beq.n	11182 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   1113c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1113e:	bf0c      	ite	eq
   11140:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   11144:	f049 0920 	orrne.w	r9, r9, #32
   11148:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   1114c:	3414      	adds	r4, #20
   1114e:	4620      	mov	r0, r4
   11150:	f011 f912 	bl	22378 <z_spin_unlock_valid>
   11154:	b968      	cbnz	r0, 11172 <process_event+0x4a>
   11156:	4a9f      	ldr	r2, [pc, #636]	; (113d4 <process_event+0x2ac>)
   11158:	499f      	ldr	r1, [pc, #636]	; (113d8 <process_event+0x2b0>)
   1115a:	48a0      	ldr	r0, [pc, #640]	; (113dc <process_event+0x2b4>)
   1115c:	23ac      	movs	r3, #172	; 0xac
   1115e:	f017 fb07 	bl	28770 <printk>
   11162:	489f      	ldr	r0, [pc, #636]	; (113e0 <process_event+0x2b8>)
   11164:	4621      	mov	r1, r4
   11166:	f017 fb03 	bl	28770 <printk>
   1116a:	489a      	ldr	r0, [pc, #616]	; (113d4 <process_event+0x2ac>)
   1116c:	21ac      	movs	r1, #172	; 0xac
   1116e:	f017 fcf0 	bl	28b52 <assert_post_action>
   11172:	9b03      	ldr	r3, [sp, #12]
   11174:	f383 8811 	msr	BASEPRI, r3
   11178:	f3bf 8f6f 	isb	sy
}
   1117c:	b005      	add	sp, #20
   1117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   11182:	4f98      	ldr	r7, [pc, #608]	; (113e4 <process_event+0x2bc>)
   11184:	f8df 8254 	ldr.w	r8, [pc, #596]	; 113dc <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11188:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1118c:	2902      	cmp	r1, #2
   1118e:	d106      	bne.n	1119e <process_event+0x76>
			evt = process_recheck(mgr);
   11190:	4620      	mov	r0, r4
   11192:	f017 fb07 	bl	287a4 <process_recheck>
		if (evt == EVT_NOP) {
   11196:	2800      	cmp	r0, #0
   11198:	d0d8      	beq.n	1114c <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   1119a:	2801      	cmp	r0, #1
   1119c:	d168      	bne.n	11270 <process_event+0x148>
			res = mgr->last_res;
   1119e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   111a2:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   111a4:	f1bb 0f00 	cmp.w	fp, #0
   111a8:	da0a      	bge.n	111c0 <process_event+0x98>
	list->head = NULL;
   111aa:	2600      	movs	r6, #0
		*clients = mgr->clients;
   111ac:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   111ae:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   111b2:	e9c4 6600 	strd	r6, r6, [r4]
   111b6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   111ba:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   111bc:	9601      	str	r6, [sp, #4]
   111be:	e027      	b.n	11210 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   111c0:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   111c4:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   111c6:	2901      	cmp	r1, #1
   111c8:	d834      	bhi.n	11234 <process_event+0x10c>
	list->head = NULL;
   111ca:	2100      	movs	r1, #0
   111cc:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   111d0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   111d2:	6825      	ldr	r5, [r4, #0]
   111d4:	b29b      	uxth	r3, r3
	list->tail = NULL;
   111d6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   111da:	d10c      	bne.n	111f6 <process_event+0xce>
	return list->head;
   111dc:	428d      	cmp	r5, r1
   111de:	462a      	mov	r2, r5
   111e0:	bf38      	it	cc
   111e2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   111e4:	b12a      	cbz	r2, 111f2 <process_event+0xca>
				mgr->refs += 1U;
   111e6:	8be1      	ldrh	r1, [r4, #30]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   111e8:	6812      	ldr	r2, [r2, #0]
   111ea:	3101      	adds	r1, #1
   111ec:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   111ee:	2a00      	cmp	r2, #0
   111f0:	d1f8      	bne.n	111e4 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   111f2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   111f6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   111f8:	4620      	mov	r0, r4
   111fa:	f017 fad3 	bl	287a4 <process_recheck>
   111fe:	4606      	mov	r6, r0
   11200:	2800      	cmp	r0, #0
   11202:	d0db      	beq.n	111bc <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11204:	8ba3      	ldrh	r3, [r4, #28]
   11206:	f043 0320 	orr.w	r3, r3, #32
   1120a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   1120c:	2300      	movs	r3, #0
   1120e:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11210:	8ba3      	ldrh	r3, [r4, #28]
   11212:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11216:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11218:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   1121a:	d003      	beq.n	11224 <process_event+0xfc>
		if (do_monitors
   1121c:	68a2      	ldr	r2, [r4, #8]
   1121e:	2a00      	cmp	r2, #0
   11220:	f040 80f0 	bne.w	11404 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   11224:	b91d      	cbnz	r5, 1122e <process_event+0x106>
		    || (transit != NULL)) {
   11226:	9a01      	ldr	r2, [sp, #4]
   11228:	2a00      	cmp	r2, #0
   1122a:	f000 8136 	beq.w	1149a <process_event+0x372>
   1122e:	f04f 0900 	mov.w	r9, #0
   11232:	e0e9      	b.n	11408 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11234:	2a04      	cmp	r2, #4
   11236:	d10e      	bne.n	11256 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11238:	f023 0307 	bic.w	r3, r3, #7
   1123c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1123e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11240:	4620      	mov	r0, r4
   11242:	f017 faaf 	bl	287a4 <process_recheck>
   11246:	4605      	mov	r5, r0
   11248:	b118      	cbz	r0, 11252 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1124a:	f042 0220 	orr.w	r2, r2, #32
   1124e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   11250:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11252:	9501      	str	r5, [sp, #4]
   11254:	e7dc      	b.n	11210 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   11256:	4640      	mov	r0, r8
   11258:	4963      	ldr	r1, [pc, #396]	; (113e8 <process_event+0x2c0>)
   1125a:	f240 131b 	movw	r3, #283	; 0x11b
   1125e:	463a      	mov	r2, r7
   11260:	f017 fa86 	bl	28770 <printk>
   11264:	f240 111b 	movw	r1, #283	; 0x11b
   11268:	4638      	mov	r0, r7
   1126a:	f017 fc72 	bl	28b52 <assert_post_action>
   1126e:	e7ef      	b.n	11250 <process_event+0x128>
		} else if (evt == EVT_START) {
   11270:	2803      	cmp	r0, #3
   11272:	d135      	bne.n	112e0 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   11274:	f1b9 0f00 	cmp.w	r9, #0
   11278:	d00b      	beq.n	11292 <process_event+0x16a>
   1127a:	495c      	ldr	r1, [pc, #368]	; (113ec <process_event+0x2c4>)
   1127c:	4640      	mov	r0, r8
   1127e:	f44f 73ab 	mov.w	r3, #342	; 0x156
   11282:	463a      	mov	r2, r7
   11284:	f017 fa74 	bl	28770 <printk>
   11288:	f44f 71ab 	mov.w	r1, #342	; 0x156
   1128c:	4638      	mov	r0, r7
   1128e:	f017 fc60 	bl	28b52 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11292:	6823      	ldr	r3, [r4, #0]
   11294:	b95b      	cbnz	r3, 112ae <process_event+0x186>
   11296:	4956      	ldr	r1, [pc, #344]	; (113f0 <process_event+0x2c8>)
   11298:	4640      	mov	r0, r8
   1129a:	f240 1357 	movw	r3, #343	; 0x157
   1129e:	463a      	mov	r2, r7
   112a0:	f017 fa66 	bl	28770 <printk>
   112a4:	f240 1157 	movw	r1, #343	; 0x157
   112a8:	4638      	mov	r0, r7
   112aa:	f017 fc52 	bl	28b52 <assert_post_action>
			transit = mgr->transitions->start;
   112ae:	6923      	ldr	r3, [r4, #16]
   112b0:	681b      	ldr	r3, [r3, #0]
   112b2:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   112b4:	b95b      	cbnz	r3, 112ce <process_event+0x1a6>
   112b6:	494f      	ldr	r1, [pc, #316]	; (113f4 <process_event+0x2cc>)
   112b8:	4640      	mov	r0, r8
   112ba:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   112be:	463a      	mov	r2, r7
   112c0:	f017 fa56 	bl	28770 <printk>
   112c4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   112c8:	4638      	mov	r0, r7
   112ca:	f017 fc42 	bl	28b52 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   112ce:	8ba3      	ldrh	r3, [r4, #28]
   112d0:	f023 0307 	bic.w	r3, r3, #7
   112d4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   112d8:	83a3      	strh	r3, [r4, #28]
}
   112da:	2500      	movs	r5, #0
		res = 0;
   112dc:	46ab      	mov	fp, r5
}
   112de:	e797      	b.n	11210 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   112e0:	2804      	cmp	r0, #4
   112e2:	d132      	bne.n	1134a <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   112e4:	f1b9 0f02 	cmp.w	r9, #2
   112e8:	d00b      	beq.n	11302 <process_event+0x1da>
   112ea:	4943      	ldr	r1, [pc, #268]	; (113f8 <process_event+0x2d0>)
   112ec:	4640      	mov	r0, r8
   112ee:	f240 135d 	movw	r3, #349	; 0x15d
   112f2:	463a      	mov	r2, r7
   112f4:	f017 fa3c 	bl	28770 <printk>
   112f8:	f240 115d 	movw	r1, #349	; 0x15d
   112fc:	4638      	mov	r0, r7
   112fe:	f017 fc28 	bl	28b52 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   11302:	8be3      	ldrh	r3, [r4, #30]
   11304:	b15b      	cbz	r3, 1131e <process_event+0x1f6>
   11306:	493d      	ldr	r1, [pc, #244]	; (113fc <process_event+0x2d4>)
   11308:	4640      	mov	r0, r8
   1130a:	f44f 73af 	mov.w	r3, #350	; 0x15e
   1130e:	463a      	mov	r2, r7
   11310:	f017 fa2e 	bl	28770 <printk>
   11314:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11318:	4638      	mov	r0, r7
   1131a:	f017 fc1a 	bl	28b52 <assert_post_action>
			transit = mgr->transitions->stop;
   1131e:	6923      	ldr	r3, [r4, #16]
   11320:	685b      	ldr	r3, [r3, #4]
   11322:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   11324:	b95b      	cbnz	r3, 1133e <process_event+0x216>
   11326:	4933      	ldr	r1, [pc, #204]	; (113f4 <process_event+0x2cc>)
   11328:	4640      	mov	r0, r8
   1132a:	f240 1361 	movw	r3, #353	; 0x161
   1132e:	463a      	mov	r2, r7
   11330:	f017 fa1e 	bl	28770 <printk>
   11334:	f240 1161 	movw	r1, #353	; 0x161
   11338:	4638      	mov	r0, r7
   1133a:	f017 fc0a 	bl	28b52 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1133e:	8ba3      	ldrh	r3, [r4, #28]
   11340:	f023 0307 	bic.w	r3, r3, #7
   11344:	f043 0304 	orr.w	r3, r3, #4
   11348:	e7c6      	b.n	112d8 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   1134a:	2805      	cmp	r0, #5
   1134c:	d132      	bne.n	113b4 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1134e:	f1b9 0f01 	cmp.w	r9, #1
   11352:	d00b      	beq.n	1136c <process_event+0x244>
   11354:	492a      	ldr	r1, [pc, #168]	; (11400 <process_event+0x2d8>)
   11356:	4640      	mov	r0, r8
   11358:	f44f 73b2 	mov.w	r3, #356	; 0x164
   1135c:	463a      	mov	r2, r7
   1135e:	f017 fa07 	bl	28770 <printk>
   11362:	f44f 71b2 	mov.w	r1, #356	; 0x164
   11366:	4638      	mov	r0, r7
   11368:	f017 fbf3 	bl	28b52 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1136c:	6823      	ldr	r3, [r4, #0]
   1136e:	b95b      	cbnz	r3, 11388 <process_event+0x260>
   11370:	491f      	ldr	r1, [pc, #124]	; (113f0 <process_event+0x2c8>)
   11372:	4640      	mov	r0, r8
   11374:	f240 1365 	movw	r3, #357	; 0x165
   11378:	463a      	mov	r2, r7
   1137a:	f017 f9f9 	bl	28770 <printk>
   1137e:	f240 1165 	movw	r1, #357	; 0x165
   11382:	4638      	mov	r0, r7
   11384:	f017 fbe5 	bl	28b52 <assert_post_action>
			transit = mgr->transitions->reset;
   11388:	6923      	ldr	r3, [r4, #16]
   1138a:	689b      	ldr	r3, [r3, #8]
   1138c:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1138e:	b95b      	cbnz	r3, 113a8 <process_event+0x280>
   11390:	4918      	ldr	r1, [pc, #96]	; (113f4 <process_event+0x2cc>)
   11392:	4640      	mov	r0, r8
   11394:	f44f 73b4 	mov.w	r3, #360	; 0x168
   11398:	463a      	mov	r2, r7
   1139a:	f017 f9e9 	bl	28770 <printk>
   1139e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   113a2:	4638      	mov	r0, r7
   113a4:	f017 fbd5 	bl	28b52 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113a8:	8ba3      	ldrh	r3, [r4, #28]
   113aa:	f023 0307 	bic.w	r3, r3, #7
   113ae:	f043 0305 	orr.w	r3, r3, #5
   113b2:	e791      	b.n	112d8 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   113b4:	490c      	ldr	r1, [pc, #48]	; (113e8 <process_event+0x2c0>)
   113b6:	f240 136b 	movw	r3, #363	; 0x16b
   113ba:	463a      	mov	r2, r7
   113bc:	4640      	mov	r0, r8
   113be:	f017 f9d7 	bl	28770 <printk>
   113c2:	2500      	movs	r5, #0
   113c4:	f240 116b 	movw	r1, #363	; 0x16b
   113c8:	4638      	mov	r0, r7
   113ca:	f017 fbc2 	bl	28b52 <assert_post_action>
		onoff_transition_fn transit = NULL;
   113ce:	9501      	str	r5, [sp, #4]
   113d0:	e784      	b.n	112dc <process_event+0x1b4>
   113d2:	bf00      	nop
   113d4:	0002ebfd 	.word	0x0002ebfd
   113d8:	0002ec23 	.word	0x0002ec23
   113dc:	0002e915 	.word	0x0002e915
   113e0:	0002ec3a 	.word	0x0002ec3a
   113e4:	0002eb5a 	.word	0x0002eb5a
   113e8:	00032bb3 	.word	0x00032bb3
   113ec:	0002eb7c 	.word	0x0002eb7c
   113f0:	0002eb88 	.word	0x0002eb88
   113f4:	0002ebab 	.word	0x0002ebab
   113f8:	0002ebc2 	.word	0x0002ebc2
   113fc:	0002ebd8 	.word	0x0002ebd8
   11400:	0002ebe7 	.word	0x0002ebe7
				   && !sys_slist_is_empty(&mgr->monitors);
   11404:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11408:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   1140c:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   11410:	83a3      	strh	r3, [r4, #28]
   11412:	4650      	mov	r0, sl
   11414:	f010 ffb0 	bl	22378 <z_spin_unlock_valid>
   11418:	b968      	cbnz	r0, 11436 <process_event+0x30e>
   1141a:	4a3a      	ldr	r2, [pc, #232]	; (11504 <process_event+0x3dc>)
   1141c:	493a      	ldr	r1, [pc, #232]	; (11508 <process_event+0x3e0>)
   1141e:	23ac      	movs	r3, #172	; 0xac
   11420:	4640      	mov	r0, r8
   11422:	f017 f9a5 	bl	28770 <printk>
   11426:	4839      	ldr	r0, [pc, #228]	; (1150c <process_event+0x3e4>)
   11428:	4651      	mov	r1, sl
   1142a:	f017 f9a1 	bl	28770 <printk>
   1142e:	4835      	ldr	r0, [pc, #212]	; (11504 <process_event+0x3dc>)
   11430:	21ac      	movs	r1, #172	; 0xac
   11432:	f017 fb8e 	bl	28b52 <assert_post_action>
   11436:	9b03      	ldr	r3, [sp, #12]
   11438:	f383 8811 	msr	BASEPRI, r3
   1143c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11440:	f1b9 0f00 	cmp.w	r9, #0
   11444:	d138      	bne.n	114b8 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   11446:	2d00      	cmp	r5, #0
   11448:	d14b      	bne.n	114e2 <process_event+0x3ba>
			if (transit != NULL) {
   1144a:	9b01      	ldr	r3, [sp, #4]
   1144c:	b113      	cbz	r3, 11454 <process_event+0x32c>
				transit(mgr, transition_complete);
   1144e:	4930      	ldr	r1, [pc, #192]	; (11510 <process_event+0x3e8>)
   11450:	4620      	mov	r0, r4
   11452:	4798      	blx	r3
	__asm__ volatile(
   11454:	f04f 0340 	mov.w	r3, #64	; 0x40
   11458:	f3ef 8b11 	mrs	fp, BASEPRI
   1145c:	f383 8812 	msr	BASEPRI_MAX, r3
   11460:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11464:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   11466:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1146a:	f010 ff77 	bl	2235c <z_spin_lock_valid>
   1146e:	b968      	cbnz	r0, 1148c <process_event+0x364>
   11470:	4a24      	ldr	r2, [pc, #144]	; (11504 <process_event+0x3dc>)
   11472:	4928      	ldr	r1, [pc, #160]	; (11514 <process_event+0x3ec>)
   11474:	2381      	movs	r3, #129	; 0x81
   11476:	4640      	mov	r0, r8
   11478:	f017 f97a 	bl	28770 <printk>
   1147c:	4826      	ldr	r0, [pc, #152]	; (11518 <process_event+0x3f0>)
   1147e:	4651      	mov	r1, sl
   11480:	f017 f976 	bl	28770 <printk>
   11484:	481f      	ldr	r0, [pc, #124]	; (11504 <process_event+0x3dc>)
   11486:	2181      	movs	r1, #129	; 0x81
   11488:	f017 fb63 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   1148c:	4650      	mov	r0, sl
   1148e:	f010 ff83 	bl	22398 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11492:	8ba3      	ldrh	r3, [r4, #28]
   11494:	f023 0308 	bic.w	r3, r3, #8
   11498:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1149a:	8ba3      	ldrh	r3, [r4, #28]
   1149c:	06da      	lsls	r2, r3, #27
   1149e:	d528      	bpl.n	114f2 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   114a0:	f023 0310 	bic.w	r3, r3, #16
   114a4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   114a6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   114a8:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   114ac:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   114b0:	2900      	cmp	r1, #0
   114b2:	f47f ae6b 	bne.w	1118c <process_event+0x64>
out:
   114b6:	e649      	b.n	1114c <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   114b8:	68a1      	ldr	r1, [r4, #8]
   114ba:	2900      	cmp	r1, #0
   114bc:	d0c3      	beq.n	11446 <process_event+0x31e>
	return node->next;
   114be:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   114c0:	9a02      	ldr	r2, [sp, #8]
   114c2:	2b00      	cmp	r3, #0
   114c4:	bf38      	it	cc
   114c6:	2300      	movcc	r3, #0
   114c8:	4699      	mov	r9, r3
   114ca:	684b      	ldr	r3, [r1, #4]
   114cc:	4620      	mov	r0, r4
   114ce:	461e      	mov	r6, r3
   114d0:	465b      	mov	r3, fp
   114d2:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   114d4:	f1b9 0f00 	cmp.w	r9, #0
   114d8:	d0b5      	beq.n	11446 <process_event+0x31e>
   114da:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   114de:	4649      	mov	r1, r9
   114e0:	e7ee      	b.n	114c0 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   114e2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   114e4:	9a02      	ldr	r2, [sp, #8]
   114e6:	682d      	ldr	r5, [r5, #0]
   114e8:	465b      	mov	r3, fp
   114ea:	4620      	mov	r0, r4
   114ec:	f017 f976 	bl	287dc <notify_one>
   114f0:	e7a9      	b.n	11446 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   114f2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   114f6:	bf1e      	ittt	ne
   114f8:	f023 0320 	bicne.w	r3, r3, #32
   114fc:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   114fe:	2102      	movne	r1, #2
   11500:	e7d2      	b.n	114a8 <process_event+0x380>
   11502:	bf00      	nop
   11504:	0002ebfd 	.word	0x0002ebfd
   11508:	0002ec23 	.word	0x0002ec23
   1150c:	0002ec3a 	.word	0x0002ec3a
   11510:	0001151d 	.word	0x0001151d
   11514:	0002ec4f 	.word	0x0002ec4f
   11518:	0002ec64 	.word	0x0002ec64

0001151c <transition_complete>:
{
   1151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1151e:	4604      	mov	r4, r0
   11520:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11522:	f100 0614 	add.w	r6, r0, #20
   11526:	f04f 0340 	mov.w	r3, #64	; 0x40
   1152a:	f3ef 8711 	mrs	r7, BASEPRI
   1152e:	f383 8812 	msr	BASEPRI_MAX, r3
   11532:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11536:	4630      	mov	r0, r6
   11538:	f010 ff10 	bl	2235c <z_spin_lock_valid>
   1153c:	b968      	cbnz	r0, 1155a <transition_complete+0x3e>
   1153e:	4a0c      	ldr	r2, [pc, #48]	; (11570 <transition_complete+0x54>)
   11540:	490c      	ldr	r1, [pc, #48]	; (11574 <transition_complete+0x58>)
   11542:	480d      	ldr	r0, [pc, #52]	; (11578 <transition_complete+0x5c>)
   11544:	2381      	movs	r3, #129	; 0x81
   11546:	f017 f913 	bl	28770 <printk>
   1154a:	480c      	ldr	r0, [pc, #48]	; (1157c <transition_complete+0x60>)
   1154c:	4631      	mov	r1, r6
   1154e:	f017 f90f 	bl	28770 <printk>
   11552:	4807      	ldr	r0, [pc, #28]	; (11570 <transition_complete+0x54>)
   11554:	2181      	movs	r1, #129	; 0x81
   11556:	f017 fafc 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   1155a:	4630      	mov	r0, r6
   1155c:	f010 ff1c 	bl	22398 <z_spin_lock_set_owner>
	mgr->last_res = res;
   11560:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   11562:	463a      	mov	r2, r7
   11564:	4620      	mov	r0, r4
   11566:	2101      	movs	r1, #1
}
   11568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1156c:	f7ff bddc 	b.w	11128 <process_event>
   11570:	0002ebfd 	.word	0x0002ebfd
   11574:	0002ec4f 	.word	0x0002ec4f
   11578:	0002e915 	.word	0x0002e915
   1157c:	0002ec64 	.word	0x0002ec64

00011580 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11584:	4604      	mov	r4, r0
   11586:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11588:	f017 f93e 	bl	28808 <validate_args>

	if (rv < 0) {
   1158c:	1e05      	subs	r5, r0, #0
   1158e:	db5e      	blt.n	1164e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   11590:	f104 0914 	add.w	r9, r4, #20
   11594:	f04f 0340 	mov.w	r3, #64	; 0x40
   11598:	f3ef 8a11 	mrs	sl, BASEPRI
   1159c:	f383 8812 	msr	BASEPRI_MAX, r3
   115a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   115a4:	4648      	mov	r0, r9
   115a6:	f010 fed9 	bl	2235c <z_spin_lock_valid>
   115aa:	b968      	cbnz	r0, 115c8 <onoff_request+0x48>
   115ac:	4a38      	ldr	r2, [pc, #224]	; (11690 <onoff_request+0x110>)
   115ae:	4939      	ldr	r1, [pc, #228]	; (11694 <onoff_request+0x114>)
   115b0:	4839      	ldr	r0, [pc, #228]	; (11698 <onoff_request+0x118>)
   115b2:	2381      	movs	r3, #129	; 0x81
   115b4:	f017 f8dc 	bl	28770 <printk>
   115b8:	4838      	ldr	r0, [pc, #224]	; (1169c <onoff_request+0x11c>)
   115ba:	4649      	mov	r1, r9
   115bc:	f017 f8d8 	bl	28770 <printk>
   115c0:	4833      	ldr	r0, [pc, #204]	; (11690 <onoff_request+0x110>)
   115c2:	2181      	movs	r1, #129	; 0x81
   115c4:	f017 fac5 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   115c8:	4648      	mov	r0, r9
   115ca:	f010 fee5 	bl	22398 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   115ce:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   115d0:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   115d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   115d6:	428b      	cmp	r3, r1
   115d8:	f002 0607 	and.w	r6, r2, #7
   115dc:	d050      	beq.n	11680 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   115de:	2e02      	cmp	r6, #2
   115e0:	d124      	bne.n	1162c <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   115e2:	3301      	adds	r3, #1
   115e4:	83e3      	strh	r3, [r4, #30]
	rv = state;
   115e6:	4635      	mov	r5, r6
		notify = true;
   115e8:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   115ec:	4648      	mov	r0, r9
   115ee:	f010 fec3 	bl	22378 <z_spin_unlock_valid>
   115f2:	b968      	cbnz	r0, 11610 <onoff_request+0x90>
   115f4:	4a26      	ldr	r2, [pc, #152]	; (11690 <onoff_request+0x110>)
   115f6:	492a      	ldr	r1, [pc, #168]	; (116a0 <onoff_request+0x120>)
   115f8:	4827      	ldr	r0, [pc, #156]	; (11698 <onoff_request+0x118>)
   115fa:	23ac      	movs	r3, #172	; 0xac
   115fc:	f017 f8b8 	bl	28770 <printk>
   11600:	4828      	ldr	r0, [pc, #160]	; (116a4 <onoff_request+0x124>)
   11602:	4649      	mov	r1, r9
   11604:	f017 f8b4 	bl	28770 <printk>
   11608:	4821      	ldr	r0, [pc, #132]	; (11690 <onoff_request+0x110>)
   1160a:	21ac      	movs	r1, #172	; 0xac
   1160c:	f017 faa1 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   11610:	f38a 8811 	msr	BASEPRI, sl
   11614:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11618:	f1b8 0f00 	cmp.w	r8, #0
   1161c:	d017      	beq.n	1164e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   1161e:	2300      	movs	r3, #0
   11620:	4632      	mov	r2, r6
   11622:	4639      	mov	r1, r7
   11624:	4620      	mov	r0, r4
   11626:	f017 f8d9 	bl	287dc <notify_one>
   1162a:	e010      	b.n	1164e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   1162c:	0793      	lsls	r3, r2, #30
   1162e:	d001      	beq.n	11634 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   11630:	2e06      	cmp	r6, #6
   11632:	d10f      	bne.n	11654 <onoff_request+0xd4>
	parent->next = child;
   11634:	2300      	movs	r3, #0
   11636:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   11638:	6863      	ldr	r3, [r4, #4]
   1163a:	b9f3      	cbnz	r3, 1167a <onoff_request+0xfa>
	list->head = node;
   1163c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   11640:	4635      	mov	r5, r6
   11642:	b9fe      	cbnz	r6, 11684 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   11644:	4652      	mov	r2, sl
   11646:	2102      	movs	r1, #2
   11648:	4620      	mov	r0, r4
   1164a:	f7ff fd6d 	bl	11128 <process_event>
		}
	}

	return rv;
}
   1164e:	4628      	mov	r0, r5
   11650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   11654:	2e05      	cmp	r6, #5
   11656:	d018      	beq.n	1168a <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11658:	2e01      	cmp	r6, #1
   1165a:	d00b      	beq.n	11674 <onoff_request+0xf4>
   1165c:	4912      	ldr	r1, [pc, #72]	; (116a8 <onoff_request+0x128>)
   1165e:	480e      	ldr	r0, [pc, #56]	; (11698 <onoff_request+0x118>)
   11660:	4a12      	ldr	r2, [pc, #72]	; (116ac <onoff_request+0x12c>)
   11662:	f240 13c9 	movw	r3, #457	; 0x1c9
   11666:	f017 f883 	bl	28770 <printk>
   1166a:	4810      	ldr	r0, [pc, #64]	; (116ac <onoff_request+0x12c>)
   1166c:	f240 11c9 	movw	r1, #457	; 0x1c9
   11670:	f017 fa6f 	bl	28b52 <assert_post_action>
		rv = -EIO;
   11674:	f06f 0504 	mvn.w	r5, #4
   11678:	e004      	b.n	11684 <onoff_request+0x104>
	parent->next = child;
   1167a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   1167c:	6067      	str	r7, [r4, #4]
}
   1167e:	e7df      	b.n	11640 <onoff_request+0xc0>
		rv = -EAGAIN;
   11680:	f06f 050a 	mvn.w	r5, #10
   11684:	f04f 0800 	mov.w	r8, #0
   11688:	e7b0      	b.n	115ec <onoff_request+0x6c>
		rv = -ENOTSUP;
   1168a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1168e:	e7f9      	b.n	11684 <onoff_request+0x104>
   11690:	0002ebfd 	.word	0x0002ebfd
   11694:	0002ec4f 	.word	0x0002ec4f
   11698:	0002e915 	.word	0x0002e915
   1169c:	0002ec64 	.word	0x0002ec64
   116a0:	0002ec23 	.word	0x0002ec23
   116a4:	0002ec3a 	.word	0x0002ec3a
   116a8:	0002ebe7 	.word	0x0002ebe7
   116ac:	0002eb5a 	.word	0x0002eb5a

000116b0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   116b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   116b2:	460d      	mov	r5, r1
   116b4:	2900      	cmp	r1, #0
   116b6:	d039      	beq.n	1172c <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   116b8:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   116ba:	1f0c      	subs	r4, r1, #4
   116bc:	1ba4      	subs	r4, r4, r6
   116be:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   116c0:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   116c4:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   116c6:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   116c8:	07db      	lsls	r3, r3, #31
   116ca:	d40d      	bmi.n	116e8 <sys_heap_free+0x38>
   116cc:	4a18      	ldr	r2, [pc, #96]	; (11730 <sys_heap_free+0x80>)
   116ce:	4919      	ldr	r1, [pc, #100]	; (11734 <sys_heap_free+0x84>)
   116d0:	4819      	ldr	r0, [pc, #100]	; (11738 <sys_heap_free+0x88>)
   116d2:	23a3      	movs	r3, #163	; 0xa3
   116d4:	f017 f84c 	bl	28770 <printk>
   116d8:	4818      	ldr	r0, [pc, #96]	; (1173c <sys_heap_free+0x8c>)
   116da:	4629      	mov	r1, r5
   116dc:	f017 f848 	bl	28770 <printk>
   116e0:	4813      	ldr	r0, [pc, #76]	; (11730 <sys_heap_free+0x80>)
   116e2:	21a3      	movs	r1, #163	; 0xa3
   116e4:	f017 fa35 	bl	28b52 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   116e8:	4639      	mov	r1, r7
   116ea:	4630      	mov	r0, r6
   116ec:	f017 f8b8 	bl	28860 <chunk_size>
   116f0:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
   116f2:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   116f6:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   116f8:	4287      	cmp	r7, r0
   116fa:	d00d      	beq.n	11718 <sys_heap_free+0x68>
   116fc:	4a0c      	ldr	r2, [pc, #48]	; (11730 <sys_heap_free+0x80>)
   116fe:	4910      	ldr	r1, [pc, #64]	; (11740 <sys_heap_free+0x90>)
   11700:	480d      	ldr	r0, [pc, #52]	; (11738 <sys_heap_free+0x88>)
   11702:	23ab      	movs	r3, #171	; 0xab
   11704:	f017 f834 	bl	28770 <printk>
   11708:	480e      	ldr	r0, [pc, #56]	; (11744 <sys_heap_free+0x94>)
   1170a:	4629      	mov	r1, r5
   1170c:	f017 f830 	bl	28770 <printk>
   11710:	4807      	ldr	r0, [pc, #28]	; (11730 <sys_heap_free+0x80>)
   11712:	21ab      	movs	r1, #171	; 0xab
   11714:	f017 fa1d 	bl	28b52 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11718:	8863      	ldrh	r3, [r4, #2]
   1171a:	f023 0301 	bic.w	r3, r3, #1
   1171e:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   11720:	4639      	mov	r1, r7
   11722:	4630      	mov	r0, r6
}
   11724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   11728:	f017 b957 	b.w	289da <free_chunk>
}
   1172c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1172e:	bf00      	nop
   11730:	0002ec7c 	.word	0x0002ec7c
   11734:	0002ec9d 	.word	0x0002ec9d
   11738:	0002e915 	.word	0x0002e915
   1173c:	0002ecae 	.word	0x0002ecae
   11740:	0002ece6 	.word	0x0002ece6
   11744:	0002ed0c 	.word	0x0002ed0c

00011748 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11748:	424b      	negs	r3, r1
{
   1174a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1174e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   11752:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   11756:	6806      	ldr	r6, [r0, #0]
{
   11758:	4614      	mov	r4, r2
	if (align != rew) {
   1175a:	d01f      	beq.n	1179c <sys_heap_aligned_alloc+0x54>
		return false;
   1175c:	2f04      	cmp	r7, #4
   1175e:	463d      	mov	r5, r7
   11760:	46b9      	mov	r9, r7
   11762:	bf28      	it	cs
   11764:	2504      	movcs	r5, #4
		align -= rew;
   11766:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11768:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
   1176c:	ea1a 0f07 	tst.w	sl, r7
   11770:	d00e      	beq.n	11790 <sys_heap_aligned_alloc+0x48>
   11772:	4933      	ldr	r1, [pc, #204]	; (11840 <sys_heap_aligned_alloc+0xf8>)
   11774:	4a33      	ldr	r2, [pc, #204]	; (11844 <sys_heap_aligned_alloc+0xfc>)
   11776:	4834      	ldr	r0, [pc, #208]	; (11848 <sys_heap_aligned_alloc+0x100>)
   11778:	f240 1327 	movw	r3, #295	; 0x127
   1177c:	f016 fff8 	bl	28770 <printk>
   11780:	4832      	ldr	r0, [pc, #200]	; (1184c <sys_heap_aligned_alloc+0x104>)
   11782:	f016 fff5 	bl	28770 <printk>
   11786:	482f      	ldr	r0, [pc, #188]	; (11844 <sys_heap_aligned_alloc+0xfc>)
   11788:	f240 1127 	movw	r1, #295	; 0x127
   1178c:	f017 f9e1 	bl	28b52 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   11790:	b97c      	cbnz	r4, 117b2 <sys_heap_aligned_alloc+0x6a>
		return NULL;
   11792:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   11796:	4648      	mov	r0, r9
   11798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   1179c:	2904      	cmp	r1, #4
   1179e:	d804      	bhi.n	117aa <sys_heap_aligned_alloc+0x62>
}
   117a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   117a4:	4611      	mov	r1, r2
   117a6:	f017 b949 	b.w	28a3c <sys_heap_alloc>
		rew = 0;
   117aa:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   117ae:	2504      	movs	r5, #4
   117b0:	e7da      	b.n	11768 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   117b2:	68b3      	ldr	r3, [r6, #8]
   117b4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   117b8:	d9eb      	bls.n	11792 <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   117ba:	f104 010b 	add.w	r1, r4, #11
   117be:	4439      	add	r1, r7
   117c0:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   117c2:	08c9      	lsrs	r1, r1, #3
   117c4:	4630      	mov	r0, r6
   117c6:	f017 f8a1 	bl	2890c <alloc_chunk>
	if (c0 == 0) {
   117ca:	4680      	mov	r8, r0
   117cc:	2800      	cmp	r0, #0
   117ce:	d0e0      	beq.n	11792 <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   117d0:	f109 0504 	add.w	r5, r9, #4
   117d4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   117d8:	4435      	add	r5, r6
   117da:	4455      	add	r5, sl
   117dc:	427f      	negs	r7, r7
   117de:	402f      	ands	r7, r5
   117e0:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   117e4:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   117e6:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   117ea:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   117ec:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   117ee:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   117f2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   117f4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   117f8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   117fc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11800:	d208      	bcs.n	11814 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
   11802:	4601      	mov	r1, r0
   11804:	463a      	mov	r2, r7
   11806:	4630      	mov	r0, r6
   11808:	f017 f8cd 	bl	289a6 <split_chunks>
		free_list_add(h, c0);
   1180c:	4641      	mov	r1, r8
   1180e:	4630      	mov	r0, r6
   11810:	f017 f82b 	bl	2886a <free_list_add>
	return c + chunk_size(h, c);
   11814:	4639      	mov	r1, r7
   11816:	4630      	mov	r0, r6
   11818:	f017 f822 	bl	28860 <chunk_size>
   1181c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1181e:	4284      	cmp	r4, r0
   11820:	d207      	bcs.n	11832 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   11822:	4630      	mov	r0, r6
   11824:	4622      	mov	r2, r4
   11826:	f017 f8be 	bl	289a6 <split_chunks>
		free_list_add(h, c_end);
   1182a:	4621      	mov	r1, r4
   1182c:	4630      	mov	r0, r6
   1182e:	f017 f81c 	bl	2886a <free_list_add>
	void *cmem = &buf[c];
   11832:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11836:	8873      	ldrh	r3, [r6, #2]
   11838:	f043 0301 	orr.w	r3, r3, #1
   1183c:	8073      	strh	r3, [r6, #2]
   1183e:	e7aa      	b.n	11796 <sys_heap_aligned_alloc+0x4e>
   11840:	0002ed48 	.word	0x0002ed48
   11844:	0002ec7c 	.word	0x0002ec7c
   11848:	0002e915 	.word	0x0002e915
   1184c:	0002ed63 	.word	0x0002ed63

00011850 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11850:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   11854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11858:	4606      	mov	r6, r0
   1185a:	460d      	mov	r5, r1
   1185c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1185e:	d369      	bcc.n	11934 <sys_heap_init+0xe4>
   11860:	493d      	ldr	r1, [pc, #244]	; (11958 <sys_heap_init+0x108>)
   11862:	4a3e      	ldr	r2, [pc, #248]	; (1195c <sys_heap_init+0x10c>)
   11864:	483e      	ldr	r0, [pc, #248]	; (11960 <sys_heap_init+0x110>)
   11866:	f240 13a5 	movw	r3, #421	; 0x1a5
   1186a:	f016 ff81 	bl	28770 <printk>
   1186e:	483d      	ldr	r0, [pc, #244]	; (11964 <sys_heap_init+0x114>)
   11870:	f016 ff7e 	bl	28770 <printk>
   11874:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11878:	4838      	ldr	r0, [pc, #224]	; (1195c <sys_heap_init+0x10c>)
   1187a:	f017 f96a 	bl	28b52 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   1187e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11880:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11882:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11884:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11888:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1188c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1188e:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11890:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11894:	d80e      	bhi.n	118b4 <sys_heap_init+0x64>
   11896:	4934      	ldr	r1, [pc, #208]	; (11968 <sys_heap_init+0x118>)
   11898:	4a30      	ldr	r2, [pc, #192]	; (1195c <sys_heap_init+0x10c>)
   1189a:	4831      	ldr	r0, [pc, #196]	; (11960 <sys_heap_init+0x110>)
   1189c:	f240 13b5 	movw	r3, #437	; 0x1b5
   118a0:	f016 ff66 	bl	28770 <printk>
   118a4:	4831      	ldr	r0, [pc, #196]	; (1196c <sys_heap_init+0x11c>)
   118a6:	f016 ff63 	bl	28770 <printk>
   118aa:	482c      	ldr	r0, [pc, #176]	; (1195c <sys_heap_init+0x10c>)
   118ac:	f240 11b5 	movw	r1, #437	; 0x1b5
   118b0:	f017 f94f 	bl	28b52 <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   118b4:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   118b8:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
   118bc:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
   118c0:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   118c2:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
   118c6:	2300      	movs	r3, #0
   118c8:	08f6      	lsrs	r6, r6, #3
   118ca:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   118cc:	1c73      	adds	r3, r6, #1
   118ce:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   118d0:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   118d2:	d90e      	bls.n	118f2 <sys_heap_init+0xa2>
   118d4:	4926      	ldr	r1, [pc, #152]	; (11970 <sys_heap_init+0x120>)
   118d6:	4a21      	ldr	r2, [pc, #132]	; (1195c <sys_heap_init+0x10c>)
   118d8:	4821      	ldr	r0, [pc, #132]	; (11960 <sys_heap_init+0x110>)
   118da:	f240 13c5 	movw	r3, #453	; 0x1c5
   118de:	f016 ff47 	bl	28770 <printk>
   118e2:	4822      	ldr	r0, [pc, #136]	; (1196c <sys_heap_init+0x11c>)
   118e4:	f016 ff44 	bl	28770 <printk>
   118e8:	481c      	ldr	r0, [pc, #112]	; (1195c <sys_heap_init+0x10c>)
   118ea:	f240 11c5 	movw	r1, #453	; 0x1c5
   118ee:	f017 f930 	bl	28b52 <assert_post_action>
   118f2:	f104 0210 	add.w	r2, r4, #16
   118f6:	44a0      	add	r8, r4
   118f8:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   118fa:	4590      	cmp	r8, r2
   118fc:	d129      	bne.n	11952 <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   118fe:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11900:	f042 0201 	orr.w	r2, r2, #1
   11904:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
   11906:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1190a:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1190c:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
   1190e:	8023      	strh	r3, [r4, #0]
   11910:	8048      	strh	r0, [r1, #2]
   11912:	1961      	adds	r1, r4, r5
   11914:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
   11918:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
   1191c:	804b      	strh	r3, [r1, #2]
   1191e:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11920:	887b      	ldrh	r3, [r7, #2]
   11922:	f043 0301 	orr.w	r3, r3, #1
   11926:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11928:	4631      	mov	r1, r6
   1192a:	4620      	mov	r0, r4
}
   1192c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   11930:	f016 bf9b 	b.w	2886a <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11934:	2a04      	cmp	r2, #4
   11936:	d8a2      	bhi.n	1187e <sys_heap_init+0x2e>
   11938:	490e      	ldr	r1, [pc, #56]	; (11974 <sys_heap_init+0x124>)
   1193a:	4a08      	ldr	r2, [pc, #32]	; (1195c <sys_heap_init+0x10c>)
   1193c:	4808      	ldr	r0, [pc, #32]	; (11960 <sys_heap_init+0x110>)
   1193e:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   11942:	f016 ff15 	bl	28770 <printk>
   11946:	4809      	ldr	r0, [pc, #36]	; (1196c <sys_heap_init+0x11c>)
   11948:	f016 ff12 	bl	28770 <printk>
   1194c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   11950:	e792      	b.n	11878 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
   11952:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   11956:	e7d0      	b.n	118fa <sys_heap_init+0xaa>
   11958:	0002ed80 	.word	0x0002ed80
   1195c:	0002ec7c 	.word	0x0002ec7c
   11960:	0002e915 	.word	0x0002e915
   11964:	0002ed96 	.word	0x0002ed96
   11968:	0002ede7 	.word	0x0002ede7
   1196c:	0002edce 	.word	0x0002edce
   11970:	0002ee10 	.word	0x0002ee10
   11974:	0002edad 	.word	0x0002edad

00011978 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1197c:	b091      	sub	sp, #68	; 0x44
   1197e:	468b      	mov	fp, r1
   11980:	9002      	str	r0, [sp, #8]
   11982:	4692      	mov	sl, r2
   11984:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11986:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11988:	f89a 0000 	ldrb.w	r0, [sl]
   1198c:	b908      	cbnz	r0, 11992 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1198e:	4628      	mov	r0, r5
   11990:	e35e      	b.n	12050 <cbvprintf+0x6d8>
		if (*fp != '%') {
   11992:	2825      	cmp	r0, #37	; 0x25
   11994:	f10a 0701 	add.w	r7, sl, #1
   11998:	d007      	beq.n	119aa <cbvprintf+0x32>
			OUTC('%');
   1199a:	9b02      	ldr	r3, [sp, #8]
   1199c:	4659      	mov	r1, fp
   1199e:	4798      	blx	r3
   119a0:	2800      	cmp	r0, #0
   119a2:	f2c0 8355 	blt.w	12050 <cbvprintf+0x6d8>
   119a6:	3501      	adds	r5, #1
			break;
   119a8:	e210      	b.n	11dcc <cbvprintf+0x454>
		} state = {
   119aa:	2218      	movs	r2, #24
   119ac:	2100      	movs	r1, #0
   119ae:	a80a      	add	r0, sp, #40	; 0x28
   119b0:	f019 f87e 	bl	2aab0 <memset>
	if (*sp == '%') {
   119b4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   119b8:	2b25      	cmp	r3, #37	; 0x25
   119ba:	d078      	beq.n	11aae <cbvprintf+0x136>
   119bc:	2200      	movs	r2, #0
   119be:	4694      	mov	ip, r2
   119c0:	4616      	mov	r6, r2
   119c2:	4696      	mov	lr, r2
   119c4:	4610      	mov	r0, r2
   119c6:	4639      	mov	r1, r7
		switch (*sp) {
   119c8:	f817 3b01 	ldrb.w	r3, [r7], #1
   119cc:	2b2b      	cmp	r3, #43	; 0x2b
   119ce:	f000 809d 	beq.w	11b0c <cbvprintf+0x194>
   119d2:	f200 8094 	bhi.w	11afe <cbvprintf+0x186>
   119d6:	2b20      	cmp	r3, #32
   119d8:	f000 809b 	beq.w	11b12 <cbvprintf+0x19a>
   119dc:	2b23      	cmp	r3, #35	; 0x23
   119de:	f000 809a 	beq.w	11b16 <cbvprintf+0x19e>
   119e2:	b128      	cbz	r0, 119f0 <cbvprintf+0x78>
   119e4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   119e8:	f040 0004 	orr.w	r0, r0, #4
   119ec:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   119f0:	f1be 0f00 	cmp.w	lr, #0
   119f4:	d005      	beq.n	11a02 <cbvprintf+0x8a>
   119f6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   119fa:	f040 0008 	orr.w	r0, r0, #8
   119fe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11a02:	b12e      	cbz	r6, 11a10 <cbvprintf+0x98>
   11a04:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11a08:	f040 0010 	orr.w	r0, r0, #16
   11a0c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11a10:	f1bc 0f00 	cmp.w	ip, #0
   11a14:	d005      	beq.n	11a22 <cbvprintf+0xaa>
   11a16:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11a1a:	f040 0020 	orr.w	r0, r0, #32
   11a1e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11a22:	b12a      	cbz	r2, 11a30 <cbvprintf+0xb8>
   11a24:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11a2c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   11a30:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11a34:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11a38:	2844      	cmp	r0, #68	; 0x44
   11a3a:	d103      	bne.n	11a44 <cbvprintf+0xcc>
		conv->flag_zero = false;
   11a3c:	f36f 1286 	bfc	r2, #6, #1
   11a40:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11a44:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11a48:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   11a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11a4e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11a52:	d17b      	bne.n	11b4c <cbvprintf+0x1d4>
		conv->width_star = true;
   11a54:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11a58:	f042 0201 	orr.w	r2, r2, #1
   11a5c:	1c4b      	adds	r3, r1, #1
   11a5e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   11a62:	781a      	ldrb	r2, [r3, #0]
   11a64:	2a2e      	cmp	r2, #46	; 0x2e
   11a66:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11a6a:	bf0c      	ite	eq
   11a6c:	2101      	moveq	r1, #1
   11a6e:	2100      	movne	r1, #0
   11a70:	f361 0241 	bfi	r2, r1, #1, #1
   11a74:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11a78:	d174      	bne.n	11b64 <cbvprintf+0x1ec>
	if (*sp == '*') {
   11a7a:	785a      	ldrb	r2, [r3, #1]
   11a7c:	2a2a      	cmp	r2, #42	; 0x2a
   11a7e:	d06a      	beq.n	11b56 <cbvprintf+0x1de>
   11a80:	3301      	adds	r3, #1
	size_t val = 0;
   11a82:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   11a84:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11a86:	4618      	mov	r0, r3
   11a88:	f810 2b01 	ldrb.w	r2, [r0], #1
   11a8c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11a90:	2f09      	cmp	r7, #9
   11a92:	f240 808e 	bls.w	11bb2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   11a96:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   11a9a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   11a9c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   11aa0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   11aa4:	f361 0241 	bfi	r2, r1, #1, #1
   11aa8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11aac:	e05a      	b.n	11b64 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   11aae:	f10a 0702 	add.w	r7, sl, #2
   11ab2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   11ab6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11aba:	07d9      	lsls	r1, r3, #31
   11abc:	f140 8149 	bpl.w	11d52 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   11ac0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   11ac4:	f1b9 0f00 	cmp.w	r9, #0
   11ac8:	da07      	bge.n	11ada <cbvprintf+0x162>
				conv->flag_dash = true;
   11aca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11ace:	f042 0204 	orr.w	r2, r2, #4
   11ad2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   11ad6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   11ada:	075a      	lsls	r2, r3, #29
   11adc:	f140 8142 	bpl.w	11d64 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   11ae0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   11ae4:	f1b8 0f00 	cmp.w	r8, #0
   11ae8:	f280 8141 	bge.w	11d6e <cbvprintf+0x3f6>
				conv->prec_present = false;
   11aec:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11af0:	f36f 0341 	bfc	r3, #1, #1
   11af4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   11af8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   11afc:	e137      	b.n	11d6e <cbvprintf+0x3f6>
		switch (*sp) {
   11afe:	2b2d      	cmp	r3, #45	; 0x2d
   11b00:	d00c      	beq.n	11b1c <cbvprintf+0x1a4>
   11b02:	2b30      	cmp	r3, #48	; 0x30
   11b04:	f47f af6d 	bne.w	119e2 <cbvprintf+0x6a>
			conv->flag_zero = true;
   11b08:	2201      	movs	r2, #1
	} while (loop);
   11b0a:	e75c      	b.n	119c6 <cbvprintf+0x4e>
			conv->flag_plus = true;
   11b0c:	f04f 0e01 	mov.w	lr, #1
   11b10:	e759      	b.n	119c6 <cbvprintf+0x4e>
			conv->flag_space = true;
   11b12:	2601      	movs	r6, #1
   11b14:	e757      	b.n	119c6 <cbvprintf+0x4e>
			conv->flag_hash = true;
   11b16:	f04f 0c01 	mov.w	ip, #1
   11b1a:	e754      	b.n	119c6 <cbvprintf+0x4e>
		switch (*sp) {
   11b1c:	2001      	movs	r0, #1
   11b1e:	e752      	b.n	119c6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   11b20:	fb0c 0202 	mla	r2, ip, r2, r0
   11b24:	3a30      	subs	r2, #48	; 0x30
   11b26:	4633      	mov	r3, r6
   11b28:	461e      	mov	r6, r3
   11b2a:	f816 0b01 	ldrb.w	r0, [r6], #1
   11b2e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11b32:	2f09      	cmp	r7, #9
   11b34:	d9f4      	bls.n	11b20 <cbvprintf+0x1a8>
	if (sp != wp) {
   11b36:	4299      	cmp	r1, r3
   11b38:	d093      	beq.n	11a62 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11b3a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   11b3e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   11b40:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   11b42:	f362 0141 	bfi	r1, r2, #1, #1
   11b46:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   11b4a:	e78a      	b.n	11a62 <cbvprintf+0xea>
   11b4c:	460b      	mov	r3, r1
	size_t val = 0;
   11b4e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11b50:	f04f 0c0a 	mov.w	ip, #10
   11b54:	e7e8      	b.n	11b28 <cbvprintf+0x1b0>
		conv->prec_star = true;
   11b56:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11b5a:	f042 0204 	orr.w	r2, r2, #4
   11b5e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   11b62:	3302      	adds	r3, #2
	switch (*sp) {
   11b64:	461f      	mov	r7, r3
   11b66:	f817 2b01 	ldrb.w	r2, [r7], #1
   11b6a:	2a6c      	cmp	r2, #108	; 0x6c
   11b6c:	d041      	beq.n	11bf2 <cbvprintf+0x27a>
   11b6e:	d825      	bhi.n	11bbc <cbvprintf+0x244>
   11b70:	2a68      	cmp	r2, #104	; 0x68
   11b72:	d02b      	beq.n	11bcc <cbvprintf+0x254>
   11b74:	2a6a      	cmp	r2, #106	; 0x6a
   11b76:	d046      	beq.n	11c06 <cbvprintf+0x28e>
   11b78:	2a4c      	cmp	r2, #76	; 0x4c
   11b7a:	d04c      	beq.n	11c16 <cbvprintf+0x29e>
   11b7c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   11b7e:	f817 2b01 	ldrb.w	r2, [r7], #1
   11b82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11b86:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   11b8a:	2a78      	cmp	r2, #120	; 0x78
   11b8c:	f200 80d9 	bhi.w	11d42 <cbvprintf+0x3ca>
   11b90:	2a57      	cmp	r2, #87	; 0x57
   11b92:	d84d      	bhi.n	11c30 <cbvprintf+0x2b8>
   11b94:	2a41      	cmp	r2, #65	; 0x41
   11b96:	d003      	beq.n	11ba0 <cbvprintf+0x228>
   11b98:	3a45      	subs	r2, #69	; 0x45
   11b9a:	2a02      	cmp	r2, #2
   11b9c:	f200 80d1 	bhi.w	11d42 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   11ba0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11ba4:	2204      	movs	r2, #4
   11ba6:	f362 0302 	bfi	r3, r2, #0, #3
   11baa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   11bae:	2301      	movs	r3, #1
			break;
   11bb0:	e09e      	b.n	11cf0 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   11bb2:	fb06 2101 	mla	r1, r6, r1, r2
   11bb6:	3930      	subs	r1, #48	; 0x30
   11bb8:	4603      	mov	r3, r0
   11bba:	e764      	b.n	11a86 <cbvprintf+0x10e>
	switch (*sp) {
   11bbc:	2a74      	cmp	r2, #116	; 0x74
   11bbe:	d026      	beq.n	11c0e <cbvprintf+0x296>
   11bc0:	2a7a      	cmp	r2, #122	; 0x7a
   11bc2:	d1db      	bne.n	11b7c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   11bc4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11bc8:	2206      	movs	r2, #6
   11bca:	e00d      	b.n	11be8 <cbvprintf+0x270>
		if (*++sp == 'h') {
   11bcc:	785a      	ldrb	r2, [r3, #1]
   11bce:	2a68      	cmp	r2, #104	; 0x68
   11bd0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11bd4:	d106      	bne.n	11be4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   11bd6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11bd8:	f361 02c6 	bfi	r2, r1, #3, #4
   11bdc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   11be0:	1c9f      	adds	r7, r3, #2
   11be2:	e7cc      	b.n	11b7e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   11be4:	4613      	mov	r3, r2
   11be6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   11be8:	f362 03c6 	bfi	r3, r2, #3, #4
   11bec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   11bf0:	e7c5      	b.n	11b7e <cbvprintf+0x206>
		if (*++sp == 'l') {
   11bf2:	785a      	ldrb	r2, [r3, #1]
   11bf4:	2a6c      	cmp	r2, #108	; 0x6c
   11bf6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11bfa:	d101      	bne.n	11c00 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   11bfc:	2104      	movs	r1, #4
   11bfe:	e7eb      	b.n	11bd8 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   11c00:	4613      	mov	r3, r2
   11c02:	2203      	movs	r2, #3
   11c04:	e7f0      	b.n	11be8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   11c06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11c0a:	2205      	movs	r2, #5
   11c0c:	e7ec      	b.n	11be8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   11c0e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11c12:	2207      	movs	r2, #7
   11c14:	e7e8      	b.n	11be8 <cbvprintf+0x270>
		conv->unsupported = true;
   11c16:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   11c1a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   11c1e:	f023 0302 	bic.w	r3, r3, #2
   11c22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   11c26:	f043 0302 	orr.w	r3, r3, #2
   11c2a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   11c2e:	e7a6      	b.n	11b7e <cbvprintf+0x206>
   11c30:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11c34:	2920      	cmp	r1, #32
   11c36:	f200 8084 	bhi.w	11d42 <cbvprintf+0x3ca>
   11c3a:	a001      	add	r0, pc, #4	; (adr r0, 11c40 <cbvprintf+0x2c8>)
   11c3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11c40:	00011d05 	.word	0x00011d05
   11c44:	00011d43 	.word	0x00011d43
   11c48:	00011d43 	.word	0x00011d43
   11c4c:	00011d43 	.word	0x00011d43
   11c50:	00011d43 	.word	0x00011d43
   11c54:	00011d43 	.word	0x00011d43
   11c58:	00011d43 	.word	0x00011d43
   11c5c:	00011d43 	.word	0x00011d43
   11c60:	00011d43 	.word	0x00011d43
   11c64:	00011ba1 	.word	0x00011ba1
   11c68:	00011d43 	.word	0x00011d43
   11c6c:	00011d05 	.word	0x00011d05
   11c70:	00011cc5 	.word	0x00011cc5
   11c74:	00011ba1 	.word	0x00011ba1
   11c78:	00011ba1 	.word	0x00011ba1
   11c7c:	00011ba1 	.word	0x00011ba1
   11c80:	00011d43 	.word	0x00011d43
   11c84:	00011cc5 	.word	0x00011cc5
   11c88:	00011d43 	.word	0x00011d43
   11c8c:	00011d43 	.word	0x00011d43
   11c90:	00011d43 	.word	0x00011d43
   11c94:	00011d43 	.word	0x00011d43
   11c98:	00011d0d 	.word	0x00011d0d
   11c9c:	00011d05 	.word	0x00011d05
   11ca0:	00011d29 	.word	0x00011d29
   11ca4:	00011d43 	.word	0x00011d43
   11ca8:	00011d43 	.word	0x00011d43
   11cac:	00011d29 	.word	0x00011d29
   11cb0:	00011d43 	.word	0x00011d43
   11cb4:	00011d05 	.word	0x00011d05
   11cb8:	00011d43 	.word	0x00011d43
   11cbc:	00011d43 	.word	0x00011d43
   11cc0:	00011d05 	.word	0x00011d05
		conv->specifier_cat = SPECIFIER_SINT;
   11cc4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   11cc8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   11cca:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11cce:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11cd2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11cd4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   11cd8:	bf02      	ittt	eq
   11cda:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   11cde:	f041 0101 	orreq.w	r1, r1, #1
   11ce2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   11ce6:	2a63      	cmp	r2, #99	; 0x63
   11ce8:	d131      	bne.n	11d4e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11cea:	3b00      	subs	r3, #0
   11cec:	bf18      	it	ne
   11cee:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   11cf0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11cf4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11cf8:	430b      	orrs	r3, r1
   11cfa:	f363 0241 	bfi	r2, r3, #1, #1
   11cfe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11d02:	e6d8      	b.n	11ab6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   11d04:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   11d08:	2002      	movs	r0, #2
   11d0a:	e7de      	b.n	11cca <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   11d0c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11d10:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11d14:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   11d18:	2103      	movs	r1, #3
   11d1a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11d1e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11d20:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11d24:	4143      	adcs	r3, r0
   11d26:	e7e3      	b.n	11cf0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   11d28:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11d2c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   11d2e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11d32:	f361 0202 	bfi	r2, r1, #0, #3
   11d36:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   11d3a:	bf14      	ite	ne
   11d3c:	2301      	movne	r3, #1
   11d3e:	2300      	moveq	r3, #0
   11d40:	e7d6      	b.n	11cf0 <cbvprintf+0x378>
		conv->invalid = true;
   11d42:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11d46:	f043 0301 	orr.w	r3, r3, #1
   11d4a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   11d4e:	2300      	movs	r3, #0
   11d50:	e7ce      	b.n	11cf0 <cbvprintf+0x378>
		} else if (conv->width_present) {
   11d52:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   11d56:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11d58:	bfb4      	ite	lt
   11d5a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   11d5e:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
   11d62:	e6ba      	b.n	11ada <cbvprintf+0x162>
		} else if (conv->prec_present) {
   11d64:	079b      	lsls	r3, r3, #30
   11d66:	f57f aec7 	bpl.w	11af8 <cbvprintf+0x180>
			precision = conv->prec_value;
   11d6a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   11d6e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   11d72:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11d74:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   11d78:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   11d7c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11d80:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11d82:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11d86:	d136      	bne.n	11df6 <cbvprintf+0x47e>
			switch (length_mod) {
   11d88:	1ed3      	subs	r3, r2, #3
   11d8a:	2b04      	cmp	r3, #4
   11d8c:	d820      	bhi.n	11dd0 <cbvprintf+0x458>
   11d8e:	e8df f003 	tbb	[pc, r3]
   11d92:	0703      	.short	0x0703
   11d94:	1f07      	.short	0x1f07
   11d96:	1f          	.byte	0x1f
   11d97:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11d98:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   11d9c:	17c1      	asrs	r1, r0, #31
   11d9e:	e004      	b.n	11daa <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   11da0:	3407      	adds	r4, #7
   11da2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   11da6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   11daa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   11dae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11db2:	f013 0603 	ands.w	r6, r3, #3
   11db6:	d054      	beq.n	11e62 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   11db8:	9802      	ldr	r0, [sp, #8]
   11dba:	463b      	mov	r3, r7
   11dbc:	4652      	mov	r2, sl
   11dbe:	4659      	mov	r1, fp
   11dc0:	f016 feb1 	bl	28b26 <outs>
   11dc4:	2800      	cmp	r0, #0
   11dc6:	f2c0 8143 	blt.w	12050 <cbvprintf+0x6d8>
   11dca:	4405      	add	r5, r0
			continue;
   11dcc:	46ba      	mov	sl, r7
   11dce:	e5db      	b.n	11988 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11dd0:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   11dd4:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11dd6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   11dda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11dde:	d105      	bne.n	11dec <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   11de0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   11de4:	930a      	str	r3, [sp, #40]	; 0x28
   11de6:	2300      	movs	r3, #0
   11de8:	930b      	str	r3, [sp, #44]	; 0x2c
   11dea:	e7e0      	b.n	11dae <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   11dec:	2a02      	cmp	r2, #2
   11dee:	d1de      	bne.n	11dae <cbvprintf+0x436>
				value->sint = (short)value->sint;
   11df0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   11df4:	e7d2      	b.n	11d9c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11df6:	2b02      	cmp	r3, #2
   11df8:	d123      	bne.n	11e42 <cbvprintf+0x4ca>
			switch (length_mod) {
   11dfa:	1ed3      	subs	r3, r2, #3
   11dfc:	2b04      	cmp	r3, #4
   11dfe:	d813      	bhi.n	11e28 <cbvprintf+0x4b0>
   11e00:	e8df f003 	tbb	[pc, r3]
   11e04:	120a0a03 	.word	0x120a0a03
   11e08:	12          	.byte	0x12
   11e09:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   11e0a:	6820      	ldr	r0, [r4, #0]
   11e0c:	900a      	str	r0, [sp, #40]	; 0x28
   11e0e:	2100      	movs	r1, #0
   11e10:	1d23      	adds	r3, r4, #4
   11e12:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   11e14:	461c      	mov	r4, r3
   11e16:	e7ca      	b.n	11dae <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   11e18:	3407      	adds	r4, #7
   11e1a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   11e1e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   11e22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   11e26:	e7f5      	b.n	11e14 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   11e28:	f854 3b04 	ldr.w	r3, [r4], #4
   11e2c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11e2e:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   11e30:	f04f 0300 	mov.w	r3, #0
   11e34:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   11e36:	d0d3      	beq.n	11de0 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   11e38:	2a02      	cmp	r2, #2
   11e3a:	d1b8      	bne.n	11dae <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   11e3c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11e40:	e7d0      	b.n	11de4 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   11e42:	2b04      	cmp	r3, #4
   11e44:	d107      	bne.n	11e56 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   11e46:	3407      	adds	r4, #7
   11e48:	f024 0407 	bic.w	r4, r4, #7
   11e4c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   11e50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11e54:	e7ab      	b.n	11dae <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11e56:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11e58:	bf04      	itt	eq
   11e5a:	f854 3b04 	ldreq.w	r3, [r4], #4
   11e5e:	930a      	streq	r3, [sp, #40]	; 0x28
   11e60:	e7a5      	b.n	11dae <cbvprintf+0x436>
		switch (conv->specifier) {
   11e62:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11e66:	2878      	cmp	r0, #120	; 0x78
   11e68:	d8b0      	bhi.n	11dcc <cbvprintf+0x454>
   11e6a:	2862      	cmp	r0, #98	; 0x62
   11e6c:	d822      	bhi.n	11eb4 <cbvprintf+0x53c>
   11e6e:	2825      	cmp	r0, #37	; 0x25
   11e70:	f43f ad93 	beq.w	1199a <cbvprintf+0x22>
   11e74:	2858      	cmp	r0, #88	; 0x58
   11e76:	d1a9      	bne.n	11dcc <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11e78:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11e7c:	9300      	str	r3, [sp, #0]
   11e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11e82:	ab04      	add	r3, sp, #16
   11e84:	aa0c      	add	r2, sp, #48	; 0x30
   11e86:	f016 fe03 	bl	28a90 <encode_uint>
   11e8a:	4682      	mov	sl, r0
			if (precision >= 0) {
   11e8c:	f1b8 0f00 	cmp.w	r8, #0
   11e90:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   11e94:	db0c      	blt.n	11eb0 <cbvprintf+0x538>
				conv->flag_zero = false;
   11e96:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   11e9a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   11e9e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11ea2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   11ea4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   11ea8:	d902      	bls.n	11eb0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   11eaa:	eba8 0303 	sub.w	r3, r8, r3
   11eae:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   11eb0:	4680      	mov	r8, r0
   11eb2:	e03d      	b.n	11f30 <cbvprintf+0x5b8>
   11eb4:	3863      	subs	r0, #99	; 0x63
   11eb6:	2815      	cmp	r0, #21
   11eb8:	d888      	bhi.n	11dcc <cbvprintf+0x454>
   11eba:	a101      	add	r1, pc, #4	; (adr r1, 11ec0 <cbvprintf+0x548>)
   11ebc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   11ec0:	00011f41 	.word	0x00011f41
   11ec4:	00011fa5 	.word	0x00011fa5
   11ec8:	00011dcd 	.word	0x00011dcd
   11ecc:	00011dcd 	.word	0x00011dcd
   11ed0:	00011dcd 	.word	0x00011dcd
   11ed4:	00011dcd 	.word	0x00011dcd
   11ed8:	00011fa5 	.word	0x00011fa5
   11edc:	00011dcd 	.word	0x00011dcd
   11ee0:	00011dcd 	.word	0x00011dcd
   11ee4:	00011dcd 	.word	0x00011dcd
   11ee8:	00011dcd 	.word	0x00011dcd
   11eec:	00012003 	.word	0x00012003
   11ef0:	00011fd1 	.word	0x00011fd1
   11ef4:	00011fd5 	.word	0x00011fd5
   11ef8:	00011dcd 	.word	0x00011dcd
   11efc:	00011dcd 	.word	0x00011dcd
   11f00:	00011f19 	.word	0x00011f19
   11f04:	00011dcd 	.word	0x00011dcd
   11f08:	00011fd1 	.word	0x00011fd1
   11f0c:	00011dcd 	.word	0x00011dcd
   11f10:	00011dcd 	.word	0x00011dcd
   11f14:	00011fd1 	.word	0x00011fd1
			if (precision >= 0) {
   11f18:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   11f1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   11f20:	db0a      	blt.n	11f38 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   11f22:	4641      	mov	r1, r8
   11f24:	4650      	mov	r0, sl
   11f26:	f018 fd64 	bl	2a9f2 <strnlen>
			bpe = bps + len;
   11f2a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   11f2e:	2600      	movs	r6, #0
		if (bps == NULL) {
   11f30:	f1ba 0f00 	cmp.w	sl, #0
   11f34:	d10c      	bne.n	11f50 <cbvprintf+0x5d8>
   11f36:	e749      	b.n	11dcc <cbvprintf+0x454>
				len = strlen(bps);
   11f38:	4650      	mov	r0, sl
   11f3a:	f018 fd53 	bl	2a9e4 <strlen>
   11f3e:	e7f4      	b.n	11f2a <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11f42:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   11f46:	2600      	movs	r6, #0
			bpe = buf + 1;
   11f48:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   11f4c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   11f50:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   11f54:	b106      	cbz	r6, 11f58 <cbvprintf+0x5e0>
			nj_len += 1U;
   11f56:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   11f58:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11f5c:	06d0      	lsls	r0, r2, #27
   11f5e:	d56b      	bpl.n	12038 <cbvprintf+0x6c0>
			nj_len += 2U;
   11f60:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   11f62:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   11f64:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   11f66:	bf48      	it	mi
   11f68:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   11f6a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   11f6c:	bf48      	it	mi
   11f6e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   11f70:	f1b9 0f00 	cmp.w	r9, #0
   11f74:	dd79      	ble.n	1206a <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   11f76:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   11f7a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   11f7e:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11f82:	9303      	str	r3, [sp, #12]
   11f84:	0753      	lsls	r3, r2, #29
   11f86:	d470      	bmi.n	1206a <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   11f88:	0650      	lsls	r0, r2, #25
   11f8a:	d564      	bpl.n	12056 <cbvprintf+0x6de>
					if (sign != 0) {
   11f8c:	b146      	cbz	r6, 11fa0 <cbvprintf+0x628>
						OUTC(sign);
   11f8e:	9b02      	ldr	r3, [sp, #8]
   11f90:	4659      	mov	r1, fp
   11f92:	4630      	mov	r0, r6
   11f94:	4798      	blx	r3
   11f96:	2800      	cmp	r0, #0
   11f98:	db5a      	blt.n	12050 <cbvprintf+0x6d8>
						sign = 0;
   11f9a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   11f9c:	3501      	adds	r5, #1
						sign = 0;
   11f9e:	461e      	mov	r6, r3
					pad = '0';
   11fa0:	2330      	movs	r3, #48	; 0x30
   11fa2:	e059      	b.n	12058 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   11fa4:	071e      	lsls	r6, r3, #28
   11fa6:	d411      	bmi.n	11fcc <cbvprintf+0x654>
				sign = ' ';
   11fa8:	f013 0610 	ands.w	r6, r3, #16
   11fac:	bf18      	it	ne
   11fae:	2620      	movne	r6, #32
			sint = value->sint;
   11fb0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   11fb4:	2a00      	cmp	r2, #0
   11fb6:	f173 0100 	sbcs.w	r1, r3, #0
   11fba:	f6bf af5d 	bge.w	11e78 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   11fbe:	4252      	negs	r2, r2
   11fc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11fc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   11fc8:	262d      	movs	r6, #45	; 0x2d
   11fca:	e755      	b.n	11e78 <cbvprintf+0x500>
				sign = '+';
   11fcc:	262b      	movs	r6, #43	; 0x2b
   11fce:	e7ef      	b.n	11fb0 <cbvprintf+0x638>
		switch (conv->specifier) {
   11fd0:	2600      	movs	r6, #0
   11fd2:	e751      	b.n	11e78 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   11fd4:	980a      	ldr	r0, [sp, #40]	; 0x28
   11fd6:	b348      	cbz	r0, 1202c <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11fd8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11fdc:	9300      	str	r3, [sp, #0]
   11fde:	aa0c      	add	r2, sp, #48	; 0x30
   11fe0:	ab04      	add	r3, sp, #16
   11fe2:	2100      	movs	r1, #0
   11fe4:	f016 fd54 	bl	28a90 <encode_uint>
				conv->altform_0c = true;
   11fe8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11fec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11ff0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11ff4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11ff8:	4682      	mov	sl, r0
				conv->altform_0c = true;
   11ffa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   11ffe:	2600      	movs	r6, #0
				goto prec_int_pad0;
   12000:	e744      	b.n	11e8c <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   12002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   12004:	2a07      	cmp	r2, #7
   12006:	f63f aee1 	bhi.w	11dcc <cbvprintf+0x454>
   1200a:	e8df f002 	tbb	[pc, r2]
   1200e:	040d      	.short	0x040d
   12010:	08080d06 	.word	0x08080d06
   12014:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   12016:	701d      	strb	r5, [r3, #0]
		break;
   12018:	e6d8      	b.n	11dcc <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1201a:	801d      	strh	r5, [r3, #0]
		break;
   1201c:	e6d6      	b.n	11dcc <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   1201e:	4628      	mov	r0, r5
   12020:	17e9      	asrs	r1, r5, #31
   12022:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   12026:	e6d1      	b.n	11dcc <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12028:	601d      	str	r5, [r3, #0]
		break;
   1202a:	e6cf      	b.n	11dcc <cbvprintf+0x454>
			bpe = bps + 5;
   1202c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 120f4 <cbvprintf+0x77c>
   12030:	4606      	mov	r6, r0
			bps = "(nil)";
   12032:	f1a8 0a05 	sub.w	sl, r8, #5
   12036:	e78b      	b.n	11f50 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   12038:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1203a:	bf48      	it	mi
   1203c:	3301      	addmi	r3, #1
   1203e:	e790      	b.n	11f62 <cbvprintf+0x5ea>
					OUTC(pad);
   12040:	4618      	mov	r0, r3
   12042:	9303      	str	r3, [sp, #12]
   12044:	4659      	mov	r1, fp
   12046:	9b02      	ldr	r3, [sp, #8]
   12048:	4798      	blx	r3
   1204a:	2800      	cmp	r0, #0
   1204c:	9b03      	ldr	r3, [sp, #12]
   1204e:	da04      	bge.n	1205a <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   12050:	b011      	add	sp, #68	; 0x44
   12052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12056:	2320      	movs	r3, #32
   12058:	444d      	add	r5, r9
   1205a:	464a      	mov	r2, r9
				while (width-- > 0) {
   1205c:	2a00      	cmp	r2, #0
   1205e:	eba5 0109 	sub.w	r1, r5, r9
   12062:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   12066:	dceb      	bgt.n	12040 <cbvprintf+0x6c8>
   12068:	460d      	mov	r5, r1
		if (sign != 0) {
   1206a:	b136      	cbz	r6, 1207a <cbvprintf+0x702>
			OUTC(sign);
   1206c:	9b02      	ldr	r3, [sp, #8]
   1206e:	4659      	mov	r1, fp
   12070:	4630      	mov	r0, r6
   12072:	4798      	blx	r3
   12074:	2800      	cmp	r0, #0
   12076:	dbeb      	blt.n	12050 <cbvprintf+0x6d8>
   12078:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1207a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1207e:	06d9      	lsls	r1, r3, #27
   12080:	d401      	bmi.n	12086 <cbvprintf+0x70e>
   12082:	071a      	lsls	r2, r3, #28
   12084:	d506      	bpl.n	12094 <cbvprintf+0x71c>
				OUTC('0');
   12086:	9b02      	ldr	r3, [sp, #8]
   12088:	4659      	mov	r1, fp
   1208a:	2030      	movs	r0, #48	; 0x30
   1208c:	4798      	blx	r3
   1208e:	2800      	cmp	r0, #0
   12090:	dbde      	blt.n	12050 <cbvprintf+0x6d8>
   12092:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12094:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12098:	06db      	lsls	r3, r3, #27
   1209a:	d507      	bpl.n	120ac <cbvprintf+0x734>
				OUTC(conv->specifier);
   1209c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   120a0:	9b02      	ldr	r3, [sp, #8]
   120a2:	4659      	mov	r1, fp
   120a4:	4798      	blx	r3
   120a6:	2800      	cmp	r0, #0
   120a8:	dbd2      	blt.n	12050 <cbvprintf+0x6d8>
   120aa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   120ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   120ae:	442e      	add	r6, r5
   120b0:	1b73      	subs	r3, r6, r5
   120b2:	2b00      	cmp	r3, #0
   120b4:	dc16      	bgt.n	120e4 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   120b6:	9802      	ldr	r0, [sp, #8]
   120b8:	4643      	mov	r3, r8
   120ba:	4652      	mov	r2, sl
   120bc:	4659      	mov	r1, fp
   120be:	f016 fd32 	bl	28b26 <outs>
   120c2:	2800      	cmp	r0, #0
   120c4:	dbc4      	blt.n	12050 <cbvprintf+0x6d8>
   120c6:	4405      	add	r5, r0
		while (width > 0) {
   120c8:	44a9      	add	r9, r5
   120ca:	eba9 0305 	sub.w	r3, r9, r5
   120ce:	2b00      	cmp	r3, #0
   120d0:	f77f ae7c 	ble.w	11dcc <cbvprintf+0x454>
			OUTC(' ');
   120d4:	9b02      	ldr	r3, [sp, #8]
   120d6:	4659      	mov	r1, fp
   120d8:	2020      	movs	r0, #32
   120da:	4798      	blx	r3
   120dc:	2800      	cmp	r0, #0
   120de:	dbb7      	blt.n	12050 <cbvprintf+0x6d8>
   120e0:	3501      	adds	r5, #1
			--width;
   120e2:	e7f2      	b.n	120ca <cbvprintf+0x752>
				OUTC('0');
   120e4:	9b02      	ldr	r3, [sp, #8]
   120e6:	4659      	mov	r1, fp
   120e8:	2030      	movs	r0, #48	; 0x30
   120ea:	4798      	blx	r3
   120ec:	2800      	cmp	r0, #0
   120ee:	dbaf      	blt.n	12050 <cbvprintf+0x6d8>
   120f0:	3501      	adds	r5, #1
   120f2:	e7dd      	b.n	120b0 <cbvprintf+0x738>
   120f4:	0002ee40 	.word	0x0002ee40

000120f8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   120f8:	b508      	push	{r3, lr}
	__asm__ volatile(
   120fa:	f04f 0240 	mov.w	r2, #64	; 0x40
   120fe:	f3ef 8311 	mrs	r3, BASEPRI
   12102:	f382 8812 	msr	BASEPRI_MAX, r2
   12106:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1210a:	f002 ffdf 	bl	150cc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1210e:	4803      	ldr	r0, [pc, #12]	; (1211c <sys_reboot+0x24>)
   12110:	f016 fb2e 	bl	28770 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12114:	f002 f966 	bl	143e4 <arch_cpu_idle>
   12118:	e7fc      	b.n	12114 <sys_reboot+0x1c>
   1211a:	bf00      	nop
   1211c:	0002ee41 	.word	0x0002ee41

00012120 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12120:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12122:	4910      	ldr	r1, [pc, #64]	; (12164 <enable_logger+0x44>)
   12124:	4810      	ldr	r0, [pc, #64]	; (12168 <enable_logger+0x48>)
{
   12126:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12128:	2200      	movs	r2, #0
   1212a:	f01b f9b4 	bl	2d496 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1212e:	4d0f      	ldr	r5, [pc, #60]	; (1216c <enable_logger+0x4c>)
   12130:	490f      	ldr	r1, [pc, #60]	; (12170 <enable_logger+0x50>)
   12132:	2200      	movs	r2, #0
   12134:	2300      	movs	r3, #0
   12136:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1213a:	2400      	movs	r4, #0
   1213c:	230e      	movs	r3, #14
   1213e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12142:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12146:	4b0b      	ldr	r3, [pc, #44]	; (12174 <enable_logger+0x54>)
   12148:	9400      	str	r4, [sp, #0]
   1214a:	f44f 7240 	mov.w	r2, #768	; 0x300
   1214e:	4628      	mov	r0, r5
   12150:	f010 f826 	bl	221a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12154:	4908      	ldr	r1, [pc, #32]	; (12178 <enable_logger+0x58>)
   12156:	4628      	mov	r0, r5
   12158:	f01b f898 	bl	2d28c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   1215c:	4620      	mov	r0, r4
   1215e:	b009      	add	sp, #36	; 0x24
   12160:	bd30      	pop	{r4, r5, pc}
   12162:	bf00      	nop
   12164:	0001217d 	.word	0x0001217d
   12168:	200017a0 	.word	0x200017a0
   1216c:	200017d8 	.word	0x200017d8
   12170:	200048a0 	.word	0x200048a0
   12174:	00012635 	.word	0x00012635
   12178:	0002ee6a 	.word	0x0002ee6a

0001217c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   1217c:	4801      	ldr	r0, [pc, #4]	; (12184 <log_process_thread_timer_expiry_fn+0x8>)
   1217e:	f010 bc6b 	b.w	22a58 <z_impl_k_sem_give>
   12182:	bf00      	nop
   12184:	200008f4 	.word	0x200008f4

00012188 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12188:	2920      	cmp	r1, #32
{
   1218a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1218c:	4605      	mov	r5, r0
   1218e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12190:	d909      	bls.n	121a6 <z_log_get_s_mask+0x1e>
   12192:	4914      	ldr	r1, [pc, #80]	; (121e4 <z_log_get_s_mask+0x5c>)
   12194:	4814      	ldr	r0, [pc, #80]	; (121e8 <z_log_get_s_mask+0x60>)
   12196:	4a15      	ldr	r2, [pc, #84]	; (121ec <z_log_get_s_mask+0x64>)
   12198:	2387      	movs	r3, #135	; 0x87
   1219a:	f016 fae9 	bl	28770 <printk>
   1219e:	4813      	ldr	r0, [pc, #76]	; (121ec <z_log_get_s_mask+0x64>)
   121a0:	2187      	movs	r1, #135	; 0x87
   121a2:	f016 fcd6 	bl	28b52 <assert_post_action>
			arm = false;
   121a6:	2000      	movs	r0, #0
   121a8:	4603      	mov	r3, r0
   121aa:	4602      	mov	r2, r0
				mask |= BIT(arg);
   121ac:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   121ae:	f815 1b01 	ldrb.w	r1, [r5], #1
   121b2:	b109      	cbz	r1, 121b8 <z_log_get_s_mask+0x30>
   121b4:	42a3      	cmp	r3, r4
   121b6:	d300      	bcc.n	121ba <z_log_get_s_mask+0x32>
}
   121b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   121ba:	2925      	cmp	r1, #37	; 0x25
   121bc:	d102      	bne.n	121c4 <z_log_get_s_mask+0x3c>
			arm = !arm;
   121be:	f082 0201 	eor.w	r2, r2, #1
   121c2:	e7f4      	b.n	121ae <z_log_get_s_mask+0x26>
		} else if (arm && isalpha((int)curr)) {
   121c4:	2a00      	cmp	r2, #0
   121c6:	d0f2      	beq.n	121ae <z_log_get_s_mask+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   121c8:	f041 0620 	orr.w	r6, r1, #32
   121cc:	3e61      	subs	r6, #97	; 0x61
   121ce:	2e19      	cmp	r6, #25
   121d0:	d8ed      	bhi.n	121ae <z_log_get_s_mask+0x26>
			if (curr == 's') {
   121d2:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   121d4:	bf04      	itt	eq
   121d6:	fa07 f203 	lsleq.w	r2, r7, r3
   121da:	4310      	orreq	r0, r2
			arg++;
   121dc:	3301      	adds	r3, #1
			arm = false;
   121de:	2200      	movs	r2, #0
   121e0:	e7e5      	b.n	121ae <z_log_get_s_mask+0x26>
   121e2:	bf00      	nop
   121e4:	0002ee9f 	.word	0x0002ee9f
   121e8:	0002e915 	.word	0x0002e915
   121ec:	0002ee72 	.word	0x0002ee72

000121f0 <log_core_init>:
	panic_mode = false;
   121f0:	4a0c      	ldr	r2, [pc, #48]	; (12224 <log_core_init+0x34>)
   121f2:	2300      	movs	r3, #0
{
   121f4:	b510      	push	{r4, lr}
	panic_mode = false;
   121f6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   121f8:	4a0b      	ldr	r2, [pc, #44]	; (12228 <log_core_init+0x38>)
   121fa:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   121fc:	4b0b      	ldr	r3, [pc, #44]	; (1222c <log_core_init+0x3c>)
   121fe:	4a0c      	ldr	r2, [pc, #48]	; (12230 <log_core_init+0x40>)
   12200:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   12202:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12206:	f000 fdcf 	bl	12da8 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   1220a:	f000 fac3 	bl	12794 <log_msg_pool_init>
		log_list_init(&list);
   1220e:	4809      	ldr	r0, [pc, #36]	; (12234 <log_core_init+0x44>)
   12210:	f016 fca7 	bl	28b62 <log_list_init>
}
   12214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12218:	4907      	ldr	r1, [pc, #28]	; (12238 <log_core_init+0x48>)
   1221a:	4808      	ldr	r0, [pc, #32]	; (1223c <log_core_init+0x4c>)
   1221c:	2308      	movs	r3, #8
   1221e:	2248      	movs	r2, #72	; 0x48
   12220:	f01b b812 	b.w	2d248 <k_mem_slab_init>
   12224:	2000374e 	.word	0x2000374e
   12228:	2000239c 	.word	0x2000239c
   1222c:	2000047c 	.word	0x2000047c
   12230:	00028ba7 	.word	0x00028ba7
   12234:	200023a4 	.word	0x200023a4
   12238:	20008a98 	.word	0x20008a98
   1223c:	200023ac 	.word	0x200023ac

00012240 <log_init>:
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12240:	4b1a      	ldr	r3, [pc, #104]	; (122ac <log_init+0x6c>)
   12242:	4a1b      	ldr	r2, [pc, #108]	; (122b0 <log_init+0x70>)
   12244:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12246:	2b9f      	cmp	r3, #159	; 0x9f
{
   12248:	b570      	push	{r4, r5, r6, lr}
   1224a:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1224e:	d90b      	bls.n	12268 <log_init+0x28>
   12250:	4918      	ldr	r1, [pc, #96]	; (122b4 <log_init+0x74>)
   12252:	4819      	ldr	r0, [pc, #100]	; (122b8 <log_init+0x78>)
   12254:	4a19      	ldr	r2, [pc, #100]	; (122bc <log_init+0x7c>)
   12256:	f240 234a 	movw	r3, #586	; 0x24a
   1225a:	f016 fa89 	bl	28770 <printk>
   1225e:	4817      	ldr	r0, [pc, #92]	; (122bc <log_init+0x7c>)
   12260:	f240 214a 	movw	r1, #586	; 0x24a
   12264:	f016 fc75 	bl	28b52 <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12268:	f3bf 8f5b 	dmb	ish
   1226c:	4b14      	ldr	r3, [pc, #80]	; (122c0 <log_init+0x80>)
   1226e:	e853 5f00 	ldrex	r5, [r3]
   12272:	1c6a      	adds	r2, r5, #1
   12274:	e843 2100 	strex	r1, r2, [r3]
   12278:	2900      	cmp	r1, #0
   1227a:	d1f8      	bne.n	1226e <log_init+0x2e>
   1227c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   12280:	b915      	cbnz	r5, 12288 <log_init+0x48>
   12282:	4c0b      	ldr	r4, [pc, #44]	; (122b0 <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
   12284:	42b5      	cmp	r5, r6
   12286:	db00      	blt.n	1228a <log_init+0x4a>
}
   12288:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1228a:	7b23      	ldrb	r3, [r4, #12]
   1228c:	b153      	cbz	r3, 122a4 <log_init+0x64>
			if (backend->api->init != NULL) {
   1228e:	6823      	ldr	r3, [r4, #0]
   12290:	699b      	ldr	r3, [r3, #24]
   12292:	b10b      	cbz	r3, 12298 <log_init+0x58>
				backend->api->init(backend);
   12294:	4620      	mov	r0, r4
   12296:	4798      	blx	r3
			log_backend_enable(backend,
   12298:	6863      	ldr	r3, [r4, #4]
   1229a:	2204      	movs	r2, #4
   1229c:	6819      	ldr	r1, [r3, #0]
   1229e:	4620      	mov	r0, r4
   122a0:	f000 fa54 	bl	1274c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   122a4:	3501      	adds	r5, #1
   122a6:	3410      	adds	r4, #16
   122a8:	e7ec      	b.n	12284 <log_init+0x44>
   122aa:	bf00      	nop
   122ac:	0002da68 	.word	0x0002da68
   122b0:	0002da58 	.word	0x0002da58
   122b4:	0002eeb7 	.word	0x0002eeb7
   122b8:	0002e915 	.word	0x0002e915
   122bc:	0002ee72 	.word	0x0002ee72
   122c0:	200023a0 	.word	0x200023a0

000122c4 <get_msg>:
{
   122c4:	b510      	push	{r4, lr}
   122c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   122ca:	f3ef 8411 	mrs	r4, BASEPRI
   122ce:	f383 8812 	msr	BASEPRI_MAX, r3
   122d2:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   122d6:	4804      	ldr	r0, [pc, #16]	; (122e8 <get_msg+0x24>)
   122d8:	f016 fc53 	bl	28b82 <log_list_head_get>
	__asm__ volatile(
   122dc:	f384 8811 	msr	BASEPRI, r4
   122e0:	f3bf 8f6f 	isb	sy
}
   122e4:	bd10      	pop	{r4, pc}
   122e6:	bf00      	nop
   122e8:	200023a4 	.word	0x200023a4

000122ec <z_log_notify_backend_enabled>:
{
   122ec:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   122ee:	4c04      	ldr	r4, [pc, #16]	; (12300 <z_log_notify_backend_enabled+0x14>)
   122f0:	7822      	ldrb	r2, [r4, #0]
   122f2:	b912      	cbnz	r2, 122fa <z_log_notify_backend_enabled+0xe>
   122f4:	4803      	ldr	r0, [pc, #12]	; (12304 <z_log_notify_backend_enabled+0x18>)
   122f6:	f010 fbaf 	bl	22a58 <z_impl_k_sem_give>
	backend_attached = true;
   122fa:	2301      	movs	r3, #1
   122fc:	7023      	strb	r3, [r4, #0]
}
   122fe:	bd10      	pop	{r4, pc}
   12300:	2000374d 	.word	0x2000374d
   12304:	200008f4 	.word	0x200008f4

00012308 <z_log_dropped>:
   12308:	4b0c      	ldr	r3, [pc, #48]	; (1233c <z_log_dropped+0x34>)
   1230a:	f3bf 8f5b 	dmb	ish
   1230e:	e853 2f00 	ldrex	r2, [r3]
   12312:	3201      	adds	r2, #1
   12314:	e843 2100 	strex	r1, r2, [r3]
   12318:	2900      	cmp	r1, #0
   1231a:	d1f8      	bne.n	1230e <z_log_dropped+0x6>
   1231c:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12320:	f3bf 8f5b 	dmb	ish
   12324:	4b06      	ldr	r3, [pc, #24]	; (12340 <z_log_dropped+0x38>)
   12326:	e853 2f00 	ldrex	r2, [r3]
   1232a:	3a01      	subs	r2, #1
   1232c:	e843 2100 	strex	r1, r2, [r3]
   12330:	2900      	cmp	r1, #0
   12332:	d1f8      	bne.n	12326 <z_log_dropped+0x1e>
   12334:	f3bf 8f5b 	dmb	ish
}
   12338:	4770      	bx	lr
   1233a:	bf00      	nop
   1233c:	2000239c 	.word	0x2000239c
   12340:	20002398 	.word	0x20002398

00012344 <z_log_dropped_read_and_clear>:
}
   12344:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12346:	4b06      	ldr	r3, [pc, #24]	; (12360 <z_log_dropped_read_and_clear+0x1c>)
   12348:	f3bf 8f5b 	dmb	ish
   1234c:	4602      	mov	r2, r0
   1234e:	e853 0f00 	ldrex	r0, [r3]
   12352:	e843 2100 	strex	r1, r2, [r3]
   12356:	2900      	cmp	r1, #0
   12358:	d1f9      	bne.n	1234e <z_log_dropped_read_and_clear+0xa>
   1235a:	f3bf 8f5b 	dmb	ish
   1235e:	4770      	bx	lr
   12360:	2000239c 	.word	0x2000239c

00012364 <dropped_notify>:
{
   12364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12366:	f7ff ffed 	bl	12344 <z_log_dropped_read_and_clear>
   1236a:	4c0b      	ldr	r4, [pc, #44]	; (12398 <dropped_notify+0x34>)
   1236c:	4d0b      	ldr	r5, [pc, #44]	; (1239c <dropped_notify+0x38>)
   1236e:	1b2d      	subs	r5, r5, r4
   12370:	4607      	mov	r7, r0
   12372:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12374:	2600      	movs	r6, #0
   12376:	42ae      	cmp	r6, r5
   12378:	db00      	blt.n	1237c <dropped_notify+0x18>
}
   1237a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   1237c:	4620      	mov	r0, r4
   1237e:	f016 fc06 	bl	28b8e <log_backend_is_active>
   12382:	b128      	cbz	r0, 12390 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   12384:	6823      	ldr	r3, [r4, #0]
   12386:	691b      	ldr	r3, [r3, #16]
   12388:	b113      	cbz	r3, 12390 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   1238a:	4639      	mov	r1, r7
   1238c:	4620      	mov	r0, r4
   1238e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12390:	3601      	adds	r6, #1
   12392:	3410      	adds	r4, #16
   12394:	e7ef      	b.n	12376 <dropped_notify+0x12>
   12396:	bf00      	nop
   12398:	0002da58 	.word	0x0002da58
   1239c:	0002da68 	.word	0x0002da68

000123a0 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   123a0:	4b16      	ldr	r3, [pc, #88]	; (123fc <z_log_strdup+0x5c>)
   123a2:	4298      	cmp	r0, r3
{
   123a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   123a6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   123a8:	d302      	bcc.n	123b0 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   123aa:	4b15      	ldr	r3, [pc, #84]	; (12400 <z_log_strdup+0x60>)
   123ac:	4298      	cmp	r0, r3
   123ae:	d320      	bcc.n	123f2 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   123b0:	4814      	ldr	r0, [pc, #80]	; (12404 <z_log_strdup+0x64>)
   123b2:	2200      	movs	r2, #0
   123b4:	2300      	movs	r3, #0
   123b6:	a901      	add	r1, sp, #4
   123b8:	f00f fdbe 	bl	21f38 <k_mem_slab_alloc>
	if (err != 0) {
   123bc:	4605      	mov	r5, r0
   123be:	b9d8      	cbnz	r0, 123f8 <z_log_strdup+0x58>
   123c0:	2201      	movs	r2, #1
   123c2:	9b01      	ldr	r3, [sp, #4]
   123c4:	f3bf 8f5b 	dmb	ish
   123c8:	e853 1f00 	ldrex	r1, [r3]
   123cc:	e843 2000 	strex	r0, r2, [r3]
   123d0:	2800      	cmp	r0, #0
   123d2:	d1f9      	bne.n	123c8 <z_log_strdup+0x28>
   123d4:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   123d8:	9801      	ldr	r0, [sp, #4]
   123da:	4621      	mov	r1, r4
   123dc:	2241      	movs	r2, #65	; 0x41
   123de:	3004      	adds	r0, #4
   123e0:	f018 faed 	bl	2a9be <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   123e4:	9c01      	ldr	r4, [sp, #4]
   123e6:	237e      	movs	r3, #126	; 0x7e
   123e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   123ec:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   123f0:	3404      	adds	r4, #4
}
   123f2:	4620      	mov	r0, r4
   123f4:	b003      	add	sp, #12
   123f6:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   123f8:	4c03      	ldr	r4, [pc, #12]	; (12408 <z_log_strdup+0x68>)
   123fa:	e7fa      	b.n	123f2 <z_log_strdup+0x52>
   123fc:	0002d590 	.word	0x0002d590
   12400:	00032c18 	.word	0x00032c18
   12404:	200023ac 	.word	0x200023ac
   12408:	0002eedb 	.word	0x0002eedb

0001240c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1240c:	b150      	cbz	r0, 12424 <log_is_strdup+0x18>
   1240e:	4b06      	ldr	r3, [pc, #24]	; (12428 <log_is_strdup+0x1c>)
   12410:	4298      	cmp	r0, r3
   12412:	d306      	bcc.n	12422 <log_is_strdup+0x16>
   12414:	f503 7310 	add.w	r3, r3, #576	; 0x240
   12418:	4298      	cmp	r0, r3
   1241a:	bf2c      	ite	cs
   1241c:	2000      	movcs	r0, #0
   1241e:	2001      	movcc	r0, #1
   12420:	4770      	bx	lr
   12422:	2000      	movs	r0, #0
}
   12424:	4770      	bx	lr
   12426:	bf00      	nop
   12428:	20008a98 	.word	0x20008a98

0001242c <z_impl_log_process>:
{
   1242c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   12430:	4b42      	ldr	r3, [pc, #264]	; (1253c <z_impl_log_process+0x110>)
   12432:	781b      	ldrb	r3, [r3, #0]
{
   12434:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   12436:	b903      	cbnz	r3, 1243a <z_impl_log_process+0xe>
   12438:	b1a0      	cbz	r0, 12464 <z_impl_log_process+0x38>
	msg = get_msg();
   1243a:	f7ff ff43 	bl	122c4 <get_msg>
	if (msg.msg) {
   1243e:	4605      	mov	r5, r0
   12440:	b118      	cbz	r0, 1244a <z_impl_log_process+0x1e>
		if (!bypass) {
   12442:	b194      	cbz	r4, 1246a <z_impl_log_process+0x3e>
			log_msg_put(msg.msg);
   12444:	4628      	mov	r0, r5
   12446:	f016 fca5 	bl	28d94 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   1244a:	b92c      	cbnz	r4, 12458 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   1244c:	4b3c      	ldr	r3, [pc, #240]	; (12540 <z_impl_log_process+0x114>)
	if (!bypass && z_log_dropped_pending()) {
   1244e:	681b      	ldr	r3, [r3, #0]
   12450:	2b00      	cmp	r3, #0
   12452:	dd01      	ble.n	12458 <z_impl_log_process+0x2c>
		dropped_notify();
   12454:	f7ff ff86 	bl	12364 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   12458:	483a      	ldr	r0, [pc, #232]	; (12544 <z_impl_log_process+0x118>)
   1245a:	f016 fb90 	bl	28b7e <log_list_head_peek>
   1245e:	1e04      	subs	r4, r0, #0
   12460:	bf18      	it	ne
   12462:	2401      	movne	r4, #1
}
   12464:	4620      	mov	r0, r4
   12466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1246a:	4b37      	ldr	r3, [pc, #220]	; (12548 <z_impl_log_process+0x11c>)
   1246c:	f3bf 8f5b 	dmb	ish
   12470:	e853 2f00 	ldrex	r2, [r3]
   12474:	3a01      	subs	r2, #1
   12476:	e843 2100 	strex	r1, r2, [r3]
   1247a:	2900      	cmp	r1, #0
   1247c:	d1f8      	bne.n	12470 <z_impl_log_process+0x44>
   1247e:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
   12482:	4b32      	ldr	r3, [pc, #200]	; (1254c <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   12484:	781b      	ldrb	r3, [r3, #0]
   12486:	b993      	cbnz	r3, 124ae <z_impl_log_process+0x82>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12488:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   1248a:	07db      	lsls	r3, r3, #31
   1248c:	d40f      	bmi.n	124ae <z_impl_log_process+0x82>
	msg_str = log_msg_str_get(msg);
   1248e:	f016 fc94 	bl	28dba <log_msg_str_get>
   12492:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12494:	4628      	mov	r0, r5
   12496:	f016 fc5b 	bl	28d50 <log_msg_nargs_get>
   1249a:	4601      	mov	r1, r0
   1249c:	4640      	mov	r0, r8
   1249e:	f7ff fe73 	bl	12188 <z_log_get_s_mask>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   124a2:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 1256c <z_impl_log_process+0x140>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   124a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 12570 <z_impl_log_process+0x144>
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   124aa:	4606      	mov	r6, r0
	while (mask) {
   124ac:	b936      	cbnz	r6, 124bc <z_impl_log_process+0x90>
	return __log_backends_end - __log_backends_start;
   124ae:	4e28      	ldr	r6, [pc, #160]	; (12550 <z_impl_log_process+0x124>)
   124b0:	4f28      	ldr	r7, [pc, #160]	; (12554 <z_impl_log_process+0x128>)
   124b2:	1bbf      	subs	r7, r7, r6
   124b4:	113f      	asrs	r7, r7, #4
   124b6:	f04f 0800 	mov.w	r8, #0
   124ba:	e03c      	b.n	12536 <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
   124bc:	fab6 f786 	clz	r7, r6
   124c0:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   124c4:	4639      	mov	r1, r7
   124c6:	4628      	mov	r0, r5
   124c8:	f016 fc45 	bl	28d56 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   124cc:	4b22      	ldr	r3, [pc, #136]	; (12558 <z_impl_log_process+0x12c>)
   124ce:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   124d0:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   124d2:	d302      	bcc.n	124da <z_impl_log_process+0xae>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   124d4:	4b21      	ldr	r3, [pc, #132]	; (1255c <z_impl_log_process+0x130>)
   124d6:	4298      	cmp	r0, r3
   124d8:	d31b      	bcc.n	12512 <z_impl_log_process+0xe6>
   124da:	4610      	mov	r0, r2
   124dc:	f7ff ff96 	bl	1240c <log_is_strdup>
   124e0:	b9b8      	cbnz	r0, 12512 <z_impl_log_process+0xe6>
   124e2:	455a      	cmp	r2, fp
   124e4:	d015      	beq.n	12512 <z_impl_log_process+0xe6>
	return msg->hdr.ids.source_id;
   124e6:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   124e8:	f3c1 1189 	ubfx	r1, r1, #6, #10
   124ec:	f000 f920 	bl	12730 <log_source_name_get>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   124f0:	491b      	ldr	r1, [pc, #108]	; (12560 <z_impl_log_process+0x134>)
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   124f2:	4681      	mov	r9, r0
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   124f4:	23d8      	movs	r3, #216	; 0xd8
   124f6:	481b      	ldr	r0, [pc, #108]	; (12564 <z_impl_log_process+0x138>)
   124f8:	4652      	mov	r2, sl
   124fa:	f016 f939 	bl	28770 <printk>
   124fe:	481a      	ldr	r0, [pc, #104]	; (12568 <z_impl_log_process+0x13c>)
   12500:	4639      	mov	r1, r7
   12502:	4643      	mov	r3, r8
   12504:	464a      	mov	r2, r9
   12506:	f016 f933 	bl	28770 <printk>
   1250a:	21d8      	movs	r1, #216	; 0xd8
   1250c:	4650      	mov	r0, sl
   1250e:	f016 fb20 	bl	28b52 <assert_post_action>
		mask &= ~BIT(idx);
   12512:	2301      	movs	r3, #1
   12514:	fa03 f707 	lsl.w	r7, r3, r7
   12518:	ea26 0607 	bic.w	r6, r6, r7
   1251c:	e7c6      	b.n	124ac <z_impl_log_process+0x80>
			if (log_backend_is_active(backend) &&
   1251e:	4630      	mov	r0, r6
   12520:	f016 fb35 	bl	28b8e <log_backend_is_active>
   12524:	b120      	cbz	r0, 12530 <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
   12526:	6833      	ldr	r3, [r6, #0]
   12528:	4629      	mov	r1, r5
   1252a:	685b      	ldr	r3, [r3, #4]
   1252c:	4630      	mov	r0, r6
   1252e:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   12530:	f108 0801 	add.w	r8, r8, #1
   12534:	3610      	adds	r6, #16
   12536:	45b8      	cmp	r8, r7
   12538:	dbf1      	blt.n	1251e <z_impl_log_process+0xf2>
   1253a:	e783      	b.n	12444 <z_impl_log_process+0x18>
   1253c:	2000374d 	.word	0x2000374d
   12540:	2000239c 	.word	0x2000239c
   12544:	200023a4 	.word	0x200023a4
   12548:	20002398 	.word	0x20002398
   1254c:	2000374e 	.word	0x2000374e
   12550:	0002da58 	.word	0x0002da58
   12554:	0002da68 	.word	0x0002da68
   12558:	0002d590 	.word	0x0002d590
   1255c:	00032c18 	.word	0x00032c18
   12560:	00032bb3 	.word	0x00032bb3
   12564:	0002e915 	.word	0x0002e915
   12568:	0002eef5 	.word	0x0002eef5
   1256c:	0002eedb 	.word	0x0002eedb
   12570:	0002ee72 	.word	0x0002ee72

00012574 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12574:	4b28      	ldr	r3, [pc, #160]	; (12618 <msg_finalize+0xa4>)
{
   12576:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   12578:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1257a:	8141      	strh	r1, [r0, #10]
{
   1257c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1257e:	4798      	blx	r3
   12580:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12582:	f04f 0340 	mov.w	r3, #64	; 0x40
   12586:	f3ef 8511 	mrs	r5, BASEPRI
   1258a:	f383 8812 	msr	BASEPRI_MAX, r3
   1258e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12592:	4822      	ldr	r0, [pc, #136]	; (1261c <msg_finalize+0xa8>)
   12594:	4621      	mov	r1, r4
   12596:	f016 fae8 	bl	28b6a <log_list_add_tail>
	__asm__ volatile(
   1259a:	f385 8811 	msr	BASEPRI, r5
   1259e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   125a2:	f3bf 8f5b 	dmb	ish
   125a6:	4b1e      	ldr	r3, [pc, #120]	; (12620 <msg_finalize+0xac>)
   125a8:	e853 2f00 	ldrex	r2, [r3]
   125ac:	1c51      	adds	r1, r2, #1
   125ae:	e843 1000 	strex	r0, r1, [r3]
   125b2:	2800      	cmp	r0, #0
   125b4:	d1f8      	bne.n	125a8 <msg_finalize+0x34>
   125b6:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   125ba:	4b1a      	ldr	r3, [pc, #104]	; (12624 <msg_finalize+0xb0>)
   125bc:	781b      	ldrb	r3, [r3, #0]
   125be:	b183      	cbz	r3, 125e2 <msg_finalize+0x6e>
	__asm__ volatile(
   125c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   125c4:	f3ef 8411 	mrs	r4, BASEPRI
   125c8:	f383 8812 	msr	BASEPRI_MAX, r3
   125cc:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   125d0:	2000      	movs	r0, #0
   125d2:	f7ff ff2b 	bl	1242c <z_impl_log_process>
	__asm__ volatile(
   125d6:	f384 8811 	msr	BASEPRI, r4
   125da:	f3bf 8f6f 	isb	sy
}
   125de:	b003      	add	sp, #12
   125e0:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   125e2:	4b11      	ldr	r3, [pc, #68]	; (12628 <msg_finalize+0xb4>)
   125e4:	681b      	ldr	r3, [r3, #0]
   125e6:	2b00      	cmp	r3, #0
   125e8:	d0f9      	beq.n	125de <msg_finalize+0x6a>
   125ea:	b952      	cbnz	r2, 12602 <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
   125ec:	2200      	movs	r2, #0
   125ee:	2300      	movs	r3, #0
   125f0:	e9cd 2300 	strd	r2, r3, [sp]
   125f4:	480d      	ldr	r0, [pc, #52]	; (1262c <msg_finalize+0xb8>)
   125f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   125fa:	2300      	movs	r3, #0
   125fc:	f012 fe84 	bl	25308 <z_impl_k_timer_start>
   12600:	e7ed      	b.n	125de <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12602:	2a0a      	cmp	r2, #10
   12604:	d1eb      	bne.n	125de <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   12606:	4809      	ldr	r0, [pc, #36]	; (1262c <msg_finalize+0xb8>)
   12608:	f01a ff51 	bl	2d4ae <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1260c:	4808      	ldr	r0, [pc, #32]	; (12630 <msg_finalize+0xbc>)
}
   1260e:	b003      	add	sp, #12
   12610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12614:	f010 ba20 	b.w	22a58 <z_impl_k_sem_give>
   12618:	2000047c 	.word	0x2000047c
   1261c:	200023a4 	.word	0x200023a4
   12620:	20002398 	.word	0x20002398
   12624:	2000374e 	.word	0x2000374e
   12628:	200023cc 	.word	0x200023cc
   1262c:	200017a0 	.word	0x200017a0
   12630:	200008f4 	.word	0x200008f4

00012634 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   12634:	4b16      	ldr	r3, [pc, #88]	; (12690 <log_process_thread_func+0x5c>)
   12636:	4a17      	ldr	r2, [pc, #92]	; (12694 <log_process_thread_func+0x60>)
   12638:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   1263a:	2b00      	cmp	r3, #0
{
   1263c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   1263e:	dc0b      	bgt.n	12658 <log_process_thread_func+0x24>
   12640:	4915      	ldr	r1, [pc, #84]	; (12698 <log_process_thread_func+0x64>)
   12642:	4816      	ldr	r0, [pc, #88]	; (1269c <log_process_thread_func+0x68>)
   12644:	4a16      	ldr	r2, [pc, #88]	; (126a0 <log_process_thread_func+0x6c>)
   12646:	f240 43f1 	movw	r3, #1265	; 0x4f1
   1264a:	f016 f891 	bl	28770 <printk>
   1264e:	4814      	ldr	r0, [pc, #80]	; (126a0 <log_process_thread_func+0x6c>)
   12650:	f240 41f1 	movw	r1, #1265	; 0x4f1
   12654:	f016 fa7d 	bl	28b52 <assert_post_action>
	log_init();
   12658:	f7ff fdf2 	bl	12240 <log_init>
	return z_impl_z_current_get();
   1265c:	f012 f92c 	bl	248b8 <z_impl_z_current_get>
	proc_tid = process_tid;
   12660:	4b10      	ldr	r3, [pc, #64]	; (126a4 <log_process_thread_func+0x70>)
   12662:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12664:	b130      	cbz	r0, 12674 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12666:	4b10      	ldr	r3, [pc, #64]	; (126a8 <log_process_thread_func+0x74>)
	    process_tid &&
   12668:	681b      	ldr	r3, [r3, #0]
   1266a:	2b09      	cmp	r3, #9
   1266c:	dd02      	ble.n	12674 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   1266e:	480f      	ldr	r0, [pc, #60]	; (126ac <log_process_thread_func+0x78>)
   12670:	f010 f9f2 	bl	22a58 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12674:	4c0d      	ldr	r4, [pc, #52]	; (126ac <log_process_thread_func+0x78>)
   12676:	2000      	movs	r0, #0
   12678:	f7ff fed8 	bl	1242c <z_impl_log_process>
		if (log_process(false) == false) {
   1267c:	2800      	cmp	r0, #0
   1267e:	d1fa      	bne.n	12676 <log_process_thread_func+0x42>
   12680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12688:	4620      	mov	r0, r4
   1268a:	f010 fa29 	bl	22ae0 <z_impl_k_sem_take>
   1268e:	e7f2      	b.n	12676 <log_process_thread_func+0x42>
   12690:	0002da68 	.word	0x0002da68
   12694:	0002da58 	.word	0x0002da58
   12698:	0002ef37 	.word	0x0002ef37
   1269c:	0002e915 	.word	0x0002e915
   126a0:	0002ee72 	.word	0x0002ee72
   126a4:	200023cc 	.word	0x200023cc
   126a8:	20002398 	.word	0x20002398
   126ac:	200008f4 	.word	0x200008f4

000126b0 <z_impl_log_panic>:
{
   126b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   126b2:	4f0f      	ldr	r7, [pc, #60]	; (126f0 <z_impl_log_panic+0x40>)
   126b4:	783d      	ldrb	r5, [r7, #0]
   126b6:	b975      	cbnz	r5, 126d6 <z_impl_log_panic+0x26>
   126b8:	4c0e      	ldr	r4, [pc, #56]	; (126f4 <z_impl_log_panic+0x44>)
   126ba:	4e0f      	ldr	r6, [pc, #60]	; (126f8 <z_impl_log_panic+0x48>)
	log_init();
   126bc:	f7ff fdc0 	bl	12240 <log_init>
   126c0:	1b36      	subs	r6, r6, r4
   126c2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   126c4:	42b5      	cmp	r5, r6
   126c6:	db07      	blt.n	126d8 <z_impl_log_panic+0x28>
   126c8:	2000      	movs	r0, #0
   126ca:	f7ff feaf 	bl	1242c <z_impl_log_process>
		while (log_process(false) == true) {
   126ce:	2800      	cmp	r0, #0
   126d0:	d1fa      	bne.n	126c8 <z_impl_log_panic+0x18>
	panic_mode = true;
   126d2:	2301      	movs	r3, #1
   126d4:	703b      	strb	r3, [r7, #0]
}
   126d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   126d8:	4620      	mov	r0, r4
   126da:	f016 fa58 	bl	28b8e <log_backend_is_active>
   126de:	b118      	cbz	r0, 126e8 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   126e0:	6823      	ldr	r3, [r4, #0]
   126e2:	4620      	mov	r0, r4
   126e4:	695b      	ldr	r3, [r3, #20]
   126e6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   126e8:	3501      	adds	r5, #1
   126ea:	3410      	adds	r4, #16
   126ec:	e7ea      	b.n	126c4 <z_impl_log_panic+0x14>
   126ee:	bf00      	nop
   126f0:	2000374e 	.word	0x2000374e
   126f4:	0002da58 	.word	0x0002da58
   126f8:	0002da68 	.word	0x0002da68

000126fc <z_log_free>:
{
   126fc:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   126fe:	3804      	subs	r0, #4
   12700:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12702:	f3bf 8f5b 	dmb	ish
   12706:	e850 3f00 	ldrex	r3, [r0]
   1270a:	1e5a      	subs	r2, r3, #1
   1270c:	e840 2100 	strex	r1, r2, [r0]
   12710:	2900      	cmp	r1, #0
   12712:	d1f8      	bne.n	12706 <z_log_free+0xa>
   12714:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   12718:	2b01      	cmp	r3, #1
   1271a:	d103      	bne.n	12724 <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1271c:	4803      	ldr	r0, [pc, #12]	; (1272c <z_log_free+0x30>)
   1271e:	a901      	add	r1, sp, #4
   12720:	f00f fc76 	bl	22010 <k_mem_slab_free>
}
   12724:	b003      	add	sp, #12
   12726:	f85d fb04 	ldr.w	pc, [sp], #4
   1272a:	bf00      	nop
   1272c:	200023ac 	.word	0x200023ac

00012730 <log_source_name_get>:
   12730:	4a04      	ldr	r2, [pc, #16]	; (12744 <log_source_name_get+0x14>)
   12732:	4b05      	ldr	r3, [pc, #20]	; (12748 <log_source_name_get+0x18>)
   12734:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   12736:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1273a:	bf34      	ite	cc
   1273c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   12740:	2000      	movcs	r0, #0
}
   12742:	4770      	bx	lr
   12744:	0002d948 	.word	0x0002d948
   12748:	0002da58 	.word	0x0002da58

0001274c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   1274c:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1274e:	4c0d      	ldr	r4, [pc, #52]	; (12784 <log_backend_enable+0x38>)
   12750:	1b04      	subs	r4, r0, r4
   12752:	1124      	asrs	r4, r4, #4
   12754:	3401      	adds	r4, #1
{
   12756:	4605      	mov	r5, r0
   12758:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   1275a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   1275c:	b948      	cbnz	r0, 12772 <log_backend_enable+0x26>
   1275e:	490a      	ldr	r1, [pc, #40]	; (12788 <log_backend_enable+0x3c>)
   12760:	480a      	ldr	r0, [pc, #40]	; (1278c <log_backend_enable+0x40>)
   12762:	4a0b      	ldr	r2, [pc, #44]	; (12790 <log_backend_enable+0x44>)
   12764:	23d1      	movs	r3, #209	; 0xd1
   12766:	f016 f803 	bl	28770 <printk>
   1276a:	4809      	ldr	r0, [pc, #36]	; (12790 <log_backend_enable+0x44>)
   1276c:	21d1      	movs	r1, #209	; 0xd1
   1276e:	f016 f9f0 	bl	28b52 <assert_post_action>
	backend->cb->id = id;
   12772:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   12774:	2201      	movs	r2, #1
	backend->cb->id = id;
   12776:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
   12778:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   1277a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1277c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
   12780:	f7ff bdb4 	b.w	122ec <z_log_notify_backend_enabled>
   12784:	0002da58 	.word	0x0002da58
   12788:	0002efe0 	.word	0x0002efe0
   1278c:	0002e915 	.word	0x0002e915
   12790:	0002efaf 	.word	0x0002efaf

00012794 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12794:	2320      	movs	r3, #32
   12796:	4902      	ldr	r1, [pc, #8]	; (127a0 <log_msg_pool_init+0xc>)
   12798:	4802      	ldr	r0, [pc, #8]	; (127a4 <log_msg_pool_init+0x10>)
   1279a:	461a      	mov	r2, r3
   1279c:	f01a bd54 	b.w	2d248 <k_mem_slab_init>
   127a0:	20008cd8 	.word	0x20008cd8
   127a4:	200023d0 	.word	0x200023d0

000127a8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   127a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   127aa:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   127ac:	4d09      	ldr	r5, [pc, #36]	; (127d4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   127ae:	9301      	str	r3, [sp, #4]
   127b0:	2001      	movs	r0, #1
   127b2:	f7ff fe3b 	bl	1242c <z_impl_log_process>
   127b6:	4604      	mov	r4, r0
			z_log_dropped();
   127b8:	f7ff fda6 	bl	12308 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   127bc:	2200      	movs	r2, #0
   127be:	2300      	movs	r3, #0
   127c0:	a901      	add	r1, sp, #4
   127c2:	4628      	mov	r0, r5
   127c4:	f00f fbb8 	bl	21f38 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   127c8:	b108      	cbz	r0, 127ce <log_msg_no_space_handle+0x26>
   127ca:	2c00      	cmp	r4, #0
   127cc:	d1f0      	bne.n	127b0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   127ce:	9801      	ldr	r0, [sp, #4]
   127d0:	b003      	add	sp, #12
   127d2:	bd30      	pop	{r4, r5, pc}
   127d4:	200023d0 	.word	0x200023d0

000127d8 <log_msg_chunk_alloc>:
{
   127d8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   127da:	2300      	movs	r3, #0
   127dc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   127de:	4807      	ldr	r0, [pc, #28]	; (127fc <log_msg_chunk_alloc+0x24>)
   127e0:	2200      	movs	r2, #0
   127e2:	2300      	movs	r3, #0
   127e4:	a901      	add	r1, sp, #4
   127e6:	f00f fba7 	bl	21f38 <k_mem_slab_alloc>
	if (err != 0) {
   127ea:	b110      	cbz	r0, 127f2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   127ec:	f7ff ffdc 	bl	127a8 <log_msg_no_space_handle>
   127f0:	9001      	str	r0, [sp, #4]
}
   127f2:	9801      	ldr	r0, [sp, #4]
   127f4:	b003      	add	sp, #12
   127f6:	f85d fb04 	ldr.w	pc, [sp], #4
   127fa:	bf00      	nop
   127fc:	200023d0 	.word	0x200023d0

00012800 <msg_free>:
{
   12800:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12802:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12804:	7a45      	ldrb	r5, [r0, #9]
{
   12806:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   12808:	092d      	lsrs	r5, r5, #4
{
   1280a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1280c:	07d8      	lsls	r0, r3, #31
   1280e:	d41c      	bmi.n	1284a <msg_free+0x4a>
   12810:	b1dd      	cbz	r5, 1284a <msg_free+0x4a>
		uint32_t smask = 0U;
   12812:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   12814:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12816:	9801      	ldr	r0, [sp, #4]
   12818:	4631      	mov	r1, r6
   1281a:	f016 fa9c 	bl	28d56 <log_msg_arg_get>
   1281e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12820:	f7ff fdf4 	bl	1240c <log_is_strdup>
   12824:	b170      	cbz	r0, 12844 <msg_free+0x44>
				if (smask == 0U) {
   12826:	b934      	cbnz	r4, 12836 <msg_free+0x36>
					smask = z_log_get_s_mask(
   12828:	9b01      	ldr	r3, [sp, #4]
   1282a:	4629      	mov	r1, r5
   1282c:	6918      	ldr	r0, [r3, #16]
   1282e:	f7ff fcab 	bl	12188 <z_log_get_s_mask>
					if (smask == 0U) {
   12832:	4604      	mov	r4, r0
   12834:	b148      	cbz	r0, 1284a <msg_free+0x4a>
				if (smask & BIT(i)) {
   12836:	fa24 f306 	lsr.w	r3, r4, r6
   1283a:	07d9      	lsls	r1, r3, #31
   1283c:	d502      	bpl.n	12844 <msg_free+0x44>
					z_log_free(buf);
   1283e:	4638      	mov	r0, r7
   12840:	f7ff ff5c 	bl	126fc <z_log_free>
		for (i = 0U; i < nargs; i++) {
   12844:	3601      	adds	r6, #1
   12846:	42ae      	cmp	r6, r5
   12848:	d3e5      	bcc.n	12816 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   1284a:	9b01      	ldr	r3, [sp, #4]
   1284c:	7a1a      	ldrb	r2, [r3, #8]
   1284e:	0792      	lsls	r2, r2, #30
   12850:	d504      	bpl.n	1285c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   12852:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12854:	4c08      	ldr	r4, [pc, #32]	; (12878 <msg_free+0x78>)
   12856:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12858:	9b03      	ldr	r3, [sp, #12]
   1285a:	b92b      	cbnz	r3, 12868 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1285c:	4806      	ldr	r0, [pc, #24]	; (12878 <msg_free+0x78>)
   1285e:	a901      	add	r1, sp, #4
   12860:	f00f fbd6 	bl	22010 <k_mem_slab_free>
}
   12864:	b005      	add	sp, #20
   12866:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   12868:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1286a:	a903      	add	r1, sp, #12
   1286c:	4620      	mov	r0, r4
   1286e:	f00f fbcf 	bl	22010 <k_mem_slab_free>
		cont = next;
   12872:	9503      	str	r5, [sp, #12]
   12874:	e7f0      	b.n	12858 <msg_free+0x58>
   12876:	bf00      	nop
   12878:	200023d0 	.word	0x200023d0

0001287c <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   1287c:	2a0e      	cmp	r2, #14
{
   1287e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12882:	4681      	mov	r9, r0
   12884:	4688      	mov	r8, r1
   12886:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   12888:	d90b      	bls.n	128a2 <log_msg_create_n+0x26>
   1288a:	492d      	ldr	r1, [pc, #180]	; (12940 <log_msg_create_n+0xc4>)
   1288c:	482d      	ldr	r0, [pc, #180]	; (12944 <log_msg_create_n+0xc8>)
   1288e:	4a2e      	ldr	r2, [pc, #184]	; (12948 <log_msg_create_n+0xcc>)
   12890:	f240 133b 	movw	r3, #315	; 0x13b
   12894:	f015 ff6c 	bl	28770 <printk>
   12898:	482b      	ldr	r0, [pc, #172]	; (12948 <log_msg_create_n+0xcc>)
   1289a:	f240 113b 	movw	r1, #315	; 0x13b
   1289e:	f016 f958 	bl	28b52 <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   128a2:	f7ff ff99 	bl	127d8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   128a6:	4604      	mov	r4, r0
   128a8:	b330      	cbz	r0, 128f8 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   128aa:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   128ac:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   128ae:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   128b0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   128b2:	8107      	strh	r7, [r0, #8]
   128b4:	d909      	bls.n	128ca <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   128b6:	2202      	movs	r2, #2
   128b8:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   128ba:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   128be:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   128c2:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   128c4:	f1ba 0f00 	cmp.w	sl, #0
   128c8:	dc0e      	bgt.n	128e8 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   128ca:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   128cc:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   128d0:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   128d4:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   128d6:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   128d8:	d818      	bhi.n	1290c <log_msg_create_n+0x90>
		(void)memcpy(msg->payload.single.args, args,
   128da:	00aa      	lsls	r2, r5, #2
   128dc:	4641      	mov	r1, r8
   128de:	f104 0014 	add.w	r0, r4, #20
   128e2:	f018 f8da 	bl	2aa9a <memcpy>
	while (nargs != 0U) {
   128e6:	e007      	b.n	128f8 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   128e8:	f7ff ff76 	bl	127d8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   128ec:	4606      	mov	r6, r0
   128ee:	b930      	cbnz	r0, 128fe <log_msg_create_n+0x82>
			msg_free(msg);
   128f0:	4620      	mov	r0, r4
   128f2:	f7ff ff85 	bl	12800 <msg_free>
			return NULL;
   128f6:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   128f8:	4620      	mov	r0, r4
   128fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   128fe:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   12902:	f1aa 0a07 	sub.w	sl, sl, #7
   12906:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   12908:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1290a:	e7db      	b.n	128c4 <log_msg_create_n+0x48>
		(void)memcpy(msg->payload.ext.data.args, args,
   1290c:	4641      	mov	r1, r8
   1290e:	2208      	movs	r2, #8
   12910:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   12914:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   12916:	f018 f8c0 	bl	2aa9a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1291a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1291c:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   12920:	2d07      	cmp	r5, #7
   12922:	462e      	mov	r6, r5
   12924:	bf28      	it	cs
   12926:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   12928:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1292c:	4641      	mov	r1, r8
   1292e:	1d38      	adds	r0, r7, #4
   12930:	464a      	mov	r2, r9
   12932:	f018 f8b2 	bl	2aa9a <memcpy>
	while (nargs != 0U) {
   12936:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   12938:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1293a:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1293c:	d1f0      	bne.n	12920 <log_msg_create_n+0xa4>
   1293e:	e7db      	b.n	128f8 <log_msg_create_n+0x7c>
   12940:	0002f023 	.word	0x0002f023
   12944:	0002e915 	.word	0x0002e915
   12948:	0002eff7 	.word	0x0002eff7

0001294c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1294c:	b40e      	push	{r1, r2, r3}
   1294e:	b503      	push	{r0, r1, lr}
   12950:	ab03      	add	r3, sp, #12
   12952:	4601      	mov	r1, r0
   12954:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12958:	4804      	ldr	r0, [pc, #16]	; (1296c <print_formatted+0x20>)
	va_start(args, fmt);
   1295a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1295c:	f7ff f80c 	bl	11978 <cbvprintf>
	va_end(args);

	return length;
}
   12960:	b002      	add	sp, #8
   12962:	f85d eb04 	ldr.w	lr, [sp], #4
   12966:	b003      	add	sp, #12
   12968:	4770      	bx	lr
   1296a:	bf00      	nop
   1296c:	00012bcd 	.word	0x00012bcd

00012970 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   12970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12974:	b087      	sub	sp, #28
   12976:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12978:	f001 0301 	and.w	r3, r1, #1
{
   1297c:	9205      	str	r2, [sp, #20]
   1297e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   12982:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12986:	9304      	str	r3, [sp, #16]
{
   12988:	4606      	mov	r6, r0
   1298a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   1298c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12990:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   12994:	f016 f977 	bl	28c86 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   12998:	4602      	mov	r2, r0
   1299a:	2800      	cmp	r0, #0
   1299c:	d044      	beq.n	12a28 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   1299e:	4939      	ldr	r1, [pc, #228]	; (12a84 <prefix_print+0x114>)
   129a0:	4630      	mov	r0, r6
   129a2:	f7ff ffd3 	bl	1294c <print_formatted>
   129a6:	4604      	mov	r4, r0
	}

	if (stamp) {
   129a8:	f1bb 0f00 	cmp.w	fp, #0
   129ac:	d008      	beq.n	129c0 <prefix_print+0x50>
	if (!format) {
   129ae:	f018 0f44 	tst.w	r8, #68	; 0x44
   129b2:	d13b      	bne.n	12a2c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   129b4:	4934      	ldr	r1, [pc, #208]	; (12a88 <prefix_print+0x118>)
   129b6:	463a      	mov	r2, r7
   129b8:	4630      	mov	r0, r6
   129ba:	f7ff ffc7 	bl	1294c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   129be:	4404      	add	r4, r0
	if (color) {
   129c0:	9b04      	ldr	r3, [sp, #16]
   129c2:	b153      	cbz	r3, 129da <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   129c4:	4b31      	ldr	r3, [pc, #196]	; (12a8c <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   129c6:	4932      	ldr	r1, [pc, #200]	; (12a90 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   129c8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   129cc:	4b31      	ldr	r3, [pc, #196]	; (12a94 <prefix_print+0x124>)
   129ce:	4630      	mov	r0, r6
   129d0:	2a00      	cmp	r2, #0
   129d2:	bf08      	it	eq
   129d4:	461a      	moveq	r2, r3
   129d6:	f7ff ffb9 	bl	1294c <print_formatted>
	if (level_on) {
   129da:	b13d      	cbz	r5, 129ec <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   129dc:	4b2e      	ldr	r3, [pc, #184]	; (12a98 <prefix_print+0x128>)
   129de:	492f      	ldr	r1, [pc, #188]	; (12a9c <prefix_print+0x12c>)
   129e0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   129e4:	4630      	mov	r0, r6
   129e6:	f7ff ffb1 	bl	1294c <print_formatted>
   129ea:	4605      	mov	r5, r0
	if (source_id >= 0) {
   129ec:	f1ba 0f00 	cmp.w	sl, #0
   129f0:	db16      	blt.n	12a20 <prefix_print+0xb0>
		total += print_formatted(output,
   129f2:	9b05      	ldr	r3, [sp, #20]
   129f4:	2b00      	cmp	r3, #0
   129f6:	d043      	beq.n	12a80 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   129f8:	2301      	movs	r3, #1
   129fa:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   129fe:	4b28      	ldr	r3, [pc, #160]	; (12aa0 <prefix_print+0x130>)
   12a00:	4f28      	ldr	r7, [pc, #160]	; (12aa4 <prefix_print+0x134>)
   12a02:	f019 0f10 	tst.w	r9, #16
   12a06:	bf18      	it	ne
   12a08:	461f      	movne	r7, r3
   12a0a:	4651      	mov	r1, sl
   12a0c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   12a10:	f7ff fe8e 	bl	12730 <log_source_name_get>
   12a14:	4639      	mov	r1, r7
   12a16:	4602      	mov	r2, r0
   12a18:	4630      	mov	r0, r6
   12a1a:	f7ff ff97 	bl	1294c <print_formatted>
   12a1e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   12a20:	1928      	adds	r0, r5, r4
   12a22:	b007      	add	sp, #28
   12a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   12a28:	4604      	mov	r4, r0
   12a2a:	e7bd      	b.n	129a8 <prefix_print+0x38>
	} else if (freq != 0U) {
   12a2c:	4b1e      	ldr	r3, [pc, #120]	; (12aa8 <prefix_print+0x138>)
   12a2e:	6818      	ldr	r0, [r3, #0]
   12a30:	2800      	cmp	r0, #0
   12a32:	d0c4      	beq.n	129be <prefix_print+0x4e>
		timestamp /= timestamp_div;
   12a34:	4b1d      	ldr	r3, [pc, #116]	; (12aac <prefix_print+0x13c>)
   12a36:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   12a3a:	6819      	ldr	r1, [r3, #0]
   12a3c:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   12a40:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   12a44:	fb00 7711 	mls	r7, r0, r1, r7
   12a48:	fbb1 f2fc 	udiv	r2, r1, ip
   12a4c:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   12a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12a54:	434f      	muls	r7, r1
		mins = seconds / 60U;
   12a56:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12a5a:	fbb7 f8f0 	udiv	r8, r7, r0
   12a5e:	fb00 7718 	mls	r7, r0, r8, r7
   12a62:	434f      	muls	r7, r1
		mins = seconds / 60U;
   12a64:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   12a68:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12a6c:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   12a70:	9100      	str	r1, [sp, #0]
   12a72:	e9cd 8001 	strd	r8, r0, [sp, #4]
   12a76:	490e      	ldr	r1, [pc, #56]	; (12ab0 <prefix_print+0x140>)
   12a78:	4630      	mov	r0, r6
   12a7a:	f7ff ff67 	bl	1294c <print_formatted>
   12a7e:	e79e      	b.n	129be <prefix_print+0x4e>
		total += print_formatted(output,
   12a80:	4f08      	ldr	r7, [pc, #32]	; (12aa4 <prefix_print+0x134>)
   12a82:	e7c2      	b.n	12a0a <prefix_print+0x9a>
   12a84:	0002f03c 	.word	0x0002f03c
   12a88:	0002f040 	.word	0x0002f040
   12a8c:	0002dbfc 	.word	0x0002dbfc
   12a90:	0002e5ec 	.word	0x0002e5ec
   12a94:	0002f02e 	.word	0x0002f02e
   12a98:	0002dc10 	.word	0x0002dc10
   12a9c:	0002f065 	.word	0x0002f065
   12aa0:	0002f038 	.word	0x0002f038
   12aa4:	0002f033 	.word	0x0002f033
   12aa8:	200023f0 	.word	0x200023f0
   12aac:	200023f4 	.word	0x200023f4
   12ab0:	0002f049 	.word	0x0002f049

00012ab4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   12ab4:	b538      	push	{r3, r4, r5, lr}
   12ab6:	460c      	mov	r4, r1
	if (color) {
   12ab8:	07e1      	lsls	r1, r4, #31
{
   12aba:	4605      	mov	r5, r0
	if (color) {
   12abc:	d503      	bpl.n	12ac6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   12abe:	4a08      	ldr	r2, [pc, #32]	; (12ae0 <postfix_print+0x2c>)
   12ac0:	4908      	ldr	r1, [pc, #32]	; (12ae4 <postfix_print+0x30>)
   12ac2:	f7ff ff43 	bl	1294c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12ac6:	06e2      	lsls	r2, r4, #27
   12ac8:	d408      	bmi.n	12adc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12aca:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   12acc:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   12ace:	bf4c      	ite	mi
   12ad0:	4905      	ldrmi	r1, [pc, #20]	; (12ae8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   12ad2:	4906      	ldrpl	r1, [pc, #24]	; (12aec <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   12ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   12ad8:	f7ff bf38 	b.w	1294c <print_formatted>
}
   12adc:	bd38      	pop	{r3, r4, r5, pc}
   12ade:	bf00      	nop
   12ae0:	0002f02e 	.word	0x0002f02e
   12ae4:	0002e5ec 	.word	0x0002e5ec
   12ae8:	00031822 	.word	0x00031822
   12aec:	0002e79e 	.word	0x0002e79e

00012af0 <hexdump_line_print>:
{
   12af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12af4:	461d      	mov	r5, r3
   12af6:	9b08      	ldr	r3, [sp, #32]
   12af8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12afa:	06da      	lsls	r2, r3, #27
{
   12afc:	4604      	mov	r4, r0
   12afe:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12b00:	d405      	bmi.n	12b0e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12b02:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12b04:	bf4c      	ite	mi
   12b06:	492a      	ldrmi	r1, [pc, #168]	; (12bb0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   12b08:	492a      	ldrpl	r1, [pc, #168]	; (12bb4 <hexdump_line_print+0xc4>)
   12b0a:	f7ff ff1f 	bl	1294c <print_formatted>
		print_formatted(output, " ");
   12b0e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 12bbc <hexdump_line_print+0xcc>
{
   12b12:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   12b16:	45a8      	cmp	r8, r5
   12b18:	db2a      	blt.n	12b70 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
   12b1a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12bc0 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   12b1e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 12bc4 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   12b22:	f8df a098 	ldr.w	sl, [pc, #152]	; 12bbc <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b26:	2500      	movs	r5, #0
		if (i < length) {
   12b28:	42bd      	cmp	r5, r7
   12b2a:	d22f      	bcs.n	12b8c <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   12b2c:	5d72      	ldrb	r2, [r6, r5]
   12b2e:	4649      	mov	r1, r9
   12b30:	4620      	mov	r0, r4
   12b32:	f7ff ff0b 	bl	1294c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b36:	3501      	adds	r5, #1
   12b38:	2d10      	cmp	r5, #16
   12b3a:	d120      	bne.n	12b7e <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   12b3c:	491e      	ldr	r1, [pc, #120]	; (12bb8 <hexdump_line_print+0xc8>)
			print_formatted(output, " ");
   12b3e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12bbc <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   12b42:	f8df 9084 	ldr.w	r9, [pc, #132]	; 12bc8 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
   12b46:	4620      	mov	r0, r4
   12b48:	f7ff ff00 	bl	1294c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b4c:	2500      	movs	r5, #0
		if (i < length) {
   12b4e:	42af      	cmp	r7, r5
   12b50:	d928      	bls.n	12ba4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   12b52:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
   12b54:	f1a2 0320 	sub.w	r3, r2, #32
   12b58:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
   12b5a:	bf28      	it	cs
   12b5c:	222e      	movcs	r2, #46	; 0x2e
   12b5e:	4649      	mov	r1, r9
   12b60:	4620      	mov	r0, r4
   12b62:	f7ff fef3 	bl	1294c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12b66:	3501      	adds	r5, #1
   12b68:	2d10      	cmp	r5, #16
   12b6a:	d114      	bne.n	12b96 <hexdump_line_print+0xa6>
}
   12b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   12b70:	4649      	mov	r1, r9
   12b72:	4620      	mov	r0, r4
   12b74:	f7ff feea 	bl	1294c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12b78:	f108 0801 	add.w	r8, r8, #1
   12b7c:	e7cb      	b.n	12b16 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   12b7e:	076a      	lsls	r2, r5, #29
   12b80:	d1d2      	bne.n	12b28 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   12b82:	4651      	mov	r1, sl
   12b84:	4620      	mov	r0, r4
   12b86:	f7ff fee1 	bl	1294c <print_formatted>
   12b8a:	e7cd      	b.n	12b28 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   12b8c:	4641      	mov	r1, r8
   12b8e:	4620      	mov	r0, r4
   12b90:	f7ff fedc 	bl	1294c <print_formatted>
   12b94:	e7cf      	b.n	12b36 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   12b96:	076b      	lsls	r3, r5, #29
   12b98:	d1d9      	bne.n	12b4e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   12b9a:	4641      	mov	r1, r8
   12b9c:	4620      	mov	r0, r4
   12b9e:	f7ff fed5 	bl	1294c <print_formatted>
   12ba2:	e7d4      	b.n	12b4e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   12ba4:	4641      	mov	r1, r8
   12ba6:	4620      	mov	r0, r4
   12ba8:	f7ff fed0 	bl	1294c <print_formatted>
   12bac:	e7db      	b.n	12b66 <hexdump_line_print+0x76>
   12bae:	bf00      	nop
   12bb0:	00031822 	.word	0x00031822
   12bb4:	0002e79e 	.word	0x0002e79e
   12bb8:	0002f075 	.word	0x0002f075
   12bbc:	0002f073 	.word	0x0002f073
   12bc0:	0002f071 	.word	0x0002f071
   12bc4:	0002f06b 	.word	0x0002f06b
   12bc8:	0002f077 	.word	0x0002f077

00012bcc <out_func>:
{
   12bcc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   12bce:	684b      	ldr	r3, [r1, #4]
   12bd0:	681a      	ldr	r2, [r3, #0]
   12bd2:	68cb      	ldr	r3, [r1, #12]
   12bd4:	429a      	cmp	r2, r3
{
   12bd6:	4605      	mov	r5, r0
   12bd8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   12bda:	d102      	bne.n	12be2 <out_func+0x16>
		log_output_flush(out_ctx);
   12bdc:	4608      	mov	r0, r1
   12bde:	f016 fab2 	bl	29146 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12be2:	6863      	ldr	r3, [r4, #4]
   12be4:	f3bf 8f5b 	dmb	ish
   12be8:	e853 2f00 	ldrex	r2, [r3]
   12bec:	1c51      	adds	r1, r2, #1
   12bee:	e843 1000 	strex	r0, r1, [r3]
   12bf2:	2800      	cmp	r0, #0
   12bf4:	d1f8      	bne.n	12be8 <out_func+0x1c>
   12bf6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   12bfa:	68a3      	ldr	r3, [r4, #8]
   12bfc:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   12bfe:	6863      	ldr	r3, [r4, #4]
   12c00:	681a      	ldr	r2, [r3, #0]
   12c02:	68e3      	ldr	r3, [r4, #12]
   12c04:	429a      	cmp	r2, r3
   12c06:	d909      	bls.n	12c1c <out_func+0x50>
   12c08:	4905      	ldr	r1, [pc, #20]	; (12c20 <out_func+0x54>)
   12c0a:	4806      	ldr	r0, [pc, #24]	; (12c24 <out_func+0x58>)
   12c0c:	4a06      	ldr	r2, [pc, #24]	; (12c28 <out_func+0x5c>)
   12c0e:	2374      	movs	r3, #116	; 0x74
   12c10:	f015 fdae 	bl	28770 <printk>
   12c14:	4804      	ldr	r0, [pc, #16]	; (12c28 <out_func+0x5c>)
   12c16:	2174      	movs	r1, #116	; 0x74
   12c18:	f015 ff9b 	bl	28b52 <assert_post_action>
}
   12c1c:	2000      	movs	r0, #0
   12c1e:	bd38      	pop	{r3, r4, r5, pc}
   12c20:	0002f0a9 	.word	0x0002f0a9
   12c24:	0002e915 	.word	0x0002e915
   12c28:	0002f07a 	.word	0x0002f07a

00012c2c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   12c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   12c30:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   12c32:	f013 0707 	ands.w	r7, r3, #7
{
   12c36:	4616      	mov	r6, r2
   12c38:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12c3a:	7a0a      	ldrb	r2, [r1, #8]
   12c3c:	4604      	mov	r4, r0
   12c3e:	460d      	mov	r5, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   12c40:	d020      	beq.n	12c84 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
   12c42:	8949      	ldrh	r1, [r1, #10]
   12c44:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12c48:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12c4c:	43d2      	mvns	r2, r2
   12c4e:	e9cd 7300 	strd	r7, r3, [sp]
   12c52:	9102      	str	r1, [sp, #8]
   12c54:	68eb      	ldr	r3, [r5, #12]
   12c56:	f002 0201 	and.w	r2, r2, #1
   12c5a:	4631      	mov	r1, r6
   12c5c:	f7ff fe88 	bl	12970 <prefix_print>
   12c60:	4681      	mov	r9, r0
   12c62:	7a2b      	ldrb	r3, [r5, #8]
   12c64:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   12c66:	f013 0801 	ands.w	r8, r3, #1
   12c6a:	d00d      	beq.n	12c88 <log_output_msg_process+0x5c>
		std_print(msg, output);
   12c6c:	4621      	mov	r1, r4
   12c6e:	4628      	mov	r0, r5
   12c70:	f016 f90c 	bl	28e8c <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   12c74:	2f00      	cmp	r7, #0
   12c76:	d03c      	beq.n	12cf2 <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   12c78:	463a      	mov	r2, r7
   12c7a:	4631      	mov	r1, r6
   12c7c:	4620      	mov	r0, r4
   12c7e:	f7ff ff19 	bl	12ab4 <postfix_print>
   12c82:	e036      	b.n	12cf2 <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   12c84:	46b9      	mov	r9, r7
   12c86:	e7ec      	b.n	12c62 <log_output_msg_process+0x36>
	} else if (raw_string) {
   12c88:	2f00      	cmp	r7, #0
   12c8a:	d138      	bne.n	12cfe <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   12c8c:	68e3      	ldr	r3, [r4, #12]
   12c8e:	b95b      	cbnz	r3, 12ca8 <log_output_msg_process+0x7c>
   12c90:	492a      	ldr	r1, [pc, #168]	; (12d3c <log_output_msg_process+0x110>)
   12c92:	482b      	ldr	r0, [pc, #172]	; (12d40 <log_output_msg_process+0x114>)
   12c94:	4a2b      	ldr	r2, [pc, #172]	; (12d44 <log_output_msg_process+0x118>)
   12c96:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   12c9a:	f015 fd69 	bl	28770 <printk>
   12c9e:	4829      	ldr	r0, [pc, #164]	; (12d44 <log_output_msg_process+0x118>)
   12ca0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   12ca4:	f015 ff55 	bl	28b52 <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   12ca8:	2600      	movs	r6, #0
		length = output->size;
   12caa:	68e3      	ldr	r3, [r4, #12]
   12cac:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   12cae:	aa06      	add	r2, sp, #24
   12cb0:	4633      	mov	r3, r6
   12cb2:	68a1      	ldr	r1, [r4, #8]
   12cb4:	4628      	mov	r0, r5
   12cb6:	f016 f8d5 	bl	28e64 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   12cba:	9a06      	ldr	r2, [sp, #24]
   12cbc:	6863      	ldr	r3, [r4, #4]
   12cbe:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12cc0:	b14a      	cbz	r2, 12cd6 <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   12cc2:	68a3      	ldr	r3, [r4, #8]
   12cc4:	4413      	add	r3, r2
   12cc6:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   12cca:	f1a8 030a 	sub.w	r3, r8, #10
   12cce:	f1d3 0800 	rsbs	r8, r3, #0
   12cd2:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   12cd6:	4620      	mov	r0, r4
   12cd8:	f016 fa35 	bl	29146 <log_output_flush>
		offset += length;
   12cdc:	9b06      	ldr	r3, [sp, #24]
   12cde:	441e      	add	r6, r3
	} while (length > 0);
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d1e2      	bne.n	12caa <log_output_msg_process+0x7e>
	if (eol) {
   12ce4:	f1b8 0f00 	cmp.w	r8, #0
   12ce8:	d003      	beq.n	12cf2 <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   12cea:	4917      	ldr	r1, [pc, #92]	; (12d48 <log_output_msg_process+0x11c>)
   12cec:	4620      	mov	r0, r4
   12cee:	f7ff fe2d 	bl	1294c <print_formatted>
	}

	log_output_flush(output);
   12cf2:	4620      	mov	r0, r4
   12cf4:	f016 fa27 	bl	29146 <log_output_flush>
}
   12cf8:	b00a      	add	sp, #40	; 0x28
   12cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   12cfe:	4628      	mov	r0, r5
   12d00:	f016 f85b 	bl	28dba <log_msg_str_get>
   12d04:	4911      	ldr	r1, [pc, #68]	; (12d4c <log_output_msg_process+0x120>)
   12d06:	4602      	mov	r2, r0
   12d08:	4620      	mov	r0, r4
   12d0a:	f7ff fe1f 	bl	1294c <print_formatted>
		length = sizeof(buf);
   12d0e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12d12:	aa05      	add	r2, sp, #20
   12d14:	4643      	mov	r3, r8
   12d16:	a906      	add	r1, sp, #24
   12d18:	4628      	mov	r0, r5
		length = sizeof(buf);
   12d1a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12d1e:	f016 f8a1 	bl	28e64 <log_msg_hexdump_data_get>
		if (length) {
   12d22:	9a05      	ldr	r2, [sp, #20]
   12d24:	2a00      	cmp	r2, #0
   12d26:	d0a7      	beq.n	12c78 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   12d28:	464b      	mov	r3, r9
   12d2a:	9600      	str	r6, [sp, #0]
   12d2c:	a906      	add	r1, sp, #24
   12d2e:	4620      	mov	r0, r4
   12d30:	f7ff fede 	bl	12af0 <hexdump_line_print>
			offset += length;
   12d34:	9b05      	ldr	r3, [sp, #20]
   12d36:	4498      	add	r8, r3
		length = sizeof(buf);
   12d38:	e7eb      	b.n	12d12 <log_output_msg_process+0xe6>
   12d3a:	bf00      	nop
   12d3c:	0002f0d9 	.word	0x0002f0d9
   12d40:	0002e915 	.word	0x0002e915
   12d44:	0002f07a 	.word	0x0002f07a
   12d48:	0002f0e6 	.word	0x0002f0e6
   12d4c:	0002e5ec 	.word	0x0002e5ec

00012d50 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12d50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12d52:	f242 730f 	movw	r3, #9999	; 0x270f
   12d56:	428b      	cmp	r3, r1
   12d58:	bf28      	it	cs
   12d5a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   12d5c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12d5e:	4a0f      	ldr	r2, [pc, #60]	; (12d9c <log_output_dropped_process+0x4c>)
{
   12d60:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12d62:	2105      	movs	r1, #5
   12d64:	4668      	mov	r0, sp
   12d66:	f015 fd10 	bl	2878a <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12d6a:	6863      	ldr	r3, [r4, #4]
   12d6c:	490c      	ldr	r1, [pc, #48]	; (12da0 <log_output_dropped_process+0x50>)
   12d6e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12d70:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12d72:	220b      	movs	r2, #11
   12d74:	4628      	mov	r0, r5
   12d76:	f016 f87c 	bl	28e72 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   12d7a:	6863      	ldr	r3, [r4, #4]
   12d7c:	4632      	mov	r2, r6
   12d7e:	4669      	mov	r1, sp
   12d80:	4628      	mov	r0, r5
   12d82:	685b      	ldr	r3, [r3, #4]
   12d84:	f016 f875 	bl	28e72 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   12d88:	6863      	ldr	r3, [r4, #4]
   12d8a:	4906      	ldr	r1, [pc, #24]	; (12da4 <log_output_dropped_process+0x54>)
   12d8c:	685b      	ldr	r3, [r3, #4]
   12d8e:	221b      	movs	r2, #27
   12d90:	4628      	mov	r0, r5
   12d92:	f016 f86e 	bl	28e72 <buffer_write>
		     output->control_block->ctx);
}
   12d96:	b002      	add	sp, #8
   12d98:	bd70      	pop	{r4, r5, r6, pc}
   12d9a:	bf00      	nop
   12d9c:	00031eb7 	.word	0x00031eb7
   12da0:	0002f124 	.word	0x0002f124
   12da4:	0002f108 	.word	0x0002f108

00012da8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   12da8:	4a08      	ldr	r2, [pc, #32]	; (12dcc <log_output_timestamp_freq_set+0x24>)
{
   12daa:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   12dac:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12dae:	4c08      	ldr	r4, [pc, #32]	; (12dd0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   12db0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   12db2:	2100      	movs	r1, #0
   12db4:	42a0      	cmp	r0, r4
   12db6:	d804      	bhi.n	12dc2 <log_output_timestamp_freq_set+0x1a>
   12db8:	b101      	cbz	r1, 12dbc <log_output_timestamp_freq_set+0x14>
   12dba:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   12dbc:	4b05      	ldr	r3, [pc, #20]	; (12dd4 <log_output_timestamp_freq_set+0x2c>)
   12dbe:	6018      	str	r0, [r3, #0]
}
   12dc0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   12dc2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   12dc4:	005b      	lsls	r3, r3, #1
   12dc6:	2101      	movs	r1, #1
   12dc8:	e7f4      	b.n	12db4 <log_output_timestamp_freq_set+0xc>
   12dca:	bf00      	nop
   12dcc:	200023f4 	.word	0x200023f4
   12dd0:	000f4240 	.word	0x000f4240
   12dd4:	200023f0 	.word	0x200023f0

00012dd8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   12dd8:	4b01      	ldr	r3, [pc, #4]	; (12de0 <log_backend_rtt_init+0x8>)
   12dda:	2201      	movs	r2, #1
   12ddc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   12dde:	4770      	bx	lr
   12de0:	2000375f 	.word	0x2000375f

00012de4 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   12de4:	4b02      	ldr	r3, [pc, #8]	; (12df0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   12de6:	4803      	ldr	r0, [pc, #12]	; (12df4 <panic+0x10>)
   12de8:	2201      	movs	r2, #1
   12dea:	701a      	strb	r2, [r3, #0]
   12dec:	f016 b9ab 	b.w	29146 <log_output_flush>
   12df0:	20003760 	.word	0x20003760
   12df4:	0002dc40 	.word	0x0002dc40

00012df8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12df8:	4801      	ldr	r0, [pc, #4]	; (12e00 <dropped+0x8>)
   12dfa:	f7ff bfa9 	b.w	12d50 <log_output_dropped_process>
   12dfe:	bf00      	nop
   12e00:	0002dc40 	.word	0x0002dc40

00012e04 <put>:
{
   12e04:	b510      	push	{r4, lr}
	log_msg_get(msg);
   12e06:	4608      	mov	r0, r1
   12e08:	460c      	mov	r4, r1
   12e0a:	f015 ff94 	bl	28d36 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   12e0e:	4805      	ldr	r0, [pc, #20]	; (12e24 <put+0x20>)
   12e10:	4621      	mov	r1, r4
   12e12:	220f      	movs	r2, #15
   12e14:	f7ff ff0a 	bl	12c2c <log_output_msg_process>
	log_msg_put(msg);
   12e18:	4620      	mov	r0, r4
}
   12e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12e1e:	f015 bfb9 	b.w	28d94 <log_msg_put>
   12e22:	bf00      	nop
   12e24:	0002dc40 	.word	0x0002dc40

00012e28 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12e28:	4b05      	ldr	r3, [pc, #20]	; (12e40 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   12e2a:	781b      	ldrb	r3, [r3, #0]
   12e2c:	b11b      	cbz	r3, 12e36 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   12e2e:	f241 3088 	movw	r0, #5000	; 0x1388
   12e32:	f01a bb03 	b.w	2d43c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   12e36:	20a4      	movs	r0, #164	; 0xa4
   12e38:	2100      	movs	r1, #0
   12e3a:	f011 bd05 	b.w	24848 <z_impl_k_sleep>
   12e3e:	bf00      	nop
   12e40:	20003760 	.word	0x20003760

00012e44 <data_out_block_mode>:
{
   12e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12e48:	f8df 9094 	ldr.w	r9, [pc, #148]	; 12ee0 <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   12e4c:	f8df a094 	ldr.w	sl, [pc, #148]	; 12ee4 <data_out_block_mode+0xa0>
{
   12e50:	4680      	mov	r8, r0
   12e52:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   12e54:	2404      	movs	r4, #4
   12e56:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   12e58:	f899 5000 	ldrb.w	r5, [r9]
   12e5c:	b9cd      	cbnz	r5, 12e92 <data_out_block_mode+0x4e>
   12e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12e66:	4650      	mov	r0, sl
   12e68:	f00f faca 	bl	22400 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12e6c:	463a      	mov	r2, r7
   12e6e:	4641      	mov	r1, r8
   12e70:	4628      	mov	r0, r5
   12e72:	f00e fd13 	bl	2189c <SEGGER_RTT_WriteSkipNoLock>
   12e76:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   12e78:	4650      	mov	r0, sl
   12e7a:	f00f fbc1 	bl	22600 <z_impl_k_mutex_unlock>
		if (ret) {
   12e7e:	4d17      	ldr	r5, [pc, #92]	; (12edc <data_out_block_mode+0x98>)
   12e80:	b1fe      	cbz	r6, 12ec2 <data_out_block_mode+0x7e>
	host_present = true;
   12e82:	2301      	movs	r3, #1
   12e84:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   12e86:	f89b 3000 	ldrb.w	r3, [fp]
   12e8a:	b96b      	cbnz	r3, 12ea8 <data_out_block_mode+0x64>
}
   12e8c:	4638      	mov	r0, r7
   12e8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   12e92:	463a      	mov	r2, r7
   12e94:	4641      	mov	r1, r8
   12e96:	2000      	movs	r0, #0
   12e98:	f00e fd00 	bl	2189c <SEGGER_RTT_WriteSkipNoLock>
   12e9c:	4606      	mov	r6, r0
   12e9e:	e7ee      	b.n	12e7e <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   12ea0:	b95c      	cbnz	r4, 12eba <data_out_block_mode+0x76>
		host_present = false;
   12ea2:	702c      	strb	r4, [r5, #0]
   12ea4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   12ea8:	2000      	movs	r0, #0
   12eaa:	f00e fd43 	bl	21934 <SEGGER_RTT_HasDataUp>
   12eae:	2800      	cmp	r0, #0
   12eb0:	d0ec      	beq.n	12e8c <data_out_block_mode+0x48>
   12eb2:	782b      	ldrb	r3, [r5, #0]
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	d1f3      	bne.n	12ea0 <data_out_block_mode+0x5c>
   12eb8:	e7e8      	b.n	12e8c <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   12eba:	3c01      	subs	r4, #1
   12ebc:	f7ff ffb4 	bl	12e28 <on_failed_write.part.0>
   12ec0:	e7f2      	b.n	12ea8 <data_out_block_mode+0x64>
		} else if (host_present) {
   12ec2:	782b      	ldrb	r3, [r5, #0]
   12ec4:	b113      	cbz	r3, 12ecc <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   12ec6:	3c01      	subs	r4, #1
   12ec8:	d104      	bne.n	12ed4 <data_out_block_mode+0x90>
		host_present = false;
   12eca:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   12ecc:	782b      	ldrb	r3, [r5, #0]
   12ece:	2b00      	cmp	r3, #0
   12ed0:	d1c2      	bne.n	12e58 <data_out_block_mode+0x14>
   12ed2:	e7db      	b.n	12e8c <data_out_block_mode+0x48>
   12ed4:	f7ff ffa8 	bl	12e28 <on_failed_write.part.0>
   12ed8:	e7f8      	b.n	12ecc <data_out_block_mode+0x88>
   12eda:	bf00      	nop
   12edc:	2000375f 	.word	0x2000375f
   12ee0:	20003760 	.word	0x20003760
   12ee4:	20000888 	.word	0x20000888

00012ee8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   12ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12eec:	460f      	mov	r7, r1
   12eee:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ef0:	2108      	movs	r1, #8
   12ef2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12ef4:	f016 f9f0 	bl	292d8 <nvs_al_size.isra.0>

	*addr -= ate_size;
   12ef8:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   12efa:	4b13      	ldr	r3, [pc, #76]	; (12f48 <nvs_recover_last_ate+0x60>)
	*addr -= ate_size;
   12efc:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12efe:	4680      	mov	r8, r0
	*addr -= ate_size;
   12f00:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   12f02:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (nvs_ate_valid(fs, &end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
   12f06:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
   12f08:	42ac      	cmp	r4, r5
   12f0a:	d803      	bhi.n	12f14 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   12f0c:	2000      	movs	r0, #0
}
   12f0e:	b003      	add	sp, #12
   12f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12f14:	2308      	movs	r3, #8
   12f16:	466a      	mov	r2, sp
   12f18:	4621      	mov	r1, r4
   12f1a:	4630      	mov	r0, r6
   12f1c:	f016 f93f 	bl	2919e <nvs_flash_rd>
		if (rc) {
   12f20:	2800      	cmp	r0, #0
   12f22:	d1f4      	bne.n	12f0e <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   12f24:	4669      	mov	r1, sp
   12f26:	4630      	mov	r0, r6
   12f28:	f016 f9e0 	bl	292ec <nvs_ate_valid>
   12f2c:	b140      	cbz	r0, 12f40 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   12f2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12f32:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   12f36:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   12f38:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   12f3c:	4413      	add	r3, r2
   12f3e:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   12f40:	eba4 0408 	sub.w	r4, r4, r8
   12f44:	e7e0      	b.n	12f08 <nvs_recover_last_ate+0x20>
   12f46:	bf00      	nop
   12f48:	ffff0000 	.word	0xffff0000

00012f4c <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   12f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f50:	4604      	mov	r4, r0
   12f52:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12f54:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   12f56:	2108      	movs	r1, #8
   12f58:	f016 f9be 	bl	292d8 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   12f5c:	6863      	ldr	r3, [r4, #4]
   12f5e:	0c1b      	lsrs	r3, r3, #16
   12f60:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12f62:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   12f64:	a903      	add	r1, sp, #12
   12f66:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   12f68:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   12f6a:	f016 f9d9 	bl	29320 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12f6e:	9b03      	ldr	r3, [sp, #12]
   12f70:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12f72:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12f74:	4419      	add	r1, r3
   12f76:	1b49      	subs	r1, r1, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12f78:	4632      	mov	r2, r6
   12f7a:	2308      	movs	r3, #8
   12f7c:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   12f7e:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12f80:	f016 f90d 	bl	2919e <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
   12f84:	1e02      	subs	r2, r0, #0
   12f86:	f2c0 80ab 	blt.w	130e0 <nvs_gc+0x194>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   12f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12f8c:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12f8e:	2300      	movs	r3, #0
		if (data8[i] != value) {
   12f90:	5cf1      	ldrb	r1, [r6, r3]
   12f92:	4291      	cmp	r1, r2
   12f94:	f040 8092 	bne.w	130bc <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12f98:	3301      	adds	r3, #1
   12f9a:	2b08      	cmp	r3, #8
   12f9c:	d1f8      	bne.n	12f90 <nvs_gc+0x44>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   12f9e:	68a0      	ldr	r0, [r4, #8]
   12fa0:	6863      	ldr	r3, [r4, #4]
   12fa2:	4428      	add	r0, r5
   12fa4:	4283      	cmp	r3, r0
   12fa6:	f080 8081 	bcs.w	130ac <nvs_gc+0x160>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   12faa:	9903      	ldr	r1, [sp, #12]
   12fac:	4620      	mov	r0, r4
   12fae:	f016 f953 	bl	29258 <nvs_flash_erase_sector>
   12fb2:	4602      	mov	r2, r0
	if (rc) {
   12fb4:	e094      	b.n	130e0 <nvs_gc+0x194>
		gc_addr &= ADDR_SECT_MASK;
   12fb6:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
   12fb8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   12fbc:	0c1b      	lsrs	r3, r3, #16
   12fbe:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   12fc0:	4413      	add	r3, r2
   12fc2:	9304      	str	r3, [sp, #16]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   12fc4:	f8df b120 	ldr.w	fp, [pc, #288]	; 130e8 <nvs_gc+0x19c>
		gc_prev_addr = gc_addr;
   12fc8:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   12fcc:	aa08      	add	r2, sp, #32
   12fce:	a904      	add	r1, sp, #16
   12fd0:	4620      	mov	r0, r4
   12fd2:	f016 fa29 	bl	29428 <nvs_prev_ate>
		if (rc) {
   12fd6:	4602      	mov	r2, r0
   12fd8:	2800      	cmp	r0, #0
   12fda:	f040 8081 	bne.w	130e0 <nvs_gc+0x194>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   12fde:	a908      	add	r1, sp, #32
   12fe0:	4620      	mov	r0, r4
   12fe2:	f016 f983 	bl	292ec <nvs_ate_valid>
   12fe6:	2800      	cmp	r0, #0
   12fe8:	d036      	beq.n	13058 <nvs_gc+0x10c>
		wlk_addr = fs->ate_wra;
   12fea:	6863      	ldr	r3, [r4, #4]
   12fec:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12fee:	aa0a      	add	r2, sp, #40	; 0x28
   12ff0:	a905      	add	r1, sp, #20
   12ff2:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   12ff4:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   12ff6:	f016 fa17 	bl	29428 <nvs_prev_ate>
			if (rc) {
   12ffa:	4602      	mov	r2, r0
   12ffc:	2800      	cmp	r0, #0
   12ffe:	d16f      	bne.n	130e0 <nvs_gc+0x194>
			if ((wlk_ate.id == gc_ate.id) &&
   13000:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   13004:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13008:	429a      	cmp	r2, r3
   1300a:	d028      	beq.n	1305e <nvs_gc+0x112>
		} while (wlk_addr != fs->ate_wra);
   1300c:	6862      	ldr	r2, [r4, #4]
   1300e:	9b05      	ldr	r3, [sp, #20]
   13010:	429a      	cmp	r2, r3
   13012:	d1ec      	bne.n	12fee <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   13014:	4556      	cmp	r6, sl
   13016:	d11f      	bne.n	13058 <nvs_gc+0x10c>
   13018:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1301c:	b1e3      	cbz	r3, 13058 <nvs_gc+0x10c>
			data_addr += gc_ate.offset;
   1301e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   13022:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
   13026:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   13028:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1302a:	68a3      	ldr	r3, [r4, #8]
   1302c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   13030:	f016 f949 	bl	292c6 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   13034:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   13036:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1303a:	681e      	ldr	r6, [r3, #0]
   1303c:	4276      	negs	r6, r6
	block_size =
   1303e:	f006 0320 	and.w	r3, r6, #32
   13042:	9301      	str	r3, [sp, #4]
	while (len) {
   13044:	f1b8 0f00 	cmp.w	r8, #0
   13048:	d110      	bne.n	1306c <nvs_gc+0x120>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   1304a:	a908      	add	r1, sp, #32
   1304c:	4620      	mov	r0, r4
   1304e:	f016 f9c5 	bl	293dc <nvs_flash_ate_wrt>
			if (rc) {
   13052:	4602      	mov	r2, r0
   13054:	2800      	cmp	r0, #0
   13056:	d143      	bne.n	130e0 <nvs_gc+0x194>
	} while (gc_prev_addr != stop_addr);
   13058:	45ca      	cmp	sl, r9
   1305a:	d1b5      	bne.n	12fc8 <nvs_gc+0x7c>
gc_done:
   1305c:	e79f      	b.n	12f9e <nvs_gc+0x52>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1305e:	a90a      	add	r1, sp, #40	; 0x28
   13060:	4620      	mov	r0, r4
   13062:	f016 f943 	bl	292ec <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   13066:	2800      	cmp	r0, #0
   13068:	d0d0      	beq.n	1300c <nvs_gc+0xc0>
   1306a:	e7d3      	b.n	13014 <nvs_gc+0xc8>
		bytes_to_copy = MIN(block_size, len);
   1306c:	9b01      	ldr	r3, [sp, #4]
   1306e:	4543      	cmp	r3, r8
   13070:	bf28      	it	cs
   13072:	4643      	movcs	r3, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   13074:	aa0c      	add	r2, sp, #48	; 0x30
   13076:	4639      	mov	r1, r7
   13078:	4620      	mov	r0, r4
		bytes_to_copy = MIN(block_size, len);
   1307a:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1307c:	f016 f88f 	bl	2919e <nvs_flash_rd>
		if (rc) {
   13080:	4602      	mov	r2, r0
   13082:	bb68      	cbnz	r0, 130e0 <nvs_gc+0x194>
	if (!len) {
   13084:	b136      	cbz	r6, 13094 <nvs_gc+0x148>
   13086:	aa0c      	add	r2, sp, #48	; 0x30
   13088:	68a1      	ldr	r1, [r4, #8]
   1308a:	4633      	mov	r3, r6
   1308c:	4620      	mov	r0, r4
   1308e:	f016 f970 	bl	29372 <nvs_flash_al_wrt.part.0>
   13092:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   13094:	4631      	mov	r1, r6
   13096:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13098:	f016 f91e 	bl	292d8 <nvs_al_size.isra.0>
   1309c:	68a1      	ldr	r1, [r4, #8]
   1309e:	4401      	add	r1, r0
   130a0:	60a1      	str	r1, [r4, #8]
		if (rc) {
   130a2:	b9ea      	cbnz	r2, 130e0 <nvs_gc+0x194>
		len -= bytes_to_copy;
   130a4:	eba8 0806 	sub.w	r8, r8, r6
		addr += bytes_to_copy;
   130a8:	4437      	add	r7, r6
   130aa:	e7cb      	b.n	13044 <nvs_gc+0xf8>
		rc = nvs_add_gc_done_ate(fs);
   130ac:	4620      	mov	r0, r4
   130ae:	f016 f9a6 	bl	293fe <nvs_add_gc_done_ate>
		if (rc) {
   130b2:	4602      	mov	r2, r0
   130b4:	2800      	cmp	r0, #0
   130b6:	f43f af78 	beq.w	12faa <nvs_gc+0x5e>
   130ba:	e011      	b.n	130e0 <nvs_gc+0x194>
	stop_addr = gc_addr - ate_size;
   130bc:	9b04      	ldr	r3, [sp, #16]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   130be:	4631      	mov	r1, r6
   130c0:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   130c2:	eba3 0905 	sub.w	r9, r3, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   130c6:	f016 f936 	bl	29336 <nvs_close_ate_valid>
   130ca:	2800      	cmp	r0, #0
   130cc:	f47f af73 	bne.w	12fb6 <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   130d0:	a904      	add	r1, sp, #16
   130d2:	4620      	mov	r0, r4
   130d4:	f7ff ff08 	bl	12ee8 <nvs_recover_last_ate>
		if (rc) {
   130d8:	4602      	mov	r2, r0
   130da:	2800      	cmp	r0, #0
   130dc:	f43f af72 	beq.w	12fc4 <nvs_gc+0x78>
		return rc;
	}
	return 0;
}
   130e0:	4610      	mov	r0, r2
   130e2:	b015      	add	sp, #84	; 0x54
   130e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130e8:	ffff0000 	.word	0xffff0000

000130ec <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   130ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   130f0:	4604      	mov	r4, r0
   130f2:	b088      	sub	sp, #32
   130f4:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   130f6:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   130fa:	4638      	mov	r0, r7
   130fc:	f01a f8d4 	bl	2d2a8 <z_impl_k_mutex_init>
   13100:	4628      	mov	r0, r5
   13102:	f00e fc41 	bl	21988 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   13106:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   13108:	b978      	cbnz	r0, 1312a <nvs_init+0x3e>
   1310a:	4baa      	ldr	r3, [pc, #680]	; (133b4 <nvs_init+0x2c8>)
   1310c:	49aa      	ldr	r1, [pc, #680]	; (133b8 <nvs_init+0x2cc>)
		LOG_ERR("No valid flash device found");
   1310e:	48ab      	ldr	r0, [pc, #684]	; (133bc <nvs_init+0x2d0>)
   13110:	1ac9      	subs	r1, r1, r3
   13112:	08c9      	lsrs	r1, r1, #3
   13114:	0189      	lsls	r1, r1, #6
   13116:	f041 0101 	orr.w	r1, r1, #1
   1311a:	f015 fd48 	bl	28bae <log_0>
		return -ENXIO;
   1311e:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   13122:	4628      	mov	r0, r5
   13124:	b008      	add	sp, #32
   13126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1312a:	6883      	ldr	r3, [r0, #8]
   1312c:	691b      	ldr	r3, [r3, #16]
   1312e:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   13130:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13132:	b960      	cbnz	r0, 1314e <nvs_init+0x62>
   13134:	49a0      	ldr	r1, [pc, #640]	; (133b8 <nvs_init+0x2cc>)
   13136:	4b9f      	ldr	r3, [pc, #636]	; (133b4 <nvs_init+0x2c8>)
		LOG_ERR("Could not obtain flash parameters");
   13138:	48a1      	ldr	r0, [pc, #644]	; (133c0 <nvs_init+0x2d4>)
   1313a:	1ac9      	subs	r1, r1, r3
   1313c:	08c9      	lsrs	r1, r1, #3
   1313e:	0189      	lsls	r1, r1, #6
   13140:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
   13144:	f015 fd33 	bl	28bae <log_0>
		return -EINVAL;
   13148:	f06f 0515 	mvn.w	r5, #21
   1314c:	e7e9      	b.n	13122 <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
   1314e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   13150:	6883      	ldr	r3, [r0, #8]
   13152:	691b      	ldr	r3, [r3, #16]
   13154:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   13156:	6803      	ldr	r3, [r0, #0]
   13158:	3b01      	subs	r3, #1
   1315a:	2b1f      	cmp	r3, #31
   1315c:	d908      	bls.n	13170 <nvs_init+0x84>
   1315e:	4996      	ldr	r1, [pc, #600]	; (133b8 <nvs_init+0x2cc>)
   13160:	4b94      	ldr	r3, [pc, #592]	; (133b4 <nvs_init+0x2c8>)
		LOG_ERR("Unsupported write block size");
   13162:	4898      	ldr	r0, [pc, #608]	; (133c4 <nvs_init+0x2d8>)
   13164:	1ac9      	subs	r1, r1, r3
   13166:	08c9      	lsrs	r1, r1, #3
   13168:	0189      	lsls	r1, r1, #6
   1316a:	f041 0101 	orr.w	r1, r1, #1
   1316e:	e7e9      	b.n	13144 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   13170:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   13172:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   13174:	aa05      	add	r2, sp, #20
   13176:	f019 fd17 	bl	2cba8 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1317a:	b140      	cbz	r0, 1318e <nvs_init+0xa2>
   1317c:	498e      	ldr	r1, [pc, #568]	; (133b8 <nvs_init+0x2cc>)
   1317e:	4b8d      	ldr	r3, [pc, #564]	; (133b4 <nvs_init+0x2c8>)
		LOG_ERR("Unable to get page info");
   13180:	4891      	ldr	r0, [pc, #580]	; (133c8 <nvs_init+0x2dc>)
   13182:	1ac9      	subs	r1, r1, r3
   13184:	08c9      	lsrs	r1, r1, #3
   13186:	0189      	lsls	r1, r1, #6
   13188:	f041 0101 	orr.w	r1, r1, #1
   1318c:	e7da      	b.n	13144 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
   1318e:	89a3      	ldrh	r3, [r4, #12]
   13190:	b12b      	cbz	r3, 1319e <nvs_init+0xb2>
   13192:	9a06      	ldr	r2, [sp, #24]
   13194:	fbb3 f5f2 	udiv	r5, r3, r2
   13198:	fb02 3515 	mls	r5, r2, r5, r3
   1319c:	b145      	cbz	r5, 131b0 <nvs_init+0xc4>
   1319e:	4986      	ldr	r1, [pc, #536]	; (133b8 <nvs_init+0x2cc>)
   131a0:	4b84      	ldr	r3, [pc, #528]	; (133b4 <nvs_init+0x2c8>)
		LOG_ERR("Invalid sector size");
   131a2:	488a      	ldr	r0, [pc, #552]	; (133cc <nvs_init+0x2e0>)
   131a4:	1ac9      	subs	r1, r1, r3
   131a6:	08c9      	lsrs	r1, r1, #3
   131a8:	0189      	lsls	r1, r1, #6
   131aa:	f041 0101 	orr.w	r1, r1, #1
   131ae:	e7c9      	b.n	13144 <nvs_init+0x58>
	if (fs->sector_count < 2) {
   131b0:	89e3      	ldrh	r3, [r4, #14]
   131b2:	2b01      	cmp	r3, #1
   131b4:	d808      	bhi.n	131c8 <nvs_init+0xdc>
   131b6:	4980      	ldr	r1, [pc, #512]	; (133b8 <nvs_init+0x2cc>)
   131b8:	4b7e      	ldr	r3, [pc, #504]	; (133b4 <nvs_init+0x2c8>)
		LOG_ERR("Configuration error - sector count");
   131ba:	4885      	ldr	r0, [pc, #532]	; (133d0 <nvs_init+0x2e4>)
   131bc:	1ac9      	subs	r1, r1, r3
   131be:	08c9      	lsrs	r1, r1, #3
   131c0:	0189      	lsls	r1, r1, #6
   131c2:	f041 0101 	orr.w	r1, r1, #1
   131c6:	e7bd      	b.n	13144 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   131c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   131ca:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   131cc:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   131d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131d8:	4638      	mov	r0, r7
   131da:	f00f f911 	bl	22400 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   131de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   131e0:	2108      	movs	r1, #8
   131e2:	f016 f879 	bl	292d8 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   131e6:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   131e8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   131ea:	89e3      	ldrh	r3, [r4, #14]
   131ec:	fa1f fa85 	uxth.w	sl, r5
   131f0:	4553      	cmp	r3, sl
   131f2:	d844      	bhi.n	1327e <nvs_init+0x192>
	if (closed_sectors == fs->sector_count) {
   131f4:	89e3      	ldrh	r3, [r4, #14]
   131f6:	454b      	cmp	r3, r9
   131f8:	f000 80f0 	beq.w	133dc <nvs_init+0x2f0>
	if (i == fs->sector_count) {
   131fc:	459a      	cmp	sl, r3
   131fe:	d10b      	bne.n	13218 <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   13200:	9900      	ldr	r1, [sp, #0]
   13202:	2308      	movs	r3, #8
   13204:	4642      	mov	r2, r8
   13206:	1b89      	subs	r1, r1, r6
   13208:	4620      	mov	r0, r4
   1320a:	f016 f800 	bl	2920e <nvs_flash_cmp_const>
		if (!rc) {
   1320e:	b918      	cbnz	r0, 13218 <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
   13210:	89e0      	ldrh	r0, [r4, #14]
   13212:	4669      	mov	r1, sp
   13214:	f016 f884 	bl	29320 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   13218:	4669      	mov	r1, sp
   1321a:	4620      	mov	r0, r4
   1321c:	f7ff fe64 	bl	12ee8 <nvs_recover_last_ate>
	if (rc) {
   13220:	4605      	mov	r5, r0
   13222:	2800      	cmp	r0, #0
   13224:	f040 80dc 	bne.w	133e0 <nvs_init+0x2f4>
	fs->ate_wra = addr;
   13228:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1322a:	4a6a      	ldr	r2, [pc, #424]	; (133d4 <nvs_init+0x2e8>)
	fs->ate_wra = addr;
   1322c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1322e:	4013      	ands	r3, r2
   13230:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   13232:	4691      	mov	r9, r2
	while (fs->ate_wra >= fs->data_wra) {
   13234:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   13238:	4299      	cmp	r1, r3
   1323a:	d30e      	bcc.n	1325a <nvs_init+0x16e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1323c:	2308      	movs	r3, #8
   1323e:	aa01      	add	r2, sp, #4
   13240:	4620      	mov	r0, r4
   13242:	f015 ffac 	bl	2919e <nvs_flash_rd>
		if (rc) {
   13246:	b9c0      	cbnz	r0, 1327a <nvs_init+0x18e>
   13248:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   1324a:	f813 2b01 	ldrb.w	r2, [r3], #1
   1324e:	4590      	cmp	r8, r2
   13250:	f040 8101 	bne.w	13456 <nvs_init+0x36a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   13254:	3001      	adds	r0, #1
   13256:	2808      	cmp	r0, #8
   13258:	d1f7      	bne.n	1324a <nvs_init+0x15e>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1325a:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   1325c:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1325e:	0c1b      	lsrs	r3, r3, #16
   13260:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   13262:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13264:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   13266:	f016 f85b 	bl	29320 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   1326a:	89a3      	ldrh	r3, [r4, #12]
   1326c:	9900      	ldr	r1, [sp, #0]
   1326e:	4642      	mov	r2, r8
   13270:	4620      	mov	r0, r4
   13272:	f015 ffcc 	bl	2920e <nvs_flash_cmp_const>
	if (rc < 0) {
   13276:	2800      	cmp	r0, #0
   13278:	da25      	bge.n	132c6 <nvs_init+0x1da>
   1327a:	4605      	mov	r5, r0
   1327c:	e0b0      	b.n	133e0 <nvs_init+0x2f4>
		       (uint16_t)(fs->sector_size - ate_size);
   1327e:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   13280:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   13282:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   13284:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13288:	4642      	mov	r2, r8
   1328a:	2308      	movs	r3, #8
   1328c:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1328e:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13290:	f015 ffbd 	bl	2920e <nvs_flash_cmp_const>
		if (rc) {
   13294:	b178      	cbz	r0, 132b6 <nvs_init+0x1ca>
			nvs_sector_advance(fs, &addr);
   13296:	89e0      	ldrh	r0, [r4, #14]
   13298:	4669      	mov	r1, sp
   1329a:	f016 f841 	bl	29320 <nvs_sector_advance.isra.0>
			closed_sectors++;
   1329e:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   132a2:	9900      	ldr	r1, [sp, #0]
   132a4:	2308      	movs	r3, #8
   132a6:	4642      	mov	r2, r8
   132a8:	4620      	mov	r0, r4
			closed_sectors++;
   132aa:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   132ae:	f015 ffae 	bl	2920e <nvs_flash_cmp_const>
			if (!rc) {
   132b2:	2800      	cmp	r0, #0
   132b4:	d09e      	beq.n	131f4 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
   132b6:	3501      	adds	r5, #1
   132b8:	e797      	b.n	131ea <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   132ba:	2a00      	cmp	r2, #0
   132bc:	f000 80e3 	beq.w	13486 <nvs_init+0x39a>
				rc = -ESPIPE;
   132c0:	f06f 051c 	mvn.w	r5, #28
   132c4:	e08c      	b.n	133e0 <nvs_init+0x2f4>
	if (rc) {
   132c6:	d050      	beq.n	1336a <nvs_init+0x27e>
		addr = fs->ate_wra + ate_size;
   132c8:	6863      	ldr	r3, [r4, #4]
   132ca:	4433      	add	r3, r6
   132cc:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   132ce:	f64f 78ff 	movw	r8, #65535	; 0xffff
   132d2:	9900      	ldr	r1, [sp, #0]
   132d4:	89a3      	ldrh	r3, [r4, #12]
   132d6:	b28a      	uxth	r2, r1
   132d8:	1b9b      	subs	r3, r3, r6
   132da:	429a      	cmp	r2, r3
   132dc:	d320      	bcc.n	13320 <nvs_init+0x234>
   132de:	4b35      	ldr	r3, [pc, #212]	; (133b4 <nvs_init+0x2c8>)
   132e0:	4935      	ldr	r1, [pc, #212]	; (133b8 <nvs_init+0x2cc>)
		LOG_INF("No GC Done marker found: restarting gc");
   132e2:	483d      	ldr	r0, [pc, #244]	; (133d8 <nvs_init+0x2ec>)
   132e4:	1ac9      	subs	r1, r1, r3
   132e6:	08c9      	lsrs	r1, r1, #3
   132e8:	0189      	lsls	r1, r1, #6
   132ea:	f041 0103 	orr.w	r1, r1, #3
   132ee:	f015 fc5e 	bl	28bae <log_0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   132f2:	6861      	ldr	r1, [r4, #4]
   132f4:	4620      	mov	r0, r4
   132f6:	f015 ffaf 	bl	29258 <nvs_flash_erase_sector>
		if (rc) {
   132fa:	2800      	cmp	r0, #0
   132fc:	d1bd      	bne.n	1327a <nvs_init+0x18e>
		fs->ate_wra &= ADDR_SECT_MASK;
   132fe:	6862      	ldr	r2, [r4, #4]
   13300:	4934      	ldr	r1, [pc, #208]	; (133d4 <nvs_init+0x2e8>)
   13302:	ea02 0301 	and.w	r3, r2, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13306:	89a2      	ldrh	r2, [r4, #12]
   13308:	4413      	add	r3, r2
   1330a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1330e:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   13310:	400b      	ands	r3, r1
   13312:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13314:	4620      	mov	r0, r4
   13316:	f7ff fe19 	bl	12f4c <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1331a:	2800      	cmp	r0, #0
   1331c:	d040      	beq.n	133a0 <nvs_init+0x2b4>
   1331e:	e7ac      	b.n	1327a <nvs_init+0x18e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13320:	2308      	movs	r3, #8
   13322:	aa03      	add	r2, sp, #12
   13324:	4620      	mov	r0, r4
   13326:	f015 ff3a 	bl	2919e <nvs_flash_rd>
			if (rc) {
   1332a:	2800      	cmp	r0, #0
   1332c:	d1a5      	bne.n	1327a <nvs_init+0x18e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1332e:	a903      	add	r1, sp, #12
   13330:	4620      	mov	r0, r4
   13332:	f015 ffdb 	bl	292ec <nvs_ate_valid>
   13336:	b138      	cbz	r0, 13348 <nvs_init+0x25c>
   13338:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1333c:	4543      	cmp	r3, r8
   1333e:	d103      	bne.n	13348 <nvs_init+0x25c>
			    (gc_done_ate.id == 0xffff) &&
   13340:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13344:	2b00      	cmp	r3, #0
   13346:	d06f      	beq.n	13428 <nvs_init+0x33c>
			addr += ate_size;
   13348:	9b00      	ldr	r3, [sp, #0]
   1334a:	4433      	add	r3, r6
   1334c:	9300      	str	r3, [sp, #0]
   1334e:	e7c0      	b.n	132d2 <nvs_init+0x1e6>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   13350:	1a5b      	subs	r3, r3, r1
   13352:	4642      	mov	r2, r8
   13354:	4620      	mov	r0, r4
   13356:	f015 ff5a 	bl	2920e <nvs_flash_cmp_const>
		if (rc < 0) {
   1335a:	2800      	cmp	r0, #0
   1335c:	db8d      	blt.n	1327a <nvs_init+0x18e>
		if (!rc) {
   1335e:	d008      	beq.n	13372 <nvs_init+0x286>
		fs->data_wra += fs->flash_parameters->write_block_size;
   13360:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13362:	68a3      	ldr	r3, [r4, #8]
   13364:	6812      	ldr	r2, [r2, #0]
   13366:	4413      	add	r3, r2
   13368:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   1336a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1336e:	428b      	cmp	r3, r1
   13370:	d8ee      	bhi.n	13350 <nvs_init+0x264>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13372:	6861      	ldr	r1, [r4, #4]
   13374:	89a3      	ldrh	r3, [r4, #12]
   13376:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   1337a:	429a      	cmp	r2, r3
   1337c:	d1cd      	bne.n	1331a <nvs_init+0x22e>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1337e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 133d4 <nvs_init+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13382:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13384:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13388:	4293      	cmp	r3, r2
   1338a:	d0c6      	beq.n	1331a <nvs_init+0x22e>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1338c:	4620      	mov	r0, r4
   1338e:	f015 ff63 	bl	29258 <nvs_flash_erase_sector>
		if (rc) {
   13392:	2800      	cmp	r0, #0
   13394:	f47f af71 	bne.w	1327a <nvs_init+0x18e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13398:	6863      	ldr	r3, [r4, #4]
   1339a:	ea03 0308 	and.w	r3, r3, r8
   1339e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   133a0:	89a0      	ldrh	r0, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   133a2:	88a3      	ldrh	r3, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   133a4:	eba0 0646 	sub.w	r6, r0, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   133a8:	42b3      	cmp	r3, r6
   133aa:	d119      	bne.n	133e0 <nvs_init+0x2f4>
		rc = nvs_add_gc_done_ate(fs);
   133ac:	4620      	mov	r0, r4
   133ae:	f016 f826 	bl	293fe <nvs_add_gc_done_ate>
   133b2:	e762      	b.n	1327a <nvs_init+0x18e>
   133b4:	0002d948 	.word	0x0002d948
   133b8:	0002d9e8 	.word	0x0002d9e8
   133bc:	0002f154 	.word	0x0002f154
   133c0:	0002f170 	.word	0x0002f170
   133c4:	0002f192 	.word	0x0002f192
   133c8:	0002f1af 	.word	0x0002f1af
   133cc:	0002f1c7 	.word	0x0002f1c7
   133d0:	0002f1db 	.word	0x0002f1db
   133d4:	ffff0000 	.word	0xffff0000
   133d8:	0002f24d 	.word	0x0002f24d
		rc = -EDEADLK;
   133dc:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   133e0:	4638      	mov	r0, r7
   133e2:	f00f f90d 	bl	22600 <z_impl_k_mutex_unlock>
	if (rc) {
   133e6:	2d00      	cmp	r5, #0
   133e8:	f47f ae9b 	bne.w	13122 <nvs_init+0x36>
	fs->ready = true;
   133ec:	2301      	movs	r3, #1
   133ee:	7423      	strb	r3, [r4, #16]
   133f0:	4e27      	ldr	r6, [pc, #156]	; (13490 <nvs_init+0x3a4>)
   133f2:	4b28      	ldr	r3, [pc, #160]	; (13494 <nvs_init+0x3a8>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   133f4:	89a2      	ldrh	r2, [r4, #12]
   133f6:	89e1      	ldrh	r1, [r4, #14]
   133f8:	4827      	ldr	r0, [pc, #156]	; (13498 <nvs_init+0x3ac>)
   133fa:	1af6      	subs	r6, r6, r3
   133fc:	08f6      	lsrs	r6, r6, #3
   133fe:	01b6      	lsls	r6, r6, #6
   13400:	f046 0603 	orr.w	r6, r6, #3
   13404:	4633      	mov	r3, r6
   13406:	f015 fbf3 	bl	28bf0 <log_2>
	LOG_INF("alloc wra: %d, %x",
   1340a:	6861      	ldr	r1, [r4, #4]
   1340c:	4823      	ldr	r0, [pc, #140]	; (1349c <nvs_init+0x3b0>)
   1340e:	4633      	mov	r3, r6
   13410:	b28a      	uxth	r2, r1
   13412:	0c09      	lsrs	r1, r1, #16
   13414:	f015 fbec 	bl	28bf0 <log_2>
	LOG_INF("data wra: %d, %x",
   13418:	68a1      	ldr	r1, [r4, #8]
   1341a:	4821      	ldr	r0, [pc, #132]	; (134a0 <nvs_init+0x3b4>)
   1341c:	b28a      	uxth	r2, r1
   1341e:	4633      	mov	r3, r6
   13420:	0c09      	lsrs	r1, r1, #16
   13422:	f015 fbe5 	bl	28bf0 <log_2>
	return 0;
   13426:	e67c      	b.n	13122 <nvs_init+0x36>
   13428:	4b1a      	ldr	r3, [pc, #104]	; (13494 <nvs_init+0x3a8>)
   1342a:	4919      	ldr	r1, [pc, #100]	; (13490 <nvs_init+0x3a4>)
			LOG_INF("GC Done marker found");
   1342c:	481d      	ldr	r0, [pc, #116]	; (134a4 <nvs_init+0x3b8>)
   1342e:	1ac9      	subs	r1, r1, r3
   13430:	08c9      	lsrs	r1, r1, #3
   13432:	0189      	lsls	r1, r1, #6
   13434:	f041 0103 	orr.w	r1, r1, #3
   13438:	f015 fbb9 	bl	28bae <log_0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1343c:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   1343e:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13440:	0c1b      	lsrs	r3, r3, #16
   13442:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   13444:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13446:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   13448:	f015 ff6a 	bl	29320 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   1344c:	9900      	ldr	r1, [sp, #0]
   1344e:	4620      	mov	r0, r4
   13450:	f015 ff02 	bl	29258 <nvs_flash_erase_sector>
			goto end;
   13454:	e761      	b.n	1331a <nvs_init+0x22e>
		if (nvs_ate_valid(fs, &last_ate)) {
   13456:	a901      	add	r1, sp, #4
   13458:	4620      	mov	r0, r4
   1345a:	f015 ff47 	bl	292ec <nvs_ate_valid>
   1345e:	f8d4 a004 	ldr.w	sl, [r4, #4]
   13462:	b180      	cbz	r0, 13486 <nvs_init+0x39a>
			fs->data_wra = addr & ADDR_SECT_MASK;
   13464:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13466:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1346a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1346e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   13470:	ea03 0309 	and.w	r3, r3, r9
   13474:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13476:	4411      	add	r1, r2
   13478:	f015 ff2e 	bl	292d8 <nvs_al_size.isra.0>
   1347c:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1347e:	4553      	cmp	r3, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13480:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13482:	f43f af1a 	beq.w	132ba <nvs_init+0x1ce>
		fs->ate_wra -= ate_size;
   13486:	ebaa 0306 	sub.w	r3, sl, r6
   1348a:	6063      	str	r3, [r4, #4]
   1348c:	e6d2      	b.n	13234 <nvs_init+0x148>
   1348e:	bf00      	nop
   13490:	0002d9e8 	.word	0x0002d9e8
   13494:	0002d948 	.word	0x0002d948
   13498:	0002f1fe 	.word	0x0002f1fe
   1349c:	0002f215 	.word	0x0002f215
   134a0:	0002f227 	.word	0x0002f227
   134a4:	0002f238 	.word	0x0002f238

000134a8 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   134a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134ac:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   134ae:	7c03      	ldrb	r3, [r0, #16]
{
   134b0:	b089      	sub	sp, #36	; 0x24
   134b2:	4604      	mov	r4, r0
   134b4:	4689      	mov	r9, r1
   134b6:	4690      	mov	r8, r2
	if (!fs->ready) {
   134b8:	b97b      	cbnz	r3, 134da <nvs_write+0x32>
   134ba:	4b68      	ldr	r3, [pc, #416]	; (1365c <nvs_write+0x1b4>)
   134bc:	4968      	ldr	r1, [pc, #416]	; (13660 <nvs_write+0x1b8>)
		LOG_ERR("NVS not initialized");
   134be:	4869      	ldr	r0, [pc, #420]	; (13664 <nvs_write+0x1bc>)
   134c0:	1ac9      	subs	r1, r1, r3
   134c2:	08c9      	lsrs	r1, r1, #3
   134c4:	0189      	lsls	r1, r1, #6
   134c6:	f041 0101 	orr.w	r1, r1, #1
   134ca:	f015 fb70 	bl	28bae <log_0>
		return -EACCES;
   134ce:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   134d2:	4628      	mov	r0, r5
   134d4:	b009      	add	sp, #36	; 0x24
   134d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   134da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   134dc:	2108      	movs	r1, #8
   134de:	4618      	mov	r0, r3
   134e0:	f015 fefa 	bl	292d8 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   134e4:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   134e6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   134e8:	4618      	mov	r0, r3
   134ea:	f015 fef5 	bl	292d8 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   134ee:	89a3      	ldrh	r3, [r4, #12]
   134f0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   134f4:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   134f6:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   134f8:	f200 80ab 	bhi.w	13652 <nvs_write+0x1aa>
   134fc:	b116      	cbz	r6, 13504 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   134fe:	2a00      	cmp	r2, #0
   13500:	f000 80a7 	beq.w	13652 <nvs_write+0x1aa>
	wlk_addr = fs->ate_wra;
   13504:	6863      	ldr	r3, [r4, #4]
   13506:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13508:	aa04      	add	r2, sp, #16
   1350a:	a903      	add	r1, sp, #12
   1350c:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   1350e:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13512:	f015 ff89 	bl	29428 <nvs_prev_ate>
		if (rc) {
   13516:	4605      	mov	r5, r0
   13518:	2800      	cmp	r0, #0
   1351a:	d1da      	bne.n	134d2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1351c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13520:	454b      	cmp	r3, r9
   13522:	d005      	beq.n	13530 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
   13524:	6862      	ldr	r2, [r4, #4]
   13526:	9b03      	ldr	r3, [sp, #12]
   13528:	429a      	cmp	r2, r3
   1352a:	d1ed      	bne.n	13508 <nvs_write+0x60>
		if (len == 0) {
   1352c:	b9e6      	cbnz	r6, 13568 <nvs_write+0xc0>
   1352e:	e7d0      	b.n	134d2 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   13530:	a904      	add	r1, sp, #16
   13532:	4620      	mov	r0, r4
   13534:	f015 feda 	bl	292ec <nvs_ate_valid>
   13538:	2800      	cmp	r0, #0
   1353a:	d0f3      	beq.n	13524 <nvs_write+0x7c>
		if (len == 0) {
   1353c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13540:	b186      	cbz	r6, 13564 <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
   13542:	429e      	cmp	r6, r3
   13544:	d110      	bne.n	13568 <nvs_write+0xc0>
		rd_addr += wlk_ate.offset;
   13546:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   1354a:	ea4f 411b 	mov.w	r1, fp, lsr #16
   1354e:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   13550:	4401      	add	r1, r0
   13552:	4633      	mov	r3, r6
   13554:	4642      	mov	r2, r8
   13556:	4620      	mov	r0, r4
   13558:	f015 fe2f 	bl	291ba <nvs_flash_block_cmp>
			if (rc <= 0) {
   1355c:	2800      	cmp	r0, #0
   1355e:	dc03      	bgt.n	13568 <nvs_write+0xc0>
   13560:	4605      	mov	r5, r0
   13562:	e7b6      	b.n	134d2 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
   13564:	2b00      	cmp	r3, #0
   13566:	d0b4      	beq.n	134d2 <nvs_write+0x2a>
	if (data_size) {
   13568:	2f00      	cmp	r7, #0
   1356a:	d13f      	bne.n	135ec <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1356c:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   13570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13578:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   1357a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 13668 <nvs_write+0x1c0>
   1357e:	f00e ff3f 	bl	22400 <z_impl_k_mutex_lock>
	gc_count = 0;
   13582:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
   13584:	89e3      	ldrh	r3, [r4, #14]
   13586:	429a      	cmp	r2, r3
   13588:	d060      	beq.n	1364c <nvs_write+0x1a4>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1358a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1358e:	1878      	adds	r0, r7, r1
   13590:	4283      	cmp	r3, r0
   13592:	d32e      	bcc.n	135f2 <nvs_write+0x14a>
	entry.part = 0xff;
   13594:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   13596:	a806      	add	r0, sp, #24
	entry.id = id;
   13598:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1359c:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   135a0:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   135a4:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   135a8:	f015 fe8d 	bl	292c6 <nvs_ate_crc8_update>
	if (!len) {
   135ac:	b136      	cbz	r6, 135bc <nvs_write+0x114>
   135ae:	68a1      	ldr	r1, [r4, #8]
   135b0:	4633      	mov	r3, r6
   135b2:	4642      	mov	r2, r8
   135b4:	4620      	mov	r0, r4
   135b6:	f015 fedc 	bl	29372 <nvs_flash_al_wrt.part.0>
   135ba:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   135bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   135be:	4631      	mov	r1, r6
   135c0:	f015 fe8a 	bl	292d8 <nvs_al_size.isra.0>
   135c4:	68a3      	ldr	r3, [r4, #8]
   135c6:	4403      	add	r3, r0
   135c8:	60a3      	str	r3, [r4, #8]
	if (rc) {
   135ca:	2d00      	cmp	r5, #0
   135cc:	d144      	bne.n	13658 <nvs_write+0x1b0>
	rc = nvs_flash_ate_wrt(fs, &entry);
   135ce:	a906      	add	r1, sp, #24
   135d0:	4620      	mov	r0, r4
   135d2:	f015 ff03 	bl	293dc <nvs_flash_ate_wrt>
	if (rc) {
   135d6:	4605      	mov	r5, r0
   135d8:	2800      	cmp	r0, #0
   135da:	d13d      	bne.n	13658 <nvs_write+0x1b0>
	rc = len;
   135dc:	4633      	mov	r3, r6
   135de:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   135e0:	4650      	mov	r0, sl
   135e2:	f00f f80d 	bl	22600 <z_impl_k_mutex_unlock>
	return rc;
   135e6:	9b01      	ldr	r3, [sp, #4]
   135e8:	461d      	mov	r5, r3
   135ea:	e772      	b.n	134d2 <nvs_write+0x2a>
		required_space = data_size + ate_size;
   135ec:	4457      	add	r7, sl
   135ee:	b2bf      	uxth	r7, r7
   135f0:	e7bc      	b.n	1356c <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   135f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   135f4:	9201      	str	r2, [sp, #4]
   135f6:	2108      	movs	r1, #8
   135f8:	f015 fe6e 	bl	292d8 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   135fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13600:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   13604:	2100      	movs	r1, #0
   13606:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1360a:	1819      	adds	r1, r3, r0
   1360c:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   13610:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   13612:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   13616:	440b      	add	r3, r1
   13618:	1a18      	subs	r0, r3, r0
   1361a:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1361c:	a806      	add	r0, sp, #24
   1361e:	f015 fe52 	bl	292c6 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   13622:	a906      	add	r1, sp, #24
   13624:	4620      	mov	r0, r4
   13626:	f015 fed9 	bl	293dc <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1362a:	89e0      	ldrh	r0, [r4, #14]
   1362c:	1d21      	adds	r1, r4, #4
   1362e:	f015 fe77 	bl	29320 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13632:	6863      	ldr	r3, [r4, #4]
   13634:	ea03 030b 	and.w	r3, r3, fp
   13638:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1363a:	4620      	mov	r0, r4
   1363c:	f7ff fc86 	bl	12f4c <nvs_gc>
		if (rc) {
   13640:	4603      	mov	r3, r0
   13642:	2800      	cmp	r0, #0
   13644:	d1cb      	bne.n	135de <nvs_write+0x136>
		gc_count++;
   13646:	9a01      	ldr	r2, [sp, #4]
   13648:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
   1364a:	e79b      	b.n	13584 <nvs_write+0xdc>
			rc = -ENOSPC;
   1364c:	f06f 031b 	mvn.w	r3, #27
   13650:	e7c5      	b.n	135de <nvs_write+0x136>
		return -EINVAL;
   13652:	f06f 0515 	mvn.w	r5, #21
   13656:	e73c      	b.n	134d2 <nvs_write+0x2a>
			if (rc) {
   13658:	462b      	mov	r3, r5
   1365a:	e7c0      	b.n	135de <nvs_write+0x136>
   1365c:	0002d948 	.word	0x0002d948
   13660:	0002d9e8 	.word	0x0002d9e8
   13664:	0002f140 	.word	0x0002f140
   13668:	ffff0000 	.word	0xffff0000

0001366c <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   1366c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13670:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   13672:	7c03      	ldrb	r3, [r0, #16]
{
   13674:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   13678:	4604      	mov	r4, r0
   1367a:	460f      	mov	r7, r1
   1367c:	4690      	mov	r8, r2
	if (!fs->ready) {
   1367e:	b973      	cbnz	r3, 1369e <nvs_read_hist+0x32>
   13680:	4b2b      	ldr	r3, [pc, #172]	; (13730 <nvs_read_hist+0xc4>)
   13682:	492c      	ldr	r1, [pc, #176]	; (13734 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
   13684:	482c      	ldr	r0, [pc, #176]	; (13738 <nvs_read_hist+0xcc>)
   13686:	1ac9      	subs	r1, r1, r3
   13688:	08c9      	lsrs	r1, r1, #3
   1368a:	0189      	lsls	r1, r1, #6
   1368c:	f041 0101 	orr.w	r1, r1, #1
   13690:	f015 fa8d 	bl	28bae <log_0>
		return -EACCES;
   13694:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   13698:	b004      	add	sp, #16
   1369a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1369e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   136a0:	2108      	movs	r1, #8
   136a2:	f015 fe19 	bl	292d8 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   136a6:	89a3      	ldrh	r3, [r4, #12]
   136a8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   136ac:	429e      	cmp	r6, r3
   136ae:	d83c      	bhi.n	1372a <nvs_read_hist+0xbe>
	wlk_addr = fs->ate_wra;
   136b0:	6863      	ldr	r3, [r4, #4]
   136b2:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   136b4:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   136b8:	aa02      	add	r2, sp, #8
   136ba:	a901      	add	r1, sp, #4
   136bc:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   136be:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   136c0:	f015 feb2 	bl	29428 <nvs_prev_ate>
		if (rc) {
   136c4:	2800      	cmp	r0, #0
   136c6:	d1e7      	bne.n	13698 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   136c8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   136cc:	42bb      	cmp	r3, r7
   136ce:	d108      	bne.n	136e2 <nvs_read_hist+0x76>
   136d0:	a902      	add	r1, sp, #8
   136d2:	4620      	mov	r0, r4
   136d4:	f015 fe0a 	bl	292ec <nvs_ate_valid>
   136d8:	b118      	cbz	r0, 136e2 <nvs_read_hist+0x76>
			cnt_his++;
   136da:	f10a 0a01 	add.w	sl, sl, #1
   136de:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
   136e2:	6862      	ldr	r2, [r4, #4]
   136e4:	9b01      	ldr	r3, [sp, #4]
   136e6:	429a      	cmp	r2, r3
   136e8:	d018      	beq.n	1371c <nvs_read_hist+0xb0>
	while (cnt_his <= cnt) {
   136ea:	45d1      	cmp	r9, sl
   136ec:	d2e4      	bcs.n	136b8 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   136ee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   136f2:	b1bb      	cbz	r3, 13724 <nvs_read_hist+0xb8>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   136f4:	45d1      	cmp	r9, sl
   136f6:	d815      	bhi.n	13724 <nvs_read_hist+0xb8>
	rd_addr += wlk_ate.offset;
   136f8:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   136fc:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   136fe:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   13700:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   13704:	bf28      	it	cs
   13706:	4633      	movcs	r3, r6
   13708:	4642      	mov	r2, r8
   1370a:	4429      	add	r1, r5
   1370c:	4620      	mov	r0, r4
   1370e:	f015 fd46 	bl	2919e <nvs_flash_rd>
	if (rc) {
   13712:	2800      	cmp	r0, #0
   13714:	d1c0      	bne.n	13698 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   13716:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1371a:	e7bd      	b.n	13698 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1371c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13720:	42bb      	cmp	r3, r7
   13722:	d0e4      	beq.n	136ee <nvs_read_hist+0x82>
		return -ENOENT;
   13724:	f06f 0001 	mvn.w	r0, #1
   13728:	e7b6      	b.n	13698 <nvs_read_hist+0x2c>
		return -EINVAL;
   1372a:	f06f 0015 	mvn.w	r0, #21
   1372e:	e7b3      	b.n	13698 <nvs_read_hist+0x2c>
   13730:	0002d948 	.word	0x0002d948
   13734:	0002d9e8 	.word	0x0002d9e8
   13738:	0002f140 	.word	0x0002f140

0001373c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   1373c:	4b0c      	ldr	r3, [pc, #48]	; (13770 <flash_area_open+0x34>)
   1373e:	681b      	ldr	r3, [r3, #0]
{
   13740:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   13742:	b173      	cbz	r3, 13762 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   13744:	4a0b      	ldr	r2, [pc, #44]	; (13774 <flash_area_open+0x38>)
   13746:	6815      	ldr	r5, [r2, #0]
   13748:	2200      	movs	r2, #0
   1374a:	42aa      	cmp	r2, r5
   1374c:	db02      	blt.n	13754 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   1374e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   13752:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   13754:	461c      	mov	r4, r3
   13756:	f813 6b10 	ldrb.w	r6, [r3], #16
   1375a:	4286      	cmp	r6, r0
   1375c:	d004      	beq.n	13768 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   1375e:	3201      	adds	r2, #1
   13760:	e7f3      	b.n	1374a <flash_area_open+0xe>
		return -EACCES;
   13762:	f06f 000c 	mvn.w	r0, #12
   13766:	e7f4      	b.n	13752 <flash_area_open+0x16>
	*fap = area;
   13768:	600c      	str	r4, [r1, #0]
	return 0;
   1376a:	2000      	movs	r0, #0
   1376c:	e7f1      	b.n	13752 <flash_area_open+0x16>
   1376e:	bf00      	nop
   13770:	20000480 	.word	0x20000480
   13774:	0002dca0 	.word	0x0002dca0

00013778 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13778:	b570      	push	{r4, r5, r6, lr}
   1377a:	b088      	sub	sp, #32
   1377c:	4605      	mov	r5, r0
   1377e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   13780:	b2c0      	uxtb	r0, r0
   13782:	4669      	mov	r1, sp
{
   13784:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   13786:	f7ff ffd9 	bl	1373c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   1378a:	2800      	cmp	r0, #0
   1378c:	db1f      	blt.n	137ce <flash_area_get_sectors+0x56>
   1378e:	9b00      	ldr	r3, [sp, #0]
   13790:	b1eb      	cbz	r3, 137ce <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   13792:	685a      	ldr	r2, [r3, #4]
   13794:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   13796:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   13798:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   1379a:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   1379c:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   1379e:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   137a2:	2200      	movs	r2, #0
	cb_data->status = 0;
   137a4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   137a8:	9205      	str	r2, [sp, #20]
   137aa:	f00e f8ed 	bl	21988 <z_impl_device_get_binding>
   137ae:	4605      	mov	r5, r0
	flash_area_close(fa);
   137b0:	9800      	ldr	r0, [sp, #0]
   137b2:	f015 fe90 	bl	294d6 <flash_area_close>
	if (flash_dev == NULL) {
   137b6:	b16d      	cbz	r5, 137d4 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   137b8:	4628      	mov	r0, r5
   137ba:	4908      	ldr	r1, [pc, #32]	; (137dc <flash_area_get_sectors+0x64>)
   137bc:	aa01      	add	r2, sp, #4
   137be:	f019 f9f7 	bl	2cbb0 <flash_page_foreach>
	if (cb_data->status == 0) {
   137c2:	9807      	ldr	r0, [sp, #28]
   137c4:	b908      	cbnz	r0, 137ca <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   137c6:	9b05      	ldr	r3, [sp, #20]
   137c8:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   137ca:	b008      	add	sp, #32
   137cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   137ce:	f06f 0015 	mvn.w	r0, #21
   137d2:	e7fa      	b.n	137ca <flash_area_get_sectors+0x52>
		return -ENODEV;
   137d4:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   137d8:	e7f7      	b.n	137ca <flash_area_get_sectors+0x52>
   137da:	bf00      	nop
   137dc:	000294d9 	.word	0x000294d9

000137e0 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   137e0:	4b10      	ldr	r3, [pc, #64]	; (13824 <settings_save_one+0x44>)
{
   137e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   137e6:	681c      	ldr	r4, [r3, #0]
{
   137e8:	4605      	mov	r5, r0
   137ea:	460e      	mov	r6, r1
   137ec:	4617      	mov	r7, r2
	if (!cs) {
   137ee:	b1ac      	cbz	r4, 1381c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   137f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   137f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   137f8:	480b      	ldr	r0, [pc, #44]	; (13828 <settings_save_one+0x48>)
   137fa:	f00e fe01 	bl	22400 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   137fe:	6863      	ldr	r3, [r4, #4]
   13800:	4632      	mov	r2, r6
   13802:	f8d3 8008 	ldr.w	r8, [r3, #8]
   13806:	4629      	mov	r1, r5
   13808:	463b      	mov	r3, r7
   1380a:	4620      	mov	r0, r4
   1380c:	47c0      	blx	r8
   1380e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13810:	4805      	ldr	r0, [pc, #20]	; (13828 <settings_save_one+0x48>)
   13812:	f00e fef5 	bl	22600 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   13816:	4620      	mov	r0, r4
   13818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   1381c:	f06f 0401 	mvn.w	r4, #1
   13820:	e7f9      	b.n	13816 <settings_save_one+0x36>
   13822:	bf00      	nop
   13824:	20002414 	.word	0x20002414
   13828:	2000089c 	.word	0x2000089c

0001382c <settings_src_register>:
	parent->next = child;
   1382c:	2300      	movs	r3, #0
   1382e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   13830:	4b04      	ldr	r3, [pc, #16]	; (13844 <settings_src_register+0x18>)
   13832:	685a      	ldr	r2, [r3, #4]
   13834:	b912      	cbnz	r2, 1383c <settings_src_register+0x10>
	list->head = node;
   13836:	e9c3 0000 	strd	r0, r0, [r3]
}
   1383a:	4770      	bx	lr
	parent->next = child;
   1383c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1383e:	6058      	str	r0, [r3, #4]
}
   13840:	4770      	bx	lr
   13842:	bf00      	nop
   13844:	2000240c 	.word	0x2000240c

00013848 <settings_dst_register>:
	settings_save_dst = cs;
   13848:	4b01      	ldr	r3, [pc, #4]	; (13850 <settings_dst_register+0x8>)
   1384a:	6018      	str	r0, [r3, #0]
}
   1384c:	4770      	bx	lr
   1384e:	bf00      	nop
   13850:	20002414 	.word	0x20002414

00013854 <settings_load_subtree>:
{
   13854:	b530      	push	{r4, r5, lr}
   13856:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   13858:	2300      	movs	r3, #0
{
   1385a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   1385c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13860:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13866:	480e      	ldr	r0, [pc, #56]	; (138a0 <settings_load_subtree+0x4c>)
   13868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1386c:	f00e fdc8 	bl	22400 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13870:	4b0c      	ldr	r3, [pc, #48]	; (138a4 <settings_load_subtree+0x50>)
   13872:	681c      	ldr	r4, [r3, #0]
   13874:	2c00      	cmp	r4, #0
   13876:	bf38      	it	cc
   13878:	2400      	movcc	r4, #0
   1387a:	b13c      	cbz	r4, 1388c <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   1387c:	6863      	ldr	r3, [r4, #4]
   1387e:	4620      	mov	r0, r4
   13880:	681b      	ldr	r3, [r3, #0]
   13882:	a901      	add	r1, sp, #4
   13884:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13886:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13888:	2c00      	cmp	r4, #0
   1388a:	d1f6      	bne.n	1387a <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   1388c:	4628      	mov	r0, r5
   1388e:	f000 f8f1 	bl	13a74 <settings_commit_subtree>
   13892:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13894:	4802      	ldr	r0, [pc, #8]	; (138a0 <settings_load_subtree+0x4c>)
   13896:	f00e feb3 	bl	22600 <z_impl_k_mutex_unlock>
}
   1389a:	4620      	mov	r0, r4
   1389c:	b005      	add	sp, #20
   1389e:	bd30      	pop	{r4, r5, pc}
   138a0:	2000089c 	.word	0x2000089c
   138a4:	2000240c 	.word	0x2000240c

000138a8 <settings_load_subtree_direct>:
{
   138a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   138aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
   138ae:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   138b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138b4:	480c      	ldr	r0, [pc, #48]	; (138e8 <settings_load_subtree_direct+0x40>)
   138b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   138ba:	f00e fda1 	bl	22400 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   138be:	4b0b      	ldr	r3, [pc, #44]	; (138ec <settings_load_subtree_direct+0x44>)
   138c0:	681c      	ldr	r4, [r3, #0]
   138c2:	2c00      	cmp	r4, #0
   138c4:	bf38      	it	cc
   138c6:	2400      	movcc	r4, #0
   138c8:	b13c      	cbz	r4, 138da <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
   138ca:	6863      	ldr	r3, [r4, #4]
   138cc:	4620      	mov	r0, r4
   138ce:	681b      	ldr	r3, [r3, #0]
   138d0:	a901      	add	r1, sp, #4
   138d2:	4798      	blx	r3
   138d4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   138d6:	2c00      	cmp	r4, #0
   138d8:	d1f6      	bne.n	138c8 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
   138da:	4803      	ldr	r0, [pc, #12]	; (138e8 <settings_load_subtree_direct+0x40>)
   138dc:	f00e fe90 	bl	22600 <z_impl_k_mutex_unlock>
}
   138e0:	2000      	movs	r0, #0
   138e2:	b004      	add	sp, #16
   138e4:	bd10      	pop	{r4, pc}
   138e6:	bf00      	nop
   138e8:	2000089c 	.word	0x2000089c
   138ec:	2000240c 	.word	0x2000240c

000138f0 <settings_store_init>:
	list->head = NULL;
   138f0:	4b02      	ldr	r3, [pc, #8]	; (138fc <settings_store_init+0xc>)
   138f2:	2200      	movs	r2, #0
	list->tail = NULL;
   138f4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   138f8:	4770      	bx	lr
   138fa:	bf00      	nop
   138fc:	2000240c 	.word	0x2000240c

00013900 <settings_init>:
	list->head = NULL;
   13900:	4b02      	ldr	r3, [pc, #8]	; (1390c <settings_init+0xc>)
   13902:	2200      	movs	r2, #0
	list->tail = NULL;
   13904:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   13908:	f7ff bff2 	b.w	138f0 <settings_store_init>
   1390c:	20002418 	.word	0x20002418

00013910 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   13910:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13914:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   13916:	460e      	mov	r6, r1
   13918:	b109      	cbz	r1, 1391e <settings_parse_and_lookup+0xe>
		*next = NULL;
   1391a:	2300      	movs	r3, #0
   1391c:	600b      	str	r3, [r1, #0]
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1391e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 139d0 <settings_parse_and_lookup+0xc0>
   13922:	4c26      	ldr	r4, [pc, #152]	; (139bc <settings_parse_and_lookup+0xac>)
   13924:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 139d4 <settings_parse_and_lookup+0xc4>
   13928:	2500      	movs	r5, #0
   1392a:	46c2      	mov	sl, r8
   1392c:	4544      	cmp	r4, r8
   1392e:	d90c      	bls.n	1394a <settings_parse_and_lookup+0x3a>
   13930:	4923      	ldr	r1, [pc, #140]	; (139c0 <settings_parse_and_lookup+0xb0>)
   13932:	4824      	ldr	r0, [pc, #144]	; (139c4 <settings_parse_and_lookup+0xb4>)
   13934:	2394      	movs	r3, #148	; 0x94
   13936:	464a      	mov	r2, r9
   13938:	f014 ff1a 	bl	28770 <printk>
   1393c:	4822      	ldr	r0, [pc, #136]	; (139c8 <settings_parse_and_lookup+0xb8>)
   1393e:	f014 ff17 	bl	28770 <printk>
   13942:	2194      	movs	r1, #148	; 0x94
   13944:	4648      	mov	r0, r9
   13946:	f015 f904 	bl	28b52 <assert_post_action>
   1394a:	4554      	cmp	r4, sl
   1394c:	d308      	bcc.n	13960 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1394e:	4b1f      	ldr	r3, [pc, #124]	; (139cc <settings_parse_and_lookup+0xbc>)
   13950:	681c      	ldr	r4, [r3, #0]
   13952:	b10c      	cbz	r4, 13958 <settings_parse_and_lookup+0x48>
   13954:	3c14      	subs	r4, #20
   13956:	b9c4      	cbnz	r4, 1398a <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13958:	4628      	mov	r0, r5
   1395a:	b002      	add	sp, #8
   1395c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13960:	6821      	ldr	r1, [r4, #0]
   13962:	aa01      	add	r2, sp, #4
   13964:	4638      	mov	r0, r7
   13966:	f015 fddc 	bl	29522 <settings_name_steq>
   1396a:	b160      	cbz	r0, 13986 <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   1396c:	b925      	cbnz	r5, 13978 <settings_parse_and_lookup+0x68>
			if (next) {
   1396e:	b10e      	cbz	r6, 13974 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   13970:	9b01      	ldr	r3, [sp, #4]
   13972:	6033      	str	r3, [r6, #0]
   13974:	4625      	mov	r5, r4
   13976:	e006      	b.n	13986 <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13978:	6829      	ldr	r1, [r5, #0]
   1397a:	6820      	ldr	r0, [r4, #0]
   1397c:	2200      	movs	r2, #0
   1397e:	f015 fdd0 	bl	29522 <settings_name_steq>
   13982:	2800      	cmp	r0, #0
   13984:	d1f3      	bne.n	1396e <settings_parse_and_lookup+0x5e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13986:	3414      	adds	r4, #20
   13988:	e7d0      	b.n	1392c <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1398a:	6821      	ldr	r1, [r4, #0]
   1398c:	aa01      	add	r2, sp, #4
   1398e:	4638      	mov	r0, r7
   13990:	f015 fdc7 	bl	29522 <settings_name_steq>
   13994:	b160      	cbz	r0, 139b0 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   13996:	b925      	cbnz	r5, 139a2 <settings_parse_and_lookup+0x92>
			if (next) {
   13998:	b10e      	cbz	r6, 1399e <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   1399a:	9b01      	ldr	r3, [sp, #4]
   1399c:	6033      	str	r3, [r6, #0]
   1399e:	4625      	mov	r5, r4
   139a0:	e006      	b.n	139b0 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   139a2:	6829      	ldr	r1, [r5, #0]
   139a4:	6820      	ldr	r0, [r4, #0]
   139a6:	2200      	movs	r2, #0
   139a8:	f015 fdbb 	bl	29522 <settings_name_steq>
   139ac:	2800      	cmp	r0, #0
   139ae:	d1f3      	bne.n	13998 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   139b0:	f114 0f14 	cmn.w	r4, #20
   139b4:	d0d0      	beq.n	13958 <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   139b6:	6964      	ldr	r4, [r4, #20]
   139b8:	e7cb      	b.n	13952 <settings_parse_and_lookup+0x42>
   139ba:	bf00      	nop
   139bc:	0002d8d0 	.word	0x0002d8d0
   139c0:	0002f2c0 	.word	0x0002f2c0
   139c4:	0002e915 	.word	0x0002e915
   139c8:	0002f2e8 	.word	0x0002f2e8
   139cc:	20002418 	.word	0x20002418
   139d0:	0002d948 	.word	0x0002d948
   139d4:	0002f28e 	.word	0x0002f28e

000139d8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   139d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   139dc:	b085      	sub	sp, #20
   139de:	4605      	mov	r5, r0
   139e0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
   139e4:	9003      	str	r0, [sp, #12]
{
   139e6:	460c      	mov	r4, r1
   139e8:	4616      	mov	r6, r2
   139ea:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   139ec:	f1b8 0f00 	cmp.w	r8, #0
   139f0:	d018      	beq.n	13a24 <settings_call_set_handler+0x4c>
   139f2:	f8d8 1000 	ldr.w	r1, [r8]
   139f6:	b181      	cbz	r1, 13a1a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   139f8:	aa03      	add	r2, sp, #12
   139fa:	f015 fd92 	bl	29522 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   139fe:	b960      	cbnz	r0, 13a1a <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   13a00:	2000      	movs	r0, #0
   13a02:	e007      	b.n	13a14 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13a04:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13a08:	9300      	str	r3, [sp, #0]
   13a0a:	9803      	ldr	r0, [sp, #12]
   13a0c:	463b      	mov	r3, r7
   13a0e:	4632      	mov	r2, r6
   13a10:	4621      	mov	r1, r4
   13a12:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   13a14:	b005      	add	sp, #20
   13a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   13a1a:	f8d8 9004 	ldr.w	r9, [r8, #4]
   13a1e:	f1b9 0f00 	cmp.w	r9, #0
   13a22:	d1ef      	bne.n	13a04 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   13a24:	a903      	add	r1, sp, #12
   13a26:	4628      	mov	r0, r5
   13a28:	f7ff ff72 	bl	13910 <settings_parse_and_lookup>
		if (!ch) {
   13a2c:	2800      	cmp	r0, #0
   13a2e:	d0e7      	beq.n	13a00 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   13a30:	f8d0 8008 	ldr.w	r8, [r0, #8]
   13a34:	9803      	ldr	r0, [sp, #12]
   13a36:	4632      	mov	r2, r6
   13a38:	463b      	mov	r3, r7
   13a3a:	4621      	mov	r1, r4
   13a3c:	47c0      	blx	r8
		if (rc != 0) {
   13a3e:	4606      	mov	r6, r0
   13a40:	2800      	cmp	r0, #0
   13a42:	d0dd      	beq.n	13a00 <settings_call_set_handler+0x28>
   13a44:	4b08      	ldr	r3, [pc, #32]	; (13a68 <settings_call_set_handler+0x90>)
   13a46:	4c09      	ldr	r4, [pc, #36]	; (13a6c <settings_call_set_handler+0x94>)
   13a48:	4628      	mov	r0, r5
   13a4a:	1ae4      	subs	r4, r4, r3
   13a4c:	08e4      	lsrs	r4, r4, #3
   13a4e:	f7fe fca7 	bl	123a0 <z_log_strdup>
			LOG_ERR("set-value failure. key: %s error(%d)",
   13a52:	01a4      	lsls	r4, r4, #6
   13a54:	f044 0401 	orr.w	r4, r4, #1
   13a58:	4601      	mov	r1, r0
   13a5a:	4623      	mov	r3, r4
   13a5c:	4804      	ldr	r0, [pc, #16]	; (13a70 <settings_call_set_handler+0x98>)
   13a5e:	4632      	mov	r2, r6
   13a60:	f015 f8c6 	bl	28bf0 <log_2>
   13a64:	e7cc      	b.n	13a00 <settings_call_set_handler+0x28>
   13a66:	bf00      	nop
   13a68:	0002d948 	.word	0x0002d948
   13a6c:	0002da40 	.word	0x0002da40
   13a70:	0002f307 	.word	0x0002f307

00013a74 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   13a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13a78:	4f23      	ldr	r7, [pc, #140]	; (13b08 <settings_commit_subtree+0x94>)
   13a7a:	4c24      	ldr	r4, [pc, #144]	; (13b0c <settings_commit_subtree+0x98>)
   13a7c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 13b20 <settings_commit_subtree+0xac>
{
   13a80:	4606      	mov	r6, r0
	rc = 0;
   13a82:	2500      	movs	r5, #0
   13a84:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13a86:	42bc      	cmp	r4, r7
   13a88:	d90c      	bls.n	13aa4 <settings_commit_subtree+0x30>
   13a8a:	4921      	ldr	r1, [pc, #132]	; (13b10 <settings_commit_subtree+0x9c>)
   13a8c:	4821      	ldr	r0, [pc, #132]	; (13b14 <settings_commit_subtree+0xa0>)
   13a8e:	23f4      	movs	r3, #244	; 0xf4
   13a90:	4642      	mov	r2, r8
   13a92:	f014 fe6d 	bl	28770 <printk>
   13a96:	4820      	ldr	r0, [pc, #128]	; (13b18 <settings_commit_subtree+0xa4>)
   13a98:	f014 fe6a 	bl	28770 <printk>
   13a9c:	21f4      	movs	r1, #244	; 0xf4
   13a9e:	4640      	mov	r0, r8
   13aa0:	f015 f857 	bl	28b52 <assert_post_action>
   13aa4:	454c      	cmp	r4, r9
   13aa6:	d307      	bcc.n	13ab8 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13aa8:	4b1c      	ldr	r3, [pc, #112]	; (13b1c <settings_commit_subtree+0xa8>)
   13aaa:	681c      	ldr	r4, [r3, #0]
   13aac:	b10c      	cbz	r4, 13ab2 <settings_commit_subtree+0x3e>
   13aae:	3c14      	subs	r4, #20
   13ab0:	b9a4      	cbnz	r4, 13adc <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   13ab2:	4628      	mov	r0, r5
   13ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13ab8:	b91e      	cbnz	r6, 13ac2 <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   13aba:	68e3      	ldr	r3, [r4, #12]
   13abc:	b94b      	cbnz	r3, 13ad2 <settings_commit_subtree+0x5e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13abe:	3414      	adds	r4, #20
   13ac0:	e7e1      	b.n	13a86 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13ac2:	6820      	ldr	r0, [r4, #0]
   13ac4:	2200      	movs	r2, #0
   13ac6:	4631      	mov	r1, r6
   13ac8:	f015 fd2b 	bl	29522 <settings_name_steq>
   13acc:	2800      	cmp	r0, #0
   13ace:	d1f4      	bne.n	13aba <settings_commit_subtree+0x46>
   13ad0:	e7f5      	b.n	13abe <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   13ad2:	4798      	blx	r3
				rc = rc2;
   13ad4:	2d00      	cmp	r5, #0
   13ad6:	bf08      	it	eq
   13ad8:	4605      	moveq	r5, r0
   13ada:	e7f0      	b.n	13abe <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13adc:	b936      	cbnz	r6, 13aec <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   13ade:	68e3      	ldr	r3, [r4, #12]
   13ae0:	b963      	cbnz	r3, 13afc <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13ae2:	f114 0f14 	cmn.w	r4, #20
   13ae6:	d0e4      	beq.n	13ab2 <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13ae8:	6964      	ldr	r4, [r4, #20]
   13aea:	e7df      	b.n	13aac <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13aec:	6820      	ldr	r0, [r4, #0]
   13aee:	2200      	movs	r2, #0
   13af0:	4631      	mov	r1, r6
   13af2:	f015 fd16 	bl	29522 <settings_name_steq>
   13af6:	2800      	cmp	r0, #0
   13af8:	d1f1      	bne.n	13ade <settings_commit_subtree+0x6a>
   13afa:	e7f2      	b.n	13ae2 <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   13afc:	4798      	blx	r3
				rc = rc2;
   13afe:	2d00      	cmp	r5, #0
   13b00:	bf08      	it	eq
   13b02:	4605      	moveq	r5, r0
   13b04:	e7ed      	b.n	13ae2 <settings_commit_subtree+0x6e>
   13b06:	bf00      	nop
   13b08:	0002d948 	.word	0x0002d948
   13b0c:	0002d8d0 	.word	0x0002d8d0
   13b10:	0002f2c0 	.word	0x0002f2c0
   13b14:	0002e915 	.word	0x0002e915
   13b18:	0002f2e8 	.word	0x0002f2e8
   13b1c:	20002418 	.word	0x20002418
   13b20:	0002f28e 	.word	0x0002f28e

00013b24 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13b24:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   13b26:	4c06      	ldr	r4, [pc, #24]	; (13b40 <settings_subsys_init+0x1c>)
   13b28:	7823      	ldrb	r3, [r4, #0]
   13b2a:	b93b      	cbnz	r3, 13b3c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   13b2c:	f7ff fee8 	bl	13900 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   13b30:	f000 f864 	bl	13bfc <settings_backend_init>

	if (!err) {
   13b34:	b908      	cbnz	r0, 13b3a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   13b36:	2301      	movs	r3, #1
   13b38:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   13b3a:	bd10      	pop	{r4, pc}
		return 0;
   13b3c:	2000      	movs	r0, #0
   13b3e:	e7fc      	b.n	13b3a <settings_subsys_init+0x16>
   13b40:	20003761 	.word	0x20003761

00013b44 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13b48:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   13b4a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 13bf8 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   13b4e:	3401      	adds	r4, #1
{
   13b50:	b098      	sub	sp, #96	; 0x60
   13b52:	4680      	mov	r8, r0
   13b54:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   13b56:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13b58:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   13b5c:	1e65      	subs	r5, r4, #1
   13b5e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   13b60:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   13b64:	d045      	beq.n	13bf2 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13b66:	234a      	movs	r3, #74	; 0x4a
   13b68:	aa05      	add	r2, sp, #20
   13b6a:	4629      	mov	r1, r5
   13b6c:	4630      	mov	r0, r6
   13b6e:	f015 fcab 	bl	294c8 <nvs_read>
   13b72:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   13b76:	343f      	adds	r4, #63	; 0x3f
   13b78:	b2a4      	uxth	r4, r4
   13b7a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13b7c:	4621      	mov	r1, r4
   13b7e:	2301      	movs	r3, #1
   13b80:	f10d 020b 	add.w	r2, sp, #11
   13b84:	4630      	mov	r0, r6
   13b86:	f015 fc9f 	bl	294c8 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13b8a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13b8c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13b8e:	dc03      	bgt.n	13b98 <settings_nvs_load+0x54>
   13b90:	2800      	cmp	r0, #0
   13b92:	dc03      	bgt.n	13b9c <settings_nvs_load+0x58>
{
   13b94:	462c      	mov	r4, r5
   13b96:	e7e1      	b.n	13b5c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   13b98:	2800      	cmp	r0, #0
   13b9a:	dc16      	bgt.n	13bca <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   13b9c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   13ba0:	42ab      	cmp	r3, r5
   13ba2:	d109      	bne.n	13bb8 <settings_nvs_load+0x74>
				cf->last_name_id--;
   13ba4:	4642      	mov	r2, r8
   13ba6:	1e6b      	subs	r3, r5, #1
   13ba8:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   13bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13bb0:	2302      	movs	r3, #2
   13bb2:	4630      	mov	r0, r6
   13bb4:	f7ff fc78 	bl	134a8 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13bb8:	4629      	mov	r1, r5
   13bba:	4630      	mov	r0, r6
   13bbc:	f015 fc80 	bl	294c0 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   13bc0:	4621      	mov	r1, r4
   13bc2:	4630      	mov	r0, r6
   13bc4:	f015 fc7c 	bl	294c0 <nvs_delete>
			continue;
   13bc8:	e7e4      	b.n	13b94 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13bca:	ab18      	add	r3, sp, #96	; 0x60
   13bcc:	441f      	add	r7, r3
   13bce:	2300      	movs	r3, #0
   13bd0:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   13bd4:	4652      	mov	r2, sl
   13bd6:	f8cd 9000 	str.w	r9, [sp]
   13bda:	ab03      	add	r3, sp, #12
   13bdc:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   13bde:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   13be0:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   13be4:	f7ff fef8 	bl	139d8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   13be8:	2800      	cmp	r0, #0
   13bea:	d0d3      	beq.n	13b94 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   13bec:	b018      	add	sp, #96	; 0x60
   13bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bf2:	2000      	movs	r0, #0
	return ret;
   13bf4:	e7fa      	b.n	13bec <settings_nvs_load+0xa8>
   13bf6:	bf00      	nop
   13bf8:	00029595 	.word	0x00029595

00013bfc <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   13bfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   13bfe:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   13c00:	4669      	mov	r1, sp
   13c02:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   13c04:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   13c06:	f7ff fd99 	bl	1373c <flash_area_open>
	if (rc) {
   13c0a:	4604      	mov	r4, r0
   13c0c:	2800      	cmp	r0, #0
   13c0e:	d136      	bne.n	13c7e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   13c10:	aa02      	add	r2, sp, #8
   13c12:	a901      	add	r1, sp, #4
   13c14:	2004      	movs	r0, #4
   13c16:	f7ff fdaf 	bl	13778 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   13c1a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   13c1e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   13c20:	d02d      	beq.n	13c7e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   13c22:	b138      	cbz	r0, 13c34 <settings_backend_init+0x38>
   13c24:	340c      	adds	r4, #12
   13c26:	d005      	beq.n	13c34 <settings_backend_init+0x38>
		k_panic();
   13c28:	4040      	eors	r0, r0
   13c2a:	f380 8811 	msr	BASEPRI, r0
   13c2e:	f04f 0004 	mov.w	r0, #4
   13c32:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   13c34:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   13c36:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   13c3a:	d223      	bcs.n	13c84 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   13c3c:	9a00      	ldr	r2, [sp, #0]
   13c3e:	2300      	movs	r3, #0
   13c40:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   13c42:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   13c44:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   13c46:	4285      	cmp	r5, r0
   13c48:	b29c      	uxth	r4, r3
   13c4a:	d303      	bcc.n	13c54 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   13c4c:	3301      	adds	r3, #1
   13c4e:	2b08      	cmp	r3, #8
   13c50:	d1f8      	bne.n	13c44 <settings_backend_init+0x48>
   13c52:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13c54:	4d0d      	ldr	r5, [pc, #52]	; (13c8c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   13c56:	6853      	ldr	r3, [r2, #4]
   13c58:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   13c5a:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   13c5c:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   13c5e:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13c60:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   13c62:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   13c64:	f015 fd2d 	bl	296c2 <settings_nvs_backend_init>
	if (rc) {
   13c68:	4604      	mov	r4, r0
   13c6a:	b940      	cbnz	r0, 13c7e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13c6c:	4e08      	ldr	r6, [pc, #32]	; (13c90 <settings_backend_init+0x94>)
   13c6e:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   13c70:	4628      	mov	r0, r5
   13c72:	f7ff fddb 	bl	1382c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   13c76:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13c78:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   13c7a:	f7ff fde5 	bl	13848 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   13c7e:	4620      	mov	r0, r4
   13c80:	b004      	add	sp, #16
   13c82:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   13c84:	f06f 0420 	mvn.w	r4, #32
   13c88:	e7f9      	b.n	13c7e <settings_backend_init+0x82>
   13c8a:	bf00      	nop
   13c8c:	20002420 	.word	0x20002420
   13c90:	20000484 	.word	0x20000484

00013c94 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c98:	4605      	mov	r5, r0
	__asm__ volatile(
   13c9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   13c9e:	f3ef 8611 	mrs	r6, BASEPRI
   13ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   13ca6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13caa:	4823      	ldr	r0, [pc, #140]	; (13d38 <pm_state_notify+0xa4>)
   13cac:	f00e fb56 	bl	2235c <z_spin_lock_valid>
   13cb0:	b968      	cbnz	r0, 13cce <pm_state_notify+0x3a>
   13cb2:	4a22      	ldr	r2, [pc, #136]	; (13d3c <pm_state_notify+0xa8>)
   13cb4:	4922      	ldr	r1, [pc, #136]	; (13d40 <pm_state_notify+0xac>)
   13cb6:	4823      	ldr	r0, [pc, #140]	; (13d44 <pm_state_notify+0xb0>)
   13cb8:	2381      	movs	r3, #129	; 0x81
   13cba:	f014 fd59 	bl	28770 <printk>
   13cbe:	491e      	ldr	r1, [pc, #120]	; (13d38 <pm_state_notify+0xa4>)
   13cc0:	4821      	ldr	r0, [pc, #132]	; (13d48 <pm_state_notify+0xb4>)
   13cc2:	f014 fd55 	bl	28770 <printk>
   13cc6:	481d      	ldr	r0, [pc, #116]	; (13d3c <pm_state_notify+0xa8>)
   13cc8:	2181      	movs	r1, #129	; 0x81
   13cca:	f014 ff42 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   13cce:	481a      	ldr	r0, [pc, #104]	; (13d38 <pm_state_notify+0xa4>)
   13cd0:	f00e fb62 	bl	22398 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13cd4:	4b1d      	ldr	r3, [pc, #116]	; (13d4c <pm_state_notify+0xb8>)
   13cd6:	681c      	ldr	r4, [r3, #0]
   13cd8:	2c00      	cmp	r4, #0
   13cda:	bf38      	it	cc
   13cdc:	2400      	movcc	r4, #0
   13cde:	b19c      	cbz	r4, 13d08 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   13ce0:	4f1b      	ldr	r7, [pc, #108]	; (13d50 <pm_state_notify+0xbc>)
   13ce2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 13d5c <pm_state_notify+0xc8>
   13ce6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   13cea:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   13cee:	2d00      	cmp	r5, #0
   13cf0:	bf08      	it	eq
   13cf2:	4613      	moveq	r3, r2
		if (callback) {
   13cf4:	b12b      	cbz	r3, 13d02 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
   13cf6:	f898 2014 	ldrb.w	r2, [r8, #20]
   13cfa:	fb09 f202 	mul.w	r2, r9, r2
   13cfe:	5cb8      	ldrb	r0, [r7, r2]
   13d00:	4798      	blx	r3
   13d02:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13d04:	2c00      	cmp	r4, #0
   13d06:	d1f0      	bne.n	13cea <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13d08:	480b      	ldr	r0, [pc, #44]	; (13d38 <pm_state_notify+0xa4>)
   13d0a:	f00e fb35 	bl	22378 <z_spin_unlock_valid>
   13d0e:	b968      	cbnz	r0, 13d2c <pm_state_notify+0x98>
   13d10:	4a0a      	ldr	r2, [pc, #40]	; (13d3c <pm_state_notify+0xa8>)
   13d12:	4910      	ldr	r1, [pc, #64]	; (13d54 <pm_state_notify+0xc0>)
   13d14:	480b      	ldr	r0, [pc, #44]	; (13d44 <pm_state_notify+0xb0>)
   13d16:	23ac      	movs	r3, #172	; 0xac
   13d18:	f014 fd2a 	bl	28770 <printk>
   13d1c:	4906      	ldr	r1, [pc, #24]	; (13d38 <pm_state_notify+0xa4>)
   13d1e:	480e      	ldr	r0, [pc, #56]	; (13d58 <pm_state_notify+0xc4>)
   13d20:	f014 fd26 	bl	28770 <printk>
   13d24:	4805      	ldr	r0, [pc, #20]	; (13d3c <pm_state_notify+0xa8>)
   13d26:	21ac      	movs	r1, #172	; 0xac
   13d28:	f014 ff13 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   13d2c:	f386 8811 	msr	BASEPRI, r6
   13d30:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13d38:	20002460 	.word	0x20002460
   13d3c:	0002ebfd 	.word	0x0002ebfd
   13d40:	0002ec4f 	.word	0x0002ec4f
   13d44:	0002e915 	.word	0x0002e915
   13d48:	0002ec64 	.word	0x0002ec64
   13d4c:	20002464 	.word	0x20002464
   13d50:	20002470 	.word	0x20002470
   13d54:	0002ec23 	.word	0x0002ec23
   13d58:	0002ec3a 	.word	0x0002ec3a
   13d5c:	20002cfc 	.word	0x20002cfc

00013d60 <atomic_test_and_set_bit.constprop.0>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d60:	f000 031f 	and.w	r3, r0, #31
   13d64:	2201      	movs	r2, #1
   13d66:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13d68:	4b0a      	ldr	r3, [pc, #40]	; (13d94 <atomic_test_and_set_bit.constprop.0+0x34>)
   13d6a:	f3bf 8f5b 	dmb	ish
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13d6e:	0940      	lsrs	r0, r0, #5
   13d70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d74:	e850 3f00 	ldrex	r3, [r0]
   13d78:	ea43 0102 	orr.w	r1, r3, r2
   13d7c:	e840 1c00 	strex	ip, r1, [r0]
   13d80:	f1bc 0f00 	cmp.w	ip, #0
   13d84:	d1f6      	bne.n	13d74 <atomic_test_and_set_bit.constprop.0+0x14>
   13d86:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   13d8a:	421a      	tst	r2, r3
}
   13d8c:	bf14      	ite	ne
   13d8e:	2001      	movne	r0, #1
   13d90:	2000      	moveq	r0, #0
   13d92:	4770      	bx	lr
   13d94:	2000247c 	.word	0x2000247c

00013d98 <pm_system_resume>:

void pm_system_resume(void)
{
   13d98:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   13d9a:	4b1d      	ldr	r3, [pc, #116]	; (13e10 <pm_system_resume+0x78>)
   13d9c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d9e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13da2:	f005 031f 	and.w	r3, r5, #31
   13da6:	2201      	movs	r2, #1
   13da8:	409a      	lsls	r2, r3
   13daa:	4b1a      	ldr	r3, [pc, #104]	; (13e14 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13dac:	0969      	lsrs	r1, r5, #5
{
   13dae:	b085      	sub	sp, #20
   13db0:	43d0      	mvns	r0, r2
   13db2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13db6:	e853 1f00 	ldrex	r1, [r3]
   13dba:	ea01 0400 	and.w	r4, r1, r0
   13dbe:	e843 4c00 	strex	ip, r4, [r3]
   13dc2:	f1bc 0f00 	cmp.w	ip, #0
   13dc6:	d1f6      	bne.n	13db6 <pm_system_resume+0x1e>
   13dc8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13dcc:	4211      	tst	r1, r2
   13dce:	d017      	beq.n	13e00 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   13dd0:	4c11      	ldr	r4, [pc, #68]	; (13e18 <pm_system_resume+0x80>)
   13dd2:	220c      	movs	r2, #12
   13dd4:	fb02 4205 	mla	r2, r2, r5, r4
   13dd8:	ca07      	ldmia	r2, {r0, r1, r2}
   13dda:	ab01      	add	r3, sp, #4
   13ddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   13de0:	4a0e      	ldr	r2, [pc, #56]	; (13e1c <pm_system_resume+0x84>)
   13de2:	b17a      	cbz	r2, 13e04 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   13de4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13de8:	f016 fe8e 	bl	2ab08 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   13dec:	2000      	movs	r0, #0
   13dee:	f7ff ff51 	bl	13c94 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13df2:	230c      	movs	r3, #12
   13df4:	436b      	muls	r3, r5
   13df6:	2200      	movs	r2, #0
   13df8:	18e1      	adds	r1, r4, r3
   13dfa:	50e2      	str	r2, [r4, r3]
   13dfc:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   13e00:	b005      	add	sp, #20
   13e02:	bd30      	pop	{r4, r5, pc}
   13e04:	f382 8811 	msr	BASEPRI, r2
   13e08:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13e0c:	e7ee      	b.n	13dec <pm_system_resume+0x54>
   13e0e:	bf00      	nop
   13e10:	20002cfc 	.word	0x20002cfc
   13e14:	2000246c 	.word	0x2000246c
   13e18:	20002470 	.word	0x20002470
   13e1c:	0002ab09 	.word	0x0002ab09

00013e20 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   13e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   13e24:	4b37      	ldr	r3, [pc, #220]	; (13f04 <pm_system_suspend+0xe4>)
   13e26:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 13f1c <pm_system_suspend+0xfc>
   13e2a:	7d1c      	ldrb	r4, [r3, #20]
{
   13e2c:	b088      	sub	sp, #32
   13e2e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   13e30:	4620      	mov	r0, r4
   13e32:	f7ff ff95 	bl	13d60 <atomic_test_and_set_bit.constprop.0>
   13e36:	b960      	cbnz	r0, 13e52 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   13e38:	466e      	mov	r6, sp
   13e3a:	463a      	mov	r2, r7
   13e3c:	4621      	mov	r1, r4
   13e3e:	4630      	mov	r0, r6
   13e40:	f015 fc5b 	bl	296fa <pm_policy_next_state>
   13e44:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13e48:	250c      	movs	r5, #12
   13e4a:	fb05 8504 	mla	r5, r5, r4, r8
   13e4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   13e52:	230c      	movs	r3, #12
   13e54:	4363      	muls	r3, r4
   13e56:	eb08 0203 	add.w	r2, r8, r3
   13e5a:	f818 0003 	ldrb.w	r0, [r8, r3]
   13e5e:	0965      	lsrs	r5, r4, #5
   13e60:	f004 061f 	and.w	r6, r4, #31
   13e64:	b3c8      	cbz	r0, 13eda <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   13e66:	1c7b      	adds	r3, r7, #1
   13e68:	d00f      	beq.n	13e8a <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   13e6a:	f8d2 e008 	ldr.w	lr, [r2, #8]
   13e6e:	4826      	ldr	r0, [pc, #152]	; (13f08 <pm_system_suspend+0xe8>)
   13e70:	4a26      	ldr	r2, [pc, #152]	; (13f0c <pm_system_suspend+0xec>)
   13e72:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   13e76:	2100      	movs	r1, #0
   13e78:	2300      	movs	r3, #0
   13e7a:	fbec 010e 	umlal	r0, r1, ip, lr
   13e7e:	f7ec f93f 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13e82:	2101      	movs	r1, #1
   13e84:	1a38      	subs	r0, r7, r0
   13e86:	f011 f81f 	bl	24ec8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13e8a:	f00f fd23 	bl	238d4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13e8e:	2001      	movs	r0, #1
   13e90:	f7ff ff00 	bl	13c94 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13e94:	f3bf 8f5b 	dmb	ish
   13e98:	4b1d      	ldr	r3, [pc, #116]	; (13f10 <pm_system_suspend+0xf0>)
	atomic_val_t mask = ATOMIC_MASK(bit);
   13e9a:	2201      	movs	r2, #1
   13e9c:	40b2      	lsls	r2, r6
   13e9e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   13ea2:	e853 1f00 	ldrex	r1, [r3]
   13ea6:	4311      	orrs	r1, r2
   13ea8:	e843 1000 	strex	r0, r1, [r3]
   13eac:	2800      	cmp	r0, #0
   13eae:	d1f8      	bne.n	13ea2 <pm_system_suspend+0x82>
   13eb0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   13eb4:	230c      	movs	r3, #12
   13eb6:	fb03 8404 	mla	r4, r3, r4, r8
   13eba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   13ebe:	ab05      	add	r3, sp, #20
   13ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   13ec4:	4a13      	ldr	r2, [pc, #76]	; (13f14 <pm_system_suspend+0xf4>)
   13ec6:	b11a      	cbz	r2, 13ed0 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   13ec8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   13ecc:	f016 fe09 	bl	2aae2 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   13ed0:	f7ff ff62 	bl	13d98 <pm_system_resume>
	k_sched_unlock();
   13ed4:	f010 fa42 	bl	2435c <k_sched_unlock>
	bool ret = true;
   13ed8:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13eda:	4a0f      	ldr	r2, [pc, #60]	; (13f18 <pm_system_suspend+0xf8>)
   13edc:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13ee0:	2301      	movs	r3, #1
   13ee2:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13ee4:	43db      	mvns	r3, r3
   13ee6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   13eea:	e855 2f00 	ldrex	r2, [r5]
   13eee:	401a      	ands	r2, r3
   13ef0:	e845 2100 	strex	r1, r2, [r5]
   13ef4:	2900      	cmp	r1, #0
   13ef6:	d1f8      	bne.n	13eea <pm_system_suspend+0xca>
   13ef8:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   13efc:	b008      	add	sp, #32
   13efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f02:	bf00      	nop
   13f04:	20002cfc 	.word	0x20002cfc
   13f08:	000f423f 	.word	0x000f423f
   13f0c:	000f4240 	.word	0x000f4240
   13f10:	2000246c 	.word	0x2000246c
   13f14:	0002aae3 	.word	0x0002aae3
   13f18:	2000247c 	.word	0x2000247c
   13f1c:	20002470 	.word	0x20002470

00013f20 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   13f20:	4b01      	ldr	r3, [pc, #4]	; (13f28 <uECC_get_rng+0x8>)
   13f22:	6818      	ldr	r0, [r3, #0]
   13f24:	4770      	bx	lr
   13f26:	bf00      	nop
   13f28:	20000494 	.word	0x20000494

00013f2c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   13f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13f2e:	2208      	movs	r2, #8
{
   13f30:	b089      	sub	sp, #36	; 0x24
   13f32:	460c      	mov	r4, r1
   13f34:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   13f36:	f015 fda7 	bl	29a88 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   13f3a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   13f3c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   13f3e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   13f40:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   13f42:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   13f44:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   13f46:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   13f48:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   13f4a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   13f4c:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   13f4e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13f50:	2308      	movs	r3, #8
   13f52:	466a      	mov	r2, sp
   13f54:	4669      	mov	r1, sp
   13f56:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   13f58:	e9cd 7701 	strd	r7, r7, [sp, #4]
   13f5c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13f5e:	f015 fc95 	bl	2988c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13f62:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13f64:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13f66:	466a      	mov	r2, sp
   13f68:	4631      	mov	r1, r6
   13f6a:	4630      	mov	r0, r6
   13f6c:	f015 fc8e 	bl	2988c <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   13f70:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13f72:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   13f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13f76:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   13f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13f7a:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   13f7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13f7e:	4405      	add	r5, r0
	tmp[7] = 0;
   13f80:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13f84:	466a      	mov	r2, sp
   13f86:	2308      	movs	r3, #8
   13f88:	4669      	mov	r1, sp
   13f8a:	4668      	mov	r0, sp
   13f8c:	f015 fc7e 	bl	2988c <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13f90:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   13f92:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13f94:	2308      	movs	r3, #8
   13f96:	466a      	mov	r2, sp
   13f98:	4630      	mov	r0, r6
   13f9a:	f015 fc77 	bl	2988c <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   13f9e:	6a23      	ldr	r3, [r4, #32]
   13fa0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   13fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13fa4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   13fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13fa8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   13faa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13fac:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   13fae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13fb0:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13fb2:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13fb4:	2308      	movs	r3, #8
   13fb6:	466a      	mov	r2, sp
   13fb8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   13fba:	e9cd 7704 	strd	r7, r7, [sp, #16]
   13fbe:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13fc0:	f015 fc64 	bl	2988c <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   13fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13fc6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   13fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   13fca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   13fcc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   13fce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13fd0:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   13fd2:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   13fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   13fd6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   13fd8:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   13fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   13fde:	6a23      	ldr	r3, [r4, #32]
   13fe0:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13fe2:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   13fe4:	2308      	movs	r3, #8
   13fe6:	466a      	mov	r2, sp
   13fe8:	4630      	mov	r0, r6
   13fea:	f015 fc4f 	bl	2988c <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   13fee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13ff0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   13ff2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13ff4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   13ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13ff8:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   13ffa:	6a23      	ldr	r3, [r4, #32]
   13ffc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   13ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14000:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   14002:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14004:	2308      	movs	r3, #8
   14006:	466a      	mov	r2, sp
   14008:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   1400a:	e9cd 7704 	strd	r7, r7, [sp, #16]
   1400e:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14010:	f015 fd70 	bl	29af4 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   14014:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14016:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   14018:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1401a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   1401c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1401e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   14020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14022:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   14024:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14026:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   14028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1402a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1402c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1402e:	2308      	movs	r3, #8
   14030:	466a      	mov	r2, sp
   14032:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   14034:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14038:	f015 fd5c 	bl	29af4 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   1403c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1403e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   14040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14042:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   14044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14046:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   14048:	6a23      	ldr	r3, [r4, #32]
   1404a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   1404c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1404e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   14050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   14052:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   14056:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14058:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1405a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1405c:	2308      	movs	r3, #8
   1405e:	466a      	mov	r2, sp
   14060:	4630      	mov	r0, r6
   14062:	f015 fd47 	bl	29af4 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   14066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14068:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   1406a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   1406c:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   14070:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14072:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   14074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14076:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   14078:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   1407a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   1407e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14080:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14082:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   14084:	2308      	movs	r3, #8
   14086:	466a      	mov	r2, sp
   14088:	4630      	mov	r0, r6
   1408a:	f015 fd33 	bl	29af4 <uECC_vli_sub>

	if (carry < 0) {
   1408e:	1a2d      	subs	r5, r5, r0
   14090:	d410      	bmi.n	140b4 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   14092:	4c0d      	ldr	r4, [pc, #52]	; (140c8 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   14094:	b935      	cbnz	r5, 140a4 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   14096:	2208      	movs	r2, #8
   14098:	4631      	mov	r1, r6
   1409a:	4620      	mov	r0, r4
   1409c:	f015 fd00 	bl	29aa0 <uECC_vli_cmp_unsafe>
		while (carry || 
   140a0:	2801      	cmp	r0, #1
   140a2:	d00f      	beq.n	140c4 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   140a4:	2308      	movs	r3, #8
   140a6:	4622      	mov	r2, r4
   140a8:	4631      	mov	r1, r6
   140aa:	4630      	mov	r0, r6
   140ac:	f015 fd22 	bl	29af4 <uECC_vli_sub>
   140b0:	1a2d      	subs	r5, r5, r0
   140b2:	e7ef      	b.n	14094 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   140b4:	4a04      	ldr	r2, [pc, #16]	; (140c8 <vli_mmod_fast_secp256r1+0x19c>)
   140b6:	2308      	movs	r3, #8
   140b8:	4631      	mov	r1, r6
   140ba:	4630      	mov	r0, r6
   140bc:	f015 fbe6 	bl	2988c <uECC_vli_add>
		while (carry < 0);
   140c0:	182d      	adds	r5, r5, r0
   140c2:	d4f8      	bmi.n	140b6 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   140c4:	b009      	add	sp, #36	; 0x24
   140c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140c8:	0002dca8 	.word	0x0002dca8

000140cc <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   140cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   140ce:	4e26      	ldr	r6, [pc, #152]	; (14168 <tc_aes128_set_encrypt_key+0x9c>)
{
   140d0:	4607      	mov	r7, r0
   140d2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   140d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   140d6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   140d8:	ad01      	add	r5, sp, #4
   140da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   140dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   140de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   140e0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   140e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   140e8:	4638      	mov	r0, r7
   140ea:	2f00      	cmp	r7, #0
   140ec:	d038      	beq.n	14160 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   140ee:	2c00      	cmp	r4, #0
   140f0:	d038      	beq.n	14164 <tc_aes128_set_encrypt_key+0x98>
   140f2:	1f38      	subs	r0, r7, #4
   140f4:	4621      	mov	r1, r4
   140f6:	4602      	mov	r2, r0
   140f8:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   140fa:	784b      	ldrb	r3, [r1, #1]
   140fc:	780d      	ldrb	r5, [r1, #0]
   140fe:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14100:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14104:	78cd      	ldrb	r5, [r1, #3]
   14106:	432b      	orrs	r3, r5
   14108:	788d      	ldrb	r5, [r1, #2]
   1410a:	3104      	adds	r1, #4
   1410c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14110:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14112:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14116:	d1f0      	bne.n	140fa <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14118:	4c14      	ldr	r4, [pc, #80]	; (1416c <tc_aes128_set_encrypt_key+0xa0>)
   1411a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1411c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1411e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14120:	d116      	bne.n	14150 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14122:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14126:	5ca5      	ldrb	r5, [r4, r2]
   14128:	0e1a      	lsrs	r2, r3, #24
   1412a:	5ca2      	ldrb	r2, [r4, r2]
   1412c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14130:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14134:	b2db      	uxtb	r3, r3
   14136:	5d65      	ldrb	r5, [r4, r5]
   14138:	5ce3      	ldrb	r3, [r4, r3]
   1413a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1413e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   14142:	ad0c      	add	r5, sp, #48	; 0x30
   14144:	f021 0303 	bic.w	r3, r1, #3
   14148:	442b      	add	r3, r5
   1414a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1414e:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   14150:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14154:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14156:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14158:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1415a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1415c:	d1de      	bne.n	1411c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   1415e:	2001      	movs	r0, #1
}
   14160:	b00d      	add	sp, #52	; 0x34
   14162:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14164:	4620      	mov	r0, r4
   14166:	e7fb      	b.n	14160 <tc_aes128_set_encrypt_key+0x94>
   14168:	0002dab4 	.word	0x0002dab4
   1416c:	0002f32f 	.word	0x0002f32f

00014170 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   14170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14174:	4615      	mov	r5, r2
   14176:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14178:	4606      	mov	r6, r0
   1417a:	2800      	cmp	r0, #0
   1417c:	d058      	beq.n	14230 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1417e:	2900      	cmp	r1, #0
   14180:	d059      	beq.n	14236 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   14182:	2a00      	cmp	r2, #0
   14184:	d059      	beq.n	1423a <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14186:	2310      	movs	r3, #16
   14188:	460a      	mov	r2, r1
   1418a:	4668      	mov	r0, sp
   1418c:	4619      	mov	r1, r3
   1418e:	f015 fab9 	bl	29704 <_copy>
	add_round_key(state, s->words);
   14192:	4629      	mov	r1, r5
   14194:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   14196:	4c2a      	ldr	r4, [pc, #168]	; (14240 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   14198:	f016 f9be 	bl	2a518 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1419c:	f105 0710 	add.w	r7, r5, #16
   141a0:	46a1      	mov	r9, r4
   141a2:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   141a4:	46e8      	mov	r8, sp
{
   141a6:	466a      	mov	r2, sp
   141a8:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   141aa:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   141ac:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   141ae:	5c61      	ldrb	r1, [r4, r1]
   141b0:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   141b4:	d1f9      	bne.n	141aa <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   141b6:	4668      	mov	r0, sp
   141b8:	f016 f9f3 	bl	2a5a2 <shift_rows>
	mult_row_column(t, s);
   141bc:	4669      	mov	r1, sp
   141be:	a804      	add	r0, sp, #16
   141c0:	f016 fa28 	bl	2a614 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   141c4:	a901      	add	r1, sp, #4
   141c6:	a805      	add	r0, sp, #20
   141c8:	f016 fa24 	bl	2a614 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   141cc:	a902      	add	r1, sp, #8
   141ce:	a806      	add	r0, sp, #24
   141d0:	f016 fa20 	bl	2a614 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   141d4:	a903      	add	r1, sp, #12
   141d6:	a807      	add	r0, sp, #28
   141d8:	f016 fa1c 	bl	2a614 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   141dc:	2310      	movs	r3, #16
   141de:	4619      	mov	r1, r3
   141e0:	eb0d 0203 	add.w	r2, sp, r3
   141e4:	4668      	mov	r0, sp
   141e6:	f015 fa8d 	bl	29704 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   141ea:	4639      	mov	r1, r7
   141ec:	4668      	mov	r0, sp
   141ee:	3710      	adds	r7, #16
   141f0:	f016 f992 	bl	2a518 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   141f4:	42af      	cmp	r7, r5
   141f6:	d1d5      	bne.n	141a4 <tc_aes_encrypt+0x34>
   141f8:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   141fa:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   141fe:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   14200:	f819 3003 	ldrb.w	r3, [r9, r3]
   14204:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   14208:	d1f7      	bne.n	141fa <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   1420a:	4668      	mov	r0, sp
   1420c:	f016 f9c9 	bl	2a5a2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   14210:	4629      	mov	r1, r5
   14212:	4668      	mov	r0, sp
   14214:	f016 f980 	bl	2a518 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   14218:	2310      	movs	r3, #16
   1421a:	4619      	mov	r1, r3
   1421c:	466a      	mov	r2, sp
   1421e:	4630      	mov	r0, r6
   14220:	f015 fa70 	bl	29704 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   14224:	4668      	mov	r0, sp
   14226:	2210      	movs	r2, #16
   14228:	4621      	mov	r1, r4
   1422a:	f015 fa78 	bl	2971e <_set>

	return TC_CRYPTO_SUCCESS;
   1422e:	2001      	movs	r0, #1
}
   14230:	b009      	add	sp, #36	; 0x24
   14232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   14236:	4608      	mov	r0, r1
   14238:	e7fa      	b.n	14230 <tc_aes_encrypt+0xc0>
   1423a:	4610      	mov	r0, r2
   1423c:	e7f8      	b.n	14230 <tc_aes_encrypt+0xc0>
   1423e:	bf00      	nop
   14240:	0002f32f 	.word	0x0002f32f

00014244 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   14244:	4801      	ldr	r0, [pc, #4]	; (1424c <nrf_cc3xx_platform_abort_init+0x8>)
   14246:	f011 bdc5 	b.w	25dd4 <nrf_cc3xx_platform_set_abort>
   1424a:	bf00      	nop
   1424c:	0002dd54 	.word	0x0002dd54

00014250 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14250:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14252:	b1d0      	cbz	r0, 1428a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14254:	6843      	ldr	r3, [r0, #4]
   14256:	2b04      	cmp	r3, #4
   14258:	d111      	bne.n	1427e <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1425a:	2200      	movs	r2, #0
   1425c:	6803      	ldr	r3, [r0, #0]
   1425e:	f3bf 8f5b 	dmb	ish
   14262:	e853 1f00 	ldrex	r1, [r3]
   14266:	2901      	cmp	r1, #1
   14268:	d103      	bne.n	14272 <mutex_unlock_platform+0x22>
   1426a:	e843 2000 	strex	r0, r2, [r3]
   1426e:	2800      	cmp	r0, #0
   14270:	d1f7      	bne.n	14262 <mutex_unlock_platform+0x12>
   14272:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14276:	4807      	ldr	r0, [pc, #28]	; (14294 <mutex_unlock_platform+0x44>)
   14278:	bf08      	it	eq
   1427a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   1427c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1427e:	b13b      	cbz	r3, 14290 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14280:	6800      	ldr	r0, [r0, #0]
   14282:	f00e f9bd 	bl	22600 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14286:	2000      	movs	r0, #0
   14288:	e7f8      	b.n	1427c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1428a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1428e:	e7f5      	b.n	1427c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14290:	4801      	ldr	r0, [pc, #4]	; (14298 <mutex_unlock_platform+0x48>)
   14292:	e7f3      	b.n	1427c <mutex_unlock_platform+0x2c>
   14294:	ffff8fe9 	.word	0xffff8fe9
   14298:	ffff8fea 	.word	0xffff8fea

0001429c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1429c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1429e:	4604      	mov	r4, r0
   142a0:	b918      	cbnz	r0, 142aa <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   142a2:	4b0d      	ldr	r3, [pc, #52]	; (142d8 <mutex_free_platform+0x3c>)
   142a4:	480d      	ldr	r0, [pc, #52]	; (142dc <mutex_free_platform+0x40>)
   142a6:	685b      	ldr	r3, [r3, #4]
   142a8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   142aa:	6861      	ldr	r1, [r4, #4]
   142ac:	2908      	cmp	r1, #8
   142ae:	d00d      	beq.n	142cc <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   142b0:	f031 0304 	bics.w	r3, r1, #4
   142b4:	d00a      	beq.n	142cc <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   142b6:	f011 0102 	ands.w	r1, r1, #2
   142ba:	d008      	beq.n	142ce <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   142bc:	4808      	ldr	r0, [pc, #32]	; (142e0 <mutex_free_platform+0x44>)
   142be:	4621      	mov	r1, r4
   142c0:	f00d fea6 	bl	22010 <k_mem_slab_free>
        mutex->mutex = NULL;
   142c4:	2300      	movs	r3, #0
   142c6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   142c8:	2300      	movs	r3, #0
   142ca:	6063      	str	r3, [r4, #4]
}
   142cc:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   142ce:	6820      	ldr	r0, [r4, #0]
   142d0:	2214      	movs	r2, #20
   142d2:	f016 fbed 	bl	2aab0 <memset>
   142d6:	e7f7      	b.n	142c8 <mutex_free_platform+0x2c>
   142d8:	20000650 	.word	0x20000650
   142dc:	0002f42f 	.word	0x0002f42f
   142e0:	20002480 	.word	0x20002480

000142e4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   142e4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   142e6:	4604      	mov	r4, r0
   142e8:	b918      	cbnz	r0, 142f2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   142ea:	4b16      	ldr	r3, [pc, #88]	; (14344 <mutex_init_platform+0x60>)
   142ec:	4816      	ldr	r0, [pc, #88]	; (14348 <mutex_init_platform+0x64>)
   142ee:	685b      	ldr	r3, [r3, #4]
   142f0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   142f2:	6863      	ldr	r3, [r4, #4]
   142f4:	2b04      	cmp	r3, #4
   142f6:	d023      	beq.n	14340 <mutex_init_platform+0x5c>
   142f8:	2b08      	cmp	r3, #8
   142fa:	d021      	beq.n	14340 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   142fc:	b9cb      	cbnz	r3, 14332 <mutex_init_platform+0x4e>
   142fe:	6823      	ldr	r3, [r4, #0]
   14300:	b9bb      	cbnz	r3, 14332 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14302:	4812      	ldr	r0, [pc, #72]	; (1434c <mutex_init_platform+0x68>)
   14304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1430c:	4621      	mov	r1, r4
   1430e:	f00d fe13 	bl	21f38 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14312:	b908      	cbnz	r0, 14318 <mutex_init_platform+0x34>
   14314:	6823      	ldr	r3, [r4, #0]
   14316:	b91b      	cbnz	r3, 14320 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   14318:	4b0a      	ldr	r3, [pc, #40]	; (14344 <mutex_init_platform+0x60>)
   1431a:	480d      	ldr	r0, [pc, #52]	; (14350 <mutex_init_platform+0x6c>)
   1431c:	685b      	ldr	r3, [r3, #4]
   1431e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14320:	6820      	ldr	r0, [r4, #0]
   14322:	2214      	movs	r2, #20
   14324:	2100      	movs	r1, #0
   14326:	f016 fbc3 	bl	2aab0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1432a:	6863      	ldr	r3, [r4, #4]
   1432c:	f043 0302 	orr.w	r3, r3, #2
   14330:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   14332:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14334:	f018 ffb8 	bl	2d2a8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14338:	6863      	ldr	r3, [r4, #4]
   1433a:	f043 0301 	orr.w	r3, r3, #1
   1433e:	6063      	str	r3, [r4, #4]
}
   14340:	bd10      	pop	{r4, pc}
   14342:	bf00      	nop
   14344:	20000650 	.word	0x20000650
   14348:	0002f42f 	.word	0x0002f42f
   1434c:	20002480 	.word	0x20002480
   14350:	0002f455 	.word	0x0002f455

00014354 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14354:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   14356:	b308      	cbz	r0, 1439c <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   14358:	6843      	ldr	r3, [r0, #4]
   1435a:	2b04      	cmp	r3, #4
   1435c:	d110      	bne.n	14380 <mutex_lock_platform+0x2c>
   1435e:	2201      	movs	r2, #1
   14360:	6803      	ldr	r3, [r0, #0]
   14362:	f3bf 8f5b 	dmb	ish
   14366:	e853 1f00 	ldrex	r1, [r3]
   1436a:	2900      	cmp	r1, #0
   1436c:	d103      	bne.n	14376 <mutex_lock_platform+0x22>
   1436e:	e843 2000 	strex	r0, r2, [r3]
   14372:	2800      	cmp	r0, #0
   14374:	d1f7      	bne.n	14366 <mutex_lock_platform+0x12>
   14376:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1437a:	d10b      	bne.n	14394 <mutex_lock_platform+0x40>
   1437c:	2000      	movs	r0, #0
}
   1437e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14380:	b153      	cbz	r3, 14398 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14382:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1438c:	f00e f838 	bl	22400 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14390:	2800      	cmp	r0, #0
   14392:	d0f3      	beq.n	1437c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14394:	4803      	ldr	r0, [pc, #12]	; (143a4 <mutex_lock_platform+0x50>)
   14396:	e7f2      	b.n	1437e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14398:	4803      	ldr	r0, [pc, #12]	; (143a8 <mutex_lock_platform+0x54>)
   1439a:	e7f0      	b.n	1437e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1439c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   143a0:	e7ed      	b.n	1437e <mutex_lock_platform+0x2a>
   143a2:	bf00      	nop
   143a4:	ffff8fe9 	.word	0xffff8fe9
   143a8:	ffff8fea 	.word	0xffff8fea

000143ac <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   143ac:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   143ae:	4906      	ldr	r1, [pc, #24]	; (143c8 <nrf_cc3xx_platform_mutex_init+0x1c>)
   143b0:	4806      	ldr	r0, [pc, #24]	; (143cc <nrf_cc3xx_platform_mutex_init+0x20>)
   143b2:	2340      	movs	r3, #64	; 0x40
   143b4:	2214      	movs	r2, #20
   143b6:	f018 ff47 	bl	2d248 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   143ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   143be:	4904      	ldr	r1, [pc, #16]	; (143d0 <nrf_cc3xx_platform_mutex_init+0x24>)
   143c0:	4804      	ldr	r0, [pc, #16]	; (143d4 <nrf_cc3xx_platform_mutex_init+0x28>)
   143c2:	f011 bdbf 	b.w	25f44 <nrf_cc3xx_platform_set_mutexes>
   143c6:	bf00      	nop
   143c8:	200024a0 	.word	0x200024a0
   143cc:	20002480 	.word	0x20002480
   143d0:	0002dd6c 	.word	0x0002dd6c
   143d4:	0002dd5c 	.word	0x0002dd5c

000143d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   143d8:	4901      	ldr	r1, [pc, #4]	; (143e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   143da:	2210      	movs	r2, #16
	str	r2, [r1]
   143dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   143de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   143e0:	e000ed10 	.word	0xe000ed10

000143e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   143e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   143e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   143e8:	f380 8811 	msr	BASEPRI, r0
	isb
   143ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   143f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   143f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   143f6:	b662      	cpsie	i
	isb
   143f8:	f3bf 8f6f 	isb	sy

	bx	lr
   143fc:	4770      	bx	lr
   143fe:	bf00      	nop

00014400 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14400:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14402:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14404:	f381 8811 	msr	BASEPRI, r1

	wfe
   14408:	bf20      	wfe

	msr	BASEPRI, r0
   1440a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1440e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14410:	4770      	bx	lr
   14412:	bf00      	nop

00014414 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14414:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14416:	4606      	mov	r6, r0

	if (esf != NULL) {
   14418:	460c      	mov	r4, r1
   1441a:	b301      	cbz	r1, 1445e <z_arm_fatal_error+0x4a>
   1441c:	4b13      	ldr	r3, [pc, #76]	; (1446c <z_arm_fatal_error+0x58>)
   1441e:	4d14      	ldr	r5, [pc, #80]	; (14470 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14420:	4814      	ldr	r0, [pc, #80]	; (14474 <z_arm_fatal_error+0x60>)
   14422:	1aed      	subs	r5, r5, r3
   14424:	08ed      	lsrs	r5, r5, #3
   14426:	01ad      	lsls	r5, r5, #6
   14428:	f045 0501 	orr.w	r5, r5, #1
   1442c:	f8ad 5000 	strh.w	r5, [sp]
   14430:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   14434:	6809      	ldr	r1, [r1, #0]
   14436:	f014 fbf4 	bl	28c22 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1443a:	f8ad 5000 	strh.w	r5, [sp]
   1443e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14442:	68e1      	ldr	r1, [r4, #12]
   14444:	480c      	ldr	r0, [pc, #48]	; (14478 <z_arm_fatal_error+0x64>)
   14446:	f014 fbec 	bl	28c22 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1444a:	69e1      	ldr	r1, [r4, #28]
   1444c:	480b      	ldr	r0, [pc, #44]	; (1447c <z_arm_fatal_error+0x68>)
   1444e:	462a      	mov	r2, r5
   14450:	f014 fbba 	bl	28bc8 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14454:	69a1      	ldr	r1, [r4, #24]
   14456:	480a      	ldr	r0, [pc, #40]	; (14480 <z_arm_fatal_error+0x6c>)
   14458:	462a      	mov	r2, r5
   1445a:	f014 fbb5 	bl	28bc8 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1445e:	4621      	mov	r1, r4
   14460:	4630      	mov	r0, r6
}
   14462:	b002      	add	sp, #8
   14464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   14468:	f00d bac0 	b.w	219ec <z_fatal_error>
   1446c:	0002d948 	.word	0x0002d948
   14470:	0002da10 	.word	0x0002da10
   14474:	0002f482 	.word	0x0002f482
   14478:	0002f4b1 	.word	0x0002f4b1
   1447c:	0002f4e0 	.word	0x0002f4e0
   14480:	0002f4ef 	.word	0x0002f4ef

00014484 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14484:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14486:	2b00      	cmp	r3, #0
   14488:	db08      	blt.n	1449c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1448a:	2201      	movs	r2, #1
   1448c:	f000 001f 	and.w	r0, r0, #31
   14490:	fa02 f000 	lsl.w	r0, r2, r0
   14494:	095b      	lsrs	r3, r3, #5
   14496:	4a02      	ldr	r2, [pc, #8]	; (144a0 <arch_irq_enable+0x1c>)
   14498:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1449c:	4770      	bx	lr
   1449e:	bf00      	nop
   144a0:	e000e100 	.word	0xe000e100

000144a4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   144a4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   144a6:	2b00      	cmp	r3, #0
   144a8:	db0d      	blt.n	144c6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   144aa:	2201      	movs	r2, #1
   144ac:	095b      	lsrs	r3, r3, #5
   144ae:	f000 001f 	and.w	r0, r0, #31
   144b2:	fa02 f000 	lsl.w	r0, r2, r0
   144b6:	3320      	adds	r3, #32
   144b8:	4a03      	ldr	r2, [pc, #12]	; (144c8 <arch_irq_disable+0x24>)
   144ba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   144be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   144c2:	f3bf 8f6f 	isb	sy
}
   144c6:	4770      	bx	lr
   144c8:	e000e100 	.word	0xe000e100

000144cc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   144cc:	4b05      	ldr	r3, [pc, #20]	; (144e4 <arch_irq_is_enabled+0x18>)
   144ce:	0942      	lsrs	r2, r0, #5
   144d0:	f000 001f 	and.w	r0, r0, #31
   144d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   144d8:	2301      	movs	r3, #1
   144da:	fa03 f000 	lsl.w	r0, r3, r0
}
   144de:	4010      	ands	r0, r2
   144e0:	4770      	bx	lr
   144e2:	bf00      	nop
   144e4:	e000e100 	.word	0xe000e100

000144e8 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   144e8:	07d3      	lsls	r3, r2, #31
{
   144ea:	b570      	push	{r4, r5, r6, lr}
   144ec:	4605      	mov	r5, r0
   144ee:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   144f0:	d425      	bmi.n	1453e <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   144f2:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   144f4:	2c07      	cmp	r4, #7
   144f6:	d90f      	bls.n	14518 <z_arm_irq_priority_set+0x30>
   144f8:	4a12      	ldr	r2, [pc, #72]	; (14544 <z_arm_irq_priority_set+0x5c>)
   144fa:	4913      	ldr	r1, [pc, #76]	; (14548 <z_arm_irq_priority_set+0x60>)
   144fc:	4813      	ldr	r0, [pc, #76]	; (1454c <z_arm_irq_priority_set+0x64>)
   144fe:	2359      	movs	r3, #89	; 0x59
   14500:	f014 f936 	bl	28770 <printk>
   14504:	4812      	ldr	r0, [pc, #72]	; (14550 <z_arm_irq_priority_set+0x68>)
   14506:	4631      	mov	r1, r6
   14508:	2306      	movs	r3, #6
   1450a:	462a      	mov	r2, r5
   1450c:	f014 f930 	bl	28770 <printk>
   14510:	480c      	ldr	r0, [pc, #48]	; (14544 <z_arm_irq_priority_set+0x5c>)
   14512:	2159      	movs	r1, #89	; 0x59
   14514:	f014 fb1d 	bl	28b52 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14518:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1451a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1451c:	bfac      	ite	ge
   1451e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14522:	4b0c      	ldrlt	r3, [pc, #48]	; (14554 <z_arm_irq_priority_set+0x6c>)
   14524:	ea4f 1444 	mov.w	r4, r4, lsl #5
   14528:	bfb8      	it	lt
   1452a:	f005 050f 	andlt.w	r5, r5, #15
   1452e:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14530:	bfaa      	itet	ge
   14532:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14536:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14538:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   1453c:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1453e:	2400      	movs	r4, #0
   14540:	e7ea      	b.n	14518 <z_arm_irq_priority_set+0x30>
   14542:	bf00      	nop
   14544:	0002f51d 	.word	0x0002f51d
   14548:	0002f553 	.word	0x0002f553
   1454c:	0002e915 	.word	0x0002e915
   14550:	0002f56e 	.word	0x0002f56e
   14554:	e000ed14 	.word	0xe000ed14

00014558 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14558:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1455a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1455c:	4b04      	ldr	r3, [pc, #16]	; (14570 <_arch_isr_direct_pm+0x18>)
   1455e:	699a      	ldr	r2, [r3, #24]
   14560:	b11a      	cbz	r2, 1456a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14562:	2200      	movs	r2, #0
   14564:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14566:	f018 fe98 	bl	2d29a <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1456a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   1456c:	bd08      	pop	{r3, pc}
   1456e:	bf00      	nop
   14570:	20002cfc 	.word	0x20002cfc

00014574 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14574:	bf30      	wfi
    b z_SysNmiOnReset
   14576:	f7ff bffd 	b.w	14574 <z_SysNmiOnReset>
   1457a:	bf00      	nop

0001457c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1457c:	4a0b      	ldr	r2, [pc, #44]	; (145ac <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1457e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14580:	4b0b      	ldr	r3, [pc, #44]	; (145b0 <z_arm_prep_c+0x34>)
   14582:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14586:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14588:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1458c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14590:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14594:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1459c:	f00d fae2 	bl	21b64 <z_bss_zero>
	z_data_copy();
   145a0:	f010 fabe 	bl	24b20 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   145a4:	f000 fb76 	bl	14c94 <z_arm_interrupt_init>
	z_cstart();
   145a8:	f00d fae6 	bl	21b78 <z_cstart>
   145ac:	00000000 	.word	0x00000000
   145b0:	e000ed00 	.word	0xe000ed00

000145b4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   145b4:	4a09      	ldr	r2, [pc, #36]	; (145dc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   145b6:	490a      	ldr	r1, [pc, #40]	; (145e0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   145b8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   145ba:	6809      	ldr	r1, [r1, #0]
   145bc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   145be:	4909      	ldr	r1, [pc, #36]	; (145e4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   145c0:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   145c2:	684b      	ldr	r3, [r1, #4]
   145c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   145c8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   145ca:	2300      	movs	r3, #0
   145cc:	f383 8811 	msr	BASEPRI, r3
   145d0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   145d4:	6893      	ldr	r3, [r2, #8]
}
   145d6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   145d8:	4770      	bx	lr
   145da:	bf00      	nop
   145dc:	20002cfc 	.word	0x20002cfc
   145e0:	0002e350 	.word	0x0002e350
   145e4:	e000ed00 	.word	0xe000ed00

000145e8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   145e8:	4912      	ldr	r1, [pc, #72]	; (14634 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   145ea:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   145ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   145f0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   145f2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   145f6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   145fa:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   145fc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14600:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14604:	4f0c      	ldr	r7, [pc, #48]	; (14638 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14606:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1460a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1460c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1460e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14610:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14612:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14614:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14616:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1461a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   1461c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1461e:	f000 fbcf 	bl	14dc0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14622:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14626:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1462a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1462e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14632:	4770      	bx	lr
    ldr r1, =_kernel
   14634:	20002cfc 	.word	0x20002cfc
    ldr v4, =_SCS_ICSR
   14638:	e000ed04 	.word	0xe000ed04

0001463c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1463c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14640:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14642:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14646:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1464a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1464c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14650:	2902      	cmp	r1, #2
    beq _oops
   14652:	d0ff      	beq.n	14654 <_oops>

00014654 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14654:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   14656:	f016 f920 	bl	2a89a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1465a:	bd01      	pop	{r0, pc}

0001465c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1465c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14660:	9b00      	ldr	r3, [sp, #0]
   14662:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14666:	490a      	ldr	r1, [pc, #40]	; (14690 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14668:	9b01      	ldr	r3, [sp, #4]
   1466a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1466e:	9b02      	ldr	r3, [sp, #8]
   14670:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14674:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1467c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14680:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14684:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14686:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14688:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1468a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1468c:	4770      	bx	lr
   1468e:	bf00      	nop
   14690:	0002884d 	.word	0x0002884d

00014694 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14694:	4a0b      	ldr	r2, [pc, #44]	; (146c4 <z_check_thread_stack_fail+0x30>)
{
   14696:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14698:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1469a:	b190      	cbz	r0, 146c2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1469c:	f113 0f16 	cmn.w	r3, #22
   146a0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   146a2:	d005      	beq.n	146b0 <z_check_thread_stack_fail+0x1c>
   146a4:	f1a0 0220 	sub.w	r2, r0, #32
   146a8:	429a      	cmp	r2, r3
   146aa:	d806      	bhi.n	146ba <z_check_thread_stack_fail+0x26>
   146ac:	4283      	cmp	r3, r0
   146ae:	d204      	bcs.n	146ba <z_check_thread_stack_fail+0x26>
   146b0:	4281      	cmp	r1, r0
   146b2:	bf2c      	ite	cs
   146b4:	2100      	movcs	r1, #0
   146b6:	2101      	movcc	r1, #1
   146b8:	e000      	b.n	146bc <z_check_thread_stack_fail+0x28>
   146ba:	2100      	movs	r1, #0
   146bc:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   146be:	bf08      	it	eq
   146c0:	2000      	moveq	r0, #0
}
   146c2:	4770      	bx	lr
   146c4:	20002cfc 	.word	0x20002cfc

000146c8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   146c8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   146ca:	4b09      	ldr	r3, [pc, #36]	; (146f0 <arch_switch_to_main_thread+0x28>)
   146cc:	6098      	str	r0, [r3, #8]
{
   146ce:	460d      	mov	r5, r1
   146d0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   146d2:	f000 fb75 	bl	14dc0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   146d6:	4620      	mov	r0, r4
   146d8:	f385 8809 	msr	PSP, r5
   146dc:	2100      	movs	r1, #0
   146de:	b663      	cpsie	if
   146e0:	f381 8811 	msr	BASEPRI, r1
   146e4:	f3bf 8f6f 	isb	sy
   146e8:	2200      	movs	r2, #0
   146ea:	2300      	movs	r3, #0
   146ec:	f014 f8ae 	bl	2884c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   146f0:	20002cfc 	.word	0x20002cfc

000146f4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   146f4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   146f6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   146f8:	4a0b      	ldr	r2, [pc, #44]	; (14728 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   146fa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   146fc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   146fe:	bf1e      	ittt	ne
	movne	r1, #0
   14700:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14702:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14704:	f018 fdc9 	blne	2d29a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14708:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1470a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1470e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14712:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14716:	4905      	ldr	r1, [pc, #20]	; (1472c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14718:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1471a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1471c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1471e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14722:	4903      	ldr	r1, [pc, #12]	; (14730 <_isr_wrapper+0x3c>)
	bx r1
   14724:	4708      	bx	r1
   14726:	0000      	.short	0x0000
	ldr r2, =_kernel
   14728:	20002cfc 	.word	0x20002cfc
	ldr r1, =_sw_isr_table
   1472c:	0002d6f8 	.word	0x0002d6f8
	ldr r1, =z_arm_int_exit
   14730:	00014735 	.word	0x00014735

00014734 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14734:	4b04      	ldr	r3, [pc, #16]	; (14748 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14736:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14738:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1473a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1473c:	d003      	beq.n	14746 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1473e:	4903      	ldr	r1, [pc, #12]	; (1474c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14744:	600a      	str	r2, [r1, #0]

00014746 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14746:	4770      	bx	lr
	ldr r3, =_kernel
   14748:	20002cfc 	.word	0x20002cfc
	ldr r1, =_SCS_ICSR
   1474c:	e000ed04 	.word	0xe000ed04

00014750 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14754:	4b3f      	ldr	r3, [pc, #252]	; (14854 <mem_manage_fault+0x104>)
   14756:	4c40      	ldr	r4, [pc, #256]	; (14858 <mem_manage_fault+0x108>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14758:	4d40      	ldr	r5, [pc, #256]	; (1485c <mem_manage_fault+0x10c>)
   1475a:	1ae4      	subs	r4, r4, r3
   1475c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1475e:	01a4      	lsls	r4, r4, #6
   14760:	f044 0901 	orr.w	r9, r4, #1
{
   14764:	4607      	mov	r7, r0
   14766:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14768:	483d      	ldr	r0, [pc, #244]	; (14860 <mem_manage_fault+0x110>)
   1476a:	4649      	mov	r1, r9
{
   1476c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1476e:	f014 fa1e 	bl	28bae <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14772:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14774:	06d3      	lsls	r3, r2, #27
   14776:	d503      	bpl.n	14780 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14778:	483a      	ldr	r0, [pc, #232]	; (14864 <mem_manage_fault+0x114>)
   1477a:	4649      	mov	r1, r9
   1477c:	f014 fa17 	bl	28bae <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14780:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14782:	0718      	lsls	r0, r3, #28
   14784:	d504      	bpl.n	14790 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   14786:	4838      	ldr	r0, [pc, #224]	; (14868 <mem_manage_fault+0x118>)
   14788:	f044 0101 	orr.w	r1, r4, #1
   1478c:	f014 fa0f 	bl	28bae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14790:	4d32      	ldr	r5, [pc, #200]	; (1485c <mem_manage_fault+0x10c>)
   14792:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14794:	0799      	lsls	r1, r3, #30
   14796:	d424      	bmi.n	147e2 <mem_manage_fault+0x92>
	uint32_t mmfar = -EINVAL;
   14798:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1479c:	4d2f      	ldr	r5, [pc, #188]	; (1485c <mem_manage_fault+0x10c>)
   1479e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   147a0:	07d3      	lsls	r3, r2, #31
   147a2:	d504      	bpl.n	147ae <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   147a4:	4831      	ldr	r0, [pc, #196]	; (1486c <mem_manage_fault+0x11c>)
   147a6:	f044 0101 	orr.w	r1, r4, #1
   147aa:	f014 fa00 	bl	28bae <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   147ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147b0:	069d      	lsls	r5, r3, #26
   147b2:	d504      	bpl.n	147be <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   147b4:	482e      	ldr	r0, [pc, #184]	; (14870 <mem_manage_fault+0x120>)
   147b6:	f044 0101 	orr.w	r1, r4, #1
   147ba:	f014 f9f8 	bl	28bae <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   147be:	4d27      	ldr	r5, [pc, #156]	; (1485c <mem_manage_fault+0x10c>)
   147c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147c2:	06d8      	lsls	r0, r3, #27
   147c4:	d425      	bmi.n	14812 <mem_manage_fault+0xc2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   147c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   147c8:	0799      	lsls	r1, r3, #30
   147ca:	d422      	bmi.n	14812 <mem_manage_fault+0xc2>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   147cc:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   147ce:	4a23      	ldr	r2, [pc, #140]	; (1485c <mem_manage_fault+0x10c>)
   147d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   147d2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   147d6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   147d8:	2300      	movs	r3, #0
   147da:	7033      	strb	r3, [r6, #0]

	return reason;
}
   147dc:	4620      	mov	r0, r4
   147de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   147e2:	f044 0a01 	orr.w	sl, r4, #1
   147e6:	4823      	ldr	r0, [pc, #140]	; (14874 <mem_manage_fault+0x124>)
   147e8:	4651      	mov	r1, sl
   147ea:	f014 f9e0 	bl	28bae <log_0>
		uint32_t temp = SCB->MMFAR;
   147ee:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   147f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147f4:	061a      	lsls	r2, r3, #24
   147f6:	d5cf      	bpl.n	14798 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   147f8:	481f      	ldr	r0, [pc, #124]	; (14878 <mem_manage_fault+0x128>)
   147fa:	4652      	mov	r2, sl
   147fc:	4649      	mov	r1, r9
   147fe:	f014 f9e3 	bl	28bc8 <log_1>
			if (from_hard_fault != 0) {
   14802:	f1b8 0f00 	cmp.w	r8, #0
   14806:	d0c9      	beq.n	1479c <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14808:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1480a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1480e:	62ab      	str	r3, [r5, #40]	; 0x28
   14810:	e7c4      	b.n	1479c <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14812:	686b      	ldr	r3, [r5, #4]
   14814:	051a      	lsls	r2, r3, #20
   14816:	d5d9      	bpl.n	147cc <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14818:	4639      	mov	r1, r7
   1481a:	4648      	mov	r0, r9
   1481c:	f7ff ff3a 	bl	14694 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   14820:	4604      	mov	r4, r0
   14822:	b118      	cbz	r0, 1482c <mem_manage_fault+0xdc>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14824:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   14828:	2402      	movs	r4, #2
   1482a:	e7d0      	b.n	147ce <mem_manage_fault+0x7e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1482c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1482e:	06db      	lsls	r3, r3, #27
   14830:	d5cc      	bpl.n	147cc <mem_manage_fault+0x7c>
   14832:	4a12      	ldr	r2, [pc, #72]	; (1487c <mem_manage_fault+0x12c>)
   14834:	4912      	ldr	r1, [pc, #72]	; (14880 <mem_manage_fault+0x130>)
   14836:	4813      	ldr	r0, [pc, #76]	; (14884 <mem_manage_fault+0x134>)
   14838:	f240 1349 	movw	r3, #329	; 0x149
   1483c:	f013 ff98 	bl	28770 <printk>
   14840:	4811      	ldr	r0, [pc, #68]	; (14888 <mem_manage_fault+0x138>)
   14842:	f013 ff95 	bl	28770 <printk>
   14846:	480d      	ldr	r0, [pc, #52]	; (1487c <mem_manage_fault+0x12c>)
   14848:	f240 1149 	movw	r1, #329	; 0x149
   1484c:	f014 f981 	bl	28b52 <assert_post_action>
   14850:	e7bd      	b.n	147ce <mem_manage_fault+0x7e>
   14852:	bf00      	nop
   14854:	0002d948 	.word	0x0002d948
   14858:	0002da10 	.word	0x0002da10
   1485c:	e000ed00 	.word	0xe000ed00
   14860:	0002f5ae 	.word	0x0002f5ae
   14864:	0002f5c4 	.word	0x0002f5c4
   14868:	0002f5f7 	.word	0x0002f5f7
   1486c:	0002f638 	.word	0x0002f638
   14870:	0002f657 	.word	0x0002f657
   14874:	0002f60a 	.word	0x0002f60a
   14878:	0002f622 	.word	0x0002f622
   1487c:	0002f686 	.word	0x0002f686
   14880:	0002f6c0 	.word	0x0002f6c0
   14884:	0002e915 	.word	0x0002e915
   14888:	0002f70a 	.word	0x0002f70a

0001488c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1488c:	b570      	push	{r4, r5, r6, lr}
   1488e:	4b23      	ldr	r3, [pc, #140]	; (1491c <usage_fault.isra.0+0x90>)
   14890:	4c23      	ldr	r4, [pc, #140]	; (14920 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14892:	4d24      	ldr	r5, [pc, #144]	; (14924 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14894:	4824      	ldr	r0, [pc, #144]	; (14928 <usage_fault.isra.0+0x9c>)
   14896:	1ae4      	subs	r4, r4, r3
   14898:	08e4      	lsrs	r4, r4, #3
   1489a:	01a4      	lsls	r4, r4, #6
   1489c:	f044 0601 	orr.w	r6, r4, #1
   148a0:	4631      	mov	r1, r6
   148a2:	f014 f984 	bl	28bae <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   148a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   148a8:	0193      	lsls	r3, r2, #6
   148aa:	d503      	bpl.n	148b4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   148ac:	481f      	ldr	r0, [pc, #124]	; (1492c <usage_fault.isra.0+0xa0>)
   148ae:	4631      	mov	r1, r6
   148b0:	f014 f97d 	bl	28bae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   148b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   148b6:	01dd      	lsls	r5, r3, #7
   148b8:	d504      	bpl.n	148c4 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   148ba:	481d      	ldr	r0, [pc, #116]	; (14930 <usage_fault.isra.0+0xa4>)
   148bc:	f044 0101 	orr.w	r1, r4, #1
   148c0:	f014 f975 	bl	28bae <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   148c4:	4d17      	ldr	r5, [pc, #92]	; (14924 <usage_fault.isra.0+0x98>)
   148c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   148c8:	0310      	lsls	r0, r2, #12
   148ca:	d504      	bpl.n	148d6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   148cc:	4819      	ldr	r0, [pc, #100]	; (14934 <usage_fault.isra.0+0xa8>)
   148ce:	f044 0101 	orr.w	r1, r4, #1
   148d2:	f014 f96c 	bl	28bae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   148d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   148d8:	0359      	lsls	r1, r3, #13
   148da:	d504      	bpl.n	148e6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   148dc:	4816      	ldr	r0, [pc, #88]	; (14938 <usage_fault.isra.0+0xac>)
   148de:	f044 0101 	orr.w	r1, r4, #1
   148e2:	f014 f964 	bl	28bae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   148e6:	4d0f      	ldr	r5, [pc, #60]	; (14924 <usage_fault.isra.0+0x98>)
   148e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   148ea:	0392      	lsls	r2, r2, #14
   148ec:	d504      	bpl.n	148f8 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   148ee:	4813      	ldr	r0, [pc, #76]	; (1493c <usage_fault.isra.0+0xb0>)
   148f0:	f044 0101 	orr.w	r1, r4, #1
   148f4:	f014 f95b 	bl	28bae <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   148f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   148fa:	03db      	lsls	r3, r3, #15
   148fc:	d504      	bpl.n	14908 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   148fe:	4810      	ldr	r0, [pc, #64]	; (14940 <usage_fault.isra.0+0xb4>)
   14900:	f044 0101 	orr.w	r1, r4, #1
   14904:	f014 f953 	bl	28bae <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14908:	4a06      	ldr	r2, [pc, #24]	; (14924 <usage_fault.isra.0+0x98>)
   1490a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1490c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   14910:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   14914:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   14916:	2000      	movs	r0, #0
   14918:	bd70      	pop	{r4, r5, r6, pc}
   1491a:	bf00      	nop
   1491c:	0002d948 	.word	0x0002d948
   14920:	0002da10 	.word	0x0002da10
   14924:	e000ed00 	.word	0xe000ed00
   14928:	0002f72d 	.word	0x0002f72d
   1492c:	0002f745 	.word	0x0002f745
   14930:	0002f758 	.word	0x0002f758
   14934:	0002f772 	.word	0x0002f772
   14938:	0002f790 	.word	0x0002f790
   1493c:	0002f7b5 	.word	0x0002f7b5
   14940:	0002f7cf 	.word	0x0002f7cf

00014944 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14948:	4b2a      	ldr	r3, [pc, #168]	; (149f4 <bus_fault.isra.0+0xb0>)
   1494a:	4c2b      	ldr	r4, [pc, #172]	; (149f8 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1494c:	4d2b      	ldr	r5, [pc, #172]	; (149fc <bus_fault.isra.0+0xb8>)
   1494e:	1ae4      	subs	r4, r4, r3
   14950:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   14952:	01a4      	lsls	r4, r4, #6
   14954:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14958:	4607      	mov	r7, r0
   1495a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1495c:	4828      	ldr	r0, [pc, #160]	; (14a00 <bus_fault.isra.0+0xbc>)
   1495e:	4641      	mov	r1, r8
   14960:	f014 f925 	bl	28bae <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14964:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   14966:	04d1      	lsls	r1, r2, #19
   14968:	d503      	bpl.n	14972 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   1496a:	4826      	ldr	r0, [pc, #152]	; (14a04 <bus_fault.isra.0+0xc0>)
   1496c:	4641      	mov	r1, r8
   1496e:	f014 f91e 	bl	28bae <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14972:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14974:	051a      	lsls	r2, r3, #20
   14976:	d504      	bpl.n	14982 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   14978:	4823      	ldr	r0, [pc, #140]	; (14a08 <bus_fault.isra.0+0xc4>)
   1497a:	f044 0101 	orr.w	r1, r4, #1
   1497e:	f014 f916 	bl	28bae <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14982:	4d1e      	ldr	r5, [pc, #120]	; (149fc <bus_fault.isra.0+0xb8>)
   14984:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14986:	059b      	lsls	r3, r3, #22
   14988:	d512      	bpl.n	149b0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   1498a:	f044 0801 	orr.w	r8, r4, #1
   1498e:	481f      	ldr	r0, [pc, #124]	; (14a0c <bus_fault.isra.0+0xc8>)
   14990:	4641      	mov	r1, r8
   14992:	f014 f90c 	bl	28bae <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   14996:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14998:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1499a:	0418      	lsls	r0, r3, #16
   1499c:	d508      	bpl.n	149b0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1499e:	481c      	ldr	r0, [pc, #112]	; (14a10 <bus_fault.isra.0+0xcc>)
   149a0:	4642      	mov	r2, r8
   149a2:	f014 f911 	bl	28bc8 <log_1>
			if (from_hard_fault != 0) {
   149a6:	b11f      	cbz	r7, 149b0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   149a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   149ae:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   149b0:	4d12      	ldr	r5, [pc, #72]	; (149fc <bus_fault.isra.0+0xb8>)
   149b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149b4:	0559      	lsls	r1, r3, #21
   149b6:	d504      	bpl.n	149c2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   149b8:	4816      	ldr	r0, [pc, #88]	; (14a14 <bus_fault.isra.0+0xd0>)
   149ba:	f044 0101 	orr.w	r1, r4, #1
   149be:	f014 f8f6 	bl	28bae <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   149c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149c4:	05da      	lsls	r2, r3, #23
   149c6:	d50d      	bpl.n	149e4 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   149c8:	4813      	ldr	r0, [pc, #76]	; (14a18 <bus_fault.isra.0+0xd4>)
   149ca:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   149ce:	f014 f8ee 	bl	28bae <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   149d2:	4a0a      	ldr	r2, [pc, #40]	; (149fc <bus_fault.isra.0+0xb8>)
   149d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   149d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   149d8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   149dc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   149de:	7030      	strb	r0, [r6, #0]
}
   149e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   149e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   149e6:	049b      	lsls	r3, r3, #18
   149e8:	d5f3      	bpl.n	149d2 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   149ea:	480c      	ldr	r0, [pc, #48]	; (14a1c <bus_fault.isra.0+0xd8>)
   149ec:	f044 0101 	orr.w	r1, r4, #1
   149f0:	e7ed      	b.n	149ce <bus_fault.isra.0+0x8a>
   149f2:	bf00      	nop
   149f4:	0002d948 	.word	0x0002d948
   149f8:	0002da10 	.word	0x0002da10
   149fc:	e000ed00 	.word	0xe000ed00
   14a00:	0002f7fa 	.word	0x0002f7fa
   14a04:	0002f810 	.word	0x0002f810
   14a08:	0002f5f7 	.word	0x0002f5f7
   14a0c:	0002f821 	.word	0x0002f821
   14a10:	0002f83a 	.word	0x0002f83a
   14a14:	0002f84f 	.word	0x0002f84f
   14a18:	0002f86a 	.word	0x0002f86a
   14a1c:	0002f657 	.word	0x0002f657

00014a20 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14a24:	4b7c      	ldr	r3, [pc, #496]	; (14c18 <z_arm_fault+0x1f8>)
   14a26:	685e      	ldr	r6, [r3, #4]
{
   14a28:	b08a      	sub	sp, #40	; 0x28
   14a2a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14a2c:	f3c6 0408 	ubfx	r4, r6, #0, #9
   14a30:	2700      	movs	r7, #0
   14a32:	f387 8811 	msr	BASEPRI, r7
   14a36:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14a3a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14a3e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14a42:	d10d      	bne.n	14a60 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   14a44:	f002 030c 	and.w	r3, r2, #12
   14a48:	2b08      	cmp	r3, #8
   14a4a:	d11a      	bne.n	14a82 <z_arm_fault+0x62>
   14a4c:	4973      	ldr	r1, [pc, #460]	; (14c1c <z_arm_fault+0x1fc>)
   14a4e:	4b74      	ldr	r3, [pc, #464]	; (14c20 <z_arm_fault+0x200>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   14a50:	4874      	ldr	r0, [pc, #464]	; (14c24 <z_arm_fault+0x204>)
   14a52:	1ac9      	subs	r1, r1, r3
   14a54:	08c9      	lsrs	r1, r1, #3
   14a56:	0189      	lsls	r1, r1, #6
   14a58:	f041 0101 	orr.w	r1, r1, #1
   14a5c:	f014 f8a7 	bl	28bae <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   14a60:	4a71      	ldr	r2, [pc, #452]	; (14c28 <z_arm_fault+0x208>)
   14a62:	4972      	ldr	r1, [pc, #456]	; (14c2c <z_arm_fault+0x20c>)
   14a64:	4872      	ldr	r0, [pc, #456]	; (14c30 <z_arm_fault+0x210>)
   14a66:	f240 33f2 	movw	r3, #1010	; 0x3f2
   14a6a:	f013 fe81 	bl	28770 <printk>
   14a6e:	4871      	ldr	r0, [pc, #452]	; (14c34 <z_arm_fault+0x214>)
   14a70:	f013 fe7e 	bl	28770 <printk>
   14a74:	486c      	ldr	r0, [pc, #432]	; (14c28 <z_arm_fault+0x208>)
   14a76:	f240 31f2 	movw	r1, #1010	; 0x3f2
   14a7a:	f014 f86a 	bl	28b52 <assert_post_action>
   14a7e:	2500      	movs	r5, #0
   14a80:	e005      	b.n	14a8e <z_arm_fault+0x6e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14a82:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   14a84:	bf5c      	itt	pl
   14a86:	4605      	movpl	r5, r0
			*nested_exc = true;
   14a88:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
   14a8a:	2d00      	cmp	r5, #0
   14a8c:	d0e8      	beq.n	14a60 <z_arm_fault+0x40>
	*recoverable = false;
   14a8e:	2300      	movs	r3, #0
   14a90:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   14a94:	1ee3      	subs	r3, r4, #3
   14a96:	2b09      	cmp	r3, #9
   14a98:	f200 80a4 	bhi.w	14be4 <z_arm_fault+0x1c4>
   14a9c:	e8df f003 	tbb	[pc, r3]
   14aa0:	71959105 	.word	0x71959105
   14aa4:	a2a2a2a2 	.word	0xa2a2a2a2
   14aa8:	99a2      	.short	0x99a2
   14aaa:	4a5d      	ldr	r2, [pc, #372]	; (14c20 <z_arm_fault+0x200>)
   14aac:	4e5b      	ldr	r6, [pc, #364]	; (14c1c <z_arm_fault+0x1fc>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   14aae:	4862      	ldr	r0, [pc, #392]	; (14c38 <z_arm_fault+0x218>)
   14ab0:	1ab6      	subs	r6, r6, r2
   14ab2:	08f6      	lsrs	r6, r6, #3
   14ab4:	01b6      	lsls	r6, r6, #6
   14ab6:	f046 0601 	orr.w	r6, r6, #1
   14aba:	4631      	mov	r1, r6
   14abc:	f014 f877 	bl	28bae <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14ac0:	4b55      	ldr	r3, [pc, #340]	; (14c18 <z_arm_fault+0x1f8>)
   14ac2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   14ac4:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14ac8:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   14acc:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14ad0:	d005      	beq.n	14ade <z_arm_fault+0xbe>
		PR_EXC("  Bus fault on vector table read");
   14ad2:	485a      	ldr	r0, [pc, #360]	; (14c3c <z_arm_fault+0x21c>)
   14ad4:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   14ad6:	f014 f86a 	bl	28bae <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14ada:	2400      	movs	r4, #0
}
   14adc:	e006      	b.n	14aec <z_arm_fault+0xcc>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14ae0:	2a00      	cmp	r2, #0
   14ae2:	da1e      	bge.n	14b22 <z_arm_fault+0x102>
		PR_EXC("  Debug event");
   14ae4:	4856      	ldr	r0, [pc, #344]	; (14c40 <z_arm_fault+0x220>)
   14ae6:	4631      	mov	r1, r6
   14ae8:	f014 f861 	bl	28bae <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   14aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14af0:	b9a3      	cbnz	r3, 14b1c <z_arm_fault+0xfc>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14af2:	2220      	movs	r2, #32
   14af4:	4629      	mov	r1, r5
   14af6:	a802      	add	r0, sp, #8
   14af8:	f015 ffcf 	bl	2aa9a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   14afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14afe:	2f00      	cmp	r7, #0
   14b00:	f000 8084 	beq.w	14c0c <z_arm_fault+0x1ec>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   14b04:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14b08:	b922      	cbnz	r2, 14b14 <z_arm_fault+0xf4>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14b0a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   14b0e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14b12:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   14b14:	a902      	add	r1, sp, #8
   14b16:	4620      	mov	r0, r4
   14b18:	f7ff fc7c 	bl	14414 <z_arm_fatal_error>
}
   14b1c:	b00a      	add	sp, #40	; 0x28
   14b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14b24:	005b      	lsls	r3, r3, #1
   14b26:	d53f      	bpl.n	14ba8 <z_arm_fault+0x188>
		PR_EXC("  Fault escalation (see below)");
   14b28:	4846      	ldr	r0, [pc, #280]	; (14c44 <z_arm_fault+0x224>)
   14b2a:	4631      	mov	r1, r6
   14b2c:	f014 f83f 	bl	28bae <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   14b30:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14b32:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   14b36:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14b3a:	429a      	cmp	r2, r3
   14b3c:	d00d      	beq.n	14b5a <z_arm_fault+0x13a>
		} else if (SCB_MMFSR != 0) {
   14b3e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   14b42:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   14b46:	781b      	ldrb	r3, [r3, #0]
   14b48:	b173      	cbz	r3, 14b68 <z_arm_fault+0x148>
			reason = mem_manage_fault(esf, 1, recoverable);
   14b4a:	f10d 0207 	add.w	r2, sp, #7
   14b4e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14b50:	4628      	mov	r0, r5
   14b52:	f7ff fdfd 	bl	14750 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
   14b56:	4604      	mov	r4, r0
		break;
   14b58:	e7c8      	b.n	14aec <z_arm_fault+0xcc>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   14b5a:	6829      	ldr	r1, [r5, #0]
   14b5c:	483a      	ldr	r0, [pc, #232]	; (14c48 <z_arm_fault+0x228>)
   14b5e:	4632      	mov	r2, r6
   14b60:	f014 f832 	bl	28bc8 <log_1>
			reason = esf->basic.r0;
   14b64:	682c      	ldr	r4, [r5, #0]
   14b66:	e7c1      	b.n	14aec <z_arm_fault+0xcc>
		} else if (SCB_BFSR != 0) {
   14b68:	4b38      	ldr	r3, [pc, #224]	; (14c4c <z_arm_fault+0x22c>)
   14b6a:	781b      	ldrb	r3, [r3, #0]
   14b6c:	b12b      	cbz	r3, 14b7a <z_arm_fault+0x15a>
			reason = bus_fault(esf, 1, recoverable);
   14b6e:	f10d 0107 	add.w	r1, sp, #7
   14b72:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   14b74:	f7ff fee6 	bl	14944 <bus_fault.isra.0>
   14b78:	e7ed      	b.n	14b56 <z_arm_fault+0x136>
		} else if (SCB_UFSR != 0) {
   14b7a:	4b35      	ldr	r3, [pc, #212]	; (14c50 <z_arm_fault+0x230>)
   14b7c:	881b      	ldrh	r3, [r3, #0]
   14b7e:	b29b      	uxth	r3, r3
   14b80:	b113      	cbz	r3, 14b88 <z_arm_fault+0x168>
		reason = usage_fault(esf);
   14b82:	f7ff fe83 	bl	1488c <usage_fault.isra.0>
   14b86:	e7e6      	b.n	14b56 <z_arm_fault+0x136>
			__ASSERT(0,
   14b88:	4932      	ldr	r1, [pc, #200]	; (14c54 <z_arm_fault+0x234>)
   14b8a:	4a27      	ldr	r2, [pc, #156]	; (14c28 <z_arm_fault+0x208>)
   14b8c:	4828      	ldr	r0, [pc, #160]	; (14c30 <z_arm_fault+0x210>)
   14b8e:	f240 23c3 	movw	r3, #707	; 0x2c3
   14b92:	f013 fded 	bl	28770 <printk>
   14b96:	4830      	ldr	r0, [pc, #192]	; (14c58 <z_arm_fault+0x238>)
   14b98:	f013 fdea 	bl	28770 <printk>
   14b9c:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   14ba0:	4821      	ldr	r0, [pc, #132]	; (14c28 <z_arm_fault+0x208>)
   14ba2:	f013 ffd6 	bl	28b52 <assert_post_action>
   14ba6:	e7a1      	b.n	14aec <z_arm_fault+0xcc>
   14ba8:	492a      	ldr	r1, [pc, #168]	; (14c54 <z_arm_fault+0x234>)
   14baa:	4a1f      	ldr	r2, [pc, #124]	; (14c28 <z_arm_fault+0x208>)
   14bac:	4820      	ldr	r0, [pc, #128]	; (14c30 <z_arm_fault+0x210>)
   14bae:	f240 23c7 	movw	r3, #711	; 0x2c7
   14bb2:	f013 fddd 	bl	28770 <printk>
   14bb6:	4829      	ldr	r0, [pc, #164]	; (14c5c <z_arm_fault+0x23c>)
   14bb8:	f013 fdda 	bl	28770 <printk>
   14bbc:	f240 21c7 	movw	r1, #711	; 0x2c7
   14bc0:	e7ee      	b.n	14ba0 <z_arm_fault+0x180>
		reason = mem_manage_fault(esf, 0, recoverable);
   14bc2:	f10d 0207 	add.w	r2, sp, #7
   14bc6:	2100      	movs	r1, #0
   14bc8:	e7c2      	b.n	14b50 <z_arm_fault+0x130>
		reason = bus_fault(esf, 0, recoverable);
   14bca:	f10d 0107 	add.w	r1, sp, #7
   14bce:	2000      	movs	r0, #0
   14bd0:	e7d0      	b.n	14b74 <z_arm_fault+0x154>
   14bd2:	4912      	ldr	r1, [pc, #72]	; (14c1c <z_arm_fault+0x1fc>)
   14bd4:	4b12      	ldr	r3, [pc, #72]	; (14c20 <z_arm_fault+0x200>)
	PR_FAULT_INFO(
   14bd6:	4822      	ldr	r0, [pc, #136]	; (14c60 <z_arm_fault+0x240>)
   14bd8:	1ac9      	subs	r1, r1, r3
   14bda:	08c9      	lsrs	r1, r1, #3
   14bdc:	0189      	lsls	r1, r1, #6
   14bde:	f041 0101 	orr.w	r1, r1, #1
   14be2:	e778      	b.n	14ad6 <z_arm_fault+0xb6>
   14be4:	4a0e      	ldr	r2, [pc, #56]	; (14c20 <z_arm_fault+0x200>)
   14be6:	4b0d      	ldr	r3, [pc, #52]	; (14c1c <z_arm_fault+0x1fc>)
	PR_FAULT_INFO("***** %s %d) *****",
   14be8:	481e      	ldr	r0, [pc, #120]	; (14c64 <z_arm_fault+0x244>)
   14bea:	491f      	ldr	r1, [pc, #124]	; (14c68 <z_arm_fault+0x248>)
   14bec:	1a9b      	subs	r3, r3, r2
   14bee:	08db      	lsrs	r3, r3, #3
   14bf0:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   14bf4:	ea4f 1383 	mov.w	r3, r3, lsl #6
   14bf8:	bf18      	it	ne
   14bfa:	4601      	movne	r1, r0
   14bfc:	f043 0301 	orr.w	r3, r3, #1
   14c00:	481a      	ldr	r0, [pc, #104]	; (14c6c <z_arm_fault+0x24c>)
   14c02:	f1a4 0210 	sub.w	r2, r4, #16
   14c06:	f013 fff3 	bl	28bf0 <log_2>
   14c0a:	e766      	b.n	14ada <z_arm_fault+0xba>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14c0c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14c10:	f023 0301 	bic.w	r3, r3, #1
   14c14:	e77d      	b.n	14b12 <z_arm_fault+0xf2>
   14c16:	bf00      	nop
   14c18:	e000ed00 	.word	0xe000ed00
   14c1c:	0002da10 	.word	0x0002da10
   14c20:	0002d948 	.word	0x0002d948
   14c24:	0002f882 	.word	0x0002f882
   14c28:	0002f686 	.word	0x0002f686
   14c2c:	0002f8ad 	.word	0x0002f8ad
   14c30:	0002e915 	.word	0x0002e915
   14c34:	0002f8c0 	.word	0x0002f8c0
   14c38:	0002f8fe 	.word	0x0002f8fe
   14c3c:	0002f915 	.word	0x0002f915
   14c40:	0002f936 	.word	0x0002f936
   14c44:	0002f944 	.word	0x0002f944
   14c48:	0002f963 	.word	0x0002f963
   14c4c:	e000ed29 	.word	0xe000ed29
   14c50:	e000ed2a 	.word	0xe000ed2a
   14c54:	00032bb3 	.word	0x00032bb3
   14c58:	0002f97f 	.word	0x0002f97f
   14c5c:	0002f9a3 	.word	0x0002f9a3
   14c60:	0002f9d3 	.word	0x0002f9d3
   14c64:	0002fa0c 	.word	0x0002fa0c
   14c68:	0002f9f7 	.word	0x0002f9f7
   14c6c:	0002fa25 	.word	0x0002fa25

00014c70 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14c70:	4a02      	ldr	r2, [pc, #8]	; (14c7c <z_arm_fault_init+0xc>)
   14c72:	6953      	ldr	r3, [r2, #20]
   14c74:	f043 0310 	orr.w	r3, r3, #16
   14c78:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   14c7a:	4770      	bx	lr
   14c7c:	e000ed00 	.word	0xe000ed00

00014c80 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14c80:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14c84:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14c88:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   14c8a:	4672      	mov	r2, lr
	bl z_arm_fault
   14c8c:	f7ff fec8 	bl	14a20 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14c90:	bd01      	pop	{r0, pc}
   14c92:	bf00      	nop

00014c94 <z_arm_interrupt_init>:
   14c94:	4804      	ldr	r0, [pc, #16]	; (14ca8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14c96:	2300      	movs	r3, #0
   14c98:	2140      	movs	r1, #64	; 0x40
   14c9a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   14c9c:	3301      	adds	r3, #1
   14c9e:	2b30      	cmp	r3, #48	; 0x30
   14ca0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   14ca4:	d1f9      	bne.n	14c9a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   14ca6:	4770      	bx	lr
   14ca8:	e000e100 	.word	0xe000e100

00014cac <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   14cac:	2000      	movs	r0, #0
    msr CONTROL, r0
   14cae:	f380 8814 	msr	CONTROL, r0
    isb
   14cb2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   14cb6:	f018 fc65 	bl	2d584 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   14cba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   14cbc:	490d      	ldr	r1, [pc, #52]	; (14cf4 <__start+0x48>)
    str r0, [r1]
   14cbe:	6008      	str	r0, [r1, #0]
    dsb
   14cc0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14cc4:	480c      	ldr	r0, [pc, #48]	; (14cf8 <__start+0x4c>)
    msr msp, r0
   14cc6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   14cca:	f000 f829 	bl	14d20 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14cce:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   14cd0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   14cd4:	4809      	ldr	r0, [pc, #36]	; (14cfc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   14cd6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   14cda:	1840      	adds	r0, r0, r1
    msr PSP, r0
   14cdc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   14ce0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14ce4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14ce6:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14ce8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14cec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   14cf0:	f7ff fc44 	bl	1457c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14cf4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14cf8:	20006f80 	.word	0x20006f80
    ldr r0, =z_interrupt_stacks
   14cfc:	20007100 	.word	0x20007100

00014d00 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14d00:	4a06      	ldr	r2, [pc, #24]	; (14d1c <z_arm_clear_arm_mpu_config+0x1c>)
   14d02:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   14d04:	2300      	movs	r3, #0
	int num_regions =
   14d06:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14d0a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   14d0c:	428b      	cmp	r3, r1
   14d0e:	d100      	bne.n	14d12 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   14d10:	4770      	bx	lr
  MPU->RNR = rnr;
   14d12:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   14d14:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   14d16:	3301      	adds	r3, #1
   14d18:	e7f8      	b.n	14d0c <z_arm_clear_arm_mpu_config+0xc>
   14d1a:	bf00      	nop
   14d1c:	e000ed90 	.word	0xe000ed90

00014d20 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14d20:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   14d22:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14d24:	2300      	movs	r3, #0
   14d26:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   14d2a:	f7ff ffe9 	bl	14d00 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   14d2e:	4b14      	ldr	r3, [pc, #80]	; (14d80 <z_arm_init_arch_hw_at_boot+0x60>)
   14d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14d44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14d48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14d4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14d50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14d54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14d58:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14d5c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14d60:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14d64:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14d68:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14d6c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14d70:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14d74:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   14d76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14d7a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14d7e:	bd08      	pop	{r3, pc}
   14d80:	e000e100 	.word	0xe000e100

00014d84 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14d84:	4b06      	ldr	r3, [pc, #24]	; (14da0 <z_impl_k_thread_abort+0x1c>)
   14d86:	689b      	ldr	r3, [r3, #8]
   14d88:	4283      	cmp	r3, r0
   14d8a:	d107      	bne.n	14d9c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14d8c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14d90:	b123      	cbz	r3, 14d9c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14d92:	4a04      	ldr	r2, [pc, #16]	; (14da4 <z_impl_k_thread_abort+0x20>)
   14d94:	6853      	ldr	r3, [r2, #4]
   14d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14d9a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   14d9c:	f00f bda2 	b.w	248e4 <z_thread_abort>
   14da0:	20002cfc 	.word	0x20002cfc
   14da4:	e000ed00 	.word	0xe000ed00

00014da8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14da8:	4b02      	ldr	r3, [pc, #8]	; (14db4 <z_arm_configure_static_mpu_regions+0xc>)
   14daa:	4a03      	ldr	r2, [pc, #12]	; (14db8 <z_arm_configure_static_mpu_regions+0x10>)
   14dac:	4803      	ldr	r0, [pc, #12]	; (14dbc <z_arm_configure_static_mpu_regions+0x14>)
   14dae:	2101      	movs	r1, #1
   14db0:	f000 b884 	b.w	14ebc <arm_core_mpu_configure_static_mpu_regions>
   14db4:	20040000 	.word	0x20040000
   14db8:	20000000 	.word	0x20000000
   14dbc:	0002dd80 	.word	0x0002dd80

00014dc0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   14dc0:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   14dc2:	4b05      	ldr	r3, [pc, #20]	; (14dd8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   14dc4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   14dc6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   14dc8:	4a04      	ldr	r2, [pc, #16]	; (14ddc <z_arm_configure_dynamic_mpu_regions+0x1c>)
   14dca:	2120      	movs	r1, #32
   14dcc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   14dd0:	4618      	mov	r0, r3
   14dd2:	2101      	movs	r1, #1
   14dd4:	f000 b89a 	b.w	14f0c <arm_core_mpu_configure_dynamic_mpu_regions>
   14dd8:	200029a0 	.word	0x200029a0
   14ddc:	150b0000 	.word	0x150b0000

00014de0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   14de2:	4f28      	ldr	r7, [pc, #160]	; (14e84 <mpu_configure_regions+0xa4>)
   14de4:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   14de6:	2100      	movs	r1, #0
   14de8:	42b1      	cmp	r1, r6
   14dea:	da14      	bge.n	14e16 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   14dec:	6844      	ldr	r4, [r0, #4]
   14dee:	2c00      	cmp	r4, #0
   14df0:	d045      	beq.n	14e7e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14df2:	b1c3      	cbz	r3, 14e26 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14df4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   14df8:	ea14 0f0c 	tst.w	r4, ip
   14dfc:	d00d      	beq.n	14e1a <mpu_configure_regions+0x3a>
   14dfe:	4a22      	ldr	r2, [pc, #136]	; (14e88 <mpu_configure_regions+0xa8>)
   14e00:	4b22      	ldr	r3, [pc, #136]	; (14e8c <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14e02:	4823      	ldr	r0, [pc, #140]	; (14e90 <mpu_configure_regions+0xb0>)
   14e04:	1ad2      	subs	r2, r2, r3
   14e06:	08d2      	lsrs	r2, r2, #3
   14e08:	0192      	lsls	r2, r2, #6
   14e0a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14e0e:	f013 fedb 	bl	28bc8 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14e12:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14e16:	4610      	mov	r0, r2
   14e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   14e1a:	2c1f      	cmp	r4, #31
   14e1c:	d9ef      	bls.n	14dfe <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   14e1e:	6805      	ldr	r5, [r0, #0]
		&&
   14e20:	ea1c 0f05 	tst.w	ip, r5
   14e24:	d1eb      	bne.n	14dfe <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14e26:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   14e28:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   14e2a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   14e2e:	6802      	ldr	r2, [r0, #0]
   14e30:	d916      	bls.n	14e60 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   14e32:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14e36:	d815      	bhi.n	14e64 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14e38:	3c01      	subs	r4, #1
   14e3a:	fab4 f484 	clz	r4, r4
   14e3e:	f1c4 041f 	rsb	r4, r4, #31
   14e42:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14e44:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14e46:	ea4c 0404 	orr.w	r4, ip, r4
   14e4a:	d90d      	bls.n	14e68 <mpu_configure_regions+0x88>
   14e4c:	4a0e      	ldr	r2, [pc, #56]	; (14e88 <mpu_configure_regions+0xa8>)
   14e4e:	4b0f      	ldr	r3, [pc, #60]	; (14e8c <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14e50:	4810      	ldr	r0, [pc, #64]	; (14e94 <mpu_configure_regions+0xb4>)
   14e52:	1ad2      	subs	r2, r2, r3
   14e54:	08d2      	lsrs	r2, r2, #3
   14e56:	0192      	lsls	r2, r2, #6
   14e58:	f042 0201 	orr.w	r2, r2, #1
   14e5c:	4629      	mov	r1, r5
   14e5e:	e7d6      	b.n	14e0e <mpu_configure_regions+0x2e>
		return REGION_32B;
   14e60:	2408      	movs	r4, #8
   14e62:	e7ef      	b.n	14e44 <mpu_configure_regions+0x64>
		return REGION_4G;
   14e64:	243e      	movs	r4, #62	; 0x3e
   14e66:	e7ed      	b.n	14e44 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14e68:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   14e6c:	432a      	orrs	r2, r5
   14e6e:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14e72:	f044 0401 	orr.w	r4, r4, #1
   14e76:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14e78:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14e7a:	613c      	str	r4, [r7, #16]
		reg_index++;
   14e7c:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   14e7e:	3101      	adds	r1, #1
   14e80:	300c      	adds	r0, #12
   14e82:	e7b1      	b.n	14de8 <mpu_configure_regions+0x8>
   14e84:	e000ed90 	.word	0xe000ed90
   14e88:	0002da00 	.word	0x0002da00
   14e8c:	0002d948 	.word	0x0002d948
   14e90:	0002fa3c 	.word	0x0002fa3c
   14e94:	0002fa5f 	.word	0x0002fa5f

00014e98 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   14e98:	4b03      	ldr	r3, [pc, #12]	; (14ea8 <arm_core_mpu_enable+0x10>)
   14e9a:	2205      	movs	r2, #5
   14e9c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   14e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14ea2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   14ea6:	4770      	bx	lr
   14ea8:	e000ed90 	.word	0xe000ed90

00014eac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   14eac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14eb0:	4b01      	ldr	r3, [pc, #4]	; (14eb8 <arm_core_mpu_disable+0xc>)
   14eb2:	2200      	movs	r2, #0
   14eb4:	605a      	str	r2, [r3, #4]
}
   14eb6:	4770      	bx	lr
   14eb8:	e000ed90 	.word	0xe000ed90

00014ebc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14ebc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14ebe:	4d0e      	ldr	r5, [pc, #56]	; (14ef8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14ec0:	2301      	movs	r3, #1
   14ec2:	782a      	ldrb	r2, [r5, #0]
   14ec4:	460c      	mov	r4, r1
   14ec6:	f7ff ff8b 	bl	14de0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14eca:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   14ecc:	3016      	adds	r0, #22
   14ece:	d111      	bne.n	14ef4 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14ed0:	f240 1311 	movw	r3, #273	; 0x111
   14ed4:	4a09      	ldr	r2, [pc, #36]	; (14efc <arm_core_mpu_configure_static_mpu_regions+0x40>)
   14ed6:	490a      	ldr	r1, [pc, #40]	; (14f00 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   14ed8:	480a      	ldr	r0, [pc, #40]	; (14f04 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   14eda:	f013 fc49 	bl	28770 <printk>
   14ede:	4621      	mov	r1, r4
   14ee0:	4809      	ldr	r0, [pc, #36]	; (14f08 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   14ee2:	f013 fc45 	bl	28770 <printk>
			regions_num);
	}
}
   14ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   14eea:	4804      	ldr	r0, [pc, #16]	; (14efc <arm_core_mpu_configure_static_mpu_regions+0x40>)
   14eec:	f240 1111 	movw	r1, #273	; 0x111
   14ef0:	f013 be2f 	b.w	28b52 <assert_post_action>
}
   14ef4:	bd38      	pop	{r3, r4, r5, pc}
   14ef6:	bf00      	nop
   14ef8:	20003762 	.word	0x20003762
   14efc:	0002fa85 	.word	0x0002fa85
   14f00:	00032bb3 	.word	0x00032bb3
   14f04:	0002e915 	.word	0x0002e915
   14f08:	0002fabc 	.word	0x0002fabc

00014f0c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   14f0c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14f0e:	4a12      	ldr	r2, [pc, #72]	; (14f58 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   14f10:	2300      	movs	r3, #0
   14f12:	7812      	ldrb	r2, [r2, #0]
   14f14:	460c      	mov	r4, r1
   14f16:	f7ff ff63 	bl	14de0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14f1a:	f110 0f16 	cmn.w	r0, #22
   14f1e:	d008      	beq.n	14f32 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   14f20:	4b0e      	ldr	r3, [pc, #56]	; (14f5c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   14f22:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   14f24:	2807      	cmp	r0, #7
   14f26:	dd00      	ble.n	14f2a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14f28:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   14f2a:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   14f2c:	611a      	str	r2, [r3, #16]
   14f2e:	3001      	adds	r0, #1
   14f30:	e7f8      	b.n	14f24 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14f32:	4a0b      	ldr	r2, [pc, #44]	; (14f60 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   14f34:	490b      	ldr	r1, [pc, #44]	; (14f64 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   14f36:	480c      	ldr	r0, [pc, #48]	; (14f68 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   14f38:	f44f 7398 	mov.w	r3, #304	; 0x130
   14f3c:	f013 fc18 	bl	28770 <printk>
   14f40:	4621      	mov	r1, r4
   14f42:	480a      	ldr	r0, [pc, #40]	; (14f6c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   14f44:	f013 fc14 	bl	28770 <printk>
}
   14f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   14f4c:	4804      	ldr	r0, [pc, #16]	; (14f60 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   14f4e:	f44f 7198 	mov.w	r1, #304	; 0x130
   14f52:	f013 bdfe 	b.w	28b52 <assert_post_action>
   14f56:	bf00      	nop
   14f58:	20003762 	.word	0x20003762
   14f5c:	e000ed90 	.word	0xe000ed90
   14f60:	0002fa85 	.word	0x0002fa85
   14f64:	00032bb3 	.word	0x00032bb3
   14f68:	0002e915 	.word	0x0002e915
   14f6c:	0002fae8 	.word	0x0002fae8

00014f70 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14f70:	4925      	ldr	r1, [pc, #148]	; (15008 <z_arm_mpu_init+0x98>)
{
   14f72:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14f74:	680c      	ldr	r4, [r1, #0]
   14f76:	2c08      	cmp	r4, #8
   14f78:	d913      	bls.n	14fa2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   14f7a:	f44f 73a4 	mov.w	r3, #328	; 0x148
   14f7e:	4a23      	ldr	r2, [pc, #140]	; (1500c <z_arm_mpu_init+0x9c>)
   14f80:	4923      	ldr	r1, [pc, #140]	; (15010 <z_arm_mpu_init+0xa0>)
   14f82:	4824      	ldr	r0, [pc, #144]	; (15014 <z_arm_mpu_init+0xa4>)
   14f84:	f013 fbf4 	bl	28770 <printk>
   14f88:	4823      	ldr	r0, [pc, #140]	; (15018 <z_arm_mpu_init+0xa8>)
   14f8a:	2208      	movs	r2, #8
   14f8c:	4621      	mov	r1, r4
   14f8e:	f013 fbef 	bl	28770 <printk>
   14f92:	481e      	ldr	r0, [pc, #120]	; (1500c <z_arm_mpu_init+0x9c>)
   14f94:	f44f 71a4 	mov.w	r1, #328	; 0x148
   14f98:	f013 fddb 	bl	28b52 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   14f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   14fa0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   14fa2:	f7ff ff83 	bl	14eac <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14fa6:	6848      	ldr	r0, [r1, #4]
   14fa8:	491c      	ldr	r1, [pc, #112]	; (1501c <z_arm_mpu_init+0xac>)
   14faa:	2200      	movs	r2, #0
   14fac:	4294      	cmp	r4, r2
   14fae:	f100 000c 	add.w	r0, r0, #12
   14fb2:	d119      	bne.n	14fe8 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   14fb4:	4b1a      	ldr	r3, [pc, #104]	; (15020 <z_arm_mpu_init+0xb0>)
   14fb6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   14fb8:	f7ff ff6e 	bl	14e98 <arm_core_mpu_enable>
	__ASSERT(
   14fbc:	680b      	ldr	r3, [r1, #0]
   14fbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14fc2:	2b08      	cmp	r3, #8
   14fc4:	d00e      	beq.n	14fe4 <z_arm_mpu_init+0x74>
   14fc6:	4917      	ldr	r1, [pc, #92]	; (15024 <z_arm_mpu_init+0xb4>)
   14fc8:	4a10      	ldr	r2, [pc, #64]	; (1500c <z_arm_mpu_init+0x9c>)
   14fca:	4812      	ldr	r0, [pc, #72]	; (15014 <z_arm_mpu_init+0xa4>)
   14fcc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   14fd0:	f013 fbce 	bl	28770 <printk>
   14fd4:	4814      	ldr	r0, [pc, #80]	; (15028 <z_arm_mpu_init+0xb8>)
   14fd6:	f013 fbcb 	bl	28770 <printk>
   14fda:	480c      	ldr	r0, [pc, #48]	; (1500c <z_arm_mpu_init+0x9c>)
   14fdc:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   14fe0:	f013 fdb7 	bl	28b52 <assert_post_action>
	return 0;
   14fe4:	2000      	movs	r0, #0
   14fe6:	e7db      	b.n	14fa0 <z_arm_mpu_init+0x30>
   14fe8:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14fea:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   14fee:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14ff2:	4313      	orrs	r3, r2
   14ff4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14ff8:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14ffa:	f850 3c04 	ldr.w	r3, [r0, #-4]
   14ffe:	f043 0301 	orr.w	r3, r3, #1
   15002:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15004:	3201      	adds	r2, #1
   15006:	e7d1      	b.n	14fac <z_arm_mpu_init+0x3c>
   15008:	0002dd8c 	.word	0x0002dd8c
   1500c:	0002fa85 	.word	0x0002fa85
   15010:	00032bb3 	.word	0x00032bb3
   15014:	0002e915 	.word	0x0002e915
   15018:	0002fb15 	.word	0x0002fb15
   1501c:	e000ed90 	.word	0xe000ed90
   15020:	20003762 	.word	0x20003762
   15024:	0002fb49 	.word	0x0002fb49
   15028:	0002fb99 	.word	0x0002fb99

0001502c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1502c:	4b01      	ldr	r3, [pc, #4]	; (15034 <__stdout_hook_install+0x8>)
   1502e:	6018      	str	r0, [r3, #0]
}
   15030:	4770      	bx	lr
   15032:	bf00      	nop
   15034:	200004b8 	.word	0x200004b8

00015038 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   15038:	b40c      	push	{r2, r3}
   1503a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   1503c:	b909      	cbnz	r1, 15042 <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   1503e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   15042:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   15046:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   15048:	9a06      	ldr	r2, [sp, #24]
   1504a:	4806      	ldr	r0, [pc, #24]	; (15064 <snprintf+0x2c>)
	va_start(vargs, format);
   1504c:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   1504e:	a902      	add	r1, sp, #8
   15050:	f7fc fc92 	bl	11978 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   15054:	9b02      	ldr	r3, [sp, #8]
   15056:	2200      	movs	r2, #0
   15058:	701a      	strb	r2, [r3, #0]
	return r;
}
   1505a:	b005      	add	sp, #20
   1505c:	f85d eb04 	ldr.w	lr, [sp], #4
   15060:	b002      	add	sp, #8
   15062:	4770      	bx	lr
   15064:	0002aac9 	.word	0x0002aac9

00015068 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   15068:	f04f 0340 	mov.w	r3, #64	; 0x40
   1506c:	f3ef 8111 	mrs	r1, BASEPRI
   15070:	f383 8812 	msr	BASEPRI_MAX, r3
   15074:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15078:	4a0f      	ldr	r2, [pc, #60]	; (150b8 <nordicsemi_nrf52_init+0x50>)
   1507a:	2301      	movs	r3, #1
   1507c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15084:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   15088:	4a0c      	ldr	r2, [pc, #48]	; (150bc <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1508a:	6812      	ldr	r2, [r2, #0]
   1508c:	2a08      	cmp	r2, #8
   1508e:	d108      	bne.n	150a2 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   15090:	4a0b      	ldr	r2, [pc, #44]	; (150c0 <nordicsemi_nrf52_init+0x58>)
   15092:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
   15094:	2a05      	cmp	r2, #5
   15096:	d804      	bhi.n	150a2 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   15098:	480a      	ldr	r0, [pc, #40]	; (150c4 <nordicsemi_nrf52_init+0x5c>)
   1509a:	5c82      	ldrb	r2, [r0, r2]
   1509c:	b10a      	cbz	r2, 150a2 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1509e:	4a0a      	ldr	r2, [pc, #40]	; (150c8 <nordicsemi_nrf52_init+0x60>)
   150a0:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   150a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   150a6:	2201      	movs	r2, #1
   150a8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   150ac:	f381 8811 	msr	BASEPRI, r1
   150b0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   150b4:	2000      	movs	r0, #0
   150b6:	4770      	bx	lr
   150b8:	4001e000 	.word	0x4001e000
   150bc:	10000130 	.word	0x10000130
   150c0:	10000134 	.word	0x10000134
   150c4:	0002fbcd 	.word	0x0002fbcd
   150c8:	40000638 	.word	0x40000638

000150cc <sys_arch_reboot>:
    *p_gpregret = val;
   150cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   150d0:	b2c0      	uxtb	r0, r0
   150d2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   150d6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   150da:	4905      	ldr	r1, [pc, #20]	; (150f0 <sys_arch_reboot+0x24>)
   150dc:	4b05      	ldr	r3, [pc, #20]	; (150f4 <sys_arch_reboot+0x28>)
   150de:	68ca      	ldr	r2, [r1, #12]
   150e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   150e4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   150e6:	60cb      	str	r3, [r1, #12]
   150e8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   150ec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   150ee:	e7fd      	b.n	150ec <sys_arch_reboot+0x20>
   150f0:	e000ed00 	.word	0xe000ed00
   150f4:	05fa0004 	.word	0x05fa0004

000150f8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   150f8:	b120      	cbz	r0, 15104 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   150fa:	4b03      	ldr	r3, [pc, #12]	; (15108 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   150fc:	0180      	lsls	r0, r0, #6
   150fe:	f043 0301 	orr.w	r3, r3, #1
   15102:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15104:	4770      	bx	lr
   15106:	bf00      	nop
   15108:	0002db40 	.word	0x0002db40

0001510c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1510c:	4b0e      	ldr	r3, [pc, #56]	; (15148 <bt_hex_real+0x3c>)
   1510e:	2940      	cmp	r1, #64	; 0x40
{
   15110:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   15112:	bf28      	it	cs
   15114:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   15116:	4c0d      	ldr	r4, [pc, #52]	; (1514c <bt_hex_real+0x40>)
   15118:	1846      	adds	r6, r0, r1
   1511a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   1511c:	42b0      	cmp	r0, r6
   1511e:	f103 0302 	add.w	r3, r3, #2
   15122:	d104      	bne.n	1512e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15124:	2300      	movs	r3, #0
   15126:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1512a:	4807      	ldr	r0, [pc, #28]	; (15148 <bt_hex_real+0x3c>)
   1512c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   1512e:	7802      	ldrb	r2, [r0, #0]
   15130:	0912      	lsrs	r2, r2, #4
   15132:	5ca2      	ldrb	r2, [r4, r2]
   15134:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15138:	f810 2b01 	ldrb.w	r2, [r0], #1
   1513c:	f002 020f 	and.w	r2, r2, #15
   15140:	5ca2      	ldrb	r2, [r4, r2]
   15142:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15146:	e7e9      	b.n	1511c <bt_hex_real+0x10>
   15148:	20003763 	.word	0x20003763
   1514c:	0002fbd3 	.word	0x0002fbd3

00015150 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   15150:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15152:	7803      	ldrb	r3, [r0, #0]
   15154:	b08b      	sub	sp, #44	; 0x2c
   15156:	4604      	mov	r4, r0
   15158:	ad07      	add	r5, sp, #28
   1515a:	2b03      	cmp	r3, #3
   1515c:	d821      	bhi.n	151a2 <bt_addr_le_str_real+0x52>
   1515e:	e8df f003 	tbb	[pc, r3]
   15162:	1a02      	.short	0x1a02
   15164:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   15166:	4912      	ldr	r1, [pc, #72]	; (151b0 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   15168:	4628      	mov	r0, r5
   1516a:	f015 fc1e 	bl	2a9aa <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1516e:	7863      	ldrb	r3, [r4, #1]
   15170:	9304      	str	r3, [sp, #16]
   15172:	78a3      	ldrb	r3, [r4, #2]
   15174:	9303      	str	r3, [sp, #12]
   15176:	78e3      	ldrb	r3, [r4, #3]
   15178:	9302      	str	r3, [sp, #8]
   1517a:	7923      	ldrb	r3, [r4, #4]
   1517c:	9301      	str	r3, [sp, #4]
   1517e:	7963      	ldrb	r3, [r4, #5]
   15180:	9300      	str	r3, [sp, #0]
   15182:	4a0c      	ldr	r2, [pc, #48]	; (151b4 <bt_addr_le_str_real+0x64>)
   15184:	79a3      	ldrb	r3, [r4, #6]
   15186:	9505      	str	r5, [sp, #20]
   15188:	211e      	movs	r1, #30
   1518a:	480b      	ldr	r0, [pc, #44]	; (151b8 <bt_addr_le_str_real+0x68>)
   1518c:	f013 fafd 	bl	2878a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15190:	4809      	ldr	r0, [pc, #36]	; (151b8 <bt_addr_le_str_real+0x68>)
   15192:	b00b      	add	sp, #44	; 0x2c
   15194:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15196:	4909      	ldr	r1, [pc, #36]	; (151bc <bt_addr_le_str_real+0x6c>)
   15198:	e7e6      	b.n	15168 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   1519a:	4909      	ldr	r1, [pc, #36]	; (151c0 <bt_addr_le_str_real+0x70>)
   1519c:	e7e4      	b.n	15168 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   1519e:	4909      	ldr	r1, [pc, #36]	; (151c4 <bt_addr_le_str_real+0x74>)
   151a0:	e7e2      	b.n	15168 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   151a2:	4a09      	ldr	r2, [pc, #36]	; (151c8 <bt_addr_le_str_real+0x78>)
   151a4:	210a      	movs	r1, #10
   151a6:	4628      	mov	r0, r5
   151a8:	f013 faef 	bl	2878a <snprintk>
		break;
   151ac:	e7df      	b.n	1516e <bt_addr_le_str_real+0x1e>
   151ae:	bf00      	nop
   151b0:	0002e528 	.word	0x0002e528
   151b4:	0002e54a 	.word	0x0002e54a
   151b8:	200037e4 	.word	0x200037e4
   151bc:	0002e52f 	.word	0x0002e52f
   151c0:	0002e536 	.word	0x0002e536
   151c4:	0002e540 	.word	0x0002e540
   151c8:	0003157b 	.word	0x0003157b

000151cc <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   151cc:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   151ce:	b570      	push	{r4, r5, r6, lr}
   151d0:	4604      	mov	r4, r0
   151d2:	460d      	mov	r5, r1
   151d4:	f101 0620 	add.w	r6, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   151d8:	d919      	bls.n	1520e <sys_memcpy_swap.constprop.0+0x42>
   151da:	42b0      	cmp	r0, r6
   151dc:	d20e      	bcs.n	151fc <sys_memcpy_swap.constprop.0+0x30>
   151de:	490e      	ldr	r1, [pc, #56]	; (15218 <sys_memcpy_swap.constprop.0+0x4c>)
   151e0:	4a0e      	ldr	r2, [pc, #56]	; (1521c <sys_memcpy_swap.constprop.0+0x50>)
   151e2:	480f      	ldr	r0, [pc, #60]	; (15220 <sys_memcpy_swap.constprop.0+0x54>)
   151e4:	f240 2317 	movw	r3, #535	; 0x217
   151e8:	f013 fac2 	bl	28770 <printk>
   151ec:	480d      	ldr	r0, [pc, #52]	; (15224 <sys_memcpy_swap.constprop.0+0x58>)
   151ee:	f013 fabf 	bl	28770 <printk>
   151f2:	480a      	ldr	r0, [pc, #40]	; (1521c <sys_memcpy_swap.constprop.0+0x50>)
   151f4:	f240 2117 	movw	r1, #535	; 0x217
   151f8:	f013 fcab 	bl	28b52 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   151fc:	4633      	mov	r3, r6
   151fe:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   15200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   15204:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   15208:	42ab      	cmp	r3, r5
   1520a:	d1f9      	bne.n	15200 <sys_memcpy_swap.constprop.0+0x34>
	}
}
   1520c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1520e:	d0e6      	beq.n	151de <sys_memcpy_swap.constprop.0+0x12>
   15210:	f100 0320 	add.w	r3, r0, #32
   15214:	4299      	cmp	r1, r3
   15216:	e7e1      	b.n	151dc <sys_memcpy_swap.constprop.0+0x10>
   15218:	0002fc16 	.word	0x0002fc16
   1521c:	0002fbeb 	.word	0x0002fbeb
   15220:	0002e915 	.word	0x0002e915
   15224:	0002fc6d 	.word	0x0002fc6d

00015228 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   15228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1522c:	4b6f      	ldr	r3, [pc, #444]	; (153ec <ecc_thread+0x1c4>)
   1522e:	4d70      	ldr	r5, [pc, #448]	; (153f0 <ecc_thread+0x1c8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15230:	4e70      	ldr	r6, [pc, #448]	; (153f4 <ecc_thread+0x1cc>)
	return z_impl_k_sem_take(sem, timeout);
   15232:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 15424 <ecc_thread+0x1fc>
   15236:	1aed      	subs	r5, r5, r3
   15238:	08ed      	lsrs	r5, r5, #3
   1523a:	4637      	mov	r7, r6
   1523c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15244:	4648      	mov	r0, r9
   15246:	f00d fc4b 	bl	22ae0 <z_impl_k_sem_take>
   1524a:	f3bf 8f5b 	dmb	ish
   1524e:	6834      	ldr	r4, [r6, #0]
   15250:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   15254:	f014 0401 	ands.w	r4, r4, #1
   15258:	d05b      	beq.n	15312 <ecc_thread+0xea>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   1525a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 15408 <ecc_thread+0x1e0>
   1525e:	4c66      	ldr	r4, [pc, #408]	; (153f8 <ecc_thread+0x1d0>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   15260:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 15410 <ecc_thread+0x1e8>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   15264:	4865      	ldr	r0, [pc, #404]	; (153fc <ecc_thread+0x1d4>)
   15266:	4652      	mov	r2, sl
   15268:	4621      	mov	r1, r4
   1526a:	f014 fa63 	bl	29734 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   1526e:	bbe8      	cbnz	r0, 152ec <ecc_thread+0xc4>
			BT_ERR("Failed to create ECC public/private pair");
   15270:	01a9      	lsls	r1, r5, #6
   15272:	4863      	ldr	r0, [pc, #396]	; (15400 <ecc_thread+0x1d8>)
   15274:	f041 0101 	orr.w	r1, r1, #1
   15278:	f013 fc99 	bl	28bae <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   1527c:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15288:	2001      	movs	r0, #1
   1528a:	f000 faff 	bl	1588c <bt_buf_get_rx>
   1528e:	f100 0808 	add.w	r8, r0, #8
   15292:	2102      	movs	r1, #2
   15294:	4604      	mov	r4, r0
   15296:	4640      	mov	r0, r8
   15298:	f008 fd3a 	bl	1dd10 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1529c:	233e      	movs	r3, #62	; 0x3e
   1529e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   152a0:	2342      	movs	r3, #66	; 0x42
   152a2:	7043      	strb	r3, [r0, #1]
   152a4:	2101      	movs	r1, #1
   152a6:	4640      	mov	r0, r8
   152a8:	f008 fd32 	bl	1dd10 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   152ac:	2308      	movs	r3, #8
   152ae:	7003      	strb	r3, [r0, #0]
   152b0:	2141      	movs	r1, #65	; 0x41
   152b2:	4640      	mov	r0, r8
   152b4:	f008 fd2c 	bl	1dd10 <net_buf_simple_add>
   152b8:	4680      	mov	r8, r0
	evt->status = status;
   152ba:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
   152be:	f1ba 0f00 	cmp.w	sl, #0
   152c2:	d01d      	beq.n	15300 <ecc_thread+0xd8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   152c4:	2240      	movs	r2, #64	; 0x40
   152c6:	2100      	movs	r1, #0
   152c8:	f015 fbf2 	bl	2aab0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   152cc:	f3bf 8f5b 	dmb	ish
   152d0:	e857 3f00 	ldrex	r3, [r7]
   152d4:	f023 0301 	bic.w	r3, r3, #1
   152d8:	e847 3200 	strex	r2, r3, [r7]
   152dc:	2a00      	cmp	r2, #0
   152de:	d1f7      	bne.n	152d0 <ecc_thread+0xa8>
   152e0:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   152e4:	4620      	mov	r0, r4
	bt_recv(buf);
   152e6:	f001 fc7b 	bl	16be0 <bt_recv>
}
   152ea:	e7a7      	b.n	1523c <ecc_thread+0x14>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   152ec:	2220      	movs	r2, #32
   152ee:	4641      	mov	r1, r8
   152f0:	4620      	mov	r0, r4
   152f2:	f015 fbab 	bl	2aa4c <memcmp>
   152f6:	2800      	cmp	r0, #0
   152f8:	d0b4      	beq.n	15264 <ecc_thread+0x3c>
	return 0;
   152fa:	f04f 0a00 	mov.w	sl, #0
   152fe:	e7bf      	b.n	15280 <ecc_thread+0x58>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   15300:	493e      	ldr	r1, [pc, #248]	; (153fc <ecc_thread+0x1d4>)
   15302:	f7ff ff63 	bl	151cc <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   15306:	493f      	ldr	r1, [pc, #252]	; (15404 <ecc_thread+0x1dc>)
   15308:	f108 0021 	add.w	r0, r8, #33	; 0x21
   1530c:	f7ff ff5e 	bl	151cc <sys_memcpy_swap.constprop.0>
   15310:	e7dc      	b.n	152cc <ecc_thread+0xa4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15312:	f3bf 8f5b 	dmb	ish
   15316:	6833      	ldr	r3, [r6, #0]
   15318:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   1531c:	079b      	lsls	r3, r3, #30
   1531e:	d557      	bpl.n	153d0 <ecc_thread+0x1a8>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   15320:	4939      	ldr	r1, [pc, #228]	; (15408 <ecc_thread+0x1e0>)
   15322:	4836      	ldr	r0, [pc, #216]	; (153fc <ecc_thread+0x1d4>)
   15324:	f015 f8d5 	bl	2a4d2 <uECC_valid_public_key>
	if (ret < 0) {
   15328:	1e01      	subs	r1, r0, #0
   1532a:	da38      	bge.n	1539e <ecc_thread+0x176>
		BT_ERR("public key is not valid (ret %d)", ret);
   1532c:	01aa      	lsls	r2, r5, #6
   1532e:	4837      	ldr	r0, [pc, #220]	; (1540c <ecc_thread+0x1e4>)
   15330:	f042 0201 	orr.w	r2, r2, #1
   15334:	f013 fc48 	bl	28bc8 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   15338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1533c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15340:	2001      	movs	r0, #1
   15342:	f000 faa3 	bl	1588c <bt_buf_get_rx>
   15346:	f100 0a08 	add.w	sl, r0, #8
   1534a:	2102      	movs	r1, #2
   1534c:	4680      	mov	r8, r0
   1534e:	4650      	mov	r0, sl
   15350:	f008 fcde 	bl	1dd10 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   15354:	233e      	movs	r3, #62	; 0x3e
   15356:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   15358:	2322      	movs	r3, #34	; 0x22
   1535a:	7043      	strb	r3, [r0, #1]
   1535c:	2101      	movs	r1, #1
   1535e:	4650      	mov	r0, sl
   15360:	f008 fcd6 	bl	1dd10 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   15364:	2309      	movs	r3, #9
   15366:	7003      	strb	r3, [r0, #0]
   15368:	2121      	movs	r1, #33	; 0x21
   1536a:	4650      	mov	r0, sl
   1536c:	f008 fcd0 	bl	1dd10 <net_buf_simple_add>
   15370:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   15372:	3001      	adds	r0, #1
   15374:	bb34      	cbnz	r4, 153c4 <ecc_thread+0x19c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   15376:	221f      	movs	r2, #31
   15378:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1537a:	21ff      	movs	r1, #255	; 0xff
   1537c:	2220      	movs	r2, #32
   1537e:	f015 fb97 	bl	2aab0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15382:	f3bf 8f5b 	dmb	ish
   15386:	e857 3f00 	ldrex	r3, [r7]
   1538a:	f023 0302 	bic.w	r3, r3, #2
   1538e:	e847 3200 	strex	r2, r3, [r7]
   15392:	2a00      	cmp	r2, #0
   15394:	d1f7      	bne.n	15386 <ecc_thread+0x15e>
   15396:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   1539a:	4640      	mov	r0, r8
   1539c:	e7a3      	b.n	152e6 <ecc_thread+0xbe>
		ret = uECC_shared_secret(ecc.public_key_be,
   1539e:	4916      	ldr	r1, [pc, #88]	; (153f8 <ecc_thread+0x1d0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   153a0:	f3bf 8f5b 	dmb	ish
   153a4:	6833      	ldr	r3, [r6, #0]
   153a6:	481a      	ldr	r0, [pc, #104]	; (15410 <ecc_thread+0x1e8>)
   153a8:	f3bf 8f5b 	dmb	ish
   153ac:	f013 0f04 	tst.w	r3, #4
   153b0:	f101 0220 	add.w	r2, r1, #32
   153b4:	4b14      	ldr	r3, [pc, #80]	; (15408 <ecc_thread+0x1e0>)
   153b6:	bf18      	it	ne
   153b8:	4601      	movne	r1, r0
   153ba:	4610      	mov	r0, r2
   153bc:	f014 fa09 	bl	297d2 <uECC_shared_secret>
   153c0:	4604      	mov	r4, r0
   153c2:	e7b9      	b.n	15338 <ecc_thread+0x110>
		evt->status = 0U;
   153c4:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   153c6:	490d      	ldr	r1, [pc, #52]	; (153fc <ecc_thread+0x1d4>)
		evt->status = 0U;
   153c8:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   153ca:	f7ff feff 	bl	151cc <sys_memcpy_swap.constprop.0>
   153ce:	e7d8      	b.n	15382 <ecc_thread+0x15a>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
   153d0:	4a10      	ldr	r2, [pc, #64]	; (15414 <ecc_thread+0x1ec>)
   153d2:	4911      	ldr	r1, [pc, #68]	; (15418 <ecc_thread+0x1f0>)
   153d4:	4811      	ldr	r0, [pc, #68]	; (1541c <ecc_thread+0x1f4>)
   153d6:	23dd      	movs	r3, #221	; 0xdd
   153d8:	f013 f9ca 	bl	28770 <printk>
   153dc:	4810      	ldr	r0, [pc, #64]	; (15420 <ecc_thread+0x1f8>)
   153de:	f013 f9c7 	bl	28770 <printk>
   153e2:	480c      	ldr	r0, [pc, #48]	; (15414 <ecc_thread+0x1ec>)
   153e4:	21dd      	movs	r1, #221	; 0xdd
   153e6:	f013 fbb4 	bl	28b52 <assert_post_action>
	while (true) {
   153ea:	e727      	b.n	1523c <ecc_thread+0x14>
   153ec:	0002d948 	.word	0x0002d948
   153f0:	0002d980 	.word	0x0002d980
   153f4:	200029ac 	.word	0x200029ac
   153f8:	20003802 	.word	0x20003802
   153fc:	20003822 	.word	0x20003822
   15400:	0002fc9f 	.word	0x0002fc9f
   15404:	20003842 	.word	0x20003842
   15408:	0002ddac 	.word	0x0002ddac
   1540c:	0002fcc8 	.word	0x0002fcc8
   15410:	0002fd46 	.word	0x0002fd46
   15414:	0002fce9 	.word	0x0002fce9
   15418:	00032bb3 	.word	0x00032bb3
   1541c:	0002e915 	.word	0x0002e915
   15420:	0002fd1c 	.word	0x0002fd1c
   15424:	200008dc 	.word	0x200008dc

00015428 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   15428:	b570      	push	{r4, r5, r6, lr}
   1542a:	4c21      	ldr	r4, [pc, #132]	; (154b0 <le_gen_dhkey+0x88>)
   1542c:	f3bf 8f5b 	dmb	ish
   15430:	6823      	ldr	r3, [r4, #0]
   15432:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   15436:	07da      	lsls	r2, r3, #31
{
   15438:	4606      	mov	r6, r0
   1543a:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   1543c:	d501      	bpl.n	15442 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1543e:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   15440:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   15442:	2901      	cmp	r1, #1
   15444:	d831      	bhi.n	154aa <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15446:	f3bf 8f5b 	dmb	ish
   1544a:	e854 3f00 	ldrex	r3, [r4]
   1544e:	f043 0202 	orr.w	r2, r3, #2
   15452:	e844 2100 	strex	r1, r2, [r4]
   15456:	2900      	cmp	r1, #0
   15458:	d1f7      	bne.n	1544a <le_gen_dhkey+0x22>
   1545a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   1545e:	079b      	lsls	r3, r3, #30
   15460:	d4ed      	bmi.n	1543e <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   15462:	4814      	ldr	r0, [pc, #80]	; (154b4 <le_gen_dhkey+0x8c>)
   15464:	4631      	mov	r1, r6
   15466:	f7ff feb1 	bl	151cc <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   1546a:	4813      	ldr	r0, [pc, #76]	; (154b8 <le_gen_dhkey+0x90>)
   1546c:	f106 0120 	add.w	r1, r6, #32
   15470:	f7ff feac 	bl	151cc <sys_memcpy_swap.constprop.0>
   15474:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   15478:	b175      	cbz	r5, 15498 <le_gen_dhkey+0x70>
   1547a:	e854 3f00 	ldrex	r3, [r4]
   1547e:	f043 0304 	orr.w	r3, r3, #4
   15482:	e844 3200 	strex	r2, r3, [r4]
   15486:	2a00      	cmp	r2, #0
   15488:	d1f7      	bne.n	1547a <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1548a:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   1548e:	480b      	ldr	r0, [pc, #44]	; (154bc <le_gen_dhkey+0x94>)
   15490:	f00d fae2 	bl	22a58 <z_impl_k_sem_give>
   15494:	2000      	movs	r0, #0
   15496:	e7d3      	b.n	15440 <le_gen_dhkey+0x18>
   15498:	e854 3f00 	ldrex	r3, [r4]
   1549c:	f023 0304 	bic.w	r3, r3, #4
   154a0:	e844 3200 	strex	r2, r3, [r4]
   154a4:	2a00      	cmp	r2, #0
   154a6:	d0f0      	beq.n	1548a <le_gen_dhkey+0x62>
   154a8:	e7f6      	b.n	15498 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   154aa:	2012      	movs	r0, #18
   154ac:	e7c8      	b.n	15440 <le_gen_dhkey+0x18>
   154ae:	bf00      	nop
   154b0:	200029ac 	.word	0x200029ac
   154b4:	20003822 	.word	0x20003822
   154b8:	20003842 	.word	0x20003842
   154bc:	200008dc 	.word	0x200008dc

000154c0 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   154c0:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   154c2:	7d06      	ldrb	r6, [r0, #20]
   154c4:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   154c6:	b976      	cbnz	r6, 154e6 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   154c8:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   154ca:	881d      	ldrh	r5, [r3, #0]
   154cc:	f242 0226 	movw	r2, #8230	; 0x2026
   154d0:	4295      	cmp	r5, r2
   154d2:	d045      	beq.n	15560 <bt_hci_ecc_send+0xa0>
   154d4:	d80f      	bhi.n	154f6 <bt_hci_ecc_send+0x36>
   154d6:	f242 0201 	movw	r2, #8193	; 0x2001
   154da:	4295      	cmp	r5, r2
   154dc:	d04f      	beq.n	1557e <bt_hci_ecc_send+0xbe>
   154de:	f242 0325 	movw	r3, #8229	; 0x2025
   154e2:	429d      	cmp	r5, r3
   154e4:	d013      	beq.n	1550e <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   154e6:	4b2a      	ldr	r3, [pc, #168]	; (15590 <bt_hci_ecc_send+0xd0>)
   154e8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
   154ec:	4620      	mov	r0, r4
   154ee:	691b      	ldr	r3, [r3, #16]
}
   154f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   154f4:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   154f6:	f242 035e 	movw	r3, #8286	; 0x205e
   154fa:	429d      	cmp	r5, r3
   154fc:	d1f3      	bne.n	154e6 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   154fe:	2103      	movs	r1, #3
   15500:	3008      	adds	r0, #8
   15502:	f008 fbc3 	bl	1dc8c <net_buf_simple_pull>
	cmd = (void *)buf->data;
   15506:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   15508:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   1550c:	e02e      	b.n	1556c <bt_hci_ecc_send+0xac>
   1550e:	2103      	movs	r1, #3
   15510:	3008      	adds	r0, #8
   15512:	f008 fbbb 	bl	1dc8c <net_buf_simple_pull>
	net_buf_unref(buf);
   15516:	4620      	mov	r0, r4
   15518:	f008 faca 	bl	1dab0 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1551c:	f3bf 8f5b 	dmb	ish
   15520:	4b1c      	ldr	r3, [pc, #112]	; (15594 <bt_hci_ecc_send+0xd4>)
   15522:	681a      	ldr	r2, [r3, #0]
   15524:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   15528:	0792      	lsls	r2, r2, #30
   1552a:	d507      	bpl.n	1553c <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   1552c:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   1552e:	4631      	mov	r1, r6
   15530:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   15534:	f015 fb23 	bl	2ab7e <send_cmd_status>
}
   15538:	2000      	movs	r0, #0
   1553a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1553c:	f3bf 8f5b 	dmb	ish
   15540:	e853 2f00 	ldrex	r2, [r3]
   15544:	f042 0101 	orr.w	r1, r2, #1
   15548:	e843 1000 	strex	r0, r1, [r3]
   1554c:	2800      	cmp	r0, #0
   1554e:	d1f7      	bne.n	15540 <bt_hci_ecc_send+0x80>
   15550:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   15554:	07d3      	lsls	r3, r2, #31
   15556:	d4e9      	bmi.n	1552c <bt_hci_ecc_send+0x6c>
   15558:	480f      	ldr	r0, [pc, #60]	; (15598 <bt_hci_ecc_send+0xd8>)
   1555a:	f00d fa7d 	bl	22a58 <z_impl_k_sem_give>
}
   1555e:	e7e6      	b.n	1552e <bt_hci_ecc_send+0x6e>
   15560:	2103      	movs	r1, #3
   15562:	3008      	adds	r0, #8
   15564:	f008 fb92 	bl	1dc8c <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   15568:	68a0      	ldr	r0, [r4, #8]
   1556a:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   1556c:	f7ff ff5c 	bl	15428 <le_gen_dhkey>
   15570:	4606      	mov	r6, r0
	net_buf_unref(buf);
   15572:	4620      	mov	r0, r4
   15574:	f008 fa9c 	bl	1dab0 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   15578:	4631      	mov	r1, r6
   1557a:	4628      	mov	r0, r5
   1557c:	e7da      	b.n	15534 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   1557e:	78da      	ldrb	r2, [r3, #3]
   15580:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   15584:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   15586:	791a      	ldrb	r2, [r3, #4]
   15588:	f022 0201 	bic.w	r2, r2, #1
   1558c:	711a      	strb	r2, [r3, #4]
}
   1558e:	e7aa      	b.n	154e6 <bt_hci_ecc_send+0x26>
   15590:	200002b0 	.word	0x200002b0
   15594:	200029ac 	.word	0x200029ac
   15598:	200008dc 	.word	0x200008dc

0001559c <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   1559c:	b510      	push	{r4, lr}
   1559e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   155a0:	4c0c      	ldr	r4, [pc, #48]	; (155d4 <bt_hci_ecc_init+0x38>)
   155a2:	490d      	ldr	r1, [pc, #52]	; (155d8 <bt_hci_ecc_init+0x3c>)
   155a4:	2200      	movs	r2, #0
   155a6:	2300      	movs	r3, #0
   155a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   155ac:	2300      	movs	r3, #0
   155ae:	220a      	movs	r2, #10
   155b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   155b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   155b8:	9300      	str	r3, [sp, #0]
   155ba:	f44f 628f 	mov.w	r2, #1144	; 0x478
   155be:	4b07      	ldr	r3, [pc, #28]	; (155dc <bt_hci_ecc_init+0x40>)
   155c0:	4620      	mov	r0, r4
   155c2:	f00c fded 	bl	221a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   155c6:	4906      	ldr	r1, [pc, #24]	; (155e0 <bt_hci_ecc_init+0x44>)
   155c8:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   155ca:	b008      	add	sp, #32
   155cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   155d0:	f017 be5c 	b.w	2d28c <z_impl_k_thread_name_set>
   155d4:	20001858 	.word	0x20001858
   155d8:	20004bc0 	.word	0x20004bc0
   155dc:	00015229 	.word	0x00015229
   155e0:	0002fd34 	.word	0x0002fd34

000155e4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   155e4:	b510      	push	{r4, lr}
   155e6:	4b0d      	ldr	r3, [pc, #52]	; (1561c <save_id+0x38>)
   155e8:	4c0d      	ldr	r4, [pc, #52]	; (15620 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
   155ea:	480e      	ldr	r0, [pc, #56]	; (15624 <save_id+0x40>)
   155ec:	1ae4      	subs	r4, r4, r3
   155ee:	08e4      	lsrs	r4, r4, #3
   155f0:	01a4      	lsls	r4, r4, #6
   155f2:	f044 0103 	orr.w	r1, r4, #3
   155f6:	f013 fada 	bl	28bae <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   155fa:	490b      	ldr	r1, [pc, #44]	; (15628 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   155fc:	480b      	ldr	r0, [pc, #44]	; (1562c <save_id+0x48>)
   155fe:	79ca      	ldrb	r2, [r1, #7]
   15600:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   15604:	f7fe f8ec 	bl	137e0 <settings_save_one>
	if (err) {
   15608:	4601      	mov	r1, r0
   1560a:	b130      	cbz	r0, 1561a <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
   1560c:	f044 0201 	orr.w	r2, r4, #1
   15610:	4807      	ldr	r0, [pc, #28]	; (15630 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   15612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
   15616:	f013 bad7 	b.w	28bc8 <log_1>
}
   1561a:	bd10      	pop	{r4, pc}
   1561c:	0002d948 	.word	0x0002d948
   15620:	0002d9b0 	.word	0x0002d9b0
   15624:	0002fd66 	.word	0x0002fd66
   15628:	200002b0 	.word	0x200002b0
   1562c:	0002fd70 	.word	0x0002fd70
   15630:	0002fd76 	.word	0x0002fd76

00015634 <set>:
{
   15634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15636:	4616      	mov	r6, r2
   15638:	461f      	mov	r7, r3
	if (!name) {
   1563a:	4604      	mov	r4, r0
   1563c:	b960      	cbnz	r0, 15658 <set+0x24>
   1563e:	4925      	ldr	r1, [pc, #148]	; (156d4 <set+0xa0>)
   15640:	4b25      	ldr	r3, [pc, #148]	; (156d8 <set+0xa4>)
		BT_ERR("Insufficient number of arguments");
   15642:	4826      	ldr	r0, [pc, #152]	; (156dc <set+0xa8>)
   15644:	1ac9      	subs	r1, r1, r3
   15646:	08c9      	lsrs	r1, r1, #3
   15648:	0189      	lsls	r1, r1, #6
   1564a:	f041 0101 	orr.w	r1, r1, #1
   1564e:	f013 faae 	bl	28bae <log_0>
	return -ENOENT;
   15652:	f06f 0401 	mvn.w	r4, #1
   15656:	e01c      	b.n	15692 <set+0x5e>
	len = settings_name_next(name, &next);
   15658:	a901      	add	r1, sp, #4
   1565a:	f013 ff85 	bl	29568 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   1565e:	4920      	ldr	r1, [pc, #128]	; (156e0 <set+0xac>)
	len = settings_name_next(name, &next);
   15660:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   15662:	4620      	mov	r0, r4
   15664:	f015 f9da 	bl	2aa1c <strncmp>
   15668:	4604      	mov	r4, r0
   1566a:	2800      	cmp	r0, #0
   1566c:	d1f1      	bne.n	15652 <set+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1566e:	f3bf 8f5b 	dmb	ish
   15672:	4d1c      	ldr	r5, [pc, #112]	; (156e4 <set+0xb0>)
   15674:	682b      	ldr	r3, [r5, #0]
   15676:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   1567a:	075b      	lsls	r3, r3, #29
   1567c:	d50c      	bpl.n	15698 <set+0x64>
   1567e:	4915      	ldr	r1, [pc, #84]	; (156d4 <set+0xa0>)
   15680:	4b15      	ldr	r3, [pc, #84]	; (156d8 <set+0xa4>)
			BT_WARN("Ignoring identities stored in flash");
   15682:	4819      	ldr	r0, [pc, #100]	; (156e8 <set+0xb4>)
   15684:	1ac9      	subs	r1, r1, r3
   15686:	08c9      	lsrs	r1, r1, #3
   15688:	0189      	lsls	r1, r1, #6
   1568a:	f041 0102 	orr.w	r1, r1, #2
   1568e:	f013 fa8e 	bl	28bae <log_0>
}
   15692:	4620      	mov	r0, r4
   15694:	b003      	add	sp, #12
   15696:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   15698:	3dcc      	subs	r5, #204	; 0xcc
   1569a:	2207      	movs	r2, #7
   1569c:	4629      	mov	r1, r5
   1569e:	4638      	mov	r0, r7
   156a0:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   156a2:	2806      	cmp	r0, #6
   156a4:	d810      	bhi.n	156c8 <set+0x94>
   156a6:	4b0c      	ldr	r3, [pc, #48]	; (156d8 <set+0xa4>)
   156a8:	490a      	ldr	r1, [pc, #40]	; (156d4 <set+0xa0>)
				BT_ERR("Invalid length ID address in storage");
   156aa:	4810      	ldr	r0, [pc, #64]	; (156ec <set+0xb8>)
   156ac:	1ac9      	subs	r1, r1, r3
   156ae:	08c9      	lsrs	r1, r1, #3
   156b0:	0189      	lsls	r1, r1, #6
   156b2:	f041 0101 	orr.w	r1, r1, #1
   156b6:	f013 fa7a 	bl	28bae <log_0>
			(void)memset(bt_dev.id_addr, 0,
   156ba:	2207      	movs	r2, #7
   156bc:	4621      	mov	r1, r4
   156be:	4628      	mov	r0, r5
   156c0:	f015 f9f6 	bl	2aab0 <memset>
			bt_dev.id_count = 0U;
   156c4:	71ec      	strb	r4, [r5, #7]
   156c6:	e7e4      	b.n	15692 <set+0x5e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   156c8:	2307      	movs	r3, #7
   156ca:	fbb0 f0f3 	udiv	r0, r0, r3
   156ce:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   156d0:	e7df      	b.n	15692 <set+0x5e>
   156d2:	bf00      	nop
   156d4:	0002d9b0 	.word	0x0002d9b0
   156d8:	0002d948 	.word	0x0002d948
   156dc:	0002fd91 	.word	0x0002fd91
   156e0:	0002e53d 	.word	0x0002e53d
   156e4:	2000037c 	.word	0x2000037c
   156e8:	0002fdb2 	.word	0x0002fdb2
   156ec:	0002fdd6 	.word	0x0002fdd6

000156f0 <bt_settings_encode_key>:
{
   156f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156f4:	b088      	sub	sp, #32
   156f6:	799c      	ldrb	r4, [r3, #6]
   156f8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   156fc:	795d      	ldrb	r5, [r3, #5]
   156fe:	791e      	ldrb	r6, [r3, #4]
   15700:	78df      	ldrb	r7, [r3, #3]
   15702:	f893 c002 	ldrb.w	ip, [r3, #2]
   15706:	f893 e001 	ldrb.w	lr, [r3, #1]
   1570a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   1570c:	f1b8 0f00 	cmp.w	r8, #0
   15710:	d00e      	beq.n	15730 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   15712:	e9cd 3806 	strd	r3, r8, [sp, #24]
   15716:	e9cd ce04 	strd	ip, lr, [sp, #16]
   1571a:	4613      	mov	r3, r2
   1571c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15720:	e9cd 4500 	strd	r4, r5, [sp]
   15724:	4a08      	ldr	r2, [pc, #32]	; (15748 <bt_settings_encode_key+0x58>)
   15726:	f013 f830 	bl	2878a <snprintk>
}
   1572a:	b008      	add	sp, #32
   1572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15730:	e9cd e305 	strd	lr, r3, [sp, #20]
   15734:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15738:	4613      	mov	r3, r2
   1573a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   1573e:	4a03      	ldr	r2, [pc, #12]	; (1574c <bt_settings_encode_key+0x5c>)
   15740:	9400      	str	r4, [sp, #0]
   15742:	f013 f822 	bl	2878a <snprintk>
}
   15746:	e7f0      	b.n	1572a <bt_settings_encode_key+0x3a>
   15748:	0002fdfb 	.word	0x0002fdfb
   1574c:	0002fe1f 	.word	0x0002fe1f

00015750 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15750:	4801      	ldr	r0, [pc, #4]	; (15758 <bt_settings_save_id+0x8>)
   15752:	f00d bd21 	b.w	23198 <k_work_submit>
   15756:	bf00      	nop
   15758:	200004bc 	.word	0x200004bc

0001575c <commit>:
}

static int commit(void)
{
   1575c:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   1575e:	4d1b      	ldr	r5, [pc, #108]	; (157cc <commit+0x70>)
   15760:	79eb      	ldrb	r3, [r5, #7]
   15762:	b9b3      	cbnz	r3, 15792 <commit+0x36>
		err = bt_setup_public_id_addr();
   15764:	f001 fde2 	bl	1732c <bt_setup_public_id_addr>
		if (err) {
   15768:	4604      	mov	r4, r0
   1576a:	b158      	cbz	r0, 15784 <commit+0x28>
   1576c:	4918      	ldr	r1, [pc, #96]	; (157d0 <commit+0x74>)
   1576e:	4b19      	ldr	r3, [pc, #100]	; (157d4 <commit+0x78>)
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			BT_ERR("Unable to setup an identity address");
   15770:	4819      	ldr	r0, [pc, #100]	; (157d8 <commit+0x7c>)
   15772:	1ac9      	subs	r1, r1, r3
   15774:	08c9      	lsrs	r1, r1, #3
   15776:	0189      	lsls	r1, r1, #6
   15778:	f041 0101 	orr.w	r1, r1, #1
   1577c:	f013 fa17 	bl	28bae <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   15780:	4620      	mov	r0, r4
   15782:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_dev.id_count) {
   15784:	79eb      	ldrb	r3, [r5, #7]
   15786:	b923      	cbnz	r3, 15792 <commit+0x36>
		err = bt_setup_random_id_addr();
   15788:	f001 fe3a 	bl	17400 <bt_setup_random_id_addr>
		if (err) {
   1578c:	4604      	mov	r4, r0
   1578e:	2800      	cmp	r0, #0
   15790:	d1ec      	bne.n	1576c <commit+0x10>
   15792:	f3bf 8f5b 	dmb	ish
   15796:	4d11      	ldr	r5, [pc, #68]	; (157dc <commit+0x80>)
   15798:	682b      	ldr	r3, [r5, #0]
   1579a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1579e:	079b      	lsls	r3, r3, #30
   157a0:	d401      	bmi.n	157a6 <commit+0x4a>
		bt_finalize_init();
   157a2:	f001 fa65 	bl	16c70 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   157a6:	f3bf 8f5b 	dmb	ish
   157aa:	e855 4f00 	ldrex	r4, [r5]
   157ae:	f424 4380 	bic.w	r3, r4, #16384	; 0x4000
   157b2:	e845 3200 	strex	r2, r3, [r5]
   157b6:	2a00      	cmp	r2, #0
   157b8:	d1f7      	bne.n	157aa <commit+0x4e>
   157ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   157be:	f414 4480 	ands.w	r4, r4, #16384	; 0x4000
   157c2:	d0dd      	beq.n	15780 <commit+0x24>
		bt_settings_save_id();
   157c4:	f7ff ffc4 	bl	15750 <bt_settings_save_id>
	return 0;
   157c8:	2400      	movs	r4, #0
   157ca:	e7d9      	b.n	15780 <commit+0x24>
   157cc:	200002b0 	.word	0x200002b0
   157d0:	0002d9b0 	.word	0x0002d9b0
   157d4:	0002d948 	.word	0x0002d948
   157d8:	0002fe40 	.word	0x0002fe40
   157dc:	2000037c 	.word	0x2000037c

000157e0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
   157e0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   157e2:	f7fe f99f 	bl	13b24 <settings_subsys_init>
	if (err) {
   157e6:	4604      	mov	r4, r0
   157e8:	b150      	cbz	r0, 15800 <bt_settings_init+0x20>
   157ea:	4a06      	ldr	r2, [pc, #24]	; (15804 <bt_settings_init+0x24>)
   157ec:	4b06      	ldr	r3, [pc, #24]	; (15808 <bt_settings_init+0x28>)
   157ee:	1ad2      	subs	r2, r2, r3
   157f0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
   157f2:	0192      	lsls	r2, r2, #6
   157f4:	4601      	mov	r1, r0
   157f6:	f042 0201 	orr.w	r2, r2, #1
   157fa:	4804      	ldr	r0, [pc, #16]	; (1580c <bt_settings_init+0x2c>)
   157fc:	f013 f9e4 	bl	28bc8 <log_1>
		return err;
	}

	return 0;
}
   15800:	4620      	mov	r0, r4
   15802:	bd10      	pop	{r4, pc}
   15804:	0002d9b0 	.word	0x0002d9b0
   15808:	0002d948 	.word	0x0002d948
   1580c:	0002fe64 	.word	0x0002fe64

00015810 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15810:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   15812:	7802      	ldrb	r2, [r0, #0]
   15814:	2a01      	cmp	r2, #1
{
   15816:	4604      	mov	r4, r0
   15818:	460b      	mov	r3, r1
	switch (src->type) {
   1581a:	d016      	beq.n	1584a <uuid_to_uuid128+0x3a>
   1581c:	2a02      	cmp	r2, #2
   1581e:	d02c      	beq.n	1587a <uuid_to_uuid128+0x6a>
   15820:	b98a      	cbnz	r2, 15846 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15822:	4a19      	ldr	r2, [pc, #100]	; (15888 <uuid_to_uuid128+0x78>)
   15824:	460d      	mov	r5, r1
   15826:	f102 0710 	add.w	r7, r2, #16
   1582a:	6810      	ldr	r0, [r2, #0]
   1582c:	6851      	ldr	r1, [r2, #4]
   1582e:	462e      	mov	r6, r5
   15830:	c603      	stmia	r6!, {r0, r1}
   15832:	3208      	adds	r2, #8
   15834:	42ba      	cmp	r2, r7
   15836:	4635      	mov	r5, r6
   15838:	d1f7      	bne.n	1582a <uuid_to_uuid128+0x1a>
   1583a:	7812      	ldrb	r2, [r2, #0]
   1583c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1583e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   15840:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   15842:	0a12      	lsrs	r2, r2, #8
   15844:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15846:	bcf0      	pop	{r4, r5, r6, r7}
   15848:	4770      	bx	lr
		*dst = uuid128_base;
   1584a:	4a0f      	ldr	r2, [pc, #60]	; (15888 <uuid_to_uuid128+0x78>)
   1584c:	460d      	mov	r5, r1
   1584e:	f102 0710 	add.w	r7, r2, #16
   15852:	6810      	ldr	r0, [r2, #0]
   15854:	6851      	ldr	r1, [r2, #4]
   15856:	462e      	mov	r6, r5
   15858:	c603      	stmia	r6!, {r0, r1}
   1585a:	3208      	adds	r2, #8
   1585c:	42ba      	cmp	r2, r7
   1585e:	4635      	mov	r5, r6
   15860:	d1f7      	bne.n	15852 <uuid_to_uuid128+0x42>
   15862:	7812      	ldrb	r2, [r2, #0]
   15864:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15866:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   15868:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1586a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1586e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   15870:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   15872:	0a12      	lsrs	r2, r2, #8
   15874:	7399      	strb	r1, [r3, #14]
   15876:	741a      	strb	r2, [r3, #16]
}
   15878:	e7e5      	b.n	15846 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1587a:	4601      	mov	r1, r0
}
   1587c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1587e:	2211      	movs	r2, #17
   15880:	4618      	mov	r0, r3
   15882:	f015 b90a 	b.w	2aa9a <memcpy>
   15886:	bf00      	nop
   15888:	0002fe98 	.word	0x0002fe98

0001588c <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1588c:	b570      	push	{r4, r5, r6, lr}
   1588e:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15890:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   15894:	2b01      	cmp	r3, #1
{
   15896:	4605      	mov	r5, r0
   15898:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1589a:	d00e      	beq.n	158ba <bt_buf_get_rx+0x2e>
   1589c:	2805      	cmp	r0, #5
   1589e:	d00c      	beq.n	158ba <bt_buf_get_rx+0x2e>
   158a0:	490d      	ldr	r1, [pc, #52]	; (158d8 <bt_buf_get_rx+0x4c>)
   158a2:	4a0e      	ldr	r2, [pc, #56]	; (158dc <bt_buf_get_rx+0x50>)
   158a4:	480e      	ldr	r0, [pc, #56]	; (158e0 <bt_buf_get_rx+0x54>)
   158a6:	2341      	movs	r3, #65	; 0x41
   158a8:	f012 ff62 	bl	28770 <printk>
   158ac:	480d      	ldr	r0, [pc, #52]	; (158e4 <bt_buf_get_rx+0x58>)
   158ae:	f012 ff5f 	bl	28770 <printk>
   158b2:	480a      	ldr	r0, [pc, #40]	; (158dc <bt_buf_get_rx+0x50>)
   158b4:	2141      	movs	r1, #65	; 0x41
   158b6:	f013 f94c 	bl	28b52 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   158ba:	4623      	mov	r3, r4
   158bc:	480a      	ldr	r0, [pc, #40]	; (158e8 <bt_buf_get_rx+0x5c>)
   158be:	4632      	mov	r2, r6
   158c0:	f017 f86d 	bl	2c99e <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   158c4:	4604      	mov	r4, r0
   158c6:	b120      	cbz	r0, 158d2 <bt_buf_get_rx+0x46>
	net_buf_simple_reserve(&buf->b, reserve);
   158c8:	2100      	movs	r1, #0
   158ca:	3008      	adds	r0, #8
   158cc:	f008 f892 	bl	1d9f4 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   158d0:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   158d2:	4620      	mov	r0, r4
   158d4:	bd70      	pop	{r4, r5, r6, pc}
   158d6:	bf00      	nop
   158d8:	0002fed8 	.word	0x0002fed8
   158dc:	0002fea9 	.word	0x0002fea9
   158e0:	0002e915 	.word	0x0002e915
   158e4:	0002ff1d 	.word	0x0002ff1d
   158e8:	20000a78 	.word	0x20000a78

000158ec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   158ec:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   158ee:	490b      	ldr	r1, [pc, #44]	; (1591c <bt_buf_get_cmd_complete+0x30>)
{
   158f0:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   158f2:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   158f6:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   158f8:	b920      	cbnz	r0, 15904 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   158fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   158fe:	2001      	movs	r0, #1
   15900:	f7ff bfc4 	b.w	1588c <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15904:	f008 f91a 	bl	1db3c <net_buf_ref>
   15908:	2301      	movs	r3, #1
		buf->len = 0U;
   1590a:	2100      	movs	r1, #0
   1590c:	7503      	strb	r3, [r0, #20]
   1590e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15910:	4604      	mov	r4, r0
   15912:	3008      	adds	r0, #8
   15914:	f008 f86e 	bl	1d9f4 <net_buf_simple_reserve>
}
   15918:	4620      	mov	r0, r4
   1591a:	bd10      	pop	{r4, pc}
   1591c:	200002b0 	.word	0x200002b0

00015920 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15920:	b570      	push	{r4, r5, r6, lr}
   15922:	4604      	mov	r4, r0
	switch (evt) {
   15924:	2c0f      	cmp	r4, #15
{
   15926:	460d      	mov	r5, r1
   15928:	4610      	mov	r0, r2
   1592a:	4619      	mov	r1, r3
	switch (evt) {
   1592c:	d805      	bhi.n	1593a <bt_buf_get_evt+0x1a>
   1592e:	2c0d      	cmp	r4, #13
   15930:	d912      	bls.n	15958 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15936:	f7ff bfd9 	b.w	158ec <bt_buf_get_cmd_complete>
	switch (evt) {
   1593a:	2c13      	cmp	r4, #19
   1593c:	d10c      	bne.n	15958 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1593e:	480b      	ldr	r0, [pc, #44]	; (1596c <bt_buf_get_evt+0x4c>)
   15940:	f017 f82d 	bl	2c99e <net_buf_alloc_fixed>
			if (buf) {
   15944:	4604      	mov	r4, r0
   15946:	b128      	cbz	r0, 15954 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   15948:	2100      	movs	r1, #0
   1594a:	3008      	adds	r0, #8
   1594c:	f008 f852 	bl	1d9f4 <net_buf_simple_reserve>
   15950:	2301      	movs	r3, #1
   15952:	7523      	strb	r3, [r4, #20]
}
   15954:	4620      	mov	r0, r4
   15956:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   15958:	4602      	mov	r2, r0
   1595a:	460b      	mov	r3, r1
		if (discardable) {
   1595c:	b10d      	cbz	r5, 15962 <bt_buf_get_evt+0x42>
   1595e:	4804      	ldr	r0, [pc, #16]	; (15970 <bt_buf_get_evt+0x50>)
   15960:	e7ee      	b.n	15940 <bt_buf_get_evt+0x20>
}
   15962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15966:	2001      	movs	r0, #1
   15968:	f7ff bf90 	b.w	1588c <bt_buf_get_rx>
   1596c:	20000aac 	.word	0x20000aac
   15970:	200009dc 	.word	0x200009dc

00015974 <hci_data_buf_overflow>:
   15974:	4905      	ldr	r1, [pc, #20]	; (1598c <hci_data_buf_overflow+0x18>)
   15976:	4a06      	ldr	r2, [pc, #24]	; (15990 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   15978:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1597a:	4806      	ldr	r0, [pc, #24]	; (15994 <hci_data_buf_overflow+0x20>)
   1597c:	1a52      	subs	r2, r2, r1
   1597e:	08d2      	lsrs	r2, r2, #3
   15980:	0192      	lsls	r2, r2, #6
   15982:	7819      	ldrb	r1, [r3, #0]
   15984:	f042 0202 	orr.w	r2, r2, #2
   15988:	f013 b91e 	b.w	28bc8 <log_1>
   1598c:	0002d948 	.word	0x0002d948
   15990:	0002d978 	.word	0x0002d978
   15994:	0002ff44 	.word	0x0002ff44

00015998 <hci_disconn_complete_prio>:
{
   15998:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1599a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1599c:	781a      	ldrb	r2, [r3, #0]
   1599e:	b972      	cbnz	r2, 159be <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   159a0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   159a4:	4620      	mov	r0, r4
   159a6:	f002 fcff 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   159aa:	4605      	mov	r5, r0
   159ac:	b940      	cbnz	r0, 159c0 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   159ae:	4b08      	ldr	r3, [pc, #32]	; (159d0 <hci_disconn_complete_prio+0x38>)
   159b0:	881a      	ldrh	r2, [r3, #0]
   159b2:	b922      	cbnz	r2, 159be <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   159b4:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   159b8:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   159bc:	8018      	strh	r0, [r3, #0]
}
   159be:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   159c0:	2101      	movs	r1, #1
   159c2:	f002 fcfd 	bl	183c0 <bt_conn_set_state>
	bt_conn_unref(conn);
   159c6:	4628      	mov	r0, r5
}
   159c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   159cc:	f002 bcb4 	b.w	18338 <bt_conn_unref>
   159d0:	20003730 	.word	0x20003730

000159d4 <hci_disconn_complete>:
{
   159d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   159d6:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   159d8:	782e      	ldrb	r6, [r5, #0]
   159da:	b9ee      	cbnz	r6, 15a18 <hci_disconn_complete+0x44>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   159dc:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   159e0:	4638      	mov	r0, r7
   159e2:	f002 fce1 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   159e6:	4604      	mov	r4, r0
   159e8:	b960      	cbnz	r0, 15a04 <hci_disconn_complete+0x30>
   159ea:	4b0c      	ldr	r3, [pc, #48]	; (15a1c <hci_disconn_complete+0x48>)
   159ec:	4a0c      	ldr	r2, [pc, #48]	; (15a20 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   159ee:	480d      	ldr	r0, [pc, #52]	; (15a24 <hci_disconn_complete+0x50>)
   159f0:	1ad2      	subs	r2, r2, r3
   159f2:	08d2      	lsrs	r2, r2, #3
   159f4:	0192      	lsls	r2, r2, #6
   159f6:	4639      	mov	r1, r7
   159f8:	f042 0201 	orr.w	r2, r2, #1
}
   159fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15a00:	f013 b8e2 	b.w	28bc8 <log_1>
	conn->err = evt->reason;
   15a04:	78eb      	ldrb	r3, [r5, #3]
   15a06:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15a08:	4631      	mov	r1, r6
   15a0a:	f002 fcd9 	bl	183c0 <bt_conn_set_state>
		bt_conn_unref(conn);
   15a0e:	4620      	mov	r0, r4
}
   15a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   15a14:	f002 bc90 	b.w	18338 <bt_conn_unref>
}
   15a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15a1a:	bf00      	nop
   15a1c:	0002d948 	.word	0x0002d948
   15a20:	0002d978 	.word	0x0002d978
   15a24:	0002ff6c 	.word	0x0002ff6c

00015a28 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15a28:	6883      	ldr	r3, [r0, #8]
{
   15a2a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15a2c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15a2e:	4620      	mov	r0, r4
   15a30:	f002 fcba 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   15a34:	b960      	cbnz	r0, 15a50 <le_data_len_change+0x28>
   15a36:	4a08      	ldr	r2, [pc, #32]	; (15a58 <le_data_len_change+0x30>)
   15a38:	4b08      	ldr	r3, [pc, #32]	; (15a5c <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15a3a:	4809      	ldr	r0, [pc, #36]	; (15a60 <le_data_len_change+0x38>)
   15a3c:	1ad2      	subs	r2, r2, r3
   15a3e:	08d2      	lsrs	r2, r2, #3
   15a40:	0192      	lsls	r2, r2, #6
   15a42:	4621      	mov	r1, r4
   15a44:	f042 0201 	orr.w	r2, r2, #1
}
   15a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15a4c:	f013 b8bc 	b.w	28bc8 <log_1>
}
   15a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15a54:	f002 bc70 	b.w	18338 <bt_conn_unref>
   15a58:	0002d978 	.word	0x0002d978
   15a5c:	0002d948 	.word	0x0002d948
   15a60:	0002ff92 	.word	0x0002ff92

00015a64 <hci_hardware_error>:
{
   15a64:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15a66:	2101      	movs	r1, #1
   15a68:	3008      	adds	r0, #8
   15a6a:	f008 f92f 	bl	1dccc <net_buf_simple_pull_mem>
   15a6e:	4b06      	ldr	r3, [pc, #24]	; (15a88 <hci_hardware_error+0x24>)
   15a70:	4a06      	ldr	r2, [pc, #24]	; (15a8c <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15a72:	7801      	ldrb	r1, [r0, #0]
   15a74:	4806      	ldr	r0, [pc, #24]	; (15a90 <hci_hardware_error+0x2c>)
   15a76:	1ad2      	subs	r2, r2, r3
   15a78:	08d2      	lsrs	r2, r2, #3
   15a7a:	0192      	lsls	r2, r2, #6
}
   15a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15a80:	f042 0201 	orr.w	r2, r2, #1
   15a84:	f013 b8a0 	b.w	28bc8 <log_1>
   15a88:	0002d948 	.word	0x0002d948
   15a8c:	0002d978 	.word	0x0002d978
   15a90:	0002ffb6 	.word	0x0002ffb6

00015a94 <hci_vendor_event>:
{
   15a94:	b510      	push	{r4, lr}
   15a96:	4a0a      	ldr	r2, [pc, #40]	; (15ac0 <hci_vendor_event+0x2c>)
   15a98:	4c0a      	ldr	r4, [pc, #40]	; (15ac4 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   15a9a:	8981      	ldrh	r1, [r0, #12]
   15a9c:	6880      	ldr	r0, [r0, #8]
   15a9e:	1aa4      	subs	r4, r4, r2
   15aa0:	f7ff fb34 	bl	1510c <bt_hex_real>
   15aa4:	f7fc fc7c 	bl	123a0 <z_log_strdup>
   15aa8:	08e4      	lsrs	r4, r4, #3
   15aaa:	01a4      	lsls	r4, r4, #6
   15aac:	f044 0402 	orr.w	r4, r4, #2
   15ab0:	4601      	mov	r1, r0
   15ab2:	4622      	mov	r2, r4
   15ab4:	4804      	ldr	r0, [pc, #16]	; (15ac8 <hci_vendor_event+0x34>)
}
   15ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   15aba:	f013 b885 	b.w	28bc8 <log_1>
   15abe:	bf00      	nop
   15ac0:	0002d948 	.word	0x0002d948
   15ac4:	0002d978 	.word	0x0002d978
   15ac8:	0002ffd8 	.word	0x0002ffd8

00015acc <hci_encrypt_key_refresh_complete>:
{
   15acc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   15ace:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15ad0:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   15ad4:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15ad6:	4630      	mov	r0, r6
   15ad8:	f002 fc66 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   15adc:	4604      	mov	r4, r0
   15ade:	b960      	cbnz	r0, 15afa <hci_encrypt_key_refresh_complete+0x2e>
   15ae0:	4a1e      	ldr	r2, [pc, #120]	; (15b5c <hci_encrypt_key_refresh_complete+0x90>)
   15ae2:	4b1f      	ldr	r3, [pc, #124]	; (15b60 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   15ae4:	481f      	ldr	r0, [pc, #124]	; (15b64 <hci_encrypt_key_refresh_complete+0x98>)
   15ae6:	1ad2      	subs	r2, r2, r3
   15ae8:	08d2      	lsrs	r2, r2, #3
   15aea:	0192      	lsls	r2, r2, #6
   15aec:	4631      	mov	r1, r6
   15aee:	f042 0201 	orr.w	r2, r2, #1
}
   15af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15af6:	f013 b867 	b.w	28bc8 <log_1>
	if (status) {
   15afa:	b165      	cbz	r5, 15b16 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
   15afc:	2d29      	cmp	r5, #41	; 0x29
   15afe:	bf96      	itet	ls
   15b00:	4b19      	ldrls	r3, [pc, #100]	; (15b68 <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   15b02:	2209      	movhi	r2, #9
   15b04:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   15b06:	4629      	mov	r1, r5
   15b08:	f002 feae 	bl	18868 <bt_conn_security_changed>
	bt_conn_unref(conn);
   15b0c:	4620      	mov	r0, r4
}
   15b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15b12:	f002 bc11 	b.w	18338 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   15b16:	7883      	ldrb	r3, [r0, #2]
   15b18:	2b01      	cmp	r3, #1
   15b1a:	d107      	bne.n	15b2c <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
   15b1c:	f007 fb7c 	bl	1d218 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15b20:	4620      	mov	r0, r4
   15b22:	f015 f8fa 	bl	2ad1a <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   15b26:	2800      	cmp	r0, #0
   15b28:	bf08      	it	eq
   15b2a:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15b2c:	4b0e      	ldr	r3, [pc, #56]	; (15b68 <hci_encrypt_key_refresh_complete+0x9c>)
   15b2e:	4629      	mov	r1, r5
   15b30:	5d5a      	ldrb	r2, [r3, r5]
   15b32:	4620      	mov	r0, r4
   15b34:	f002 fe98 	bl	18868 <bt_conn_security_changed>
	if (status) {
   15b38:	2d00      	cmp	r5, #0
   15b3a:	d0e7      	beq.n	15b0c <hci_encrypt_key_refresh_complete+0x40>
   15b3c:	4b08      	ldr	r3, [pc, #32]	; (15b60 <hci_encrypt_key_refresh_complete+0x94>)
   15b3e:	4907      	ldr	r1, [pc, #28]	; (15b5c <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   15b40:	480a      	ldr	r0, [pc, #40]	; (15b6c <hci_encrypt_key_refresh_complete+0xa0>)
   15b42:	1ac9      	subs	r1, r1, r3
   15b44:	08c9      	lsrs	r1, r1, #3
   15b46:	0189      	lsls	r1, r1, #6
   15b48:	f041 0101 	orr.w	r1, r1, #1
   15b4c:	f013 f82f 	bl	28bae <log_0>
		bt_conn_disconnect(conn, status);
   15b50:	4629      	mov	r1, r5
   15b52:	4620      	mov	r0, r4
   15b54:	f015 fbef 	bl	2b336 <bt_conn_disconnect>
   15b58:	e7d8      	b.n	15b0c <hci_encrypt_key_refresh_complete+0x40>
   15b5a:	bf00      	nop
   15b5c:	0002d978 	.word	0x0002d978
   15b60:	0002d948 	.word	0x0002d948
   15b64:	0002ff6c 	.word	0x0002ff6c
   15b68:	000304ba 	.word	0x000304ba
   15b6c:	0002fffc 	.word	0x0002fffc

00015b70 <hci_encrypt_change>:
{
   15b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   15b72:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15b74:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   15b78:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   15b7a:	4638      	mov	r0, r7
   15b7c:	f002 fc14 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   15b80:	4604      	mov	r4, r0
   15b82:	b960      	cbnz	r0, 15b9e <hci_encrypt_change+0x2e>
   15b84:	4b1f      	ldr	r3, [pc, #124]	; (15c04 <hci_encrypt_change+0x94>)
   15b86:	4a20      	ldr	r2, [pc, #128]	; (15c08 <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   15b88:	4820      	ldr	r0, [pc, #128]	; (15c0c <hci_encrypt_change+0x9c>)
   15b8a:	1ad2      	subs	r2, r2, r3
   15b8c:	08d2      	lsrs	r2, r2, #3
   15b8e:	0192      	lsls	r2, r2, #6
   15b90:	4639      	mov	r1, r7
   15b92:	f042 0201 	orr.w	r2, r2, #1
}
   15b96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   15b9a:	f013 b815 	b.w	28bc8 <log_1>
	if (status) {
   15b9e:	b165      	cbz	r5, 15bba <hci_encrypt_change+0x4a>
	switch (hci_err) {
   15ba0:	2d29      	cmp	r5, #41	; 0x29
   15ba2:	bf96      	itet	ls
   15ba4:	4b1a      	ldrls	r3, [pc, #104]	; (15c10 <hci_encrypt_change+0xa0>)
	if (status) {
   15ba6:	2209      	movhi	r2, #9
   15ba8:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   15baa:	4629      	mov	r1, r5
   15bac:	f002 fe5c 	bl	18868 <bt_conn_security_changed>
	bt_conn_unref(conn);
   15bb0:	4620      	mov	r0, r4
}
   15bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   15bb6:	f002 bbbf 	b.w	18338 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   15bba:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   15bbc:	78f3      	ldrb	r3, [r6, #3]
   15bbe:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   15bc0:	2a01      	cmp	r2, #1
   15bc2:	d108      	bne.n	15bd6 <hci_encrypt_change+0x66>
		if (conn->encrypt) {
   15bc4:	b10b      	cbz	r3, 15bca <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   15bc6:	f007 fb27 	bl	1d218 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15bca:	4620      	mov	r0, r4
   15bcc:	f015 f8a5 	bl	2ad1a <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   15bd0:	2800      	cmp	r0, #0
   15bd2:	bf08      	it	eq
   15bd4:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15bd6:	4b0e      	ldr	r3, [pc, #56]	; (15c10 <hci_encrypt_change+0xa0>)
   15bd8:	4629      	mov	r1, r5
   15bda:	5d5a      	ldrb	r2, [r3, r5]
   15bdc:	4620      	mov	r0, r4
   15bde:	f002 fe43 	bl	18868 <bt_conn_security_changed>
	if (status) {
   15be2:	2d00      	cmp	r5, #0
   15be4:	d0e4      	beq.n	15bb0 <hci_encrypt_change+0x40>
   15be6:	4b07      	ldr	r3, [pc, #28]	; (15c04 <hci_encrypt_change+0x94>)
   15be8:	4907      	ldr	r1, [pc, #28]	; (15c08 <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
   15bea:	480a      	ldr	r0, [pc, #40]	; (15c14 <hci_encrypt_change+0xa4>)
   15bec:	1ac9      	subs	r1, r1, r3
   15bee:	08c9      	lsrs	r1, r1, #3
   15bf0:	0189      	lsls	r1, r1, #6
   15bf2:	f041 0101 	orr.w	r1, r1, #1
   15bf6:	f012 ffda 	bl	28bae <log_0>
		bt_conn_disconnect(conn, status);
   15bfa:	4629      	mov	r1, r5
   15bfc:	4620      	mov	r0, r4
   15bfe:	f015 fb9a 	bl	2b336 <bt_conn_disconnect>
   15c02:	e7d5      	b.n	15bb0 <hci_encrypt_change+0x40>
   15c04:	0002d948 	.word	0x0002d948
   15c08:	0002d978 	.word	0x0002d978
   15c0c:	0002ff6c 	.word	0x0002ff6c
   15c10:	000304ba 	.word	0x000304ba
   15c14:	0002fffc 	.word	0x0002fffc

00015c18 <le_conn_update_complete>:
{
   15c18:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15c1a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   15c1c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15c20:	4630      	mov	r0, r6
   15c22:	f002 fbc1 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   15c26:	4604      	mov	r4, r0
   15c28:	b960      	cbnz	r0, 15c44 <le_conn_update_complete+0x2c>
   15c2a:	4a1f      	ldr	r2, [pc, #124]	; (15ca8 <le_conn_update_complete+0x90>)
   15c2c:	4b1f      	ldr	r3, [pc, #124]	; (15cac <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   15c2e:	4820      	ldr	r0, [pc, #128]	; (15cb0 <le_conn_update_complete+0x98>)
   15c30:	1ad2      	subs	r2, r2, r3
   15c32:	08d2      	lsrs	r2, r2, #3
   15c34:	0192      	lsls	r2, r2, #6
   15c36:	f042 0201 	orr.w	r2, r2, #1
   15c3a:	4631      	mov	r1, r6
   15c3c:	f012 ffc4 	bl	28bc8 <log_1>
}
   15c40:	b002      	add	sp, #8
   15c42:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   15c44:	782b      	ldrb	r3, [r5, #0]
   15c46:	b9bb      	cbnz	r3, 15c78 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   15c48:	792a      	ldrb	r2, [r5, #4]
   15c4a:	78eb      	ldrb	r3, [r5, #3]
   15c4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c50:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   15c54:	79aa      	ldrb	r2, [r5, #6]
   15c56:	796b      	ldrb	r3, [r5, #5]
   15c58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c5c:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15c60:	79eb      	ldrb	r3, [r5, #7]
   15c62:	7a2a      	ldrb	r2, [r5, #8]
   15c64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   15c68:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   15c6c:	f002 fcf2 	bl	18654 <notify_le_param_updated>
	bt_conn_unref(conn);
   15c70:	4620      	mov	r0, r4
   15c72:	f002 fb61 	bl	18338 <bt_conn_unref>
   15c76:	e7e3      	b.n	15c40 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15c78:	2b1a      	cmp	r3, #26
   15c7a:	d1f9      	bne.n	15c70 <le_conn_update_complete+0x58>
   15c7c:	78c3      	ldrb	r3, [r0, #3]
   15c7e:	2b01      	cmp	r3, #1
   15c80:	d1f6      	bne.n	15c70 <le_conn_update_complete+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15c86:	3004      	adds	r0, #4
   15c88:	f015 f85f 	bl	2ad4a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   15c8c:	0543      	lsls	r3, r0, #21
   15c8e:	d4ef      	bmi.n	15c70 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   15c90:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15c94:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   15c96:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   15c98:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   15c9c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15c9e:	4620      	mov	r0, r4
   15ca0:	f003 f9c8 	bl	19034 <bt_l2cap_update_conn_param>
   15ca4:	e7e4      	b.n	15c70 <le_conn_update_complete+0x58>
   15ca6:	bf00      	nop
   15ca8:	0002d978 	.word	0x0002d978
   15cac:	0002d948 	.word	0x0002d948
   15cb0:	0002ff92 	.word	0x0002ff92

00015cb4 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15cb4:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15cb6:	4c0c      	ldr	r4, [pc, #48]	; (15ce8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15cb8:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15cba:	2205      	movs	r2, #5
   15cbc:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   15cc0:	f002 fe76 	bl	189b0 <bt_conn_lookup_state_le>
		if (!conn) {
   15cc4:	b970      	cbnz	r0, 15ce4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   15cc6:	4b09      	ldr	r3, [pc, #36]	; (15cec <find_pending_connect.part.0+0x38>)
   15cc8:	6818      	ldr	r0, [r3, #0]
   15cca:	889a      	ldrh	r2, [r3, #4]
   15ccc:	9000      	str	r0, [sp, #0]
   15cce:	799b      	ldrb	r3, [r3, #6]
   15cd0:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15cd4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   15cd8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15cdc:	2204      	movs	r2, #4
   15cde:	4669      	mov	r1, sp
   15ce0:	f002 fe66 	bl	189b0 <bt_conn_lookup_state_le>
}
   15ce4:	b002      	add	sp, #8
   15ce6:	bd10      	pop	{r4, pc}
   15ce8:	200002b0 	.word	0x200002b0
   15cec:	0002daf4 	.word	0x0002daf4

00015cf0 <hci_cmd_done>:
{
   15cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15cf4:	4606      	mov	r6, r0
   15cf6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15cf8:	7990      	ldrb	r0, [r2, #6]
   15cfa:	f8df 8128 	ldr.w	r8, [pc, #296]	; 15e24 <hci_cmd_done+0x134>
{
   15cfe:	460f      	mov	r7, r1
   15d00:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15d02:	f007 fcd3 	bl	1d6ac <net_buf_pool_get>
   15d06:	4580      	cmp	r8, r0
   15d08:	d016      	beq.n	15d38 <hci_cmd_done+0x48>
   15d0a:	4b41      	ldr	r3, [pc, #260]	; (15e10 <hci_cmd_done+0x120>)
   15d0c:	4d41      	ldr	r5, [pc, #260]	; (15e14 <hci_cmd_done+0x124>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   15d0e:	79a0      	ldrb	r0, [r4, #6]
   15d10:	9600      	str	r6, [sp, #0]
   15d12:	1aed      	subs	r5, r5, r3
   15d14:	08ed      	lsrs	r5, r5, #3
   15d16:	9001      	str	r0, [sp, #4]
   15d18:	f007 fcc8 	bl	1d6ac <net_buf_pool_get>
   15d1c:	01ad      	lsls	r5, r5, #6
   15d1e:	f045 0502 	orr.w	r5, r5, #2
   15d22:	e9cd 0802 	strd	r0, r8, [sp, #8]
   15d26:	462b      	mov	r3, r5
   15d28:	483b      	ldr	r0, [pc, #236]	; (15e18 <hci_cmd_done+0x128>)
   15d2a:	2204      	movs	r2, #4
   15d2c:	4669      	mov	r1, sp
   15d2e:	f012 ff94 	bl	28c5a <log_n>
}
   15d32:	b005      	add	sp, #20
   15d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   15d38:	4620      	mov	r0, r4
   15d3a:	f007 fcbf 	bl	1d6bc <net_buf_id>
   15d3e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 15e28 <hci_cmd_done+0x138>
   15d42:	f04f 090c 	mov.w	r9, #12
   15d46:	fb09 8000 	mla	r0, r9, r0, r8
   15d4a:	4645      	mov	r5, r8
   15d4c:	8843      	ldrh	r3, [r0, #2]
   15d4e:	42b3      	cmp	r3, r6
   15d50:	d012      	beq.n	15d78 <hci_cmd_done+0x88>
   15d52:	4b2f      	ldr	r3, [pc, #188]	; (15e10 <hci_cmd_done+0x120>)
   15d54:	4d2f      	ldr	r5, [pc, #188]	; (15e14 <hci_cmd_done+0x124>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   15d56:	4620      	mov	r0, r4
   15d58:	1aed      	subs	r5, r5, r3
   15d5a:	f007 fcaf 	bl	1d6bc <net_buf_id>
   15d5e:	08ed      	lsrs	r5, r5, #3
   15d60:	fb09 8000 	mla	r0, r9, r0, r8
   15d64:	01ad      	lsls	r5, r5, #6
   15d66:	f045 0502 	orr.w	r5, r5, #2
   15d6a:	8842      	ldrh	r2, [r0, #2]
   15d6c:	482b      	ldr	r0, [pc, #172]	; (15e1c <hci_cmd_done+0x12c>)
   15d6e:	462b      	mov	r3, r5
   15d70:	4631      	mov	r1, r6
   15d72:	f012 ff3d 	bl	28bf0 <log_2>
		return;
   15d76:	e7dc      	b.n	15d32 <hci_cmd_done+0x42>
	if (bt_dev.sent_cmd) {
   15d78:	4e29      	ldr	r6, [pc, #164]	; (15e20 <hci_cmd_done+0x130>)
   15d7a:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   15d7e:	b120      	cbz	r0, 15d8a <hci_cmd_done+0x9a>
		net_buf_unref(bt_dev.sent_cmd);
   15d80:	f007 fe96 	bl	1dab0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15d84:	2300      	movs	r3, #0
   15d86:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   15d8a:	4620      	mov	r0, r4
   15d8c:	f007 fc96 	bl	1d6bc <net_buf_id>
   15d90:	260c      	movs	r6, #12
   15d92:	fb06 5000 	mla	r0, r6, r0, r5
   15d96:	6843      	ldr	r3, [r0, #4]
   15d98:	b1a3      	cbz	r3, 15dc4 <hci_cmd_done+0xd4>
   15d9a:	b99f      	cbnz	r7, 15dc4 <hci_cmd_done+0xd4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   15d9c:	4620      	mov	r0, r4
   15d9e:	f007 fc8d 	bl	1d6bc <net_buf_id>
   15da2:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   15da6:	2301      	movs	r3, #1
   15da8:	6846      	ldr	r6, [r0, #4]
   15daa:	e9d6 2000 	ldrd	r2, r0, [r6]
   15dae:	f000 011f 	and.w	r1, r0, #31
   15db2:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
   15db6:	7a33      	ldrb	r3, [r6, #8]
   15db8:	0940      	lsrs	r0, r0, #5
   15dba:	b1d3      	cbz	r3, 15df2 <hci_cmd_done+0x102>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15dbc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   15dc0:	f014 ffc3 	bl	2ad4a <atomic_or>
	if (cmd(buf)->sync) {
   15dc4:	4620      	mov	r0, r4
   15dc6:	f007 fc79 	bl	1d6bc <net_buf_id>
   15dca:	260c      	movs	r6, #12
   15dcc:	fb06 5000 	mla	r0, r6, r0, r5
   15dd0:	6883      	ldr	r3, [r0, #8]
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	d0ad      	beq.n	15d32 <hci_cmd_done+0x42>
		cmd(buf)->status = status;
   15dd6:	4620      	mov	r0, r4
   15dd8:	f007 fc70 	bl	1d6bc <net_buf_id>
   15ddc:	4370      	muls	r0, r6
   15dde:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15de0:	4620      	mov	r0, r4
   15de2:	f007 fc6b 	bl	1d6bc <net_buf_id>
   15de6:	fb06 5500 	mla	r5, r6, r0, r5
   15dea:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   15dec:	f00c fe34 	bl	22a58 <z_impl_k_sem_give>
}
   15df0:	e79f      	b.n	15d32 <hci_cmd_done+0x42>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15df2:	43cb      	mvns	r3, r1
   15df4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   15df8:	f3bf 8f5b 	dmb	ish
   15dfc:	e852 1f00 	ldrex	r1, [r2]
   15e00:	4019      	ands	r1, r3
   15e02:	e842 1000 	strex	r0, r1, [r2]
   15e06:	2800      	cmp	r0, #0
   15e08:	d1f8      	bne.n	15dfc <hci_cmd_done+0x10c>
   15e0a:	f3bf 8f5b 	dmb	ish
   15e0e:	e7d9      	b.n	15dc4 <hci_cmd_done+0xd4>
   15e10:	0002d948 	.word	0x0002d948
   15e14:	0002d978 	.word	0x0002d978
   15e18:	00030022 	.word	0x00030022
   15e1c:	00030057 	.word	0x00030057
   15e20:	200002b0 	.word	0x200002b0
   15e24:	20000a44 	.word	0x20000a44
   15e28:	200029b0 	.word	0x200029b0

00015e2c <handle_event>:
{
   15e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15e2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15e32:	4605      	mov	r5, r0
   15e34:	4608      	mov	r0, r1
		if (handler->event != event) {
   15e36:	7811      	ldrb	r1, [r2, #0]
   15e38:	42a9      	cmp	r1, r5
   15e3a:	d01a      	beq.n	15e72 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   15e3c:	3208      	adds	r2, #8
   15e3e:	429a      	cmp	r2, r3
   15e40:	d1f9      	bne.n	15e36 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   15e42:	8986      	ldrh	r6, [r0, #12]
   15e44:	4b16      	ldr	r3, [pc, #88]	; (15ea0 <handle_event+0x74>)
   15e46:	4c17      	ldr	r4, [pc, #92]	; (15ea4 <handle_event+0x78>)
   15e48:	6880      	ldr	r0, [r0, #8]
   15e4a:	4631      	mov	r1, r6
   15e4c:	1ae4      	subs	r4, r4, r3
   15e4e:	f7ff f95d 	bl	1510c <bt_hex_real>
   15e52:	f7fc faa5 	bl	123a0 <z_log_strdup>
   15e56:	08e4      	lsrs	r4, r4, #3
   15e58:	01a4      	lsls	r4, r4, #6
   15e5a:	f044 0402 	orr.w	r4, r4, #2
   15e5e:	4603      	mov	r3, r0
   15e60:	f8ad 4000 	strh.w	r4, [sp]
   15e64:	4810      	ldr	r0, [pc, #64]	; (15ea8 <handle_event+0x7c>)
   15e66:	4632      	mov	r2, r6
   15e68:	4629      	mov	r1, r5
   15e6a:	f012 feda 	bl	28c22 <log_3>
}
   15e6e:	b002      	add	sp, #8
   15e70:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   15e72:	8981      	ldrh	r1, [r0, #12]
   15e74:	7853      	ldrb	r3, [r2, #1]
   15e76:	428b      	cmp	r3, r1
   15e78:	d90d      	bls.n	15e96 <handle_event+0x6a>
   15e7a:	4a09      	ldr	r2, [pc, #36]	; (15ea0 <handle_event+0x74>)
   15e7c:	4b09      	ldr	r3, [pc, #36]	; (15ea4 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15e7e:	480b      	ldr	r0, [pc, #44]	; (15eac <handle_event+0x80>)
   15e80:	1a9b      	subs	r3, r3, r2
   15e82:	08db      	lsrs	r3, r3, #3
   15e84:	019b      	lsls	r3, r3, #6
   15e86:	f043 0301 	orr.w	r3, r3, #1
   15e8a:	462a      	mov	r2, r5
}
   15e8c:	b002      	add	sp, #8
   15e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   15e92:	f012 bead 	b.w	28bf0 <log_2>
		handler->handler(buf);
   15e96:	6853      	ldr	r3, [r2, #4]
}
   15e98:	b002      	add	sp, #8
   15e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   15e9e:	4718      	bx	r3
   15ea0:	0002d948 	.word	0x0002d948
   15ea4:	0002d978 	.word	0x0002d978
   15ea8:	000300ac 	.word	0x000300ac
   15eac:	0003008a 	.word	0x0003008a

00015eb0 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   15eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15eb4:	4b47      	ldr	r3, [pc, #284]	; (15fd4 <hci_rx_thread+0x124>)
   15eb6:	4d48      	ldr	r5, [pc, #288]	; (15fd8 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15eb8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 15ff8 <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15ebc:	f8df 913c 	ldr.w	r9, [pc, #316]	; 15ffc <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15ec0:	4f46      	ldr	r7, [pc, #280]	; (15fdc <hci_rx_thread+0x12c>)
   15ec2:	1aed      	subs	r5, r5, r3
   15ec4:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15ece:	4640      	mov	r0, r8
   15ed0:	f007 fd5c 	bl	1d98c <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15ed4:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   15ed6:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   15ed8:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   15eda:	d046      	beq.n	15f6a <hci_rx_thread+0xba>
   15edc:	2903      	cmp	r1, #3
   15ede:	d173      	bne.n	15fc8 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15ee0:	8983      	ldrh	r3, [r0, #12]
   15ee2:	2b03      	cmp	r3, #3
   15ee4:	d80c      	bhi.n	15f00 <hci_rx_thread+0x50>
   15ee6:	493e      	ldr	r1, [pc, #248]	; (15fe0 <hci_rx_thread+0x130>)
   15ee8:	483e      	ldr	r0, [pc, #248]	; (15fe4 <hci_rx_thread+0x134>)
   15eea:	f240 13b5 	movw	r3, #437	; 0x1b5
   15eee:	463a      	mov	r2, r7
   15ef0:	f012 fc3e 	bl	28770 <printk>
   15ef4:	4040      	eors	r0, r0
   15ef6:	f380 8811 	msr	BASEPRI, r0
   15efa:	f04f 0003 	mov.w	r0, #3
   15efe:	df02      	svc	2
   15f00:	2104      	movs	r1, #4
   15f02:	f104 0008 	add.w	r0, r4, #8
   15f06:	f007 fee1 	bl	1dccc <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15f0a:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   15f0c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15f0e:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15f12:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   15f14:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   15f18:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   15f1a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15f1c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   15f1e:	d009      	beq.n	15f34 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15f20:	01ab      	lsls	r3, r5, #6
   15f22:	4831      	ldr	r0, [pc, #196]	; (15fe8 <hci_rx_thread+0x138>)
   15f24:	f043 0301 	orr.w	r3, r3, #1
   15f28:	f012 fe62 	bl	28bf0 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   15f2c:	4620      	mov	r0, r4
   15f2e:	f007 fdbf 	bl	1dab0 <net_buf_unref>
			break;
   15f32:	e017      	b.n	15f64 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15f34:	f002 fa38 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   15f38:	4606      	mov	r6, r0
   15f3a:	b938      	cbnz	r0, 15f4c <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15f3c:	01aa      	lsls	r2, r5, #6
   15f3e:	8ae1      	ldrh	r1, [r4, #22]
   15f40:	482a      	ldr	r0, [pc, #168]	; (15fec <hci_rx_thread+0x13c>)
   15f42:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15f46:	f012 fe3f 	bl	28bc8 <log_1>
   15f4a:	e7ef      	b.n	15f2c <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   15f4c:	f002 fb1e 	bl	1858c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15f50:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   15f54:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   15f56:	4621      	mov	r1, r4
   15f58:	4630      	mov	r0, r6
   15f5a:	f002 f8b7 	bl	180cc <bt_conn_recv>
	bt_conn_unref(conn);
   15f5e:	4630      	mov	r0, r6
   15f60:	f002 f9ea 	bl	18338 <bt_conn_unref>
	z_impl_k_yield();
   15f64:	f00e fb1e 	bl	245a4 <z_impl_k_yield>
	while (1) {
   15f68:	e7ad      	b.n	15ec6 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15f6a:	8983      	ldrh	r3, [r0, #12]
   15f6c:	2b01      	cmp	r3, #1
   15f6e:	d80c      	bhi.n	15f8a <hci_rx_thread+0xda>
   15f70:	491b      	ldr	r1, [pc, #108]	; (15fe0 <hci_rx_thread+0x130>)
   15f72:	481c      	ldr	r0, [pc, #112]	; (15fe4 <hci_rx_thread+0x134>)
   15f74:	f640 1317 	movw	r3, #2327	; 0x917
   15f78:	463a      	mov	r2, r7
   15f7a:	f012 fbf9 	bl	28770 <printk>
   15f7e:	4040      	eors	r0, r0
   15f80:	f380 8811 	msr	BASEPRI, r0
   15f84:	f04f 0003 	mov.w	r0, #3
   15f88:	df02      	svc	2
   15f8a:	2102      	movs	r1, #2
   15f8c:	f104 0008 	add.w	r0, r4, #8
   15f90:	f007 fe9c 	bl	1dccc <net_buf_simple_pull_mem>
   15f94:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15f96:	7800      	ldrb	r0, [r0, #0]
   15f98:	f014 fead 	bl	2acf6 <bt_hci_evt_get_flags>
   15f9c:	0783      	lsls	r3, r0, #30
   15f9e:	d40c      	bmi.n	15fba <hci_rx_thread+0x10a>
   15fa0:	4913      	ldr	r1, [pc, #76]	; (15ff0 <hci_rx_thread+0x140>)
   15fa2:	4810      	ldr	r0, [pc, #64]	; (15fe4 <hci_rx_thread+0x134>)
   15fa4:	f640 131b 	movw	r3, #2331	; 0x91b
   15fa8:	463a      	mov	r2, r7
   15faa:	f012 fbe1 	bl	28770 <printk>
   15fae:	4040      	eors	r0, r0
   15fb0:	f380 8811 	msr	BASEPRI, r0
   15fb4:	f04f 0003 	mov.w	r0, #3
   15fb8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15fba:	7830      	ldrb	r0, [r6, #0]
   15fbc:	2306      	movs	r3, #6
   15fbe:	464a      	mov	r2, r9
   15fc0:	4621      	mov	r1, r4
   15fc2:	f7ff ff33 	bl	15e2c <handle_event>
	net_buf_unref(buf);
   15fc6:	e7b1      	b.n	15f2c <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15fc8:	01aa      	lsls	r2, r5, #6
   15fca:	480a      	ldr	r0, [pc, #40]	; (15ff4 <hci_rx_thread+0x144>)
   15fcc:	f042 0201 	orr.w	r2, r2, #1
   15fd0:	e7b9      	b.n	15f46 <hci_rx_thread+0x96>
   15fd2:	bf00      	nop
   15fd4:	0002d948 	.word	0x0002d948
   15fd8:	0002d978 	.word	0x0002d978
   15fdc:	000300ce 	.word	0x000300ce
   15fe0:	00030102 	.word	0x00030102
   15fe4:	0002e915 	.word	0x0002e915
   15fe8:	0003011b 	.word	0x0003011b
   15fec:	0003013f 	.word	0x0003013f
   15ff0:	00030161 	.word	0x00030161
   15ff4:	0003018f 	.word	0x0003018f
   15ff8:	200003ec 	.word	0x200003ec
   15ffc:	0002deec 	.word	0x0002deec

00016000 <hci_le_meta_event>:
{
   16000:	b510      	push	{r4, lr}
   16002:	2101      	movs	r1, #1
   16004:	4604      	mov	r4, r0
   16006:	3008      	adds	r0, #8
   16008:	f007 fe60 	bl	1dccc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1600c:	4621      	mov	r1, r4
   1600e:	4a03      	ldr	r2, [pc, #12]	; (1601c <hci_le_meta_event+0x1c>)
   16010:	7800      	ldrb	r0, [r0, #0]
}
   16012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16016:	230a      	movs	r3, #10
   16018:	f7ff bf08 	b.w	15e2c <handle_event>
   1601c:	0002de8c 	.word	0x0002de8c

00016020 <hci_num_completed_packets>:
{
   16020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16024:	4d39      	ldr	r5, [pc, #228]	; (1610c <hci_num_completed_packets+0xec>)
   16026:	4b3a      	ldr	r3, [pc, #232]	; (16110 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16028:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   1602c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 16118 <hci_num_completed_packets+0xf8>
   16030:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   16032:	2600      	movs	r6, #0
   16034:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   16036:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   16038:	f898 3000 	ldrb.w	r3, [r8]
   1603c:	429e      	cmp	r6, r3
   1603e:	db01      	blt.n	16044 <hci_num_completed_packets+0x24>
}
   16040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16044:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   16048:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1604c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16050:	4658      	mov	r0, fp
   16052:	f002 f9a9 	bl	183a8 <bt_conn_lookup_handle>
		if (!conn) {
   16056:	4604      	mov	r4, r0
   16058:	b1d8      	cbz	r0, 16092 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   1605a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   1605e:	2f00      	cmp	r7, #0
   16060:	d033      	beq.n	160ca <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   16062:	f04f 0340 	mov.w	r3, #64	; 0x40
   16066:	f3ef 8211 	mrs	r2, BASEPRI
   1606a:	f383 8812 	msr	BASEPRI_MAX, r3
   1606e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16072:	69e3      	ldr	r3, [r4, #28]
   16074:	b1b3      	cbz	r3, 160a4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   16076:	3b01      	subs	r3, #1
   16078:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1607a:	f382 8811 	msr	BASEPRI, r2
   1607e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16082:	4620      	mov	r0, r4
   16084:	f001 ffa2 	bl	17fcc <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   16088:	3f01      	subs	r7, #1
   1608a:	f00c fce5 	bl	22a58 <z_impl_k_sem_give>
   1608e:	b2bf      	uxth	r7, r7
   16090:	e7e5      	b.n	1605e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   16092:	01aa      	lsls	r2, r5, #6
   16094:	481f      	ldr	r0, [pc, #124]	; (16114 <hci_num_completed_packets+0xf4>)
   16096:	f042 0201 	orr.w	r2, r2, #1
   1609a:	4659      	mov	r1, fp
   1609c:	f012 fd94 	bl	28bc8 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   160a0:	3601      	adds	r6, #1
   160a2:	e7c9      	b.n	16038 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   160a4:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   160a6:	b12b      	cbz	r3, 160b4 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   160a8:	69a1      	ldr	r1, [r4, #24]
   160aa:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   160ac:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   160ae:	428b      	cmp	r3, r1
	list->tail = node;
   160b0:	bf08      	it	eq
   160b2:	61a0      	streq	r0, [r4, #24]
   160b4:	f382 8811 	msr	BASEPRI, r2
   160b8:	f3bf 8f6f 	isb	sy
			if (!node) {
   160bc:	b94b      	cbnz	r3, 160d2 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   160be:	01a9      	lsls	r1, r5, #6
   160c0:	f041 0101 	orr.w	r1, r1, #1
   160c4:	4650      	mov	r0, sl
   160c6:	f012 fd72 	bl	28bae <log_0>
		bt_conn_unref(conn);
   160ca:	4620      	mov	r0, r4
   160cc:	f002 f934 	bl	18338 <bt_conn_unref>
   160d0:	e7e6      	b.n	160a0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   160d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   160d6:	f3ef 8111 	mrs	r1, BASEPRI
   160da:	f382 8812 	msr	BASEPRI_MAX, r2
   160de:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   160e2:	68da      	ldr	r2, [r3, #12]
   160e4:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   160e6:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   160ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   160ec:	f8c3 900c 	str.w	r9, [r3, #12]
   160f0:	b94a      	cbnz	r2, 16106 <hci_num_completed_packets+0xe6>
	list->head = node;
   160f2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   160f6:	f381 8811 	msr	BASEPRI, r1
   160fa:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   160fe:	4658      	mov	r0, fp
   16100:	f00d f84a 	bl	23198 <k_work_submit>
   16104:	e7bd      	b.n	16082 <hci_num_completed_packets+0x62>
	parent->next = child;
   16106:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16108:	6263      	str	r3, [r4, #36]	; 0x24
}
   1610a:	e7f4      	b.n	160f6 <hci_num_completed_packets+0xd6>
   1610c:	0002d978 	.word	0x0002d978
   16110:	0002d948 	.word	0x0002d948
   16114:	000301a3 	.word	0x000301a3
   16118:	000301bf 	.word	0x000301bf

0001611c <hci_tx_thread>:
{
   1611c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16120:	4d51      	ldr	r5, [pc, #324]	; (16268 <hci_tx_thread+0x14c>)
   16122:	4b52      	ldr	r3, [pc, #328]	; (1626c <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16124:	f8df 914c 	ldr.w	r9, [pc, #332]	; 16274 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   16128:	f8df a174 	ldr.w	sl, [pc, #372]	; 162a0 <hci_tx_thread+0x184>
   1612c:	1aed      	subs	r5, r5, r3
   1612e:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   16130:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16134:	484e      	ldr	r0, [pc, #312]	; (16270 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16136:	f36f 3352 	bfc	r3, #13, #6
   1613a:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1613e:	f002 f8bd 	bl	182bc <bt_conn_prepare_events>
   16142:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16144:	484b      	ldr	r0, [pc, #300]	; (16274 <hci_tx_thread+0x158>)
   16146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1614a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1614e:	4639      	mov	r1, r7
   16150:	f00f fbee 	bl	25930 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16154:	b160      	cbz	r0, 16170 <hci_tx_thread+0x54>
   16156:	4948      	ldr	r1, [pc, #288]	; (16278 <hci_tx_thread+0x15c>)
   16158:	4848      	ldr	r0, [pc, #288]	; (1627c <hci_tx_thread+0x160>)
   1615a:	f640 1393 	movw	r3, #2451	; 0x993
   1615e:	4652      	mov	r2, sl
   16160:	f012 fb06 	bl	28770 <printk>
   16164:	4040      	eors	r0, r0
   16166:	f380 8811 	msr	BASEPRI, r0
   1616a:	f04f 0003 	mov.w	r0, #3
   1616e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   16170:	4e43      	ldr	r6, [pc, #268]	; (16280 <hci_tx_thread+0x164>)
{
   16172:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16274 <hci_tx_thread+0x158>
   16176:	f506 7b90 	add.w	fp, r6, #288	; 0x120
	for (; count; ev++, count--) {
   1617a:	b917      	cbnz	r7, 16182 <hci_tx_thread+0x66>
	z_impl_k_yield();
   1617c:	f00e fa12 	bl	245a4 <z_impl_k_yield>
	while (1) {
   16180:	e7d6      	b.n	16130 <hci_tx_thread+0x14>
		switch (ev->state) {
   16182:	f8d8 100c 	ldr.w	r1, [r8, #12]
   16186:	f3c1 3145 	ubfx	r1, r1, #13, #6
   1618a:	2901      	cmp	r1, #1
   1618c:	d959      	bls.n	16242 <hci_tx_thread+0x126>
   1618e:	2904      	cmp	r1, #4
   16190:	d163      	bne.n	1625a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16192:	f898 300c 	ldrb.w	r3, [r8, #12]
   16196:	2b00      	cmp	r3, #0
   16198:	d157      	bne.n	1624a <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1619a:	483a      	ldr	r0, [pc, #232]	; (16284 <hci_tx_thread+0x168>)
   1619c:	2200      	movs	r2, #0
   1619e:	2300      	movs	r3, #0
   161a0:	f007 fbf4 	bl	1d98c <net_buf_get>
	BT_ASSERT(buf);
   161a4:	4604      	mov	r4, r0
   161a6:	b960      	cbnz	r0, 161c2 <hci_tx_thread+0xa6>
   161a8:	4937      	ldr	r1, [pc, #220]	; (16288 <hci_tx_thread+0x16c>)
   161aa:	4834      	ldr	r0, [pc, #208]	; (1627c <hci_tx_thread+0x160>)
   161ac:	f640 132a 	movw	r3, #2346	; 0x92a
   161b0:	4652      	mov	r2, sl
   161b2:	f012 fadd 	bl	28770 <printk>
   161b6:	4040      	eors	r0, r0
   161b8:	f380 8811 	msr	BASEPRI, r0
   161bc:	f04f 0003 	mov.w	r0, #3
   161c0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   161c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   161c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   161ca:	4658      	mov	r0, fp
   161cc:	f00c fc88 	bl	22ae0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   161d0:	f8d6 3138 	ldr.w	r3, [r6, #312]	; 0x138
   161d4:	b163      	cbz	r3, 161f0 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   161d6:	01a9      	lsls	r1, r5, #6
   161d8:	482c      	ldr	r0, [pc, #176]	; (1628c <hci_tx_thread+0x170>)
   161da:	f041 0101 	orr.w	r1, r1, #1
   161de:	f012 fce6 	bl	28bae <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   161e2:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   161e6:	f007 fc63 	bl	1dab0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   161ea:	2300      	movs	r3, #0
   161ec:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   161f0:	4620      	mov	r0, r4
   161f2:	f007 fca3 	bl	1db3c <net_buf_ref>
   161f6:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   161fa:	4620      	mov	r0, r4
   161fc:	f7ff f960 	bl	154c0 <bt_hci_ecc_send>
	if (err) {
   16200:	4601      	mov	r1, r0
   16202:	b1f0      	cbz	r0, 16242 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   16204:	01aa      	lsls	r2, r5, #6
   16206:	4822      	ldr	r0, [pc, #136]	; (16290 <hci_tx_thread+0x174>)
   16208:	f042 0201 	orr.w	r2, r2, #1
   1620c:	f012 fcdc 	bl	28bc8 <log_1>
	z_impl_k_sem_give(sem);
   16210:	4820      	ldr	r0, [pc, #128]	; (16294 <hci_tx_thread+0x178>)
   16212:	f00c fc21 	bl	22a58 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16216:	4620      	mov	r0, r4
   16218:	f007 fa50 	bl	1d6bc <net_buf_id>
   1621c:	4b1e      	ldr	r3, [pc, #120]	; (16298 <hci_tx_thread+0x17c>)
   1621e:	220c      	movs	r2, #12
   16220:	fb02 3000 	mla	r0, r2, r0, r3
   16224:	211f      	movs	r1, #31
   16226:	8840      	ldrh	r0, [r0, #2]
   16228:	4622      	mov	r2, r4
   1622a:	f7ff fd61 	bl	15cf0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   1622e:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   16232:	f007 fc3d 	bl	1dab0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16236:	2300      	movs	r3, #0
		net_buf_unref(buf);
   16238:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1623a:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
		net_buf_unref(buf);
   1623e:	f007 fc37 	bl	1dab0 <net_buf_unref>
	for (; count; ev++, count--) {
   16242:	f108 0814 	add.w	r8, r8, #20
   16246:	3f01      	subs	r7, #1
   16248:	e797      	b.n	1617a <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1624a:	2b01      	cmp	r3, #1
   1624c:	d1f9      	bne.n	16242 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   1624e:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   16252:	3838      	subs	r0, #56	; 0x38
   16254:	f002 fcbc 	bl	18bd0 <bt_conn_process_tx>
   16258:	e7f3      	b.n	16242 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1625a:	01aa      	lsls	r2, r5, #6
   1625c:	480f      	ldr	r0, [pc, #60]	; (1629c <hci_tx_thread+0x180>)
   1625e:	f042 0202 	orr.w	r2, r2, #2
   16262:	f012 fcb1 	bl	28bc8 <log_1>
   16266:	e7ec      	b.n	16242 <hci_tx_thread+0x126>
   16268:	0002d978 	.word	0x0002d978
   1626c:	0002d948 	.word	0x0002d948
   16270:	200004e0 	.word	0x200004e0
   16274:	200004cc 	.word	0x200004cc
   16278:	000301d6 	.word	0x000301d6
   1627c:	0002e915 	.word	0x0002e915
   16280:	200002b0 	.word	0x200002b0
   16284:	20000408 	.word	0x20000408
   16288:	0002ff40 	.word	0x0002ff40
   1628c:	000301df 	.word	0x000301df
   16290:	000301fa 	.word	0x000301fa
   16294:	200003d0 	.word	0x200003d0
   16298:	200029b0 	.word	0x200029b0
   1629c:	0003021c 	.word	0x0003021c
   162a0:	000300ce 	.word	0x000300ce

000162a4 <hci_cmd_status>:
{
   162a4:	b538      	push	{r3, r4, r5, lr}
   162a6:	2104      	movs	r1, #4
   162a8:	4604      	mov	r4, r0
   162aa:	3008      	adds	r0, #8
   162ac:	f007 fd0e 	bl	1dccc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   162b0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   162b2:	7801      	ldrb	r1, [r0, #0]
   162b4:	8840      	ldrh	r0, [r0, #2]
   162b6:	4622      	mov	r2, r4
   162b8:	f7ff fd1a 	bl	15cf0 <hci_cmd_done>
	if (ncmd) {
   162bc:	b125      	cbz	r5, 162c8 <hci_cmd_status+0x24>
   162be:	4803      	ldr	r0, [pc, #12]	; (162cc <hci_cmd_status+0x28>)
}
   162c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   162c4:	f00c bbc8 	b.w	22a58 <z_impl_k_sem_give>
   162c8:	bd38      	pop	{r3, r4, r5, pc}
   162ca:	bf00      	nop
   162cc:	200003d0 	.word	0x200003d0

000162d0 <hci_cmd_complete>:
{
   162d0:	b538      	push	{r3, r4, r5, lr}
   162d2:	2103      	movs	r1, #3
   162d4:	4604      	mov	r4, r0
   162d6:	3008      	adds	r0, #8
   162d8:	f007 fcf8 	bl	1dccc <net_buf_simple_pull_mem>
	status = buf->data[0];
   162dc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   162de:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   162e0:	7819      	ldrb	r1, [r3, #0]
   162e2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   162e6:	4622      	mov	r2, r4
   162e8:	f7ff fd02 	bl	15cf0 <hci_cmd_done>
	if (ncmd) {
   162ec:	b125      	cbz	r5, 162f8 <hci_cmd_complete+0x28>
   162ee:	4803      	ldr	r0, [pc, #12]	; (162fc <hci_cmd_complete+0x2c>)
}
   162f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   162f4:	f00c bbb0 	b.w	22a58 <z_impl_k_sem_give>
   162f8:	bd38      	pop	{r3, r4, r5, pc}
   162fa:	bf00      	nop
   162fc:	200003d0 	.word	0x200003d0

00016300 <bt_hci_cmd_state_set_init>:
{
   16300:	b510      	push	{r4, lr}
	state->bit = bit;
   16302:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16306:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1630a:	720b      	strb	r3, [r1, #8]
{
   1630c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1630e:	f007 f9d5 	bl	1d6bc <net_buf_id>
   16312:	4b03      	ldr	r3, [pc, #12]	; (16320 <bt_hci_cmd_state_set_init+0x20>)
   16314:	220c      	movs	r2, #12
   16316:	fb02 3000 	mla	r0, r2, r0, r3
   1631a:	6044      	str	r4, [r0, #4]
}
   1631c:	bd10      	pop	{r4, pc}
   1631e:	bf00      	nop
   16320:	200029b0 	.word	0x200029b0

00016324 <bt_hci_cmd_create>:
{
   16324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1632c:	4605      	mov	r5, r0
   1632e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16332:	481b      	ldr	r0, [pc, #108]	; (163a0 <bt_hci_cmd_create+0x7c>)
   16334:	460e      	mov	r6, r1
   16336:	f016 fb32 	bl	2c99e <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   1633a:	4604      	mov	r4, r0
   1633c:	b948      	cbnz	r0, 16352 <bt_hci_cmd_create+0x2e>
   1633e:	4919      	ldr	r1, [pc, #100]	; (163a4 <bt_hci_cmd_create+0x80>)
   16340:	4819      	ldr	r0, [pc, #100]	; (163a8 <bt_hci_cmd_create+0x84>)
   16342:	4a1a      	ldr	r2, [pc, #104]	; (163ac <bt_hci_cmd_create+0x88>)
   16344:	23e9      	movs	r3, #233	; 0xe9
   16346:	f012 fa13 	bl	28770 <printk>
   1634a:	4818      	ldr	r0, [pc, #96]	; (163ac <bt_hci_cmd_create+0x88>)
   1634c:	21e9      	movs	r1, #233	; 0xe9
   1634e:	f012 fc00 	bl	28b52 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   16352:	f104 0b08 	add.w	fp, r4, #8
   16356:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16358:	2700      	movs	r7, #0
   1635a:	4658      	mov	r0, fp
   1635c:	f007 fb4a 	bl	1d9f4 <net_buf_simple_reserve>
   16360:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   16362:	4620      	mov	r0, r4
   16364:	f007 f9aa 	bl	1d6bc <net_buf_id>
   16368:	f8df 8044 	ldr.w	r8, [pc, #68]	; 163b0 <bt_hci_cmd_create+0x8c>
   1636c:	f04f 0a0c 	mov.w	sl, #12
   16370:	fb0a 8000 	mla	r0, sl, r0, r8
   16374:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   16376:	4620      	mov	r0, r4
   16378:	f007 f9a0 	bl	1d6bc <net_buf_id>
   1637c:	fb0a 8000 	mla	r0, sl, r0, r8
   16380:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   16382:	4620      	mov	r0, r4
   16384:	f007 f99a 	bl	1d6bc <net_buf_id>
   16388:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   1638c:	2103      	movs	r1, #3
   1638e:	6047      	str	r7, [r0, #4]
   16390:	4658      	mov	r0, fp
   16392:	f007 fcbd 	bl	1dd10 <net_buf_simple_add>
	hdr->param_len = param_len;
   16396:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   16398:	8005      	strh	r5, [r0, #0]
}
   1639a:	4620      	mov	r0, r4
   1639c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a0:	20000a44 	.word	0x20000a44
   163a4:	0002ff40 	.word	0x0002ff40
   163a8:	0002e915 	.word	0x0002e915
   163ac:	000300ce 	.word	0x000300ce
   163b0:	200029b0 	.word	0x200029b0

000163b4 <bt_hci_cmd_send>:
{
   163b4:	b538      	push	{r3, r4, r5, lr}
   163b6:	4605      	mov	r5, r0
	if (!buf) {
   163b8:	460c      	mov	r4, r1
   163ba:	b919      	cbnz	r1, 163c4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   163bc:	f7ff ffb2 	bl	16324 <bt_hci_cmd_create>
		if (!buf) {
   163c0:	4604      	mov	r4, r0
   163c2:	b1f0      	cbz	r0, 16402 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   163c4:	f640 4335 	movw	r3, #3125	; 0xc35
   163c8:	429d      	cmp	r5, r3
   163ca:	d114      	bne.n	163f6 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
   163cc:	4620      	mov	r0, r4
   163ce:	f7ff f877 	bl	154c0 <bt_hci_ecc_send>
		if (err) {
   163d2:	4605      	mov	r5, r0
   163d4:	b168      	cbz	r0, 163f2 <bt_hci_cmd_send+0x3e>
   163d6:	4b0c      	ldr	r3, [pc, #48]	; (16408 <bt_hci_cmd_send+0x54>)
   163d8:	4a0c      	ldr	r2, [pc, #48]	; (1640c <bt_hci_cmd_send+0x58>)
   163da:	1ad2      	subs	r2, r2, r3
   163dc:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   163de:	0192      	lsls	r2, r2, #6
   163e0:	4601      	mov	r1, r0
   163e2:	f042 0201 	orr.w	r2, r2, #1
   163e6:	480a      	ldr	r0, [pc, #40]	; (16410 <bt_hci_cmd_send+0x5c>)
   163e8:	f012 fbee 	bl	28bc8 <log_1>
			net_buf_unref(buf);
   163ec:	4620      	mov	r0, r4
   163ee:	f007 fb5f 	bl	1dab0 <net_buf_unref>
}
   163f2:	4628      	mov	r0, r5
   163f4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   163f6:	4807      	ldr	r0, [pc, #28]	; (16414 <bt_hci_cmd_send+0x60>)
   163f8:	4621      	mov	r1, r4
   163fa:	f007 fb25 	bl	1da48 <net_buf_put>
	return 0;
   163fe:	2500      	movs	r5, #0
   16400:	e7f7      	b.n	163f2 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   16402:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16406:	e7f4      	b.n	163f2 <bt_hci_cmd_send+0x3e>
   16408:	0002d948 	.word	0x0002d948
   1640c:	0002d978 	.word	0x0002d978
   16410:	000301fa 	.word	0x000301fa
   16414:	20000408 	.word	0x20000408

00016418 <le_ltk_request>:
{
   16418:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1641a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1641c:	882e      	ldrh	r6, [r5, #0]
   1641e:	b2b7      	uxth	r7, r6
{
   16420:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   16422:	4638      	mov	r0, r7
   16424:	f001 ffc0 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   16428:	4604      	mov	r4, r0
   1642a:	b960      	cbnz	r0, 16446 <le_ltk_request+0x2e>
   1642c:	4a26      	ldr	r2, [pc, #152]	; (164c8 <le_ltk_request+0xb0>)
   1642e:	4b27      	ldr	r3, [pc, #156]	; (164cc <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16430:	4827      	ldr	r0, [pc, #156]	; (164d0 <le_ltk_request+0xb8>)
   16432:	1ad2      	subs	r2, r2, r3
   16434:	08d2      	lsrs	r2, r2, #3
   16436:	0192      	lsls	r2, r2, #6
   16438:	f042 0201 	orr.w	r2, r2, #1
   1643c:	4639      	mov	r1, r7
   1643e:	f012 fbc3 	bl	28bc8 <log_1>
}
   16442:	b007      	add	sp, #28
   16444:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16446:	af02      	add	r7, sp, #8
   16448:	f8d5 2002 	ldr.w	r2, [r5, #2]
   1644c:	f8d5 3006 	ldr.w	r3, [r5, #6]
   16450:	9701      	str	r7, [sp, #4]
   16452:	8969      	ldrh	r1, [r5, #10]
   16454:	9100      	str	r1, [sp, #0]
   16456:	f016 f93e 	bl	2c6d6 <bt_smp_request_ltk>
   1645a:	b320      	cbz	r0, 164a6 <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1645c:	2112      	movs	r1, #18
   1645e:	f242 001a 	movw	r0, #8218	; 0x201a
   16462:	f7ff ff5f 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   16466:	4605      	mov	r5, r0
   16468:	b968      	cbnz	r0, 16486 <le_ltk_request+0x6e>
   1646a:	4917      	ldr	r1, [pc, #92]	; (164c8 <le_ltk_request+0xb0>)
   1646c:	4b17      	ldr	r3, [pc, #92]	; (164cc <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   1646e:	4819      	ldr	r0, [pc, #100]	; (164d4 <le_ltk_request+0xbc>)
   16470:	1ac9      	subs	r1, r1, r3
   16472:	08c9      	lsrs	r1, r1, #3
   16474:	0189      	lsls	r1, r1, #6
   16476:	f041 0101 	orr.w	r1, r1, #1
   1647a:	f012 fb98 	bl	28bae <log_0>
	bt_conn_unref(conn);
   1647e:	4620      	mov	r0, r4
   16480:	f001 ff5a 	bl	18338 <bt_conn_unref>
   16484:	e7dd      	b.n	16442 <le_ltk_request+0x2a>
   16486:	2112      	movs	r1, #18
   16488:	3008      	adds	r0, #8
   1648a:	f007 fc41 	bl	1dd10 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1648e:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   16490:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16494:	2210      	movs	r2, #16
   16496:	f014 fb00 	bl	2aa9a <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1649a:	4629      	mov	r1, r5
   1649c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   164a0:	f7ff ff88 	bl	163b4 <bt_hci_cmd_send>
   164a4:	e7eb      	b.n	1647e <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   164a6:	2102      	movs	r1, #2
   164a8:	f242 001b 	movw	r0, #8219	; 0x201b
   164ac:	f7ff ff3a 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   164b0:	4605      	mov	r5, r0
   164b2:	2800      	cmp	r0, #0
   164b4:	d0d9      	beq.n	1646a <le_ltk_request+0x52>
   164b6:	2102      	movs	r1, #2
   164b8:	3008      	adds	r0, #8
   164ba:	f007 fc29 	bl	1dd10 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   164be:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   164c0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   164c2:	f242 001b 	movw	r0, #8219	; 0x201b
   164c6:	e7eb      	b.n	164a0 <le_ltk_request+0x88>
   164c8:	0002d978 	.word	0x0002d978
   164cc:	0002d948 	.word	0x0002d948
   164d0:	0002ff92 	.word	0x0002ff92
   164d4:	0003023d 	.word	0x0003023d

000164d8 <le_conn_param_neg_reply>:
{
   164d8:	b570      	push	{r4, r5, r6, lr}
   164da:	4606      	mov	r6, r0
   164dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   164de:	f242 0021 	movw	r0, #8225	; 0x2021
   164e2:	2103      	movs	r1, #3
   164e4:	f7ff ff1e 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   164e8:	4604      	mov	r4, r0
   164ea:	b958      	cbnz	r0, 16504 <le_conn_param_neg_reply+0x2c>
   164ec:	490c      	ldr	r1, [pc, #48]	; (16520 <le_conn_param_neg_reply+0x48>)
   164ee:	4b0d      	ldr	r3, [pc, #52]	; (16524 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   164f0:	480d      	ldr	r0, [pc, #52]	; (16528 <le_conn_param_neg_reply+0x50>)
   164f2:	1ac9      	subs	r1, r1, r3
   164f4:	08c9      	lsrs	r1, r1, #3
   164f6:	0189      	lsls	r1, r1, #6
}
   164f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   164fc:	f041 0101 	orr.w	r1, r1, #1
   16500:	f012 bb55 	b.w	28bae <log_0>
   16504:	2103      	movs	r1, #3
   16506:	3008      	adds	r0, #8
   16508:	f007 fc02 	bl	1dd10 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1650c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1650e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16510:	4621      	mov	r1, r4
   16512:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1651a:	f7ff bf4b 	b.w	163b4 <bt_hci_cmd_send>
   1651e:	bf00      	nop
   16520:	0002d978 	.word	0x0002d978
   16524:	0002d948 	.word	0x0002d948
   16528:	00030254 	.word	0x00030254

0001652c <le_conn_param_req>:
{
   1652c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1652e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16530:	78d9      	ldrb	r1, [r3, #3]
   16532:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16534:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16536:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1653a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1653e:	7959      	ldrb	r1, [r3, #5]
   16540:	791a      	ldrb	r2, [r3, #4]
   16542:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16546:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1654a:	799a      	ldrb	r2, [r3, #6]
   1654c:	79d9      	ldrb	r1, [r3, #7]
   1654e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16552:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16556:	7a1a      	ldrb	r2, [r3, #8]
   16558:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1655a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1655c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16560:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16562:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16566:	f001 ff1f 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   1656a:	4606      	mov	r6, r0
   1656c:	b980      	cbnz	r0, 16590 <le_conn_param_req+0x64>
   1656e:	4b20      	ldr	r3, [pc, #128]	; (165f0 <le_conn_param_req+0xc4>)
   16570:	4a20      	ldr	r2, [pc, #128]	; (165f4 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16572:	4821      	ldr	r0, [pc, #132]	; (165f8 <le_conn_param_req+0xcc>)
   16574:	1ad2      	subs	r2, r2, r3
   16576:	08d2      	lsrs	r2, r2, #3
   16578:	0192      	lsls	r2, r2, #6
   1657a:	4621      	mov	r1, r4
   1657c:	f042 0201 	orr.w	r2, r2, #1
   16580:	f012 fb22 	bl	28bc8 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16584:	2102      	movs	r1, #2
   16586:	4620      	mov	r0, r4
   16588:	f7ff ffa6 	bl	164d8 <le_conn_param_neg_reply>
}
   1658c:	b003      	add	sp, #12
   1658e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   16590:	4669      	mov	r1, sp
   16592:	f002 f8cb 	bl	1872c <le_param_req>
   16596:	b938      	cbnz	r0, 165a8 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16598:	211e      	movs	r1, #30
   1659a:	4620      	mov	r0, r4
   1659c:	f7ff ff9c 	bl	164d8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   165a0:	4630      	mov	r0, r6
   165a2:	f001 fec9 	bl	18338 <bt_conn_unref>
   165a6:	e7f1      	b.n	1658c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   165a8:	210e      	movs	r1, #14
   165aa:	f242 0020 	movw	r0, #8224	; 0x2020
   165ae:	f7ff feb9 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   165b2:	4605      	mov	r5, r0
   165b4:	2800      	cmp	r0, #0
   165b6:	d0f3      	beq.n	165a0 <le_conn_param_req+0x74>
   165b8:	210e      	movs	r1, #14
   165ba:	3008      	adds	r0, #8
   165bc:	f007 fba8 	bl	1dd10 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   165c0:	220e      	movs	r2, #14
   165c2:	4604      	mov	r4, r0
   165c4:	2100      	movs	r1, #0
   165c6:	f014 fa73 	bl	2aab0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   165ca:	f8bd 3000 	ldrh.w	r3, [sp]
   165ce:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   165d0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   165d4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   165d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   165da:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   165dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   165e0:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   165e2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   165e4:	4629      	mov	r1, r5
   165e6:	f242 0020 	movw	r0, #8224	; 0x2020
   165ea:	f7ff fee3 	bl	163b4 <bt_hci_cmd_send>
   165ee:	e7d7      	b.n	165a0 <le_conn_param_req+0x74>
   165f0:	0002d948 	.word	0x0002d948
   165f4:	0002d978 	.word	0x0002d978
   165f8:	0002ff92 	.word	0x0002ff92

000165fc <bt_hci_cmd_send_sync>:
{
   165fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16600:	4607      	mov	r7, r0
   16602:	b086      	sub	sp, #24
   16604:	4615      	mov	r5, r2
	if (!buf) {
   16606:	460c      	mov	r4, r1
   16608:	b921      	cbnz	r1, 16614 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   1660a:	f7ff fe8b 	bl	16324 <bt_hci_cmd_create>
		if (!buf) {
   1660e:	4604      	mov	r4, r0
   16610:	2800      	cmp	r0, #0
   16612:	d055      	beq.n	166c0 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16614:	2201      	movs	r2, #1
   16616:	2100      	movs	r1, #0
   16618:	4668      	mov	r0, sp
   1661a:	f016 fe7a 	bl	2d312 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1661e:	4620      	mov	r0, r4
   16620:	f007 f84c 	bl	1d6bc <net_buf_id>
   16624:	4e28      	ldr	r6, [pc, #160]	; (166c8 <bt_hci_cmd_send_sync+0xcc>)
   16626:	230c      	movs	r3, #12
   16628:	fb03 6000 	mla	r0, r3, r0, r6
   1662c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16630:	4620      	mov	r0, r4
   16632:	f007 fa83 	bl	1db3c <net_buf_ref>
   16636:	4601      	mov	r1, r0
   16638:	4824      	ldr	r0, [pc, #144]	; (166cc <bt_hci_cmd_send_sync+0xd0>)
   1663a:	f007 fa05 	bl	1da48 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1663e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16642:	2300      	movs	r3, #0
   16644:	4668      	mov	r0, sp
   16646:	f00c fa4b 	bl	22ae0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1664a:	4680      	mov	r8, r0
   1664c:	b180      	cbz	r0, 16670 <bt_hci_cmd_send_sync+0x74>
   1664e:	4a20      	ldr	r2, [pc, #128]	; (166d0 <bt_hci_cmd_send_sync+0xd4>)
   16650:	4920      	ldr	r1, [pc, #128]	; (166d4 <bt_hci_cmd_send_sync+0xd8>)
   16652:	4821      	ldr	r0, [pc, #132]	; (166d8 <bt_hci_cmd_send_sync+0xdc>)
   16654:	f240 1331 	movw	r3, #305	; 0x131
   16658:	f012 f88a 	bl	28770 <printk>
   1665c:	481f      	ldr	r0, [pc, #124]	; (166dc <bt_hci_cmd_send_sync+0xe0>)
   1665e:	4641      	mov	r1, r8
   16660:	f012 f886 	bl	28770 <printk>
   16664:	4040      	eors	r0, r0
   16666:	f380 8811 	msr	BASEPRI, r0
   1666a:	f04f 0003 	mov.w	r0, #3
   1666e:	df02      	svc	2
	status = cmd(buf)->status;
   16670:	4620      	mov	r0, r4
   16672:	f007 f823 	bl	1d6bc <net_buf_id>
   16676:	230c      	movs	r3, #12
   16678:	4343      	muls	r3, r0
   1667a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   1667c:	b1be      	cbz	r6, 166ae <bt_hci_cmd_send_sync+0xb2>
   1667e:	4a18      	ldr	r2, [pc, #96]	; (166e0 <bt_hci_cmd_send_sync+0xe4>)
   16680:	4b18      	ldr	r3, [pc, #96]	; (166e4 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   16682:	4819      	ldr	r0, [pc, #100]	; (166e8 <bt_hci_cmd_send_sync+0xec>)
   16684:	1a9b      	subs	r3, r3, r2
   16686:	08db      	lsrs	r3, r3, #3
   16688:	019b      	lsls	r3, r3, #6
   1668a:	f043 0302 	orr.w	r3, r3, #2
   1668e:	4632      	mov	r2, r6
   16690:	4639      	mov	r1, r7
   16692:	f012 faad 	bl	28bf0 <log_2>
		net_buf_unref(buf);
   16696:	4620      	mov	r0, r4
   16698:	f007 fa0a 	bl	1dab0 <net_buf_unref>
			return -EIO;
   1669c:	2e09      	cmp	r6, #9
   1669e:	bf0c      	ite	eq
   166a0:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   166a4:	f06f 0004 	mvnne.w	r0, #4
}
   166a8:	b006      	add	sp, #24
   166aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   166ae:	b115      	cbz	r5, 166b6 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   166b0:	602c      	str	r4, [r5, #0]
	return 0;
   166b2:	4630      	mov	r0, r6
   166b4:	e7f8      	b.n	166a8 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   166b6:	4620      	mov	r0, r4
   166b8:	f007 f9fa 	bl	1dab0 <net_buf_unref>
	return 0;
   166bc:	4628      	mov	r0, r5
   166be:	e7f3      	b.n	166a8 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   166c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   166c4:	e7f0      	b.n	166a8 <bt_hci_cmd_send_sync+0xac>
   166c6:	bf00      	nop
   166c8:	200029b0 	.word	0x200029b0
   166cc:	20000408 	.word	0x20000408
   166d0:	000300ce 	.word	0x000300ce
   166d4:	000301d6 	.word	0x000301d6
   166d8:	0002e915 	.word	0x0002e915
   166dc:	0003026e 	.word	0x0003026e
   166e0:	0002d948 	.word	0x0002d948
   166e4:	0002d978 	.word	0x0002d978
   166e8:	0003028e 	.word	0x0003028e

000166ec <hci_le_read_max_data_len>:
{
   166ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   166ee:	4606      	mov	r6, r0
   166f0:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   166f2:	aa01      	add	r2, sp, #4
   166f4:	2100      	movs	r1, #0
   166f6:	f242 002f 	movw	r0, #8239	; 0x202f
   166fa:	f7ff ff7f 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   166fe:	4604      	mov	r4, r0
   16700:	b160      	cbz	r0, 1671c <hci_le_read_max_data_len+0x30>
   16702:	490c      	ldr	r1, [pc, #48]	; (16734 <hci_le_read_max_data_len+0x48>)
   16704:	4b0c      	ldr	r3, [pc, #48]	; (16738 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   16706:	480d      	ldr	r0, [pc, #52]	; (1673c <hci_le_read_max_data_len+0x50>)
   16708:	1ac9      	subs	r1, r1, r3
   1670a:	08c9      	lsrs	r1, r1, #3
   1670c:	0189      	lsls	r1, r1, #6
   1670e:	f041 0101 	orr.w	r1, r1, #1
   16712:	f012 fa4c 	bl	28bae <log_0>
}
   16716:	4620      	mov	r0, r4
   16718:	b002      	add	sp, #8
   1671a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1671c:	9801      	ldr	r0, [sp, #4]
   1671e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16720:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16724:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16726:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1672a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1672c:	f007 f9c0 	bl	1dab0 <net_buf_unref>
	return 0;
   16730:	e7f1      	b.n	16716 <hci_le_read_max_data_len+0x2a>
   16732:	bf00      	nop
   16734:	0002d978 	.word	0x0002d978
   16738:	0002d948 	.word	0x0002d948
   1673c:	000302aa 	.word	0x000302aa

00016740 <conn_auto_initiate>:
{
   16740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   16742:	7b43      	ldrb	r3, [r0, #13]
   16744:	2b07      	cmp	r3, #7
{
   16746:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16748:	d121      	bne.n	1678e <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1674a:	f3bf 8f5b 	dmb	ish
   1674e:	6843      	ldr	r3, [r0, #4]
   16750:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16754:	049b      	lsls	r3, r3, #18
   16756:	f100 0604 	add.w	r6, r0, #4
   1675a:	d41a      	bmi.n	16792 <conn_auto_initiate+0x52>
   1675c:	78c3      	ldrb	r3, [r0, #3]
   1675e:	b123      	cbz	r3, 1676a <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   16760:	4b31      	ldr	r3, [pc, #196]	; (16828 <conn_auto_initiate+0xe8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16762:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   16766:	071d      	lsls	r5, r3, #28
   16768:	d513      	bpl.n	16792 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1676a:	2102      	movs	r1, #2
   1676c:	f242 0016 	movw	r0, #8214	; 0x2016
   16770:	f7ff fdd8 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   16774:	4605      	mov	r5, r0
   16776:	b160      	cbz	r0, 16792 <conn_auto_initiate+0x52>
   16778:	2102      	movs	r1, #2
   1677a:	3008      	adds	r0, #8
   1677c:	f007 fac8 	bl	1dd10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16780:	8823      	ldrh	r3, [r4, #0]
   16782:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   16784:	4629      	mov	r1, r5
   16786:	f242 0016 	movw	r0, #8214	; 0x2016
   1678a:	f7ff fe13 	bl	163b4 <bt_hci_cmd_send>
}
   1678e:	b004      	add	sp, #16
   16790:	bd70      	pop	{r4, r5, r6, pc}
   16792:	f3bf 8f5b 	dmb	ish
   16796:	6863      	ldr	r3, [r4, #4]
   16798:	4d23      	ldr	r5, [pc, #140]	; (16828 <conn_auto_initiate+0xe8>)
   1679a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1679e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   167a2:	f3c3 3100 	ubfx	r1, r3, #12, #1
   167a6:	d11a      	bne.n	167de <conn_auto_initiate+0x9e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   167a8:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   167ac:	07d8      	lsls	r0, r3, #31
   167ae:	d516      	bpl.n	167de <conn_auto_initiate+0x9e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   167b0:	2302      	movs	r3, #2
   167b2:	9100      	str	r1, [sp, #0]
   167b4:	461a      	mov	r2, r3
   167b6:	4620      	mov	r0, r4
   167b8:	f014 fb1e 	bl	2adf8 <bt_le_set_phy>
		if (!err) {
   167bc:	4601      	mov	r1, r0
   167be:	b920      	cbnz	r0, 167ca <conn_auto_initiate+0x8a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   167c0:	2180      	movs	r1, #128	; 0x80
   167c2:	4630      	mov	r0, r6
   167c4:	f014 fac1 	bl	2ad4a <atomic_or>
			return;
   167c8:	e7e1      	b.n	1678e <conn_auto_initiate+0x4e>
   167ca:	4a18      	ldr	r2, [pc, #96]	; (1682c <conn_auto_initiate+0xec>)
   167cc:	4b18      	ldr	r3, [pc, #96]	; (16830 <conn_auto_initiate+0xf0>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   167ce:	4819      	ldr	r0, [pc, #100]	; (16834 <conn_auto_initiate+0xf4>)
   167d0:	1ad2      	subs	r2, r2, r3
   167d2:	08d2      	lsrs	r2, r2, #3
   167d4:	0192      	lsls	r2, r2, #6
   167d6:	f042 0201 	orr.w	r2, r2, #1
   167da:	f012 f9f5 	bl	28bc8 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   167de:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   167e2:	069a      	lsls	r2, r3, #26
   167e4:	d5d3      	bpl.n	1678e <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   167e6:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
   167ea:	689b      	ldr	r3, [r3, #8]
   167ec:	079b      	lsls	r3, r3, #30
   167ee:	d5ce      	bpl.n	1678e <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   167f0:	f10d 010e 	add.w	r1, sp, #14
   167f4:	a803      	add	r0, sp, #12
   167f6:	f7ff ff79 	bl	166ec <hci_le_read_max_data_len>
			if (!err) {
   167fa:	2800      	cmp	r0, #0
   167fc:	d1c7      	bne.n	1678e <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   167fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   16802:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   16806:	4620      	mov	r0, r4
   16808:	f014 fad9 	bl	2adbe <bt_le_set_data_len>
				if (err) {
   1680c:	4601      	mov	r1, r0
   1680e:	2800      	cmp	r0, #0
   16810:	d0bd      	beq.n	1678e <conn_auto_initiate+0x4e>
   16812:	4b07      	ldr	r3, [pc, #28]	; (16830 <conn_auto_initiate+0xf0>)
   16814:	4a05      	ldr	r2, [pc, #20]	; (1682c <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
   16816:	4808      	ldr	r0, [pc, #32]	; (16838 <conn_auto_initiate+0xf8>)
   16818:	1ad2      	subs	r2, r2, r3
   1681a:	08d2      	lsrs	r2, r2, #3
   1681c:	0192      	lsls	r2, r2, #6
   1681e:	f042 0201 	orr.w	r2, r2, #1
   16822:	f012 f9d1 	bl	28bc8 <log_1>
		}
   16826:	e7b2      	b.n	1678e <conn_auto_initiate+0x4e>
   16828:	200002b0 	.word	0x200002b0
   1682c:	0002d978 	.word	0x0002d978
   16830:	0002d948 	.word	0x0002d948
   16834:	000302ca 	.word	0x000302ca
   16838:	000302e4 	.word	0x000302e4

0001683c <le_phy_update_complete>:
{
   1683c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1683e:	6883      	ldr	r3, [r0, #8]
   16840:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   16844:	4628      	mov	r0, r5
   16846:	f001 fdaf 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   1684a:	4604      	mov	r4, r0
   1684c:	b960      	cbnz	r0, 16868 <le_phy_update_complete+0x2c>
   1684e:	4b14      	ldr	r3, [pc, #80]	; (168a0 <le_phy_update_complete+0x64>)
   16850:	4a14      	ldr	r2, [pc, #80]	; (168a4 <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16852:	4815      	ldr	r0, [pc, #84]	; (168a8 <le_phy_update_complete+0x6c>)
   16854:	1ad2      	subs	r2, r2, r3
   16856:	08d2      	lsrs	r2, r2, #3
   16858:	0192      	lsls	r2, r2, #6
   1685a:	4629      	mov	r1, r5
   1685c:	f042 0201 	orr.w	r2, r2, #1
}
   16860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16864:	f012 b9b0 	b.w	28bc8 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   16868:	3004      	adds	r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1686a:	f3bf 8f5b 	dmb	ish
   1686e:	e850 3f00 	ldrex	r3, [r0]
   16872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   16876:	e840 2100 	strex	r1, r2, [r0]
   1687a:	2900      	cmp	r1, #0
   1687c:	d1f7      	bne.n	1686e <le_phy_update_complete+0x32>
   1687e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16882:	061b      	lsls	r3, r3, #24
   16884:	d506      	bpl.n	16894 <le_phy_update_complete+0x58>
   16886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1688a:	f014 fa5e 	bl	2ad4a <atomic_or>
		conn_auto_initiate(conn);
   1688e:	4620      	mov	r0, r4
   16890:	f7ff ff56 	bl	16740 <conn_auto_initiate>
	bt_conn_unref(conn);
   16894:	4620      	mov	r0, r4
}
   16896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1689a:	f001 bd4d 	b.w	18338 <bt_conn_unref>
   1689e:	bf00      	nop
   168a0:	0002d948 	.word	0x0002d948
   168a4:	0002d978 	.word	0x0002d978
   168a8:	0002ff92 	.word	0x0002ff92

000168ac <le_remote_feat_complete>:
{
   168ac:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   168ae:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   168b0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   168b4:	4630      	mov	r0, r6
   168b6:	f001 fd77 	bl	183a8 <bt_conn_lookup_handle>
	if (!conn) {
   168ba:	4604      	mov	r4, r0
   168bc:	b960      	cbnz	r0, 168d8 <le_remote_feat_complete+0x2c>
   168be:	4a10      	ldr	r2, [pc, #64]	; (16900 <le_remote_feat_complete+0x54>)
   168c0:	4b10      	ldr	r3, [pc, #64]	; (16904 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   168c2:	4811      	ldr	r0, [pc, #68]	; (16908 <le_remote_feat_complete+0x5c>)
   168c4:	1ad2      	subs	r2, r2, r3
   168c6:	08d2      	lsrs	r2, r2, #3
   168c8:	0192      	lsls	r2, r2, #6
   168ca:	4631      	mov	r1, r6
   168cc:	f042 0201 	orr.w	r2, r2, #1
}
   168d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   168d4:	f012 b978 	b.w	28bc8 <log_1>
	if (!evt->status) {
   168d8:	782b      	ldrb	r3, [r5, #0]
   168da:	b923      	cbnz	r3, 168e6 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   168dc:	2208      	movs	r2, #8
   168de:	1ce9      	adds	r1, r5, #3
   168e0:	30b4      	adds	r0, #180	; 0xb4
   168e2:	f014 f8da 	bl	2aa9a <memcpy>
   168e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   168ea:	1d20      	adds	r0, r4, #4
   168ec:	f014 fa2d 	bl	2ad4a <atomic_or>
	conn_auto_initiate(conn);
   168f0:	4620      	mov	r0, r4
   168f2:	f7ff ff25 	bl	16740 <conn_auto_initiate>
	bt_conn_unref(conn);
   168f6:	4620      	mov	r0, r4
}
   168f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   168fc:	f001 bd1c 	b.w	18338 <bt_conn_unref>
   16900:	0002d978 	.word	0x0002d978
   16904:	0002d948 	.word	0x0002d948
   16908:	0002ff92 	.word	0x0002ff92

0001690c <bt_hci_le_enh_conn_complete>:
{
   1690c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16910:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16914:	4a7e      	ldr	r2, [pc, #504]	; (16b10 <bt_hci_le_enh_conn_complete+0x204>)
	handle |= ~BT_ACL_HANDLE_MASK;
   16916:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   1691a:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   1691c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   16920:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   16922:	b29b      	uxth	r3, r3
   16924:	4299      	cmp	r1, r3
   16926:	f04f 0800 	mov.w	r8, #0
{
   1692a:	b085      	sub	sp, #20
			disconnected_handles[i] = 0;
   1692c:	bf04      	itt	eq
   1692e:	f8a2 8000 	strheq.w	r8, [r2]
			return true;
   16932:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
   16936:	f000 fac9 	bl	16ecc <bt_id_pending_keys_update>
	if (evt->status) {
   1693a:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1693c:	fa1f f789 	uxth.w	r7, r9
	if (evt->status) {
   16940:	b3b4      	cbz	r4, 169b0 <bt_hci_le_enh_conn_complete+0xa4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16942:	2c3c      	cmp	r4, #60	; 0x3c
   16944:	d128      	bne.n	16998 <bt_hci_le_enh_conn_complete+0x8c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16946:	f000 fed7 	bl	176f8 <bt_le_adv_lookup_legacy>
   1694a:	f3bf 8f5b 	dmb	ish
   1694e:	3010      	adds	r0, #16
   16950:	e850 3f00 	ldrex	r3, [r0]
   16954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16958:	e840 3200 	strex	r2, r3, [r0]
   1695c:	2a00      	cmp	r2, #0
   1695e:	d1f7      	bne.n	16950 <bt_hci_le_enh_conn_complete+0x44>
   16960:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16964:	2000      	movs	r0, #0
   16966:	f7ff f9a5 	bl	15cb4 <find_pending_connect.part.0>
		if (!conn) {
   1696a:	4605      	mov	r5, r0
   1696c:	b960      	cbnz	r0, 16988 <bt_hci_le_enh_conn_complete+0x7c>
   1696e:	4969      	ldr	r1, [pc, #420]	; (16b14 <bt_hci_le_enh_conn_complete+0x208>)
   16970:	4b69      	ldr	r3, [pc, #420]	; (16b18 <bt_hci_le_enh_conn_complete+0x20c>)
			BT_ERR("No pending peripheral connection");
   16972:	486a      	ldr	r0, [pc, #424]	; (16b1c <bt_hci_le_enh_conn_complete+0x210>)
   16974:	1ac9      	subs	r1, r1, r3
   16976:	08c9      	lsrs	r1, r1, #3
   16978:	0189      	lsls	r1, r1, #6
   1697a:	f041 0101 	orr.w	r1, r1, #1
   1697e:	f012 f916 	bl	28bae <log_0>
}
   16982:	b005      	add	sp, #20
   16984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16988:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1698a:	2100      	movs	r1, #0
   1698c:	f001 fd18 	bl	183c0 <bt_conn_set_state>
		bt_conn_unref(conn);
   16990:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16992:	f001 fcd1 	bl	18338 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16996:	e7f4      	b.n	16982 <bt_hci_le_enh_conn_complete+0x76>
   16998:	4b5f      	ldr	r3, [pc, #380]	; (16b18 <bt_hci_le_enh_conn_complete+0x20c>)
   1699a:	4a5e      	ldr	r2, [pc, #376]	; (16b14 <bt_hci_le_enh_conn_complete+0x208>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1699c:	4860      	ldr	r0, [pc, #384]	; (16b20 <bt_hci_le_enh_conn_complete+0x214>)
   1699e:	1ad2      	subs	r2, r2, r3
   169a0:	08d2      	lsrs	r2, r2, #3
   169a2:	0192      	lsls	r2, r2, #6
   169a4:	f042 0202 	orr.w	r2, r2, #2
   169a8:	4621      	mov	r1, r4
   169aa:	f012 f90d 	bl	28bc8 <log_1>
		return;
   169ae:	e7e8      	b.n	16982 <bt_hci_le_enh_conn_complete+0x76>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   169b0:	792b      	ldrb	r3, [r5, #4]
   169b2:	3b02      	subs	r3, #2
   169b4:	2b01      	cmp	r3, #1
   169b6:	f105 0604 	add.w	r6, r5, #4
   169ba:	d846      	bhi.n	16a4a <bt_hci_le_enh_conn_complete+0x13e>
	memcpy(dst, src, sizeof(*dst));
   169bc:	2207      	movs	r2, #7
   169be:	4631      	mov	r1, r6
   169c0:	a802      	add	r0, sp, #8
   169c2:	f014 f86a 	bl	2aa9a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   169c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   169ca:	2206      	movs	r2, #6
   169cc:	3b02      	subs	r3, #2
   169ce:	f105 0111 	add.w	r1, r5, #17
   169d2:	f10d 0001 	add.w	r0, sp, #1
   169d6:	f88d 3008 	strb.w	r3, [sp, #8]
   169da:	f014 f85e 	bl	2aa9a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   169de:	2301      	movs	r3, #1
   169e0:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   169e4:	78eb      	ldrb	r3, [r5, #3]
   169e6:	2b01      	cmp	r3, #1
   169e8:	d119      	bne.n	16a1e <bt_hci_le_enh_conn_complete+0x112>
   169ea:	a802      	add	r0, sp, #8
   169ec:	f7ff f962 	bl	15cb4 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   169f0:	78eb      	ldrb	r3, [r5, #3]
   169f2:	2b01      	cmp	r3, #1
   169f4:	4604      	mov	r4, r0
   169f6:	d111      	bne.n	16a1c <bt_hci_le_enh_conn_complete+0x110>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   169f8:	f000 fe7e 	bl	176f8 <bt_le_adv_lookup_legacy>
   169fc:	f3bf 8f5b 	dmb	ish
   16a00:	f100 0310 	add.w	r3, r0, #16
   16a04:	e853 2f00 	ldrex	r2, [r3]
   16a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16a0c:	e843 2100 	strex	r1, r2, [r3]
   16a10:	2900      	cmp	r1, #0
   16a12:	d1f7      	bne.n	16a04 <bt_hci_le_enh_conn_complete+0xf8>
   16a14:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16a18:	f014 fc15 	bl	2b246 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   16a1c:	bb54      	cbnz	r4, 16a74 <bt_hci_le_enh_conn_complete+0x168>
   16a1e:	4a3e      	ldr	r2, [pc, #248]	; (16b18 <bt_hci_le_enh_conn_complete+0x20c>)
   16a20:	4c3c      	ldr	r4, [pc, #240]	; (16b14 <bt_hci_le_enh_conn_complete+0x208>)
		BT_ERR("No pending conn for peer %s",
   16a22:	4630      	mov	r0, r6
   16a24:	1aa4      	subs	r4, r4, r2
   16a26:	f7fe fb93 	bl	15150 <bt_addr_le_str_real>
   16a2a:	f7fb fcb9 	bl	123a0 <z_log_strdup>
   16a2e:	08e4      	lsrs	r4, r4, #3
   16a30:	01a4      	lsls	r4, r4, #6
   16a32:	f044 0401 	orr.w	r4, r4, #1
   16a36:	4601      	mov	r1, r0
   16a38:	4622      	mov	r2, r4
   16a3a:	483a      	ldr	r0, [pc, #232]	; (16b24 <bt_hci_le_enh_conn_complete+0x218>)
   16a3c:	f012 f8c4 	bl	28bc8 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16a40:	211f      	movs	r1, #31
   16a42:	4638      	mov	r0, r7
   16a44:	f014 f9a0 	bl	2ad88 <bt_hci_disconnect>
		return;
   16a48:	e79b      	b.n	16982 <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   16a4a:	78eb      	ldrb	r3, [r5, #3]
   16a4c:	2b01      	cmp	r3, #1
   16a4e:	bf04      	itt	eq
   16a50:	4b35      	ldreq	r3, [pc, #212]	; (16b28 <bt_hci_le_enh_conn_complete+0x21c>)
   16a52:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   16a56:	4631      	mov	r1, r6
   16a58:	4620      	mov	r0, r4
   16a5a:	f014 fadd 	bl	2b018 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   16a5e:	2207      	movs	r2, #7
   16a60:	4601      	mov	r1, r0
   16a62:	a802      	add	r0, sp, #8
   16a64:	f014 f819 	bl	2aa9a <memcpy>
   16a68:	2207      	movs	r2, #7
   16a6a:	4631      	mov	r1, r6
   16a6c:	4668      	mov	r0, sp
   16a6e:	f014 f814 	bl	2aa9a <memcpy>
}
   16a72:	e7b7      	b.n	169e4 <bt_hci_le_enh_conn_complete+0xd8>
	conn->handle = handle;
   16a74:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   16a76:	2207      	movs	r2, #7
   16a78:	f820 9b90 	strh.w	r9, [r0], #144
   16a7c:	a902      	add	r1, sp, #8
   16a7e:	f014 f80c 	bl	2aa9a <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16a82:	7e2a      	ldrb	r2, [r5, #24]
   16a84:	7deb      	ldrb	r3, [r5, #23]
   16a86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16a8a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16a8e:	7eaa      	ldrb	r2, [r5, #26]
   16a90:	7e6b      	ldrb	r3, [r5, #25]
   16a92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16a96:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16a9a:	7eeb      	ldrb	r3, [r5, #27]
   16a9c:	7f2a      	ldrb	r2, [r5, #28]
   16a9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16aa2:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   16aa6:	78eb      	ldrb	r3, [r5, #3]
   16aa8:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16aaa:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16aac:	2b01      	cmp	r3, #1
	conn->err = 0U;
   16aae:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16ab0:	d11a      	bne.n	16ae8 <bt_hci_le_enh_conn_complete+0x1dc>
   16ab2:	2207      	movs	r2, #7
   16ab4:	4669      	mov	r1, sp
   16ab6:	f104 0097 	add.w	r0, r4, #151	; 0x97
   16aba:	f013 ffee 	bl	2aa9a <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16abe:	f000 fe1b 	bl	176f8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   16ac2:	7a21      	ldrb	r1, [r4, #8]
   16ac4:	4e18      	ldr	r6, [pc, #96]	; (16b28 <bt_hci_le_enh_conn_complete+0x21c>)
   16ac6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   16aca:	2207      	movs	r2, #7
   16acc:	4431      	add	r1, r6
   16ace:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   16ad2:	f013 ffe2 	bl	2aa9a <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16ad6:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
   16ada:	462a      	mov	r2, r5
   16adc:	f001 0340 	and.w	r3, r1, #64	; 0x40
   16ae0:	4313      	orrs	r3, r2
   16ae2:	d001      	beq.n	16ae8 <bt_hci_le_enh_conn_complete+0x1dc>
			bt_le_adv_resume();
   16ae4:	f000 ffda 	bl	17a9c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16ae8:	2107      	movs	r1, #7
   16aea:	4620      	mov	r0, r4
   16aec:	f001 fc68 	bl	183c0 <bt_conn_set_state>
	if (is_disconnected) {
   16af0:	f1b8 0f00 	cmp.w	r8, #0
   16af4:	d003      	beq.n	16afe <bt_hci_le_enh_conn_complete+0x1f2>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16af6:	2101      	movs	r1, #1
   16af8:	4620      	mov	r0, r4
   16afa:	f001 fc61 	bl	183c0 <bt_conn_set_state>
	bt_conn_connected(conn);
   16afe:	4620      	mov	r0, r4
   16b00:	f014 fc10 	bl	2b324 <bt_conn_connected>
	conn_auto_initiate(conn);
   16b04:	4620      	mov	r0, r4
   16b06:	f7ff fe1b 	bl	16740 <conn_auto_initiate>
	bt_conn_unref(conn);
   16b0a:	4620      	mov	r0, r4
   16b0c:	e741      	b.n	16992 <bt_hci_le_enh_conn_complete+0x86>
   16b0e:	bf00      	nop
   16b10:	20003730 	.word	0x20003730
   16b14:	0002d978 	.word	0x0002d978
   16b18:	0002d948 	.word	0x0002d948
   16b1c:	00030300 	.word	0x00030300
   16b20:	00030321 	.word	0x00030321
   16b24:	0003033a 	.word	0x0003033a
   16b28:	200002b0 	.word	0x200002b0

00016b2c <bt_security_err_get>:
	switch (hci_err) {
   16b2c:	2829      	cmp	r0, #41	; 0x29
   16b2e:	bf9a      	itte	ls
   16b30:	4b01      	ldrls	r3, [pc, #4]	; (16b38 <bt_security_err_get+0xc>)
   16b32:	5c18      	ldrbls	r0, [r3, r0]
{
   16b34:	2009      	movhi	r0, #9
}
   16b36:	4770      	bx	lr
   16b38:	000304ba 	.word	0x000304ba

00016b3c <hci_event_prio>:
{
   16b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b40:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16b42:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   16b46:	4630      	mov	r0, r6
   16b48:	f015 ff36 	bl	2c9b8 <net_buf_simple_headroom>
	state->len = buf->len;
   16b4c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16b50:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16b54:	4605      	mov	r5, r0
   16b56:	d80c      	bhi.n	16b72 <hci_event_prio+0x36>
   16b58:	4a1c      	ldr	r2, [pc, #112]	; (16bcc <hci_event_prio+0x90>)
   16b5a:	491d      	ldr	r1, [pc, #116]	; (16bd0 <hci_event_prio+0x94>)
   16b5c:	481d      	ldr	r0, [pc, #116]	; (16bd4 <hci_event_prio+0x98>)
   16b5e:	f640 5327 	movw	r3, #3367	; 0xd27
   16b62:	f011 fe05 	bl	28770 <printk>
   16b66:	4040      	eors	r0, r0
   16b68:	f380 8811 	msr	BASEPRI, r0
   16b6c:	f04f 0003 	mov.w	r0, #3
   16b70:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16b72:	2102      	movs	r1, #2
   16b74:	4630      	mov	r0, r6
   16b76:	f007 f8a9 	bl	1dccc <net_buf_simple_pull_mem>
   16b7a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16b7c:	7800      	ldrb	r0, [r0, #0]
   16b7e:	f014 f8ba 	bl	2acf6 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16b82:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16b84:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16b86:	d40c      	bmi.n	16ba2 <hci_event_prio+0x66>
   16b88:	4a10      	ldr	r2, [pc, #64]	; (16bcc <hci_event_prio+0x90>)
   16b8a:	4913      	ldr	r1, [pc, #76]	; (16bd8 <hci_event_prio+0x9c>)
   16b8c:	4811      	ldr	r0, [pc, #68]	; (16bd4 <hci_event_prio+0x98>)
   16b8e:	f640 532b 	movw	r3, #3371	; 0xd2b
   16b92:	f011 fded 	bl	28770 <printk>
   16b96:	4040      	eors	r0, r0
   16b98:	f380 8811 	msr	BASEPRI, r0
   16b9c:	f04f 0003 	mov.w	r0, #3
   16ba0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16ba2:	2305      	movs	r3, #5
   16ba4:	4a0d      	ldr	r2, [pc, #52]	; (16bdc <hci_event_prio+0xa0>)
   16ba6:	7838      	ldrb	r0, [r7, #0]
   16ba8:	4621      	mov	r1, r4
   16baa:	f7ff f93f 	bl	15e2c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16bae:	07b3      	lsls	r3, r6, #30
   16bb0:	d507      	bpl.n	16bc2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16bb2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16bb4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16bb8:	fa10 f585 	uxtah	r5, r0, r5
   16bbc:	60a5      	str	r5, [r4, #8]
}
   16bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16bc2:	4620      	mov	r0, r4
}
   16bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16bc8:	f006 bf72 	b.w	1dab0 <net_buf_unref>
   16bcc:	000300ce 	.word	0x000300ce
   16bd0:	00030102 	.word	0x00030102
   16bd4:	0002e915 	.word	0x0002e915
   16bd8:	00030356 	.word	0x00030356
   16bdc:	0002df1c 	.word	0x0002df1c

00016be0 <bt_recv>:
{
   16be0:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16be2:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   16be4:	2901      	cmp	r1, #1
{
   16be6:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   16be8:	d007      	beq.n	16bfa <bt_recv+0x1a>
   16bea:	2903      	cmp	r1, #3
   16bec:	d113      	bne.n	16c16 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   16bee:	4812      	ldr	r0, [pc, #72]	; (16c38 <bt_recv+0x58>)
   16bf0:	4629      	mov	r1, r5
   16bf2:	f006 ff29 	bl	1da48 <net_buf_put>
		return 0;
   16bf6:	2000      	movs	r0, #0
   16bf8:	e00c      	b.n	16c14 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16bfa:	6883      	ldr	r3, [r0, #8]
   16bfc:	7818      	ldrb	r0, [r3, #0]
   16bfe:	f014 f87a 	bl	2acf6 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16c02:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16c04:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16c06:	d502      	bpl.n	16c0e <bt_recv+0x2e>
			hci_event_prio(buf);
   16c08:	4628      	mov	r0, r5
   16c0a:	f7ff ff97 	bl	16b3c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16c0e:	f014 0002 	ands.w	r0, r4, #2
   16c12:	d1ec      	bne.n	16bee <bt_recv+0xe>
}
   16c14:	bd38      	pop	{r3, r4, r5, pc}
   16c16:	4b09      	ldr	r3, [pc, #36]	; (16c3c <bt_recv+0x5c>)
   16c18:	4a09      	ldr	r2, [pc, #36]	; (16c40 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16c1a:	480a      	ldr	r0, [pc, #40]	; (16c44 <bt_recv+0x64>)
   16c1c:	1ad2      	subs	r2, r2, r3
   16c1e:	08d2      	lsrs	r2, r2, #3
   16c20:	0192      	lsls	r2, r2, #6
   16c22:	f042 0201 	orr.w	r2, r2, #1
   16c26:	f011 ffcf 	bl	28bc8 <log_1>
		net_buf_unref(buf);
   16c2a:	4628      	mov	r0, r5
   16c2c:	f006 ff40 	bl	1dab0 <net_buf_unref>
		return -EINVAL;
   16c30:	f06f 0015 	mvn.w	r0, #21
   16c34:	e7ee      	b.n	16c14 <bt_recv+0x34>
   16c36:	bf00      	nop
   16c38:	200003ec 	.word	0x200003ec
   16c3c:	0002d948 	.word	0x0002d948
   16c40:	0002d978 	.word	0x0002d978
   16c44:	0003036f 	.word	0x0003036f

00016c48 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   16c48:	4a08      	ldr	r2, [pc, #32]	; (16c6c <bt_hci_driver_register+0x24>)
{
   16c4a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16c4c:	f8d2 0174 	ldr.w	r0, [r2, #372]	; 0x174
   16c50:	b930      	cbnz	r0, 16c60 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16c52:	68d9      	ldr	r1, [r3, #12]
   16c54:	b139      	cbz	r1, 16c66 <bt_hci_driver_register+0x1e>
   16c56:	6919      	ldr	r1, [r3, #16]
   16c58:	b129      	cbz	r1, 16c66 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   16c5a:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
	return 0;
   16c5e:	4770      	bx	lr
		return -EALREADY;
   16c60:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16c64:	4770      	bx	lr
		return -EINVAL;
   16c66:	f06f 0015 	mvn.w	r0, #21
}
   16c6a:	4770      	bx	lr
   16c6c:	200002b0 	.word	0x200002b0

00016c70 <bt_finalize_init>:
   16c70:	4801      	ldr	r0, [pc, #4]	; (16c78 <bt_finalize_init+0x8>)
   16c72:	2102      	movs	r1, #2
   16c74:	f014 b869 	b.w	2ad4a <atomic_or>
   16c78:	2000037c 	.word	0x2000037c

00016c7c <init_work>:
{
   16c7c:	b510      	push	{r4, lr}
	err = bt_init();
   16c7e:	f7f9 f8eb 	bl	fe58 <bt_init>
	if (ready_cb) {
   16c82:	4b03      	ldr	r3, [pc, #12]	; (16c90 <init_work+0x14>)
   16c84:	681b      	ldr	r3, [r3, #0]
   16c86:	b113      	cbz	r3, 16c8e <init_work+0x12>
}
   16c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16c8c:	4718      	bx	r3
}
   16c8e:	bd10      	pop	{r4, pc}
   16c90:	200029c8 	.word	0x200029c8

00016c94 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   16c94:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   16c98:	4d38      	ldr	r5, [pc, #224]	; (16d7c <bt_enable+0xe8>)
   16c9a:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
{
   16c9e:	b088      	sub	sp, #32
   16ca0:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16ca2:	b97b      	cbnz	r3, 16cc4 <bt_enable+0x30>
   16ca4:	4b36      	ldr	r3, [pc, #216]	; (16d80 <bt_enable+0xec>)
   16ca6:	4937      	ldr	r1, [pc, #220]	; (16d84 <bt_enable+0xf0>)
		BT_ERR("No HCI driver registered");
   16ca8:	4837      	ldr	r0, [pc, #220]	; (16d88 <bt_enable+0xf4>)
   16caa:	1ac9      	subs	r1, r1, r3
   16cac:	08c9      	lsrs	r1, r1, #3
   16cae:	0189      	lsls	r1, r1, #6
   16cb0:	f041 0101 	orr.w	r1, r1, #1
   16cb4:	f011 ff7b 	bl	28bae <log_0>
		return -ENODEV;
   16cb8:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16cbc:	4620      	mov	r0, r4
   16cbe:	b008      	add	sp, #32
   16cc0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16cc4:	2101      	movs	r1, #1
   16cc6:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   16cca:	f014 f83e 	bl	2ad4a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16cce:	07c3      	lsls	r3, r0, #31
   16cd0:	d451      	bmi.n	16d76 <bt_enable+0xe2>
		err = bt_settings_init();
   16cd2:	f7fe fd85 	bl	157e0 <bt_settings_init>
		if (err) {
   16cd6:	4604      	mov	r4, r0
   16cd8:	2800      	cmp	r0, #0
   16cda:	d1ef      	bne.n	16cbc <bt_enable+0x28>
	ready_cb = cb;
   16cdc:	4b2b      	ldr	r3, [pc, #172]	; (16d8c <bt_enable+0xf8>)
   16cde:	f04f 0800 	mov.w	r8, #0
   16ce2:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   16ce4:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16ce8:	f06f 0308 	mvn.w	r3, #8
   16cec:	e9cd 0302 	strd	r0, r3, [sp, #8]
   16cf0:	e9cd 0000 	strd	r0, r0, [sp]
   16cf4:	9004      	str	r0, [sp, #16]
   16cf6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16cfa:	4b25      	ldr	r3, [pc, #148]	; (16d90 <bt_enable+0xfc>)
   16cfc:	4925      	ldr	r1, [pc, #148]	; (16d94 <bt_enable+0x100>)
   16cfe:	4826      	ldr	r0, [pc, #152]	; (16d98 <bt_enable+0x104>)
   16d00:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   16d04:	f00b fa4c 	bl	221a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16d08:	4924      	ldr	r1, [pc, #144]	; (16d9c <bt_enable+0x108>)
   16d0a:	4823      	ldr	r0, [pc, #140]	; (16d98 <bt_enable+0x104>)
   16d0c:	f016 fabe 	bl	2d28c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16d10:	f06f 0307 	mvn.w	r3, #7
   16d14:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16d18:	e9cd 8906 	strd	r8, r9, [sp, #24]
   16d1c:	e9cd 4400 	strd	r4, r4, [sp]
   16d20:	4b1f      	ldr	r3, [pc, #124]	; (16da0 <bt_enable+0x10c>)
   16d22:	4920      	ldr	r1, [pc, #128]	; (16da4 <bt_enable+0x110>)
   16d24:	9404      	str	r4, [sp, #16]
   16d26:	f640 0298 	movw	r2, #2200	; 0x898
   16d2a:	481f      	ldr	r0, [pc, #124]	; (16da8 <bt_enable+0x114>)
   16d2c:	f00b fa38 	bl	221a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16d30:	491e      	ldr	r1, [pc, #120]	; (16dac <bt_enable+0x118>)
   16d32:	481d      	ldr	r0, [pc, #116]	; (16da8 <bt_enable+0x114>)
   16d34:	f016 faaa 	bl	2d28c <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   16d38:	f7fe fc30 	bl	1559c <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   16d3c:	f8d5 3174 	ldr.w	r3, [r5, #372]	; 0x174
   16d40:	68db      	ldr	r3, [r3, #12]
   16d42:	4798      	blx	r3
	if (err) {
   16d44:	4604      	mov	r4, r0
   16d46:	b158      	cbz	r0, 16d60 <bt_enable+0xcc>
   16d48:	4b0d      	ldr	r3, [pc, #52]	; (16d80 <bt_enable+0xec>)
   16d4a:	4a0e      	ldr	r2, [pc, #56]	; (16d84 <bt_enable+0xf0>)
   16d4c:	1ad2      	subs	r2, r2, r3
   16d4e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   16d50:	0192      	lsls	r2, r2, #6
   16d52:	4601      	mov	r1, r0
   16d54:	f042 0201 	orr.w	r2, r2, #1
   16d58:	4815      	ldr	r0, [pc, #84]	; (16db0 <bt_enable+0x11c>)
   16d5a:	f011 ff35 	bl	28bc8 <log_1>
		return err;
   16d5e:	e7ad      	b.n	16cbc <bt_enable+0x28>
	if (!cb) {
   16d60:	b926      	cbnz	r6, 16d6c <bt_enable+0xd8>
}
   16d62:	b008      	add	sp, #32
   16d64:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   16d68:	f7f9 b876 	b.w	fe58 <bt_init>
	k_work_submit(&bt_dev.init);
   16d6c:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   16d70:	f00c fa12 	bl	23198 <k_work_submit>
	return 0;
   16d74:	e7a2      	b.n	16cbc <bt_enable+0x28>
		return -EALREADY;
   16d76:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16d7a:	e79f      	b.n	16cbc <bt_enable+0x28>
   16d7c:	200002b0 	.word	0x200002b0
   16d80:	0002d948 	.word	0x0002d948
   16d84:	0002d978 	.word	0x0002d978
   16d88:	0003046d 	.word	0x0003046d
   16d8c:	200029c8 	.word	0x200029c8
   16d90:	0001611d 	.word	0x0001611d
   16d94:	20005920 	.word	0x20005920
   16d98:	20001958 	.word	0x20001958
   16d9c:	00030486 	.word	0x00030486
   16da0:	00015eb1 	.word	0x00015eb1
   16da4:	20005060 	.word	0x20005060
   16da8:	200018d8 	.word	0x200018d8
   16dac:	0003048c 	.word	0x0003048c
   16db0:	00030492 	.word	0x00030492

00016db4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16db4:	4800      	ldr	r0, [pc, #0]	; (16db8 <bt_get_name+0x4>)
   16db6:	4770      	bx	lr
   16db8:	0002e85a 	.word	0x0002e85a

00016dbc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16dbe:	4f0b      	ldr	r7, [pc, #44]	; (16dec <id_find+0x30>)
{
   16dc0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   16dc2:	2500      	movs	r5, #0
   16dc4:	79fb      	ldrb	r3, [r7, #7]
   16dc6:	b2ec      	uxtb	r4, r5
   16dc8:	42a3      	cmp	r3, r4
   16dca:	d802      	bhi.n	16dd2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16dcc:	f06f 0401 	mvn.w	r4, #1
   16dd0:	e009      	b.n	16de6 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   16dd2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   16dd6:	2207      	movs	r2, #7
   16dd8:	4439      	add	r1, r7
   16dda:	4630      	mov	r0, r6
   16ddc:	f013 fe36 	bl	2aa4c <memcmp>
   16de0:	3501      	adds	r5, #1
   16de2:	2800      	cmp	r0, #0
   16de4:	d1ee      	bne.n	16dc4 <id_find+0x8>
}
   16de6:	4620      	mov	r0, r4
   16de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16dea:	bf00      	nop
   16dec:	200002b0 	.word	0x200002b0

00016df0 <set_random_address>:
{
   16df0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   16df2:	4914      	ldr	r1, [pc, #80]	; (16e44 <set_random_address+0x54>)
   16df4:	2206      	movs	r2, #6
   16df6:	4605      	mov	r5, r0
   16df8:	f013 fe28 	bl	2aa4c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   16dfc:	4604      	mov	r4, r0
   16dfe:	b1e0      	cbz	r0, 16e3a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   16e00:	2106      	movs	r1, #6
   16e02:	f242 0005 	movw	r0, #8197	; 0x2005
   16e06:	f7ff fa8d 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   16e0a:	4604      	mov	r4, r0
   16e0c:	b1b8      	cbz	r0, 16e3e <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16e0e:	2206      	movs	r2, #6
   16e10:	4629      	mov	r1, r5
   16e12:	3008      	adds	r0, #8
   16e14:	f015 fddc 	bl	2c9d0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16e18:	4621      	mov	r1, r4
   16e1a:	2200      	movs	r2, #0
   16e1c:	f242 0005 	movw	r0, #8197	; 0x2005
   16e20:	f7ff fbec 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   16e24:	4604      	mov	r4, r0
   16e26:	b940      	cbnz	r0, 16e3a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   16e28:	2206      	movs	r2, #6
   16e2a:	4806      	ldr	r0, [pc, #24]	; (16e44 <set_random_address+0x54>)
   16e2c:	4629      	mov	r1, r5
   16e2e:	f013 fe34 	bl	2aa9a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   16e32:	4b05      	ldr	r3, [pc, #20]	; (16e48 <set_random_address+0x58>)
   16e34:	2201      	movs	r2, #1
   16e36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   16e3a:	4620      	mov	r0, r4
   16e3c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   16e3e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16e42:	e7fa      	b.n	16e3a <set_random_address+0x4a>
   16e44:	20000311 	.word	0x20000311
   16e48:	200002b0 	.word	0x200002b0

00016e4c <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16e4c:	b530      	push	{r4, r5, lr}
   16e4e:	4604      	mov	r4, r0
   16e50:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   16e52:	460d      	mov	r5, r1
   16e54:	b1e1      	cbz	r1, 16e90 <id_create.isra.0+0x44>
   16e56:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   16e58:	2207      	movs	r2, #7
   16e5a:	a902      	add	r1, sp, #8
   16e5c:	4628      	mov	r0, r5
   16e5e:	9302      	str	r3, [sp, #8]
   16e60:	f8cd 300b 	str.w	r3, [sp, #11]
   16e64:	f013 fdf2 	bl	2aa4c <memcmp>
   16e68:	b190      	cbz	r0, 16e90 <id_create.isra.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   16e6a:	4816      	ldr	r0, [pc, #88]	; (16ec4 <id_create.isra.0+0x78>)
   16e6c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16e70:	4629      	mov	r1, r5
   16e72:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16e74:	f014 f84d 	bl	2af12 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16e78:	4813      	ldr	r0, [pc, #76]	; (16ec8 <id_create.isra.0+0x7c>)
   16e7a:	f014 f84d 	bl	2af18 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   16e7e:	0782      	lsls	r2, r0, #30
   16e80:	f3c0 0340 	ubfx	r3, r0, #1, #1
   16e84:	d51b      	bpl.n	16ebe <id_create.isra.0+0x72>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   16e86:	f7fe fc63 	bl	15750 <bt_settings_save_id>
   16e8a:	2000      	movs	r0, #0
	}

	return 0;
}
   16e8c:	b005      	add	sp, #20
   16e8e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   16e90:	4668      	mov	r0, sp
   16e92:	f013 ff22 	bl	2acda <bt_addr_le_create_static>
			if (err) {
   16e96:	2800      	cmp	r0, #0
   16e98:	d1f8      	bne.n	16e8c <id_create.isra.0+0x40>
		} while (id_find(&new_addr) >= 0);
   16e9a:	4668      	mov	r0, sp
   16e9c:	f7ff ff8e 	bl	16dbc <id_find>
   16ea0:	2800      	cmp	r0, #0
   16ea2:	daf5      	bge.n	16e90 <id_create.isra.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16ea4:	4807      	ldr	r0, [pc, #28]	; (16ec4 <id_create.isra.0+0x78>)
   16ea6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16eaa:	4404      	add	r4, r0
   16eac:	4669      	mov	r1, sp
   16eae:	4620      	mov	r0, r4
   16eb0:	f014 f82f 	bl	2af12 <bt_addr_le_copy>
		if (addr) {
   16eb4:	2d00      	cmp	r5, #0
   16eb6:	d0df      	beq.n	16e78 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   16eb8:	4621      	mov	r1, r4
   16eba:	4628      	mov	r0, r5
   16ebc:	e7da      	b.n	16e74 <id_create.isra.0+0x28>
   16ebe:	4618      	mov	r0, r3
   16ec0:	e7e4      	b.n	16e8c <id_create.isra.0+0x40>
   16ec2:	bf00      	nop
   16ec4:	200002b0 	.word	0x200002b0
   16ec8:	2000037c 	.word	0x2000037c

00016ecc <bt_id_pending_keys_update>:
   16ecc:	4b0a      	ldr	r3, [pc, #40]	; (16ef8 <bt_id_pending_keys_update+0x2c>)
   16ece:	f3bf 8f5b 	dmb	ish
   16ed2:	e853 2f00 	ldrex	r2, [r3]
   16ed6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   16eda:	e843 1000 	strex	r0, r1, [r3]
   16ede:	2800      	cmp	r0, #0
   16ee0:	d1f7      	bne.n	16ed2 <bt_id_pending_keys_update+0x6>
   16ee2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16ee6:	0493      	lsls	r3, r2, #18
   16ee8:	d504      	bpl.n	16ef4 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   16eea:	4904      	ldr	r1, [pc, #16]	; (16efc <bt_id_pending_keys_update+0x30>)
   16eec:	2200      	movs	r2, #0
   16eee:	2002      	movs	r0, #2
   16ef0:	f006 ba5c 	b.w	1d3ac <bt_keys_foreach>
}
   16ef4:	4770      	bx	lr
   16ef6:	bf00      	nop
   16ef8:	2000037c 	.word	0x2000037c
   16efc:	0002b051 	.word	0x0002b051

00016f00 <bt_id_add>:
{
   16f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16f02:	4e5e      	ldr	r6, [pc, #376]	; (1707c <bt_id_add+0x17c>)
   16f04:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   16f08:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
{
   16f0c:	4604      	mov	r4, r0
   16f0e:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   16f10:	b10a      	cbz	r2, 16f16 <bt_id_add+0x16>
   16f12:	429a      	cmp	r2, r3
   16f14:	d208      	bcs.n	16f28 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   16f16:	3301      	adds	r3, #1
   16f18:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16f1c:	7a23      	ldrb	r3, [r4, #8]
   16f1e:	f043 0304 	orr.w	r3, r3, #4
   16f22:	7223      	strb	r3, [r4, #8]
}
   16f24:	b003      	add	sp, #12
   16f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   16f28:	2100      	movs	r1, #0
   16f2a:	2206      	movs	r2, #6
   16f2c:	4608      	mov	r0, r1
   16f2e:	f001 fd3f 	bl	189b0 <bt_conn_lookup_state_le>
	if (conn) {
   16f32:	4607      	mov	r7, r0
   16f34:	b198      	cbz	r0, 16f5e <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16f36:	f3bf 8f5b 	dmb	ish
   16f3a:	36cc      	adds	r6, #204	; 0xcc
   16f3c:	e856 3f00 	ldrex	r3, [r6]
   16f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   16f44:	e846 3200 	strex	r2, r3, [r6]
   16f48:	2a00      	cmp	r2, #0
   16f4a:	d1f7      	bne.n	16f3c <bt_id_add+0x3c>
   16f4c:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16f50:	7a23      	ldrb	r3, [r4, #8]
   16f52:	f043 0301 	orr.w	r3, r3, #1
   16f56:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   16f58:	f001 f9ee 	bl	18338 <bt_conn_unref>
		return;
   16f5c:	e7e2      	b.n	16f24 <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   16f5e:	4601      	mov	r1, r0
   16f60:	4847      	ldr	r0, [pc, #284]	; (17080 <bt_id_add+0x180>)
   16f62:	f000 fbc3 	bl	176ec <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   16f66:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
   16f6a:	b173      	cbz	r3, 16f8a <bt_id_add+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16f6c:	4638      	mov	r0, r7
   16f6e:	f013 ffee 	bl	2af4e <addr_res_enable>
		if (err) {
   16f72:	b150      	cbz	r0, 16f8a <bt_id_add+0x8a>
   16f74:	4943      	ldr	r1, [pc, #268]	; (17084 <bt_id_add+0x184>)
   16f76:	4b44      	ldr	r3, [pc, #272]	; (17088 <bt_id_add+0x188>)
			BT_WARN("Failed to disable address resolution");
   16f78:	4844      	ldr	r0, [pc, #272]	; (1708c <bt_id_add+0x18c>)
   16f7a:	1ac9      	subs	r1, r1, r3
   16f7c:	08c9      	lsrs	r1, r1, #3
   16f7e:	0189      	lsls	r1, r1, #6
   16f80:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   16f84:	f011 fe13 	bl	28bae <log_0>
	if (err) {
   16f88:	e023      	b.n	16fd2 <bt_id_add+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   16f8a:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   16f8e:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   16f92:	429a      	cmp	r2, r3
   16f94:	d125      	bne.n	16fe2 <bt_id_add+0xe2>
   16f96:	4b3c      	ldr	r3, [pc, #240]	; (17088 <bt_id_add+0x188>)
   16f98:	4e3a      	ldr	r6, [pc, #232]	; (17084 <bt_id_add+0x184>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   16f9a:	483d      	ldr	r0, [pc, #244]	; (17090 <bt_id_add+0x190>)
   16f9c:	1af6      	subs	r6, r6, r3
   16f9e:	08f6      	lsrs	r6, r6, #3
   16fa0:	01b6      	lsls	r6, r6, #6
   16fa2:	f046 0102 	orr.w	r1, r6, #2
   16fa6:	f011 fe02 	bl	28bae <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   16faa:	2200      	movs	r2, #0
   16fac:	4611      	mov	r1, r2
   16fae:	f242 0029 	movw	r0, #8233	; 0x2029
   16fb2:	f7ff fb23 	bl	165fc <bt_hci_cmd_send_sync>
		if (err) {
   16fb6:	b118      	cbz	r0, 16fc0 <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
   16fb8:	4836      	ldr	r0, [pc, #216]	; (17094 <bt_id_add+0x194>)
   16fba:	f046 0101 	orr.w	r1, r6, #1
   16fbe:	e7e1      	b.n	16f84 <bt_id_add+0x84>
		bt_dev.le.rl_entries++;
   16fc0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   16fc4:	3301      	adds	r3, #1
   16fc6:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   16fca:	7a23      	ldrb	r3, [r4, #8]
   16fcc:	f043 0304 	orr.w	r3, r3, #4
   16fd0:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16fd2:	2001      	movs	r0, #1
   16fd4:	f013 ffbb 	bl	2af4e <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16fd8:	482f      	ldr	r0, [pc, #188]	; (17098 <bt_id_add+0x198>)
   16fda:	2100      	movs	r1, #0
   16fdc:	f000 fb86 	bl	176ec <bt_le_ext_adv_foreach>
   16fe0:	e7a0      	b.n	16f24 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   16fe2:	1c67      	adds	r7, r4, #1
   16fe4:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   16fe8:	4638      	mov	r0, r7
   16fea:	f013 ffc8 	bl	2af7e <hci_id_add.isra.0>
	if (err) {
   16fee:	4606      	mov	r6, r0
   16ff0:	b140      	cbz	r0, 17004 <bt_id_add+0x104>
   16ff2:	4924      	ldr	r1, [pc, #144]	; (17084 <bt_id_add+0x184>)
   16ff4:	4b24      	ldr	r3, [pc, #144]	; (17088 <bt_id_add+0x188>)
		BT_ERR("Failed to add IRK to controller");
   16ff6:	4829      	ldr	r0, [pc, #164]	; (1709c <bt_id_add+0x19c>)
   16ff8:	1ac9      	subs	r1, r1, r3
   16ffa:	08c9      	lsrs	r1, r1, #3
   16ffc:	0189      	lsls	r1, r1, #6
   16ffe:	f041 0101 	orr.w	r1, r1, #1
   17002:	e7bf      	b.n	16f84 <bt_id_add+0x84>
	bt_dev.le.rl_entries++;
   17004:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17008:	3301      	adds	r3, #1
   1700a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1700e:	7a23      	ldrb	r3, [r4, #8]
   17010:	f043 0304 	orr.w	r3, r3, #4
   17014:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17016:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   1701a:	075b      	lsls	r3, r3, #29
   1701c:	d408      	bmi.n	17030 <bt_id_add+0x130>
   1701e:	4919      	ldr	r1, [pc, #100]	; (17084 <bt_id_add+0x184>)
   17020:	4b19      	ldr	r3, [pc, #100]	; (17088 <bt_id_add+0x188>)
		BT_WARN("Set privacy mode command is not supported");
   17022:	481f      	ldr	r0, [pc, #124]	; (170a0 <bt_id_add+0x1a0>)
   17024:	1ac9      	subs	r1, r1, r3
   17026:	08c9      	lsrs	r1, r1, #3
   17028:	0189      	lsls	r1, r1, #6
   1702a:	f041 0102 	orr.w	r1, r1, #2
   1702e:	e7a9      	b.n	16f84 <bt_id_add+0x84>
	bt_addr_le_copy(&cp.id_addr, addr);
   17030:	4639      	mov	r1, r7
   17032:	4668      	mov	r0, sp
   17034:	f013 ff6d 	bl	2af12 <bt_addr_le_copy>
	cp.mode = mode;
   17038:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1703a:	2108      	movs	r1, #8
   1703c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17040:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17044:	f7ff f96e 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   17048:	4604      	mov	r4, r0
   1704a:	b940      	cbnz	r0, 1705e <bt_id_add+0x15e>
   1704c:	490d      	ldr	r1, [pc, #52]	; (17084 <bt_id_add+0x184>)
   1704e:	4b0e      	ldr	r3, [pc, #56]	; (17088 <bt_id_add+0x188>)
		BT_ERR("Failed to set privacy mode");
   17050:	4814      	ldr	r0, [pc, #80]	; (170a4 <bt_id_add+0x1a4>)
   17052:	1ac9      	subs	r1, r1, r3
   17054:	08c9      	lsrs	r1, r1, #3
   17056:	0189      	lsls	r1, r1, #6
   17058:	f041 0101 	orr.w	r1, r1, #1
   1705c:	e792      	b.n	16f84 <bt_id_add+0x84>
   1705e:	2208      	movs	r2, #8
   17060:	4669      	mov	r1, sp
   17062:	4410      	add	r0, r2
   17064:	f015 fcb4 	bl	2c9d0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   17068:	4632      	mov	r2, r6
   1706a:	4621      	mov	r1, r4
   1706c:	f242 004e 	movw	r0, #8270	; 0x204e
   17070:	f7ff fac4 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   17074:	2800      	cmp	r0, #0
   17076:	d0ac      	beq.n	16fd2 <bt_id_add+0xd2>
   17078:	e7e8      	b.n	1704c <bt_id_add+0x14c>
   1707a:	bf00      	nop
   1707c:	200002b0 	.word	0x200002b0
   17080:	0002afe1 	.word	0x0002afe1
   17084:	0002d988 	.word	0x0002d988
   17088:	0002d948 	.word	0x0002d948
   1708c:	000304e4 	.word	0x000304e4
   17090:	00030509 	.word	0x00030509
   17094:	0003053a 	.word	0x0003053a
   17098:	0002af25 	.word	0x0002af25
   1709c:	0003055a 	.word	0x0003055a
   170a0:	0003057a 	.word	0x0003057a
   170a4:	000305a4 	.word	0x000305a4

000170a8 <bt_id_del>:
{
   170a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   170ac:	4e47      	ldr	r6, [pc, #284]	; (171cc <bt_id_del+0x124>)
   170ae:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   170b2:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
{
   170b6:	4604      	mov	r4, r0
   170b8:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
   170ba:	b112      	cbz	r2, 170c2 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   170bc:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   170be:	4293      	cmp	r3, r2
   170c0:	dd08      	ble.n	170d4 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   170c2:	3b01      	subs	r3, #1
   170c4:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   170c8:	7a23      	ldrb	r3, [r4, #8]
   170ca:	f023 0304 	bic.w	r3, r3, #4
   170ce:	7223      	strb	r3, [r4, #8]
}
   170d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   170d4:	2100      	movs	r1, #0
   170d6:	2206      	movs	r2, #6
   170d8:	4608      	mov	r0, r1
   170da:	f001 fc69 	bl	189b0 <bt_conn_lookup_state_le>
	if (conn) {
   170de:	4607      	mov	r7, r0
   170e0:	b1a0      	cbz	r0, 1710c <bt_id_del+0x64>
   170e2:	f3bf 8f5b 	dmb	ish
   170e6:	36cc      	adds	r6, #204	; 0xcc
   170e8:	e856 3f00 	ldrex	r3, [r6]
   170ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   170f0:	e846 3200 	strex	r2, r3, [r6]
   170f4:	2a00      	cmp	r2, #0
   170f6:	d1f7      	bne.n	170e8 <bt_id_del+0x40>
   170f8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   170fc:	7a23      	ldrb	r3, [r4, #8]
   170fe:	f043 0302 	orr.w	r3, r3, #2
   17102:	7223      	strb	r3, [r4, #8]
}
   17104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   17108:	f001 b916 	b.w	18338 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1710c:	4601      	mov	r1, r0
   1710e:	4830      	ldr	r0, [pc, #192]	; (171d0 <bt_id_del+0x128>)
   17110:	f000 faec 	bl	176ec <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17114:	4638      	mov	r0, r7
   17116:	f013 ff1a 	bl	2af4e <addr_res_enable>
	if (err) {
   1711a:	4606      	mov	r6, r0
   1711c:	b1b0      	cbz	r0, 1714c <bt_id_del+0xa4>
   1711e:	4a2d      	ldr	r2, [pc, #180]	; (171d4 <bt_id_del+0x12c>)
   17120:	4b2d      	ldr	r3, [pc, #180]	; (171d8 <bt_id_del+0x130>)
   17122:	1ad2      	subs	r2, r2, r3
   17124:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   17126:	0192      	lsls	r2, r2, #6
   17128:	4601      	mov	r1, r0
   1712a:	f042 0201 	orr.w	r2, r2, #1
   1712e:	482b      	ldr	r0, [pc, #172]	; (171dc <bt_id_del+0x134>)
   17130:	f011 fd4a 	bl	28bc8 <log_1>
	if (bt_dev.le.rl_entries) {
   17134:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17138:	b113      	cbz	r3, 17140 <bt_id_del+0x98>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1713a:	2001      	movs	r0, #1
   1713c:	f013 ff07 	bl	2af4e <addr_res_enable>
}
   17140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17144:	4826      	ldr	r0, [pc, #152]	; (171e0 <bt_id_del+0x138>)
   17146:	2100      	movs	r1, #0
   17148:	f000 bad0 	b.w	176ec <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1714c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17150:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   17154:	429a      	cmp	r2, r3
   17156:	d20c      	bcs.n	17172 <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   17158:	3b01      	subs	r3, #1
   1715a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1715e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   17160:	4920      	ldr	r1, [pc, #128]	; (171e4 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17162:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   17166:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   17168:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   1716a:	2002      	movs	r0, #2
   1716c:	f006 f91e 	bl	1d3ac <bt_keys_foreach>
		goto done;
   17170:	e7e0      	b.n	17134 <bt_id_del+0x8c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17172:	2107      	movs	r1, #7
   17174:	f242 0028 	movw	r0, #8232	; 0x2028
   17178:	f7ff f8d4 	bl	16324 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1717c:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   17180:	4607      	mov	r7, r0
   17182:	b950      	cbnz	r0, 1719a <bt_id_del+0xf2>
   17184:	4b14      	ldr	r3, [pc, #80]	; (171d8 <bt_id_del+0x130>)
   17186:	4913      	ldr	r1, [pc, #76]	; (171d4 <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
   17188:	4817      	ldr	r0, [pc, #92]	; (171e8 <bt_id_del+0x140>)
   1718a:	1ac9      	subs	r1, r1, r3
   1718c:	08c9      	lsrs	r1, r1, #3
   1718e:	0189      	lsls	r1, r1, #6
   17190:	f041 0101 	orr.w	r1, r1, #1
   17194:	f011 fd0b 	bl	28bae <log_0>
		goto done;
   17198:	e7cc      	b.n	17134 <bt_id_del+0x8c>
	return net_buf_simple_add(&buf->b, len);
   1719a:	2107      	movs	r1, #7
   1719c:	3008      	adds	r0, #8
   1719e:	f006 fdb7 	bl	1dd10 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   171a2:	4641      	mov	r1, r8
   171a4:	f013 feb5 	bl	2af12 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   171a8:	4632      	mov	r2, r6
   171aa:	4639      	mov	r1, r7
   171ac:	f242 0028 	movw	r0, #8232	; 0x2028
   171b0:	f7ff fa24 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   171b4:	2800      	cmp	r0, #0
   171b6:	d1e5      	bne.n	17184 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   171b8:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   171bc:	3b01      	subs	r3, #1
   171be:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   171c2:	7a23      	ldrb	r3, [r4, #8]
   171c4:	f023 0304 	bic.w	r3, r3, #4
   171c8:	7223      	strb	r3, [r4, #8]
   171ca:	e7b3      	b.n	17134 <bt_id_del+0x8c>
   171cc:	200002b0 	.word	0x200002b0
   171d0:	0002afe1 	.word	0x0002afe1
   171d4:	0002d988 	.word	0x0002d988
   171d8:	0002d948 	.word	0x0002d948
   171dc:	000305bf 	.word	0x000305bf
   171e0:	0002af25 	.word	0x0002af25
   171e4:	0002afcf 	.word	0x0002afcf
   171e8:	000305ec 	.word	0x000305ec

000171ec <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   171ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   171ee:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   171f0:	4604      	mov	r4, r0
   171f2:	b918      	cbnz	r0, 171fc <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   171f4:	b346      	cbz	r6, 17248 <bt_id_create+0x5c>
		return -EINVAL;
   171f6:	f06f 0015 	mvn.w	r0, #21
   171fa:	e023      	b.n	17244 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   171fc:	2300      	movs	r3, #0
   171fe:	2207      	movs	r2, #7
   17200:	4669      	mov	r1, sp
   17202:	9300      	str	r3, [sp, #0]
   17204:	f8cd 3003 	str.w	r3, [sp, #3]
   17208:	f013 fc20 	bl	2aa4c <memcmp>
   1720c:	2800      	cmp	r0, #0
   1720e:	d0f1      	beq.n	171f4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17210:	7823      	ldrb	r3, [r4, #0]
   17212:	2b01      	cmp	r3, #1
   17214:	d104      	bne.n	17220 <bt_id_create+0x34>
   17216:	79a3      	ldrb	r3, [r4, #6]
   17218:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1721c:	2bc0      	cmp	r3, #192	; 0xc0
   1721e:	d00a      	beq.n	17236 <bt_id_create+0x4a>
   17220:	4b1b      	ldr	r3, [pc, #108]	; (17290 <bt_id_create+0xa4>)
   17222:	491c      	ldr	r1, [pc, #112]	; (17294 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
   17224:	481c      	ldr	r0, [pc, #112]	; (17298 <bt_id_create+0xac>)
   17226:	1ac9      	subs	r1, r1, r3
   17228:	08c9      	lsrs	r1, r1, #3
   1722a:	0189      	lsls	r1, r1, #6
   1722c:	f041 0101 	orr.w	r1, r1, #1
   17230:	f011 fcbd 	bl	28bae <log_0>
			return -EINVAL;
   17234:	e7df      	b.n	171f6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   17236:	4620      	mov	r0, r4
   17238:	f7ff fdc0 	bl	16dbc <id_find>
   1723c:	2800      	cmp	r0, #0
   1723e:	dbd9      	blt.n	171f4 <bt_id_create+0x8>
			return -EALREADY;
   17240:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   17244:	b002      	add	sp, #8
   17246:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17248:	4d14      	ldr	r5, [pc, #80]	; (1729c <bt_id_create+0xb0>)
   1724a:	79eb      	ldrb	r3, [r5, #7]
   1724c:	2b01      	cmp	r3, #1
   1724e:	d01c      	beq.n	1728a <bt_id_create+0x9e>
   17250:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   17254:	f013 fe60 	bl	2af18 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17258:	07c3      	lsls	r3, r0, #31
   1725a:	d40b      	bmi.n	17274 <bt_id_create+0x88>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   1725c:	2c00      	cmp	r4, #0
   1725e:	d0ca      	beq.n	171f6 <bt_id_create+0xa>
   17260:	2207      	movs	r2, #7
   17262:	4669      	mov	r1, sp
   17264:	4620      	mov	r0, r4
   17266:	9600      	str	r6, [sp, #0]
   17268:	f8cd 6003 	str.w	r6, [sp, #3]
   1726c:	f013 fbee 	bl	2aa4c <memcmp>
   17270:	2800      	cmp	r0, #0
   17272:	d0c0      	beq.n	171f6 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   17274:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   17276:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   17278:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   1727a:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   1727c:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   1727e:	f7ff fde5 	bl	16e4c <id_create.isra.0>
	new_id = bt_dev.id_count++;
   17282:	2800      	cmp	r0, #0
   17284:	bf08      	it	eq
   17286:	4630      	moveq	r0, r6
   17288:	e7dc      	b.n	17244 <bt_id_create+0x58>
		return -ENOMEM;
   1728a:	f06f 000b 	mvn.w	r0, #11
   1728e:	e7d9      	b.n	17244 <bt_id_create+0x58>
   17290:	0002d948 	.word	0x0002d948
   17294:	0002d988 	.word	0x0002d988
   17298:	00030611 	.word	0x00030611
   1729c:	200002b0 	.word	0x200002b0

000172a0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   172a0:	b570      	push	{r4, r5, r6, lr}
   172a2:	b086      	sub	sp, #24
   172a4:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   172a6:	aa01      	add	r2, sp, #4
   172a8:	2100      	movs	r1, #0
   172aa:	f241 0009 	movw	r0, #4105	; 0x1009
   172ae:	f7ff f9a5 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   172b2:	4604      	mov	r4, r0
   172b4:	b160      	cbz	r0, 172d0 <bt_id_read_public_addr+0x30>
   172b6:	491a      	ldr	r1, [pc, #104]	; (17320 <bt_id_read_public_addr+0x80>)
   172b8:	4b1a      	ldr	r3, [pc, #104]	; (17324 <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   172ba:	481b      	ldr	r0, [pc, #108]	; (17328 <bt_id_read_public_addr+0x88>)
   172bc:	1ac9      	subs	r1, r1, r3
   172be:	08c9      	lsrs	r1, r1, #3
   172c0:	0189      	lsls	r1, r1, #6
   172c2:	f041 0102 	orr.w	r1, r1, #2
   172c6:	f011 fc72 	bl	28bae <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   172ca:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   172cc:	b006      	add	sp, #24
   172ce:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   172d0:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   172d2:	9002      	str	r0, [sp, #8]
   172d4:	689d      	ldr	r5, [r3, #8]
   172d6:	f8ad 000c 	strh.w	r0, [sp, #12]
   172da:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   172dc:	2206      	movs	r2, #6
   172de:	a902      	add	r1, sp, #8
   172e0:	4628      	mov	r0, r5
   172e2:	f013 fbb3 	bl	2aa4c <memcmp>
   172e6:	b918      	cbnz	r0, 172f0 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   172e8:	9801      	ldr	r0, [sp, #4]
   172ea:	f006 fbe1 	bl	1dab0 <net_buf_unref>
   172ee:	e7ec      	b.n	172ca <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   172f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   172f4:	2206      	movs	r2, #6
   172f6:	a904      	add	r1, sp, #16
   172f8:	4628      	mov	r0, r5
   172fa:	9304      	str	r3, [sp, #16]
   172fc:	f8ad 3014 	strh.w	r3, [sp, #20]
   17300:	f013 fba4 	bl	2aa4c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17304:	2800      	cmp	r0, #0
   17306:	d0ef      	beq.n	172e8 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   17308:	2206      	movs	r2, #6
   1730a:	4629      	mov	r1, r5
   1730c:	1c70      	adds	r0, r6, #1
   1730e:	f013 fbc4 	bl	2aa9a <memcpy>
	net_buf_unref(rsp);
   17312:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17314:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   17316:	f006 fbcb 	bl	1dab0 <net_buf_unref>
	return 1U;
   1731a:	2001      	movs	r0, #1
   1731c:	e7d6      	b.n	172cc <bt_id_read_public_addr+0x2c>
   1731e:	bf00      	nop
   17320:	0002d988 	.word	0x0002d988
   17324:	0002d948 	.word	0x0002d948
   17328:	0003063f 	.word	0x0003063f

0001732c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1732c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1732e:	4668      	mov	r0, sp
   17330:	f7ff ffb6 	bl	172a0 <bt_id_read_public_addr>
   17334:	4b04      	ldr	r3, [pc, #16]	; (17348 <bt_setup_public_id_addr+0x1c>)
   17336:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   17338:	b118      	cbz	r0, 17342 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1733a:	4669      	mov	r1, sp
   1733c:	2000      	movs	r0, #0
   1733e:	f7ff fd85 	bl	16e4c <id_create.isra.0>
}
   17342:	b003      	add	sp, #12
   17344:	f85d fb04 	ldr.w	pc, [sp], #4
   17348:	200002b0 	.word	0x200002b0

0001734c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1734c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17350:	4b25      	ldr	r3, [pc, #148]	; (173e8 <bt_read_static_addr+0x9c>)
   17352:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   17356:	f014 0401 	ands.w	r4, r4, #1
{
   1735a:	4607      	mov	r7, r0
   1735c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1735e:	d10a      	bne.n	17376 <bt_read_static_addr+0x2a>
   17360:	4922      	ldr	r1, [pc, #136]	; (173ec <bt_read_static_addr+0xa0>)
   17362:	4b23      	ldr	r3, [pc, #140]	; (173f0 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   17364:	4823      	ldr	r0, [pc, #140]	; (173f4 <bt_read_static_addr+0xa8>)
   17366:	1ac9      	subs	r1, r1, r3
   17368:	08c9      	lsrs	r1, r1, #3
   1736a:	0189      	lsls	r1, r1, #6
   1736c:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   17370:	f011 fc1d 	bl	28bae <log_0>
   17374:	e012      	b.n	1739c <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17376:	aa01      	add	r2, sp, #4
   17378:	2100      	movs	r1, #0
   1737a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1737e:	f7ff f93d 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   17382:	4605      	mov	r5, r0
   17384:	b170      	cbz	r0, 173a4 <bt_read_static_addr+0x58>
   17386:	4b1a      	ldr	r3, [pc, #104]	; (173f0 <bt_read_static_addr+0xa4>)
   17388:	4918      	ldr	r1, [pc, #96]	; (173ec <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   1738a:	481b      	ldr	r0, [pc, #108]	; (173f8 <bt_read_static_addr+0xac>)
   1738c:	1ac9      	subs	r1, r1, r3
   1738e:	08c9      	lsrs	r1, r1, #3
   17390:	0189      	lsls	r1, r1, #6
   17392:	f041 0102 	orr.w	r1, r1, #2
   17396:	f011 fc0a 	bl	28bae <log_0>
		return 0;
   1739a:	2400      	movs	r4, #0
	}

	return cnt;
}
   1739c:	4620      	mov	r0, r4
   1739e:	b002      	add	sp, #8
   173a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   173a4:	9b01      	ldr	r3, [sp, #4]
   173a6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   173a8:	785c      	ldrb	r4, [r3, #1]
   173aa:	42b4      	cmp	r4, r6
   173ac:	bf28      	it	cs
   173ae:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   173b0:	f04f 0816 	mov.w	r8, #22
   173b4:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   173b6:	42a5      	cmp	r5, r4
   173b8:	db0d      	blt.n	173d6 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   173ba:	9801      	ldr	r0, [sp, #4]
   173bc:	f006 fb78 	bl	1dab0 <net_buf_unref>
	if (!cnt) {
   173c0:	2c00      	cmp	r4, #0
   173c2:	d1eb      	bne.n	1739c <bt_read_static_addr+0x50>
   173c4:	4909      	ldr	r1, [pc, #36]	; (173ec <bt_read_static_addr+0xa0>)
   173c6:	4b0a      	ldr	r3, [pc, #40]	; (173f0 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   173c8:	480c      	ldr	r0, [pc, #48]	; (173fc <bt_read_static_addr+0xb0>)
   173ca:	1ac9      	subs	r1, r1, r3
   173cc:	08c9      	lsrs	r1, r1, #3
   173ce:	0189      	lsls	r1, r1, #6
   173d0:	f041 0102 	orr.w	r1, r1, #2
   173d4:	e7cc      	b.n	17370 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   173d6:	fb08 7005 	mla	r0, r8, r5, r7
   173da:	2216      	movs	r2, #22
   173dc:	4631      	mov	r1, r6
   173de:	f013 fb5c 	bl	2aa9a <memcpy>
	for (i = 0; i < cnt; i++) {
   173e2:	3501      	adds	r5, #1
   173e4:	e7e7      	b.n	173b6 <bt_read_static_addr+0x6a>
   173e6:	bf00      	nop
   173e8:	200002b0 	.word	0x200002b0
   173ec:	0002d988 	.word	0x0002d988
   173f0:	0002d948 	.word	0x0002d948
   173f4:	0003065d 	.word	0x0003065d
   173f8:	00030689 	.word	0x00030689
   173fc:	000306a9 	.word	0x000306a9

00017400 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   17400:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   17402:	4d14      	ldr	r5, [pc, #80]	; (17454 <bt_setup_random_id_addr+0x54>)
   17404:	79ec      	ldrb	r4, [r5, #7]
{
   17406:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   17408:	b92c      	cbnz	r4, 17416 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1740a:	2101      	movs	r1, #1
   1740c:	a802      	add	r0, sp, #8
   1740e:	f7ff ff9d 	bl	1734c <bt_read_static_addr>
   17412:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   17414:	b9b8      	cbnz	r0, 17446 <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   17416:	2100      	movs	r1, #0
   17418:	4608      	mov	r0, r1
   1741a:	f7ff fee7 	bl	171ec <bt_id_create>
   1741e:	e010      	b.n	17442 <bt_setup_random_id_addr+0x42>
   17420:	ab02      	add	r3, sp, #8
   17422:	fb07 3106 	mla	r1, r7, r6, r3
   17426:	2206      	movs	r2, #6
   17428:	f10d 0001 	add.w	r0, sp, #1
   1742c:	f013 fb35 	bl	2aa9a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   17430:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   17432:	4669      	mov	r1, sp
   17434:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   17436:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1743a:	f7ff fd07 	bl	16e4c <id_create.isra.0>
				if (err) {
   1743e:	3401      	adds	r4, #1
   17440:	b110      	cbz	r0, 17448 <bt_setup_random_id_addr+0x48>
}
   17442:	b009      	add	sp, #36	; 0x24
   17444:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   17446:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17448:	79eb      	ldrb	r3, [r5, #7]
   1744a:	b2e6      	uxtb	r6, r4
   1744c:	42b3      	cmp	r3, r6
   1744e:	d8e7      	bhi.n	17420 <bt_setup_random_id_addr+0x20>
			return 0;
   17450:	2000      	movs	r0, #0
   17452:	e7f6      	b.n	17442 <bt_setup_random_id_addr+0x42>
   17454:	200002b0 	.word	0x200002b0

00017458 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   17458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1745c:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   17460:	7805      	ldrb	r5, [r0, #0]
{
   17462:	460e      	mov	r6, r1
   17464:	4690      	mov	r8, r2
   17466:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17468:	d026      	beq.n	174b8 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1746a:	4c22      	ldr	r4, [pc, #136]	; (174f4 <bt_id_set_adv_own_addr+0x9c>)
   1746c:	b12a      	cbz	r2, 1747a <bt_id_set_adv_own_addr+0x22>
   1746e:	0688      	lsls	r0, r1, #26
   17470:	d503      	bpl.n	1747a <bt_id_set_adv_own_addr+0x22>
   17472:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   17476:	0659      	lsls	r1, r3, #25
   17478:	d539      	bpl.n	174ee <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1747a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1747e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   17482:	5ce3      	ldrb	r3, [r4, r3]
   17484:	2b01      	cmp	r3, #1
   17486:	d008      	beq.n	1749a <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   17488:	eba9 0505 	sub.w	r5, r9, r5
   1748c:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1748e:	f1b8 0f00 	cmp.w	r8, #0
   17492:	d10c      	bne.n	174ae <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17494:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   17496:	2000      	movs	r0, #0
   17498:	e007      	b.n	174aa <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1749a:	2007      	movs	r0, #7
   1749c:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   174a0:	4420      	add	r0, r4
   174a2:	f7ff fca5 	bl	16df0 <set_random_address>
				if (err) {
   174a6:	2800      	cmp	r0, #0
   174a8:	d0ee      	beq.n	17488 <bt_id_set_adv_own_addr+0x30>
}
   174aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   174ae:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   174b0:	bf48      	it	mi
   174b2:	f043 0302 	orrmi.w	r3, r3, #2
   174b6:	e7ed      	b.n	17494 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   174b8:	074b      	lsls	r3, r1, #29
   174ba:	d514      	bpl.n	174e6 <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   174bc:	4e0d      	ldr	r6, [pc, #52]	; (174f4 <bt_id_set_adv_own_addr+0x9c>)
   174be:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   174c2:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   174c6:	5cf3      	ldrb	r3, [r6, r3]
   174c8:	2b01      	cmp	r3, #1
   174ca:	d10a      	bne.n	174e2 <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   174cc:	2007      	movs	r0, #7
   174ce:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   174d2:	4430      	add	r0, r6
   174d4:	f7ff fc8c 	bl	16df0 <set_random_address>
			*own_addr_type = id_addr->type;
   174d8:	eba8 0505 	sub.w	r5, r8, r5
   174dc:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   174de:	703b      	strb	r3, [r7, #0]
		if (err) {
   174e0:	e7e3      	b.n	174aa <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   174e2:	4620      	mov	r0, r4
   174e4:	e7f8      	b.n	174d8 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   174e6:	f013 fd9f 	bl	2b028 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   174ea:	2301      	movs	r3, #1
   174ec:	e7f7      	b.n	174de <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   174ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
   174f2:	e7da      	b.n	174aa <bt_id_set_adv_own_addr+0x52>
   174f4:	200002b0 	.word	0x200002b0

000174f8 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   174f8:	6843      	ldr	r3, [r0, #4]
{
   174fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   174fc:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   174fe:	0558      	lsls	r0, r3, #21
   17500:	d502      	bpl.n	17508 <valid_adv_param+0x10>
		return false;
   17502:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   17504:	b003      	add	sp, #12
   17506:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17508:	6922      	ldr	r2, [r4, #16]
   1750a:	b10a      	cbz	r2, 17510 <valid_adv_param+0x18>
   1750c:	07d9      	lsls	r1, r3, #31
   1750e:	d5f8      	bpl.n	17502 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   17510:	4d1a      	ldr	r5, [pc, #104]	; (1757c <valid_adv_param+0x84>)
   17512:	7820      	ldrb	r0, [r4, #0]
   17514:	79eb      	ldrb	r3, [r5, #7]
   17516:	4283      	cmp	r3, r0
   17518:	d9f3      	bls.n	17502 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1751a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1751e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   17520:	2207      	movs	r2, #7
   17522:	4669      	mov	r1, sp
   17524:	4428      	add	r0, r5
   17526:	9300      	str	r3, [sp, #0]
   17528:	f8cd 3003 	str.w	r3, [sp, #3]
   1752c:	f013 fa8e 	bl	2aa4c <memcmp>
	if (param->id >= bt_dev.id_count ||
   17530:	2800      	cmp	r0, #0
   17532:	d0e6      	beq.n	17502 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17534:	6860      	ldr	r0, [r4, #4]
   17536:	07c2      	lsls	r2, r0, #31
   17538:	d406      	bmi.n	17548 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1753a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1753e:	2b08      	cmp	r3, #8
   17540:	d802      	bhi.n	17548 <valid_adv_param+0x50>
   17542:	68a3      	ldr	r3, [r4, #8]
   17544:	2b9f      	cmp	r3, #159	; 0x9f
   17546:	d9dc      	bls.n	17502 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   17548:	f010 0f30 	tst.w	r0, #48	; 0x30
   1754c:	d002      	beq.n	17554 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1754e:	6923      	ldr	r3, [r4, #16]
   17550:	2b00      	cmp	r3, #0
   17552:	d0d6      	beq.n	17502 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   17554:	06c3      	lsls	r3, r0, #27
   17556:	d401      	bmi.n	1755c <valid_adv_param+0x64>
   17558:	6923      	ldr	r3, [r4, #16]
   1755a:	b943      	cbnz	r3, 1756e <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   1755c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   17560:	429a      	cmp	r2, r3
   17562:	d8ce      	bhi.n	17502 <valid_adv_param+0xa>
   17564:	2a1f      	cmp	r2, #31
   17566:	d9cc      	bls.n	17502 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   17568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1756c:	d8c9      	bhi.n	17502 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1756e:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   17572:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   17576:	bf18      	it	ne
   17578:	2001      	movne	r0, #1
   1757a:	e7c3      	b.n	17504 <valid_adv_param+0xc>
   1757c:	200002b0 	.word	0x200002b0

00017580 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   17580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17584:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17586:	2120      	movs	r1, #32
{
   17588:	4682      	mov	sl, r0
   1758a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1758c:	f7fe feca 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   17590:	4606      	mov	r6, r0
   17592:	2800      	cmp	r0, #0
   17594:	d05c      	beq.n	17650 <hci_set_ad+0xd0>
   17596:	2120      	movs	r1, #32
   17598:	3008      	adds	r0, #8
   1759a:	f006 fbb9 	bl	1dd10 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   1759e:	2220      	movs	r2, #32
   175a0:	2100      	movs	r1, #0
   175a2:	4681      	mov	r9, r0
   175a4:	f013 fa84 	bl	2aab0 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   175a8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   175ac:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   175b0:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   175b2:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   175b4:	f8d4 8000 	ldr.w	r8, [r4]
   175b8:	2300      	movs	r3, #0
   175ba:	6862      	ldr	r2, [r4, #4]
   175bc:	4293      	cmp	r3, r2
   175be:	d30d      	bcc.n	175dc <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   175c0:	9b00      	ldr	r3, [sp, #0]
   175c2:	3408      	adds	r4, #8
   175c4:	429c      	cmp	r4, r3
   175c6:	d1f5      	bne.n	175b4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   175c8:	2200      	movs	r2, #0
   175ca:	4631      	mov	r1, r6
   175cc:	4650      	mov	r0, sl
	*data_len = set_data_len;
   175ce:	f889 5000 	strb.w	r5, [r9]
}
   175d2:	b003      	add	sp, #12
   175d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   175d8:	f7ff b810 	b.w	165fc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   175dc:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   175e0:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   175e4:	1ca8      	adds	r0, r5, #2
   175e6:	1881      	adds	r1, r0, r2
   175e8:	291f      	cmp	r1, #31
   175ea:	d91a      	bls.n	17622 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   175ec:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   175f0:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   175f4:	d101      	bne.n	175fa <hci_set_ad+0x7a>
   175f6:	2a00      	cmp	r2, #0
   175f8:	dc11      	bgt.n	1761e <hci_set_ad+0x9e>
   175fa:	4b17      	ldr	r3, [pc, #92]	; (17658 <hci_set_ad+0xd8>)
   175fc:	4917      	ldr	r1, [pc, #92]	; (1765c <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   175fe:	4818      	ldr	r0, [pc, #96]	; (17660 <hci_set_ad+0xe0>)
   17600:	1ac9      	subs	r1, r1, r3
   17602:	08c9      	lsrs	r1, r1, #3
   17604:	0189      	lsls	r1, r1, #6
   17606:	f041 0101 	orr.w	r1, r1, #1
   1760a:	f011 fad0 	bl	28bae <log_0>
		net_buf_unref(buf);
   1760e:	4630      	mov	r0, r6
   17610:	f006 fa4e 	bl	1dab0 <net_buf_unref>
					return -EINVAL;
   17614:	f06f 0015 	mvn.w	r0, #21
}
   17618:	b003      	add	sp, #12
   1761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1761e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   17622:	b2d7      	uxtb	r7, r2
   17624:	1c79      	adds	r1, r7, #1
   17626:	f80b 1005 	strb.w	r1, [fp, r5]
   1762a:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1762c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1762e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   17632:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   17636:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1763a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1763c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1763e:	f013 fa2c 	bl	2aa9a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17642:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17644:	443d      	add	r5, r7
   17646:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   17648:	3301      	adds	r3, #1
   1764a:	f108 0808 	add.w	r8, r8, #8
   1764e:	e7b4      	b.n	175ba <hci_set_ad+0x3a>
		return -ENOBUFS;
   17650:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17654:	e7e0      	b.n	17618 <hci_set_ad+0x98>
   17656:	bf00      	nop
   17658:	0002d948 	.word	0x0002d948
   1765c:	0002d948 	.word	0x0002d948
   17660:	000306d8 	.word	0x000306d8

00017664 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17664:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   17666:	4606      	mov	r6, r0
   17668:	4b1e      	ldr	r3, [pc, #120]	; (176e4 <le_adv_start_add_conn+0x80>)
   1766a:	f816 2b09 	ldrb.w	r2, [r6], #9
   1766e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   17672:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17674:	2300      	movs	r3, #0
{
   17676:	4605      	mov	r5, r0
   17678:	2207      	movs	r2, #7
   1767a:	460f      	mov	r7, r1
   1767c:	4630      	mov	r0, r6
   1767e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   17680:	9300      	str	r3, [sp, #0]
   17682:	f8cd 3003 	str.w	r3, [sp, #3]
   17686:	f013 f9e1 	bl	2aa4c <memcmp>
   1768a:	782a      	ldrb	r2, [r5, #0]
   1768c:	4604      	mov	r4, r0
   1768e:	b9a8      	cbnz	r0, 176bc <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17690:	4b15      	ldr	r3, [pc, #84]	; (176e8 <le_adv_start_add_conn+0x84>)
   17692:	6818      	ldr	r0, [r3, #0]
   17694:	8899      	ldrh	r1, [r3, #4]
   17696:	9002      	str	r0, [sp, #8]
   17698:	799b      	ldrb	r3, [r3, #6]
   1769a:	f8ad 100c 	strh.w	r1, [sp, #12]
   1769e:	4610      	mov	r0, r2
   176a0:	a902      	add	r1, sp, #8
   176a2:	f88d 300e 	strb.w	r3, [sp, #14]
   176a6:	f001 f923 	bl	188f0 <bt_conn_add_le>
		if (!conn) {
   176aa:	4605      	mov	r5, r0
   176ac:	b1b8      	cbz	r0, 176de <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   176ae:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   176b0:	f000 fe86 	bl	183c0 <bt_conn_set_state>
	*out_conn = conn;
   176b4:	603d      	str	r5, [r7, #0]
	return 0;
}
   176b6:	4620      	mov	r0, r4
   176b8:	b005      	add	sp, #20
   176ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   176bc:	4631      	mov	r1, r6
   176be:	4610      	mov	r0, r2
   176c0:	f001 f950 	bl	18964 <bt_conn_exists_le>
   176c4:	4604      	mov	r4, r0
   176c6:	b938      	cbnz	r0, 176d8 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   176c8:	7828      	ldrb	r0, [r5, #0]
   176ca:	4631      	mov	r1, r6
   176cc:	f001 f910 	bl	188f0 <bt_conn_add_le>
	if (!conn) {
   176d0:	4605      	mov	r5, r0
   176d2:	b120      	cbz	r0, 176de <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   176d4:	2105      	movs	r1, #5
   176d6:	e7eb      	b.n	176b0 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   176d8:	f06f 0415 	mvn.w	r4, #21
   176dc:	e7eb      	b.n	176b6 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   176de:	f06f 040b 	mvn.w	r4, #11
   176e2:	e7e8      	b.n	176b6 <le_adv_start_add_conn+0x52>
   176e4:	200002b0 	.word	0x200002b0
   176e8:	0002dafb 	.word	0x0002dafb

000176ec <bt_le_ext_adv_foreach>:
{
   176ec:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   176ee:	4801      	ldr	r0, [pc, #4]	; (176f4 <bt_le_ext_adv_foreach+0x8>)
   176f0:	4718      	bx	r3
   176f2:	bf00      	nop
   176f4:	200002c8 	.word	0x200002c8

000176f8 <bt_le_adv_lookup_legacy>:
}
   176f8:	4800      	ldr	r0, [pc, #0]	; (176fc <bt_le_adv_lookup_legacy+0x4>)
   176fa:	4770      	bx	lr
   176fc:	200002c8 	.word	0x200002c8

00017700 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   17704:	690e      	ldr	r6, [r1, #16]
{
   17706:	b08f      	sub	sp, #60	; 0x3c
   17708:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   1770a:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1770c:	ebb6 0903 	subs.w	r9, r6, r3
{
   17710:	4605      	mov	r5, r0
   17712:	4892      	ldr	r0, [pc, #584]	; (1795c <bt_le_adv_start_legacy+0x25c>)
   17714:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   17716:	bf18      	it	ne
   17718:	f04f 0901 	movne.w	r9, #1
{
   1771c:	460c      	mov	r4, r1
	struct bt_conn *conn = NULL;
   1771e:	9307      	str	r3, [sp, #28]
   17720:	f013 fcb7 	bl	2b092 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17724:	0787      	lsls	r7, r0, #30
   17726:	f140 810d 	bpl.w	17944 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1772a:	4608      	mov	r0, r1
   1772c:	f7ff fee4 	bl	174f8 <valid_adv_param>
   17730:	b928      	cbnz	r0, 1773e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   17732:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   17736:	4658      	mov	r0, fp
   17738:	b00f      	add	sp, #60	; 0x3c
   1773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1773e:	4620      	mov	r0, r4
   17740:	f013 fc84 	bl	2b04c <bt_id_adv_random_addr_check>
   17744:	4680      	mov	r8, r0
   17746:	2800      	cmp	r0, #0
   17748:	d0f3      	beq.n	17732 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1774a:	f105 0710 	add.w	r7, r5, #16
   1774e:	4638      	mov	r0, r7
   17750:	f013 fc9f 	bl	2b092 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17754:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   17758:	0640      	lsls	r0, r0, #25
   1775a:	f100 80f6 	bmi.w	1794a <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1775e:	220f      	movs	r2, #15
   17760:	4659      	mov	r1, fp
   17762:	a80a      	add	r0, sp, #40	; 0x28
   17764:	f013 f9a4 	bl	2aab0 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17768:	68a3      	ldr	r3, [r4, #8]
   1776a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   1776e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17770:	68e3      	ldr	r3, [r4, #12]
   17772:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   17776:	f013 fc7d 	bl	2b074 <get_adv_channel_map>
	if (adv->id != param->id) {
   1777a:	782a      	ldrb	r2, [r5, #0]
   1777c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1777e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   17782:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   17784:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   17788:	d004      	beq.n	17794 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1778a:	4874      	ldr	r0, [pc, #464]	; (1795c <bt_le_adv_start_legacy+0x25c>)
   1778c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   17790:	f013 fc85 	bl	2b09e <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   17794:	4a72      	ldr	r2, [pc, #456]	; (17960 <bt_le_adv_start_legacy+0x260>)
	adv->id = param->id;
   17796:	7823      	ldrb	r3, [r4, #0]
   17798:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1779a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1779e:	6861      	ldr	r1, [r4, #4]
   177a0:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   177a4:	464a      	mov	r2, r9
   177a6:	4628      	mov	r0, r5
   177a8:	f7ff fe56 	bl	17458 <bt_id_set_adv_own_addr>
	if (err) {
   177ac:	4683      	mov	fp, r0
   177ae:	2800      	cmp	r0, #0
   177b0:	d1c1      	bne.n	17736 <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   177b2:	f105 0009 	add.w	r0, r5, #9
   177b6:	2e00      	cmp	r6, #0
   177b8:	d053      	beq.n	17862 <bt_le_adv_start_legacy+0x162>
	memcpy(dst, src, sizeof(*dst));
   177ba:	6921      	ldr	r1, [r4, #16]
   177bc:	2207      	movs	r2, #7
   177be:	f013 f96c 	bl	2aa9a <memcpy>
	name_type = get_adv_name_type_param(param);
   177c2:	4620      	mov	r0, r4
   177c4:	f013 fd08 	bl	2b1d8 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   177c8:	6863      	ldr	r3, [r4, #4]
   177ca:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   177cc:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   177ce:	d551      	bpl.n	17874 <bt_le_adv_start_legacy+0x174>
		if (dir_adv) {
   177d0:	2e00      	cmp	r6, #0
   177d2:	d04c      	beq.n	1786e <bt_le_adv_start_legacy+0x16e>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   177d4:	f013 0f10 	tst.w	r3, #16
   177d8:	bf14      	ite	ne
   177da:	2304      	movne	r3, #4
   177dc:	2301      	moveq	r3, #1
   177de:	6921      	ldr	r1, [r4, #16]
   177e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   177e4:	2207      	movs	r2, #7
   177e6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   177ea:	f013 f956 	bl	2aa9a <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   177ee:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   177f2:	210f      	movs	r1, #15
   177f4:	f242 0006 	movw	r0, #8198	; 0x2006
   177f8:	f7fe fd94 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   177fc:	4683      	mov	fp, r0
   177fe:	2800      	cmp	r0, #0
   17800:	f000 80a6 	beq.w	17950 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17804:	220f      	movs	r2, #15
   17806:	a90a      	add	r1, sp, #40	; 0x28
   17808:	3008      	adds	r0, #8
   1780a:	f015 f8e1 	bl	2c9d0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1780e:	2200      	movs	r2, #0
   17810:	4659      	mov	r1, fp
   17812:	f242 0006 	movw	r0, #8198	; 0x2006
   17816:	f7fe fef1 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   1781a:	2800      	cmp	r0, #0
   1781c:	f040 809b 	bne.w	17956 <bt_le_adv_start_legacy+0x256>
	if (!dir_adv) {
   17820:	2e00      	cmp	r6, #0
   17822:	d037      	beq.n	17894 <bt_le_adv_start_legacy+0x194>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17824:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17826:	07db      	lsls	r3, r3, #31
   17828:	d442      	bmi.n	178b0 <bt_le_adv_start_legacy+0x1b0>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1782a:	2101      	movs	r1, #1
   1782c:	4628      	mov	r0, r5
   1782e:	f013 fce3 	bl	2b1f8 <bt_le_adv_set_enable_legacy>
	if (err) {
   17832:	4683      	mov	fp, r0
   17834:	2800      	cmp	r0, #0
   17836:	d07e      	beq.n	17936 <bt_le_adv_start_legacy+0x236>
   17838:	4b4a      	ldr	r3, [pc, #296]	; (17964 <bt_le_adv_start_legacy+0x264>)
   1783a:	494b      	ldr	r1, [pc, #300]	; (17968 <bt_le_adv_start_legacy+0x268>)
		BT_ERR("Failed to start advertiser");
   1783c:	484b      	ldr	r0, [pc, #300]	; (1796c <bt_le_adv_start_legacy+0x26c>)
   1783e:	1ac9      	subs	r1, r1, r3
   17840:	08c9      	lsrs	r1, r1, #3
   17842:	0189      	lsls	r1, r1, #6
   17844:	f041 0101 	orr.w	r1, r1, #1
   17848:	f011 f9b1 	bl	28bae <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1784c:	9807      	ldr	r0, [sp, #28]
   1784e:	2800      	cmp	r0, #0
   17850:	f43f af71 	beq.w	17736 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17854:	2100      	movs	r1, #0
   17856:	f000 fdb3 	bl	183c0 <bt_conn_set_state>
			bt_conn_unref(conn);
   1785a:	9807      	ldr	r0, [sp, #28]
   1785c:	f000 fd6c 	bl	18338 <bt_conn_unref>
   17860:	e769      	b.n	17736 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   17862:	9608      	str	r6, [sp, #32]
   17864:	2207      	movs	r2, #7
   17866:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   1786a:	a908      	add	r1, sp, #32
   1786c:	e7a7      	b.n	177be <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   1786e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   17872:	e7be      	b.n	177f2 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   17874:	059a      	lsls	r2, r3, #22
   17876:	d403      	bmi.n	17880 <bt_le_adv_start_legacy+0x180>
   17878:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1787a:	b90b      	cbnz	r3, 17880 <bt_le_adv_start_legacy+0x180>
   1787c:	2802      	cmp	r0, #2
   1787e:	d103      	bne.n	17888 <bt_le_adv_start_legacy+0x188>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   17880:	2302      	movs	r3, #2
   17882:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17886:	e7b4      	b.n	177f2 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17888:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1788a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1788e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   17892:	e7ae      	b.n	177f2 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17894:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17896:	9300      	str	r3, [sp, #0]
   17898:	e9cd 8901 	strd	r8, r9, [sp, #4]
   1789c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1789e:	9905      	ldr	r1, [sp, #20]
   178a0:	4652      	mov	r2, sl
   178a2:	4628      	mov	r0, r5
   178a4:	f013 fc21 	bl	2b0ea <le_adv_update.constprop.0>
		if (err) {
   178a8:	4683      	mov	fp, r0
   178aa:	2800      	cmp	r0, #0
   178ac:	d0ba      	beq.n	17824 <bt_le_adv_start_legacy+0x124>
   178ae:	e742      	b.n	17736 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   178b0:	a907      	add	r1, sp, #28
   178b2:	4628      	mov	r0, r5
   178b4:	f7ff fed6 	bl	17664 <le_adv_start_add_conn>
		if (err) {
   178b8:	4683      	mov	fp, r0
   178ba:	2800      	cmp	r0, #0
   178bc:	d0b5      	beq.n	1782a <bt_le_adv_start_legacy+0x12a>
			if (err == -ENOMEM && !dir_adv &&
   178be:	f110 0f0c 	cmn.w	r0, #12
   178c2:	f47f af38 	bne.w	17736 <bt_le_adv_start_legacy+0x36>
   178c6:	2e00      	cmp	r6, #0
   178c8:	f47f af35 	bne.w	17736 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   178cc:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   178ce:	0798      	lsls	r0, r3, #30
   178d0:	f53f af31 	bmi.w	17736 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   178d4:	6862      	ldr	r2, [r4, #4]
   178d6:	f082 0202 	eor.w	r2, r2, #2
   178da:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   178de:	f00b 0201 	and.w	r2, fp, #1
   178e2:	210d      	movs	r1, #13
   178e4:	4638      	mov	r0, r7
   178e6:	f013 fbe9 	bl	2b0bc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   178ea:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   178ee:	425a      	negs	r2, r3
   178f0:	415a      	adcs	r2, r3
   178f2:	2107      	movs	r1, #7
   178f4:	4638      	mov	r0, r7
   178f6:	f013 fbe1 	bl	2b0bc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   178fa:	f1a9 0102 	sub.w	r1, r9, #2
   178fe:	424a      	negs	r2, r1
   17900:	414a      	adcs	r2, r1
   17902:	4638      	mov	r0, r7
   17904:	2108      	movs	r1, #8
   17906:	f013 fbd9 	bl	2b0bc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1790a:	6862      	ldr	r2, [r4, #4]
   1790c:	2109      	movs	r1, #9
   1790e:	f002 0201 	and.w	r2, r2, #1
   17912:	4638      	mov	r0, r7
   17914:	f013 fbd2 	bl	2b0bc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   17918:	4642      	mov	r2, r8
   1791a:	210a      	movs	r1, #10
   1791c:	4638      	mov	r0, r7
   1791e:	f013 fbcd 	bl	2b0bc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   17922:	6862      	ldr	r2, [r4, #4]
   17924:	210c      	movs	r1, #12
   17926:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1792a:	4638      	mov	r0, r7
   1792c:	f013 fbc6 	bl	2b0bc <atomic_set_bit_to>
	return 0;
   17930:	f04f 0b00 	mov.w	fp, #0
   17934:	e6ff      	b.n	17736 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17936:	9807      	ldr	r0, [sp, #28]
   17938:	b108      	cbz	r0, 1793e <bt_le_adv_start_legacy+0x23e>
		bt_conn_unref(conn);
   1793a:	f000 fcfd 	bl	18338 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1793e:	2e00      	cmp	r6, #0
   17940:	d1cd      	bne.n	178de <bt_le_adv_start_legacy+0x1de>
   17942:	e7c7      	b.n	178d4 <bt_le_adv_start_legacy+0x1d4>
		return -EAGAIN;
   17944:	f06f 0b0a 	mvn.w	fp, #10
   17948:	e6f5      	b.n	17736 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1794a:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   1794e:	e6f2      	b.n	17736 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   17950:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   17954:	e6ef      	b.n	17736 <bt_le_adv_start_legacy+0x36>
   17956:	4683      	mov	fp, r0
   17958:	e6ed      	b.n	17736 <bt_le_adv_start_legacy+0x36>
   1795a:	bf00      	nop
   1795c:	2000037c 	.word	0x2000037c
   17960:	200002b0 	.word	0x200002b0
   17964:	0002d948 	.word	0x0002d948
   17968:	0002d948 	.word	0x0002d948
   1796c:	000306f1 	.word	0x000306f1

00017970 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   17970:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17972:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17974:	9a06      	ldr	r2, [sp, #24]
{
   17976:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17978:	e9cd 3200 	strd	r3, r2, [sp]
   1797c:	462b      	mov	r3, r5
   1797e:	460a      	mov	r2, r1
   17980:	4601      	mov	r1, r0
   17982:	4811      	ldr	r0, [pc, #68]	; (179c8 <bt_le_adv_start+0x58>)
   17984:	f7ff febc 	bl	17700 <bt_le_adv_start_legacy>
   17988:	4621      	mov	r1, r4
   1798a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   1798c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1798e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   17992:	429d      	cmp	r5, r3
   17994:	d102      	bne.n	1799c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   17996:	4630      	mov	r0, r6
   17998:	b002      	add	sp, #8
   1799a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   1799c:	880a      	ldrh	r2, [r1, #0]
   1799e:	4282      	cmp	r2, r0
   179a0:	d104      	bne.n	179ac <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   179a2:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   179a4:	b112      	cbz	r2, 179ac <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   179a6:	7812      	ldrb	r2, [r2, #0]
   179a8:	07d2      	lsls	r2, r2, #31
   179aa:	d402      	bmi.n	179b2 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   179ac:	3301      	adds	r3, #1
   179ae:	3108      	adds	r1, #8
   179b0:	e7ef      	b.n	17992 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   179b2:	4906      	ldr	r1, [pc, #24]	; (179cc <bt_le_adv_start+0x5c>)
   179b4:	4806      	ldr	r0, [pc, #24]	; (179d0 <bt_le_adv_start+0x60>)
   179b6:	f00b fc67 	bl	23288 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   179ba:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   179be:	2300      	movs	r3, #0
   179c0:	4803      	ldr	r0, [pc, #12]	; (179d0 <bt_le_adv_start+0x60>)
   179c2:	f00b fd85 	bl	234d0 <k_work_reschedule>
   179c6:	e7e6      	b.n	17996 <bt_le_adv_start+0x26>
   179c8:	200002c8 	.word	0x200002c8
   179cc:	00017a71 	.word	0x00017a71
   179d0:	200002e0 	.word	0x200002e0

000179d4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   179d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   179d6:	4821      	ldr	r0, [pc, #132]	; (17a5c <bt_le_adv_stop+0x88>)
   179d8:	f013 fc35 	bl	2b246 <bt_le_lim_adv_cancel_timeout>
   179dc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   179e0:	481f      	ldr	r0, [pc, #124]	; (17a60 <bt_le_adv_stop+0x8c>)
   179e2:	f013 fb5c 	bl	2b09e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   179e6:	481e      	ldr	r0, [pc, #120]	; (17a60 <bt_le_adv_stop+0x8c>)
   179e8:	f013 fb53 	bl	2b092 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   179ec:	0642      	lsls	r2, r0, #25
   179ee:	f3c0 1380 	ubfx	r3, r0, #6, #1
   179f2:	d530      	bpl.n	17a56 <bt_le_adv_stop+0x82>
   179f4:	481a      	ldr	r0, [pc, #104]	; (17a60 <bt_le_adv_stop+0x8c>)
   179f6:	f013 fb4c 	bl	2b092 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   179fa:	0583      	lsls	r3, r0, #22
   179fc:	d521      	bpl.n	17a42 <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   179fe:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   17a00:	4818      	ldr	r0, [pc, #96]	; (17a64 <bt_le_adv_stop+0x90>)
   17a02:	9300      	str	r3, [sp, #0]
   17a04:	2207      	movs	r2, #7
   17a06:	4669      	mov	r1, sp
   17a08:	f8cd 3003 	str.w	r3, [sp, #3]
   17a0c:	f013 f81e 	bl	2aa4c <memcmp>
   17a10:	4b15      	ldr	r3, [pc, #84]	; (17a68 <bt_le_adv_stop+0x94>)
   17a12:	b9e0      	cbnz	r0, 17a4e <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   17a14:	4a15      	ldr	r2, [pc, #84]	; (17a6c <bt_le_adv_stop+0x98>)
   17a16:	8891      	ldrh	r1, [r2, #4]
   17a18:	6810      	ldr	r0, [r2, #0]
   17a1a:	7992      	ldrb	r2, [r2, #6]
   17a1c:	f8ad 100c 	strh.w	r1, [sp, #12]
   17a20:	f88d 200e 	strb.w	r2, [sp, #14]
   17a24:	9002      	str	r0, [sp, #8]
   17a26:	2204      	movs	r2, #4
   17a28:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17a2a:	7e18      	ldrb	r0, [r3, #24]
   17a2c:	f000 ffc0 	bl	189b0 <bt_conn_lookup_state_le>
   17a30:	4604      	mov	r4, r0
	if (conn) {
   17a32:	b130      	cbz	r0, 17a42 <bt_le_adv_stop+0x6e>
		conn->err = status;
   17a34:	2100      	movs	r1, #0
   17a36:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17a38:	f000 fcc2 	bl	183c0 <bt_conn_set_state>
		bt_conn_unref(conn);
   17a3c:	4620      	mov	r0, r4
   17a3e:	f000 fc7b 	bl	18338 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   17a42:	4806      	ldr	r0, [pc, #24]	; (17a5c <bt_le_adv_stop+0x88>)
   17a44:	2100      	movs	r1, #0
   17a46:	f013 fbd7 	bl	2b1f8 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   17a4a:	b004      	add	sp, #16
   17a4c:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17a4e:	2205      	movs	r2, #5
   17a50:	f103 0121 	add.w	r1, r3, #33	; 0x21
   17a54:	e7e9      	b.n	17a2a <bt_le_adv_stop+0x56>
		return 0;
   17a56:	4618      	mov	r0, r3
   17a58:	e7f7      	b.n	17a4a <bt_le_adv_stop+0x76>
   17a5a:	bf00      	nop
   17a5c:	200002c8 	.word	0x200002c8
   17a60:	200002d8 	.word	0x200002d8
   17a64:	200002d1 	.word	0x200002d1
   17a68:	200002b0 	.word	0x200002b0
   17a6c:	0002dafb 	.word	0x0002dafb

00017a70 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   17a70:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   17a72:	f7ff ffaf 	bl	179d4 <bt_le_adv_stop>
   17a76:	4b06      	ldr	r3, [pc, #24]	; (17a90 <adv_timeout+0x20>)
   17a78:	4a06      	ldr	r2, [pc, #24]	; (17a94 <adv_timeout+0x24>)
   17a7a:	1ad2      	subs	r2, r2, r3
   17a7c:	08d2      	lsrs	r2, r2, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   17a7e:	0192      	lsls	r2, r2, #6
	err = bt_le_adv_stop();
   17a80:	4601      	mov	r1, r0
}
   17a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Failed to stop advertising: %d", err);
   17a86:	4804      	ldr	r0, [pc, #16]	; (17a98 <adv_timeout+0x28>)
   17a88:	f042 0202 	orr.w	r2, r2, #2
   17a8c:	f011 b89c 	b.w	28bc8 <log_1>
   17a90:	0002d948 	.word	0x0002d948
   17a94:	0002d948 	.word	0x0002d948
   17a98:	0003070c 	.word	0x0003070c

00017a9c <bt_le_adv_resume>:
{
   17a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17a9e:	481e      	ldr	r0, [pc, #120]	; (17b18 <bt_le_adv_resume+0x7c>)
   17aa0:	4c1d      	ldr	r4, [pc, #116]	; (17b18 <bt_le_adv_resume+0x7c>)
   17aa2:	f013 faf6 	bl	2b092 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   17aa6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   17aaa:	d032      	beq.n	17b12 <bt_le_adv_resume+0x76>
   17aac:	4620      	mov	r0, r4
   17aae:	f013 faf0 	bl	2b092 <atomic_get>
   17ab2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17ab4:	f3c0 1580 	ubfx	r5, r0, #6, #1
   17ab8:	d42b      	bmi.n	17b12 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17aba:	4620      	mov	r0, r4
   17abc:	f013 fae9 	bl	2b092 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17ac0:	0583      	lsls	r3, r0, #22
   17ac2:	d526      	bpl.n	17b12 <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
   17ac4:	a901      	add	r1, sp, #4
   17ac6:	f1a4 0010 	sub.w	r0, r4, #16
   17aca:	f7ff fdcb 	bl	17664 <le_adv_start_add_conn>
	if (err) {
   17ace:	bb00      	cbnz	r0, 17b12 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17ad0:	2101      	movs	r1, #1
   17ad2:	f1a4 0010 	sub.w	r0, r4, #16
   17ad6:	f013 fb8f 	bl	2b1f8 <bt_le_adv_set_enable_legacy>
	if (err) {
   17ada:	b150      	cbz	r0, 17af2 <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17adc:	4629      	mov	r1, r5
   17ade:	9801      	ldr	r0, [sp, #4]
   17ae0:	f000 fc6e 	bl	183c0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17ae4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17ae8:	4620      	mov	r0, r4
   17aea:	f013 fad8 	bl	2b09e <atomic_and>
	return (old & mask) != 0;
   17aee:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   17af2:	9801      	ldr	r0, [sp, #4]
   17af4:	f000 fc20 	bl	18338 <bt_conn_unref>
	if (persist_paused) {
   17af8:	b15d      	cbz	r5, 17b12 <bt_le_adv_resume+0x76>
   17afa:	f3bf 8f5b 	dmb	ish
   17afe:	e854 3f00 	ldrex	r3, [r4]
   17b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17b06:	e844 3200 	strex	r2, r3, [r4]
   17b0a:	2a00      	cmp	r2, #0
   17b0c:	d1f7      	bne.n	17afe <bt_le_adv_resume+0x62>
   17b0e:	f3bf 8f5b 	dmb	ish
}
   17b12:	b003      	add	sp, #12
   17b14:	bd30      	pop	{r4, r5, pc}
   17b16:	bf00      	nop
   17b18:	200002d8 	.word	0x200002d8

00017b1c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   17b1c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   17b1e:	4904      	ldr	r1, [pc, #16]	; (17b30 <bt_pub_key_is_debug+0x14>)
   17b20:	2240      	movs	r2, #64	; 0x40
   17b22:	f012 ff93 	bl	2aa4c <memcmp>
}
   17b26:	fab0 f080 	clz	r0, r0
   17b2a:	0940      	lsrs	r0, r0, #5
   17b2c:	bd08      	pop	{r3, pc}
   17b2e:	bf00      	nop
   17b30:	000307c0 	.word	0x000307c0

00017b34 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   17b34:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   17b36:	4b44      	ldr	r3, [pc, #272]	; (17c48 <bt_pub_key_gen+0x114>)
   17b38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   17b3c:	f003 0306 	and.w	r3, r3, #6
   17b40:	2b06      	cmp	r3, #6
   17b42:	d00d      	beq.n	17b60 <bt_pub_key_gen+0x2c>
   17b44:	4b41      	ldr	r3, [pc, #260]	; (17c4c <bt_pub_key_gen+0x118>)
   17b46:	4942      	ldr	r1, [pc, #264]	; (17c50 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   17b48:	4842      	ldr	r0, [pc, #264]	; (17c54 <bt_pub_key_gen+0x120>)
   17b4a:	1ac9      	subs	r1, r1, r3
   17b4c:	08c9      	lsrs	r1, r1, #3
   17b4e:	0189      	lsls	r1, r1, #6
   17b50:	f041 0102 	orr.w	r1, r1, #2
   17b54:	f011 f82b 	bl	28bae <log_0>
		return -ENOTSUP;
   17b58:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   17b5c:	4630      	mov	r0, r6
   17b5e:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   17b60:	2800      	cmp	r0, #0
   17b62:	d06d      	beq.n	17c40 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17b64:	4d3c      	ldr	r5, [pc, #240]	; (17c58 <bt_pub_key_gen+0x124>)
   17b66:	682a      	ldr	r2, [r5, #0]
   17b68:	b10a      	cbz	r2, 17b6e <bt_pub_key_gen+0x3a>
   17b6a:	1f13      	subs	r3, r2, #4
   17b6c:	b9bb      	cbnz	r3, 17b9e <bt_pub_key_gen+0x6a>
	parent->next = child;
   17b6e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17b70:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17b72:	1d03      	adds	r3, r0, #4
	list->head = node;
   17b74:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   17b76:	b902      	cbnz	r2, 17b7a <bt_pub_key_gen+0x46>
	list->tail = node;
   17b78:	606b      	str	r3, [r5, #4]
   17b7a:	4c38      	ldr	r4, [pc, #224]	; (17c5c <bt_pub_key_gen+0x128>)
   17b7c:	f3bf 8f5b 	dmb	ish
   17b80:	e854 2f00 	ldrex	r2, [r4]
   17b84:	f042 0310 	orr.w	r3, r2, #16
   17b88:	e844 3100 	strex	r1, r3, [r4]
   17b8c:	2900      	cmp	r1, #0
   17b8e:	d1f7      	bne.n	17b80 <bt_pub_key_gen+0x4c>
   17b90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17b94:	f012 0210 	ands.w	r2, r2, #16
   17b98:	d017      	beq.n	17bca <bt_pub_key_gen+0x96>
		return 0;
   17b9a:	2600      	movs	r6, #0
   17b9c:	e7de      	b.n	17b5c <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   17b9e:	4298      	cmp	r0, r3
   17ba0:	d10c      	bne.n	17bbc <bt_pub_key_gen+0x88>
   17ba2:	4b2a      	ldr	r3, [pc, #168]	; (17c4c <bt_pub_key_gen+0x118>)
   17ba4:	492a      	ldr	r1, [pc, #168]	; (17c50 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   17ba6:	482e      	ldr	r0, [pc, #184]	; (17c60 <bt_pub_key_gen+0x12c>)
   17ba8:	1ac9      	subs	r1, r1, r3
   17baa:	08c9      	lsrs	r1, r1, #3
   17bac:	0189      	lsls	r1, r1, #6
   17bae:	f041 0102 	orr.w	r1, r1, #2
   17bb2:	f010 fffc 	bl	28bae <log_0>
			return -EALREADY;
   17bb6:	f06f 0677 	mvn.w	r6, #119	; 0x77
   17bba:	e7cf      	b.n	17b5c <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   17bbc:	1d19      	adds	r1, r3, #4
   17bbe:	d0d6      	beq.n	17b6e <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17bc0:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17bc2:	2b00      	cmp	r3, #0
   17bc4:	d0d3      	beq.n	17b6e <bt_pub_key_gen+0x3a>
   17bc6:	3b04      	subs	r3, #4
   17bc8:	e7d0      	b.n	17b6c <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17bca:	f3bf 8f5b 	dmb	ish
   17bce:	e854 3f00 	ldrex	r3, [r4]
   17bd2:	f023 0308 	bic.w	r3, r3, #8
   17bd6:	e844 3100 	strex	r1, r3, [r4]
   17bda:	2900      	cmp	r1, #0
   17bdc:	d1f7      	bne.n	17bce <bt_pub_key_gen+0x9a>
   17bde:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17be2:	4611      	mov	r1, r2
   17be4:	f242 0025 	movw	r0, #8229	; 0x2025
   17be8:	f7fe fd08 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   17bec:	4606      	mov	r6, r0
   17bee:	2800      	cmp	r0, #0
   17bf0:	d0d3      	beq.n	17b9a <bt_pub_key_gen+0x66>
   17bf2:	4b16      	ldr	r3, [pc, #88]	; (17c4c <bt_pub_key_gen+0x118>)
   17bf4:	4916      	ldr	r1, [pc, #88]	; (17c50 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   17bf6:	481b      	ldr	r0, [pc, #108]	; (17c64 <bt_pub_key_gen+0x130>)
   17bf8:	1ac9      	subs	r1, r1, r3
   17bfa:	08c9      	lsrs	r1, r1, #3
   17bfc:	0189      	lsls	r1, r1, #6
   17bfe:	f041 0101 	orr.w	r1, r1, #1
   17c02:	f010 ffd4 	bl	28bae <log_0>
   17c06:	f3bf 8f5b 	dmb	ish
   17c0a:	e854 3f00 	ldrex	r3, [r4]
   17c0e:	f023 0310 	bic.w	r3, r3, #16
   17c12:	e844 3200 	strex	r2, r3, [r4]
   17c16:	2a00      	cmp	r2, #0
   17c18:	d1f7      	bne.n	17c0a <bt_pub_key_gen+0xd6>
   17c1a:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17c1e:	682c      	ldr	r4, [r5, #0]
   17c20:	b91c      	cbnz	r4, 17c2a <bt_pub_key_gen+0xf6>
	list->head = NULL;
   17c22:	2300      	movs	r3, #0
	list->tail = NULL;
   17c24:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   17c28:	e798      	b.n	17b5c <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17c2a:	3c04      	subs	r4, #4
   17c2c:	2c00      	cmp	r4, #0
   17c2e:	d0f8      	beq.n	17c22 <bt_pub_key_gen+0xee>
			if (cb->func) {
   17c30:	6823      	ldr	r3, [r4, #0]
   17c32:	b10b      	cbz	r3, 17c38 <bt_pub_key_gen+0x104>
				cb->func(NULL);
   17c34:	2000      	movs	r0, #0
   17c36:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   17c38:	1d23      	adds	r3, r4, #4
   17c3a:	d0f2      	beq.n	17c22 <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17c3c:	6864      	ldr	r4, [r4, #4]
	return node->next;
   17c3e:	e7ef      	b.n	17c20 <bt_pub_key_gen+0xec>
		return -EINVAL;
   17c40:	f06f 0615 	mvn.w	r6, #21
   17c44:	e78a      	b.n	17b5c <bt_pub_key_gen+0x28>
   17c46:	bf00      	nop
   17c48:	200002b0 	.word	0x200002b0
   17c4c:	0002d948 	.word	0x0002d948
   17c50:	0002d968 	.word	0x0002d968
   17c54:	00030732 	.word	0x00030732
   17c58:	200029d0 	.word	0x200029d0
   17c5c:	2000037c 	.word	0x2000037c
   17c60:	00030751 	.word	0x00030751
   17c64:	0003076d 	.word	0x0003076d

00017c68 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17c68:	4b05      	ldr	r3, [pc, #20]	; (17c80 <bt_pub_key_get+0x18>)
   17c6a:	f3bf 8f5b 	dmb	ish
   17c6e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   17c70:	4804      	ldr	r0, [pc, #16]	; (17c84 <bt_pub_key_get+0x1c>)
   17c72:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17c76:	f013 0f08 	tst.w	r3, #8
}
   17c7a:	bf08      	it	eq
   17c7c:	2000      	moveq	r0, #0
   17c7e:	4770      	bx	lr
   17c80:	2000037c 	.word	0x2000037c
   17c84:	20003862 	.word	0x20003862

00017c88 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   17c8a:	4d25      	ldr	r5, [pc, #148]	; (17d20 <bt_dh_key_gen+0x98>)
   17c8c:	682b      	ldr	r3, [r5, #0]
   17c8e:	428b      	cmp	r3, r1
{
   17c90:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   17c92:	d03f      	beq.n	17d14 <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17c94:	b11b      	cbz	r3, 17c9e <bt_dh_key_gen+0x16>
		return -EBUSY;
   17c96:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17c9a:	4620      	mov	r0, r4
   17c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c9e:	4b21      	ldr	r3, [pc, #132]	; (17d24 <bt_dh_key_gen+0x9c>)
   17ca0:	f3bf 8f5b 	dmb	ish
   17ca4:	681a      	ldr	r2, [r3, #0]
   17ca6:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17caa:	f3c2 1700 	ubfx	r7, r2, #4, #1
   17cae:	06d2      	lsls	r2, r2, #27
   17cb0:	d4f1      	bmi.n	17c96 <bt_dh_key_gen+0xe>
   17cb2:	f3bf 8f5b 	dmb	ish
   17cb6:	681b      	ldr	r3, [r3, #0]
   17cb8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   17cbc:	071b      	lsls	r3, r3, #28
   17cbe:	d52c      	bpl.n	17d1a <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   17cc0:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   17cc2:	f242 0026 	movw	r0, #8230	; 0x2026
   17cc6:	2140      	movs	r1, #64	; 0x40
   17cc8:	f7fe fb2c 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   17ccc:	4604      	mov	r4, r0
   17cce:	b1f0      	cbz	r0, 17d0e <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   17cd0:	2140      	movs	r1, #64	; 0x40
   17cd2:	3008      	adds	r0, #8
   17cd4:	f006 f81c 	bl	1dd10 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   17cd8:	2240      	movs	r2, #64	; 0x40
   17cda:	4631      	mov	r1, r6
   17cdc:	f012 fedd 	bl	2aa9a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   17ce0:	4621      	mov	r1, r4
   17ce2:	463a      	mov	r2, r7
   17ce4:	f242 0026 	movw	r0, #8230	; 0x2026
   17ce8:	f7fe fc88 	bl	165fc <bt_hci_cmd_send_sync>
	if (err) {
   17cec:	4604      	mov	r4, r0
   17cee:	2800      	cmp	r0, #0
   17cf0:	d0d3      	beq.n	17c9a <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   17cf2:	2300      	movs	r3, #0
   17cf4:	602b      	str	r3, [r5, #0]
   17cf6:	4a0c      	ldr	r2, [pc, #48]	; (17d28 <bt_dh_key_gen+0xa0>)
   17cf8:	4b0c      	ldr	r3, [pc, #48]	; (17d2c <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   17cfa:	480d      	ldr	r0, [pc, #52]	; (17d30 <bt_dh_key_gen+0xa8>)
   17cfc:	1ad2      	subs	r2, r2, r3
   17cfe:	08d2      	lsrs	r2, r2, #3
   17d00:	0192      	lsls	r2, r2, #6
   17d02:	f042 0202 	orr.w	r2, r2, #2
   17d06:	4621      	mov	r1, r4
   17d08:	f010 ff5e 	bl	28bc8 <log_1>
		return err;
   17d0c:	e7c5      	b.n	17c9a <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   17d0e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17d12:	e7ee      	b.n	17cf2 <bt_dh_key_gen+0x6a>
		return -EALREADY;
   17d14:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17d18:	e7bf      	b.n	17c9a <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   17d1a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   17d1e:	e7bc      	b.n	17c9a <bt_dh_key_gen+0x12>
   17d20:	200029cc 	.word	0x200029cc
   17d24:	2000037c 	.word	0x2000037c
   17d28:	0002d968 	.word	0x0002d968
   17d2c:	0002d948 	.word	0x0002d948
   17d30:	00030797 	.word	0x00030797

00017d34 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   17d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d36:	4c1d      	ldr	r4, [pc, #116]	; (17dac <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   17d38:	6886      	ldr	r6, [r0, #8]
   17d3a:	f3bf 8f5b 	dmb	ish
   17d3e:	e854 3f00 	ldrex	r3, [r4]
   17d42:	f023 0310 	bic.w	r3, r3, #16
   17d46:	e844 3200 	strex	r2, r3, [r4]
   17d4a:	2a00      	cmp	r2, #0
   17d4c:	d1f7      	bne.n	17d3e <bt_hci_evt_le_pkey_complete+0xa>
   17d4e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   17d52:	7833      	ldrb	r3, [r6, #0]
   17d54:	b983      	cbnz	r3, 17d78 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   17d56:	4816      	ldr	r0, [pc, #88]	; (17db0 <bt_hci_evt_le_pkey_complete+0x7c>)
   17d58:	2240      	movs	r2, #64	; 0x40
   17d5a:	1c71      	adds	r1, r6, #1
   17d5c:	f012 fe9d 	bl	2aa9a <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17d60:	f3bf 8f5b 	dmb	ish
   17d64:	e854 3f00 	ldrex	r3, [r4]
   17d68:	f043 0308 	orr.w	r3, r3, #8
   17d6c:	e844 3200 	strex	r2, r3, [r4]
   17d70:	2a00      	cmp	r2, #0
   17d72:	d1f7      	bne.n	17d64 <bt_hci_evt_le_pkey_complete+0x30>
   17d74:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17d78:	4d0e      	ldr	r5, [pc, #56]	; (17db4 <bt_hci_evt_le_pkey_complete+0x80>)
   17d7a:	682c      	ldr	r4, [r5, #0]
   17d7c:	b91c      	cbnz	r4, 17d86 <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   17d7e:	2300      	movs	r3, #0
	list->tail = NULL;
   17d80:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   17d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   17d86:	4f0a      	ldr	r7, [pc, #40]	; (17db0 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17d88:	3c04      	subs	r4, #4
   17d8a:	2c00      	cmp	r4, #0
   17d8c:	d0f7      	beq.n	17d7e <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   17d8e:	6823      	ldr	r3, [r4, #0]
   17d90:	b12b      	cbz	r3, 17d9e <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   17d92:	7832      	ldrb	r2, [r6, #0]
   17d94:	2a00      	cmp	r2, #0
   17d96:	bf0c      	ite	eq
   17d98:	4638      	moveq	r0, r7
   17d9a:	2000      	movne	r0, #0
   17d9c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   17d9e:	1d23      	adds	r3, r4, #4
   17da0:	d0ed      	beq.n	17d7e <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17da2:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17da4:	2c00      	cmp	r4, #0
   17da6:	d0ea      	beq.n	17d7e <bt_hci_evt_le_pkey_complete+0x4a>
   17da8:	3c04      	subs	r4, #4
   17daa:	e7ee      	b.n	17d8a <bt_hci_evt_le_pkey_complete+0x56>
   17dac:	2000037c 	.word	0x2000037c
   17db0:	20003862 	.word	0x20003862
   17db4:	200029d0 	.word	0x200029d0

00017db8 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   17db8:	4905      	ldr	r1, [pc, #20]	; (17dd0 <bt_hci_evt_le_dhkey_complete+0x18>)
   17dba:	680b      	ldr	r3, [r1, #0]
   17dbc:	b133      	cbz	r3, 17dcc <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   17dbe:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   17dc0:	2000      	movs	r0, #0
   17dc2:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   17dc4:	7811      	ldrb	r1, [r2, #0]
   17dc6:	b901      	cbnz	r1, 17dca <bt_hci_evt_le_dhkey_complete+0x12>
   17dc8:	1c50      	adds	r0, r2, #1
   17dca:	4718      	bx	r3
	}
}
   17dcc:	4770      	bx	lr
   17dce:	bf00      	nop
   17dd0:	200029cc 	.word	0x200029cc

00017dd4 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   17dd4:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17dd6:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   17dda:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   17ddc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   17dde:	4801      	ldr	r0, [pc, #4]	; (17de4 <tx_free+0x10>)
   17de0:	f015 ba82 	b.w	2d2e8 <k_queue_append>
   17de4:	2000098c 	.word	0x2000098c

00017de8 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17de8:	4b19      	ldr	r3, [pc, #100]	; (17e50 <notify_connected+0x68>)
{
   17dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   17dee:	681d      	ldr	r5, [r3, #0]
{
   17df0:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   17df2:	b9ed      	cbnz	r5, 17e30 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17df4:	4e17      	ldr	r6, [pc, #92]	; (17e54 <notify_connected+0x6c>)
   17df6:	4d18      	ldr	r5, [pc, #96]	; (17e58 <notify_connected+0x70>)
   17df8:	4f18      	ldr	r7, [pc, #96]	; (17e5c <notify_connected+0x74>)
   17dfa:	46b0      	mov	r8, r6
   17dfc:	42b5      	cmp	r5, r6
   17dfe:	d90e      	bls.n	17e1e <notify_connected+0x36>
   17e00:	4917      	ldr	r1, [pc, #92]	; (17e60 <notify_connected+0x78>)
   17e02:	4818      	ldr	r0, [pc, #96]	; (17e64 <notify_connected+0x7c>)
   17e04:	f240 5311 	movw	r3, #1297	; 0x511
   17e08:	463a      	mov	r2, r7
   17e0a:	f010 fcb1 	bl	28770 <printk>
   17e0e:	4816      	ldr	r0, [pc, #88]	; (17e68 <notify_connected+0x80>)
   17e10:	f010 fcae 	bl	28770 <printk>
   17e14:	f240 5111 	movw	r1, #1297	; 0x511
   17e18:	4638      	mov	r0, r7
   17e1a:	f010 fe9a 	bl	28b52 <assert_post_action>
   17e1e:	4545      	cmp	r5, r8
   17e20:	d30d      	bcc.n	17e3e <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   17e22:	7b23      	ldrb	r3, [r4, #12]
   17e24:	b993      	cbnz	r3, 17e4c <notify_connected+0x64>
		bt_gatt_connected(conn);
   17e26:	4620      	mov	r0, r4
	}
}
   17e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   17e2c:	f003 bcdc 	b.w	1b7e8 <bt_gatt_connected>
		if (cb->connected) {
   17e30:	682b      	ldr	r3, [r5, #0]
   17e32:	b113      	cbz	r3, 17e3a <notify_connected+0x52>
			cb->connected(conn, conn->err);
   17e34:	7b21      	ldrb	r1, [r4, #12]
   17e36:	4620      	mov	r0, r4
   17e38:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17e3a:	69ad      	ldr	r5, [r5, #24]
   17e3c:	e7d9      	b.n	17df2 <notify_connected+0xa>
		if (cb->connected) {
   17e3e:	682b      	ldr	r3, [r5, #0]
   17e40:	b113      	cbz	r3, 17e48 <notify_connected+0x60>
			cb->connected(conn, conn->err);
   17e42:	7b21      	ldrb	r1, [r4, #12]
   17e44:	4620      	mov	r0, r4
   17e46:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17e48:	351c      	adds	r5, #28
   17e4a:	e7d7      	b.n	17dfc <notify_connected+0x14>
}
   17e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17e50:	200029dc 	.word	0x200029dc
   17e54:	0002d8b8 	.word	0x0002d8b8
   17e58:	0002d89c 	.word	0x0002d89c
   17e5c:	00030800 	.word	0x00030800
   17e60:	00030830 	.word	0x00030830
   17e64:	0002e915 	.word	0x0002e915
   17e68:	0002f2e8 	.word	0x0002f2e8

00017e6c <send_frag>:
{
   17e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   17e70:	694d      	ldr	r5, [r1, #20]
{
   17e72:	4604      	mov	r4, r0
   17e74:	460e      	mov	r6, r1
   17e76:	4691      	mov	r9, r2
   17e78:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   17e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17e7e:	484c      	ldr	r0, [pc, #304]	; (17fb0 <send_frag+0x144>)
   17e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17e84:	f00a fe2c 	bl	22ae0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   17e88:	7b63      	ldrb	r3, [r4, #13]
   17e8a:	2b07      	cmp	r3, #7
   17e8c:	d151      	bne.n	17f32 <send_frag+0xc6>
	__asm__ volatile(
   17e8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   17e92:	f3ef 8211 	mrs	r2, BASEPRI
   17e96:	f383 8812 	msr	BASEPRI_MAX, r3
   17e9a:	f3bf 8f6f 	isb	sy
	if (tx) {
   17e9e:	2d00      	cmp	r5, #0
   17ea0:	d059      	beq.n	17f56 <send_frag+0xea>
	parent->next = child;
   17ea2:	2300      	movs	r3, #0
   17ea4:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   17ea6:	69a3      	ldr	r3, [r4, #24]
   17ea8:	2b00      	cmp	r3, #0
   17eaa:	d151      	bne.n	17f50 <send_frag+0xe4>
	list->head = node;
   17eac:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   17eb0:	f382 8811 	msr	BASEPRI, r2
   17eb4:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   17eb8:	2104      	movs	r1, #4
   17eba:	f106 0008 	add.w	r0, r6, #8
   17ebe:	f005 fec3 	bl	1dc48 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17ec2:	8823      	ldrh	r3, [r4, #0]
   17ec4:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   17ec8:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17ecc:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   17ece:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   17ed2:	3b04      	subs	r3, #4
   17ed4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17ed6:	2302      	movs	r3, #2
   17ed8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   17eda:	4630      	mov	r0, r6
   17edc:	f013 f80e 	bl	2aefc <bt_send>
	if (err) {
   17ee0:	4601      	mov	r1, r0
   17ee2:	2800      	cmp	r0, #0
   17ee4:	d062      	beq.n	17fac <send_frag+0x140>
   17ee6:	4b33      	ldr	r3, [pc, #204]	; (17fb4 <send_frag+0x148>)
   17ee8:	4a33      	ldr	r2, [pc, #204]	; (17fb8 <send_frag+0x14c>)
		BT_ERR("Unable to send to driver (err %d)", err);
   17eea:	4834      	ldr	r0, [pc, #208]	; (17fbc <send_frag+0x150>)
   17eec:	1ad2      	subs	r2, r2, r3
   17eee:	08d2      	lsrs	r2, r2, #3
   17ef0:	0192      	lsls	r2, r2, #6
   17ef2:	f042 0201 	orr.w	r2, r2, #1
   17ef6:	f010 fe67 	bl	28bc8 <log_1>
	__asm__ volatile(
   17efa:	f04f 0340 	mov.w	r3, #64	; 0x40
   17efe:	f3ef 8911 	mrs	r9, BASEPRI
   17f02:	f383 8812 	msr	BASEPRI_MAX, r3
   17f06:	f3bf 8f6f 	isb	sy
		if (tx) {
   17f0a:	2d00      	cmp	r5, #0
   17f0c:	d039      	beq.n	17f82 <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17f0e:	6963      	ldr	r3, [r4, #20]
   17f10:	2200      	movs	r2, #0
   17f12:	b153      	cbz	r3, 17f2a <send_frag+0xbe>
   17f14:	429d      	cmp	r5, r3
   17f16:	d131      	bne.n	17f7c <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   17f18:	682b      	ldr	r3, [r5, #0]
   17f1a:	bb4a      	cbnz	r2, 17f70 <send_frag+0x104>
   17f1c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   17f1e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   17f20:	4295      	cmp	r5, r2
   17f22:	d100      	bne.n	17f26 <send_frag+0xba>
	list->tail = node;
   17f24:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   17f26:	2300      	movs	r3, #0
   17f28:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   17f2a:	f389 8811 	msr	BASEPRI, r9
   17f2e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   17f32:	481f      	ldr	r0, [pc, #124]	; (17fb0 <send_frag+0x144>)
   17f34:	f00a fd90 	bl	22a58 <z_impl_k_sem_give>
	if (tx) {
   17f38:	b115      	cbz	r5, 17f40 <send_frag+0xd4>
		tx_free(tx);
   17f3a:	4628      	mov	r0, r5
   17f3c:	f7ff ff4a 	bl	17dd4 <tx_free>
	if (always_consume) {
   17f40:	b11f      	cbz	r7, 17f4a <send_frag+0xde>
		net_buf_unref(buf);
   17f42:	4630      	mov	r0, r6
   17f44:	f005 fdb4 	bl	1dab0 <net_buf_unref>
	return false;
   17f48:	2700      	movs	r7, #0
}
   17f4a:	4638      	mov	r0, r7
   17f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17f50:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17f52:	61a5      	str	r5, [r4, #24]
}
   17f54:	e7ac      	b.n	17eb0 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   17f56:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   17f58:	b133      	cbz	r3, 17f68 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   17f5a:	f103 080c 	add.w	r8, r3, #12
   17f5e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   17f60:	3301      	adds	r3, #1
   17f62:	f8c8 3000 	str.w	r3, [r8]
   17f66:	e7a3      	b.n	17eb0 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   17f68:	69e3      	ldr	r3, [r4, #28]
   17f6a:	f104 081c 	add.w	r8, r4, #28
   17f6e:	e7f7      	b.n	17f60 <send_frag+0xf4>
	parent->next = child;
   17f70:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   17f72:	69a3      	ldr	r3, [r4, #24]
   17f74:	429d      	cmp	r5, r3
	list->tail = node;
   17f76:	bf08      	it	eq
   17f78:	61a2      	streq	r2, [r4, #24]
}
   17f7a:	e7d4      	b.n	17f26 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   17f7c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17f7e:	681b      	ldr	r3, [r3, #0]
   17f80:	e7c7      	b.n	17f12 <send_frag+0xa6>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   17f82:	f8d8 3000 	ldr.w	r3, [r8]
   17f86:	b95b      	cbnz	r3, 17fa0 <send_frag+0x134>
   17f88:	490d      	ldr	r1, [pc, #52]	; (17fc0 <send_frag+0x154>)
   17f8a:	480e      	ldr	r0, [pc, #56]	; (17fc4 <send_frag+0x158>)
   17f8c:	4a0e      	ldr	r2, [pc, #56]	; (17fc8 <send_frag+0x15c>)
   17f8e:	f240 230f 	movw	r3, #527	; 0x20f
   17f92:	f010 fbed 	bl	28770 <printk>
   17f96:	480c      	ldr	r0, [pc, #48]	; (17fc8 <send_frag+0x15c>)
   17f98:	f240 210f 	movw	r1, #527	; 0x20f
   17f9c:	f010 fdd9 	bl	28b52 <assert_post_action>
			(*pending_no_cb)--;
   17fa0:	f8d8 3000 	ldr.w	r3, [r8]
   17fa4:	3b01      	subs	r3, #1
   17fa6:	f8c8 3000 	str.w	r3, [r8]
   17faa:	e7be      	b.n	17f2a <send_frag+0xbe>
	return true;
   17fac:	2701      	movs	r7, #1
   17fae:	e7cc      	b.n	17f4a <send_frag+0xde>
   17fb0:	200003b0 	.word	0x200003b0
   17fb4:	0002d948 	.word	0x0002d948
   17fb8:	0002d960 	.word	0x0002d960
   17fbc:	000301fa 	.word	0x000301fa
   17fc0:	0003084b 	.word	0x0003084b
   17fc4:	0002e915 	.word	0x0002e915
   17fc8:	00030800 	.word	0x00030800

00017fcc <bt_conn_get_pkts>:
}
   17fcc:	4800      	ldr	r0, [pc, #0]	; (17fd0 <bt_conn_get_pkts+0x4>)
   17fce:	4770      	bx	lr
   17fd0:	200003b0 	.word	0x200003b0

00017fd4 <bt_conn_new>:
{
   17fd4:	b538      	push	{r3, r4, r5, lr}
   17fd6:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   17fd8:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17fda:	2501      	movs	r5, #1
   17fdc:	428b      	cmp	r3, r1
   17fde:	d102      	bne.n	17fe6 <bt_conn_new+0x12>
		return NULL;
   17fe0:	2400      	movs	r4, #0
}
   17fe2:	4620      	mov	r0, r4
   17fe4:	bd38      	pop	{r3, r4, r5, pc}
   17fe6:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   17fea:	f3bf 8f5b 	dmb	ish
   17fee:	e852 0f00 	ldrex	r0, [r2]
   17ff2:	2800      	cmp	r0, #0
   17ff4:	d104      	bne.n	18000 <bt_conn_new+0x2c>
   17ff6:	e842 5c00 	strex	ip, r5, [r2]
   17ffa:	f1bc 0f00 	cmp.w	ip, #0
   17ffe:	d1f6      	bne.n	17fee <bt_conn_new+0x1a>
   18000:	f3bf 8f5b 	dmb	ish
   18004:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18008:	d002      	beq.n	18010 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1800a:	3301      	adds	r3, #1
   1800c:	4604      	mov	r4, r0
   1800e:	e7e5      	b.n	17fdc <bt_conn_new+0x8>
	if (!conn) {
   18010:	2c00      	cmp	r4, #0
   18012:	d0e6      	beq.n	17fe2 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   18014:	22c0      	movs	r2, #192	; 0xc0
   18016:	2100      	movs	r1, #0
   18018:	4620      	mov	r0, r4
   1801a:	f012 fd49 	bl	2aab0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1801e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18022:	4904      	ldr	r1, [pc, #16]	; (18034 <bt_conn_new+0x60>)
   18024:	f00b f930 	bl	23288 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18028:	4903      	ldr	r1, [pc, #12]	; (18038 <bt_conn_new+0x64>)
   1802a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1802e:	f00b f827 	bl	23080 <k_work_init>
	return conn;
   18032:	e7d6      	b.n	17fe2 <bt_conn_new+0xe>
   18034:	00018a61 	.word	0x00018a61
   18038:	0002b293 	.word	0x0002b293

0001803c <conn_cleanup>:
{
   1803c:	b570      	push	{r4, r5, r6, lr}
   1803e:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   18040:	f100 0638 	add.w	r6, r0, #56	; 0x38
   18044:	2200      	movs	r2, #0
   18046:	2300      	movs	r3, #0
   18048:	4630      	mov	r0, r6
   1804a:	f005 fc9f 	bl	1d98c <net_buf_get>
   1804e:	4605      	mov	r5, r0
   18050:	bb48      	cbnz	r0, 180a6 <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   18052:	6963      	ldr	r3, [r4, #20]
   18054:	b173      	cbz	r3, 18074 <conn_cleanup+0x38>
   18056:	4918      	ldr	r1, [pc, #96]	; (180b8 <conn_cleanup+0x7c>)
   18058:	4a18      	ldr	r2, [pc, #96]	; (180bc <conn_cleanup+0x80>)
   1805a:	4819      	ldr	r0, [pc, #100]	; (180c0 <conn_cleanup+0x84>)
   1805c:	f240 2392 	movw	r3, #658	; 0x292
   18060:	f010 fb86 	bl	28770 <printk>
   18064:	4817      	ldr	r0, [pc, #92]	; (180c4 <conn_cleanup+0x88>)
   18066:	f010 fb83 	bl	28770 <printk>
   1806a:	4814      	ldr	r0, [pc, #80]	; (180bc <conn_cleanup+0x80>)
   1806c:	f240 2192 	movw	r1, #658	; 0x292
   18070:	f010 fd6f 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   18074:	69e3      	ldr	r3, [r4, #28]
   18076:	b15b      	cbz	r3, 18090 <conn_cleanup+0x54>
   18078:	4913      	ldr	r1, [pc, #76]	; (180c8 <conn_cleanup+0x8c>)
   1807a:	4811      	ldr	r0, [pc, #68]	; (180c0 <conn_cleanup+0x84>)
   1807c:	4a0f      	ldr	r2, [pc, #60]	; (180bc <conn_cleanup+0x80>)
   1807e:	f240 2393 	movw	r3, #659	; 0x293
   18082:	f010 fb75 	bl	28770 <printk>
   18086:	480d      	ldr	r0, [pc, #52]	; (180bc <conn_cleanup+0x80>)
   18088:	f240 2193 	movw	r1, #659	; 0x293
   1808c:	f010 fd61 	bl	28b52 <assert_post_action>
	bt_conn_reset_rx_state(conn);
   18090:	4620      	mov	r0, r4
   18092:	f013 f901 	bl	2b298 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18096:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1809a:	2200      	movs	r2, #0
}
   1809c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   180a0:	2300      	movs	r3, #0
   180a2:	f00b ba15 	b.w	234d0 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   180a6:	6968      	ldr	r0, [r5, #20]
   180a8:	b108      	cbz	r0, 180ae <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   180aa:	f7ff fe93 	bl	17dd4 <tx_free>
		net_buf_unref(buf);
   180ae:	4628      	mov	r0, r5
   180b0:	f005 fcfe 	bl	1dab0 <net_buf_unref>
   180b4:	e7c6      	b.n	18044 <conn_cleanup+0x8>
   180b6:	bf00      	nop
   180b8:	0003085e 	.word	0x0003085e
   180bc:	00030800 	.word	0x00030800
   180c0:	0002e915 	.word	0x0002e915
   180c4:	00030884 	.word	0x00030884
   180c8:	00030899 	.word	0x00030899

000180cc <bt_conn_recv>:
{
   180cc:	b570      	push	{r4, r5, r6, lr}
   180ce:	4616      	mov	r6, r2
   180d0:	4604      	mov	r4, r0
   180d2:	460d      	mov	r5, r1
	tx_notify(conn);
   180d4:	f013 f8ba 	bl	2b24c <tx_notify>
	switch (flags) {
   180d8:	2e01      	cmp	r6, #1
   180da:	d02e      	beq.n	1813a <bt_conn_recv+0x6e>
   180dc:	2e02      	cmp	r6, #2
   180de:	d164      	bne.n	181aa <bt_conn_recv+0xde>
		if (conn->rx) {
   180e0:	6923      	ldr	r3, [r4, #16]
   180e2:	b163      	cbz	r3, 180fe <bt_conn_recv+0x32>
   180e4:	4b3c      	ldr	r3, [pc, #240]	; (181d8 <bt_conn_recv+0x10c>)
   180e6:	493d      	ldr	r1, [pc, #244]	; (181dc <bt_conn_recv+0x110>)
			BT_ERR("Unexpected first L2CAP frame");
   180e8:	483d      	ldr	r0, [pc, #244]	; (181e0 <bt_conn_recv+0x114>)
   180ea:	1ac9      	subs	r1, r1, r3
   180ec:	08c9      	lsrs	r1, r1, #3
   180ee:	0189      	lsls	r1, r1, #6
   180f0:	f041 0101 	orr.w	r1, r1, #1
   180f4:	f010 fd5b 	bl	28bae <log_0>
			bt_conn_reset_rx_state(conn);
   180f8:	4620      	mov	r0, r4
   180fa:	f013 f8cd 	bl	2b298 <bt_conn_reset_rx_state>
		conn->rx = buf;
   180fe:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   18100:	6923      	ldr	r3, [r4, #16]
   18102:	8999      	ldrh	r1, [r3, #12]
   18104:	2901      	cmp	r1, #1
   18106:	d965      	bls.n	181d4 <bt_conn_recv+0x108>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   18108:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1810a:	7845      	ldrb	r5, [r0, #1]
   1810c:	7802      	ldrb	r2, [r0, #0]
   1810e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   18112:	3204      	adds	r2, #4
   18114:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   18116:	4291      	cmp	r1, r2
   18118:	d35c      	bcc.n	181d4 <bt_conn_recv+0x108>
	if (conn->rx->len > acl_total_len) {
   1811a:	d952      	bls.n	181c2 <bt_conn_recv+0xf6>
   1811c:	482e      	ldr	r0, [pc, #184]	; (181d8 <bt_conn_recv+0x10c>)
   1811e:	4b2f      	ldr	r3, [pc, #188]	; (181dc <bt_conn_recv+0x110>)
   18120:	1a1b      	subs	r3, r3, r0
   18122:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   18124:	019b      	lsls	r3, r3, #6
   18126:	482f      	ldr	r0, [pc, #188]	; (181e4 <bt_conn_recv+0x118>)
   18128:	f043 0301 	orr.w	r3, r3, #1
   1812c:	f010 fd60 	bl	28bf0 <log_2>
		bt_conn_reset_rx_state(conn);
   18130:	4620      	mov	r0, r4
}
   18132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   18136:	f013 b8af 	b.w	2b298 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1813a:	6920      	ldr	r0, [r4, #16]
   1813c:	b968      	cbnz	r0, 1815a <bt_conn_recv+0x8e>
   1813e:	4927      	ldr	r1, [pc, #156]	; (181dc <bt_conn_recv+0x110>)
   18140:	4b25      	ldr	r3, [pc, #148]	; (181d8 <bt_conn_recv+0x10c>)
			BT_ERR("Unexpected L2CAP continuation");
   18142:	4829      	ldr	r0, [pc, #164]	; (181e8 <bt_conn_recv+0x11c>)
   18144:	1ac9      	subs	r1, r1, r3
   18146:	08c9      	lsrs	r1, r1, #3
   18148:	0189      	lsls	r1, r1, #6
   1814a:	f041 0101 	orr.w	r1, r1, #1
   1814e:	f010 fd2e 	bl	28bae <log_0>
		bt_conn_reset_rx_state(conn);
   18152:	4620      	mov	r0, r4
   18154:	f013 f8a0 	bl	2b298 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   18158:	e001      	b.n	1815e <bt_conn_recv+0x92>
		if (!buf->len) {
   1815a:	89ae      	ldrh	r6, [r5, #12]
   1815c:	b926      	cbnz	r6, 18168 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   1815e:	4628      	mov	r0, r5
}
   18160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   18164:	f005 bca4 	b.w	1dab0 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18168:	3008      	adds	r0, #8
   1816a:	f014 fc29 	bl	2c9c0 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1816e:	4286      	cmp	r6, r0
   18170:	d911      	bls.n	18196 <bt_conn_recv+0xca>
   18172:	4b19      	ldr	r3, [pc, #100]	; (181d8 <bt_conn_recv+0x10c>)
   18174:	4919      	ldr	r1, [pc, #100]	; (181dc <bt_conn_recv+0x110>)
			BT_ERR("Not enough buffer space for L2CAP data");
   18176:	481d      	ldr	r0, [pc, #116]	; (181ec <bt_conn_recv+0x120>)
   18178:	1ac9      	subs	r1, r1, r3
   1817a:	08c9      	lsrs	r1, r1, #3
   1817c:	0189      	lsls	r1, r1, #6
   1817e:	f041 0101 	orr.w	r1, r1, #1
   18182:	f010 fd14 	bl	28bae <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   18186:	6921      	ldr	r1, [r4, #16]
   18188:	2200      	movs	r2, #0
   1818a:	4620      	mov	r0, r4
   1818c:	f000 ff1a 	bl	18fc4 <bt_l2cap_recv>
			conn->rx = NULL;
   18190:	2300      	movs	r3, #0
   18192:	6123      	str	r3, [r4, #16]
   18194:	e7e3      	b.n	1815e <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18196:	6920      	ldr	r0, [r4, #16]
   18198:	89aa      	ldrh	r2, [r5, #12]
   1819a:	68a9      	ldr	r1, [r5, #8]
   1819c:	3008      	adds	r0, #8
   1819e:	f014 fc17 	bl	2c9d0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   181a2:	4628      	mov	r0, r5
   181a4:	f005 fc84 	bl	1dab0 <net_buf_unref>
		break;
   181a8:	e7aa      	b.n	18100 <bt_conn_recv+0x34>
   181aa:	4a0b      	ldr	r2, [pc, #44]	; (181d8 <bt_conn_recv+0x10c>)
   181ac:	4b0b      	ldr	r3, [pc, #44]	; (181dc <bt_conn_recv+0x110>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   181ae:	4810      	ldr	r0, [pc, #64]	; (181f0 <bt_conn_recv+0x124>)
   181b0:	1a9b      	subs	r3, r3, r2
   181b2:	08db      	lsrs	r3, r3, #3
   181b4:	019b      	lsls	r3, r3, #6
   181b6:	f043 0201 	orr.w	r2, r3, #1
   181ba:	4631      	mov	r1, r6
   181bc:	f010 fd04 	bl	28bc8 <log_1>
   181c0:	e7c7      	b.n	18152 <bt_conn_recv+0x86>
	conn->rx = NULL;
   181c2:	2200      	movs	r2, #0
   181c4:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   181c6:	4620      	mov	r0, r4
   181c8:	2201      	movs	r2, #1
}
   181ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   181ce:	4619      	mov	r1, r3
   181d0:	f000 bef8 	b.w	18fc4 <bt_l2cap_recv>
}
   181d4:	bd70      	pop	{r4, r5, r6, pc}
   181d6:	bf00      	nop
   181d8:	0002d948 	.word	0x0002d948
   181dc:	0002d960 	.word	0x0002d960
   181e0:	000308b2 	.word	0x000308b2
   181e4:	00030932 	.word	0x00030932
   181e8:	000308cf 	.word	0x000308cf
   181ec:	000308ed 	.word	0x000308ed
   181f0:	00030914 	.word	0x00030914

000181f4 <bt_conn_send_cb>:
{
   181f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181f8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   181fa:	7b43      	ldrb	r3, [r0, #13]
   181fc:	2b07      	cmp	r3, #7
{
   181fe:	4605      	mov	r5, r0
   18200:	460e      	mov	r6, r1
   18202:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   18204:	d00c      	beq.n	18220 <bt_conn_send_cb+0x2c>
   18206:	4926      	ldr	r1, [pc, #152]	; (182a0 <bt_conn_send_cb+0xac>)
   18208:	4b26      	ldr	r3, [pc, #152]	; (182a4 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   1820a:	4827      	ldr	r0, [pc, #156]	; (182a8 <bt_conn_send_cb+0xb4>)
   1820c:	1ac9      	subs	r1, r1, r3
   1820e:	08c9      	lsrs	r1, r1, #3
   18210:	0189      	lsls	r1, r1, #6
   18212:	f041 0101 	orr.w	r1, r1, #1
   18216:	f010 fcca 	bl	28bae <log_0>
			return -ENOTCONN;
   1821a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1821e:	e01d      	b.n	1825c <bt_conn_send_cb+0x68>
	if (cb) {
   18220:	2a00      	cmp	r2, #0
   18222:	d03a      	beq.n	1829a <bt_conn_send_cb+0xa6>
	return z_impl_z_current_get();
   18224:	f00c fb48 	bl	248b8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18228:	4b20      	ldr	r3, [pc, #128]	; (182ac <bt_conn_send_cb+0xb8>)
   1822a:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1822c:	4820      	ldr	r0, [pc, #128]	; (182b0 <bt_conn_send_cb+0xbc>)
   1822e:	bf07      	ittee	eq
   18230:	2200      	moveq	r2, #0
   18232:	2300      	moveq	r3, #0
   18234:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   18238:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1823c:	f00a fba0 	bl	22980 <z_impl_k_queue_get>
   18240:	4604      	mov	r4, r0
		if (!tx) {
   18242:	b968      	cbnz	r0, 18260 <bt_conn_send_cb+0x6c>
   18244:	4b17      	ldr	r3, [pc, #92]	; (182a4 <bt_conn_send_cb+0xb0>)
   18246:	4916      	ldr	r1, [pc, #88]	; (182a0 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   18248:	481a      	ldr	r0, [pc, #104]	; (182b4 <bt_conn_send_cb+0xc0>)
   1824a:	1ac9      	subs	r1, r1, r3
   1824c:	08c9      	lsrs	r1, r1, #3
   1824e:	0189      	lsls	r1, r1, #6
   18250:	f041 0101 	orr.w	r1, r1, #1
   18254:	f010 fcab 	bl	28bae <log_0>
			return -ENOBUFS;
   18258:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1825c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   18260:	7b6b      	ldrb	r3, [r5, #13]
   18262:	2b07      	cmp	r3, #7
   18264:	d00d      	beq.n	18282 <bt_conn_send_cb+0x8e>
   18266:	4b0f      	ldr	r3, [pc, #60]	; (182a4 <bt_conn_send_cb+0xb0>)
   18268:	490d      	ldr	r1, [pc, #52]	; (182a0 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   1826a:	4813      	ldr	r0, [pc, #76]	; (182b8 <bt_conn_send_cb+0xc4>)
   1826c:	1ac9      	subs	r1, r1, r3
   1826e:	08c9      	lsrs	r1, r1, #3
   18270:	0189      	lsls	r1, r1, #6
   18272:	f041 0102 	orr.w	r1, r1, #2
   18276:	f010 fc9a 	bl	28bae <log_0>
			tx_free(tx);
   1827a:	4620      	mov	r0, r4
   1827c:	f7ff fdaa 	bl	17dd4 <tx_free>
   18280:	e7cb      	b.n	1821a <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   18282:	2300      	movs	r3, #0
		tx->user_data = user_data;
   18284:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   18288:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1828a:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1828c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   18290:	4631      	mov	r1, r6
   18292:	f005 fbd9 	bl	1da48 <net_buf_put>
	return 0;
   18296:	2000      	movs	r0, #0
   18298:	e7e0      	b.n	1825c <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   1829a:	614a      	str	r2, [r1, #20]
   1829c:	e7f6      	b.n	1828c <bt_conn_send_cb+0x98>
   1829e:	bf00      	nop
   182a0:	0002d960 	.word	0x0002d960
   182a4:	0002d948 	.word	0x0002d948
   182a8:	0003094d 	.word	0x0003094d
   182ac:	20002278 	.word	0x20002278
   182b0:	2000098c 	.word	0x2000098c
   182b4:	0003095c 	.word	0x0003095c
   182b8:	0003097a 	.word	0x0003097a

000182bc <bt_conn_prepare_events>:
{
   182bc:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   182be:	4b1b      	ldr	r3, [pc, #108]	; (1832c <bt_conn_prepare_events+0x70>)
   182c0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   182c2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   182c4:	609a      	str	r2, [r3, #8]
{
   182c6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   182c8:	f00d fae4 	bl	25894 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   182cc:	f3bf 8f5b 	dmb	ish
   182d0:	4b17      	ldr	r3, [pc, #92]	; (18330 <bt_conn_prepare_events+0x74>)
   182d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   182d6:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   182da:	f104 0014 	add.w	r0, r4, #20
   182de:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   182e0:	b90a      	cbnz	r2, 182e6 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   182e2:	2001      	movs	r0, #1
}
   182e4:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   182e6:	7b5a      	ldrb	r2, [r3, #13]
   182e8:	b99a      	cbnz	r2, 18312 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   182ea:	f3bf 8f5b 	dmb	ish
   182ee:	1d1a      	adds	r2, r3, #4
   182f0:	e852 5f00 	ldrex	r5, [r2]
   182f4:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   182f8:	e842 ce00 	strex	lr, ip, [r2]
   182fc:	f1be 0f00 	cmp.w	lr, #0
   18300:	d1f6      	bne.n	182f0 <bt_conn_prepare_events+0x34>
   18302:	f3bf 8f5b 	dmb	ish
   18306:	066a      	lsls	r2, r5, #25
   18308:	d503      	bpl.n	18312 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   1830a:	4618      	mov	r0, r3
   1830c:	f7ff fe96 	bl	1803c <conn_cleanup>
   18310:	e7e7      	b.n	182e2 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   18312:	7b4b      	ldrb	r3, [r1, #13]
   18314:	2b07      	cmp	r3, #7
   18316:	d1e4      	bne.n	182e2 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   18318:	4b06      	ldr	r3, [pc, #24]	; (18334 <bt_conn_prepare_events+0x78>)
   1831a:	2200      	movs	r2, #0
   1831c:	2104      	movs	r1, #4
   1831e:	f00d fab9 	bl	25894 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   18322:	2301      	movs	r3, #1
   18324:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   18328:	2002      	movs	r0, #2
	return ev_count;
   1832a:	e7db      	b.n	182e4 <bt_conn_prepare_events+0x28>
   1832c:	20000508 	.word	0x20000508
   18330:	200019d8 	.word	0x200019d8
   18334:	20001a10 	.word	0x20001a10

00018338 <bt_conn_unref>:
{
   18338:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   1833a:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
{
   1833e:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18340:	f3bf 8f5b 	dmb	ish
   18344:	e853 2f00 	ldrex	r2, [r3]
   18348:	1e51      	subs	r1, r2, #1
   1834a:	e843 1000 	strex	r0, r1, [r3]
   1834e:	2800      	cmp	r0, #0
   18350:	d1f8      	bne.n	18344 <bt_conn_unref+0xc>
   18352:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   18356:	2a00      	cmp	r2, #0
   18358:	dc0e      	bgt.n	18378 <bt_conn_unref+0x40>
   1835a:	490f      	ldr	r1, [pc, #60]	; (18398 <bt_conn_unref+0x60>)
   1835c:	4a0f      	ldr	r2, [pc, #60]	; (1839c <bt_conn_unref+0x64>)
   1835e:	4810      	ldr	r0, [pc, #64]	; (183a0 <bt_conn_unref+0x68>)
   18360:	f240 434e 	movw	r3, #1102	; 0x44e
   18364:	f010 fa04 	bl	28770 <printk>
   18368:	480e      	ldr	r0, [pc, #56]	; (183a4 <bt_conn_unref+0x6c>)
   1836a:	f010 fa01 	bl	28770 <printk>
   1836e:	480b      	ldr	r0, [pc, #44]	; (1839c <bt_conn_unref+0x64>)
   18370:	f240 414e 	movw	r1, #1102	; 0x44e
   18374:	f010 fbed 	bl	28b52 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   18378:	78a3      	ldrb	r3, [r4, #2]
   1837a:	2b01      	cmp	r3, #1
   1837c:	d10a      	bne.n	18394 <bt_conn_unref+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1837e:	f3bf 8f5b 	dmb	ish
   18382:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   18386:	f3bf 8f5b 	dmb	ish
   1838a:	b91b      	cbnz	r3, 18394 <bt_conn_unref+0x5c>
}
   1838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   18390:	f7ff bb84 	b.w	17a9c <bt_le_adv_resume>
}
   18394:	bd10      	pop	{r4, pc}
   18396:	bf00      	nop
   18398:	000309a0 	.word	0x000309a0
   1839c:	00030800 	.word	0x00030800
   183a0:	0002e915 	.word	0x0002e915
   183a4:	000309a8 	.word	0x000309a8

000183a8 <bt_conn_lookup_handle>:
{
   183a8:	4602      	mov	r2, r0
   183aa:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   183ac:	2101      	movs	r1, #1
   183ae:	4803      	ldr	r0, [pc, #12]	; (183bc <bt_conn_lookup_handle+0x14>)
   183b0:	f012 ff96 	bl	2b2e0 <conn_lookup_handle>
}
   183b4:	2800      	cmp	r0, #0
   183b6:	bf38      	it	cc
   183b8:	2000      	movcc	r0, #0
   183ba:	bd08      	pop	{r3, pc}
   183bc:	200019d8 	.word	0x200019d8

000183c0 <bt_conn_set_state>:
{
   183c0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   183c2:	7b46      	ldrb	r6, [r0, #13]
   183c4:	428e      	cmp	r6, r1
{
   183c6:	4604      	mov	r4, r0
   183c8:	460d      	mov	r5, r1
	if (conn->state == state) {
   183ca:	d112      	bne.n	183f2 <bt_conn_set_state+0x32>
   183cc:	4b66      	ldr	r3, [pc, #408]	; (18568 <bt_conn_set_state+0x1a8>)
   183ce:	4a67      	ldr	r2, [pc, #412]	; (1856c <bt_conn_set_state+0x1ac>)
		BT_WARN("no transition %s", state2str(state));
   183d0:	4867      	ldr	r0, [pc, #412]	; (18570 <bt_conn_set_state+0x1b0>)
   183d2:	2e08      	cmp	r6, #8
   183d4:	eba2 0203 	sub.w	r2, r2, r3
   183d8:	bf96      	itet	ls
   183da:	4b66      	ldrls	r3, [pc, #408]	; (18574 <bt_conn_set_state+0x1b4>)
   183dc:	4966      	ldrhi	r1, [pc, #408]	; (18578 <bt_conn_set_state+0x1b8>)
   183de:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   183e2:	08d2      	lsrs	r2, r2, #3
   183e4:	0192      	lsls	r2, r2, #6
   183e6:	f042 0202 	orr.w	r2, r2, #2
}
   183ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   183ee:	f010 bbeb 	b.w	28bc8 <log_1>
	conn->state = state;
   183f2:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   183f4:	b926      	cbnz	r6, 18400 <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
   183f6:	7883      	ldrb	r3, [r0, #2]
   183f8:	2b08      	cmp	r3, #8
   183fa:	d001      	beq.n	18400 <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
   183fc:	f012 ff55 	bl	2b2aa <bt_conn_ref>
	switch (conn->state) {
   18400:	7b63      	ldrb	r3, [r4, #13]
   18402:	2b08      	cmp	r3, #8
   18404:	f200 80a5 	bhi.w	18552 <bt_conn_set_state+0x192>
   18408:	e8df f003 	tbb	[pc, r3]
   1840c:	adad0537 	.word	0xadad0537
   18410:	1cadadad 	.word	0x1cadadad
   18414:	ad          	.byte	0xad
   18415:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   18416:	4d59      	ldr	r5, [pc, #356]	; (1857c <bt_conn_set_state+0x1bc>)
		tx->pending_no_cb = 0U;
   18418:	2600      	movs	r6, #0
	__asm__ volatile(
   1841a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1841e:	f3ef 8211 	mrs	r2, BASEPRI
   18422:	f383 8812 	msr	BASEPRI_MAX, r3
   18426:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1842a:	69e3      	ldr	r3, [r4, #28]
   1842c:	2b00      	cmp	r3, #0
   1842e:	d071      	beq.n	18514 <bt_conn_set_state+0x154>
			conn->pending_no_cb--;
   18430:	3b01      	subs	r3, #1
   18432:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   18434:	f382 8811 	msr	BASEPRI, r2
   18438:	f3bf 8f6f 	isb	sy
   1843c:	4628      	mov	r0, r5
   1843e:	f00a fb0b 	bl	22a58 <z_impl_k_sem_give>
}
   18442:	e7ea      	b.n	1841a <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18444:	78a3      	ldrb	r3, [r4, #2]
   18446:	2b04      	cmp	r3, #4
   18448:	f000 808d 	beq.w	18566 <bt_conn_set_state+0x1a6>
	z_impl_k_queue_init(queue);
   1844c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18450:	f014 ff3d 	bl	2d2ce <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   18454:	484a      	ldr	r0, [pc, #296]	; (18580 <bt_conn_set_state+0x1c0>)
   18456:	2100      	movs	r1, #0
   18458:	f00d fb78 	bl	25b4c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1845c:	2300      	movs	r3, #0
	list->tail = NULL;
   1845e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18462:	78e3      	ldrb	r3, [r4, #3]
   18464:	2b01      	cmp	r3, #1
   18466:	d17e      	bne.n	18566 <bt_conn_set_state+0x1a6>
			k_work_schedule(&conn->deferred_work,
   18468:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1846c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   18470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   18474:	2300      	movs	r3, #0
   18476:	f00a bfaf 	b.w	233d8 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1847a:	78a3      	ldrb	r3, [r4, #2]
   1847c:	2b04      	cmp	r3, #4
   1847e:	d104      	bne.n	1848a <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
   18480:	4620      	mov	r0, r4
}
   18482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   18486:	f7ff bf57 	b.w	18338 <bt_conn_unref>
		switch (old_state) {
   1848a:	2e08      	cmp	r6, #8
   1848c:	d86b      	bhi.n	18566 <bt_conn_set_state+0x1a6>
   1848e:	a301      	add	r3, pc, #4	; (adr r3, 18494 <bt_conn_set_state+0xd4>)
   18490:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18494:	00018501 	.word	0x00018501
   18498:	000184b9 	.word	0x000184b9
   1849c:	000184f3 	.word	0x000184f3
   184a0:	00018481 	.word	0x00018481
   184a4:	00018481 	.word	0x00018481
   184a8:	000184f3 	.word	0x000184f3
   184ac:	000184f3 	.word	0x000184f3
   184b0:	00018501 	.word	0x00018501
   184b4:	00018501 	.word	0x00018501
			tx_notify(conn);
   184b8:	4620      	mov	r0, r4
   184ba:	f012 fec7 	bl	2b24c <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   184be:	78a3      	ldrb	r3, [r4, #2]
   184c0:	2b01      	cmp	r3, #1
   184c2:	d103      	bne.n	184cc <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
   184c4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   184c8:	f00b f808 	bl	234dc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   184cc:	f3bf 8f5b 	dmb	ish
   184d0:	3404      	adds	r4, #4
   184d2:	e854 3f00 	ldrex	r3, [r4]
   184d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   184da:	e844 3200 	strex	r2, r3, [r4]
   184de:	2a00      	cmp	r2, #0
   184e0:	d1f7      	bne.n	184d2 <bt_conn_set_state+0x112>
   184e2:	f3bf 8f5b 	dmb	ish
   184e6:	4826      	ldr	r0, [pc, #152]	; (18580 <bt_conn_set_state+0x1c0>)
}
   184e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   184ec:	2100      	movs	r1, #0
   184ee:	f00d bb2d 	b.w	25b4c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   184f2:	7b23      	ldrb	r3, [r4, #12]
   184f4:	2b00      	cmp	r3, #0
   184f6:	d0c3      	beq.n	18480 <bt_conn_set_state+0xc0>
				notify_connected(conn);
   184f8:	4620      	mov	r0, r4
   184fa:	f7ff fc75 	bl	17de8 <notify_connected>
   184fe:	e7bf      	b.n	18480 <bt_conn_set_state+0xc0>
   18500:	4a1a      	ldr	r2, [pc, #104]	; (1856c <bt_conn_set_state+0x1ac>)
   18502:	4b19      	ldr	r3, [pc, #100]	; (18568 <bt_conn_set_state+0x1a8>)
			BT_WARN("Invalid (%u) old state", state);
   18504:	481f      	ldr	r0, [pc, #124]	; (18584 <bt_conn_set_state+0x1c4>)
   18506:	1ad2      	subs	r2, r2, r3
   18508:	08d2      	lsrs	r2, r2, #3
   1850a:	0192      	lsls	r2, r2, #6
   1850c:	f042 0202 	orr.w	r2, r2, #2
   18510:	4629      	mov	r1, r5
   18512:	e76a      	b.n	183ea <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   18514:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   18516:	b128      	cbz	r0, 18524 <bt_conn_set_state+0x164>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18518:	69a1      	ldr	r1, [r4, #24]
   1851a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1851c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1851e:	4288      	cmp	r0, r1
	list->tail = node;
   18520:	bf08      	it	eq
   18522:	61a3      	streq	r3, [r4, #24]
   18524:	f382 8811 	msr	BASEPRI, r2
   18528:	f3bf 8f6f 	isb	sy
		if (!node) {
   1852c:	b1d8      	cbz	r0, 18566 <bt_conn_set_state+0x1a6>
	__asm__ volatile(
   1852e:	f04f 0240 	mov.w	r2, #64	; 0x40
   18532:	f3ef 8311 	mrs	r3, BASEPRI
   18536:	f382 8812 	msr	BASEPRI_MAX, r2
   1853a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1853e:	68c2      	ldr	r2, [r0, #12]
   18540:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   18542:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   18544:	f383 8811 	msr	BASEPRI, r3
   18548:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1854c:	f7ff fc42 	bl	17dd4 <tx_free>
   18550:	e774      	b.n	1843c <bt_conn_set_state+0x7c>
   18552:	4a06      	ldr	r2, [pc, #24]	; (1856c <bt_conn_set_state+0x1ac>)
   18554:	4b04      	ldr	r3, [pc, #16]	; (18568 <bt_conn_set_state+0x1a8>)
		BT_WARN("no valid (%u) state was set", state);
   18556:	480c      	ldr	r0, [pc, #48]	; (18588 <bt_conn_set_state+0x1c8>)
   18558:	1ad2      	subs	r2, r2, r3
   1855a:	08d2      	lsrs	r2, r2, #3
   1855c:	0192      	lsls	r2, r2, #6
   1855e:	f042 0202 	orr.w	r2, r2, #2
   18562:	4629      	mov	r1, r5
   18564:	e741      	b.n	183ea <bt_conn_set_state+0x2a>
}
   18566:	bd70      	pop	{r4, r5, r6, pc}
   18568:	0002d948 	.word	0x0002d948
   1856c:	0002d960 	.word	0x0002d960
   18570:	000309d0 	.word	0x000309d0
   18574:	0002df44 	.word	0x0002df44
   18578:	000309c6 	.word	0x000309c6
   1857c:	200003b0 	.word	0x200003b0
   18580:	20000508 	.word	0x20000508
   18584:	000309e1 	.word	0x000309e1
   18588:	000309f8 	.word	0x000309f8

0001858c <bt_conn_index>:
		index = conn - acl_conns;
   1858c:	4a0c      	ldr	r2, [pc, #48]	; (185c0 <bt_conn_index+0x34>)
{
   1858e:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   18590:	1a84      	subs	r4, r0, r2
   18592:	10e3      	asrs	r3, r4, #3
   18594:	4c0b      	ldr	r4, [pc, #44]	; (185c4 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   18596:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   18598:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1859c:	d00e      	beq.n	185bc <bt_conn_index+0x30>
   1859e:	490a      	ldr	r1, [pc, #40]	; (185c8 <bt_conn_index+0x3c>)
   185a0:	4a0a      	ldr	r2, [pc, #40]	; (185cc <bt_conn_index+0x40>)
   185a2:	480b      	ldr	r0, [pc, #44]	; (185d0 <bt_conn_index+0x44>)
   185a4:	f240 436c 	movw	r3, #1132	; 0x46c
   185a8:	f010 f8e2 	bl	28770 <printk>
   185ac:	4809      	ldr	r0, [pc, #36]	; (185d4 <bt_conn_index+0x48>)
   185ae:	f010 f8df 	bl	28770 <printk>
   185b2:	4806      	ldr	r0, [pc, #24]	; (185cc <bt_conn_index+0x40>)
   185b4:	f240 416c 	movw	r1, #1132	; 0x46c
   185b8:	f010 facb 	bl	28b52 <assert_post_action>
}
   185bc:	b2e0      	uxtb	r0, r4
   185be:	bd10      	pop	{r4, pc}
   185c0:	200019d8 	.word	0x200019d8
   185c4:	c28f5c29 	.word	0xc28f5c29
   185c8:	00030a14 	.word	0x00030a14
   185cc:	00030800 	.word	0x00030800
   185d0:	0002e915 	.word	0x0002e915
   185d4:	00030adb 	.word	0x00030adb

000185d8 <bt_conn_create_pdu_timeout>:
{
   185d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   185da:	4604      	mov	r4, r0
   185dc:	460d      	mov	r5, r1
   185de:	4617      	mov	r7, r2
   185e0:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   185e2:	f014 fe4d 	bl	2d280 <k_is_in_isr>
   185e6:	b158      	cbz	r0, 18600 <bt_conn_create_pdu_timeout+0x28>
   185e8:	4913      	ldr	r1, [pc, #76]	; (18638 <bt_conn_create_pdu_timeout+0x60>)
   185ea:	4814      	ldr	r0, [pc, #80]	; (1863c <bt_conn_create_pdu_timeout+0x64>)
   185ec:	4a14      	ldr	r2, [pc, #80]	; (18640 <bt_conn_create_pdu_timeout+0x68>)
   185ee:	f44f 6391 	mov.w	r3, #1160	; 0x488
   185f2:	f010 f8bd 	bl	28770 <printk>
   185f6:	4812      	ldr	r0, [pc, #72]	; (18640 <bt_conn_create_pdu_timeout+0x68>)
   185f8:	f44f 6191 	mov.w	r1, #1160	; 0x488
   185fc:	f010 faa9 	bl	28b52 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   18600:	4810      	ldr	r0, [pc, #64]	; (18644 <bt_conn_create_pdu_timeout+0x6c>)
   18602:	463a      	mov	r2, r7
   18604:	2c00      	cmp	r4, #0
   18606:	bf18      	it	ne
   18608:	4620      	movne	r0, r4
   1860a:	4633      	mov	r3, r6
   1860c:	f014 f9c7 	bl	2c99e <net_buf_alloc_fixed>
	if (!buf) {
   18610:	4604      	mov	r4, r0
   18612:	b958      	cbnz	r0, 1862c <bt_conn_create_pdu_timeout+0x54>
   18614:	490c      	ldr	r1, [pc, #48]	; (18648 <bt_conn_create_pdu_timeout+0x70>)
   18616:	4b0d      	ldr	r3, [pc, #52]	; (1864c <bt_conn_create_pdu_timeout+0x74>)
		BT_WARN("Unable to allocate buffer within timeout");
   18618:	480d      	ldr	r0, [pc, #52]	; (18650 <bt_conn_create_pdu_timeout+0x78>)
   1861a:	1ac9      	subs	r1, r1, r3
   1861c:	08c9      	lsrs	r1, r1, #3
   1861e:	0189      	lsls	r1, r1, #6
   18620:	f041 0102 	orr.w	r1, r1, #2
   18624:	f010 fac3 	bl	28bae <log_0>
}
   18628:	4620      	mov	r0, r4
   1862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1862c:	1d29      	adds	r1, r5, #4
   1862e:	3008      	adds	r0, #8
   18630:	f005 f9e0 	bl	1d9f4 <net_buf_simple_reserve>
	return buf;
   18634:	e7f8      	b.n	18628 <bt_conn_create_pdu_timeout+0x50>
   18636:	bf00      	nop
   18638:	00030af5 	.word	0x00030af5
   1863c:	0002e915 	.word	0x0002e915
   18640:	00030800 	.word	0x00030800
   18644:	200009a8 	.word	0x200009a8
   18648:	0002d960 	.word	0x0002d960
   1864c:	0002d948 	.word	0x0002d948
   18650:	00030b04 	.word	0x00030b04

00018654 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   18654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18658:	f3bf 8f5b 	dmb	ish
   1865c:	6842      	ldr	r2, [r0, #4]
   1865e:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18662:	0592      	lsls	r2, r2, #22
{
   18664:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18666:	f100 0304 	add.w	r3, r0, #4
   1866a:	d519      	bpl.n	186a0 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
   1866c:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18670:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   18674:	4291      	cmp	r1, r2
   18676:	d813      	bhi.n	186a0 <notify_le_param_updated+0x4c>
	    conn->le.interval >= conn->le.interval_min &&
   18678:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   1867c:	4291      	cmp	r1, r2
   1867e:	d30f      	bcc.n	186a0 <notify_le_param_updated+0x4c>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   18680:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   18684:	4291      	cmp	r1, r2
   18686:	d10b      	bne.n	186a0 <notify_le_param_updated+0x4c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18688:	f3bf 8f5b 	dmb	ish
   1868c:	e853 2f00 	ldrex	r2, [r3]
   18690:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   18694:	e843 2100 	strex	r1, r2, [r3]
   18698:	2900      	cmp	r1, #0
   1869a:	d1f7      	bne.n	1868c <notify_le_param_updated+0x38>
   1869c:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   186a0:	4b1b      	ldr	r3, [pc, #108]	; (18710 <notify_le_param_updated+0xbc>)
   186a2:	681d      	ldr	r5, [r3, #0]
   186a4:	b9c5      	cbnz	r5, 186d8 <notify_le_param_updated+0x84>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   186a6:	4e1b      	ldr	r6, [pc, #108]	; (18714 <notify_le_param_updated+0xc0>)
   186a8:	4d1b      	ldr	r5, [pc, #108]	; (18718 <notify_le_param_updated+0xc4>)
   186aa:	4f1c      	ldr	r7, [pc, #112]	; (1871c <notify_le_param_updated+0xc8>)
   186ac:	46b1      	mov	r9, r6
   186ae:	42b5      	cmp	r5, r6
   186b0:	d90e      	bls.n	186d0 <notify_le_param_updated+0x7c>
   186b2:	491b      	ldr	r1, [pc, #108]	; (18720 <notify_le_param_updated+0xcc>)
   186b4:	481b      	ldr	r0, [pc, #108]	; (18724 <notify_le_param_updated+0xd0>)
   186b6:	f240 535f 	movw	r3, #1375	; 0x55f
   186ba:	463a      	mov	r2, r7
   186bc:	f010 f858 	bl	28770 <printk>
   186c0:	4819      	ldr	r0, [pc, #100]	; (18728 <notify_le_param_updated+0xd4>)
   186c2:	f010 f855 	bl	28770 <printk>
   186c6:	f240 515f 	movw	r1, #1375	; 0x55f
   186ca:	4638      	mov	r0, r7
   186cc:	f010 fa41 	bl	28b52 <assert_post_action>
   186d0:	454d      	cmp	r5, r9
   186d2:	d30d      	bcc.n	186f0 <notify_le_param_updated+0x9c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   186d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   186d8:	68ee      	ldr	r6, [r5, #12]
   186da:	b13e      	cbz	r6, 186ec <notify_le_param_updated+0x98>
			cb->le_param_updated(conn, conn->le.interval,
   186dc:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   186e0:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   186e4:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   186e8:	4620      	mov	r0, r4
   186ea:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   186ec:	69ad      	ldr	r5, [r5, #24]
   186ee:	e7d9      	b.n	186a4 <notify_le_param_updated+0x50>
		if (cb->le_param_updated) {
   186f0:	f8d5 800c 	ldr.w	r8, [r5, #12]
   186f4:	f1b8 0f00 	cmp.w	r8, #0
   186f8:	d007      	beq.n	1870a <notify_le_param_updated+0xb6>
			cb->le_param_updated(conn, conn->le.interval,
   186fa:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   186fe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18702:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18706:	4620      	mov	r0, r4
   18708:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1870a:	351c      	adds	r5, #28
   1870c:	e7cf      	b.n	186ae <notify_le_param_updated+0x5a>
   1870e:	bf00      	nop
   18710:	200029dc 	.word	0x200029dc
   18714:	0002d8b8 	.word	0x0002d8b8
   18718:	0002d89c 	.word	0x0002d89c
   1871c:	00030800 	.word	0x00030800
   18720:	00030830 	.word	0x00030830
   18724:	0002e915 	.word	0x0002e915
   18728:	0002f2e8 	.word	0x0002f2e8

0001872c <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18730:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   18732:	4608      	mov	r0, r1
{
   18734:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   18736:	f012 fbc1 	bl	2aebc <bt_le_conn_params_valid>
   1873a:	4605      	mov	r5, r0
   1873c:	b918      	cbnz	r0, 18746 <le_param_req+0x1a>
		return false;
   1873e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   18740:	4628      	mov	r0, r5
   18742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18746:	4b1d      	ldr	r3, [pc, #116]	; (187bc <le_param_req+0x90>)
   18748:	681e      	ldr	r6, [r3, #0]
   1874a:	b9e6      	cbnz	r6, 18786 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1874c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 187d0 <le_param_req+0xa4>
   18750:	4e1b      	ldr	r6, [pc, #108]	; (187c0 <le_param_req+0x94>)
   18752:	f8df 9080 	ldr.w	r9, [pc, #128]	; 187d4 <le_param_req+0xa8>
   18756:	46c2      	mov	sl, r8
   18758:	4546      	cmp	r6, r8
   1875a:	d90e      	bls.n	1877a <le_param_req+0x4e>
   1875c:	4919      	ldr	r1, [pc, #100]	; (187c4 <le_param_req+0x98>)
   1875e:	481a      	ldr	r0, [pc, #104]	; (187c8 <le_param_req+0x9c>)
   18760:	f240 53a7 	movw	r3, #1447	; 0x5a7
   18764:	464a      	mov	r2, r9
   18766:	f010 f803 	bl	28770 <printk>
   1876a:	4818      	ldr	r0, [pc, #96]	; (187cc <le_param_req+0xa0>)
   1876c:	f010 f800 	bl	28770 <printk>
   18770:	f240 51a7 	movw	r1, #1447	; 0x5a7
   18774:	4648      	mov	r0, r9
   18776:	f010 f9ec 	bl	28b52 <assert_post_action>
   1877a:	4556      	cmp	r6, sl
   1877c:	d2e0      	bcs.n	18740 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1877e:	68b3      	ldr	r3, [r6, #8]
   18780:	b983      	cbnz	r3, 187a4 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18782:	361c      	adds	r6, #28
   18784:	e7e8      	b.n	18758 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   18786:	68b3      	ldr	r3, [r6, #8]
   18788:	b90b      	cbnz	r3, 1878e <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   1878a:	69b6      	ldr	r6, [r6, #24]
   1878c:	e7dd      	b.n	1874a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1878e:	4621      	mov	r1, r4
   18790:	4638      	mov	r0, r7
   18792:	4798      	blx	r3
   18794:	2800      	cmp	r0, #0
   18796:	d0d2      	beq.n	1873e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18798:	4620      	mov	r0, r4
   1879a:	f012 fb8f 	bl	2aebc <bt_le_conn_params_valid>
   1879e:	2800      	cmp	r0, #0
   187a0:	d1f3      	bne.n	1878a <le_param_req+0x5e>
   187a2:	e7cc      	b.n	1873e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   187a4:	4621      	mov	r1, r4
   187a6:	4638      	mov	r0, r7
   187a8:	4798      	blx	r3
   187aa:	2800      	cmp	r0, #0
   187ac:	d0c7      	beq.n	1873e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   187ae:	4620      	mov	r0, r4
   187b0:	f012 fb84 	bl	2aebc <bt_le_conn_params_valid>
   187b4:	2800      	cmp	r0, #0
   187b6:	d1e4      	bne.n	18782 <le_param_req+0x56>
   187b8:	e7c1      	b.n	1873e <le_param_req+0x12>
   187ba:	bf00      	nop
   187bc:	200029dc 	.word	0x200029dc
   187c0:	0002d89c 	.word	0x0002d89c
   187c4:	00030830 	.word	0x00030830
   187c8:	0002e915 	.word	0x0002e915
   187cc:	0002f2e8 	.word	0x0002f2e8
   187d0:	0002d8b8 	.word	0x0002d8b8
   187d4:	00030800 	.word	0x00030800

000187d8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   187d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   187dc:	78c3      	ldrb	r3, [r0, #3]
{
   187de:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   187e0:	bb03      	cbnz	r3, 18824 <bt_conn_identity_resolved+0x4c>
		rpa = &conn->le.resp_addr;
   187e2:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   187e6:	4b19      	ldr	r3, [pc, #100]	; (1884c <bt_conn_identity_resolved+0x74>)
   187e8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   187ea:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   187ee:	b9e5      	cbnz	r5, 1882a <bt_conn_identity_resolved+0x52>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   187f0:	4f17      	ldr	r7, [pc, #92]	; (18850 <bt_conn_identity_resolved+0x78>)
   187f2:	4d18      	ldr	r5, [pc, #96]	; (18854 <bt_conn_identity_resolved+0x7c>)
   187f4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 18864 <bt_conn_identity_resolved+0x8c>
   187f8:	46b9      	mov	r9, r7
   187fa:	42bd      	cmp	r5, r7
   187fc:	d90e      	bls.n	1881c <bt_conn_identity_resolved+0x44>
   187fe:	4916      	ldr	r1, [pc, #88]	; (18858 <bt_conn_identity_resolved+0x80>)
   18800:	4816      	ldr	r0, [pc, #88]	; (1885c <bt_conn_identity_resolved+0x84>)
   18802:	f240 7362 	movw	r3, #1890	; 0x762
   18806:	4642      	mov	r2, r8
   18808:	f00f ffb2 	bl	28770 <printk>
   1880c:	4814      	ldr	r0, [pc, #80]	; (18860 <bt_conn_identity_resolved+0x88>)
   1880e:	f00f ffaf 	bl	28770 <printk>
   18812:	f240 7162 	movw	r1, #1890	; 0x762
   18816:	4640      	mov	r0, r8
   18818:	f010 f99b 	bl	28b52 <assert_post_action>
   1881c:	454d      	cmp	r5, r9
   1881e:	d30c      	bcc.n	1883a <bt_conn_identity_resolved+0x62>
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
		}
	}
}
   18820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rpa = &conn->le.init_addr;
   18824:	f100 0697 	add.w	r6, r0, #151	; 0x97
   18828:	e7dd      	b.n	187e6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1882a:	692b      	ldr	r3, [r5, #16]
   1882c:	b11b      	cbz	r3, 18836 <bt_conn_identity_resolved+0x5e>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1882e:	463a      	mov	r2, r7
   18830:	4631      	mov	r1, r6
   18832:	4620      	mov	r0, r4
   18834:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18836:	69ad      	ldr	r5, [r5, #24]
   18838:	e7d9      	b.n	187ee <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1883a:	692b      	ldr	r3, [r5, #16]
   1883c:	b123      	cbz	r3, 18848 <bt_conn_identity_resolved+0x70>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1883e:	f104 0290 	add.w	r2, r4, #144	; 0x90
   18842:	4631      	mov	r1, r6
   18844:	4620      	mov	r0, r4
   18846:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18848:	351c      	adds	r5, #28
   1884a:	e7d6      	b.n	187fa <bt_conn_identity_resolved+0x22>
   1884c:	200029dc 	.word	0x200029dc
   18850:	0002d8b8 	.word	0x0002d8b8
   18854:	0002d89c 	.word	0x0002d89c
   18858:	00030830 	.word	0x00030830
   1885c:	0002e915 	.word	0x0002e915
   18860:	0002f2e8 	.word	0x0002f2e8
   18864:	00030800 	.word	0x00030800

00018868 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   18868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn->required_sec_level = conn->sec_level;
   1886c:	7a43      	ldrb	r3, [r0, #9]
   1886e:	7283      	strb	r3, [r0, #10]
{
   18870:	4604      	mov	r4, r0
   18872:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   18874:	f012 fe53 	bl	2b51e <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   18878:	4b16      	ldr	r3, [pc, #88]	; (188d4 <bt_conn_security_changed+0x6c>)
   1887a:	681d      	ldr	r5, [r3, #0]
   1887c:	b9cd      	cbnz	r5, 188b2 <bt_conn_security_changed+0x4a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1887e:	4f16      	ldr	r7, [pc, #88]	; (188d8 <bt_conn_security_changed+0x70>)
   18880:	4d16      	ldr	r5, [pc, #88]	; (188dc <bt_conn_security_changed+0x74>)
   18882:	f8df 8068 	ldr.w	r8, [pc, #104]	; 188ec <bt_conn_security_changed+0x84>
   18886:	46b9      	mov	r9, r7
   18888:	42bd      	cmp	r5, r7
   1888a:	d90e      	bls.n	188aa <bt_conn_security_changed+0x42>
   1888c:	4914      	ldr	r1, [pc, #80]	; (188e0 <bt_conn_security_changed+0x78>)
   1888e:	4815      	ldr	r0, [pc, #84]	; (188e4 <bt_conn_security_changed+0x7c>)
   18890:	f240 73cb 	movw	r3, #1995	; 0x7cb
   18894:	4642      	mov	r2, r8
   18896:	f00f ff6b 	bl	28770 <printk>
   1889a:	4813      	ldr	r0, [pc, #76]	; (188e8 <bt_conn_security_changed+0x80>)
   1889c:	f00f ff68 	bl	28770 <printk>
   188a0:	f240 71cb 	movw	r1, #1995	; 0x7cb
   188a4:	4640      	mov	r0, r8
   188a6:	f010 f954 	bl	28b52 <assert_post_action>
   188aa:	454d      	cmp	r5, r9
   188ac:	d309      	bcc.n	188c2 <bt_conn_security_changed+0x5a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   188ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->security_changed) {
   188b2:	696b      	ldr	r3, [r5, #20]
   188b4:	b11b      	cbz	r3, 188be <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   188b6:	7a61      	ldrb	r1, [r4, #9]
   188b8:	4632      	mov	r2, r6
   188ba:	4620      	mov	r0, r4
   188bc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   188be:	69ad      	ldr	r5, [r5, #24]
   188c0:	e7dc      	b.n	1887c <bt_conn_security_changed+0x14>
		if (cb->security_changed) {
   188c2:	696b      	ldr	r3, [r5, #20]
   188c4:	b11b      	cbz	r3, 188ce <bt_conn_security_changed+0x66>
			cb->security_changed(conn, conn->sec_level, err);
   188c6:	7a61      	ldrb	r1, [r4, #9]
   188c8:	4632      	mov	r2, r6
   188ca:	4620      	mov	r0, r4
   188cc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   188ce:	351c      	adds	r5, #28
   188d0:	e7da      	b.n	18888 <bt_conn_security_changed+0x20>
   188d2:	bf00      	nop
   188d4:	200029dc 	.word	0x200029dc
   188d8:	0002d8b8 	.word	0x0002d8b8
   188dc:	0002d89c 	.word	0x0002d89c
   188e0:	00030830 	.word	0x00030830
   188e4:	0002e915 	.word	0x0002e915
   188e8:	0002f2e8 	.word	0x0002f2e8
   188ec:	00030800 	.word	0x00030800

000188f0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   188f0:	b570      	push	{r4, r5, r6, lr}
   188f2:	4606      	mov	r6, r0
   188f4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   188f6:	480a      	ldr	r0, [pc, #40]	; (18920 <bt_conn_add_le+0x30>)
   188f8:	2101      	movs	r1, #1
   188fa:	f7ff fb6b 	bl	17fd4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   188fe:	4604      	mov	r4, r0
   18900:	b160      	cbz	r0, 1891c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   18902:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   18904:	2207      	movs	r2, #7
   18906:	4629      	mov	r1, r5
   18908:	3090      	adds	r0, #144	; 0x90
   1890a:	f012 f8c6 	bl	2aa9a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1890e:	2301      	movs	r3, #1
   18910:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   18912:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18914:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18916:	4b03      	ldr	r3, [pc, #12]	; (18924 <bt_conn_add_le+0x34>)
   18918:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1891c:	4620      	mov	r0, r4
   1891e:	bd70      	pop	{r4, r5, r6, pc}
   18920:	200019d8 	.word	0x200019d8
   18924:	00280018 	.word	0x00280018

00018928 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   18928:	b570      	push	{r4, r5, r6, lr}
   1892a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1892c:	480c      	ldr	r0, [pc, #48]	; (18960 <bt_conn_lookup_addr_le+0x38>)
{
   1892e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18930:	f012 fcbb 	bl	2b2aa <bt_conn_ref>

		if (!conn) {
   18934:	4604      	mov	r4, r0
   18936:	b128      	cbz	r0, 18944 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18938:	7883      	ldrb	r3, [r0, #2]
   1893a:	2b01      	cmp	r3, #1
   1893c:	d004      	beq.n	18948 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1893e:	f7ff fcfb 	bl	18338 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18942:	2400      	movs	r4, #0
}
   18944:	4620      	mov	r0, r4
   18946:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   18948:	4629      	mov	r1, r5
   1894a:	4632      	mov	r2, r6
   1894c:	f012 fd4c 	bl	2b3e8 <bt_conn_is_peer_addr_le>
   18950:	4605      	mov	r5, r0
   18952:	2800      	cmp	r0, #0
   18954:	d1f6      	bne.n	18944 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   18956:	4620      	mov	r0, r4
   18958:	f7ff fcee 	bl	18338 <bt_conn_unref>
	return NULL;
   1895c:	462c      	mov	r4, r5
			continue;
   1895e:	e7f1      	b.n	18944 <bt_conn_lookup_addr_le+0x1c>
   18960:	200019d8 	.word	0x200019d8

00018964 <bt_conn_exists_le>:
{
   18964:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   18966:	f7ff ffdf 	bl	18928 <bt_conn_lookup_addr_le>
	if (conn) {
   1896a:	4604      	mov	r4, r0
   1896c:	b1a0      	cbz	r0, 18998 <bt_conn_exists_le+0x34>
   1896e:	4b0b      	ldr	r3, [pc, #44]	; (1899c <bt_conn_exists_le+0x38>)
   18970:	4a0b      	ldr	r2, [pc, #44]	; (189a0 <bt_conn_exists_le+0x3c>)
   18972:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   18974:	7b43      	ldrb	r3, [r0, #13]
   18976:	480b      	ldr	r0, [pc, #44]	; (189a4 <bt_conn_exists_le+0x40>)
   18978:	2b08      	cmp	r3, #8
   1897a:	bf96      	itet	ls
   1897c:	490a      	ldrls	r1, [pc, #40]	; (189a8 <bt_conn_exists_le+0x44>)
   1897e:	490b      	ldrhi	r1, [pc, #44]	; (189ac <bt_conn_exists_le+0x48>)
   18980:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   18984:	08d2      	lsrs	r2, r2, #3
   18986:	0192      	lsls	r2, r2, #6
   18988:	f042 0202 	orr.w	r2, r2, #2
   1898c:	f010 f91c 	bl	28bc8 <log_1>
		bt_conn_unref(conn);
   18990:	4620      	mov	r0, r4
   18992:	f7ff fcd1 	bl	18338 <bt_conn_unref>
		return true;
   18996:	2001      	movs	r0, #1
}
   18998:	bd10      	pop	{r4, pc}
   1899a:	bf00      	nop
   1899c:	0002d948 	.word	0x0002d948
   189a0:	0002d960 	.word	0x0002d960
   189a4:	00030b2d 	.word	0x00030b2d
   189a8:	0002df44 	.word	0x0002df44
   189ac:	000309c6 	.word	0x000309c6

000189b0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   189b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189b2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   189b4:	480e      	ldr	r0, [pc, #56]	; (189f0 <bt_conn_lookup_state_le+0x40>)
{
   189b6:	460e      	mov	r6, r1
   189b8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   189ba:	f012 fc76 	bl	2b2aa <bt_conn_ref>

		if (!conn) {
   189be:	4604      	mov	r4, r0
   189c0:	b1a0      	cbz	r0, 189ec <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   189c2:	7883      	ldrb	r3, [r0, #2]
   189c4:	2b01      	cmp	r3, #1
   189c6:	d003      	beq.n	189d0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   189c8:	f7ff fcb6 	bl	18338 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   189cc:	2400      	movs	r4, #0
			continue;
   189ce:	e00d      	b.n	189ec <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   189d0:	b136      	cbz	r6, 189e0 <bt_conn_lookup_state_le+0x30>
   189d2:	4632      	mov	r2, r6
   189d4:	4629      	mov	r1, r5
   189d6:	f012 fd07 	bl	2b3e8 <bt_conn_is_peer_addr_le>
   189da:	b908      	cbnz	r0, 189e0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   189dc:	4620      	mov	r0, r4
   189de:	e7f3      	b.n	189c8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   189e0:	7b63      	ldrb	r3, [r4, #13]
   189e2:	42bb      	cmp	r3, r7
   189e4:	d1fa      	bne.n	189dc <bt_conn_lookup_state_le+0x2c>
   189e6:	7a23      	ldrb	r3, [r4, #8]
   189e8:	42ab      	cmp	r3, r5
   189ea:	d1f7      	bne.n	189dc <bt_conn_lookup_state_le+0x2c>
}
   189ec:	4620      	mov	r0, r4
   189ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   189f0:	200019d8 	.word	0x200019d8

000189f4 <send_conn_le_param_update>:
{
   189f4:	b538      	push	{r3, r4, r5, lr}
   189f6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   189f8:	4608      	mov	r0, r1
{
   189fa:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   189fc:	f012 fa5e 	bl	2aebc <bt_le_conn_params_valid>
   18a00:	b348      	cbz	r0, 18a56 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18a02:	4b16      	ldr	r3, [pc, #88]	; (18a5c <send_conn_le_param_update+0x68>)
   18a04:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   18a08:	0799      	lsls	r1, r3, #30
   18a0a:	d407      	bmi.n	18a1c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   18a0c:	78e3      	ldrb	r3, [r4, #3]
   18a0e:	b183      	cbz	r3, 18a32 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   18a10:	4629      	mov	r1, r5
   18a12:	4620      	mov	r0, r4
}
   18a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18a18:	f000 bb0c 	b.w	19034 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18a1c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   18a20:	079a      	lsls	r2, r3, #30
   18a22:	d5f3      	bpl.n	18a0c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18a24:	f3bf 8f5b 	dmb	ish
   18a28:	6863      	ldr	r3, [r4, #4]
   18a2a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18a2e:	055b      	lsls	r3, r3, #21
   18a30:	d4ec      	bmi.n	18a0c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   18a32:	4629      	mov	r1, r5
   18a34:	4620      	mov	r0, r4
   18a36:	f012 fcf9 	bl	2b42c <bt_conn_le_conn_update>
		if (rc == 0) {
   18a3a:	b958      	cbnz	r0, 18a54 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   18a3c:	882b      	ldrh	r3, [r5, #0]
   18a3e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   18a42:	886b      	ldrh	r3, [r5, #2]
   18a44:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   18a48:	88ab      	ldrh	r3, [r5, #4]
   18a4a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   18a4e:	88eb      	ldrh	r3, [r5, #6]
   18a50:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   18a54:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18a56:	f06f 0015 	mvn.w	r0, #21
   18a5a:	e7fb      	b.n	18a54 <send_conn_le_param_update+0x60>
   18a5c:	200002b0 	.word	0x200002b0

00018a60 <deferred_work>:
{
   18a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   18a64:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   18a68:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   18a6a:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   18a6e:	2b00      	cmp	r3, #0
   18a70:	d133      	bne.n	18ada <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   18a72:	4628      	mov	r0, r5
   18a74:	f012 fd3d 	bl	2b4f2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   18a78:	4b2f      	ldr	r3, [pc, #188]	; (18b38 <deferred_work+0xd8>)
   18a7a:	681e      	ldr	r6, [r3, #0]
   18a7c:	b9ee      	cbnz	r6, 18aba <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a7e:	4f2f      	ldr	r7, [pc, #188]	; (18b3c <deferred_work+0xdc>)
   18a80:	4e2f      	ldr	r6, [pc, #188]	; (18b40 <deferred_work+0xe0>)
   18a82:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 18b54 <deferred_work+0xf4>
   18a86:	46b9      	mov	r9, r7
   18a88:	42be      	cmp	r6, r7
   18a8a:	d90e      	bls.n	18aaa <deferred_work+0x4a>
   18a8c:	492d      	ldr	r1, [pc, #180]	; (18b44 <deferred_work+0xe4>)
   18a8e:	482e      	ldr	r0, [pc, #184]	; (18b48 <deferred_work+0xe8>)
   18a90:	f240 5326 	movw	r3, #1318	; 0x526
   18a94:	4642      	mov	r2, r8
   18a96:	f00f fe6b 	bl	28770 <printk>
   18a9a:	482c      	ldr	r0, [pc, #176]	; (18b4c <deferred_work+0xec>)
   18a9c:	f00f fe68 	bl	28770 <printk>
   18aa0:	f240 5126 	movw	r1, #1318	; 0x526
   18aa4:	4640      	mov	r0, r8
   18aa6:	f010 f854 	bl	28b52 <assert_post_action>
   18aaa:	454e      	cmp	r6, r9
   18aac:	d30d      	bcc.n	18aca <deferred_work+0x6a>
		bt_conn_unref(conn);
   18aae:	4628      	mov	r0, r5
   18ab0:	f7ff fc42 	bl	18338 <bt_conn_unref>
}
   18ab4:	b003      	add	sp, #12
   18ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   18aba:	6873      	ldr	r3, [r6, #4]
   18abc:	b11b      	cbz	r3, 18ac6 <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   18abe:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   18ac2:	4628      	mov	r0, r5
   18ac4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18ac6:	69b6      	ldr	r6, [r6, #24]
   18ac8:	e7d8      	b.n	18a7c <deferred_work+0x1c>
		if (cb->disconnected) {
   18aca:	6873      	ldr	r3, [r6, #4]
   18acc:	b11b      	cbz	r3, 18ad6 <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   18ace:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   18ad2:	4628      	mov	r0, r5
   18ad4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18ad6:	361c      	adds	r6, #28
   18ad8:	e7d6      	b.n	18a88 <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   18ada:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   18ade:	2b01      	cmp	r3, #1
   18ae0:	d1e8      	bne.n	18ab4 <deferred_work+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18ae2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   18ae6:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   18aea:	e856 3f00 	ldrex	r3, [r6]
   18aee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   18af2:	e846 2100 	strex	r1, r2, [r6]
   18af6:	2900      	cmp	r1, #0
   18af8:	d1f7      	bne.n	18aea <deferred_work+0x8a>
   18afa:	f3bf 8f5b 	dmb	ish
   18afe:	059b      	lsls	r3, r3, #22
   18b00:	d514      	bpl.n	18b2c <deferred_work+0xcc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18b02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18b04:	9300      	str	r3, [sp, #0]
   18b06:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18b08:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   18b0a:	4669      	mov	r1, sp
   18b0c:	4628      	mov	r0, r5
   18b0e:	f7ff ff71 	bl	189f4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18b12:	f3bf 8f5b 	dmb	ish
   18b16:	e856 3f00 	ldrex	r3, [r6]
   18b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18b1e:	e846 3200 	strex	r2, r3, [r6]
   18b22:	2a00      	cmp	r2, #0
   18b24:	d1f7      	bne.n	18b16 <deferred_work+0xb6>
   18b26:	f3bf 8f5b 	dmb	ish
   18b2a:	e7c3      	b.n	18ab4 <deferred_work+0x54>
		param = BT_LE_CONN_PARAM(
   18b2c:	4a08      	ldr	r2, [pc, #32]	; (18b50 <deferred_work+0xf0>)
   18b2e:	6810      	ldr	r0, [r2, #0]
   18b30:	6851      	ldr	r1, [r2, #4]
   18b32:	466b      	mov	r3, sp
   18b34:	c303      	stmia	r3!, {r0, r1}
   18b36:	e7e8      	b.n	18b0a <deferred_work+0xaa>
   18b38:	200029dc 	.word	0x200029dc
   18b3c:	0002d8b8 	.word	0x0002d8b8
   18b40:	0002d89c 	.word	0x0002d89c
   18b44:	00030830 	.word	0x00030830
   18b48:	0002e915 	.word	0x0002e915
   18b4c:	0002f2e8 	.word	0x0002f2e8
   18b50:	0002daec 	.word	0x0002daec
   18b54:	00030800 	.word	0x00030800

00018b58 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   18b58:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   18b5a:	4801      	ldr	r0, [pc, #4]	; (18b60 <bt_conn_create_frag_timeout+0x8>)
   18b5c:	f7ff bd3c 	b.w	185d8 <bt_conn_create_pdu_timeout>
   18b60:	20000a10 	.word	0x20000a10

00018b64 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   18b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b68:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   18b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18b72:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   18b74:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   18b76:	f7ff ffef 	bl	18b58 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   18b7a:	7833      	ldrb	r3, [r6, #0]
   18b7c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   18b7e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   18b80:	f04f 0600 	mov.w	r6, #0
   18b84:	d005      	beq.n	18b92 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   18b86:	f004 ff93 	bl	1dab0 <net_buf_unref>
		return NULL;
   18b8a:	4635      	mov	r5, r6
}
   18b8c:	4628      	mov	r0, r5
   18b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   18b92:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   18b94:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   18b98:	4e0c      	ldr	r6, [pc, #48]	; (18bcc <create_frag.isra.0+0x68>)
   18b9a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18b9c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   18ba0:	f013 ff0e 	bl	2c9c0 <net_buf_simple_tailroom>
   18ba4:	4580      	cmp	r8, r0
   18ba6:	d20c      	bcs.n	18bc2 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   18ba8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18bac:	f854 1f08 	ldr.w	r1, [r4, #8]!
   18bb0:	4632      	mov	r2, r6
   18bb2:	4638      	mov	r0, r7
   18bb4:	f013 ff0c 	bl	2c9d0 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18bb8:	4631      	mov	r1, r6
   18bba:	4620      	mov	r0, r4
   18bbc:	f005 f866 	bl	1dc8c <net_buf_simple_pull>
   18bc0:	e7e4      	b.n	18b8c <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   18bc2:	4638      	mov	r0, r7
   18bc4:	f013 fefc 	bl	2c9c0 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18bc8:	b286      	uxth	r6, r0
   18bca:	e7ef      	b.n	18bac <create_frag.isra.0+0x48>
   18bcc:	200002b0 	.word	0x200002b0

00018bd0 <bt_conn_process_tx>:
{
   18bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18bd2:	7b43      	ldrb	r3, [r0, #13]
{
   18bd4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   18bd6:	b993      	cbnz	r3, 18bfe <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18bd8:	f3bf 8f5b 	dmb	ish
   18bdc:	1d03      	adds	r3, r0, #4
   18bde:	e853 2f00 	ldrex	r2, [r3]
   18be2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18be6:	e843 1400 	strex	r4, r1, [r3]
   18bea:	2c00      	cmp	r4, #0
   18bec:	d1f7      	bne.n	18bde <bt_conn_process_tx+0xe>
   18bee:	f3bf 8f5b 	dmb	ish
   18bf2:	0653      	lsls	r3, r2, #25
   18bf4:	d503      	bpl.n	18bfe <bt_conn_process_tx+0x2e>
}
   18bf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   18bfa:	f7ff ba1f 	b.w	1803c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18bfe:	2200      	movs	r2, #0
   18c00:	2300      	movs	r3, #0
   18c02:	f105 0038 	add.w	r0, r5, #56	; 0x38
   18c06:	f004 fec1 	bl	1d98c <net_buf_get>
	BT_ASSERT(buf);
   18c0a:	4604      	mov	r4, r0
   18c0c:	b960      	cbnz	r0, 18c28 <bt_conn_process_tx+0x58>
   18c0e:	4a20      	ldr	r2, [pc, #128]	; (18c90 <bt_conn_process_tx+0xc0>)
   18c10:	4920      	ldr	r1, [pc, #128]	; (18c94 <bt_conn_process_tx+0xc4>)
   18c12:	4821      	ldr	r0, [pc, #132]	; (18c98 <bt_conn_process_tx+0xc8>)
   18c14:	f240 23e7 	movw	r3, #743	; 0x2e7
   18c18:	f00f fdaa 	bl	28770 <printk>
   18c1c:	4040      	eors	r0, r0
   18c1e:	f380 8811 	msr	BASEPRI, r0
   18c22:	f04f 0003 	mov.w	r0, #3
   18c26:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   18c28:	4f1c      	ldr	r7, [pc, #112]	; (18c9c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   18c2a:	89a1      	ldrh	r1, [r4, #12]
   18c2c:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   18c30:	4291      	cmp	r1, r2
   18c32:	d807      	bhi.n	18c44 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   18c34:	2300      	movs	r3, #0
   18c36:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   18c38:	4621      	mov	r1, r4
   18c3a:	4628      	mov	r0, r5
   18c3c:	f7ff f916 	bl	17e6c <send_frag>
	if (!send_buf(conn, buf)) {
   18c40:	b140      	cbz	r0, 18c54 <bt_conn_process_tx+0x84>
}
   18c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   18c44:	f105 060d 	add.w	r6, r5, #13
   18c48:	4621      	mov	r1, r4
   18c4a:	4630      	mov	r0, r6
   18c4c:	f7ff ff8a 	bl	18b64 <create_frag.isra.0>
	if (!frag) {
   18c50:	4601      	mov	r1, r0
   18c52:	b920      	cbnz	r0, 18c5e <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   18c54:	4620      	mov	r0, r4
}
   18c56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   18c5a:	f004 bf29 	b.w	1dab0 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   18c5e:	2301      	movs	r3, #1
   18c60:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18c62:	4628      	mov	r0, r5
   18c64:	f7ff f902 	bl	17e6c <send_frag>
   18c68:	2800      	cmp	r0, #0
   18c6a:	d0f3      	beq.n	18c54 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   18c6c:	89a2      	ldrh	r2, [r4, #12]
   18c6e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   18c72:	429a      	cmp	r2, r3
   18c74:	d802      	bhi.n	18c7c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   18c76:	2300      	movs	r3, #0
   18c78:	2203      	movs	r2, #3
   18c7a:	e7dd      	b.n	18c38 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   18c7c:	4621      	mov	r1, r4
   18c7e:	4630      	mov	r0, r6
   18c80:	f7ff ff70 	bl	18b64 <create_frag.isra.0>
		if (!frag) {
   18c84:	4601      	mov	r1, r0
   18c86:	2800      	cmp	r0, #0
   18c88:	d0e4      	beq.n	18c54 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   18c8a:	2301      	movs	r3, #1
   18c8c:	461a      	mov	r2, r3
   18c8e:	e7e8      	b.n	18c62 <bt_conn_process_tx+0x92>
   18c90:	00030800 	.word	0x00030800
   18c94:	0002ff40 	.word	0x0002ff40
   18c98:	0002e915 	.word	0x0002e915
   18c9c:	200002b0 	.word	0x200002b0

00018ca0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   18ca0:	4b0c      	ldr	r3, [pc, #48]	; (18cd4 <bt_conn_auth_cb_register+0x34>)
   18ca2:	b908      	cbnz	r0, 18ca8 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   18ca4:	6018      	str	r0, [r3, #0]
		return 0;
   18ca6:	4770      	bx	lr
	}

	if (bt_auth) {
   18ca8:	681a      	ldr	r2, [r3, #0]
   18caa:	b962      	cbnz	r2, 18cc6 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   18cac:	6902      	ldr	r2, [r0, #16]
   18cae:	b93a      	cbnz	r2, 18cc0 <bt_conn_auth_cb_register+0x20>
   18cb0:	6802      	ldr	r2, [r0, #0]
   18cb2:	b95a      	cbnz	r2, 18ccc <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   18cb4:	6842      	ldr	r2, [r0, #4]
   18cb6:	b94a      	cbnz	r2, 18ccc <bt_conn_auth_cb_register+0x2c>
   18cb8:	6882      	ldr	r2, [r0, #8]
   18cba:	b93a      	cbnz	r2, 18ccc <bt_conn_auth_cb_register+0x2c>
   18cbc:	6942      	ldr	r2, [r0, #20]
   18cbe:	b92a      	cbnz	r2, 18ccc <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   18cc0:	6018      	str	r0, [r3, #0]
	return 0;
   18cc2:	2000      	movs	r0, #0
   18cc4:	4770      	bx	lr
		return -EALREADY;
   18cc6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18cca:	4770      	bx	lr
		return -EINVAL;
   18ccc:	f06f 0015 	mvn.w	r0, #21
}
   18cd0:	4770      	bx	lr
   18cd2:	bf00      	nop
   18cd4:	200029d8 	.word	0x200029d8

00018cd8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   18cd8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   18cda:	490b      	ldr	r1, [pc, #44]	; (18d08 <bt_conn_init+0x30>)
   18cdc:	480b      	ldr	r0, [pc, #44]	; (18d0c <bt_conn_init+0x34>)
   18cde:	f014 fb03 	bl	2d2e8 <k_queue_append>
   18ce2:	490b      	ldr	r1, [pc, #44]	; (18d10 <bt_conn_init+0x38>)
   18ce4:	4809      	ldr	r0, [pc, #36]	; (18d0c <bt_conn_init+0x34>)
   18ce6:	f014 faff 	bl	2d2e8 <k_queue_append>
   18cea:	490a      	ldr	r1, [pc, #40]	; (18d14 <bt_conn_init+0x3c>)
   18cec:	4807      	ldr	r0, [pc, #28]	; (18d0c <bt_conn_init+0x34>)
   18cee:	f014 fafb 	bl	2d2e8 <k_queue_append>
	}

	bt_att_init();
   18cf2:	f012 ffbc 	bl	2bc6e <bt_att_init>

	err = bt_smp_init();
   18cf6:	f004 fb1b 	bl	1d330 <bt_smp_init>
	if (err) {
   18cfa:	4604      	mov	r4, r0
   18cfc:	b908      	cbnz	r0, 18d02 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   18cfe:	f012 fc64 	bl	2b5ca <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   18d02:	4620      	mov	r0, r4
   18d04:	bd10      	pop	{r4, pc}
   18d06:	bf00      	nop
   18d08:	200029e0 	.word	0x200029e0
   18d0c:	2000098c 	.word	0x2000098c
   18d10:	200029f0 	.word	0x200029f0
   18d14:	20002a00 	.word	0x20002a00

00018d18 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   18d18:	4a0b      	ldr	r2, [pc, #44]	; (18d48 <l2cap_accept+0x30>)
{
   18d1a:	b508      	push	{r3, lr}
   18d1c:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   18d1e:	6810      	ldr	r0, [r2, #0]
   18d20:	b918      	cbnz	r0, 18d2a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   18d22:	4b0a      	ldr	r3, [pc, #40]	; (18d4c <l2cap_accept+0x34>)
   18d24:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   18d26:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   18d28:	bd08      	pop	{r3, pc}
   18d2a:	4909      	ldr	r1, [pc, #36]	; (18d50 <l2cap_accept+0x38>)
   18d2c:	4a09      	ldr	r2, [pc, #36]	; (18d54 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   18d2e:	480a      	ldr	r0, [pc, #40]	; (18d58 <l2cap_accept+0x40>)
   18d30:	1a52      	subs	r2, r2, r1
   18d32:	08d2      	lsrs	r2, r2, #3
   18d34:	0192      	lsls	r2, r2, #6
   18d36:	f042 0201 	orr.w	r2, r2, #1
   18d3a:	4619      	mov	r1, r3
   18d3c:	f00f ff44 	bl	28bc8 <log_1>
	return -ENOMEM;
   18d40:	f06f 000b 	mvn.w	r0, #11
   18d44:	e7f0      	b.n	18d28 <l2cap_accept+0x10>
   18d46:	bf00      	nop
   18d48:	20001aa0 	.word	0x20001aa0
   18d4c:	0002df88 	.word	0x0002df88
   18d50:	0002d948 	.word	0x0002d948
   18d54:	0002d998 	.word	0x0002d998
   18d58:	00030bad 	.word	0x00030bad

00018d5c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d5e:	4605      	mov	r5, r0
   18d60:	460f      	mov	r7, r1
   18d62:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18d64:	2300      	movs	r3, #0
   18d66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   18d6a:	2104      	movs	r1, #4
   18d6c:	2000      	movs	r0, #0
   18d6e:	f7ff fc33 	bl	185d8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18d72:	4604      	mov	r4, r0
   18d74:	b960      	cbnz	r0, 18d90 <l2cap_create_le_sig_pdu.isra.0+0x34>
   18d76:	4a0a      	ldr	r2, [pc, #40]	; (18da0 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   18d78:	4b0a      	ldr	r3, [pc, #40]	; (18da4 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   18d7a:	480b      	ldr	r0, [pc, #44]	; (18da8 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   18d7c:	1ad2      	subs	r2, r2, r3
   18d7e:	08d2      	lsrs	r2, r2, #3
   18d80:	0192      	lsls	r2, r2, #6
   18d82:	f042 0201 	orr.w	r2, r2, #1
   18d86:	4629      	mov	r1, r5
   18d88:	f00f ff1e 	bl	28bc8 <log_1>
}
   18d8c:	4620      	mov	r0, r4
   18d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   18d90:	2104      	movs	r1, #4
   18d92:	3008      	adds	r0, #8
   18d94:	f004 ffbc 	bl	1dd10 <net_buf_simple_add>
	hdr->code = code;
   18d98:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   18d9a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18d9c:	8046      	strh	r6, [r0, #2]
	return buf;
   18d9e:	e7f5      	b.n	18d8c <l2cap_create_le_sig_pdu.isra.0+0x30>
   18da0:	0002d998 	.word	0x0002d998
   18da4:	0002d948 	.word	0x0002d948
   18da8:	00030bd4 	.word	0x00030bd4

00018dac <l2cap_rtx_timeout>:
{
   18dac:	b538      	push	{r3, r4, r5, lr}
   18dae:	4a0b      	ldr	r2, [pc, #44]	; (18ddc <l2cap_rtx_timeout+0x30>)
   18db0:	4b0b      	ldr	r3, [pc, #44]	; (18de0 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   18db2:	4604      	mov	r4, r0
   18db4:	1ad2      	subs	r2, r2, r3
   18db6:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   18dba:	480a      	ldr	r0, [pc, #40]	; (18de4 <l2cap_rtx_timeout+0x38>)
   18dbc:	08d2      	lsrs	r2, r2, #3
   18dbe:	0192      	lsls	r2, r2, #6
   18dc0:	4621      	mov	r1, r4
   18dc2:	f042 0201 	orr.w	r2, r2, #1
   18dc6:	f00f feff 	bl	28bc8 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   18dca:	4628      	mov	r0, r5
   18dcc:	4621      	mov	r1, r4
   18dce:	f012 fb59 	bl	2b484 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18dd2:	4620      	mov	r0, r4
}
   18dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   18dd8:	f012 bb76 	b.w	2b4c8 <bt_l2cap_chan_del>
   18ddc:	0002d998 	.word	0x0002d998
   18de0:	0002d948 	.word	0x0002d948
   18de4:	00030bfc 	.word	0x00030bfc

00018de8 <bt_l2cap_connected>:
{
   18de8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18dec:	4f32      	ldr	r7, [pc, #200]	; (18eb8 <bt_l2cap_connected+0xd0>)
   18dee:	4e33      	ldr	r6, [pc, #204]	; (18ebc <bt_l2cap_connected+0xd4>)
   18df0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 18ed0 <bt_l2cap_connected+0xe8>
{
   18df4:	4604      	mov	r4, r0
   18df6:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18df8:	42be      	cmp	r6, r7
   18dfa:	d90e      	bls.n	18e1a <bt_l2cap_connected+0x32>
   18dfc:	4930      	ldr	r1, [pc, #192]	; (18ec0 <bt_l2cap_connected+0xd8>)
   18dfe:	4831      	ldr	r0, [pc, #196]	; (18ec4 <bt_l2cap_connected+0xdc>)
   18e00:	f44f 73b3 	mov.w	r3, #358	; 0x166
   18e04:	4642      	mov	r2, r8
   18e06:	f00f fcb3 	bl	28770 <printk>
   18e0a:	482f      	ldr	r0, [pc, #188]	; (18ec8 <bt_l2cap_connected+0xe0>)
   18e0c:	f00f fcb0 	bl	28770 <printk>
   18e10:	f44f 71b3 	mov.w	r1, #358	; 0x166
   18e14:	4640      	mov	r0, r8
   18e16:	f00f fe9c 	bl	28b52 <assert_post_action>
   18e1a:	454e      	cmp	r6, r9
   18e1c:	d302      	bcc.n	18e24 <bt_l2cap_connected+0x3c>
}
   18e1e:	b002      	add	sp, #8
   18e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   18e24:	6873      	ldr	r3, [r6, #4]
   18e26:	a901      	add	r1, sp, #4
   18e28:	4620      	mov	r0, r4
   18e2a:	4798      	blx	r3
   18e2c:	2800      	cmp	r0, #0
   18e2e:	db3d      	blt.n	18eac <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   18e30:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   18e32:	8833      	ldrh	r3, [r6, #0]
   18e34:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   18e38:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   18e3c:	4923      	ldr	r1, [pc, #140]	; (18ecc <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18e3e:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   18e42:	f105 0010 	add.w	r0, r5, #16
   18e46:	f00a fa1f 	bl	23288 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18e4a:	f3bf 8f5b 	dmb	ish
   18e4e:	f105 0368 	add.w	r3, r5, #104	; 0x68
   18e52:	2200      	movs	r2, #0
   18e54:	e853 1f00 	ldrex	r1, [r3]
   18e58:	e843 2000 	strex	r0, r2, [r3]
   18e5c:	2800      	cmp	r0, #0
   18e5e:	d1f9      	bne.n	18e54 <bt_l2cap_connected+0x6c>
   18e60:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   18e64:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   18e66:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   18e68:	f105 0308 	add.w	r3, r5, #8
   18e6c:	bb02      	cbnz	r2, 18eb0 <bt_l2cap_connected+0xc8>
	list->head = node;
   18e6e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   18e72:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18e74:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   18e76:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   18e78:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   18e7c:	681b      	ldr	r3, [r3, #0]
   18e7e:	b103      	cbz	r3, 18e82 <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   18e80:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18e82:	9b01      	ldr	r3, [sp, #4]
   18e84:	f3bf 8f5b 	dmb	ish
   18e88:	3368      	adds	r3, #104	; 0x68
   18e8a:	e853 2f00 	ldrex	r2, [r3]
   18e8e:	f042 0201 	orr.w	r2, r2, #1
   18e92:	e843 2100 	strex	r1, r2, [r3]
   18e96:	2900      	cmp	r1, #0
   18e98:	d1f7      	bne.n	18e8a <bt_l2cap_connected+0xa2>
   18e9a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   18e9e:	9801      	ldr	r0, [sp, #4]
   18ea0:	6843      	ldr	r3, [r0, #4]
   18ea2:	699b      	ldr	r3, [r3, #24]
   18ea4:	b113      	cbz	r3, 18eac <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   18ea6:	f100 0168 	add.w	r1, r0, #104	; 0x68
   18eaa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   18eac:	360c      	adds	r6, #12
   18eae:	e7a3      	b.n	18df8 <bt_l2cap_connected+0x10>
	parent->next = child;
   18eb0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18eb2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   18eb4:	e7dd      	b.n	18e72 <bt_l2cap_connected+0x8a>
   18eb6:	bf00      	nop
   18eb8:	0002d89c 	.word	0x0002d89c
   18ebc:	0002d878 	.word	0x0002d878
   18ec0:	00030c3d 	.word	0x00030c3d
   18ec4:	0002e915 	.word	0x0002e915
   18ec8:	0002f2e8 	.word	0x0002f2e8
   18ecc:	00018dad 	.word	0x00018dad
   18ed0:	00030c0c 	.word	0x00030c0c

00018ed4 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   18ed4:	898b      	ldrh	r3, [r1, #12]
   18ed6:	2b03      	cmp	r3, #3
{
   18ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18eda:	4606      	mov	r6, r0
   18edc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   18ede:	d80a      	bhi.n	18ef6 <l2cap_recv+0x22>
   18ee0:	4931      	ldr	r1, [pc, #196]	; (18fa8 <l2cap_recv+0xd4>)
   18ee2:	4b32      	ldr	r3, [pc, #200]	; (18fac <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   18ee4:	4832      	ldr	r0, [pc, #200]	; (18fb0 <l2cap_recv+0xdc>)
   18ee6:	1ac9      	subs	r1, r1, r3
   18ee8:	08c9      	lsrs	r1, r1, #3
   18eea:	0189      	lsls	r1, r1, #6
   18eec:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   18ef0:	f00f fe5d 	bl	28bae <log_0>
		return 0;
   18ef4:	e013      	b.n	18f1e <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   18ef6:	2104      	movs	r1, #4
   18ef8:	f105 0008 	add.w	r0, r5, #8
   18efc:	f004 fee6 	bl	1dccc <net_buf_simple_pull_mem>
	if (buf->len != len) {
   18f00:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   18f02:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   18f04:	428a      	cmp	r2, r1
   18f06:	4604      	mov	r4, r0
   18f08:	d00c      	beq.n	18f24 <l2cap_recv+0x50>
   18f0a:	4828      	ldr	r0, [pc, #160]	; (18fac <l2cap_recv+0xd8>)
   18f0c:	4b26      	ldr	r3, [pc, #152]	; (18fa8 <l2cap_recv+0xd4>)
   18f0e:	1a1b      	subs	r3, r3, r0
   18f10:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   18f12:	019b      	lsls	r3, r3, #6
   18f14:	4827      	ldr	r0, [pc, #156]	; (18fb4 <l2cap_recv+0xe0>)
   18f16:	f043 0301 	orr.w	r3, r3, #1
   18f1a:	f00f fe69 	bl	28bf0 <log_2>
}
   18f1e:	2000      	movs	r0, #0
   18f20:	b002      	add	sp, #8
   18f22:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   18f24:	7843      	ldrb	r3, [r0, #1]
   18f26:	b943      	cbnz	r3, 18f3a <l2cap_recv+0x66>
   18f28:	491f      	ldr	r1, [pc, #124]	; (18fa8 <l2cap_recv+0xd4>)
   18f2a:	4b20      	ldr	r3, [pc, #128]	; (18fac <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   18f2c:	4822      	ldr	r0, [pc, #136]	; (18fb8 <l2cap_recv+0xe4>)
   18f2e:	1ac9      	subs	r1, r1, r3
   18f30:	08c9      	lsrs	r1, r1, #3
   18f32:	0189      	lsls	r1, r1, #6
   18f34:	f041 0101 	orr.w	r1, r1, #1
   18f38:	e7da      	b.n	18ef0 <l2cap_recv+0x1c>
	switch (hdr->code) {
   18f3a:	7801      	ldrb	r1, [r0, #0]
   18f3c:	2901      	cmp	r1, #1
   18f3e:	d0ee      	beq.n	18f1e <l2cap_recv+0x4a>
   18f40:	2913      	cmp	r1, #19
   18f42:	d10a      	bne.n	18f5a <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   18f44:	2a01      	cmp	r2, #1
   18f46:	d8ea      	bhi.n	18f1e <l2cap_recv+0x4a>
   18f48:	4917      	ldr	r1, [pc, #92]	; (18fa8 <l2cap_recv+0xd4>)
   18f4a:	4b18      	ldr	r3, [pc, #96]	; (18fac <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   18f4c:	481b      	ldr	r0, [pc, #108]	; (18fbc <l2cap_recv+0xe8>)
   18f4e:	1ac9      	subs	r1, r1, r3
   18f50:	08c9      	lsrs	r1, r1, #3
   18f52:	0189      	lsls	r1, r1, #6
   18f54:	f041 0101 	orr.w	r1, r1, #1
   18f58:	e7ca      	b.n	18ef0 <l2cap_recv+0x1c>
   18f5a:	4b14      	ldr	r3, [pc, #80]	; (18fac <l2cap_recv+0xd8>)
   18f5c:	4a12      	ldr	r2, [pc, #72]	; (18fa8 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   18f5e:	4818      	ldr	r0, [pc, #96]	; (18fc0 <l2cap_recv+0xec>)
   18f60:	1ad2      	subs	r2, r2, r3
   18f62:	08d2      	lsrs	r2, r2, #3
   18f64:	0192      	lsls	r2, r2, #6
   18f66:	f042 0202 	orr.w	r2, r2, #2
   18f6a:	f00f fe2d 	bl	28bc8 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18f6e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   18f70:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18f72:	2202      	movs	r2, #2
   18f74:	2001      	movs	r0, #1
   18f76:	f7ff fef1 	bl	18d5c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   18f7a:	4604      	mov	r4, r0
   18f7c:	2800      	cmp	r0, #0
   18f7e:	d0ce      	beq.n	18f1e <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18f80:	2102      	movs	r1, #2
   18f82:	3008      	adds	r0, #8
   18f84:	f004 fec4 	bl	1dd10 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18f88:	2300      	movs	r3, #0
   18f8a:	7003      	strb	r3, [r0, #0]
   18f8c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   18f8e:	4622      	mov	r2, r4
   18f90:	9300      	str	r3, [sp, #0]
   18f92:	2105      	movs	r1, #5
   18f94:	4628      	mov	r0, r5
   18f96:	f012 fadf 	bl	2b558 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   18f9a:	2800      	cmp	r0, #0
   18f9c:	d0bf      	beq.n	18f1e <l2cap_recv+0x4a>
		net_buf_unref(buf);
   18f9e:	4620      	mov	r0, r4
   18fa0:	f004 fd86 	bl	1dab0 <net_buf_unref>
   18fa4:	e7bb      	b.n	18f1e <l2cap_recv+0x4a>
   18fa6:	bf00      	nop
   18fa8:	0002d998 	.word	0x0002d998
   18fac:	0002d948 	.word	0x0002d948
   18fb0:	00030c64 	.word	0x00030c64
   18fb4:	00030c82 	.word	0x00030c82
   18fb8:	00030ca3 	.word	0x00030ca3
   18fbc:	00030cc4 	.word	0x00030cc4
   18fc0:	00030ce0 	.word	0x00030ce0

00018fc4 <bt_l2cap_recv>:
{
   18fc4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   18fc6:	898b      	ldrh	r3, [r1, #12]
   18fc8:	2b03      	cmp	r3, #3
{
   18fca:	4605      	mov	r5, r0
   18fcc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18fce:	d80e      	bhi.n	18fee <bt_l2cap_recv+0x2a>
   18fd0:	4914      	ldr	r1, [pc, #80]	; (19024 <bt_l2cap_recv+0x60>)
   18fd2:	4b15      	ldr	r3, [pc, #84]	; (19028 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   18fd4:	4815      	ldr	r0, [pc, #84]	; (1902c <bt_l2cap_recv+0x68>)
   18fd6:	1ac9      	subs	r1, r1, r3
   18fd8:	08c9      	lsrs	r1, r1, #3
   18fda:	0189      	lsls	r1, r1, #6
   18fdc:	f041 0101 	orr.w	r1, r1, #1
   18fe0:	f00f fde5 	bl	28bae <log_0>
	net_buf_unref(buf);
   18fe4:	4620      	mov	r0, r4
}
   18fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   18fea:	f004 bd61 	b.w	1dab0 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   18fee:	2104      	movs	r1, #4
   18ff0:	f104 0008 	add.w	r0, r4, #8
   18ff4:	f004 fe6a 	bl	1dccc <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   18ff8:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18ffa:	4628      	mov	r0, r5
   18ffc:	f012 fad5 	bl	2b5aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19000:	b950      	cbnz	r0, 19018 <bt_l2cap_recv+0x54>
   19002:	4b09      	ldr	r3, [pc, #36]	; (19028 <bt_l2cap_recv+0x64>)
   19004:	4a07      	ldr	r2, [pc, #28]	; (19024 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   19006:	480a      	ldr	r0, [pc, #40]	; (19030 <bt_l2cap_recv+0x6c>)
   19008:	1ad2      	subs	r2, r2, r3
   1900a:	08d2      	lsrs	r2, r2, #3
   1900c:	0192      	lsls	r2, r2, #6
   1900e:	f042 0202 	orr.w	r2, r2, #2
   19012:	f00f fdd9 	bl	28bc8 <log_1>
		net_buf_unref(buf);
   19016:	e7e5      	b.n	18fe4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   19018:	6843      	ldr	r3, [r0, #4]
   1901a:	4621      	mov	r1, r4
   1901c:	691b      	ldr	r3, [r3, #16]
   1901e:	4798      	blx	r3
   19020:	e7e0      	b.n	18fe4 <bt_l2cap_recv+0x20>
   19022:	bf00      	nop
   19024:	0002d998 	.word	0x0002d998
   19028:	0002d948 	.word	0x0002d948
   1902c:	00030cfe 	.word	0x00030cfe
   19030:	00030d1b 	.word	0x00030d1b

00019034 <bt_l2cap_update_conn_param>:
{
   19034:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   19036:	4b17      	ldr	r3, [pc, #92]	; (19094 <bt_l2cap_update_conn_param+0x60>)
   19038:	781a      	ldrb	r2, [r3, #0]
   1903a:	3201      	adds	r2, #1
	if (!ident) {
   1903c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   19040:	bf08      	it	eq
   19042:	2201      	moveq	r2, #1
   19044:	701a      	strb	r2, [r3, #0]
{
   19046:	4606      	mov	r6, r0
   19048:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1904a:	2208      	movs	r2, #8
   1904c:	7819      	ldrb	r1, [r3, #0]
   1904e:	2012      	movs	r0, #18
   19050:	f7ff fe84 	bl	18d5c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   19054:	4604      	mov	r4, r0
   19056:	b1d0      	cbz	r0, 1908e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   19058:	2108      	movs	r1, #8
   1905a:	4408      	add	r0, r1
   1905c:	f004 fe58 	bl	1dd10 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   19060:	882b      	ldrh	r3, [r5, #0]
   19062:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   19064:	886b      	ldrh	r3, [r5, #2]
   19066:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   19068:	88ab      	ldrh	r3, [r5, #4]
   1906a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1906c:	88eb      	ldrh	r3, [r5, #6]
   1906e:	80c3      	strh	r3, [r0, #6]
   19070:	2300      	movs	r3, #0
   19072:	9300      	str	r3, [sp, #0]
   19074:	4622      	mov	r2, r4
   19076:	2105      	movs	r1, #5
   19078:	4630      	mov	r0, r6
   1907a:	f012 fa6d 	bl	2b558 <bt_l2cap_send_cb>
	if (err) {
   1907e:	4605      	mov	r5, r0
   19080:	b110      	cbz	r0, 19088 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   19082:	4620      	mov	r0, r4
   19084:	f004 fd14 	bl	1dab0 <net_buf_unref>
}
   19088:	4628      	mov	r0, r5
   1908a:	b002      	add	sp, #8
   1908c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1908e:	f06f 050b 	mvn.w	r5, #11
   19092:	e7f9      	b.n	19088 <bt_l2cap_update_conn_param+0x54>
   19094:	200038a2 	.word	0x200038a2

00019098 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   19098:	4b02      	ldr	r3, [pc, #8]	; (190a4 <att_cfm_sent+0xc>)
   1909a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1909e:	f012 bac2 	b.w	2b626 <att_sent>
   190a2:	bf00      	nop
   190a4:	0002b9ad 	.word	0x0002b9ad

000190a8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   190a8:	4b02      	ldr	r3, [pc, #8]	; (190b4 <att_rsp_sent+0xc>)
   190aa:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   190ae:	f012 baba 	b.w	2b626 <att_sent>
   190b2:	bf00      	nop
   190b4:	0002b991 	.word	0x0002b991

000190b8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   190b8:	4b02      	ldr	r3, [pc, #8]	; (190c4 <att_req_sent+0xc>)
   190ba:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   190be:	f012 bab2 	b.w	2b626 <att_sent>
   190c2:	bf00      	nop
   190c4:	0002b977 	.word	0x0002b977

000190c8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   190c8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   190ca:	3808      	subs	r0, #8
   190cc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   190ce:	a901      	add	r1, sp, #4
   190d0:	4802      	ldr	r0, [pc, #8]	; (190dc <bt_att_released+0x14>)
   190d2:	f008 ff9d 	bl	22010 <k_mem_slab_free>
}
   190d6:	b003      	add	sp, #12
   190d8:	f85d fb04 	ldr.w	pc, [sp], #4
   190dc:	200007e0 	.word	0x200007e0

000190e0 <chan_send>:
{
   190e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   190e4:	688b      	ldr	r3, [r1, #8]
   190e6:	781b      	ldrb	r3, [r3, #0]
   190e8:	2bd2      	cmp	r3, #210	; 0xd2
{
   190ea:	4606      	mov	r6, r0
   190ec:	460c      	mov	r4, r1
   190ee:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   190f0:	d116      	bne.n	19120 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   190f2:	6803      	ldr	r3, [r0, #0]
   190f4:	6818      	ldr	r0, [r3, #0]
   190f6:	f013 fb8d 	bl	2c814 <bt_smp_sign>
		if (err) {
   190fa:	4605      	mov	r5, r0
   190fc:	b180      	cbz	r0, 19120 <chan_send+0x40>
   190fe:	4b24      	ldr	r3, [pc, #144]	; (19190 <chan_send+0xb0>)
   19100:	4924      	ldr	r1, [pc, #144]	; (19194 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   19102:	4825      	ldr	r0, [pc, #148]	; (19198 <chan_send+0xb8>)
   19104:	1ac9      	subs	r1, r1, r3
   19106:	08c9      	lsrs	r1, r1, #3
   19108:	0189      	lsls	r1, r1, #6
   1910a:	f041 0101 	orr.w	r1, r1, #1
   1910e:	f00f fd4e 	bl	28bae <log_0>
			net_buf_unref(buf);
   19112:	4620      	mov	r0, r4
   19114:	f004 fccc 	bl	1dab0 <net_buf_unref>
}
   19118:	4628      	mov	r0, r5
   1911a:	b003      	add	sp, #12
   1911c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   19120:	f104 0008 	add.w	r0, r4, #8
   19124:	f013 fc48 	bl	2c9b8 <net_buf_simple_headroom>
	state->len = buf->len;
   19128:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1912c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1912e:	b957      	cbnz	r7, 19146 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   19130:	68a3      	ldr	r3, [r4, #8]
   19132:	7818      	ldrb	r0, [r3, #0]
   19134:	f012 fa8f 	bl	2b656 <att_op_get_type>
   19138:	1e43      	subs	r3, r0, #1
   1913a:	b2db      	uxtb	r3, r3
   1913c:	2b04      	cmp	r3, #4
   1913e:	bf9c      	itt	ls
   19140:	4a16      	ldrls	r2, [pc, #88]	; (1919c <chan_send+0xbc>)
   19142:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19146:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   19148:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1914c:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1914e:	4b14      	ldr	r3, [pc, #80]	; (191a0 <chan_send+0xc0>)
   19150:	429f      	cmp	r7, r3
   19152:	d018      	beq.n	19186 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   19154:	4b13      	ldr	r3, [pc, #76]	; (191a4 <chan_send+0xc4>)
   19156:	429f      	cmp	r7, r3
   19158:	d017      	beq.n	1918a <chan_send+0xaa>
		return att_sent;
   1915a:	4913      	ldr	r1, [pc, #76]	; (191a8 <chan_send+0xc8>)
   1915c:	4b13      	ldr	r3, [pc, #76]	; (191ac <chan_send+0xcc>)
   1915e:	4a14      	ldr	r2, [pc, #80]	; (191b0 <chan_send+0xd0>)
   19160:	428f      	cmp	r7, r1
   19162:	bf18      	it	ne
   19164:	4613      	movne	r3, r2
			       &chan->chan.chan);
   19166:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19168:	9600      	str	r6, [sp, #0]
   1916a:	4622      	mov	r2, r4
   1916c:	2104      	movs	r1, #4
   1916e:	f012 f9f3 	bl	2b558 <bt_l2cap_send_cb>
	if (err) {
   19172:	4605      	mov	r5, r0
   19174:	2800      	cmp	r0, #0
   19176:	d0cf      	beq.n	19118 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   19178:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1917a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1917e:	fa10 f088 	uxtah	r0, r0, r8
   19182:	60a0      	str	r0, [r4, #8]
}
   19184:	e7c8      	b.n	19118 <chan_send+0x38>
		return att_rsp_sent;
   19186:	4b0b      	ldr	r3, [pc, #44]	; (191b4 <chan_send+0xd4>)
   19188:	e7ed      	b.n	19166 <chan_send+0x86>
		return att_cfm_sent;
   1918a:	4b0b      	ldr	r3, [pc, #44]	; (191b8 <chan_send+0xd8>)
   1918c:	e7eb      	b.n	19166 <chan_send+0x86>
   1918e:	bf00      	nop
   19190:	0002d948 	.word	0x0002d948
   19194:	0002d950 	.word	0x0002d950
   19198:	00030d57 	.word	0x00030d57
   1919c:	0002dfac 	.word	0x0002dfac
   191a0:	0002b991 	.word	0x0002b991
   191a4:	0002b9ad 	.word	0x0002b9ad
   191a8:	0002b977 	.word	0x0002b977
   191ac:	000190b9 	.word	0x000190b9
   191b0:	0002b627 	.word	0x0002b627
   191b4:	000190a9 	.word	0x000190a9
   191b8:	00019099 	.word	0x00019099

000191bc <bt_att_chan_req_send>:
{
   191bc:	b538      	push	{r3, r4, r5, lr}
   191be:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   191c0:	4604      	mov	r4, r0
   191c2:	b958      	cbnz	r0, 191dc <bt_att_chan_req_send+0x20>
   191c4:	491d      	ldr	r1, [pc, #116]	; (1923c <bt_att_chan_req_send+0x80>)
   191c6:	481e      	ldr	r0, [pc, #120]	; (19240 <bt_att_chan_req_send+0x84>)
   191c8:	4a1e      	ldr	r2, [pc, #120]	; (19244 <bt_att_chan_req_send+0x88>)
   191ca:	f240 2333 	movw	r3, #563	; 0x233
   191ce:	f00f facf 	bl	28770 <printk>
   191d2:	481c      	ldr	r0, [pc, #112]	; (19244 <bt_att_chan_req_send+0x88>)
   191d4:	f240 2133 	movw	r1, #563	; 0x233
   191d8:	f00f fcbb 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(req);
   191dc:	b95d      	cbnz	r5, 191f6 <bt_att_chan_req_send+0x3a>
   191de:	491a      	ldr	r1, [pc, #104]	; (19248 <bt_att_chan_req_send+0x8c>)
   191e0:	4817      	ldr	r0, [pc, #92]	; (19240 <bt_att_chan_req_send+0x84>)
   191e2:	4a18      	ldr	r2, [pc, #96]	; (19244 <bt_att_chan_req_send+0x88>)
   191e4:	f44f 730d 	mov.w	r3, #564	; 0x234
   191e8:	f00f fac2 	bl	28770 <printk>
   191ec:	4815      	ldr	r0, [pc, #84]	; (19244 <bt_att_chan_req_send+0x88>)
   191ee:	f44f 710d 	mov.w	r1, #564	; 0x234
   191f2:	f00f fcae 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   191f6:	686b      	ldr	r3, [r5, #4]
   191f8:	b95b      	cbnz	r3, 19212 <bt_att_chan_req_send+0x56>
   191fa:	4914      	ldr	r1, [pc, #80]	; (1924c <bt_att_chan_req_send+0x90>)
   191fc:	4810      	ldr	r0, [pc, #64]	; (19240 <bt_att_chan_req_send+0x84>)
   191fe:	4a11      	ldr	r2, [pc, #68]	; (19244 <bt_att_chan_req_send+0x88>)
   19200:	f240 2335 	movw	r3, #565	; 0x235
   19204:	f00f fab4 	bl	28770 <printk>
   19208:	480e      	ldr	r0, [pc, #56]	; (19244 <bt_att_chan_req_send+0x88>)
   1920a:	f240 2135 	movw	r1, #565	; 0x235
   1920e:	f00f fca0 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   19212:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   19216:	b15b      	cbz	r3, 19230 <bt_att_chan_req_send+0x74>
   19218:	490d      	ldr	r1, [pc, #52]	; (19250 <bt_att_chan_req_send+0x94>)
   1921a:	4809      	ldr	r0, [pc, #36]	; (19240 <bt_att_chan_req_send+0x84>)
   1921c:	4a09      	ldr	r2, [pc, #36]	; (19244 <bt_att_chan_req_send+0x88>)
   1921e:	f240 2336 	movw	r3, #566	; 0x236
   19222:	f00f faa5 	bl	28770 <printk>
   19226:	4807      	ldr	r0, [pc, #28]	; (19244 <bt_att_chan_req_send+0x88>)
   19228:	f240 2136 	movw	r1, #566	; 0x236
   1922c:	f00f fc91 	bl	28b52 <assert_post_action>
	return chan_req_send(chan, req);
   19230:	4629      	mov	r1, r5
   19232:	4620      	mov	r0, r4
}
   19234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   19238:	f012 ba3a 	b.w	2b6b0 <chan_req_send>
   1923c:	00030d99 	.word	0x00030d99
   19240:	0002e915 	.word	0x0002e915
   19244:	00030d6a 	.word	0x00030d6a
   19248:	00030daf 	.word	0x00030daf
   1924c:	00030d9e 	.word	0x00030d9e
   19250:	00030da8 	.word	0x00030da8

00019254 <read_group_cb>:
{
   19254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19258:	4606      	mov	r6, r0
   1925a:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1925c:	f04f 0800 	mov.w	r8, #0
   19260:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19264:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   19266:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19268:	f88d 8008 	strb.w	r8, [sp, #8]
   1926c:	a902      	add	r1, sp, #8
{
   1926e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19270:	f8ad 300a 	strh.w	r3, [sp, #10]
   19274:	f011 fcdf 	bl	2ac36 <bt_uuid_cmp>
   19278:	b1a0      	cbz	r0, 192a4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1927a:	f642 0301 	movw	r3, #10241	; 0x2801
   1927e:	6830      	ldr	r0, [r6, #0]
   19280:	f88d 800c 	strb.w	r8, [sp, #12]
   19284:	a903      	add	r1, sp, #12
   19286:	f8ad 300e 	strh.w	r3, [sp, #14]
   1928a:	f011 fcd4 	bl	2ac36 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1928e:	b148      	cbz	r0, 192a4 <read_group_cb+0x50>
		if (data->group &&
   19290:	6923      	ldr	r3, [r4, #16]
   19292:	b11b      	cbz	r3, 1929c <read_group_cb+0x48>
   19294:	885a      	ldrh	r2, [r3, #2]
   19296:	42aa      	cmp	r2, r5
   19298:	d200      	bcs.n	1929c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1929a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1929c:	2001      	movs	r0, #1
}
   1929e:	b004      	add	sp, #16
   192a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   192a4:	6861      	ldr	r1, [r4, #4]
   192a6:	6830      	ldr	r0, [r6, #0]
   192a8:	f011 fcc5 	bl	2ac36 <bt_uuid_cmp>
   192ac:	b110      	cbz	r0, 192b4 <read_group_cb+0x60>
		data->group = NULL;
   192ae:	2300      	movs	r3, #0
   192b0:	6123      	str	r3, [r4, #16]
   192b2:	e7f3      	b.n	1929c <read_group_cb+0x48>
	if (data->rsp->len &&
   192b4:	68e3      	ldr	r3, [r4, #12]
   192b6:	68a0      	ldr	r0, [r4, #8]
   192b8:	781a      	ldrb	r2, [r3, #0]
   192ba:	b13a      	cbz	r2, 192cc <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   192bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   192c0:	8981      	ldrh	r1, [r0, #12]
   192c2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   192c4:	4293      	cmp	r3, r2
   192c6:	da01      	bge.n	192cc <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   192c8:	2000      	movs	r0, #0
   192ca:	e7e8      	b.n	1929e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   192cc:	2104      	movs	r1, #4
   192ce:	3008      	adds	r0, #8
   192d0:	f004 fd1e 	bl	1dd10 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   192d4:	4b09      	ldr	r3, [pc, #36]	; (192fc <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   192d6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   192d8:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   192da:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   192dc:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   192de:	4631      	mov	r1, r6
   192e0:	9300      	str	r3, [sp, #0]
   192e2:	9401      	str	r4, [sp, #4]
   192e4:	2300      	movs	r3, #0
   192e6:	4638      	mov	r0, r7
   192e8:	f012 fa23 	bl	2b732 <att_chan_read>
	if (read < 0) {
   192ec:	2800      	cmp	r0, #0
   192ee:	dbeb      	blt.n	192c8 <read_group_cb+0x74>
	if (!data->group) {
   192f0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   192f2:	3800      	subs	r0, #0
   192f4:	bf18      	it	ne
   192f6:	2001      	movne	r0, #1
   192f8:	e7d1      	b.n	1929e <read_group_cb+0x4a>
   192fa:	bf00      	nop
   192fc:	0002b957 	.word	0x0002b957

00019300 <read_type_cb>:
{
   19300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   19304:	f8d2 8000 	ldr.w	r8, [r2]
{
   19308:	4606      	mov	r6, r0
   1930a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1930c:	6800      	ldr	r0, [r0, #0]
   1930e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   19310:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   19314:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19316:	f011 fc8e 	bl	2ac36 <bt_uuid_cmp>
   1931a:	4607      	mov	r7, r0
   1931c:	2800      	cmp	r0, #0
   1931e:	d13e      	bne.n	1939e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   19320:	4628      	mov	r0, r5
   19322:	2215      	movs	r2, #21
   19324:	4631      	mov	r1, r6
   19326:	f012 ff10 	bl	2c14a <bt_gatt_check_perm>
   1932a:	4605      	mov	r5, r0
   1932c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1932e:	b148      	cbz	r0, 19344 <read_type_cb+0x44>
		if (data->rsp->len) {
   19330:	68e3      	ldr	r3, [r4, #12]
   19332:	781b      	ldrb	r3, [r3, #0]
   19334:	b923      	cbnz	r3, 19340 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   19336:	2500      	movs	r5, #0
}
   19338:	4628      	mov	r0, r5
   1933a:	b003      	add	sp, #12
   1933c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   19340:	7527      	strb	r7, [r4, #20]
   19342:	e7f8      	b.n	19336 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19344:	68a0      	ldr	r0, [r4, #8]
   19346:	f004 fc13 	bl	1db70 <net_buf_frag_last>
   1934a:	2102      	movs	r1, #2
   1934c:	3008      	adds	r0, #8
   1934e:	f004 fcdf 	bl	1dd10 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19352:	4b14      	ldr	r3, [pc, #80]	; (193a4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19354:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19356:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   19358:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1935c:	4631      	mov	r1, r6
   1935e:	9300      	str	r3, [sp, #0]
   19360:	9401      	str	r4, [sp, #4]
   19362:	462b      	mov	r3, r5
   19364:	4640      	mov	r0, r8
   19366:	f012 f9e4 	bl	2b732 <att_chan_read>
	if (read < 0) {
   1936a:	2800      	cmp	r0, #0
   1936c:	da07      	bge.n	1937e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1936e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   19372:	bf26      	itte	cs
   19374:	4240      	negcs	r0, r0
   19376:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   19378:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1937a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1937c:	e7dc      	b.n	19338 <read_type_cb+0x38>
	if (!data->item) {
   1937e:	6923      	ldr	r3, [r4, #16]
   19380:	2b00      	cmp	r3, #0
   19382:	d0d8      	beq.n	19336 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19384:	68a0      	ldr	r0, [r4, #8]
   19386:	f012 f946 	bl	2b616 <net_buf_frags_len>
   1938a:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1938e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19390:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19392:	7818      	ldrb	r0, [r3, #0]
   19394:	4285      	cmp	r5, r0
   19396:	bf94      	ite	ls
   19398:	2500      	movls	r5, #0
   1939a:	2501      	movhi	r5, #1
   1939c:	e7cc      	b.n	19338 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1939e:	2501      	movs	r5, #1
   193a0:	e7ca      	b.n	19338 <read_type_cb+0x38>
   193a2:	bf00      	nop
   193a4:	0002b633 	.word	0x0002b633

000193a8 <find_type_cb>:
{
   193a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   193ac:	f8d2 9000 	ldr.w	r9, [r2]
{
   193b0:	b091      	sub	sp, #68	; 0x44
   193b2:	4607      	mov	r7, r0
   193b4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   193b6:	2500      	movs	r5, #0
   193b8:	f642 0301 	movw	r3, #10241	; 0x2801
   193bc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   193be:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   193c2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   193c6:	a90b      	add	r1, sp, #44	; 0x2c
{
   193c8:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   193ca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   193ce:	f011 fc32 	bl	2ac36 <bt_uuid_cmp>
   193d2:	2800      	cmp	r0, #0
   193d4:	d066      	beq.n	194a4 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   193d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   193da:	6838      	ldr	r0, [r7, #0]
   193dc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   193e0:	a90b      	add	r1, sp, #44	; 0x2c
   193e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   193e6:	f011 fc26 	bl	2ac36 <bt_uuid_cmp>
   193ea:	b138      	cbz	r0, 193fc <find_type_cb+0x54>
		if (data->group &&
   193ec:	68a3      	ldr	r3, [r4, #8]
   193ee:	b11b      	cbz	r3, 193f8 <find_type_cb+0x50>
   193f0:	885a      	ldrh	r2, [r3, #2]
   193f2:	42b2      	cmp	r2, r6
   193f4:	d200      	bcs.n	193f8 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   193f6:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   193f8:	2001      	movs	r0, #1
   193fa:	e009      	b.n	19410 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   193fc:	6861      	ldr	r1, [r4, #4]
   193fe:	4608      	mov	r0, r1
   19400:	f012 f909 	bl	2b616 <net_buf_frags_len>
   19404:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   19408:	1a1b      	subs	r3, r3, r0
   1940a:	2b03      	cmp	r3, #3
   1940c:	d803      	bhi.n	19416 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1940e:	2000      	movs	r0, #0
}
   19410:	b011      	add	sp, #68	; 0x44
   19412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19416:	4608      	mov	r0, r1
   19418:	f004 fbaa 	bl	1db70 <net_buf_frag_last>
   1941c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1941e:	6860      	ldr	r0, [r4, #4]
   19420:	f012 f8f9 	bl	2b616 <net_buf_frags_len>
   19424:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   19428:	f105 0b08 	add.w	fp, r5, #8
   1942c:	ebaa 0a00 	sub.w	sl, sl, r0
   19430:	4658      	mov	r0, fp
   19432:	f013 fac5 	bl	2c9c0 <net_buf_simple_tailroom>
   19436:	4582      	cmp	sl, r0
   19438:	d237      	bcs.n	194aa <find_type_cb+0x102>
   1943a:	6860      	ldr	r0, [r4, #4]
   1943c:	f012 f8eb 	bl	2b616 <net_buf_frags_len>
   19440:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   19444:	1a18      	subs	r0, r3, r0
	if (!len) {
   19446:	b970      	cbnz	r0, 19466 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19448:	6863      	ldr	r3, [r4, #4]
   1944a:	7998      	ldrb	r0, [r3, #6]
   1944c:	f004 f92e 	bl	1d6ac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   19450:	2200      	movs	r2, #0
   19452:	2300      	movs	r3, #0
   19454:	f013 faa3 	bl	2c99e <net_buf_alloc_fixed>
		if (!frag) {
   19458:	4605      	mov	r5, r0
   1945a:	2800      	cmp	r0, #0
   1945c:	d0d7      	beq.n	1940e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1945e:	4601      	mov	r1, r0
   19460:	6860      	ldr	r0, [r4, #4]
   19462:	f004 fbcd 	bl	1dc00 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   19466:	2300      	movs	r3, #0
   19468:	9300      	str	r3, [sp, #0]
   1946a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1946e:	4639      	mov	r1, r7
   19470:	2310      	movs	r3, #16
   19472:	aa02      	add	r2, sp, #8
   19474:	4640      	mov	r0, r8
   19476:	47c8      	blx	r9
	if (read < 0) {
   19478:	1e07      	subs	r7, r0, #0
   1947a:	db13      	blt.n	194a4 <find_type_cb+0xfc>
	if (read != data->value_len) {
   1947c:	7c22      	ldrb	r2, [r4, #16]
   1947e:	68e0      	ldr	r0, [r4, #12]
   19480:	42ba      	cmp	r2, r7
   19482:	d037      	beq.n	194f4 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19484:	4601      	mov	r1, r0
   19486:	a80b      	add	r0, sp, #44	; 0x2c
   19488:	f011 fbff 	bl	2ac8a <bt_uuid_create>
   1948c:	b988      	cbnz	r0, 194b2 <find_type_cb+0x10a>
   1948e:	4a1b      	ldr	r2, [pc, #108]	; (194fc <find_type_cb+0x154>)
   19490:	4b1b      	ldr	r3, [pc, #108]	; (19500 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   19492:	7c21      	ldrb	r1, [r4, #16]
   19494:	481b      	ldr	r0, [pc, #108]	; (19504 <find_type_cb+0x15c>)
   19496:	1ad2      	subs	r2, r2, r3
   19498:	08d2      	lsrs	r2, r2, #3
   1949a:	0192      	lsls	r2, r2, #6
   1949c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   194a0:	f00f fb92 	bl	28bc8 <log_1>
	data->group = NULL;
   194a4:	2300      	movs	r3, #0
   194a6:	60a3      	str	r3, [r4, #8]
   194a8:	e7a6      	b.n	193f8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   194aa:	4658      	mov	r0, fp
   194ac:	f013 fa88 	bl	2c9c0 <net_buf_simple_tailroom>
   194b0:	e7c9      	b.n	19446 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   194b2:	b2fa      	uxtb	r2, r7
   194b4:	a902      	add	r1, sp, #8
   194b6:	a806      	add	r0, sp, #24
   194b8:	f011 fbe7 	bl	2ac8a <bt_uuid_create>
   194bc:	b948      	cbnz	r0, 194d2 <find_type_cb+0x12a>
   194be:	4a0f      	ldr	r2, [pc, #60]	; (194fc <find_type_cb+0x154>)
   194c0:	4b0f      	ldr	r3, [pc, #60]	; (19500 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   194c2:	4811      	ldr	r0, [pc, #68]	; (19508 <find_type_cb+0x160>)
   194c4:	1ad2      	subs	r2, r2, r3
   194c6:	08d2      	lsrs	r2, r2, #3
   194c8:	0192      	lsls	r2, r2, #6
   194ca:	f042 0202 	orr.w	r2, r2, #2
   194ce:	4639      	mov	r1, r7
   194d0:	e7e6      	b.n	194a0 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   194d2:	a906      	add	r1, sp, #24
   194d4:	a80b      	add	r0, sp, #44	; 0x2c
   194d6:	f011 fbae 	bl	2ac36 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   194da:	2800      	cmp	r0, #0
   194dc:	d1e2      	bne.n	194a4 <find_type_cb+0xfc>
	data->err = 0x00;
   194de:	2300      	movs	r3, #0
   194e0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   194e2:	2104      	movs	r1, #4
   194e4:	f105 0008 	add.w	r0, r5, #8
   194e8:	f004 fc12 	bl	1dd10 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   194ec:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   194ee:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   194f0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   194f2:	e781      	b.n	193f8 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   194f4:	a902      	add	r1, sp, #8
   194f6:	f011 faa9 	bl	2aa4c <memcmp>
   194fa:	e7ee      	b.n	194da <find_type_cb+0x132>
   194fc:	0002d950 	.word	0x0002d950
   19500:	0002d948 	.word	0x0002d948
   19504:	00030db3 	.word	0x00030db3
   19508:	00030dd2 	.word	0x00030dd2

0001950c <att_get>:
{
   1950c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1950e:	7b43      	ldrb	r3, [r0, #13]
   19510:	2b07      	cmp	r3, #7
   19512:	d00b      	beq.n	1952c <att_get+0x20>
   19514:	4918      	ldr	r1, [pc, #96]	; (19578 <att_get+0x6c>)
   19516:	4b19      	ldr	r3, [pc, #100]	; (1957c <att_get+0x70>)
		BT_WARN("Not connected");
   19518:	4819      	ldr	r0, [pc, #100]	; (19580 <att_get+0x74>)
   1951a:	1ac9      	subs	r1, r1, r3
   1951c:	08c9      	lsrs	r1, r1, #3
   1951e:	0189      	lsls	r1, r1, #6
   19520:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   19524:	f00f fb43 	bl	28bae <log_0>
		return NULL;
   19528:	2400      	movs	r4, #0
   1952a:	e00e      	b.n	1954a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1952c:	2104      	movs	r1, #4
   1952e:	f012 f83c 	bl	2b5aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19532:	4604      	mov	r4, r0
   19534:	b958      	cbnz	r0, 1954e <att_get+0x42>
   19536:	4910      	ldr	r1, [pc, #64]	; (19578 <att_get+0x6c>)
   19538:	4b10      	ldr	r3, [pc, #64]	; (1957c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   1953a:	4812      	ldr	r0, [pc, #72]	; (19584 <att_get+0x78>)
   1953c:	1ac9      	subs	r1, r1, r3
   1953e:	08c9      	lsrs	r1, r1, #3
   19540:	0189      	lsls	r1, r1, #6
   19542:	f041 0101 	orr.w	r1, r1, #1
   19546:	f00f fb32 	bl	28bae <log_0>
}
   1954a:	4620      	mov	r0, r4
   1954c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1954e:	f3bf 8f5b 	dmb	ish
   19552:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   19556:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1955a:	075b      	lsls	r3, r3, #29
   1955c:	d508      	bpl.n	19570 <att_get+0x64>
   1955e:	4906      	ldr	r1, [pc, #24]	; (19578 <att_get+0x6c>)
   19560:	4b06      	ldr	r3, [pc, #24]	; (1957c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   19562:	4809      	ldr	r0, [pc, #36]	; (19588 <att_get+0x7c>)
   19564:	1ac9      	subs	r1, r1, r3
   19566:	08c9      	lsrs	r1, r1, #3
   19568:	0189      	lsls	r1, r1, #6
   1956a:	f041 0102 	orr.w	r1, r1, #2
   1956e:	e7d9      	b.n	19524 <att_get+0x18>
	return att_chan->att;
   19570:	f850 4c08 	ldr.w	r4, [r0, #-8]
   19574:	e7e9      	b.n	1954a <att_get+0x3e>
   19576:	bf00      	nop
   19578:	0002d950 	.word	0x0002d950
   1957c:	0002d948 	.word	0x0002d948
   19580:	00030df1 	.word	0x00030df1
   19584:	00030dff 	.word	0x00030dff
   19588:	00030e1a 	.word	0x00030e1a

0001958c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   1958c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   1958e:	4a07      	ldr	r2, [pc, #28]	; (195ac <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   19590:	4604      	mov	r4, r0
   19592:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   19594:	f7ff fda4 	bl	190e0 <chan_send>
	if (err) {
   19598:	b130      	cbz	r0, 195a8 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   1959a:	4629      	mov	r1, r5
   1959c:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   195a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   195a4:	f004 ba50 	b.w	1da48 <net_buf_put>
}
   195a8:	bd38      	pop	{r3, r4, r5, pc}
   195aa:	bf00      	nop
   195ac:	0002b991 	.word	0x0002b991

000195b0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   195b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   195b2:	2300      	movs	r3, #0
{
   195b4:	4606      	mov	r6, r0
   195b6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   195b8:	4829      	ldr	r0, [pc, #164]	; (19660 <bt_att_accept+0xb0>)
   195ba:	2200      	movs	r2, #0
   195bc:	4669      	mov	r1, sp
   195be:	f008 fcbb 	bl	21f38 <k_mem_slab_alloc>
   195c2:	4604      	mov	r4, r0
   195c4:	b178      	cbz	r0, 195e6 <bt_att_accept+0x36>
   195c6:	4a27      	ldr	r2, [pc, #156]	; (19664 <bt_att_accept+0xb4>)
   195c8:	4b27      	ldr	r3, [pc, #156]	; (19668 <bt_att_accept+0xb8>)
		BT_ERR("No available ATT context for conn %p", conn);
   195ca:	4828      	ldr	r0, [pc, #160]	; (1966c <bt_att_accept+0xbc>)
   195cc:	1ad2      	subs	r2, r2, r3
   195ce:	08d2      	lsrs	r2, r2, #3
   195d0:	0192      	lsls	r2, r2, #6
   195d2:	f042 0201 	orr.w	r2, r2, #1
   195d6:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   195d8:	f00f faf6 	bl	28bc8 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   195dc:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   195e0:	4620      	mov	r0, r4
   195e2:	b003      	add	sp, #12
   195e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   195e6:	4601      	mov	r1, r0
   195e8:	2230      	movs	r2, #48	; 0x30
   195ea:	9800      	ldr	r0, [sp, #0]
   195ec:	f011 fa60 	bl	2aab0 <memset>
	att->conn = conn;
   195f0:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   195f2:	481f      	ldr	r0, [pc, #124]	; (19670 <bt_att_accept+0xc0>)
	list->tail = NULL;
   195f4:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   195f6:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   195fa:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   195fe:	2200      	movs	r2, #0
   19600:	2300      	movs	r3, #0
   19602:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19604:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19606:	f008 fc97 	bl	21f38 <k_mem_slab_alloc>
   1960a:	4604      	mov	r4, r0
   1960c:	b148      	cbz	r0, 19622 <bt_att_accept+0x72>
   1960e:	4a15      	ldr	r2, [pc, #84]	; (19664 <bt_att_accept+0xb4>)
   19610:	4b15      	ldr	r3, [pc, #84]	; (19668 <bt_att_accept+0xb8>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   19612:	6829      	ldr	r1, [r5, #0]
   19614:	4817      	ldr	r0, [pc, #92]	; (19674 <bt_att_accept+0xc4>)
   19616:	1ad2      	subs	r2, r2, r3
   19618:	08d2      	lsrs	r2, r2, #3
   1961a:	0192      	lsls	r2, r2, #6
   1961c:	f042 0201 	orr.w	r2, r2, #1
   19620:	e7da      	b.n	195d8 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   19622:	4601      	mov	r1, r0
   19624:	f44f 72ac 	mov.w	r2, #344	; 0x158
   19628:	9801      	ldr	r0, [sp, #4]
   1962a:	f011 fa41 	bl	2aab0 <memset>
	chan->chan.chan.ops = &ops;
   1962e:	9801      	ldr	r0, [sp, #4]
   19630:	4b11      	ldr	r3, [pc, #68]	; (19678 <bt_att_accept+0xc8>)
   19632:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   19634:	f500 7080 	add.w	r0, r0, #256	; 0x100
   19638:	f013 fe49 	bl	2d2ce <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1963c:	9b01      	ldr	r3, [sp, #4]
   1963e:	f3bf 8f5b 	dmb	ish
   19642:	33f8      	adds	r3, #248	; 0xf8
   19644:	e853 2f00 	ldrex	r2, [r3]
   19648:	e843 4100 	strex	r1, r4, [r3]
   1964c:	2900      	cmp	r1, #0
   1964e:	d1f9      	bne.n	19644 <bt_att_accept+0x94>
   19650:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19654:	9b01      	ldr	r3, [sp, #4]
   19656:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1965a:	603b      	str	r3, [r7, #0]
	return 0;
   1965c:	e7c0      	b.n	195e0 <bt_att_accept+0x30>
   1965e:	bf00      	nop
   19660:	200007c0 	.word	0x200007c0
   19664:	0002d950 	.word	0x0002d950
   19668:	0002d948 	.word	0x0002d948
   1966c:	00030e3e 	.word	0x00030e3e
   19670:	200007e0 	.word	0x200007e0
   19674:	00030e63 	.word	0x00030e63
   19678:	20000518 	.word	0x20000518

0001967c <bt_att_connected>:
{
   1967c:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1967e:	2104      	movs	r1, #4
{
   19680:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   19682:	6800      	ldr	r0, [r0, #0]
   19684:	f011 ff81 	bl	2b58a <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   19688:	4605      	mov	r5, r0
   1968a:	b970      	cbnz	r0, 196aa <bt_att_connected+0x2e>
   1968c:	491c      	ldr	r1, [pc, #112]	; (19700 <bt_att_connected+0x84>)
   1968e:	4a1d      	ldr	r2, [pc, #116]	; (19704 <bt_att_connected+0x88>)
   19690:	481d      	ldr	r0, [pc, #116]	; (19708 <bt_att_connected+0x8c>)
   19692:	f640 2381 	movw	r3, #2689	; 0xa81
   19696:	f00f f86b 	bl	28770 <printk>
   1969a:	481c      	ldr	r0, [pc, #112]	; (1970c <bt_att_connected+0x90>)
   1969c:	f00f f868 	bl	28770 <printk>
   196a0:	4818      	ldr	r0, [pc, #96]	; (19704 <bt_att_connected+0x88>)
   196a2:	f640 2181 	movw	r1, #2689	; 0xa81
   196a6:	f00f fa54 	bl	28b52 <assert_post_action>
	struct bt_att *att = att_chan->att;
   196aa:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   196ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   196b0:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   196b4:	b91b      	cbnz	r3, 196be <bt_att_connected+0x42>
   196b6:	f105 000c 	add.w	r0, r5, #12
   196ba:	f013 fe08 	bl	2d2ce <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   196be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   196c0:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   196c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   196c6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   196ca:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   196cc:	b902      	cbnz	r2, 196d0 <bt_att_connected+0x54>
	list->tail = node;
   196ce:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   196d0:	f3bf 8f5b 	dmb	ish
   196d4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   196d8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   196dc:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   196de:	bf58      	it	pl
   196e0:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   196e2:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   196e4:	bf5c      	itt	pl
   196e6:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   196ea:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   196ee:	f012 f8f7 	bl	2b8e0 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   196f2:	f504 708c 	add.w	r0, r4, #280	; 0x118
   196f6:	4906      	ldr	r1, [pc, #24]	; (19710 <bt_att_connected+0x94>)
}
   196f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   196fc:	f009 bdc4 	b.w	23288 <k_work_init_delayable>
   19700:	00030d99 	.word	0x00030d99
   19704:	00030d6a 	.word	0x00030d6a
   19708:	0002e915 	.word	0x0002e915
   1970c:	00030e88 	.word	0x00030e88
   19710:	0001a059 	.word	0x0001a059

00019714 <att_write_cmd>:
{
   19714:	b5f0      	push	{r4, r5, r6, r7, lr}
   19716:	4604      	mov	r4, r0
   19718:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1971a:	f101 0008 	add.w	r0, r1, #8
   1971e:	460d      	mov	r5, r1
   19720:	f013 f942 	bl	2c9a8 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19724:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   19726:	68af      	ldr	r7, [r5, #8]
   19728:	89ad      	ldrh	r5, [r5, #12]
   1972a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1972c:	2100      	movs	r1, #0
   1972e:	6818      	ldr	r0, [r3, #0]
   19730:	f012 fd36 	bl	2c1a0 <bt_gatt_change_aware>
   19734:	b320      	cbz	r0, 19780 <att_write_cmd+0x6c>
	if (!handle) {
   19736:	b32e      	cbz	r6, 19784 <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   19738:	2218      	movs	r2, #24
   1973a:	2100      	movs	r1, #0
   1973c:	4668      	mov	r0, sp
   1973e:	f011 f9b7 	bl	2aab0 <memset>
	data.conn = chan->att->conn;
   19742:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19744:	4a10      	ldr	r2, [pc, #64]	; (19788 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   19746:	681b      	ldr	r3, [r3, #0]
   19748:	9300      	str	r3, [sp, #0]
	data.req = req;
   1974a:	2300      	movs	r3, #0
   1974c:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   19750:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19754:	2301      	movs	r3, #1
   19756:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1975a:	4631      	mov	r1, r6
   1975c:	466b      	mov	r3, sp
   1975e:	4630      	mov	r0, r6
	data.value = value;
   19760:	9703      	str	r7, [sp, #12]
	data.len = len;
   19762:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19766:	f011 ffd9 	bl	2b71c <bt_gatt_foreach_attr>
	if (data.err) {
   1976a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1976e:	b923      	cbnz	r3, 1977a <att_write_cmd+0x66>
	if (data.buf) {
   19770:	9901      	ldr	r1, [sp, #4]
   19772:	b111      	cbz	r1, 1977a <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19774:	4620      	mov	r0, r4
   19776:	f7ff ff09 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
   1977a:	2000      	movs	r0, #0
}
   1977c:	b007      	add	sp, #28
   1977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19780:	2012      	movs	r0, #18
   19782:	e7fb      	b.n	1977c <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   19784:	2001      	movs	r0, #1
   19786:	e7f9      	b.n	1977c <att_write_cmd+0x68>
   19788:	0002ba69 	.word	0x0002ba69

0001978c <bt_att_chan_create_pdu>:
{
   1978c:	b538      	push	{r3, r4, r5, lr}
   1978e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19790:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   19794:	3201      	adds	r2, #1
   19796:	428a      	cmp	r2, r1
   19798:	d90c      	bls.n	197b4 <bt_att_chan_create_pdu+0x28>
   1979a:	481a      	ldr	r0, [pc, #104]	; (19804 <bt_att_chan_create_pdu+0x78>)
   1979c:	4b1a      	ldr	r3, [pc, #104]	; (19808 <bt_att_chan_create_pdu+0x7c>)
   1979e:	1a1b      	subs	r3, r3, r0
   197a0:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   197a2:	019b      	lsls	r3, r3, #6
   197a4:	4819      	ldr	r0, [pc, #100]	; (1980c <bt_att_chan_create_pdu+0x80>)
   197a6:	f043 0302 	orr.w	r3, r3, #2
   197aa:	f00f fa21 	bl	28bf0 <log_2>
		return NULL;
   197ae:	2400      	movs	r4, #0
}
   197b0:	4620      	mov	r0, r4
   197b2:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   197b4:	4628      	mov	r0, r5
   197b6:	f011 ff4e 	bl	2b656 <att_op_get_type>
   197ba:	2802      	cmp	r0, #2
   197bc:	d001      	beq.n	197c2 <bt_att_chan_create_pdu+0x36>
   197be:	2804      	cmp	r0, #4
   197c0:	d114      	bne.n	197ec <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   197c2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   197c6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   197c8:	2100      	movs	r1, #0
   197ca:	4608      	mov	r0, r1
   197cc:	f011 fec1 	bl	2b552 <bt_l2cap_create_pdu_timeout>
   197d0:	4604      	mov	r4, r0
	if (!buf) {
   197d2:	b980      	cbnz	r0, 197f6 <bt_att_chan_create_pdu+0x6a>
   197d4:	4b0b      	ldr	r3, [pc, #44]	; (19804 <bt_att_chan_create_pdu+0x78>)
   197d6:	4a0c      	ldr	r2, [pc, #48]	; (19808 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   197d8:	480d      	ldr	r0, [pc, #52]	; (19810 <bt_att_chan_create_pdu+0x84>)
   197da:	1ad2      	subs	r2, r2, r3
   197dc:	08d2      	lsrs	r2, r2, #3
   197de:	0192      	lsls	r2, r2, #6
   197e0:	f042 0201 	orr.w	r2, r2, #1
   197e4:	4629      	mov	r1, r5
   197e6:	f00f f9ef 	bl	28bc8 <log_1>
		return NULL;
   197ea:	e7e1      	b.n	197b0 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   197ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   197f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   197f4:	e7e8      	b.n	197c8 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   197f6:	2101      	movs	r1, #1
   197f8:	3008      	adds	r0, #8
   197fa:	f004 fa89 	bl	1dd10 <net_buf_simple_add>
	hdr->code = op;
   197fe:	7005      	strb	r5, [r0, #0]
	return buf;
   19800:	e7d6      	b.n	197b0 <bt_att_chan_create_pdu+0x24>
   19802:	bf00      	nop
   19804:	0002d948 	.word	0x0002d948
   19808:	0002d950 	.word	0x0002d950
   1980c:	00030e9f 	.word	0x00030e9f
   19810:	00030bd4 	.word	0x00030bd4

00019814 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   19814:	898b      	ldrh	r3, [r1, #12]
{
   19816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1981a:	4604      	mov	r4, r0
   1981c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1981e:	b963      	cbnz	r3, 1983a <bt_att_recv+0x26>
   19820:	494e      	ldr	r1, [pc, #312]	; (1995c <bt_att_recv+0x148>)
   19822:	4b4f      	ldr	r3, [pc, #316]	; (19960 <bt_att_recv+0x14c>)
		BT_ERR("Too small ATT PDU received");
   19824:	484f      	ldr	r0, [pc, #316]	; (19964 <bt_att_recv+0x150>)
   19826:	1ac9      	subs	r1, r1, r3
   19828:	08c9      	lsrs	r1, r1, #3
   1982a:	0189      	lsls	r1, r1, #6
   1982c:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   19830:	f00f f9bd 	bl	28bae <log_0>
}
   19834:	2000      	movs	r0, #0
   19836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1983a:	2101      	movs	r1, #1
   1983c:	f108 0008 	add.w	r0, r8, #8
   19840:	f004 fa44 	bl	1dccc <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19844:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19848:	4605      	mov	r5, r0
   1984a:	2b00      	cmp	r3, #0
   1984c:	d0f2      	beq.n	19834 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   1984e:	4a46      	ldr	r2, [pc, #280]	; (19968 <bt_att_recv+0x154>)
   19850:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19852:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19856:	2300      	movs	r3, #0
   19858:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1985a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1985e:	4288      	cmp	r0, r1
   19860:	d11d      	bne.n	1989e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   19862:	00d8      	lsls	r0, r3, #3
   19864:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19868:	789f      	ldrb	r7, [r3, #2]
   1986a:	2f01      	cmp	r7, #1
   1986c:	d134      	bne.n	198d8 <bt_att_recv+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1986e:	f3bf 8f5b 	dmb	ish
   19872:	34f0      	adds	r4, #240	; 0xf0
   19874:	e854 3f00 	ldrex	r3, [r4]
   19878:	f043 0201 	orr.w	r2, r3, #1
   1987c:	e844 2100 	strex	r1, r2, [r4]
   19880:	2900      	cmp	r1, #0
   19882:	d1f7      	bne.n	19874 <bt_att_recv+0x60>
   19884:	f3bf 8f5b 	dmb	ish
   19888:	07da      	lsls	r2, r3, #31
   1988a:	d53f      	bpl.n	1990c <bt_att_recv+0xf8>
   1988c:	4933      	ldr	r1, [pc, #204]	; (1995c <bt_att_recv+0x148>)
   1988e:	4b34      	ldr	r3, [pc, #208]	; (19960 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
   19890:	4836      	ldr	r0, [pc, #216]	; (1996c <bt_att_recv+0x158>)
   19892:	1ac9      	subs	r1, r1, r3
   19894:	08c9      	lsrs	r1, r1, #3
   19896:	0189      	lsls	r1, r1, #6
   19898:	f041 0102 	orr.w	r1, r1, #2
   1989c:	e7c8      	b.n	19830 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1989e:	3301      	adds	r3, #1
   198a0:	2b0d      	cmp	r3, #13
   198a2:	d1da      	bne.n	1985a <bt_att_recv+0x46>
   198a4:	4b2e      	ldr	r3, [pc, #184]	; (19960 <bt_att_recv+0x14c>)
   198a6:	4a2d      	ldr	r2, [pc, #180]	; (1995c <bt_att_recv+0x148>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   198a8:	4831      	ldr	r0, [pc, #196]	; (19970 <bt_att_recv+0x15c>)
   198aa:	1ad2      	subs	r2, r2, r3
   198ac:	08d2      	lsrs	r2, r2, #3
   198ae:	0192      	lsls	r2, r2, #6
   198b0:	f042 0202 	orr.w	r2, r2, #2
   198b4:	f00f f988 	bl	28bc8 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   198b8:	7829      	ldrb	r1, [r5, #0]
   198ba:	4608      	mov	r0, r1
   198bc:	f011 fecb 	bl	2b656 <att_op_get_type>
   198c0:	2800      	cmp	r0, #0
   198c2:	d0b7      	beq.n	19834 <bt_att_recv+0x20>
   198c4:	2805      	cmp	r0, #5
   198c6:	d0b5      	beq.n	19834 <bt_att_recv+0x20>
	if (!req) {
   198c8:	2900      	cmp	r1, #0
   198ca:	d0b3      	beq.n	19834 <bt_att_recv+0x20>
   198cc:	2306      	movs	r3, #6
   198ce:	2200      	movs	r2, #0
   198d0:	4630      	mov	r0, r6
   198d2:	f012 f962 	bl	2bb9a <send_err_rsp.part.0>
   198d6:	e7ad      	b.n	19834 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   198d8:	2f05      	cmp	r7, #5
   198da:	d117      	bne.n	1990c <bt_att_recv+0xf8>
   198dc:	f3bf 8f5b 	dmb	ish
   198e0:	34f0      	adds	r4, #240	; 0xf0
   198e2:	e854 3f00 	ldrex	r3, [r4]
   198e6:	f043 0202 	orr.w	r2, r3, #2
   198ea:	e844 2100 	strex	r1, r2, [r4]
   198ee:	2900      	cmp	r1, #0
   198f0:	d1f7      	bne.n	198e2 <bt_att_recv+0xce>
   198f2:	f3bf 8f5b 	dmb	ish
   198f6:	079b      	lsls	r3, r3, #30
   198f8:	d508      	bpl.n	1990c <bt_att_recv+0xf8>
   198fa:	4918      	ldr	r1, [pc, #96]	; (1995c <bt_att_recv+0x148>)
   198fc:	4b18      	ldr	r3, [pc, #96]	; (19960 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected indication");
   198fe:	481d      	ldr	r0, [pc, #116]	; (19974 <bt_att_recv+0x160>)
   19900:	1ac9      	subs	r1, r1, r3
   19902:	08c9      	lsrs	r1, r1, #3
   19904:	0189      	lsls	r1, r1, #6
   19906:	f041 0102 	orr.w	r1, r1, #2
   1990a:	e791      	b.n	19830 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   1990c:	eb0c 0300 	add.w	r3, ip, r0
   19910:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   19914:	785a      	ldrb	r2, [r3, #1]
   19916:	428a      	cmp	r2, r1
   19918:	d90f      	bls.n	1993a <bt_att_recv+0x126>
   1991a:	4a11      	ldr	r2, [pc, #68]	; (19960 <bt_att_recv+0x14c>)
   1991c:	4b0f      	ldr	r3, [pc, #60]	; (1995c <bt_att_recv+0x148>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1991e:	4816      	ldr	r0, [pc, #88]	; (19978 <bt_att_recv+0x164>)
   19920:	1a9b      	subs	r3, r3, r2
   19922:	08db      	lsrs	r3, r3, #3
   19924:	019b      	lsls	r3, r3, #6
   19926:	782a      	ldrb	r2, [r5, #0]
   19928:	f043 0301 	orr.w	r3, r3, #1
   1992c:	f00f f960 	bl	28bf0 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   19930:	2f01      	cmp	r7, #1
   19932:	f47f af7f 	bne.w	19834 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   19936:	2304      	movs	r3, #4
   19938:	e00a      	b.n	19950 <bt_att_recv+0x13c>
		err = handler->func(att_chan, buf);
   1993a:	685b      	ldr	r3, [r3, #4]
   1993c:	4641      	mov	r1, r8
   1993e:	4630      	mov	r0, r6
   19940:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19942:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   19944:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19946:	f47f af75 	bne.w	19834 <bt_att_recv+0x20>
   1994a:	2800      	cmp	r0, #0
   1994c:	f43f af72 	beq.w	19834 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19950:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   19952:	2900      	cmp	r1, #0
   19954:	f43f af6e 	beq.w	19834 <bt_att_recv+0x20>
   19958:	e7b9      	b.n	198ce <bt_att_recv+0xba>
   1995a:	bf00      	nop
   1995c:	0002d950 	.word	0x0002d950
   19960:	0002d948 	.word	0x0002d948
   19964:	00030ec4 	.word	0x00030ec4
   19968:	0002dfc0 	.word	0x0002dfc0
   1996c:	00030edf 	.word	0x00030edf
   19970:	00030f39 	.word	0x00030f39
   19974:	00030efb 	.word	0x00030efb
   19978:	00030f1a 	.word	0x00030f1a

0001997c <att_write_req>:
{
   1997c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19980:	4604      	mov	r4, r0
   19982:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   19984:	f101 0008 	add.w	r0, r1, #8
   19988:	460d      	mov	r5, r1
   1998a:	f013 f80d 	bl	2c9a8 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1998e:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   19990:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   19994:	89ad      	ldrh	r5, [r5, #12]
   19996:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19998:	2101      	movs	r1, #1
   1999a:	6818      	ldr	r0, [r3, #0]
   1999c:	f012 fc00 	bl	2c1a0 <bt_gatt_change_aware>
   199a0:	2800      	cmp	r0, #0
   199a2:	d03f      	beq.n	19a24 <att_write_req+0xa8>
	if (!handle) {
   199a4:	2e00      	cmp	r6, #0
   199a6:	d03f      	beq.n	19a28 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   199a8:	2218      	movs	r2, #24
   199aa:	2100      	movs	r1, #0
   199ac:	4668      	mov	r0, sp
   199ae:	f011 f87f 	bl	2aab0 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   199b2:	2200      	movs	r2, #0
   199b4:	2113      	movs	r1, #19
   199b6:	4620      	mov	r0, r4
   199b8:	f7ff fee8 	bl	1978c <bt_att_chan_create_pdu>
   199bc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   199be:	b378      	cbz	r0, 19a20 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   199c0:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   199c2:	4a1a      	ldr	r2, [pc, #104]	; (19a2c <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   199c4:	681b      	ldr	r3, [r3, #0]
   199c6:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   199c8:	2301      	movs	r3, #1
   199ca:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   199ce:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   199d2:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   199d4:	466b      	mov	r3, sp
   199d6:	4631      	mov	r1, r6
   199d8:	4630      	mov	r0, r6
	data.len = len;
   199da:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   199de:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   199e2:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   199e6:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   199ea:	f011 fe97 	bl	2b71c <bt_gatt_foreach_attr>
	if (data.err) {
   199ee:	f89d 5014 	ldrb.w	r5, [sp, #20]
   199f2:	b175      	cbz	r5, 19a12 <att_write_req+0x96>
			net_buf_unref(data.buf);
   199f4:	9801      	ldr	r0, [sp, #4]
   199f6:	f004 f85b 	bl	1dab0 <net_buf_unref>
	if (!req) {
   199fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   199fe:	4632      	mov	r2, r6
   19a00:	4641      	mov	r1, r8
   19a02:	4620      	mov	r0, r4
   19a04:	f012 f8c9 	bl	2bb9a <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   19a08:	463d      	mov	r5, r7
}
   19a0a:	4628      	mov	r0, r5
   19a0c:	b007      	add	sp, #28
   19a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   19a12:	9901      	ldr	r1, [sp, #4]
   19a14:	2900      	cmp	r1, #0
   19a16:	d0f8      	beq.n	19a0a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19a18:	4620      	mov	r0, r4
   19a1a:	f7ff fdb7 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
   19a1e:	e7f4      	b.n	19a0a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   19a20:	250e      	movs	r5, #14
   19a22:	e7f2      	b.n	19a0a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19a24:	2512      	movs	r5, #18
   19a26:	e7f0      	b.n	19a0a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   19a28:	2501      	movs	r5, #1
   19a2a:	e7ee      	b.n	19a0a <att_write_req+0x8e>
   19a2c:	0002ba69 	.word	0x0002ba69

00019a30 <bt_att_create_pdu>:
{
   19a30:	b570      	push	{r4, r5, r6, lr}
   19a32:	460e      	mov	r6, r1
   19a34:	4615      	mov	r5, r2
	att = att_get(conn);
   19a36:	f7ff fd69 	bl	1950c <att_get>
	if (!att) {
   19a3a:	b1c0      	cbz	r0, 19a6e <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19a3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
   19a3e:	1c69      	adds	r1, r5, #1
   19a40:	b15b      	cbz	r3, 19a5a <bt_att_create_pdu+0x2a>
   19a42:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   19a46:	d008      	beq.n	19a5a <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19a48:	681b      	ldr	r3, [r3, #0]
   19a4a:	b10b      	cbz	r3, 19a50 <bt_att_create_pdu+0x20>
   19a4c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19a50:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   19a54:	4291      	cmp	r1, r2
   19a56:	d90c      	bls.n	19a72 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19a58:	b98b      	cbnz	r3, 19a7e <bt_att_create_pdu+0x4e>
   19a5a:	4a0e      	ldr	r2, [pc, #56]	; (19a94 <bt_att_create_pdu+0x64>)
   19a5c:	4b0e      	ldr	r3, [pc, #56]	; (19a98 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   19a5e:	480f      	ldr	r0, [pc, #60]	; (19a9c <bt_att_create_pdu+0x6c>)
   19a60:	1ad2      	subs	r2, r2, r3
   19a62:	08d2      	lsrs	r2, r2, #3
   19a64:	0192      	lsls	r2, r2, #6
   19a66:	f042 0202 	orr.w	r2, r2, #2
   19a6a:	f00f f8ad 	bl	28bc8 <log_1>
}
   19a6e:	2000      	movs	r0, #0
   19a70:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   19a72:	462a      	mov	r2, r5
   19a74:	4631      	mov	r1, r6
}
   19a76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   19a7a:	f7ff be87 	b.w	1978c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19a7e:	f513 74aa 	adds.w	r4, r3, #340	; 0x154
   19a82:	d004      	beq.n	19a8e <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19a84:	f8d3 4154 	ldr.w	r4, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19a88:	b10c      	cbz	r4, 19a8e <bt_att_create_pdu+0x5e>
   19a8a:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
{
   19a8e:	4618      	mov	r0, r3
   19a90:	4623      	mov	r3, r4
   19a92:	e7dd      	b.n	19a50 <bt_att_create_pdu+0x20>
   19a94:	0002d950 	.word	0x0002d950
   19a98:	0002d948 	.word	0x0002d948
   19a9c:	00030f53 	.word	0x00030f53

00019aa0 <att_read_group_req>:
{
   19aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19aa4:	7b0c      	ldrb	r4, [r1, #12]
   19aa6:	3c04      	subs	r4, #4
   19aa8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19aaa:	2c02      	cmp	r4, #2
{
   19aac:	4605      	mov	r5, r0
   19aae:	b08c      	sub	sp, #48	; 0x30
   19ab0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19ab2:	d001      	beq.n	19ab8 <att_read_group_req+0x18>
   19ab4:	2c10      	cmp	r4, #16
   19ab6:	d16e      	bne.n	19b96 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   19ab8:	2104      	movs	r1, #4
   19aba:	3008      	adds	r0, #8
   19abc:	f004 f906 	bl	1dccc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19ac0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19ac4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19ac6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19ac8:	1d01      	adds	r1, r0, #4
   19aca:	4622      	mov	r2, r4
   19acc:	4640      	mov	r0, r8
   19ace:	f011 f8dc 	bl	2ac8a <bt_uuid_create>
   19ad2:	2800      	cmp	r0, #0
   19ad4:	d061      	beq.n	19b9a <att_read_group_req+0xfa>
	if (!start || !end) {
   19ad6:	2e00      	cmp	r6, #0
   19ad8:	d03a      	beq.n	19b50 <att_read_group_req+0xb0>
   19ada:	2400      	movs	r4, #0
   19adc:	2f00      	cmp	r7, #0
   19ade:	d036      	beq.n	19b4e <att_read_group_req+0xae>
	if (start > end) {
   19ae0:	42b7      	cmp	r7, r6
   19ae2:	d335      	bcc.n	19b50 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19ae4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19ae8:	a901      	add	r1, sp, #4
   19aea:	4640      	mov	r0, r8
   19aec:	f88d 4004 	strb.w	r4, [sp, #4]
   19af0:	f8ad 3006 	strh.w	r3, [sp, #6]
   19af4:	f011 f89f 	bl	2ac36 <bt_uuid_cmp>
   19af8:	2800      	cmp	r0, #0
   19afa:	d134      	bne.n	19b66 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   19afc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19afe:	2214      	movs	r2, #20
   19b00:	2100      	movs	r1, #0
   19b02:	a807      	add	r0, sp, #28
   19b04:	f010 ffd4 	bl	2aab0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19b08:	2201      	movs	r2, #1
   19b0a:	2111      	movs	r1, #17
   19b0c:	4620      	mov	r0, r4
   19b0e:	f7ff ff8f 	bl	19a30 <bt_att_create_pdu>
   19b12:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   19b14:	2800      	cmp	r0, #0
   19b16:	d040      	beq.n	19b9a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   19b18:	2101      	movs	r1, #1
   19b1a:	3008      	adds	r0, #8
	data.uuid = uuid;
   19b1c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   19b20:	f004 f8f6 	bl	1dd10 <net_buf_simple_add>
	data.rsp->len = 0U;
   19b24:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19b28:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19b2a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   19b2c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19b30:	4a1b      	ldr	r2, [pc, #108]	; (19ba0 <att_read_group_req+0x100>)
	data.group = NULL;
   19b32:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19b36:	4639      	mov	r1, r7
   19b38:	4630      	mov	r0, r6
   19b3a:	f011 fdef 	bl	2b71c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   19b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19b40:	781c      	ldrb	r4, [r3, #0]
   19b42:	bb1c      	cbnz	r4, 19b8c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   19b44:	9809      	ldr	r0, [sp, #36]	; 0x24
   19b46:	f003 ffb3 	bl	1dab0 <net_buf_unref>
	if (!req) {
   19b4a:	230a      	movs	r3, #10
   19b4c:	e018      	b.n	19b80 <att_read_group_req+0xe0>
			*err = 0U;
   19b4e:	463e      	mov	r6, r7
	if (!req) {
   19b50:	2301      	movs	r3, #1
   19b52:	4632      	mov	r2, r6
   19b54:	2110      	movs	r1, #16
   19b56:	4628      	mov	r0, r5
   19b58:	f012 f81f 	bl	2bb9a <send_err_rsp.part.0>
		return 0;
   19b5c:	2400      	movs	r4, #0
}
   19b5e:	4620      	mov	r0, r4
   19b60:	b00c      	add	sp, #48	; 0x30
   19b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   19b66:	f642 0301 	movw	r3, #10241	; 0x2801
   19b6a:	a907      	add	r1, sp, #28
   19b6c:	4640      	mov	r0, r8
   19b6e:	f88d 401c 	strb.w	r4, [sp, #28]
   19b72:	f8ad 301e 	strh.w	r3, [sp, #30]
   19b76:	f011 f85e 	bl	2ac36 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19b7a:	2800      	cmp	r0, #0
   19b7c:	d0be      	beq.n	19afc <att_read_group_req+0x5c>
	if (!req) {
   19b7e:	2310      	movs	r3, #16
   19b80:	4632      	mov	r2, r6
   19b82:	2110      	movs	r1, #16
   19b84:	4628      	mov	r0, r5
   19b86:	f012 f808 	bl	2bb9a <send_err_rsp.part.0>
		return 0;
   19b8a:	e7e8      	b.n	19b5e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
   19b8e:	4628      	mov	r0, r5
   19b90:	f7ff fcfc 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19b94:	e7e2      	b.n	19b5c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   19b96:	2404      	movs	r4, #4
   19b98:	e7e1      	b.n	19b5e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   19b9a:	240e      	movs	r4, #14
   19b9c:	e7df      	b.n	19b5e <att_read_group_req+0xbe>
   19b9e:	bf00      	nop
   19ba0:	00019255 	.word	0x00019255

00019ba4 <att_read_mult_req>:
{
   19ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19ba8:	6886      	ldr	r6, [r0, #8]
{
   19baa:	b085      	sub	sp, #20
   19bac:	4604      	mov	r4, r0
   19bae:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19bb0:	4630      	mov	r0, r6
   19bb2:	2101      	movs	r1, #1
   19bb4:	f012 faf4 	bl	2c1a0 <bt_gatt_change_aware>
   19bb8:	b3b8      	cbz	r0, 19c2a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   19bba:	2210      	movs	r2, #16
   19bbc:	2100      	movs	r1, #0
   19bbe:	4668      	mov	r0, sp
   19bc0:	f010 ff76 	bl	2aab0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19bc4:	2200      	movs	r2, #0
   19bc6:	210f      	movs	r1, #15
   19bc8:	4630      	mov	r0, r6
   19bca:	f7ff ff31 	bl	19a30 <bt_att_create_pdu>
   19bce:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19bd0:	b368      	cbz	r0, 19c2e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19bd2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 19c34 <att_read_mult_req+0x90>
	data.chan = chan;
   19bd6:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19bd8:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19bdc:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19be0:	89ab      	ldrh	r3, [r5, #12]
   19be2:	2b01      	cmp	r3, #1
   19be4:	d804      	bhi.n	19bf0 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19be6:	9902      	ldr	r1, [sp, #8]
   19be8:	4620      	mov	r0, r4
   19bea:	f7ff fccf 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
   19bee:	e018      	b.n	19c22 <att_read_mult_req+0x7e>
   19bf0:	4638      	mov	r0, r7
   19bf2:	f012 fed9 	bl	2c9a8 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19bf6:	466b      	mov	r3, sp
   19bf8:	464a      	mov	r2, r9
   19bfa:	4601      	mov	r1, r0
   19bfc:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19bfe:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19c02:	f011 fd8b 	bl	2b71c <bt_gatt_foreach_attr>
		if (data.err) {
   19c06:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19c0a:	2b00      	cmp	r3, #0
   19c0c:	d0e8      	beq.n	19be0 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   19c0e:	9802      	ldr	r0, [sp, #8]
   19c10:	f003 ff4e 	bl	1dab0 <net_buf_unref>
	if (!req) {
   19c14:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19c18:	4632      	mov	r2, r6
   19c1a:	210e      	movs	r1, #14
   19c1c:	4620      	mov	r0, r4
   19c1e:	f011 ffbc 	bl	2bb9a <send_err_rsp.part.0>
	return 0;
   19c22:	2000      	movs	r0, #0
}
   19c24:	b005      	add	sp, #20
   19c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19c2a:	2012      	movs	r0, #18
   19c2c:	e7fa      	b.n	19c24 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   19c2e:	200e      	movs	r0, #14
   19c30:	e7f8      	b.n	19c24 <att_read_mult_req+0x80>
   19c32:	bf00      	nop
   19c34:	0002bb47 	.word	0x0002bb47

00019c38 <att_read_rsp>:
{
   19c38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19c3c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   19c40:	4605      	mov	r5, r0
   19c42:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19c44:	4640      	mov	r0, r8
   19c46:	2101      	movs	r1, #1
{
   19c48:	4614      	mov	r4, r2
   19c4a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19c4c:	f012 faa8 	bl	2c1a0 <bt_gatt_change_aware>
   19c50:	b388      	cbz	r0, 19cb6 <att_read_rsp+0x7e>
	if (!handle) {
   19c52:	b396      	cbz	r6, 19cba <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   19c54:	2210      	movs	r2, #16
   19c56:	2100      	movs	r1, #0
   19c58:	4668      	mov	r0, sp
   19c5a:	f010 ff29 	bl	2aab0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   19c5e:	2200      	movs	r2, #0
   19c60:	4621      	mov	r1, r4
   19c62:	4640      	mov	r0, r8
   19c64:	f7ff fee4 	bl	19a30 <bt_att_create_pdu>
   19c68:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19c6a:	b340      	cbz	r0, 19cbe <att_read_rsp+0x86>
	data.offset = offset;
   19c6c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19c70:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19c74:	2301      	movs	r3, #1
   19c76:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19c7a:	4a12      	ldr	r2, [pc, #72]	; (19cc4 <att_read_rsp+0x8c>)
	data.chan = chan;
   19c7c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19c7e:	466b      	mov	r3, sp
   19c80:	4631      	mov	r1, r6
   19c82:	4630      	mov	r0, r6
   19c84:	f011 fd4a 	bl	2b71c <bt_gatt_foreach_attr>
	if (data.err) {
   19c88:	f89d 400c 	ldrb.w	r4, [sp, #12]
   19c8c:	b174      	cbz	r4, 19cac <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   19c8e:	9802      	ldr	r0, [sp, #8]
   19c90:	f003 ff0e 	bl	1dab0 <net_buf_unref>
	if (!req) {
   19c94:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19c98:	4632      	mov	r2, r6
   19c9a:	4639      	mov	r1, r7
   19c9c:	4628      	mov	r0, r5
   19c9e:	f011 ff7c 	bl	2bb9a <send_err_rsp.part.0>
		return 0;
   19ca2:	2400      	movs	r4, #0
}
   19ca4:	4620      	mov	r0, r4
   19ca6:	b004      	add	sp, #16
   19ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19cac:	9902      	ldr	r1, [sp, #8]
   19cae:	4628      	mov	r0, r5
   19cb0:	f7ff fc6c 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19cb4:	e7f6      	b.n	19ca4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19cb6:	2412      	movs	r4, #18
   19cb8:	e7f4      	b.n	19ca4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19cba:	2401      	movs	r4, #1
   19cbc:	e7f2      	b.n	19ca4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19cbe:	240e      	movs	r4, #14
   19cc0:	e7f0      	b.n	19ca4 <att_read_rsp+0x6c>
   19cc2:	bf00      	nop
   19cc4:	0002bb47 	.word	0x0002bb47

00019cc8 <att_read_type_req>:
{
   19cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19ccc:	7b0c      	ldrb	r4, [r1, #12]
   19cce:	3c04      	subs	r4, #4
   19cd0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   19cd2:	2c02      	cmp	r4, #2
{
   19cd4:	4605      	mov	r5, r0
   19cd6:	b08c      	sub	sp, #48	; 0x30
   19cd8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19cda:	d001      	beq.n	19ce0 <att_read_type_req+0x18>
   19cdc:	2c10      	cmp	r4, #16
   19cde:	d14f      	bne.n	19d80 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   19ce0:	2104      	movs	r1, #4
   19ce2:	3008      	adds	r0, #8
   19ce4:	f003 fff2 	bl	1dccc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19ce8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   19cec:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19cee:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19cf0:	1d01      	adds	r1, r0, #4
   19cf2:	4622      	mov	r2, r4
   19cf4:	4640      	mov	r0, r8
   19cf6:	f010 ffc8 	bl	2ac8a <bt_uuid_create>
   19cfa:	b188      	cbz	r0, 19d20 <att_read_type_req+0x58>
	if (!start || !end) {
   19cfc:	b19e      	cbz	r6, 19d26 <att_read_type_req+0x5e>
   19cfe:	b18f      	cbz	r7, 19d24 <att_read_type_req+0x5c>
	if (start > end) {
   19d00:	42be      	cmp	r6, r7
   19d02:	d810      	bhi.n	19d26 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   19d04:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   19d06:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19d08:	2100      	movs	r1, #0
   19d0a:	eb0d 0002 	add.w	r0, sp, r2
   19d0e:	f010 fecf 	bl	2aab0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   19d12:	2201      	movs	r2, #1
   19d14:	2109      	movs	r1, #9
   19d16:	4620      	mov	r0, r4
   19d18:	f7ff fe8a 	bl	19a30 <bt_att_create_pdu>
   19d1c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   19d1e:	b968      	cbnz	r0, 19d3c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   19d20:	240e      	movs	r4, #14
   19d22:	e007      	b.n	19d34 <att_read_type_req+0x6c>
			*err = 0U;
   19d24:	463e      	mov	r6, r7
	if (!req) {
   19d26:	2301      	movs	r3, #1
   19d28:	4632      	mov	r2, r6
   19d2a:	2108      	movs	r1, #8
   19d2c:	4628      	mov	r0, r5
   19d2e:	f011 ff34 	bl	2bb9a <send_err_rsp.part.0>
		return 0;
   19d32:	2400      	movs	r4, #0
}
   19d34:	4620      	mov	r0, r4
   19d36:	b00c      	add	sp, #48	; 0x30
   19d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   19d3c:	2101      	movs	r1, #1
   19d3e:	3008      	adds	r0, #8
	data.uuid = uuid;
   19d40:	e9cd 5806 	strd	r5, r8, [sp, #24]
   19d44:	f003 ffe4 	bl	1dd10 <net_buf_simple_add>
	data.rsp->len = 0U;
   19d48:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19d4c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19d4e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19d50:	4a0c      	ldr	r2, [pc, #48]	; (19d84 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   19d52:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19d56:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19d58:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   19d5c:	4630      	mov	r0, r6
   19d5e:	ab06      	add	r3, sp, #24
   19d60:	f011 fcdc 	bl	2b71c <bt_gatt_foreach_attr>
	if (data.err) {
   19d64:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   19d68:	b12c      	cbz	r4, 19d76 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   19d6a:	9808      	ldr	r0, [sp, #32]
   19d6c:	f003 fea0 	bl	1dab0 <net_buf_unref>
	if (!req) {
   19d70:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   19d74:	e7d8      	b.n	19d28 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19d76:	9908      	ldr	r1, [sp, #32]
   19d78:	4628      	mov	r0, r5
   19d7a:	f7ff fc07 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19d7e:	e7d9      	b.n	19d34 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   19d80:	2404      	movs	r4, #4
   19d82:	e7d7      	b.n	19d34 <att_read_type_req+0x6c>
   19d84:	00019301 	.word	0x00019301

00019d88 <att_find_type_req>:
{
   19d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19d8c:	4688      	mov	r8, r1
   19d8e:	b086      	sub	sp, #24
   19d90:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   19d92:	2106      	movs	r1, #6
   19d94:	f108 0008 	add.w	r0, r8, #8
   19d98:	f003 ff98 	bl	1dccc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   19d9c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   19d9e:	b317      	cbz	r7, 19de6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19da0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   19da4:	f1b9 0f00 	cmp.w	r9, #0
   19da8:	d01c      	beq.n	19de4 <att_find_type_req+0x5c>
	if (start > end) {
   19daa:	45b9      	cmp	r9, r7
   19dac:	d31b      	bcc.n	19de6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   19dae:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19db0:	f8ad 3002 	strh.w	r3, [sp, #2]
   19db4:	2400      	movs	r4, #0
   19db6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19dba:	a901      	add	r1, sp, #4
   19dbc:	4668      	mov	r0, sp
	value = buf->data;
   19dbe:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   19dc2:	f88d 4000 	strb.w	r4, [sp]
   19dc6:	f88d 4004 	strb.w	r4, [sp, #4]
   19dca:	f8ad 3006 	strh.w	r3, [sp, #6]
   19dce:	f010 ff32 	bl	2ac36 <bt_uuid_cmp>
   19dd2:	4606      	mov	r6, r0
   19dd4:	b190      	cbz	r0, 19dfc <att_find_type_req+0x74>
	if (!req) {
   19dd6:	230a      	movs	r3, #10
   19dd8:	463a      	mov	r2, r7
   19dda:	2106      	movs	r1, #6
   19ddc:	4628      	mov	r0, r5
   19dde:	f011 fedc 	bl	2bb9a <send_err_rsp.part.0>
		return 0;
   19de2:	e007      	b.n	19df4 <att_find_type_req+0x6c>
			*err = 0U;
   19de4:	464f      	mov	r7, r9
	if (!req) {
   19de6:	2301      	movs	r3, #1
   19de8:	463a      	mov	r2, r7
   19dea:	2106      	movs	r1, #6
   19dec:	4628      	mov	r0, r5
   19dee:	f011 fed4 	bl	2bb9a <send_err_rsp.part.0>
		return 0;
   19df2:	2400      	movs	r4, #0
}
   19df4:	4620      	mov	r0, r4
   19df6:	b006      	add	sp, #24
   19df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19dfc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   19e00:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   19e04:	4601      	mov	r1, r0
   19e06:	2214      	movs	r2, #20
   19e08:	a801      	add	r0, sp, #4
   19e0a:	f010 fe51 	bl	2aab0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   19e0e:	4632      	mov	r2, r6
   19e10:	2107      	movs	r1, #7
   19e12:	4640      	mov	r0, r8
   19e14:	f7ff fe0c 	bl	19a30 <bt_att_create_pdu>
   19e18:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19e1a:	b1d8      	cbz	r0, 19e54 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   19e1c:	230a      	movs	r3, #10
   19e1e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19e22:	4a0d      	ldr	r2, [pc, #52]	; (19e58 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   19e24:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19e28:	ab01      	add	r3, sp, #4
   19e2a:	4649      	mov	r1, r9
   19e2c:	4638      	mov	r0, r7
	data.value = value;
   19e2e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   19e32:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   19e34:	f011 fc72 	bl	2b71c <bt_gatt_foreach_attr>
	if (data.err) {
   19e38:	f89d 4015 	ldrb.w	r4, [sp, #21]
   19e3c:	b12c      	cbz	r4, 19e4a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   19e3e:	9802      	ldr	r0, [sp, #8]
   19e40:	f003 fe36 	bl	1dab0 <net_buf_unref>
	if (!req) {
   19e44:	f89d 3015 	ldrb.w	r3, [sp, #21]
   19e48:	e7ce      	b.n	19de8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19e4a:	9902      	ldr	r1, [sp, #8]
   19e4c:	4628      	mov	r0, r5
   19e4e:	f7ff fb9d 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   19e52:	e7cf      	b.n	19df4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   19e54:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   19e56:	e7cd      	b.n	19df4 <att_find_type_req+0x6c>
   19e58:	000193a9 	.word	0x000193a9

00019e5c <att_find_info_req>:
{
   19e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   19e5e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   19e60:	881e      	ldrh	r6, [r3, #0]
{
   19e62:	b085      	sub	sp, #20
   19e64:	4605      	mov	r5, r0
	if (!start || !end) {
   19e66:	b19e      	cbz	r6, 19e90 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   19e68:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   19e6a:	b184      	cbz	r4, 19e8e <att_find_info_req+0x32>
	if (start > end) {
   19e6c:	42a6      	cmp	r6, r4
   19e6e:	d80f      	bhi.n	19e90 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   19e70:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   19e72:	2210      	movs	r2, #16
   19e74:	2100      	movs	r1, #0
   19e76:	4668      	mov	r0, sp
   19e78:	f010 fe1a 	bl	2aab0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   19e7c:	2200      	movs	r2, #0
   19e7e:	2105      	movs	r1, #5
   19e80:	4638      	mov	r0, r7
   19e82:	f7ff fdd5 	bl	19a30 <bt_att_create_pdu>
   19e86:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   19e88:	b958      	cbnz	r0, 19ea2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   19e8a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   19e8c:	e007      	b.n	19e9e <att_find_info_req+0x42>
			*err = 0U;
   19e8e:	4626      	mov	r6, r4
	if (!req) {
   19e90:	2301      	movs	r3, #1
   19e92:	4632      	mov	r2, r6
   19e94:	2104      	movs	r1, #4
   19e96:	4628      	mov	r0, r5
   19e98:	f011 fe7f 	bl	2bb9a <send_err_rsp.part.0>
	return 0;
   19e9c:	2000      	movs	r0, #0
}
   19e9e:	b005      	add	sp, #20
   19ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19ea2:	4621      	mov	r1, r4
   19ea4:	4a08      	ldr	r2, [pc, #32]	; (19ec8 <att_find_info_req+0x6c>)
	data.chan = chan;
   19ea6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   19ea8:	466b      	mov	r3, sp
   19eaa:	4630      	mov	r0, r6
   19eac:	f011 fc36 	bl	2b71c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   19eb0:	9c02      	ldr	r4, [sp, #8]
   19eb2:	b924      	cbnz	r4, 19ebe <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   19eb4:	9801      	ldr	r0, [sp, #4]
   19eb6:	f003 fdfb 	bl	1dab0 <net_buf_unref>
	if (!req) {
   19eba:	230a      	movs	r3, #10
   19ebc:	e7e9      	b.n	19e92 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   19ebe:	9901      	ldr	r1, [sp, #4]
   19ec0:	4628      	mov	r0, r5
   19ec2:	f7ff fb63 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
   19ec6:	e7e9      	b.n	19e9c <att_find_info_req+0x40>
   19ec8:	0002b849 	.word	0x0002b849

00019ecc <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   19ecc:	b513      	push	{r0, r1, r4, lr}
   19ece:	4602      	mov	r2, r0
   19ed0:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19ed2:	4808      	ldr	r0, [pc, #32]	; (19ef4 <bt_att_req_alloc+0x28>)
   19ed4:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   19ed6:	2400      	movs	r4, #0
   19ed8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   19eda:	f008 f82d 	bl	21f38 <k_mem_slab_alloc>
   19ede:	4601      	mov	r1, r0
   19ee0:	b930      	cbnz	r0, 19ef0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   19ee2:	9801      	ldr	r0, [sp, #4]
   19ee4:	221c      	movs	r2, #28
   19ee6:	f010 fde3 	bl	2aab0 <memset>

	return req;
   19eea:	9801      	ldr	r0, [sp, #4]
}
   19eec:	b002      	add	sp, #8
   19eee:	bd10      	pop	{r4, pc}
		return NULL;
   19ef0:	4620      	mov	r0, r4
   19ef2:	e7fb      	b.n	19eec <bt_att_req_alloc+0x20>
   19ef4:	20000800 	.word	0x20000800

00019ef8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   19ef8:	b507      	push	{r0, r1, r2, lr}
   19efa:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   19efc:	6880      	ldr	r0, [r0, #8]
   19efe:	b120      	cbz	r0, 19f0a <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   19f00:	f003 fdd6 	bl	1dab0 <net_buf_unref>
		req->buf = NULL;
   19f04:	9b01      	ldr	r3, [sp, #4]
   19f06:	2200      	movs	r2, #0
   19f08:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   19f0a:	4803      	ldr	r0, [pc, #12]	; (19f18 <bt_att_req_free+0x20>)
   19f0c:	a901      	add	r1, sp, #4
   19f0e:	f008 f87f 	bl	22010 <k_mem_slab_free>
}
   19f12:	b003      	add	sp, #12
   19f14:	f85d fb04 	ldr.w	pc, [sp], #4
   19f18:	20000800 	.word	0x20000800

00019f1c <att_handle_rsp>:
{
   19f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f20:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   19f22:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   19f26:	460f      	mov	r7, r1
   19f28:	4690      	mov	r8, r2
   19f2a:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   19f2c:	f009 fad6 	bl	234dc <k_work_cancel_delayable>
	if (!chan->req) {
   19f30:	f8d4 50fc 	ldr.w	r5, [r4, #252]	; 0xfc
   19f34:	b9e5      	cbnz	r5, 19f70 <att_handle_rsp+0x54>
   19f36:	4919      	ldr	r1, [pc, #100]	; (19f9c <att_handle_rsp+0x80>)
   19f38:	4819      	ldr	r0, [pc, #100]	; (19fa0 <att_handle_rsp+0x84>)
   19f3a:	1a40      	subs	r0, r0, r1
   19f3c:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   19f3e:	0180      	lsls	r0, r0, #6
   19f40:	f040 0102 	orr.w	r1, r0, #2
   19f44:	4817      	ldr	r0, [pc, #92]	; (19fa4 <att_handle_rsp+0x88>)
   19f46:	f00e fe32 	bl	28bae <log_0>
	bt_att_func_t func = NULL;
   19f4a:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   19f4c:	6820      	ldr	r0, [r4, #0]
   19f4e:	f011 fd5f 	bl	2ba10 <att_req_send_process>
	if (func) {
   19f52:	f1ba 0f00 	cmp.w	sl, #0
   19f56:	d007      	beq.n	19f68 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   19f58:	6820      	ldr	r0, [r4, #0]
   19f5a:	f8cd 9000 	str.w	r9, [sp]
   19f5e:	6800      	ldr	r0, [r0, #0]
   19f60:	4643      	mov	r3, r8
   19f62:	463a      	mov	r2, r7
   19f64:	4631      	mov	r1, r6
   19f66:	47d0      	blx	sl
}
   19f68:	2000      	movs	r0, #0
   19f6a:	b003      	add	sp, #12
   19f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   19f70:	4b0d      	ldr	r3, [pc, #52]	; (19fa8 <att_handle_rsp+0x8c>)
   19f72:	429d      	cmp	r5, r3
   19f74:	f04f 0b00 	mov.w	fp, #0
   19f78:	d103      	bne.n	19f82 <att_handle_rsp+0x66>
		chan->req = NULL;
   19f7a:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
	bt_att_func_t func = NULL;
   19f7e:	46da      	mov	sl, fp
		goto process;
   19f80:	e7e4      	b.n	19f4c <att_handle_rsp+0x30>
	func = chan->req->func;
   19f82:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   19f86:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   19f8a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   19f8c:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   19f90:	f7ff ffb2 	bl	19ef8 <bt_att_req_free>
	chan->req = NULL;
   19f94:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
   19f98:	e7d8      	b.n	19f4c <att_handle_rsp+0x30>
   19f9a:	bf00      	nop
   19f9c:	0002d948 	.word	0x0002d948
   19fa0:	0002d950 	.word	0x0002d950
   19fa4:	00030f6e 	.word	0x00030f6e
   19fa8:	20002a10 	.word	0x20002a10

00019fac <bt_att_disconnected>:
{
   19fac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   19fae:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   19fb2:	b085      	sub	sp, #20
   19fb4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19fb6:	b38d      	cbz	r5, 1a01c <bt_att_disconnected+0x70>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   19fb8:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   19fbc:	f105 0028 	add.w	r0, r5, #40	; 0x28
   19fc0:	f011 fb0e 	bl	2b5e0 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19fc4:	f1a4 0608 	sub.w	r6, r4, #8
   19fc8:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   19fcc:	2200      	movs	r2, #0
   19fce:	2300      	movs	r3, #0
   19fd0:	4638      	mov	r0, r7
   19fd2:	f003 fcdb 	bl	1d98c <net_buf_get>
   19fd6:	4602      	mov	r2, r0
   19fd8:	bb10      	cbnz	r0, 1a020 <bt_att_disconnected+0x74>
	if (chan->req) {
   19fda:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   19fde:	b123      	cbz	r3, 19fea <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   19fe0:	4601      	mov	r1, r0
   19fe2:	230e      	movs	r3, #14
   19fe4:	4630      	mov	r0, r6
   19fe6:	f7ff ff99 	bl	19f1c <att_handle_rsp>
	chan->att = NULL;
   19fea:	2300      	movs	r3, #0
   19fec:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   19ff0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19ff2:	b99b      	cbnz	r3, 1a01c <bt_att_disconnected+0x70>
	att_reset(att);
   19ff4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   19ff6:	9803      	ldr	r0, [sp, #12]
   19ff8:	2200      	movs	r2, #0
   19ffa:	2300      	movs	r3, #0
   19ffc:	300c      	adds	r0, #12
   19ffe:	f003 fcc5 	bl	1d98c <net_buf_get>
   1a002:	b980      	cbnz	r0, 1a026 <bt_att_disconnected+0x7a>
	att->conn = NULL;
   1a004:	9a03      	ldr	r2, [sp, #12]
   1a006:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   1a008:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   1a00a:	685d      	ldr	r5, [r3, #4]
   1a00c:	b975      	cbnz	r5, 1a02c <bt_att_disconnected+0x80>
	k_mem_slab_free(&att_slab, (void **)&att);
   1a00e:	4811      	ldr	r0, [pc, #68]	; (1a054 <bt_att_disconnected+0xa8>)
   1a010:	a903      	add	r1, sp, #12
   1a012:	f007 fffd 	bl	22010 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1a016:	6820      	ldr	r0, [r4, #0]
   1a018:	f001 fcce 	bl	1b9b8 <bt_gatt_disconnected>
}
   1a01c:	b005      	add	sp, #20
   1a01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1a020:	f003 fd46 	bl	1dab0 <net_buf_unref>
   1a024:	e7d2      	b.n	19fcc <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1a026:	f003 fd43 	bl	1dab0 <net_buf_unref>
   1a02a:	e7e4      	b.n	19ff6 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a02c:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   1a02e:	686e      	ldr	r6, [r5, #4]
   1a030:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1a032:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a034:	428d      	cmp	r5, r1
	list->tail = node;
   1a036:	bf08      	it	eq
   1a038:	609a      	streq	r2, [r3, #8]
   1a03a:	b136      	cbz	r6, 1a04a <bt_att_disconnected+0x9e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1a03c:	69ab      	ldr	r3, [r5, #24]
   1a03e:	9300      	str	r3, [sp, #0]
   1a040:	2300      	movs	r3, #0
   1a042:	461a      	mov	r2, r3
   1a044:	210e      	movs	r1, #14
   1a046:	4618      	mov	r0, r3
   1a048:	47b0      	blx	r6
		bt_att_req_free(req);
   1a04a:	4628      	mov	r0, r5
   1a04c:	f7ff ff54 	bl	19ef8 <bt_att_req_free>
   1a050:	e7da      	b.n	1a008 <bt_att_disconnected+0x5c>
   1a052:	bf00      	nop
   1a054:	200007c0 	.word	0x200007c0

0001a058 <att_timeout>:
   1a058:	4b08      	ldr	r3, [pc, #32]	; (1a07c <att_timeout+0x24>)
   1a05a:	4909      	ldr	r1, [pc, #36]	; (1a080 <att_timeout+0x28>)
{
   1a05c:	b510      	push	{r4, lr}
   1a05e:	1ac9      	subs	r1, r1, r3
   1a060:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   1a062:	0189      	lsls	r1, r1, #6
{
   1a064:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1a066:	f041 0101 	orr.w	r1, r1, #1
   1a06a:	4806      	ldr	r0, [pc, #24]	; (1a084 <att_timeout+0x2c>)
   1a06c:	f00e fd9f 	bl	28bae <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1a070:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   1a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1a078:	f7ff bf98 	b.w	19fac <bt_att_disconnected>
   1a07c:	0002d948 	.word	0x0002d948
   1a080:	0002d950 	.word	0x0002d950
   1a084:	00030f85 	.word	0x00030f85

0001a088 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1a088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a08c:	460c      	mov	r4, r1
   1a08e:	4617      	mov	r7, r2
   1a090:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1a092:	4605      	mov	r5, r0
   1a094:	b958      	cbnz	r0, 1a0ae <bt_att_send+0x26>
   1a096:	492f      	ldr	r1, [pc, #188]	; (1a154 <bt_att_send+0xcc>)
   1a098:	482f      	ldr	r0, [pc, #188]	; (1a158 <bt_att_send+0xd0>)
   1a09a:	4a30      	ldr	r2, [pc, #192]	; (1a15c <bt_att_send+0xd4>)
   1a09c:	f640 434a 	movw	r3, #3146	; 0xc4a
   1a0a0:	f00e fb66 	bl	28770 <printk>
   1a0a4:	482d      	ldr	r0, [pc, #180]	; (1a15c <bt_att_send+0xd4>)
   1a0a6:	f640 414a 	movw	r1, #3146	; 0xc4a
   1a0aa:	f00e fd52 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1a0ae:	b95c      	cbnz	r4, 1a0c8 <bt_att_send+0x40>
   1a0b0:	492b      	ldr	r1, [pc, #172]	; (1a160 <bt_att_send+0xd8>)
   1a0b2:	4829      	ldr	r0, [pc, #164]	; (1a158 <bt_att_send+0xd0>)
   1a0b4:	4a29      	ldr	r2, [pc, #164]	; (1a15c <bt_att_send+0xd4>)
   1a0b6:	f640 434b 	movw	r3, #3147	; 0xc4b
   1a0ba:	f00e fb59 	bl	28770 <printk>
   1a0be:	4827      	ldr	r0, [pc, #156]	; (1a15c <bt_att_send+0xd4>)
   1a0c0:	f640 414b 	movw	r1, #3147	; 0xc4b
   1a0c4:	f00e fd45 	bl	28b52 <assert_post_action>

	att = att_get(conn);
   1a0c8:	4628      	mov	r0, r5
   1a0ca:	f7ff fa1f 	bl	1950c <att_get>
	if (!att) {
   1a0ce:	4606      	mov	r6, r0
   1a0d0:	b938      	cbnz	r0, 1a0e2 <bt_att_send+0x5a>
		net_buf_unref(buf);
   1a0d2:	4620      	mov	r0, r4
   1a0d4:	f003 fcec 	bl	1dab0 <net_buf_unref>
		return -ENOTCONN;
   1a0d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1a0dc:	b002      	add	sp, #8
   1a0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1a0e2:	b147      	cbz	r7, 1a0f6 <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1a0e4:	f8cd 8000 	str.w	r8, [sp]
   1a0e8:	463b      	mov	r3, r7
   1a0ea:	4622      	mov	r2, r4
   1a0ec:	2104      	movs	r1, #4
   1a0ee:	4628      	mov	r0, r5
   1a0f0:	f011 fa32 	bl	2b558 <bt_l2cap_send_cb>
   1a0f4:	e7f2      	b.n	1a0dc <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1a0f6:	f100 070c 	add.w	r7, r0, #12
   1a0fa:	4621      	mov	r1, r4
   1a0fc:	4638      	mov	r0, r7
   1a0fe:	f003 fca3 	bl	1da48 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1a102:	2200      	movs	r2, #0
   1a104:	2300      	movs	r3, #0
   1a106:	4638      	mov	r0, r7
   1a108:	f003 fc40 	bl	1d98c <net_buf_get>
	if (!buf) {
   1a10c:	4605      	mov	r5, r0
   1a10e:	b908      	cbnz	r0, 1a114 <bt_att_send+0x8c>
	return 0;
   1a110:	2000      	movs	r0, #0
   1a112:	e7e3      	b.n	1a0dc <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a114:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1a116:	b1c3      	cbz	r3, 1a14a <bt_att_send+0xc2>
   1a118:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1a11c:	d015      	beq.n	1a14a <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a11e:	681c      	ldr	r4, [r3, #0]
   1a120:	b10c      	cbz	r4, 1a126 <bt_att_send+0x9e>
   1a122:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1a126:	2200      	movs	r2, #0
   1a128:	4629      	mov	r1, r5
   1a12a:	f7fe ffd9 	bl	190e0 <chan_send>
		if (err >= 0) {
   1a12e:	2800      	cmp	r0, #0
   1a130:	daee      	bge.n	1a110 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a132:	b154      	cbz	r4, 1a14a <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a134:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1a138:	d004      	beq.n	1a144 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a13a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   1a13e:	b10b      	cbz	r3, 1a144 <bt_att_send+0xbc>
   1a140:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1a144:	4620      	mov	r0, r4
   1a146:	461c      	mov	r4, r3
   1a148:	e7ed      	b.n	1a126 <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1a14a:	4629      	mov	r1, r5
   1a14c:	4638      	mov	r0, r7
   1a14e:	f013 f8d6 	bl	2d2fe <k_queue_prepend>
   1a152:	e7dd      	b.n	1a110 <bt_att_send+0x88>
   1a154:	00030ba8 	.word	0x00030ba8
   1a158:	0002e915 	.word	0x0002e915
   1a15c:	00030d6a 	.word	0x00030d6a
   1a160:	0002ff40 	.word	0x0002ff40

0001a164 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1a164:	b538      	push	{r3, r4, r5, lr}
   1a166:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1a168:	4605      	mov	r5, r0
   1a16a:	b958      	cbnz	r0, 1a184 <bt_att_req_send+0x20>
   1a16c:	4916      	ldr	r1, [pc, #88]	; (1a1c8 <bt_att_req_send+0x64>)
   1a16e:	4817      	ldr	r0, [pc, #92]	; (1a1cc <bt_att_req_send+0x68>)
   1a170:	4a17      	ldr	r2, [pc, #92]	; (1a1d0 <bt_att_req_send+0x6c>)
   1a172:	f640 4367 	movw	r3, #3175	; 0xc67
   1a176:	f00e fafb 	bl	28770 <printk>
   1a17a:	4815      	ldr	r0, [pc, #84]	; (1a1d0 <bt_att_req_send+0x6c>)
   1a17c:	f640 4167 	movw	r1, #3175	; 0xc67
   1a180:	f00e fce7 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1a184:	b95c      	cbnz	r4, 1a19e <bt_att_req_send+0x3a>
   1a186:	4913      	ldr	r1, [pc, #76]	; (1a1d4 <bt_att_req_send+0x70>)
   1a188:	4810      	ldr	r0, [pc, #64]	; (1a1cc <bt_att_req_send+0x68>)
   1a18a:	4a11      	ldr	r2, [pc, #68]	; (1a1d0 <bt_att_req_send+0x6c>)
   1a18c:	f640 4368 	movw	r3, #3176	; 0xc68
   1a190:	f00e faee 	bl	28770 <printk>
   1a194:	480e      	ldr	r0, [pc, #56]	; (1a1d0 <bt_att_req_send+0x6c>)
   1a196:	f640 4168 	movw	r1, #3176	; 0xc68
   1a19a:	f00e fcda 	bl	28b52 <assert_post_action>

	att = att_get(conn);
   1a19e:	4628      	mov	r0, r5
   1a1a0:	f7ff f9b4 	bl	1950c <att_get>
	if (!att) {
   1a1a4:	b160      	cbz	r0, 1a1c0 <bt_att_req_send+0x5c>
	parent->next = child;
   1a1a6:	2300      	movs	r3, #0
   1a1a8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1a1aa:	6883      	ldr	r3, [r0, #8]
   1a1ac:	b92b      	cbnz	r3, 1a1ba <bt_att_req_send+0x56>
	list->head = node;
   1a1ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1a1b2:	f011 fc2d 	bl	2ba10 <att_req_send_process>

	return 0;
   1a1b6:	2000      	movs	r0, #0
}
   1a1b8:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1a1ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a1bc:	6084      	str	r4, [r0, #8]
}
   1a1be:	e7f8      	b.n	1a1b2 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   1a1c0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a1c4:	e7f8      	b.n	1a1b8 <bt_att_req_send+0x54>
   1a1c6:	bf00      	nop
   1a1c8:	00030ba8 	.word	0x00030ba8
   1a1cc:	0002e915 	.word	0x0002e915
   1a1d0:	00030d6a 	.word	0x00030d6a
   1a1d4:	00030daf 	.word	0x00030daf

0001a1d8 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a1d8:	490a      	ldr	r1, [pc, #40]	; (1a204 <db_hash_store+0x2c>)
   1a1da:	480b      	ldr	r0, [pc, #44]	; (1a208 <db_hash_store+0x30>)
{
   1a1dc:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a1de:	2210      	movs	r2, #16
   1a1e0:	f7f9 fafe 	bl	137e0 <settings_save_one>
	if (err) {
   1a1e4:	4601      	mov	r1, r0
   1a1e6:	b158      	cbz	r0, 1a200 <db_hash_store+0x28>
   1a1e8:	4b08      	ldr	r3, [pc, #32]	; (1a20c <db_hash_store+0x34>)
   1a1ea:	4a09      	ldr	r2, [pc, #36]	; (1a210 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1a1ec:	4809      	ldr	r0, [pc, #36]	; (1a214 <db_hash_store+0x3c>)
   1a1ee:	1ad2      	subs	r2, r2, r3
   1a1f0:	08d2      	lsrs	r2, r2, #3
   1a1f2:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
   1a1f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1a1f8:	f042 0201 	orr.w	r2, r2, #1
   1a1fc:	f00e bce4 	b.w	28bc8 <log_1>
}
   1a200:	bd08      	pop	{r3, pc}
   1a202:	bf00      	nop
   1a204:	20001b90 	.word	0x20001b90
   1a208:	00030f98 	.word	0x00030f98
   1a20c:	0002d948 	.word	0x0002d948
   1a210:	0002d970 	.word	0x0002d970
   1a214:	00030fa0 	.word	0x00030fa0

0001a218 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1a218:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a21a:	490b      	ldr	r1, [pc, #44]	; (1a248 <db_hash_set+0x30>)
{
   1a21c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a21e:	4618      	mov	r0, r3
   1a220:	2210      	movs	r2, #16
   1a222:	47a0      	blx	r4
	if (len < 0) {
   1a224:	1e04      	subs	r4, r0, #0
   1a226:	da0c      	bge.n	1a242 <db_hash_set+0x2a>
   1a228:	4a08      	ldr	r2, [pc, #32]	; (1a24c <db_hash_set+0x34>)
   1a22a:	4b09      	ldr	r3, [pc, #36]	; (1a250 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
   1a22c:	4809      	ldr	r0, [pc, #36]	; (1a254 <db_hash_set+0x3c>)
   1a22e:	1ad2      	subs	r2, r2, r3
   1a230:	08d2      	lsrs	r2, r2, #3
   1a232:	0192      	lsls	r2, r2, #6
   1a234:	f042 0201 	orr.w	r2, r2, #1
   1a238:	4621      	mov	r1, r4
   1a23a:	f00e fcc5 	bl	28bc8 <log_1>

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   1a23e:	4620      	mov	r0, r4
   1a240:	bd10      	pop	{r4, pc}
	return 0;
   1a242:	2400      	movs	r4, #0
   1a244:	e7fb      	b.n	1a23e <db_hash_set+0x26>
   1a246:	bf00      	nop
   1a248:	20001ba0 	.word	0x20001ba0
   1a24c:	0002d970 	.word	0x0002d970
   1a250:	0002d948 	.word	0x0002d948
   1a254:	00030fc6 	.word	0x00030fc6

0001a258 <sc_store>:
{
   1a258:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1a25a:	4605      	mov	r5, r0
{
   1a25c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1a25e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1a262:	4604      	mov	r4, r0
	if (cfg->id) {
   1a264:	b1fa      	cbz	r2, 1a2a6 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a266:	ae02      	add	r6, sp, #8
   1a268:	2104      	movs	r1, #4
   1a26a:	4630      	mov	r0, r6
   1a26c:	f00e f9e4 	bl	28638 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a270:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a272:	4a0e      	ldr	r2, [pc, #56]	; (1a2ac <sc_store+0x54>)
   1a274:	462b      	mov	r3, r5
   1a276:	2124      	movs	r1, #36	; 0x24
   1a278:	a803      	add	r0, sp, #12
   1a27a:	f7fb fa39 	bl	156f0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1a27e:	f104 0108 	add.w	r1, r4, #8
   1a282:	2204      	movs	r2, #4
   1a284:	a803      	add	r0, sp, #12
   1a286:	f7f9 faab 	bl	137e0 <settings_save_one>
	if (err) {
   1a28a:	4601      	mov	r1, r0
   1a28c:	b148      	cbz	r0, 1a2a2 <sc_store+0x4a>
   1a28e:	4a08      	ldr	r2, [pc, #32]	; (1a2b0 <sc_store+0x58>)
   1a290:	4b08      	ldr	r3, [pc, #32]	; (1a2b4 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
   1a292:	4809      	ldr	r0, [pc, #36]	; (1a2b8 <sc_store+0x60>)
   1a294:	1ad2      	subs	r2, r2, r3
   1a296:	08d2      	lsrs	r2, r2, #3
   1a298:	0192      	lsls	r2, r2, #6
   1a29a:	f042 0201 	orr.w	r2, r2, #1
   1a29e:	f00e fc93 	bl	28bc8 <log_1>
}
   1a2a2:	b00c      	add	sp, #48	; 0x30
   1a2a4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a2a6:	9200      	str	r2, [sp, #0]
   1a2a8:	e7e3      	b.n	1a272 <sc_store+0x1a>
   1a2aa:	bf00      	nop
   1a2ac:	0003136d 	.word	0x0003136d
   1a2b0:	0002d970 	.word	0x0002d970
   1a2b4:	0002d948 	.word	0x0002d948
   1a2b8:	00030fe7 	.word	0x00030fe7

0001a2bc <db_hash_commit>:

static int db_hash_commit(void)
{
   1a2bc:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a2be:	2108      	movs	r1, #8
   1a2c0:	4804      	ldr	r0, [pc, #16]	; (1a2d4 <db_hash_commit+0x18>)
   1a2c2:	f011 fd9e 	bl	2be02 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   1a2c6:	2200      	movs	r2, #0
   1a2c8:	2300      	movs	r3, #0
   1a2ca:	4803      	ldr	r0, [pc, #12]	; (1a2d8 <db_hash_commit+0x1c>)
   1a2cc:	f009 f900 	bl	234d0 <k_work_reschedule>

	return 0;
}
   1a2d0:	2000      	movs	r0, #0
   1a2d2:	bd08      	pop	{r3, pc}
   1a2d4:	20001c90 	.word	0x20001c90
   1a2d8:	20001bb0 	.word	0x20001bb0

0001a2dc <ccc_save>:
{
   1a2dc:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a2de:	4b0c      	ldr	r3, [pc, #48]	; (1a310 <ccc_save+0x34>)
{
   1a2e0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a2e2:	6882      	ldr	r2, [r0, #8]
   1a2e4:	429a      	cmp	r2, r3
{
   1a2e6:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a2e8:	d10f      	bne.n	1a30a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1a2ea:	7922      	ldrb	r2, [r4, #4]
   1a2ec:	6821      	ldr	r1, [r4, #0]
   1a2ee:	68c0      	ldr	r0, [r0, #12]
   1a2f0:	f011 fdd3 	bl	2be9a <ccc_find_cfg>
	if (!cfg) {
   1a2f4:	b148      	cbz	r0, 1a30a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1a2f6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1a2fa:	8901      	ldrh	r1, [r0, #8]
   1a2fc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1a300:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1a302:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1a304:	8151      	strh	r1, [r2, #10]
	save->count++;
   1a306:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1a30a:	2001      	movs	r0, #1
   1a30c:	bd38      	pop	{r3, r4, r5, pc}
   1a30e:	bf00      	nop
   1a310:	0001a3c9 	.word	0x0001a3c9

0001a314 <ccc_load>:
{
   1a314:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a316:	4b21      	ldr	r3, [pc, #132]	; (1a39c <ccc_load+0x88>)
{
   1a318:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a31a:	6882      	ldr	r2, [r0, #8]
   1a31c:	429a      	cmp	r2, r3
   1a31e:	d002      	beq.n	1a326 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   1a320:	2001      	movs	r0, #1
}
   1a322:	b002      	add	sp, #8
   1a324:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   1a326:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   1a328:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1a32a:	b94b      	cbnz	r3, 1a340 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1a32c:	7922      	ldrb	r2, [r4, #4]
   1a32e:	6821      	ldr	r1, [r4, #0]
   1a330:	4630      	mov	r0, r6
   1a332:	f011 fdb2 	bl	2be9a <ccc_find_cfg>
	if (!cfg) {
   1a336:	2800      	cmp	r0, #0
   1a338:	d0f2      	beq.n	1a320 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1a33a:	f011 fd74 	bl	2be26 <clear_ccc_cfg>
   1a33e:	e7ef      	b.n	1a320 <ccc_load+0xc>
	} else if (!load->count) {
   1a340:	68e0      	ldr	r0, [r4, #12]
   1a342:	2800      	cmp	r0, #0
   1a344:	d0ed      	beq.n	1a322 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   1a346:	881b      	ldrh	r3, [r3, #0]
   1a348:	4299      	cmp	r1, r3
   1a34a:	d00a      	beq.n	1a362 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   1a34c:	d9e8      	bls.n	1a320 <ccc_load+0xc>
	load->count--;
   1a34e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1a350:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1a352:	3801      	subs	r0, #1
	load->entry++;
   1a354:	3304      	adds	r3, #4
	load->count--;
   1a356:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a358:	3800      	subs	r0, #0
	load->entry++;
   1a35a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a35c:	bf18      	it	ne
   1a35e:	2001      	movne	r0, #1
   1a360:	e7df      	b.n	1a322 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a362:	7922      	ldrb	r2, [r4, #4]
   1a364:	6821      	ldr	r1, [r4, #0]
   1a366:	4630      	mov	r0, r6
   1a368:	f011 fd97 	bl	2be9a <ccc_find_cfg>
	if (!cfg) {
   1a36c:	4605      	mov	r5, r0
   1a36e:	b980      	cbnz	r0, 1a392 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a370:	9000      	str	r0, [sp, #0]
   1a372:	4602      	mov	r2, r0
   1a374:	f8cd 0003 	str.w	r0, [sp, #3]
   1a378:	4669      	mov	r1, sp
   1a37a:	4630      	mov	r0, r6
   1a37c:	f011 fd8d 	bl	2be9a <ccc_find_cfg>
		if (!cfg) {
   1a380:	4605      	mov	r5, r0
   1a382:	2800      	cmp	r0, #0
   1a384:	d0e3      	beq.n	1a34e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1a386:	6821      	ldr	r1, [r4, #0]
   1a388:	3001      	adds	r0, #1
   1a38a:	f011 fd49 	bl	2be20 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1a38e:	7923      	ldrb	r3, [r4, #4]
   1a390:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1a392:	68a3      	ldr	r3, [r4, #8]
   1a394:	885b      	ldrh	r3, [r3, #2]
   1a396:	812b      	strh	r3, [r5, #8]
   1a398:	e7d9      	b.n	1a34e <ccc_load+0x3a>
   1a39a:	bf00      	nop
   1a39c:	0001a3c9 	.word	0x0001a3c9

0001a3a0 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1a3a0:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a3a2:	6881      	ldr	r1, [r0, #8]
{
   1a3a4:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a3a6:	4a07      	ldr	r2, [pc, #28]	; (1a3c4 <remove_peer_from_attr+0x24>)
   1a3a8:	4291      	cmp	r1, r2
   1a3aa:	d109      	bne.n	1a3c0 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1a3ac:	791a      	ldrb	r2, [r3, #4]
   1a3ae:	6819      	ldr	r1, [r3, #0]
   1a3b0:	68c0      	ldr	r0, [r0, #12]
   1a3b2:	f011 fd72 	bl	2be9a <ccc_find_cfg>
	if (cfg) {
   1a3b6:	b118      	cbz	r0, 1a3c0 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1a3b8:	220a      	movs	r2, #10
   1a3ba:	2100      	movs	r1, #0
   1a3bc:	f010 fb78 	bl	2aab0 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1a3c0:	2001      	movs	r0, #1
   1a3c2:	bd08      	pop	{r3, pc}
   1a3c4:	0001a3c9 	.word	0x0001a3c9

0001a3c8 <bt_gatt_attr_write_ccc>:
{
   1a3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3cc:	461f      	mov	r7, r3
   1a3ce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a3d2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1a3d6:	4605      	mov	r5, r0
   1a3d8:	4688      	mov	r8, r1
	if (offset) {
   1a3da:	2b00      	cmp	r3, #0
   1a3dc:	d16d      	bne.n	1a4ba <bt_gatt_attr_write_ccc+0xf2>
	if (!len || len > sizeof(uint16_t)) {
   1a3de:	1e7b      	subs	r3, r7, #1
   1a3e0:	2b01      	cmp	r3, #1
   1a3e2:	d86d      	bhi.n	1a4c0 <bt_gatt_attr_write_ccc+0xf8>
	if (len < sizeof(uint16_t)) {
   1a3e4:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1a3e6:	7816      	ldrb	r6, [r2, #0]
   1a3e8:	bf18      	it	ne
   1a3ea:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1a3ec:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1a3ee:	bf0c      	ite	eq
   1a3f0:	b2b6      	uxtheq	r6, r6
   1a3f2:	ea46 2603 	orrne.w	r6, r6, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1a3f6:	f011 fd5f 	bl	2beb8 <find_ccc_cfg>
	if (!cfg) {
   1a3fa:	4604      	mov	r4, r0
   1a3fc:	b9e0      	cbnz	r0, 1a438 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
   1a3fe:	b916      	cbnz	r6, 1a406 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   1a400:	4638      	mov	r0, r7
}
   1a402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a406:	4649      	mov	r1, r9
   1a408:	f011 fd56 	bl	2beb8 <find_ccc_cfg>
		if (!cfg) {
   1a40c:	4604      	mov	r4, r0
   1a40e:	b960      	cbnz	r0, 1a42a <bt_gatt_attr_write_ccc+0x62>
   1a410:	4b2d      	ldr	r3, [pc, #180]	; (1a4c8 <bt_gatt_attr_write_ccc+0x100>)
   1a412:	492e      	ldr	r1, [pc, #184]	; (1a4cc <bt_gatt_attr_write_ccc+0x104>)
			BT_WARN("No space to store CCC cfg");
   1a414:	482e      	ldr	r0, [pc, #184]	; (1a4d0 <bt_gatt_attr_write_ccc+0x108>)
   1a416:	1ac9      	subs	r1, r1, r3
   1a418:	08c9      	lsrs	r1, r1, #3
   1a41a:	0189      	lsls	r1, r1, #6
   1a41c:	f041 0102 	orr.w	r1, r1, #2
   1a420:	f00e fbc5 	bl	28bae <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a424:	f06f 0010 	mvn.w	r0, #16
   1a428:	e7eb      	b.n	1a402 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a42a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1a42e:	3001      	adds	r0, #1
   1a430:	f011 fcf6 	bl	2be20 <bt_addr_le_copy>
		cfg->id = conn->id;
   1a434:	7a2b      	ldrb	r3, [r5, #8]
   1a436:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1a438:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1a43c:	bb8b      	cbnz	r3, 1a4a2 <bt_gatt_attr_write_ccc+0xda>
	if (cfg->value != ccc->value) {
   1a43e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	value_changed = cfg->value != value;
   1a442:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   1a446:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   1a448:	42b3      	cmp	r3, r6
   1a44a:	d003      	beq.n	1a454 <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   1a44c:	4649      	mov	r1, r9
   1a44e:	4640      	mov	r0, r8
   1a450:	f011 fc58 	bl	2bd04 <gatt_ccc_changed>
	if (value_changed) {
   1a454:	45b2      	cmp	sl, r6
   1a456:	d01e      	beq.n	1a496 <bt_gatt_attr_write_ccc+0xce>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1a458:	4628      	mov	r0, r5
   1a45a:	f7fe f897 	bl	1858c <bt_conn_index>
   1a45e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1a4d4 <bt_gatt_attr_write_ccc+0x10c>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a462:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   1a466:	429d      	cmp	r5, r3
   1a468:	d015      	beq.n	1a496 <bt_gatt_attr_write_ccc+0xce>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1a46a:	7a28      	ldrb	r0, [r5, #8]
   1a46c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1a470:	f010 fd46 	bl	2af00 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1a474:	b178      	cbz	r0, 1a496 <bt_gatt_attr_write_ccc+0xce>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a476:	4628      	mov	r0, r5
   1a478:	f7fe f888 	bl	1858c <bt_conn_index>
   1a47c:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1a47e:	4628      	mov	r0, r5
   1a480:	f010 ff13 	bl	2b2aa <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a484:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1a488:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1a48c:	2300      	movs	r3, #0
   1a48e:	f108 0008 	add.w	r0, r8, #8
   1a492:	f009 f81d 	bl	234d0 <k_work_reschedule>
	if (!value) {
   1a496:	2e00      	cmp	r6, #0
   1a498:	d1b2      	bne.n	1a400 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   1a49a:	4620      	mov	r0, r4
   1a49c:	f011 fcc3 	bl	2be26 <clear_ccc_cfg>
   1a4a0:	e7ae      	b.n	1a400 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a4a2:	4632      	mov	r2, r6
   1a4a4:	4641      	mov	r1, r8
   1a4a6:	4628      	mov	r0, r5
   1a4a8:	4798      	blx	r3
		if (write < 0) {
   1a4aa:	2800      	cmp	r0, #0
   1a4ac:	dba9      	blt.n	1a402 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1a4ae:	1e42      	subs	r2, r0, #1
   1a4b0:	2a01      	cmp	r2, #1
   1a4b2:	d9c4      	bls.n	1a43e <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a4b4:	f06f 000d 	mvn.w	r0, #13
   1a4b8:	e7a3      	b.n	1a402 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a4ba:	f06f 0006 	mvn.w	r0, #6
   1a4be:	e7a0      	b.n	1a402 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a4c0:	f06f 000c 	mvn.w	r0, #12
   1a4c4:	e79d      	b.n	1a402 <bt_gatt_attr_write_ccc+0x3a>
   1a4c6:	bf00      	nop
   1a4c8:	0002d948 	.word	0x0002d948
   1a4cc:	0002d970 	.word	0x0002d970
   1a4d0:	00031003 	.word	0x00031003
   1a4d4:	20001c08 	.word	0x20001c08

0001a4d8 <sc_commit>:
{
   1a4d8:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a4da:	f06f 0102 	mvn.w	r1, #2
   1a4de:	4808      	ldr	r0, [pc, #32]	; (1a500 <sc_commit+0x28>)
   1a4e0:	f011 fcaf 	bl	2be42 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a4e4:	4806      	ldr	r0, [pc, #24]	; (1a500 <sc_commit+0x28>)
   1a4e6:	f011 fc30 	bl	2bd4a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a4ea:	07c3      	lsls	r3, r0, #31
   1a4ec:	d505      	bpl.n	1a4fa <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a4ee:	4805      	ldr	r0, [pc, #20]	; (1a504 <sc_commit+0x2c>)
   1a4f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1a4f4:	2300      	movs	r3, #0
   1a4f6:	f008 ffeb 	bl	234d0 <k_work_reschedule>
}
   1a4fa:	2000      	movs	r0, #0
   1a4fc:	bd08      	pop	{r3, pc}
   1a4fe:	bf00      	nop
   1a500:	20001c90 	.word	0x20001c90
   1a504:	20001c60 	.word	0x20001c60

0001a508 <find_sc_cfg>:
{
   1a508:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1a50a:	4c0e      	ldr	r4, [pc, #56]	; (1a544 <find_sc_cfg+0x3c>)
   1a50c:	7823      	ldrb	r3, [r4, #0]
   1a50e:	4283      	cmp	r3, r0
{
   1a510:	4605      	mov	r5, r0
   1a512:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1a514:	d00a      	beq.n	1a52c <find_sc_cfg+0x24>
   1a516:	7b23      	ldrb	r3, [r4, #12]
   1a518:	42ab      	cmp	r3, r5
   1a51a:	d111      	bne.n	1a540 <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   1a51c:	480a      	ldr	r0, [pc, #40]	; (1a548 <find_sc_cfg+0x40>)
   1a51e:	2207      	movs	r2, #7
   1a520:	4631      	mov	r1, r6
   1a522:	f010 fa93 	bl	2aa4c <memcmp>
   1a526:	b958      	cbnz	r0, 1a540 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a528:	2001      	movs	r0, #1
   1a52a:	e005      	b.n	1a538 <find_sc_cfg+0x30>
   1a52c:	2207      	movs	r2, #7
   1a52e:	1c60      	adds	r0, r4, #1
   1a530:	f010 fa8c 	bl	2aa4c <memcmp>
		if (id == sc_cfg[i].id &&
   1a534:	2800      	cmp	r0, #0
   1a536:	d1ee      	bne.n	1a516 <find_sc_cfg+0xe>
			return &sc_cfg[i];
   1a538:	230c      	movs	r3, #12
   1a53a:	fb03 4000 	mla	r0, r3, r0, r4
   1a53e:	e000      	b.n	1a542 <find_sc_cfg+0x3a>
	return NULL;
   1a540:	2000      	movs	r0, #0
}
   1a542:	bd70      	pop	{r4, r5, r6, pc}
   1a544:	20003734 	.word	0x20003734
   1a548:	20003741 	.word	0x20003741

0001a54c <sc_save>:
{
   1a54c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a550:	4680      	mov	r8, r0
   1a552:	460f      	mov	r7, r1
   1a554:	4616      	mov	r6, r2
   1a556:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a558:	f7ff ffd6 	bl	1a508 <find_sc_cfg>
	if (!cfg) {
   1a55c:	4604      	mov	r4, r0
   1a55e:	b9c8      	cbnz	r0, 1a594 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a560:	4669      	mov	r1, sp
   1a562:	9000      	str	r0, [sp, #0]
   1a564:	f8cd 0003 	str.w	r0, [sp, #3]
   1a568:	f7ff ffce 	bl	1a508 <find_sc_cfg>
		if (!cfg) {
   1a56c:	4604      	mov	r4, r0
   1a56e:	b960      	cbnz	r0, 1a58a <sc_save+0x3e>
   1a570:	4915      	ldr	r1, [pc, #84]	; (1a5c8 <sc_save+0x7c>)
   1a572:	4b16      	ldr	r3, [pc, #88]	; (1a5cc <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
   1a574:	4816      	ldr	r0, [pc, #88]	; (1a5d0 <sc_save+0x84>)
   1a576:	1ac9      	subs	r1, r1, r3
   1a578:	08c9      	lsrs	r1, r1, #3
   1a57a:	0189      	lsls	r1, r1, #6
   1a57c:	f041 0101 	orr.w	r1, r1, #1
   1a580:	f00e fb15 	bl	28bae <log_0>
}
   1a584:	b002      	add	sp, #8
   1a586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a58a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a58e:	4639      	mov	r1, r7
   1a590:	f011 fc46 	bl	2be20 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a594:	8922      	ldrh	r2, [r4, #8]
   1a596:	8963      	ldrh	r3, [r4, #10]
   1a598:	b96a      	cbnz	r2, 1a5b6 <sc_save+0x6a>
   1a59a:	b973      	cbnz	r3, 1a5ba <sc_save+0x6e>
		cfg->data.start = start;
   1a59c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a59e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a5a0:	4621      	mov	r1, r4
   1a5a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a5a6:	f010 fcab 	bl	2af00 <bt_addr_le_is_bonded>
   1a5aa:	2800      	cmp	r0, #0
   1a5ac:	d0ea      	beq.n	1a584 <sc_save+0x38>
		sc_store(cfg);
   1a5ae:	4620      	mov	r0, r4
   1a5b0:	f7ff fe52 	bl	1a258 <sc_store>
   1a5b4:	e7e6      	b.n	1a584 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   1a5b6:	4296      	cmp	r6, r2
   1a5b8:	d302      	bcc.n	1a5c0 <sc_save+0x74>
   1a5ba:	429d      	cmp	r5, r3
   1a5bc:	d8ef      	bhi.n	1a59e <sc_save+0x52>
   1a5be:	e7e1      	b.n	1a584 <sc_save+0x38>
	if (*end < new_end) {
   1a5c0:	429d      	cmp	r5, r3
		*start = new_start;
   1a5c2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a5c4:	d9ec      	bls.n	1a5a0 <sc_save+0x54>
   1a5c6:	e7ea      	b.n	1a59e <sc_save+0x52>
   1a5c8:	0002d970 	.word	0x0002d970
   1a5cc:	0002d948 	.word	0x0002d948
   1a5d0:	0003101d 	.word	0x0003101d

0001a5d4 <sc_set>:
{
   1a5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5d8:	460e      	mov	r6, r1
   1a5da:	b086      	sub	sp, #24
   1a5dc:	4617      	mov	r7, r2
   1a5de:	4698      	mov	r8, r3
	if (!name) {
   1a5e0:	4605      	mov	r5, r0
   1a5e2:	b978      	cbnz	r0, 1a604 <sc_set+0x30>
   1a5e4:	493b      	ldr	r1, [pc, #236]	; (1a6d4 <sc_set+0x100>)
   1a5e6:	4b3c      	ldr	r3, [pc, #240]	; (1a6d8 <sc_set+0x104>)
		BT_ERR("Insufficient number of arguments");
   1a5e8:	483c      	ldr	r0, [pc, #240]	; (1a6dc <sc_set+0x108>)
   1a5ea:	1ac9      	subs	r1, r1, r3
   1a5ec:	08c9      	lsrs	r1, r1, #3
   1a5ee:	0189      	lsls	r1, r1, #6
   1a5f0:	f041 0101 	orr.w	r1, r1, #1
   1a5f4:	f00e fadb 	bl	28bae <log_0>
		return -EINVAL;
   1a5f8:	f06f 0415 	mvn.w	r4, #21
}
   1a5fc:	4620      	mov	r0, r4
   1a5fe:	b006      	add	sp, #24
   1a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1a604:	a902      	add	r1, sp, #8
   1a606:	f010 faf2 	bl	2abee <bt_settings_decode_key>
	if (err) {
   1a60a:	4604      	mov	r4, r0
   1a60c:	b178      	cbz	r0, 1a62e <sc_set+0x5a>
   1a60e:	4a32      	ldr	r2, [pc, #200]	; (1a6d8 <sc_set+0x104>)
   1a610:	4c30      	ldr	r4, [pc, #192]	; (1a6d4 <sc_set+0x100>)
   1a612:	4628      	mov	r0, r5
   1a614:	1aa4      	subs	r4, r4, r2
   1a616:	f7f7 fec3 	bl	123a0 <z_log_strdup>
   1a61a:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1a61c:	01a4      	lsls	r4, r4, #6
   1a61e:	f044 0401 	orr.w	r4, r4, #1
   1a622:	4601      	mov	r1, r0
   1a624:	482e      	ldr	r0, [pc, #184]	; (1a6e0 <sc_set+0x10c>)
   1a626:	4622      	mov	r2, r4
   1a628:	f00e face 	bl	28bc8 <log_1>
   1a62c:	e7e4      	b.n	1a5f8 <sc_set+0x24>
	settings_name_next(name, &next);
   1a62e:	a901      	add	r1, sp, #4
   1a630:	4628      	mov	r0, r5
   1a632:	f00e ff99 	bl	29568 <settings_name_next>
	if (!next) {
   1a636:	9801      	ldr	r0, [sp, #4]
   1a638:	b170      	cbz	r0, 1a658 <sc_set+0x84>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a63a:	4621      	mov	r1, r4
   1a63c:	220a      	movs	r2, #10
   1a63e:	f010 f93b 	bl	2a8b8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a642:	4601      	mov	r1, r0
   1a644:	b140      	cbz	r0, 1a658 <sc_set+0x84>
   1a646:	4a23      	ldr	r2, [pc, #140]	; (1a6d4 <sc_set+0x100>)
   1a648:	4b23      	ldr	r3, [pc, #140]	; (1a6d8 <sc_set+0x104>)
			BT_ERR("Invalid local identity %lu", next_id);
   1a64a:	4826      	ldr	r0, [pc, #152]	; (1a6e4 <sc_set+0x110>)
   1a64c:	1ad2      	subs	r2, r2, r3
   1a64e:	08d2      	lsrs	r2, r2, #3
   1a650:	0192      	lsls	r2, r2, #6
   1a652:	f042 0201 	orr.w	r2, r2, #1
   1a656:	e7e7      	b.n	1a628 <sc_set+0x54>
	cfg = find_sc_cfg(id, &addr);
   1a658:	a902      	add	r1, sp, #8
   1a65a:	2000      	movs	r0, #0
   1a65c:	f7ff ff54 	bl	1a508 <find_sc_cfg>
	if (!cfg && len_rd) {
   1a660:	4605      	mov	r5, r0
   1a662:	bb80      	cbnz	r0, 1a6c6 <sc_set+0xf2>
   1a664:	2e00      	cmp	r6, #0
   1a666:	d0c9      	beq.n	1a5fc <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a668:	a904      	add	r1, sp, #16
   1a66a:	9004      	str	r0, [sp, #16]
   1a66c:	4606      	mov	r6, r0
   1a66e:	f8cd 0013 	str.w	r0, [sp, #19]
   1a672:	f7ff ff49 	bl	1a508 <find_sc_cfg>
		if (!cfg) {
   1a676:	4605      	mov	r5, r0
   1a678:	b960      	cbnz	r0, 1a694 <sc_set+0xc0>
   1a67a:	4b17      	ldr	r3, [pc, #92]	; (1a6d8 <sc_set+0x104>)
   1a67c:	4915      	ldr	r1, [pc, #84]	; (1a6d4 <sc_set+0x100>)
			BT_ERR("Unable to restore SC: no cfg left");
   1a67e:	481a      	ldr	r0, [pc, #104]	; (1a6e8 <sc_set+0x114>)
   1a680:	1ac9      	subs	r1, r1, r3
   1a682:	08c9      	lsrs	r1, r1, #3
   1a684:	0189      	lsls	r1, r1, #6
   1a686:	f041 0101 	orr.w	r1, r1, #1
   1a68a:	f00e fa90 	bl	28bae <log_0>
			return -ENOMEM;
   1a68e:	f06f 040b 	mvn.w	r4, #11
   1a692:	e7b3      	b.n	1a5fc <sc_set+0x28>
		cfg->id = id;
   1a694:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a698:	a902      	add	r1, sp, #8
   1a69a:	f011 fbc1 	bl	2be20 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1a69e:	f105 0108 	add.w	r1, r5, #8
   1a6a2:	2204      	movs	r2, #4
   1a6a4:	4640      	mov	r0, r8
   1a6a6:	47b8      	blx	r7
		if (len < 0) {
   1a6a8:	1e05      	subs	r5, r0, #0
   1a6aa:	daa7      	bge.n	1a5fc <sc_set+0x28>
   1a6ac:	4b0a      	ldr	r3, [pc, #40]	; (1a6d8 <sc_set+0x104>)
   1a6ae:	4a09      	ldr	r2, [pc, #36]	; (1a6d4 <sc_set+0x100>)
			BT_ERR("Failed to decode value (err %zd)", len);
   1a6b0:	480e      	ldr	r0, [pc, #56]	; (1a6ec <sc_set+0x118>)
   1a6b2:	1ad2      	subs	r2, r2, r3
   1a6b4:	08d2      	lsrs	r2, r2, #3
   1a6b6:	0192      	lsls	r2, r2, #6
   1a6b8:	f042 0201 	orr.w	r2, r2, #1
   1a6bc:	4629      	mov	r1, r5
   1a6be:	f00e fa83 	bl	28bc8 <log_1>
			return len;
   1a6c2:	462c      	mov	r4, r5
   1a6c4:	e79a      	b.n	1a5fc <sc_set+0x28>
	if (len_rd) {
   1a6c6:	2e00      	cmp	r6, #0
   1a6c8:	d1e9      	bne.n	1a69e <sc_set+0xca>
		memset(cfg, 0, sizeof(*cfg));
   1a6ca:	220c      	movs	r2, #12
   1a6cc:	4631      	mov	r1, r6
   1a6ce:	f010 f9ef 	bl	2aab0 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1a6d2:	e793      	b.n	1a5fc <sc_set+0x28>
   1a6d4:	0002d970 	.word	0x0002d970
   1a6d8:	0002d948 	.word	0x0002d948
   1a6dc:	0002fd91 	.word	0x0002fd91
   1a6e0:	0003103c 	.word	0x0003103c
   1a6e4:	00031058 	.word	0x00031058
   1a6e8:	00031073 	.word	0x00031073
   1a6ec:	00030fc6 	.word	0x00030fc6

0001a6f0 <find_cf_cfg_by_addr>:
{
   1a6f0:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1a6f2:	4c0e      	ldr	r4, [pc, #56]	; (1a72c <find_cf_cfg_by_addr+0x3c>)
   1a6f4:	7823      	ldrb	r3, [r4, #0]
   1a6f6:	4283      	cmp	r3, r0
{
   1a6f8:	4606      	mov	r6, r0
   1a6fa:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1a6fc:	d00a      	beq.n	1a714 <find_cf_cfg_by_addr+0x24>
   1a6fe:	7c23      	ldrb	r3, [r4, #16]
   1a700:	42b3      	cmp	r3, r6
   1a702:	d111      	bne.n	1a728 <find_cf_cfg_by_addr+0x38>
   1a704:	490a      	ldr	r1, [pc, #40]	; (1a730 <find_cf_cfg_by_addr+0x40>)
   1a706:	2207      	movs	r2, #7
   1a708:	4628      	mov	r0, r5
   1a70a:	f010 f99f 	bl	2aa4c <memcmp>
   1a70e:	b958      	cbnz	r0, 1a728 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a710:	2001      	movs	r0, #1
   1a712:	e006      	b.n	1a722 <find_cf_cfg_by_addr+0x32>
   1a714:	2207      	movs	r2, #7
   1a716:	1c61      	adds	r1, r4, #1
   1a718:	4628      	mov	r0, r5
   1a71a:	f010 f997 	bl	2aa4c <memcmp>
			if (id == cf_cfg[i].id &&
   1a71e:	2800      	cmp	r0, #0
   1a720:	d1ed      	bne.n	1a6fe <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   1a722:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   1a726:	e000      	b.n	1a72a <find_cf_cfg_by_addr+0x3a>
	return NULL;
   1a728:	2000      	movs	r0, #0
}
   1a72a:	bd70      	pop	{r4, r5, r6, pc}
   1a72c:	20002a34 	.word	0x20002a34
   1a730:	20002a45 	.word	0x20002a45

0001a734 <find_cf_cfg>:
{
   1a734:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a736:	4c16      	ldr	r4, [pc, #88]	; (1a790 <find_cf_cfg+0x5c>)
		if (!conn) {
   1a738:	4605      	mov	r5, r0
   1a73a:	b140      	cbz	r0, 1a74e <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a73c:	4622      	mov	r2, r4
   1a73e:	f812 1b01 	ldrb.w	r1, [r2], #1
   1a742:	f010 fe51 	bl	2b3e8 <bt_conn_is_peer_addr_le>
   1a746:	b1c0      	cbz	r0, 1a77a <find_cf_cfg+0x46>
}
   1a748:	4620      	mov	r0, r4
   1a74a:	b003      	add	sp, #12
   1a74c:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a74e:	9000      	str	r0, [sp, #0]
   1a750:	2207      	movs	r2, #7
   1a752:	f8cd 0003 	str.w	r0, [sp, #3]
   1a756:	4669      	mov	r1, sp
   1a758:	1c60      	adds	r0, r4, #1
   1a75a:	f010 f977 	bl	2aa4c <memcmp>
   1a75e:	2800      	cmp	r0, #0
   1a760:	d0f2      	beq.n	1a748 <find_cf_cfg+0x14>
   1a762:	2207      	movs	r2, #7
   1a764:	4669      	mov	r1, sp
   1a766:	f104 0011 	add.w	r0, r4, #17
   1a76a:	9500      	str	r5, [sp, #0]
   1a76c:	f8cd 5003 	str.w	r5, [sp, #3]
   1a770:	f010 f96c 	bl	2aa4c <memcmp>
   1a774:	b948      	cbnz	r0, 1a78a <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a776:	3410      	adds	r4, #16
   1a778:	e7e6      	b.n	1a748 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a77a:	7c21      	ldrb	r1, [r4, #16]
   1a77c:	f104 0211 	add.w	r2, r4, #17
   1a780:	4628      	mov	r0, r5
   1a782:	f010 fe31 	bl	2b3e8 <bt_conn_is_peer_addr_le>
   1a786:	2800      	cmp	r0, #0
   1a788:	d1f5      	bne.n	1a776 <find_cf_cfg+0x42>
	return NULL;
   1a78a:	2400      	movs	r4, #0
   1a78c:	e7dc      	b.n	1a748 <find_cf_cfg+0x14>
   1a78e:	bf00      	nop
   1a790:	20002a34 	.word	0x20002a34

0001a794 <cf_write>:
{
   1a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a798:	4698      	mov	r8, r3
   1a79a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a79e:	2b01      	cmp	r3, #1
{
   1a7a0:	4606      	mov	r6, r0
   1a7a2:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1a7a4:	d83d      	bhi.n	1a822 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1a7a6:	4443      	add	r3, r8
   1a7a8:	2b01      	cmp	r3, #1
   1a7aa:	4645      	mov	r5, r8
   1a7ac:	dc3c      	bgt.n	1a828 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1a7ae:	f7ff ffc1 	bl	1a734 <find_cf_cfg>
	if (!cfg) {
   1a7b2:	4604      	mov	r4, r0
   1a7b4:	b990      	cbnz	r0, 1a7dc <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1a7b6:	f7ff ffbd 	bl	1a734 <find_cf_cfg>
	if (!cfg) {
   1a7ba:	4604      	mov	r4, r0
   1a7bc:	b970      	cbnz	r0, 1a7dc <cf_write+0x48>
   1a7be:	4b1d      	ldr	r3, [pc, #116]	; (1a834 <cf_write+0xa0>)
   1a7c0:	491d      	ldr	r1, [pc, #116]	; (1a838 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   1a7c2:	481e      	ldr	r0, [pc, #120]	; (1a83c <cf_write+0xa8>)
   1a7c4:	1ac9      	subs	r1, r1, r3
   1a7c6:	08c9      	lsrs	r1, r1, #3
   1a7c8:	0189      	lsls	r1, r1, #6
   1a7ca:	f041 0102 	orr.w	r1, r1, #2
   1a7ce:	f00e f9ee 	bl	28bae <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a7d2:	f06f 0510 	mvn.w	r5, #16
}
   1a7d6:	4628      	mov	r0, r5
   1a7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1a7dc:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a7de:	f1b8 0f00 	cmp.w	r8, #0
   1a7e2:	d10c      	bne.n	1a7fe <cf_write+0x6a>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a7e4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1a7e8:	1c60      	adds	r0, r4, #1
   1a7ea:	f011 fb19 	bl	2be20 <bt_addr_le_copy>
	cfg->id = conn->id;
   1a7ee:	4620      	mov	r0, r4
   1a7f0:	7a33      	ldrb	r3, [r6, #8]
   1a7f2:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a7f6:	2101      	movs	r1, #1
   1a7f8:	f011 fb03 	bl	2be02 <atomic_or>
}
   1a7fc:	e7eb      	b.n	1a7d6 <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a7fe:	7a20      	ldrb	r0, [r4, #8]
   1a800:	fa20 f301 	lsr.w	r3, r0, r1
   1a804:	07da      	lsls	r2, r3, #31
   1a806:	d503      	bpl.n	1a810 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   1a808:	783b      	ldrb	r3, [r7, #0]
   1a80a:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a80c:	07db      	lsls	r3, r3, #31
   1a80e:	d50e      	bpl.n	1a82e <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a810:	3101      	adds	r1, #1
   1a812:	2903      	cmp	r1, #3
   1a814:	d1e3      	bne.n	1a7de <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1a816:	783b      	ldrb	r3, [r7, #0]
   1a818:	f003 0307 	and.w	r3, r3, #7
   1a81c:	4318      	orrs	r0, r3
   1a81e:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1a820:	e7e0      	b.n	1a7e4 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a822:	f06f 0506 	mvn.w	r5, #6
   1a826:	e7d6      	b.n	1a7d6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a828:	f06f 050c 	mvn.w	r5, #12
   1a82c:	e7d3      	b.n	1a7d6 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a82e:	f06f 0512 	mvn.w	r5, #18
   1a832:	e7d0      	b.n	1a7d6 <cf_write+0x42>
   1a834:	0002d948 	.word	0x0002d948
   1a838:	0002d970 	.word	0x0002d970
   1a83c:	00031095 	.word	0x00031095

0001a840 <cf_set>:
{
   1a840:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a844:	4688      	mov	r8, r1
   1a846:	4616      	mov	r6, r2
   1a848:	461f      	mov	r7, r3
	if (!name) {
   1a84a:	4605      	mov	r5, r0
   1a84c:	b978      	cbnz	r0, 1a86e <cf_set+0x2e>
   1a84e:	4939      	ldr	r1, [pc, #228]	; (1a934 <cf_set+0xf4>)
   1a850:	4b39      	ldr	r3, [pc, #228]	; (1a938 <cf_set+0xf8>)
		BT_ERR("Insufficient number of arguments");
   1a852:	483a      	ldr	r0, [pc, #232]	; (1a93c <cf_set+0xfc>)
   1a854:	1ac9      	subs	r1, r1, r3
   1a856:	08c9      	lsrs	r1, r1, #3
   1a858:	0189      	lsls	r1, r1, #6
   1a85a:	f041 0101 	orr.w	r1, r1, #1
   1a85e:	f00e f9a6 	bl	28bae <log_0>
		return -EINVAL;
   1a862:	f06f 0415 	mvn.w	r4, #21
}
   1a866:	4620      	mov	r0, r4
   1a868:	b004      	add	sp, #16
   1a86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1a86e:	a902      	add	r1, sp, #8
   1a870:	f010 f9bd 	bl	2abee <bt_settings_decode_key>
	if (err) {
   1a874:	4604      	mov	r4, r0
   1a876:	b178      	cbz	r0, 1a898 <cf_set+0x58>
   1a878:	4a2f      	ldr	r2, [pc, #188]	; (1a938 <cf_set+0xf8>)
   1a87a:	4c2e      	ldr	r4, [pc, #184]	; (1a934 <cf_set+0xf4>)
   1a87c:	4628      	mov	r0, r5
   1a87e:	1aa4      	subs	r4, r4, r2
   1a880:	f7f7 fd8e 	bl	123a0 <z_log_strdup>
   1a884:	08e4      	lsrs	r4, r4, #3
		BT_ERR("Unable to decode address %s", log_strdup(name));
   1a886:	01a4      	lsls	r4, r4, #6
   1a888:	f044 0401 	orr.w	r4, r4, #1
   1a88c:	4601      	mov	r1, r0
   1a88e:	482c      	ldr	r0, [pc, #176]	; (1a940 <cf_set+0x100>)
   1a890:	4622      	mov	r2, r4
   1a892:	f00e f999 	bl	28bc8 <log_1>
   1a896:	e7e4      	b.n	1a862 <cf_set+0x22>
	settings_name_next(name, &next);
   1a898:	a901      	add	r1, sp, #4
   1a89a:	4628      	mov	r0, r5
   1a89c:	f00e fe64 	bl	29568 <settings_name_next>
	if (!next) {
   1a8a0:	9801      	ldr	r0, [sp, #4]
   1a8a2:	b170      	cbz	r0, 1a8c2 <cf_set+0x82>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a8a4:	4621      	mov	r1, r4
   1a8a6:	220a      	movs	r2, #10
   1a8a8:	f010 f806 	bl	2a8b8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a8ac:	4601      	mov	r1, r0
   1a8ae:	b140      	cbz	r0, 1a8c2 <cf_set+0x82>
   1a8b0:	4a20      	ldr	r2, [pc, #128]	; (1a934 <cf_set+0xf4>)
   1a8b2:	4b21      	ldr	r3, [pc, #132]	; (1a938 <cf_set+0xf8>)
			BT_ERR("Invalid local identity %lu", next_id);
   1a8b4:	4823      	ldr	r0, [pc, #140]	; (1a944 <cf_set+0x104>)
   1a8b6:	1ad2      	subs	r2, r2, r3
   1a8b8:	08d2      	lsrs	r2, r2, #3
   1a8ba:	0192      	lsls	r2, r2, #6
   1a8bc:	f042 0201 	orr.w	r2, r2, #1
   1a8c0:	e7e7      	b.n	1a892 <cf_set+0x52>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1a8c2:	a902      	add	r1, sp, #8
   1a8c4:	2000      	movs	r0, #0
   1a8c6:	f7ff ff13 	bl	1a6f0 <find_cf_cfg_by_addr>
	if (!cfg) {
   1a8ca:	4605      	mov	r5, r0
   1a8cc:	b9b0      	cbnz	r0, 1a8fc <cf_set+0xbc>
		cfg = find_cf_cfg(NULL);
   1a8ce:	f7ff ff31 	bl	1a734 <find_cf_cfg>
		if (!cfg) {
   1a8d2:	4605      	mov	r5, r0
   1a8d4:	b960      	cbnz	r0, 1a8f0 <cf_set+0xb0>
   1a8d6:	4b18      	ldr	r3, [pc, #96]	; (1a938 <cf_set+0xf8>)
   1a8d8:	4916      	ldr	r1, [pc, #88]	; (1a934 <cf_set+0xf4>)
			BT_ERR("Unable to restore CF: no cfg left");
   1a8da:	481b      	ldr	r0, [pc, #108]	; (1a948 <cf_set+0x108>)
   1a8dc:	1ac9      	subs	r1, r1, r3
   1a8de:	08c9      	lsrs	r1, r1, #3
   1a8e0:	0189      	lsls	r1, r1, #6
   1a8e2:	f041 0101 	orr.w	r1, r1, #1
   1a8e6:	f00e f962 	bl	28bae <log_0>
			return -ENOMEM;
   1a8ea:	f06f 040b 	mvn.w	r4, #11
   1a8ee:	e7ba      	b.n	1a866 <cf_set+0x26>
		cfg->id = id;
   1a8f0:	2300      	movs	r3, #0
   1a8f2:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1a8f6:	a902      	add	r1, sp, #8
   1a8f8:	f011 fa92 	bl	2be20 <bt_addr_le_copy>
	if (len_rd) {
   1a8fc:	f1b8 0f00 	cmp.w	r8, #0
   1a900:	d013      	beq.n	1a92a <cf_set+0xea>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1a902:	f105 0108 	add.w	r1, r5, #8
   1a906:	2201      	movs	r2, #1
   1a908:	4638      	mov	r0, r7
   1a90a:	47b0      	blx	r6
		if (len < 0) {
   1a90c:	1e05      	subs	r5, r0, #0
   1a90e:	daaa      	bge.n	1a866 <cf_set+0x26>
   1a910:	4b09      	ldr	r3, [pc, #36]	; (1a938 <cf_set+0xf8>)
   1a912:	4a08      	ldr	r2, [pc, #32]	; (1a934 <cf_set+0xf4>)
			BT_ERR("Failed to decode value (err %zd)", len);
   1a914:	480d      	ldr	r0, [pc, #52]	; (1a94c <cf_set+0x10c>)
   1a916:	1ad2      	subs	r2, r2, r3
   1a918:	08d2      	lsrs	r2, r2, #3
   1a91a:	0192      	lsls	r2, r2, #6
   1a91c:	f042 0201 	orr.w	r2, r2, #1
   1a920:	4629      	mov	r1, r5
   1a922:	f00e f951 	bl	28bc8 <log_1>
			return len;
   1a926:	462c      	mov	r4, r5
   1a928:	e79d      	b.n	1a866 <cf_set+0x26>
		clear_cf_cfg(cfg);
   1a92a:	4628      	mov	r0, r5
   1a92c:	f011 fa98 	bl	2be60 <clear_cf_cfg>
   1a930:	e799      	b.n	1a866 <cf_set+0x26>
   1a932:	bf00      	nop
   1a934:	0002d970 	.word	0x0002d970
   1a938:	0002d948 	.word	0x0002d948
   1a93c:	0002fd91 	.word	0x0002fd91
   1a940:	0003103c 	.word	0x0003103c
   1a944:	00031058 	.word	0x00031058
   1a948:	000310c1 	.word	0x000310c1
   1a94c:	00030fc6 	.word	0x00030fc6

0001a950 <read_ppcp>:
{
   1a950:	b513      	push	{r0, r1, r4, lr}
   1a952:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1a956:	4c0b      	ldr	r4, [pc, #44]	; (1a984 <read_ppcp+0x34>)
{
   1a958:	4610      	mov	r0, r2
	if (offset > value_len) {
   1a95a:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1a95c:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1a960:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1a964:	d80b      	bhi.n	1a97e <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1a966:	f1c1 0408 	rsb	r4, r1, #8
   1a96a:	429c      	cmp	r4, r3
   1a96c:	bfa8      	it	ge
   1a96e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1a970:	4622      	mov	r2, r4
   1a972:	4469      	add	r1, sp
   1a974:	f010 f891 	bl	2aa9a <memcpy>
}
   1a978:	4620      	mov	r0, r4
   1a97a:	b002      	add	sp, #8
   1a97c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a97e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1a982:	e7f9      	b.n	1a978 <read_ppcp+0x28>
   1a984:	00280018 	.word	0x00280018

0001a988 <sc_indicate_rsp>:
{
   1a988:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a98a:	f06f 0102 	mvn.w	r1, #2
   1a98e:	4604      	mov	r4, r0
   1a990:	480d      	ldr	r0, [pc, #52]	; (1a9c8 <sc_indicate_rsp+0x40>)
   1a992:	f011 fa56 	bl	2be42 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a996:	480c      	ldr	r0, [pc, #48]	; (1a9c8 <sc_indicate_rsp+0x40>)
   1a998:	f011 f9d7 	bl	2bd4a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1a99c:	07c2      	lsls	r2, r0, #31
   1a99e:	d504      	bpl.n	1a9aa <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1a9a0:	480a      	ldr	r0, [pc, #40]	; (1a9cc <sc_indicate_rsp+0x44>)
   1a9a2:	2200      	movs	r2, #0
   1a9a4:	2300      	movs	r3, #0
   1a9a6:	f008 fd93 	bl	234d0 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1a9aa:	4620      	mov	r0, r4
   1a9ac:	f7ff fec2 	bl	1a734 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1a9b0:	b140      	cbz	r0, 1a9c4 <sc_indicate_rsp+0x3c>
   1a9b2:	7a03      	ldrb	r3, [r0, #8]
   1a9b4:	07db      	lsls	r3, r3, #31
   1a9b6:	d505      	bpl.n	1a9c4 <sc_indicate_rsp+0x3c>
}
   1a9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a9bc:	2101      	movs	r1, #1
   1a9be:	300c      	adds	r0, #12
   1a9c0:	f011 ba1f 	b.w	2be02 <atomic_or>
   1a9c4:	bd10      	pop	{r4, pc}
   1a9c6:	bf00      	nop
   1a9c8:	20001c90 	.word	0x20001c90
   1a9cc:	20001c60 	.word	0x20001c60

0001a9d0 <bt_gatt_clear_sc>:
{
   1a9d0:	b570      	push	{r4, r5, r6, lr}
   1a9d2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1a9d4:	f7ff fd98 	bl	1a508 <find_sc_cfg>
	if (!cfg) {
   1a9d8:	4604      	mov	r4, r0
   1a9da:	b318      	cbz	r0, 1aa24 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
   1a9dc:	4605      	mov	r5, r0
   1a9de:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a9e2:	b312      	cbz	r2, 1aa2a <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a9e4:	ae02      	add	r6, sp, #8
   1a9e6:	2104      	movs	r1, #4
   1a9e8:	4630      	mov	r0, r6
   1a9ea:	f00d fe25 	bl	28638 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a9ee:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1a9f0:	2124      	movs	r1, #36	; 0x24
   1a9f2:	4a0f      	ldr	r2, [pc, #60]	; (1aa30 <bt_gatt_clear_sc+0x60>)
   1a9f4:	462b      	mov	r3, r5
   1a9f6:	a803      	add	r0, sp, #12
   1a9f8:	f7fa fe7a 	bl	156f0 <bt_settings_encode_key>
		err = settings_delete(key);
   1a9fc:	a803      	add	r0, sp, #12
   1a9fe:	f00e fd8c 	bl	2951a <settings_delete>
		if (err) {
   1aa02:	4601      	mov	r1, r0
   1aa04:	b148      	cbz	r0, 1aa1a <bt_gatt_clear_sc+0x4a>
   1aa06:	4a0b      	ldr	r2, [pc, #44]	; (1aa34 <bt_gatt_clear_sc+0x64>)
   1aa08:	4b0b      	ldr	r3, [pc, #44]	; (1aa38 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
   1aa0a:	480c      	ldr	r0, [pc, #48]	; (1aa3c <bt_gatt_clear_sc+0x6c>)
   1aa0c:	1ad2      	subs	r2, r2, r3
   1aa0e:	08d2      	lsrs	r2, r2, #3
   1aa10:	0192      	lsls	r2, r2, #6
   1aa12:	f042 0201 	orr.w	r2, r2, #1
   1aa16:	f00e f8d7 	bl	28bc8 <log_1>
	memset(cfg, 0, sizeof(*cfg));
   1aa1a:	220c      	movs	r2, #12
   1aa1c:	2100      	movs	r1, #0
   1aa1e:	4620      	mov	r0, r4
   1aa20:	f010 f846 	bl	2aab0 <memset>
}
   1aa24:	2000      	movs	r0, #0
   1aa26:	b00c      	add	sp, #48	; 0x30
   1aa28:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1aa2a:	9200      	str	r2, [sp, #0]
   1aa2c:	e7e0      	b.n	1a9f0 <bt_gatt_clear_sc+0x20>
   1aa2e:	bf00      	nop
   1aa30:	0003136d 	.word	0x0003136d
   1aa34:	0002d970 	.word	0x0002d970
   1aa38:	0002d948 	.word	0x0002d948
   1aa3c:	000310e3 	.word	0x000310e3

0001aa40 <sc_clear>:
{
   1aa40:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa42:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1aa46:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa48:	4631      	mov	r1, r6
   1aa4a:	7a00      	ldrb	r0, [r0, #8]
   1aa4c:	f010 fa58 	bl	2af00 <bt_addr_le_is_bonded>
   1aa50:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1aa52:	4631      	mov	r1, r6
   1aa54:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa56:	b17d      	cbz	r5, 1aa78 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1aa58:	f7ff ffba 	bl	1a9d0 <bt_gatt_clear_sc>
		if (err) {
   1aa5c:	4601      	mov	r1, r0
   1aa5e:	b1a0      	cbz	r0, 1aa8a <sc_clear+0x4a>
   1aa60:	4a0a      	ldr	r2, [pc, #40]	; (1aa8c <sc_clear+0x4c>)
   1aa62:	4b0b      	ldr	r3, [pc, #44]	; (1aa90 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
   1aa64:	480b      	ldr	r0, [pc, #44]	; (1aa94 <sc_clear+0x54>)
   1aa66:	1ad2      	subs	r2, r2, r3
   1aa68:	08d2      	lsrs	r2, r2, #3
   1aa6a:	0192      	lsls	r2, r2, #6
}
   1aa6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   1aa70:	f042 0201 	orr.w	r2, r2, #1
   1aa74:	f00e b8a8 	b.w	28bc8 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1aa78:	f7ff fd46 	bl	1a508 <find_sc_cfg>
		if (cfg) {
   1aa7c:	b128      	cbz	r0, 1aa8a <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
   1aa7e:	4629      	mov	r1, r5
   1aa80:	220c      	movs	r2, #12
}
   1aa82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1aa86:	f010 b813 	b.w	2aab0 <memset>
}
   1aa8a:	bd70      	pop	{r4, r5, r6, pc}
   1aa8c:	0002d970 	.word	0x0002d970
   1aa90:	0002d948 	.word	0x0002d948
   1aa94:	00031100 	.word	0x00031100

0001aa98 <disconnected_cb>:
{
   1aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aa9c:	4b1f      	ldr	r3, [pc, #124]	; (1ab1c <disconnected_cb+0x84>)
{
   1aa9e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aaa0:	6882      	ldr	r2, [r0, #8]
   1aaa2:	429a      	cmp	r2, r3
{
   1aaa4:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aaa6:	d102      	bne.n	1aaae <disconnected_cb+0x16>
	ccc = attr->user_data;
   1aaa8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1aaaa:	8963      	ldrh	r3, [r4, #10]
   1aaac:	b9c3      	cbnz	r3, 1aae0 <disconnected_cb+0x48>
}
   1aaae:	2001      	movs	r0, #1
   1aab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aab4:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1aab8:	7a28      	ldrb	r0, [r5, #8]
   1aaba:	4641      	mov	r1, r8
   1aabc:	f010 fa20 	bl	2af00 <bt_addr_le_is_bonded>
   1aac0:	b948      	cbnz	r0, 1aad6 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   1aac2:	4b17      	ldr	r3, [pc, #92]	; (1ab20 <disconnected_cb+0x88>)
   1aac4:	429c      	cmp	r4, r3
   1aac6:	d102      	bne.n	1aace <disconnected_cb+0x36>
					sc_clear(conn);
   1aac8:	4628      	mov	r0, r5
   1aaca:	f7ff ffb9 	bl	1aa40 <sc_clear>
				clear_ccc_cfg(cfg);
   1aace:	4620      	mov	r0, r4
   1aad0:	f011 f9a9 	bl	2be26 <clear_ccc_cfg>
	if (!value_used) {
   1aad4:	e019      	b.n	1ab0a <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1aad6:	4641      	mov	r1, r8
   1aad8:	4638      	mov	r0, r7
   1aada:	f011 f9a1 	bl	2be20 <bt_addr_le_copy>
	if (!value_used) {
   1aade:	e014      	b.n	1ab0a <disconnected_cb+0x72>
		if (!cfg->value) {
   1aae0:	8923      	ldrh	r3, [r4, #8]
   1aae2:	b193      	cbz	r3, 1ab0a <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1aae4:	4627      	mov	r7, r4
   1aae6:	4628      	mov	r0, r5
   1aae8:	f817 1b01 	ldrb.w	r1, [r7], #1
   1aaec:	463a      	mov	r2, r7
   1aaee:	f010 fc7b 	bl	2b3e8 <bt_conn_is_peer_addr_le>
   1aaf2:	2800      	cmp	r0, #0
   1aaf4:	d1de      	bne.n	1aab4 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1aaf6:	7820      	ldrb	r0, [r4, #0]
   1aaf8:	4639      	mov	r1, r7
   1aafa:	f7fd ff15 	bl	18928 <bt_conn_lookup_addr_le>
			if (tmp) {
   1aafe:	b120      	cbz	r0, 1ab0a <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   1ab00:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   1ab02:	f7fd fc19 	bl	18338 <bt_conn_unref>
	if (!value_used) {
   1ab06:	2d07      	cmp	r5, #7
   1ab08:	d0d1      	beq.n	1aaae <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1ab0a:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1ab0c:	2100      	movs	r1, #0
   1ab0e:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1ab10:	2b00      	cmp	r3, #0
   1ab12:	d0cc      	beq.n	1aaae <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1ab14:	4630      	mov	r0, r6
   1ab16:	4798      	blx	r3
   1ab18:	e7c9      	b.n	1aaae <disconnected_cb+0x16>
   1ab1a:	bf00      	nop
   1ab1c:	0001a3c9 	.word	0x0001a3c9
   1ab20:	2000056c 	.word	0x2000056c

0001ab24 <bt_gatt_init>:
{
   1ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ab26:	4b2c      	ldr	r3, [pc, #176]	; (1abd8 <bt_gatt_init+0xb4>)
   1ab28:	f3bf 8f5b 	dmb	ish
   1ab2c:	2201      	movs	r2, #1
   1ab2e:	e853 1f00 	ldrex	r1, [r3]
   1ab32:	2900      	cmp	r1, #0
   1ab34:	d103      	bne.n	1ab3e <bt_gatt_init+0x1a>
   1ab36:	e843 2000 	strex	r0, r2, [r3]
   1ab3a:	2800      	cmp	r0, #0
   1ab3c:	d1f7      	bne.n	1ab2e <bt_gatt_init+0xa>
   1ab3e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1ab42:	d148      	bne.n	1abd6 <bt_gatt_init+0xb2>
   1ab44:	f3bf 8f5b 	dmb	ish
   1ab48:	4b24      	ldr	r3, [pc, #144]	; (1abdc <bt_gatt_init+0xb8>)
   1ab4a:	e853 1f00 	ldrex	r1, [r3]
   1ab4e:	2900      	cmp	r1, #0
   1ab50:	d103      	bne.n	1ab5a <bt_gatt_init+0x36>
   1ab52:	e843 2000 	strex	r0, r2, [r3]
   1ab56:	2800      	cmp	r0, #0
   1ab58:	d1f7      	bne.n	1ab4a <bt_gatt_init+0x26>
   1ab5a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1ab5e:	d035      	beq.n	1abcc <bt_gatt_init+0xa8>
	list->head = NULL;
   1ab60:	4b1f      	ldr	r3, [pc, #124]	; (1abe0 <bt_gatt_init+0xbc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1ab62:	4920      	ldr	r1, [pc, #128]	; (1abe4 <bt_gatt_init+0xc0>)
   1ab64:	4820      	ldr	r0, [pc, #128]	; (1abe8 <bt_gatt_init+0xc4>)
   1ab66:	2200      	movs	r2, #0
	list->tail = NULL;
   1ab68:	e9c3 2200 	strd	r2, r2, [r3]
   1ab6c:	f008 fb8c 	bl	23288 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1ab70:	2300      	movs	r3, #0
   1ab72:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ab76:	481c      	ldr	r0, [pc, #112]	; (1abe8 <bt_gatt_init+0xc4>)
   1ab78:	f008 fc2e 	bl	233d8 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1ab7c:	491b      	ldr	r1, [pc, #108]	; (1abec <bt_gatt_init+0xc8>)
   1ab7e:	481c      	ldr	r0, [pc, #112]	; (1abf0 <bt_gatt_init+0xcc>)
   1ab80:	f008 fb82 	bl	23288 <k_work_init_delayable>
   1ab84:	2102      	movs	r1, #2
   1ab86:	481b      	ldr	r0, [pc, #108]	; (1abf4 <bt_gatt_init+0xd0>)
   1ab88:	f011 f93b 	bl	2be02 <atomic_or>
}
   1ab8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1ab90:	4919      	ldr	r1, [pc, #100]	; (1abf8 <bt_gatt_init+0xd4>)
   1ab92:	481a      	ldr	r0, [pc, #104]	; (1abfc <bt_gatt_init+0xd8>)
   1ab94:	f008 bb78 	b.w	23288 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1ab98:	4a19      	ldr	r2, [pc, #100]	; (1ac00 <bt_gatt_init+0xdc>)
   1ab9a:	6863      	ldr	r3, [r4, #4]
   1ab9c:	8811      	ldrh	r1, [r2, #0]
   1ab9e:	440b      	add	r3, r1
   1aba0:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1aba2:	3408      	adds	r4, #8
   1aba4:	42ac      	cmp	r4, r5
   1aba6:	d90e      	bls.n	1abc6 <bt_gatt_init+0xa2>
   1aba8:	4916      	ldr	r1, [pc, #88]	; (1ac04 <bt_gatt_init+0xe0>)
   1abaa:	4817      	ldr	r0, [pc, #92]	; (1ac08 <bt_gatt_init+0xe4>)
   1abac:	f240 4351 	movw	r3, #1105	; 0x451
   1abb0:	4632      	mov	r2, r6
   1abb2:	f00d fddd 	bl	28770 <printk>
   1abb6:	4815      	ldr	r0, [pc, #84]	; (1ac0c <bt_gatt_init+0xe8>)
   1abb8:	f00d fdda 	bl	28770 <printk>
   1abbc:	f240 4151 	movw	r1, #1105	; 0x451
   1abc0:	4630      	mov	r0, r6
   1abc2:	f00d ffc6 	bl	28b52 <assert_post_action>
   1abc6:	42bc      	cmp	r4, r7
   1abc8:	d3e6      	bcc.n	1ab98 <bt_gatt_init+0x74>
   1abca:	e7c9      	b.n	1ab60 <bt_gatt_init+0x3c>
   1abcc:	4d10      	ldr	r5, [pc, #64]	; (1ac10 <bt_gatt_init+0xec>)
   1abce:	4c11      	ldr	r4, [pc, #68]	; (1ac14 <bt_gatt_init+0xf0>)
   1abd0:	4e11      	ldr	r6, [pc, #68]	; (1ac18 <bt_gatt_init+0xf4>)
   1abd2:	462f      	mov	r7, r5
   1abd4:	e7e6      	b.n	1aba4 <bt_gatt_init+0x80>
}
   1abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1abd8:	20002a54 	.word	0x20002a54
   1abdc:	20002a70 	.word	0x20002a70
   1abe0:	20002a2c 	.word	0x20002a2c
   1abe4:	0001ae45 	.word	0x0001ae45
   1abe8:	20001bb0 	.word	0x20001bb0
   1abec:	0001b26d 	.word	0x0001b26d
   1abf0:	20001c60 	.word	0x20001c60
   1abf4:	20001c90 	.word	0x20001c90
   1abf8:	0002c1ef 	.word	0x0002c1ef
   1abfc:	20001c10 	.word	0x20001c10
   1ac00:	20003732 	.word	0x20003732
   1ac04:	0003114d 	.word	0x0003114d
   1ac08:	0002e915 	.word	0x0002e915
   1ac0c:	0002f2e8 	.word	0x0002f2e8
   1ac10:	0002d8d0 	.word	0x0002d8d0
   1ac14:	0002d8b8 	.word	0x0002d8b8
   1ac18:	00031116 	.word	0x00031116

0001ac1c <bt_gatt_attr_get_handle>:
{
   1ac1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1ac20:	4604      	mov	r4, r0
   1ac22:	b910      	cbnz	r0, 1ac2a <bt_gatt_attr_get_handle+0xe>
		return 0;
   1ac24:	2000      	movs	r0, #0
}
   1ac26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1ac2a:	8a00      	ldrh	r0, [r0, #16]
   1ac2c:	2800      	cmp	r0, #0
   1ac2e:	d1fa      	bne.n	1ac26 <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ac30:	4f1a      	ldr	r7, [pc, #104]	; (1ac9c <bt_gatt_attr_get_handle+0x80>)
   1ac32:	4d1b      	ldr	r5, [pc, #108]	; (1aca0 <bt_gatt_attr_get_handle+0x84>)
   1ac34:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1acb0 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   1ac38:	2601      	movs	r6, #1
   1ac3a:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ac3c:	42bd      	cmp	r5, r7
   1ac3e:	d90e      	bls.n	1ac5e <bt_gatt_attr_get_handle+0x42>
   1ac40:	4918      	ldr	r1, [pc, #96]	; (1aca4 <bt_gatt_attr_get_handle+0x88>)
   1ac42:	4819      	ldr	r0, [pc, #100]	; (1aca8 <bt_gatt_attr_get_handle+0x8c>)
   1ac44:	f240 538c 	movw	r3, #1420	; 0x58c
   1ac48:	464a      	mov	r2, r9
   1ac4a:	f00d fd91 	bl	28770 <printk>
   1ac4e:	4817      	ldr	r0, [pc, #92]	; (1acac <bt_gatt_attr_get_handle+0x90>)
   1ac50:	f00d fd8e 	bl	28770 <printk>
   1ac54:	f240 518c 	movw	r1, #1420	; 0x58c
   1ac58:	4648      	mov	r0, r9
   1ac5a:	f00d ff7a 	bl	28b52 <assert_post_action>
   1ac5e:	4545      	cmp	r5, r8
   1ac60:	d2e0      	bcs.n	1ac24 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1ac62:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1ac66:	4574      	cmp	r4, lr
   1ac68:	d305      	bcc.n	1ac76 <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ac6a:	2114      	movs	r1, #20
   1ac6c:	fb01 e30c 	mla	r3, r1, ip, lr
   1ac70:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1ac72:	429c      	cmp	r4, r3
   1ac74:	d90f      	bls.n	1ac96 <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1ac76:	eb06 030c 	add.w	r3, r6, ip
   1ac7a:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ac7c:	3508      	adds	r5, #8
   1ac7e:	4606      	mov	r6, r0
   1ac80:	e7dc      	b.n	1ac3c <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1ac82:	fb01 e302 	mla	r3, r1, r2, lr
   1ac86:	429c      	cmp	r4, r3
   1ac88:	d0cd      	beq.n	1ac26 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ac8a:	3201      	adds	r2, #1
   1ac8c:	18b3      	adds	r3, r6, r2
   1ac8e:	4562      	cmp	r2, ip
   1ac90:	b298      	uxth	r0, r3
   1ac92:	d1f6      	bne.n	1ac82 <bt_gatt_attr_get_handle+0x66>
   1ac94:	e7f2      	b.n	1ac7c <bt_gatt_attr_get_handle+0x60>
   1ac96:	2200      	movs	r2, #0
   1ac98:	e7f8      	b.n	1ac8c <bt_gatt_attr_get_handle+0x70>
   1ac9a:	bf00      	nop
   1ac9c:	0002d8d0 	.word	0x0002d8d0
   1aca0:	0002d8b8 	.word	0x0002d8b8
   1aca4:	00031146 	.word	0x00031146
   1aca8:	0002e915 	.word	0x0002e915
   1acac:	0002f2e8 	.word	0x0002f2e8
   1acb0:	00031116 	.word	0x00031116

0001acb4 <bt_gatt_foreach_attr_type>:
{
   1acb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acb8:	b085      	sub	sp, #20
   1acba:	4607      	mov	r7, r0
   1acbc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1acc0:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1acc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1acc6:	2d00      	cmp	r5, #0
   1acc8:	bf08      	it	eq
   1acca:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1accc:	4b2d      	ldr	r3, [pc, #180]	; (1ad84 <bt_gatt_foreach_attr_type+0xd0>)
{
   1acce:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1acd0:	881b      	ldrh	r3, [r3, #0]
   1acd2:	4283      	cmp	r3, r0
{
   1acd4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1acd6:	d24e      	bcs.n	1ad76 <bt_gatt_foreach_attr_type+0xc2>
}
   1acd8:	b005      	add	sp, #20
   1acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1acde:	6873      	ldr	r3, [r6, #4]
   1ace0:	4423      	add	r3, r4
   1ace2:	42bb      	cmp	r3, r7
   1ace4:	d244      	bcs.n	1ad70 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1ace6:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ace8:	3608      	adds	r6, #8
   1acea:	4556      	cmp	r6, sl
   1acec:	d90e      	bls.n	1ad0c <bt_gatt_foreach_attr_type+0x58>
   1acee:	4926      	ldr	r1, [pc, #152]	; (1ad88 <bt_gatt_foreach_attr_type+0xd4>)
   1acf0:	4826      	ldr	r0, [pc, #152]	; (1ad8c <bt_gatt_foreach_attr_type+0xd8>)
   1acf2:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   1acf6:	465a      	mov	r2, fp
   1acf8:	f00d fd3a 	bl	28770 <printk>
   1acfc:	4824      	ldr	r0, [pc, #144]	; (1ad90 <bt_gatt_foreach_attr_type+0xdc>)
   1acfe:	f00d fd37 	bl	28770 <printk>
   1ad02:	f44f 61ca 	mov.w	r1, #1616	; 0x650
   1ad06:	4658      	mov	r0, fp
   1ad08:	f00d ff23 	bl	28b52 <assert_post_action>
   1ad0c:	4b21      	ldr	r3, [pc, #132]	; (1ad94 <bt_gatt_foreach_attr_type+0xe0>)
   1ad0e:	429e      	cmp	r6, r3
   1ad10:	d3e5      	bcc.n	1acde <bt_gatt_foreach_attr_type+0x2a>
   1ad12:	e7e1      	b.n	1acd8 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1ad14:	5889      	ldr	r1, [r1, r2]
   1ad16:	9303      	str	r3, [sp, #12]
   1ad18:	4640      	mov	r0, r8
   1ad1a:	f00f ff8c 	bl	2ac36 <bt_uuid_cmp>
   1ad1e:	9b03      	ldr	r3, [sp, #12]
   1ad20:	b198      	cbz	r0, 1ad4a <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ad22:	3401      	adds	r4, #1
   1ad24:	f109 0901 	add.w	r9, r9, #1
   1ad28:	b2a4      	uxth	r4, r4
   1ad2a:	6873      	ldr	r3, [r6, #4]
   1ad2c:	454b      	cmp	r3, r9
   1ad2e:	d9db      	bls.n	1ace8 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1ad30:	9b02      	ldr	r3, [sp, #8]
   1ad32:	429c      	cmp	r4, r3
   1ad34:	d8d0      	bhi.n	1acd8 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1ad36:	42bc      	cmp	r4, r7
   1ad38:	d3f3      	bcc.n	1ad22 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1ad3a:	2314      	movs	r3, #20
   1ad3c:	6831      	ldr	r1, [r6, #0]
   1ad3e:	fb03 f209 	mul.w	r2, r3, r9
   1ad42:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1ad44:	f1b8 0f00 	cmp.w	r8, #0
   1ad48:	d1e4      	bne.n	1ad14 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1ad4a:	9a01      	ldr	r2, [sp, #4]
   1ad4c:	b95a      	cbnz	r2, 1ad66 <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1ad4e:	3d01      	subs	r5, #1
   1ad50:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1ad52:	4618      	mov	r0, r3
   1ad54:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1ad56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad58:	4621      	mov	r1, r4
   1ad5a:	4798      	blx	r3
	if (!*num_matches) {
   1ad5c:	2d00      	cmp	r5, #0
   1ad5e:	d0bb      	beq.n	1acd8 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1ad60:	2800      	cmp	r0, #0
   1ad62:	d1de      	bne.n	1ad22 <bt_gatt_foreach_attr_type+0x6e>
   1ad64:	e7b8      	b.n	1acd8 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1ad66:	68da      	ldr	r2, [r3, #12]
   1ad68:	9901      	ldr	r1, [sp, #4]
   1ad6a:	4291      	cmp	r1, r2
   1ad6c:	d1d9      	bne.n	1ad22 <bt_gatt_foreach_attr_type+0x6e>
   1ad6e:	e7ee      	b.n	1ad4e <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ad70:	f04f 0900 	mov.w	r9, #0
   1ad74:	e7d9      	b.n	1ad2a <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ad76:	4e08      	ldr	r6, [pc, #32]	; (1ad98 <bt_gatt_foreach_attr_type+0xe4>)
   1ad78:	f8df a018 	ldr.w	sl, [pc, #24]	; 1ad94 <bt_gatt_foreach_attr_type+0xe0>
   1ad7c:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1ad9c <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   1ad80:	2401      	movs	r4, #1
   1ad82:	e7b2      	b.n	1acea <bt_gatt_foreach_attr_type+0x36>
   1ad84:	20003732 	.word	0x20003732
   1ad88:	00031146 	.word	0x00031146
   1ad8c:	0002e915 	.word	0x0002e915
   1ad90:	0002f2e8 	.word	0x0002f2e8
   1ad94:	0002d8d0 	.word	0x0002d8d0
   1ad98:	0002d8b8 	.word	0x0002d8b8
   1ad9c:	00031116 	.word	0x00031116

0001ada0 <db_hash_gen>:
{
   1ada0:	b530      	push	{r4, r5, lr}
   1ada2:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   1ada4:	2300      	movs	r3, #0
{
   1ada6:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1ada8:	aa1c      	add	r2, sp, #112	; 0x70
   1adaa:	4669      	mov	r1, sp
   1adac:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1adae:	e9cd 3300 	strd	r3, r3, [sp]
   1adb2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1adb6:	f00f fca0 	bl	2a6fa <tc_cmac_setup>
   1adba:	b958      	cbnz	r0, 1add4 <db_hash_gen+0x34>
   1adbc:	491a      	ldr	r1, [pc, #104]	; (1ae28 <db_hash_gen+0x88>)
   1adbe:	4b1b      	ldr	r3, [pc, #108]	; (1ae2c <db_hash_gen+0x8c>)
		BT_ERR("Unable to setup AES CMAC");
   1adc0:	481b      	ldr	r0, [pc, #108]	; (1ae30 <db_hash_gen+0x90>)
   1adc2:	1ac9      	subs	r1, r1, r3
   1adc4:	08c9      	lsrs	r1, r1, #3
   1adc6:	0189      	lsls	r1, r1, #6
   1adc8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1adcc:	f00d feef 	bl	28bae <log_0>
}
   1add0:	b049      	add	sp, #292	; 0x124
   1add2:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1add4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1add8:	2001      	movs	r0, #1
   1adda:	4a16      	ldr	r2, [pc, #88]	; (1ae34 <db_hash_gen+0x94>)
   1addc:	ab04      	add	r3, sp, #16
   1adde:	f011 f9a9 	bl	2c134 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ade2:	4815      	ldr	r0, [pc, #84]	; (1ae38 <db_hash_gen+0x98>)
   1ade4:	a904      	add	r1, sp, #16
   1ade6:	f00f fd1f 	bl	2a828 <tc_cmac_final>
   1adea:	b940      	cbnz	r0, 1adfe <db_hash_gen+0x5e>
   1adec:	490e      	ldr	r1, [pc, #56]	; (1ae28 <db_hash_gen+0x88>)
   1adee:	4b0f      	ldr	r3, [pc, #60]	; (1ae2c <db_hash_gen+0x8c>)
		BT_ERR("Unable to calculate hash");
   1adf0:	4812      	ldr	r0, [pc, #72]	; (1ae3c <db_hash_gen+0x9c>)
   1adf2:	1ac9      	subs	r1, r1, r3
   1adf4:	08c9      	lsrs	r1, r1, #3
   1adf6:	0189      	lsls	r1, r1, #6
   1adf8:	f041 0101 	orr.w	r1, r1, #1
   1adfc:	e7e6      	b.n	1adcc <db_hash_gen+0x2c>
   1adfe:	4b0e      	ldr	r3, [pc, #56]	; (1ae38 <db_hash_gen+0x98>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ae00:	2208      	movs	r2, #8
   1ae02:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ae06:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ae08:	780d      	ldrb	r5, [r1, #0]
   1ae0a:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1ae0e:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ae10:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   1ae14:	d1f7      	bne.n	1ae06 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1ae16:	b10c      	cbz	r4, 1ae1c <db_hash_gen+0x7c>
		db_hash_store();
   1ae18:	f7ff f9de 	bl	1a1d8 <db_hash_store>
   1ae1c:	2104      	movs	r1, #4
   1ae1e:	4808      	ldr	r0, [pc, #32]	; (1ae40 <db_hash_gen+0xa0>)
   1ae20:	f010 ffef 	bl	2be02 <atomic_or>
   1ae24:	e7d4      	b.n	1add0 <db_hash_gen+0x30>
   1ae26:	bf00      	nop
   1ae28:	0002d970 	.word	0x0002d970
   1ae2c:	0002d948 	.word	0x0002d948
   1ae30:	00031175 	.word	0x00031175
   1ae34:	0002bd57 	.word	0x0002bd57
   1ae38:	20001b90 	.word	0x20001b90
   1ae3c:	0003118e 	.word	0x0003118e
   1ae40:	20001c90 	.word	0x20001c90

0001ae44 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ae44:	f06f 0108 	mvn.w	r1, #8
{
   1ae48:	b510      	push	{r4, lr}
   1ae4a:	4828      	ldr	r0, [pc, #160]	; (1aeec <db_hash_process+0xa8>)
   1ae4c:	f010 fff9 	bl	2be42 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1ae50:	0701      	lsls	r1, r0, #28
   1ae52:	d545      	bpl.n	1aee0 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1ae54:	4825      	ldr	r0, [pc, #148]	; (1aeec <db_hash_process+0xa8>)
   1ae56:	f010 ff78 	bl	2bd4a <atomic_get>
   1ae5a:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1ae5c:	075a      	lsls	r2, r3, #29
   1ae5e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1ae62:	d401      	bmi.n	1ae68 <db_hash_process+0x24>
			db_hash_gen(false);
   1ae64:	f7ff ff9c 	bl	1ada0 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1ae68:	4921      	ldr	r1, [pc, #132]	; (1aef0 <db_hash_process+0xac>)
   1ae6a:	2210      	movs	r2, #16
   1ae6c:	1888      	adds	r0, r1, r2
   1ae6e:	f00f fded 	bl	2aa4c <memcmp>
   1ae72:	b948      	cbnz	r0, 1ae88 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1ae74:	481f      	ldr	r0, [pc, #124]	; (1aef4 <db_hash_process+0xb0>)
   1ae76:	f008 fb31 	bl	234dc <k_work_cancel_delayable>
}
   1ae7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ae7e:	481b      	ldr	r0, [pc, #108]	; (1aeec <db_hash_process+0xa8>)
   1ae80:	f06f 0101 	mvn.w	r1, #1
   1ae84:	f010 bfdd 	b.w	2be42 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ae88:	4c1b      	ldr	r4, [pc, #108]	; (1aef8 <db_hash_process+0xb4>)
   1ae8a:	2101      	movs	r1, #1
   1ae8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1ae90:	f010 ffb7 	bl	2be02 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1ae94:	f010 0f01 	tst.w	r0, #1
   1ae98:	4623      	mov	r3, r4
   1ae9a:	d110      	bne.n	1aebe <db_hash_process+0x7a>
		gatt_sc.start = start;
   1ae9c:	4b17      	ldr	r3, [pc, #92]	; (1aefc <db_hash_process+0xb8>)
   1ae9e:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1aea0:	4812      	ldr	r0, [pc, #72]	; (1aeec <db_hash_process+0xa8>)
   1aea2:	f010 ff52 	bl	2bd4a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1aea6:	0783      	lsls	r3, r0, #30
   1aea8:	d405      	bmi.n	1aeb6 <db_hash_process+0x72>
	k_work_reschedule(&gatt_sc.work, timeout);
   1aeaa:	4812      	ldr	r0, [pc, #72]	; (1aef4 <db_hash_process+0xb0>)
   1aeac:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1aeb0:	2300      	movs	r3, #0
   1aeb2:	f008 fb0d 	bl	234d0 <k_work_reschedule>
}
   1aeb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1aeba:	f7ff b98d 	b.w	1a1d8 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1aebe:	8b22      	ldrh	r2, [r4, #24]
   1aec0:	8b61      	ldrh	r1, [r4, #26]
   1aec2:	2a01      	cmp	r2, #1
   1aec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aec8:	d805      	bhi.n	1aed6 <db_hash_process+0x92>
   1aeca:	4291      	cmp	r1, r2
   1aecc:	d0f3      	beq.n	1aeb6 <db_hash_process+0x72>
		*end = new_end;
   1aece:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aed2:	835a      	strh	r2, [r3, #26]
   1aed4:	e7e4      	b.n	1aea0 <db_hash_process+0x5c>
		*start = new_start;
   1aed6:	2001      	movs	r0, #1
	if (*end < new_end) {
   1aed8:	4291      	cmp	r1, r2
		*start = new_start;
   1aeda:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   1aedc:	d0e0      	beq.n	1aea0 <db_hash_process+0x5c>
   1aede:	e7f6      	b.n	1aece <db_hash_process+0x8a>
}
   1aee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   1aee4:	2001      	movs	r0, #1
   1aee6:	f7ff bf5b 	b.w	1ada0 <db_hash_gen>
   1aeea:	bf00      	nop
   1aeec:	20001c90 	.word	0x20001c90
   1aef0:	20001b90 	.word	0x20001b90
   1aef4:	20001c60 	.word	0x20001c60
   1aef8:	20001c40 	.word	0x20001c40
   1aefc:	ffff0001 	.word	0xffff0001

0001af00 <ccc_set_direct>:
{
   1af00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1af04:	b0b9      	sub	sp, #228	; 0xe4
   1af06:	4688      	mov	r8, r1
   1af08:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1af0a:	493f      	ldr	r1, [pc, #252]	; (1b008 <ccc_set_direct+0x108>)
   1af0c:	9840      	ldr	r0, [sp, #256]	; 0x100
   1af0e:	466a      	mov	r2, sp
{
   1af10:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1af12:	f00e fb06 	bl	29522 <settings_name_steq>
   1af16:	b978      	cbnz	r0, 1af38 <ccc_set_direct+0x38>
   1af18:	4b3c      	ldr	r3, [pc, #240]	; (1b00c <ccc_set_direct+0x10c>)
   1af1a:	493d      	ldr	r1, [pc, #244]	; (1b010 <ccc_set_direct+0x110>)
			BT_ERR("Invalid key");
   1af1c:	483d      	ldr	r0, [pc, #244]	; (1b014 <ccc_set_direct+0x114>)
   1af1e:	1ac9      	subs	r1, r1, r3
   1af20:	08c9      	lsrs	r1, r1, #3
   1af22:	0189      	lsls	r1, r1, #6
   1af24:	f041 0101 	orr.w	r1, r1, #1
   1af28:	f00d fe41 	bl	28bae <log_0>
			return -EINVAL;
   1af2c:	f06f 0515 	mvn.w	r5, #21
}
   1af30:	4628      	mov	r0, r5
   1af32:	b039      	add	sp, #228	; 0xe4
   1af34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1af38:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   1af3a:	a901      	add	r1, sp, #4
   1af3c:	4630      	mov	r0, r6
   1af3e:	f00e fb13 	bl	29568 <settings_name_next>
		if (!name) {
   1af42:	b96e      	cbnz	r6, 1af60 <ccc_set_direct+0x60>
   1af44:	4932      	ldr	r1, [pc, #200]	; (1b010 <ccc_set_direct+0x110>)
   1af46:	4b31      	ldr	r3, [pc, #196]	; (1b00c <ccc_set_direct+0x10c>)
			BT_ERR("Insufficient number of arguments");
   1af48:	4833      	ldr	r0, [pc, #204]	; (1b018 <ccc_set_direct+0x118>)
   1af4a:	1ac9      	subs	r1, r1, r3
   1af4c:	08c9      	lsrs	r1, r1, #3
   1af4e:	0189      	lsls	r1, r1, #6
   1af50:	f041 0101 	orr.w	r1, r1, #1
   1af54:	f00d fe2b 	bl	28bae <log_0>
			return -EINVAL;
   1af58:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   1af5c:	4625      	mov	r5, r4
   1af5e:	e7e7      	b.n	1af30 <ccc_set_direct+0x30>
		} else if (!next) {
   1af60:	9801      	ldr	r0, [sp, #4]
   1af62:	b9c0      	cbnz	r0, 1af96 <ccc_set_direct+0x96>
		err = bt_settings_decode_key(name, &addr);
   1af64:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1af68:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1af6a:	4649      	mov	r1, r9
   1af6c:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1af6e:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1af72:	f00f fe3c 	bl	2abee <bt_settings_decode_key>
		if (err) {
   1af76:	4605      	mov	r5, r0
   1af78:	b1f8      	cbz	r0, 1afba <ccc_set_direct+0xba>
   1af7a:	4a24      	ldr	r2, [pc, #144]	; (1b00c <ccc_set_direct+0x10c>)
   1af7c:	4c24      	ldr	r4, [pc, #144]	; (1b010 <ccc_set_direct+0x110>)
   1af7e:	4630      	mov	r0, r6
   1af80:	1aa4      	subs	r4, r4, r2
   1af82:	08e4      	lsrs	r4, r4, #3
   1af84:	f7f7 fa0c 	bl	123a0 <z_log_strdup>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1af88:	01a4      	lsls	r4, r4, #6
   1af8a:	f044 0401 	orr.w	r4, r4, #1
   1af8e:	4601      	mov	r1, r0
   1af90:	4622      	mov	r2, r4
   1af92:	4822      	ldr	r0, [pc, #136]	; (1b01c <ccc_set_direct+0x11c>)
   1af94:	e00e      	b.n	1afb4 <ccc_set_direct+0xb4>
			unsigned long next_id = strtoul(next, NULL, 10);
   1af96:	2100      	movs	r1, #0
   1af98:	220a      	movs	r2, #10
   1af9a:	f00f fc8d 	bl	2a8b8 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1af9e:	4601      	mov	r1, r0
   1afa0:	2800      	cmp	r0, #0
   1afa2:	d0df      	beq.n	1af64 <ccc_set_direct+0x64>
   1afa4:	4a1a      	ldr	r2, [pc, #104]	; (1b010 <ccc_set_direct+0x110>)
   1afa6:	4b19      	ldr	r3, [pc, #100]	; (1b00c <ccc_set_direct+0x10c>)
				BT_ERR("Invalid local identity %lu", next_id);
   1afa8:	481d      	ldr	r0, [pc, #116]	; (1b020 <ccc_set_direct+0x120>)
   1afaa:	1ad2      	subs	r2, r2, r3
   1afac:	08d2      	lsrs	r2, r2, #3
   1afae:	0192      	lsls	r2, r2, #6
   1afb0:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unable to decode address %s", log_strdup(name));
   1afb4:	f00d fe08 	bl	28bc8 <log_1>
   1afb8:	e7ce      	b.n	1af58 <ccc_set_direct+0x58>
		load.addr_with_id.addr = &addr;
   1afba:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1afbe:	f1b8 0f00 	cmp.w	r8, #0
   1afc2:	d01d      	beq.n	1b000 <ccc_set_direct+0x100>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1afc4:	ae08      	add	r6, sp, #32
   1afc6:	22c0      	movs	r2, #192	; 0xc0
   1afc8:	4631      	mov	r1, r6
   1afca:	4638      	mov	r0, r7
   1afcc:	47a0      	blx	r4
			if (len < 0) {
   1afce:	1e04      	subs	r4, r0, #0
   1afd0:	da0b      	bge.n	1afea <ccc_set_direct+0xea>
   1afd2:	4b0e      	ldr	r3, [pc, #56]	; (1b00c <ccc_set_direct+0x10c>)
   1afd4:	4a0e      	ldr	r2, [pc, #56]	; (1b010 <ccc_set_direct+0x110>)
				BT_ERR("Failed to decode value (err %zd)", len);
   1afd6:	4813      	ldr	r0, [pc, #76]	; (1b024 <ccc_set_direct+0x124>)
   1afd8:	1ad2      	subs	r2, r2, r3
   1afda:	08d2      	lsrs	r2, r2, #3
   1afdc:	0192      	lsls	r2, r2, #6
   1afde:	f042 0201 	orr.w	r2, r2, #1
   1afe2:	4621      	mov	r1, r4
   1afe4:	f00d fdf0 	bl	28bc8 <log_1>
				return len;
   1afe8:	e7b8      	b.n	1af5c <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   1afea:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1afec:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1afee:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1aff0:	4a0d      	ldr	r2, [pc, #52]	; (1b028 <ccc_set_direct+0x128>)
   1aff2:	ab04      	add	r3, sp, #16
   1aff4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1aff8:	2001      	movs	r0, #1
   1affa:	f011 f89b 	bl	2c134 <bt_gatt_foreach_attr>
	return 0;
   1affe:	e797      	b.n	1af30 <ccc_set_direct+0x30>
			load.count = 0;
   1b000:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1b004:	e7f4      	b.n	1aff0 <ccc_set_direct+0xf0>
   1b006:	bf00      	nop
   1b008:	000311a7 	.word	0x000311a7
   1b00c:	0002d948 	.word	0x0002d948
   1b010:	0002d970 	.word	0x0002d970
   1b014:	000311ae 	.word	0x000311ae
   1b018:	0002fd91 	.word	0x0002fd91
   1b01c:	0003103c 	.word	0x0003103c
   1b020:	00031058 	.word	0x00031058
   1b024:	00030fc6 	.word	0x00030fc6
   1b028:	0001a315 	.word	0x0001a315

0001b02c <bt_gatt_attr_next>:
{
   1b02c:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1b02e:	2300      	movs	r3, #0
   1b030:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1b032:	f7ff fdf3 	bl	1ac1c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1b036:	1c41      	adds	r1, r0, #1
   1b038:	b289      	uxth	r1, r1
   1b03a:	4608      	mov	r0, r1
   1b03c:	4a03      	ldr	r2, [pc, #12]	; (1b04c <bt_gatt_attr_next+0x20>)
   1b03e:	ab01      	add	r3, sp, #4
   1b040:	f011 f878 	bl	2c134 <bt_gatt_foreach_attr>
}
   1b044:	9801      	ldr	r0, [sp, #4]
   1b046:	b003      	add	sp, #12
   1b048:	f85d fb04 	ldr.w	pc, [sp], #4
   1b04c:	0002bcff 	.word	0x0002bcff

0001b050 <gatt_indicate>:
{
   1b050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b054:	4615      	mov	r5, r2
   1b056:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1b058:	2214      	movs	r2, #20
   1b05a:	6869      	ldr	r1, [r5, #4]
{
   1b05c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1b05e:	f011 f874 	bl	2c14a <bt_gatt_check_perm>
   1b062:	4607      	mov	r7, r0
   1b064:	b170      	cbz	r0, 1b084 <gatt_indicate+0x34>
   1b066:	4b2a      	ldr	r3, [pc, #168]	; (1b110 <gatt_indicate+0xc0>)
   1b068:	492a      	ldr	r1, [pc, #168]	; (1b114 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   1b06a:	482b      	ldr	r0, [pc, #172]	; (1b118 <gatt_indicate+0xc8>)
   1b06c:	1ac9      	subs	r1, r1, r3
   1b06e:	08c9      	lsrs	r1, r1, #3
   1b070:	0189      	lsls	r1, r1, #6
   1b072:	f041 0102 	orr.w	r1, r1, #2
   1b076:	f00d fd9a 	bl	28bae <log_0>
		return -EPERM;
   1b07a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   1b07e:	4628      	mov	r0, r5
   1b080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b084:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1b088:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1b08a:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b08c:	f7fe ff1e 	bl	19ecc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1b090:	3602      	adds	r6, #2
	if (!req) {
   1b092:	4604      	mov	r4, r0
   1b094:	b910      	cbnz	r0, 1b09c <gatt_indicate+0x4c>
		return -ENOMEM;
   1b096:	f06f 050b 	mvn.w	r5, #11
   1b09a:	e7f0      	b.n	1b07e <gatt_indicate+0x2e>
	req->func = func;
   1b09c:	4b1f      	ldr	r3, [pc, #124]	; (1b11c <gatt_indicate+0xcc>)
	req->len = len;
   1b09e:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   1b0a0:	211d      	movs	r1, #29
   1b0a2:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1b0a4:	60c7      	str	r7, [r0, #12]
	req->func = func;
   1b0a6:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1b0a8:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b0aa:	4632      	mov	r2, r6
   1b0ac:	4640      	mov	r0, r8
   1b0ae:	f7fe fcbf 	bl	19a30 <bt_att_create_pdu>
	if (!buf) {
   1b0b2:	4606      	mov	r6, r0
   1b0b4:	b968      	cbnz	r0, 1b0d2 <gatt_indicate+0x82>
   1b0b6:	4b16      	ldr	r3, [pc, #88]	; (1b110 <gatt_indicate+0xc0>)
   1b0b8:	4916      	ldr	r1, [pc, #88]	; (1b114 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   1b0ba:	4819      	ldr	r0, [pc, #100]	; (1b120 <gatt_indicate+0xd0>)
   1b0bc:	1ac9      	subs	r1, r1, r3
   1b0be:	08c9      	lsrs	r1, r1, #3
   1b0c0:	0189      	lsls	r1, r1, #6
   1b0c2:	f041 0102 	orr.w	r1, r1, #2
   1b0c6:	f00d fd72 	bl	28bae <log_0>
		bt_att_req_free(req);
   1b0ca:	4620      	mov	r0, r4
   1b0cc:	f7fe ff14 	bl	19ef8 <bt_att_req_free>
   1b0d0:	e7e1      	b.n	1b096 <gatt_indicate+0x46>
	return net_buf_simple_add(&buf->b, len);
   1b0d2:	f100 0a08 	add.w	sl, r0, #8
   1b0d6:	2102      	movs	r1, #2
   1b0d8:	4650      	mov	r0, sl
   1b0da:	f002 fe19 	bl	1dd10 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b0de:	4607      	mov	r7, r0
   1b0e0:	8aa9      	ldrh	r1, [r5, #20]
   1b0e2:	f827 9b02 	strh.w	r9, [r7], #2
   1b0e6:	4650      	mov	r0, sl
   1b0e8:	f002 fe12 	bl	1dd10 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b0ec:	8aaa      	ldrh	r2, [r5, #20]
   1b0ee:	6929      	ldr	r1, [r5, #16]
   1b0f0:	4638      	mov	r0, r7
   1b0f2:	f00f fcd2 	bl	2aa9a <memcpy>
	req->buf = buf;
   1b0f6:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1b0f8:	4621      	mov	r1, r4
   1b0fa:	4640      	mov	r0, r8
   1b0fc:	f7ff f832 	bl	1a164 <bt_att_req_send>
	if (err) {
   1b100:	4605      	mov	r5, r0
   1b102:	2800      	cmp	r0, #0
   1b104:	d0bb      	beq.n	1b07e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1b106:	4620      	mov	r0, r4
   1b108:	f7fe fef6 	bl	19ef8 <bt_att_req_free>
   1b10c:	e7b7      	b.n	1b07e <gatt_indicate+0x2e>
   1b10e:	bf00      	nop
   1b110:	0002d948 	.word	0x0002d948
   1b114:	0002d970 	.word	0x0002d970
   1b118:	000311ba 	.word	0x000311ba
   1b11c:	0002bd19 	.word	0x0002bd19
   1b120:	000311d0 	.word	0x000311d0

0001b124 <bt_gatt_indicate>:
{
   1b124:	b530      	push	{r4, r5, lr}
   1b126:	4605      	mov	r5, r0
   1b128:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b12a:	460c      	mov	r4, r1
   1b12c:	b971      	cbnz	r1, 1b14c <bt_gatt_indicate+0x28>
   1b12e:	4947      	ldr	r1, [pc, #284]	; (1b24c <bt_gatt_indicate+0x128>)
   1b130:	4a47      	ldr	r2, [pc, #284]	; (1b250 <bt_gatt_indicate+0x12c>)
   1b132:	4848      	ldr	r0, [pc, #288]	; (1b254 <bt_gatt_indicate+0x130>)
   1b134:	f640 1348 	movw	r3, #2376	; 0x948
   1b138:	f00d fb1a 	bl	28770 <printk>
   1b13c:	4846      	ldr	r0, [pc, #280]	; (1b258 <bt_gatt_indicate+0x134>)
   1b13e:	f00d fb17 	bl	28770 <printk>
   1b142:	4843      	ldr	r0, [pc, #268]	; (1b250 <bt_gatt_indicate+0x12c>)
   1b144:	f640 1148 	movw	r1, #2376	; 0x948
   1b148:	f00d fd03 	bl	28b52 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1b14c:	6863      	ldr	r3, [r4, #4]
   1b14e:	b983      	cbnz	r3, 1b172 <bt_gatt_indicate+0x4e>
   1b150:	6823      	ldr	r3, [r4, #0]
   1b152:	b973      	cbnz	r3, 1b172 <bt_gatt_indicate+0x4e>
   1b154:	4941      	ldr	r1, [pc, #260]	; (1b25c <bt_gatt_indicate+0x138>)
   1b156:	4a3e      	ldr	r2, [pc, #248]	; (1b250 <bt_gatt_indicate+0x12c>)
   1b158:	483e      	ldr	r0, [pc, #248]	; (1b254 <bt_gatt_indicate+0x130>)
   1b15a:	f640 1349 	movw	r3, #2377	; 0x949
   1b15e:	f00d fb07 	bl	28770 <printk>
   1b162:	483d      	ldr	r0, [pc, #244]	; (1b258 <bt_gatt_indicate+0x134>)
   1b164:	f00d fb04 	bl	28770 <printk>
   1b168:	4839      	ldr	r0, [pc, #228]	; (1b250 <bt_gatt_indicate+0x12c>)
   1b16a:	f640 1149 	movw	r1, #2377	; 0x949
   1b16e:	f00d fcf0 	bl	28b52 <assert_post_action>
   1b172:	483b      	ldr	r0, [pc, #236]	; (1b260 <bt_gatt_indicate+0x13c>)
   1b174:	f010 fde9 	bl	2bd4a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b178:	0782      	lsls	r2, r0, #30
   1b17a:	d561      	bpl.n	1b240 <bt_gatt_indicate+0x11c>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b17c:	b115      	cbz	r5, 1b184 <bt_gatt_indicate+0x60>
   1b17e:	7b6b      	ldrb	r3, [r5, #13]
   1b180:	2b07      	cmp	r3, #7
   1b182:	d160      	bne.n	1b246 <bt_gatt_indicate+0x122>
	data.attr = params->attr;
   1b184:	6860      	ldr	r0, [r4, #4]
   1b186:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b188:	f7ff fd48 	bl	1ac1c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b18c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b18e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b192:	b33a      	cbz	r2, 1b1e4 <bt_gatt_indicate+0xc0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b194:	a905      	add	r1, sp, #20
   1b196:	9102      	str	r1, [sp, #8]
   1b198:	4932      	ldr	r1, [pc, #200]	; (1b264 <bt_gatt_indicate+0x140>)
   1b19a:	9101      	str	r1, [sp, #4]
   1b19c:	2101      	movs	r1, #1
	found->attr = NULL;
   1b19e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b1a0:	9100      	str	r1, [sp, #0]
   1b1a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b1a6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b1a8:	f7ff fd84 	bl	1acb4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b1ac:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b1ae:	b91b      	cbnz	r3, 1b1b8 <bt_gatt_indicate+0x94>
			return -ENOENT;
   1b1b0:	f06f 0001 	mvn.w	r0, #1
}
   1b1b4:	b00b      	add	sp, #44	; 0x2c
   1b1b6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b1b8:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b1ba:	9b05      	ldr	r3, [sp, #20]
   1b1bc:	6818      	ldr	r0, [r3, #0]
   1b1be:	2300      	movs	r3, #0
   1b1c0:	f88d 3010 	strb.w	r3, [sp, #16]
   1b1c4:	a904      	add	r1, sp, #16
   1b1c6:	f642 0303 	movw	r3, #10243	; 0x2803
   1b1ca:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b1ce:	f00f fd32 	bl	2ac36 <bt_uuid_cmp>
   1b1d2:	b970      	cbnz	r0, 1b1f2 <bt_gatt_indicate+0xce>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b1d4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b1d6:	68c3      	ldr	r3, [r0, #12]
   1b1d8:	799b      	ldrb	r3, [r3, #6]
   1b1da:	069b      	lsls	r3, r3, #26
   1b1dc:	d405      	bmi.n	1b1ea <bt_gatt_indicate+0xc6>
			return -EINVAL;
   1b1de:	f06f 0015 	mvn.w	r0, #21
   1b1e2:	e7e7      	b.n	1b1b4 <bt_gatt_indicate+0x90>
		if (!data.handle) {
   1b1e4:	2800      	cmp	r0, #0
   1b1e6:	d1e8      	bne.n	1b1ba <bt_gatt_indicate+0x96>
   1b1e8:	e7e2      	b.n	1b1b0 <bt_gatt_indicate+0x8c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b1ea:	f010 ff55 	bl	2c098 <bt_gatt_attr_value_handle>
   1b1ee:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1b1f2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1b1f6:	b13d      	cbz	r5, 1b208 <bt_gatt_indicate+0xe4>
		params->_ref = 1;
   1b1f8:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b1fa:	4601      	mov	r1, r0
		params->_ref = 1;
   1b1fc:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b1fe:	4622      	mov	r2, r4
   1b200:	4628      	mov	r0, r5
   1b202:	f7ff ff25 	bl	1b050 <gatt_indicate>
   1b206:	e7d5      	b.n	1b1b4 <bt_gatt_indicate+0x90>
	data.err = -ENOTCONN;
   1b208:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b20c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b20e:	2302      	movs	r3, #2
   1b210:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b214:	f642 1302 	movw	r3, #10498	; 0x2902
   1b218:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b21c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1b21e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b220:	9302      	str	r3, [sp, #8]
   1b222:	4b11      	ldr	r3, [pc, #68]	; (1b268 <bt_gatt_indicate+0x144>)
   1b224:	9301      	str	r3, [sp, #4]
   1b226:	2301      	movs	r3, #1
   1b228:	9300      	str	r3, [sp, #0]
   1b22a:	aa04      	add	r2, sp, #16
   1b22c:	462b      	mov	r3, r5
   1b22e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b232:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b234:	f88d 5010 	strb.w	r5, [sp, #16]
   1b238:	f7ff fd3c 	bl	1acb4 <bt_gatt_foreach_attr_type>
	return data.err;
   1b23c:	9807      	ldr	r0, [sp, #28]
   1b23e:	e7b9      	b.n	1b1b4 <bt_gatt_indicate+0x90>
		return -EAGAIN;
   1b240:	f06f 000a 	mvn.w	r0, #10
   1b244:	e7b6      	b.n	1b1b4 <bt_gatt_indicate+0x90>
		return -ENOTCONN;
   1b246:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b24a:	e7b3      	b.n	1b1b4 <bt_gatt_indicate+0x90>
   1b24c:	000311f7 	.word	0x000311f7
   1b250:	00031116 	.word	0x00031116
   1b254:	0002e915 	.word	0x0002e915
   1b258:	000311fe 	.word	0x000311fe
   1b25c:	00031214 	.word	0x00031214
   1b260:	2000037c 	.word	0x2000037c
   1b264:	0002bd3f 	.word	0x0002bd3f
   1b268:	0001b4dd 	.word	0x0001b4dd

0001b26c <sc_process>:
{
   1b26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b26e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1b272:	4604      	mov	r4, r0
   1b274:	4628      	mov	r0, r5
   1b276:	f010 fd68 	bl	2bd4a <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b27a:	0783      	lsls	r3, r0, #30
   1b27c:	d50e      	bpl.n	1b29c <sc_process+0x30>
   1b27e:	4919      	ldr	r1, [pc, #100]	; (1b2e4 <sc_process+0x78>)
   1b280:	4a19      	ldr	r2, [pc, #100]	; (1b2e8 <sc_process+0x7c>)
   1b282:	481a      	ldr	r0, [pc, #104]	; (1b2ec <sc_process+0x80>)
   1b284:	f240 33e7 	movw	r3, #999	; 0x3e7
   1b288:	f00d fa72 	bl	28770 <printk>
   1b28c:	4818      	ldr	r0, [pc, #96]	; (1b2f0 <sc_process+0x84>)
   1b28e:	f00d fa6f 	bl	28770 <printk>
   1b292:	4815      	ldr	r0, [pc, #84]	; (1b2e8 <sc_process+0x7c>)
   1b294:	f240 31e7 	movw	r1, #999	; 0x3e7
   1b298:	f00d fc5b 	bl	28b52 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b29c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b2a0:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b2a2:	f06f 0101 	mvn.w	r1, #1
   1b2a6:	4628      	mov	r0, r5
   1b2a8:	f010 fdcb 	bl	2be42 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b2ac:	4b11      	ldr	r3, [pc, #68]	; (1b2f4 <sc_process+0x88>)
   1b2ae:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1b2b2:	4b11      	ldr	r3, [pc, #68]	; (1b2f8 <sc_process+0x8c>)
   1b2b4:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1b2b8:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1b2ba:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1b2bc:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1b2c0:	2304      	movs	r3, #4
	sc->start = 0U;
   1b2c2:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1b2c6:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1b2ca:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b2ce:	f1a4 0120 	sub.w	r1, r4, #32
   1b2d2:	f7ff ff27 	bl	1b124 <bt_gatt_indicate>
   1b2d6:	b918      	cbnz	r0, 1b2e0 <sc_process+0x74>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b2d8:	2102      	movs	r1, #2
   1b2da:	4628      	mov	r0, r5
   1b2dc:	f010 fd91 	bl	2be02 <atomic_or>
}
   1b2e0:	b003      	add	sp, #12
   1b2e2:	bd30      	pop	{r4, r5, pc}
   1b2e4:	00031231 	.word	0x00031231
   1b2e8:	00031116 	.word	0x00031116
   1b2ec:	0002e915 	.word	0x0002e915
   1b2f0:	00031262 	.word	0x00031262
   1b2f4:	0002e050 	.word	0x0002e050
   1b2f8:	0001a989 	.word	0x0001a989

0001b2fc <gatt_notify>:
{
   1b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b300:	4614      	mov	r4, r2
   1b302:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1b304:	2214      	movs	r2, #20
   1b306:	6861      	ldr	r1, [r4, #4]
{
   1b308:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1b30a:	f010 ff1e 	bl	2c14a <bt_gatt_check_perm>
   1b30e:	b168      	cbz	r0, 1b32c <gatt_notify+0x30>
   1b310:	4b1e      	ldr	r3, [pc, #120]	; (1b38c <gatt_notify+0x90>)
   1b312:	491f      	ldr	r1, [pc, #124]	; (1b390 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   1b314:	481f      	ldr	r0, [pc, #124]	; (1b394 <gatt_notify+0x98>)
   1b316:	1ac9      	subs	r1, r1, r3
   1b318:	08c9      	lsrs	r1, r1, #3
   1b31a:	0189      	lsls	r1, r1, #6
   1b31c:	f041 0102 	orr.w	r1, r1, #2
   1b320:	f00d fc45 	bl	28bae <log_0>
		return -EPERM;
   1b324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1b32c:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b32e:	211b      	movs	r1, #27
   1b330:	3202      	adds	r2, #2
   1b332:	4638      	mov	r0, r7
   1b334:	f7fe fb7c 	bl	19a30 <bt_att_create_pdu>
	if (!buf) {
   1b338:	4605      	mov	r5, r0
   1b33a:	b960      	cbnz	r0, 1b356 <gatt_notify+0x5a>
   1b33c:	4b13      	ldr	r3, [pc, #76]	; (1b38c <gatt_notify+0x90>)
   1b33e:	4914      	ldr	r1, [pc, #80]	; (1b390 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   1b340:	4815      	ldr	r0, [pc, #84]	; (1b398 <gatt_notify+0x9c>)
   1b342:	1ac9      	subs	r1, r1, r3
   1b344:	08c9      	lsrs	r1, r1, #3
   1b346:	0189      	lsls	r1, r1, #6
   1b348:	f041 0102 	orr.w	r1, r1, #2
   1b34c:	f00d fc2f 	bl	28bae <log_0>
		return -ENOMEM;
   1b350:	f06f 000b 	mvn.w	r0, #11
   1b354:	e7e8      	b.n	1b328 <gatt_notify+0x2c>
   1b356:	f100 0908 	add.w	r9, r0, #8
   1b35a:	2102      	movs	r1, #2
   1b35c:	4648      	mov	r0, r9
   1b35e:	f002 fcd7 	bl	1dd10 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b362:	4606      	mov	r6, r0
   1b364:	89a1      	ldrh	r1, [r4, #12]
   1b366:	f826 8b02 	strh.w	r8, [r6], #2
   1b36a:	4648      	mov	r0, r9
   1b36c:	f002 fcd0 	bl	1dd10 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b370:	89a2      	ldrh	r2, [r4, #12]
   1b372:	68a1      	ldr	r1, [r4, #8]
   1b374:	4630      	mov	r0, r6
   1b376:	f00f fb90 	bl	2aa9a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1b37a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1b37e:	4629      	mov	r1, r5
   1b380:	4638      	mov	r0, r7
}
   1b382:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1b386:	f7fe be7f 	b.w	1a088 <bt_att_send>
   1b38a:	bf00      	nop
   1b38c:	0002d948 	.word	0x0002d948
   1b390:	0002d970 	.word	0x0002d970
   1b394:	000311ba 	.word	0x000311ba
   1b398:	0003127d 	.word	0x0003127d

0001b39c <bt_gatt_notify_cb>:
{
   1b39c:	b530      	push	{r4, r5, lr}
   1b39e:	4605      	mov	r5, r0
   1b3a0:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b3a2:	460c      	mov	r4, r1
   1b3a4:	b971      	cbnz	r1, 1b3c4 <bt_gatt_notify_cb+0x28>
   1b3a6:	4945      	ldr	r1, [pc, #276]	; (1b4bc <bt_gatt_notify_cb+0x120>)
   1b3a8:	4a45      	ldr	r2, [pc, #276]	; (1b4c0 <bt_gatt_notify_cb+0x124>)
   1b3aa:	4846      	ldr	r0, [pc, #280]	; (1b4c4 <bt_gatt_notify_cb+0x128>)
   1b3ac:	f640 03fa 	movw	r3, #2298	; 0x8fa
   1b3b0:	f00d f9de 	bl	28770 <printk>
   1b3b4:	4844      	ldr	r0, [pc, #272]	; (1b4c8 <bt_gatt_notify_cb+0x12c>)
   1b3b6:	f00d f9db 	bl	28770 <printk>
   1b3ba:	4841      	ldr	r0, [pc, #260]	; (1b4c0 <bt_gatt_notify_cb+0x124>)
   1b3bc:	f640 01fa 	movw	r1, #2298	; 0x8fa
   1b3c0:	f00d fbc7 	bl	28b52 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1b3c4:	6863      	ldr	r3, [r4, #4]
   1b3c6:	b983      	cbnz	r3, 1b3ea <bt_gatt_notify_cb+0x4e>
   1b3c8:	6823      	ldr	r3, [r4, #0]
   1b3ca:	b973      	cbnz	r3, 1b3ea <bt_gatt_notify_cb+0x4e>
   1b3cc:	493f      	ldr	r1, [pc, #252]	; (1b4cc <bt_gatt_notify_cb+0x130>)
   1b3ce:	4a3c      	ldr	r2, [pc, #240]	; (1b4c0 <bt_gatt_notify_cb+0x124>)
   1b3d0:	483c      	ldr	r0, [pc, #240]	; (1b4c4 <bt_gatt_notify_cb+0x128>)
   1b3d2:	f640 03fb 	movw	r3, #2299	; 0x8fb
   1b3d6:	f00d f9cb 	bl	28770 <printk>
   1b3da:	483b      	ldr	r0, [pc, #236]	; (1b4c8 <bt_gatt_notify_cb+0x12c>)
   1b3dc:	f00d f9c8 	bl	28770 <printk>
   1b3e0:	4837      	ldr	r0, [pc, #220]	; (1b4c0 <bt_gatt_notify_cb+0x124>)
   1b3e2:	f640 01fb 	movw	r1, #2299	; 0x8fb
   1b3e6:	f00d fbb4 	bl	28b52 <assert_post_action>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b3ea:	4839      	ldr	r0, [pc, #228]	; (1b4d0 <bt_gatt_notify_cb+0x134>)
   1b3ec:	f010 fcad 	bl	2bd4a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b3f0:	0782      	lsls	r2, r0, #30
   1b3f2:	d55d      	bpl.n	1b4b0 <bt_gatt_notify_cb+0x114>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b3f4:	b115      	cbz	r5, 1b3fc <bt_gatt_notify_cb+0x60>
   1b3f6:	7b6b      	ldrb	r3, [r5, #13]
   1b3f8:	2b07      	cmp	r3, #7
   1b3fa:	d15c      	bne.n	1b4b6 <bt_gatt_notify_cb+0x11a>
	data.attr = params->attr;
   1b3fc:	6860      	ldr	r0, [r4, #4]
   1b3fe:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b400:	f7ff fc0c 	bl	1ac1c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b404:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b406:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b40a:	b33a      	cbz	r2, 1b45c <bt_gatt_notify_cb+0xc0>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b40c:	a905      	add	r1, sp, #20
   1b40e:	9102      	str	r1, [sp, #8]
   1b410:	4930      	ldr	r1, [pc, #192]	; (1b4d4 <bt_gatt_notify_cb+0x138>)
   1b412:	9101      	str	r1, [sp, #4]
   1b414:	2101      	movs	r1, #1
	found->attr = NULL;
   1b416:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b418:	9100      	str	r1, [sp, #0]
   1b41a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b41e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b420:	f7ff fc48 	bl	1acb4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b424:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b426:	b91b      	cbnz	r3, 1b430 <bt_gatt_notify_cb+0x94>
			return -ENOENT;
   1b428:	f06f 0001 	mvn.w	r0, #1
}
   1b42c:	b00b      	add	sp, #44	; 0x2c
   1b42e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b430:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b432:	9b05      	ldr	r3, [sp, #20]
   1b434:	6818      	ldr	r0, [r3, #0]
   1b436:	2300      	movs	r3, #0
   1b438:	f88d 3010 	strb.w	r3, [sp, #16]
   1b43c:	a904      	add	r1, sp, #16
   1b43e:	f642 0303 	movw	r3, #10243	; 0x2803
   1b442:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b446:	f00f fbf6 	bl	2ac36 <bt_uuid_cmp>
   1b44a:	b970      	cbnz	r0, 1b46a <bt_gatt_notify_cb+0xce>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b44c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1b44e:	68c3      	ldr	r3, [r0, #12]
   1b450:	799b      	ldrb	r3, [r3, #6]
   1b452:	06db      	lsls	r3, r3, #27
   1b454:	d405      	bmi.n	1b462 <bt_gatt_notify_cb+0xc6>
			return -EINVAL;
   1b456:	f06f 0015 	mvn.w	r0, #21
   1b45a:	e7e7      	b.n	1b42c <bt_gatt_notify_cb+0x90>
		if (!data.handle) {
   1b45c:	2800      	cmp	r0, #0
   1b45e:	d1e8      	bne.n	1b432 <bt_gatt_notify_cb+0x96>
   1b460:	e7e2      	b.n	1b428 <bt_gatt_notify_cb+0x8c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b462:	f010 fe19 	bl	2c098 <bt_gatt_attr_value_handle>
   1b466:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1b46a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1b46e:	b12d      	cbz	r5, 1b47c <bt_gatt_notify_cb+0xe0>
		return gatt_notify(conn, data.handle, params);
   1b470:	4601      	mov	r1, r0
   1b472:	4622      	mov	r2, r4
   1b474:	4628      	mov	r0, r5
   1b476:	f7ff ff41 	bl	1b2fc <gatt_notify>
   1b47a:	e7d7      	b.n	1b42c <bt_gatt_notify_cb+0x90>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b47c:	f642 1202 	movw	r2, #10498	; 0x2902
   1b480:	f8ad 2012 	strh.w	r2, [sp, #18]
   1b484:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1b486:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b48a:	9202      	str	r2, [sp, #8]
   1b48c:	4a12      	ldr	r2, [pc, #72]	; (1b4d8 <bt_gatt_notify_cb+0x13c>)
	data.err = -ENOTCONN;
   1b48e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1b490:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b492:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1b496:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b49a:	aa04      	add	r2, sp, #16
   1b49c:	462b      	mov	r3, r5
   1b49e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1b4a2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b4a4:	f88d 5010 	strb.w	r5, [sp, #16]
   1b4a8:	f7ff fc04 	bl	1acb4 <bt_gatt_foreach_attr_type>
	return data.err;
   1b4ac:	9807      	ldr	r0, [sp, #28]
   1b4ae:	e7bd      	b.n	1b42c <bt_gatt_notify_cb+0x90>
		return -EAGAIN;
   1b4b0:	f06f 000a 	mvn.w	r0, #10
   1b4b4:	e7ba      	b.n	1b42c <bt_gatt_notify_cb+0x90>
		return -ENOTCONN;
   1b4b6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b4ba:	e7b7      	b.n	1b42c <bt_gatt_notify_cb+0x90>
   1b4bc:	000311f7 	.word	0x000311f7
   1b4c0:	00031116 	.word	0x00031116
   1b4c4:	0002e915 	.word	0x0002e915
   1b4c8:	000311fe 	.word	0x000311fe
   1b4cc:	00031214 	.word	0x00031214
   1b4d0:	2000037c 	.word	0x2000037c
   1b4d4:	0002bd3f 	.word	0x0002bd3f
   1b4d8:	0001b4dd 	.word	0x0001b4dd

0001b4dc <notify_cb>:
{
   1b4dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b4e0:	4b3c      	ldr	r3, [pc, #240]	; (1b5d4 <notify_cb+0xf8>)
{
   1b4e2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b4e4:	6882      	ldr	r2, [r0, #8]
   1b4e6:	429a      	cmp	r2, r3
{
   1b4e8:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b4ea:	d113      	bne.n	1b514 <notify_cb+0x38>
	ccc = attr->user_data;
   1b4ec:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b4ee:	4b3a      	ldr	r3, [pc, #232]	; (1b5d8 <notify_cb+0xfc>)
   1b4f0:	429f      	cmp	r7, r3
   1b4f2:	d014      	beq.n	1b51e <notify_cb+0x42>
		if (cfg->value != data->type) {
   1b4f4:	893a      	ldrh	r2, [r7, #8]
   1b4f6:	89a3      	ldrh	r3, [r4, #12]
   1b4f8:	429a      	cmp	r2, r3
   1b4fa:	d10b      	bne.n	1b514 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b4fc:	4639      	mov	r1, r7
   1b4fe:	f811 0b01 	ldrb.w	r0, [r1], #1
   1b502:	f7fd fa11 	bl	18928 <bt_conn_lookup_addr_le>
		if (!conn) {
   1b506:	4605      	mov	r5, r0
   1b508:	b120      	cbz	r0, 1b514 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   1b50a:	7b43      	ldrb	r3, [r0, #13]
   1b50c:	2b07      	cmp	r3, #7
   1b50e:	d02e      	beq.n	1b56e <notify_cb+0x92>
			bt_conn_unref(conn);
   1b510:	f7fc ff12 	bl	18338 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1b514:	2701      	movs	r7, #1
}
   1b516:	4638      	mov	r0, r7
   1b518:	b003      	add	sp, #12
   1b51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b51e:	f04f 0800 	mov.w	r8, #0
   1b522:	4d2e      	ldr	r5, [pc, #184]	; (1b5dc <notify_cb+0x100>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b524:	46c1      	mov	r9, r8
   1b526:	2207      	movs	r2, #7
   1b528:	4669      	mov	r1, sp
   1b52a:	4628      	mov	r0, r5
   1b52c:	f8cd 9000 	str.w	r9, [sp]
   1b530:	f8cd 9003 	str.w	r9, [sp, #3]
   1b534:	f00f fa8a 	bl	2aa4c <memcmp>
   1b538:	b178      	cbz	r0, 1b55a <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1b53a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1b53e:	2207      	movs	r2, #7
   1b540:	4629      	mov	r1, r5
   1b542:	f7fd fa35 	bl	189b0 <bt_conn_lookup_state_le>
			if (!conn) {
   1b546:	b978      	cbnz	r0, 1b568 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1b548:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1b54a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1b54e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1b550:	4629      	mov	r1, r5
   1b552:	8853      	ldrh	r3, [r2, #2]
   1b554:	8812      	ldrh	r2, [r2, #0]
   1b556:	f7fe fff9 	bl	1a54c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b55a:	350c      	adds	r5, #12
   1b55c:	f1b8 0f00 	cmp.w	r8, #0
   1b560:	d1c8      	bne.n	1b4f4 <notify_cb+0x18>
   1b562:	f04f 0801 	mov.w	r8, #1
   1b566:	e7de      	b.n	1b526 <notify_cb+0x4a>
			bt_conn_unref(conn);
   1b568:	f7fc fee6 	bl	18338 <bt_conn_unref>
   1b56c:	e7f5      	b.n	1b55a <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1b56e:	697b      	ldr	r3, [r7, #20]
   1b570:	b123      	cbz	r3, 1b57c <notify_cb+0xa0>
   1b572:	4631      	mov	r1, r6
   1b574:	4798      	blx	r3
   1b576:	b908      	cbnz	r0, 1b57c <notify_cb+0xa0>
			bt_conn_unref(conn);
   1b578:	4628      	mov	r0, r5
   1b57a:	e7c9      	b.n	1b510 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   1b57c:	2214      	movs	r2, #20
   1b57e:	4631      	mov	r1, r6
   1b580:	4628      	mov	r0, r5
   1b582:	f010 fde2 	bl	2c14a <bt_gatt_check_perm>
   1b586:	4607      	mov	r7, r0
   1b588:	b150      	cbz	r0, 1b5a0 <notify_cb+0xc4>
   1b58a:	4b15      	ldr	r3, [pc, #84]	; (1b5e0 <notify_cb+0x104>)
   1b58c:	4915      	ldr	r1, [pc, #84]	; (1b5e4 <notify_cb+0x108>)
			BT_WARN("Link is not encrypted");
   1b58e:	4816      	ldr	r0, [pc, #88]	; (1b5e8 <notify_cb+0x10c>)
   1b590:	1ac9      	subs	r1, r1, r3
   1b592:	08c9      	lsrs	r1, r1, #3
   1b594:	0189      	lsls	r1, r1, #6
   1b596:	f041 0102 	orr.w	r1, r1, #2
   1b59a:	f00d fb08 	bl	28bae <log_0>
			continue;
   1b59e:	e7b9      	b.n	1b514 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1b5a0:	89a3      	ldrh	r3, [r4, #12]
   1b5a2:	88a1      	ldrh	r1, [r4, #4]
   1b5a4:	6922      	ldr	r2, [r4, #16]
   1b5a6:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1b5a8:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1b5aa:	d10f      	bne.n	1b5cc <notify_cb+0xf0>
			err = gatt_indicate(conn, data->handle,
   1b5ac:	f7ff fd50 	bl	1b050 <gatt_indicate>
			if (err == 0) {
   1b5b0:	4606      	mov	r6, r0
   1b5b2:	b918      	cbnz	r0, 1b5bc <notify_cb+0xe0>
				data->ind_params->_ref++;
   1b5b4:	6922      	ldr	r2, [r4, #16]
   1b5b6:	7d93      	ldrb	r3, [r2, #22]
   1b5b8:	3301      	adds	r3, #1
   1b5ba:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1b5bc:	4628      	mov	r0, r5
   1b5be:	f7fc febb 	bl	18338 <bt_conn_unref>
		if (err < 0) {
   1b5c2:	2e00      	cmp	r6, #0
   1b5c4:	dba7      	blt.n	1b516 <notify_cb+0x3a>
		data->err = 0;
   1b5c6:	2300      	movs	r3, #0
   1b5c8:	60a3      	str	r3, [r4, #8]
   1b5ca:	e7a3      	b.n	1b514 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1b5cc:	f7ff fe96 	bl	1b2fc <gatt_notify>
   1b5d0:	4606      	mov	r6, r0
   1b5d2:	e7f3      	b.n	1b5bc <notify_cb+0xe0>
   1b5d4:	0001a3c9 	.word	0x0001a3c9
   1b5d8:	2000056c 	.word	0x2000056c
   1b5dc:	20003735 	.word	0x20003735
   1b5e0:	0002d948 	.word	0x0002d948
   1b5e4:	0002d970 	.word	0x0002d970
   1b5e8:	000311ba 	.word	0x000311ba

0001b5ec <update_ccc>:
{
   1b5ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5f0:	4b39      	ldr	r3, [pc, #228]	; (1b6d8 <update_ccc+0xec>)
	struct bt_conn *conn = data->conn;
   1b5f2:	6814      	ldr	r4, [r2, #0]
{
   1b5f4:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5f6:	6882      	ldr	r2, [r0, #8]
   1b5f8:	429a      	cmp	r2, r3
{
   1b5fa:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5fc:	d11c      	bne.n	1b638 <update_ccc+0x4c>
	ccc = attr->user_data;
   1b5fe:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   1b600:	893b      	ldrh	r3, [r7, #8]
   1b602:	b1cb      	cbz	r3, 1b638 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b604:	463a      	mov	r2, r7
   1b606:	4620      	mov	r0, r4
   1b608:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b60c:	f00f feec 	bl	2b3e8 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b610:	b190      	cbz	r0, 1b638 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b612:	222a      	movs	r2, #42	; 0x2a
   1b614:	4629      	mov	r1, r5
   1b616:	4620      	mov	r0, r4
   1b618:	f010 fd97 	bl	2c14a <bt_gatt_check_perm>
		if (err) {
   1b61c:	b308      	cbz	r0, 1b662 <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b61e:	2803      	cmp	r0, #3
   1b620:	d10e      	bne.n	1b640 <update_ccc+0x54>
   1b622:	4a2e      	ldr	r2, [pc, #184]	; (1b6dc <update_ccc+0xf0>)
   1b624:	4b2e      	ldr	r3, [pc, #184]	; (1b6e0 <update_ccc+0xf4>)
				BT_WARN("CCC %p not writable", attr);
   1b626:	482f      	ldr	r0, [pc, #188]	; (1b6e4 <update_ccc+0xf8>)
   1b628:	1ad2      	subs	r2, r2, r3
   1b62a:	08d2      	lsrs	r2, r2, #3
   1b62c:	0192      	lsls	r2, r2, #6
   1b62e:	f042 0202 	orr.w	r2, r2, #2
   1b632:	4629      	mov	r1, r5
   1b634:	f00d fac8 	bl	28bc8 <log_1>
}
   1b638:	2001      	movs	r0, #1
   1b63a:	b002      	add	sp, #8
   1b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
   1b640:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1b642:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   1b644:	bf14      	ite	ne
   1b646:	f04f 0802 	movne.w	r8, #2
   1b64a:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   1b64e:	f00f fec9 	bl	2b3e4 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b652:	4580      	cmp	r8, r0
   1b654:	d905      	bls.n	1b662 <update_ccc+0x76>
				if (data->sec < sec) {
   1b656:	7933      	ldrb	r3, [r6, #4]
   1b658:	4543      	cmp	r3, r8
   1b65a:	d2ed      	bcs.n	1b638 <update_ccc+0x4c>
					data->sec = sec;
   1b65c:	f886 8004 	strb.w	r8, [r6, #4]
   1b660:	e7ea      	b.n	1b638 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
   1b662:	4639      	mov	r1, r7
   1b664:	4628      	mov	r0, r5
   1b666:	f010 fb4d 	bl	2bd04 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b66a:	4b1f      	ldr	r3, [pc, #124]	; (1b6e8 <update_ccc+0xfc>)
   1b66c:	429f      	cmp	r7, r3
   1b66e:	d1e3      	bne.n	1b638 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b670:	7a20      	ldrb	r0, [r4, #8]
   1b672:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1b676:	f7fe ff47 	bl	1a508 <find_sc_cfg>
	if (!cfg) {
   1b67a:	2800      	cmp	r0, #0
   1b67c:	d0dc      	beq.n	1b638 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
   1b67e:	8902      	ldrh	r2, [r0, #8]
   1b680:	8943      	ldrh	r3, [r0, #10]
   1b682:	ea52 0103 	orrs.w	r1, r2, r3
   1b686:	d0d7      	beq.n	1b638 <update_ccc+0x4c>
	index = bt_conn_index(conn);
   1b688:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b68a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b68e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1b692:	f7fc ff7b 	bl	1858c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b696:	4915      	ldr	r1, [pc, #84]	; (1b6ec <update_ccc+0x100>)
   1b698:	4a15      	ldr	r2, [pc, #84]	; (1b6f0 <update_ccc+0x104>)
   1b69a:	2318      	movs	r3, #24
   1b69c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b6a0:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b6a2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b6a4:	4a13      	ldr	r2, [pc, #76]	; (1b6f4 <update_ccc+0x108>)
   1b6a6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1b6a8:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b6aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1b6ae:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1b6b0:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b6b2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1b6b6:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b6b8:	4620      	mov	r0, r4
   1b6ba:	f7ff fd33 	bl	1b124 <bt_gatt_indicate>
   1b6be:	2800      	cmp	r0, #0
   1b6c0:	d0ba      	beq.n	1b638 <update_ccc+0x4c>
   1b6c2:	4b07      	ldr	r3, [pc, #28]	; (1b6e0 <update_ccc+0xf4>)
   1b6c4:	4905      	ldr	r1, [pc, #20]	; (1b6dc <update_ccc+0xf0>)
		BT_ERR("SC restore indication failed");
   1b6c6:	480c      	ldr	r0, [pc, #48]	; (1b6f8 <update_ccc+0x10c>)
   1b6c8:	1ac9      	subs	r1, r1, r3
   1b6ca:	08c9      	lsrs	r1, r1, #3
   1b6cc:	0189      	lsls	r1, r1, #6
   1b6ce:	f041 0101 	orr.w	r1, r1, #1
   1b6d2:	f00d fa6c 	bl	28bae <log_0>
   1b6d6:	e7af      	b.n	1b638 <update_ccc+0x4c>
   1b6d8:	0001a3c9 	.word	0x0001a3c9
   1b6dc:	0002d970 	.word	0x0002d970
   1b6e0:	0002d948 	.word	0x0002d948
   1b6e4:	000312a6 	.word	0x000312a6
   1b6e8:	2000056c 	.word	0x2000056c
   1b6ec:	20002a58 	.word	0x20002a58
   1b6f0:	0002e050 	.word	0x0002e050
   1b6f4:	0002beed 	.word	0x0002beed
   1b6f8:	000312ba 	.word	0x000312ba

0001b6fc <bt_gatt_is_subscribed>:
{
   1b6fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b6fe:	460c      	mov	r4, r1
   1b700:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1b702:	4606      	mov	r6, r0
   1b704:	b970      	cbnz	r0, 1b724 <bt_gatt_is_subscribed+0x28>
   1b706:	4933      	ldr	r1, [pc, #204]	; (1b7d4 <bt_gatt_is_subscribed+0xd8>)
   1b708:	4a33      	ldr	r2, [pc, #204]	; (1b7d8 <bt_gatt_is_subscribed+0xdc>)
   1b70a:	4834      	ldr	r0, [pc, #208]	; (1b7dc <bt_gatt_is_subscribed+0xe0>)
   1b70c:	f640 237b 	movw	r3, #2683	; 0xa7b
   1b710:	f00d f82e 	bl	28770 <printk>
   1b714:	4832      	ldr	r0, [pc, #200]	; (1b7e0 <bt_gatt_is_subscribed+0xe4>)
   1b716:	f00d f82b 	bl	28770 <printk>
   1b71a:	482f      	ldr	r0, [pc, #188]	; (1b7d8 <bt_gatt_is_subscribed+0xdc>)
   1b71c:	f640 217b 	movw	r1, #2683	; 0xa7b
   1b720:	f00d fa17 	bl	28b52 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1b724:	b974      	cbnz	r4, 1b744 <bt_gatt_is_subscribed+0x48>
   1b726:	492f      	ldr	r1, [pc, #188]	; (1b7e4 <bt_gatt_is_subscribed+0xe8>)
   1b728:	4a2b      	ldr	r2, [pc, #172]	; (1b7d8 <bt_gatt_is_subscribed+0xdc>)
   1b72a:	482c      	ldr	r0, [pc, #176]	; (1b7dc <bt_gatt_is_subscribed+0xe0>)
   1b72c:	f640 237c 	movw	r3, #2684	; 0xa7c
   1b730:	f00d f81e 	bl	28770 <printk>
   1b734:	482a      	ldr	r0, [pc, #168]	; (1b7e0 <bt_gatt_is_subscribed+0xe4>)
   1b736:	f00d f81b 	bl	28770 <printk>
   1b73a:	4827      	ldr	r0, [pc, #156]	; (1b7d8 <bt_gatt_is_subscribed+0xdc>)
   1b73c:	f640 217c 	movw	r1, #2684	; 0xa7c
   1b740:	f00d fa07 	bl	28b52 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1b744:	7b73      	ldrb	r3, [r6, #13]
   1b746:	2b07      	cmp	r3, #7
   1b748:	d002      	beq.n	1b750 <bt_gatt_is_subscribed+0x54>
		return false;
   1b74a:	2000      	movs	r0, #0
}
   1b74c:	b003      	add	sp, #12
   1b74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1b750:	2300      	movs	r3, #0
   1b752:	f88d 3004 	strb.w	r3, [sp, #4]
   1b756:	6820      	ldr	r0, [r4, #0]
   1b758:	f642 0303 	movw	r3, #10243	; 0x2803
   1b75c:	a901      	add	r1, sp, #4
   1b75e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b762:	f00f fa68 	bl	2ac36 <bt_uuid_cmp>
   1b766:	b940      	cbnz	r0, 1b77a <bt_gatt_is_subscribed+0x7e>
		if (!(chrc->properties &
   1b768:	68e3      	ldr	r3, [r4, #12]
   1b76a:	799b      	ldrb	r3, [r3, #6]
   1b76c:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1b770:	d0ec      	beq.n	1b74c <bt_gatt_is_subscribed+0x50>
		attr = bt_gatt_attr_next(attr);
   1b772:	4620      	mov	r0, r4
   1b774:	f7ff fc5a 	bl	1b02c <bt_gatt_attr_next>
   1b778:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b77a:	2300      	movs	r3, #0
   1b77c:	6820      	ldr	r0, [r4, #0]
   1b77e:	f88d 3004 	strb.w	r3, [sp, #4]
   1b782:	a901      	add	r1, sp, #4
   1b784:	f642 1302 	movw	r3, #10498	; 0x2902
   1b788:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b78c:	f00f fa53 	bl	2ac36 <bt_uuid_cmp>
   1b790:	b118      	cbz	r0, 1b79a <bt_gatt_is_subscribed+0x9e>
		attr = bt_gatt_attr_next(attr);
   1b792:	4620      	mov	r0, r4
   1b794:	f7ff fc4a 	bl	1b02c <bt_gatt_attr_next>
   1b798:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b79a:	6820      	ldr	r0, [r4, #0]
   1b79c:	2500      	movs	r5, #0
   1b79e:	f642 1302 	movw	r3, #10498	; 0x2902
   1b7a2:	a901      	add	r1, sp, #4
   1b7a4:	f88d 5004 	strb.w	r5, [sp, #4]
   1b7a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b7ac:	f00f fa43 	bl	2ac36 <bt_uuid_cmp>
   1b7b0:	2800      	cmp	r0, #0
   1b7b2:	d1ca      	bne.n	1b74a <bt_gatt_is_subscribed+0x4e>
	ccc = attr->user_data;
   1b7b4:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1b7b6:	4622      	mov	r2, r4
   1b7b8:	4630      	mov	r0, r6
   1b7ba:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b7be:	f00f fe13 	bl	2b3e8 <bt_conn_is_peer_addr_le>
   1b7c2:	2800      	cmp	r0, #0
   1b7c4:	d0c1      	beq.n	1b74a <bt_gatt_is_subscribed+0x4e>
   1b7c6:	8923      	ldrh	r3, [r4, #8]
   1b7c8:	421f      	tst	r7, r3
   1b7ca:	bf14      	ite	ne
   1b7cc:	2001      	movne	r0, #1
   1b7ce:	2000      	moveq	r0, #0
   1b7d0:	e7bc      	b.n	1b74c <bt_gatt_is_subscribed+0x50>
   1b7d2:	bf00      	nop
   1b7d4:	00030ba8 	.word	0x00030ba8
   1b7d8:	00031116 	.word	0x00031116
   1b7dc:	0002e915 	.word	0x0002e915
   1b7e0:	000312d7 	.word	0x000312d7
   1b7e4:	000312ec 	.word	0x000312ec

0001b7e8 <bt_gatt_connected>:
{
   1b7e8:	b570      	push	{r4, r5, r6, lr}
   1b7ea:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b7ec:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   1b7f0:	4604      	mov	r4, r0
	data.conn = conn;
   1b7f2:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1b7f4:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b7f6:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1b7f8:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b7fc:	4629      	mov	r1, r5
   1b7fe:	f00f fb7f 	bl	2af00 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1b802:	b190      	cbz	r0, 1b82a <bt_gatt_connected+0x42>
		if (conn->id) {
   1b804:	7a22      	ldrb	r2, [r4, #8]
   1b806:	b37a      	cbz	r2, 1b868 <bt_gatt_connected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1b808:	ae02      	add	r6, sp, #8
   1b80a:	2104      	movs	r1, #4
   1b80c:	4630      	mov	r0, r6
   1b80e:	f00c ff13 	bl	28638 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b812:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b814:	4a15      	ldr	r2, [pc, #84]	; (1b86c <bt_gatt_connected+0x84>)
   1b816:	2124      	movs	r1, #36	; 0x24
   1b818:	a805      	add	r0, sp, #20
   1b81a:	462b      	mov	r3, r5
   1b81c:	f7f9 ff68 	bl	156f0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1b820:	aa05      	add	r2, sp, #20
   1b822:	4913      	ldr	r1, [pc, #76]	; (1b870 <bt_gatt_connected+0x88>)
   1b824:	4610      	mov	r0, r2
   1b826:	f7f8 f83f 	bl	138a8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b82a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b82e:	4a11      	ldr	r2, [pc, #68]	; (1b874 <bt_gatt_connected+0x8c>)
   1b830:	ab03      	add	r3, sp, #12
   1b832:	2001      	movs	r0, #1
   1b834:	f010 fc7e 	bl	2c134 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1b838:	4620      	mov	r0, r4
   1b83a:	f00f fdd3 	bl	2b3e4 <bt_conn_get_security>
   1b83e:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b842:	4288      	cmp	r0, r1
   1b844:	d20e      	bcs.n	1b864 <bt_gatt_connected+0x7c>
		int err = bt_conn_set_security(conn, data.sec);
   1b846:	4620      	mov	r0, r4
   1b848:	f00f fd99 	bl	2b37e <bt_conn_set_security>
		if (err) {
   1b84c:	4601      	mov	r1, r0
   1b84e:	b148      	cbz	r0, 1b864 <bt_gatt_connected+0x7c>
   1b850:	4a09      	ldr	r2, [pc, #36]	; (1b878 <bt_gatt_connected+0x90>)
   1b852:	4b0a      	ldr	r3, [pc, #40]	; (1b87c <bt_gatt_connected+0x94>)
			BT_WARN("Failed to set security for bonded peer (%d)",
   1b854:	480a      	ldr	r0, [pc, #40]	; (1b880 <bt_gatt_connected+0x98>)
   1b856:	1ad2      	subs	r2, r2, r3
   1b858:	08d2      	lsrs	r2, r2, #3
   1b85a:	0192      	lsls	r2, r2, #6
   1b85c:	f042 0202 	orr.w	r2, r2, #2
   1b860:	f00d f9b2 	bl	28bc8 <log_1>
}
   1b864:	b00e      	add	sp, #56	; 0x38
   1b866:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1b868:	9200      	str	r2, [sp, #0]
   1b86a:	e7d3      	b.n	1b814 <bt_gatt_connected+0x2c>
   1b86c:	000311aa 	.word	0x000311aa
   1b870:	0001af01 	.word	0x0001af01
   1b874:	0001b5ed 	.word	0x0001b5ed
   1b878:	0002d970 	.word	0x0002d970
   1b87c:	0002d948 	.word	0x0002d948
   1b880:	000312f1 	.word	0x000312f1

0001b884 <bt_gatt_att_max_mtu_changed>:
{
   1b884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b886:	4b09      	ldr	r3, [pc, #36]	; (1b8ac <bt_gatt_att_max_mtu_changed+0x28>)
   1b888:	681c      	ldr	r4, [r3, #0]
{
   1b88a:	4605      	mov	r5, r0
   1b88c:	460e      	mov	r6, r1
   1b88e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b890:	b10c      	cbz	r4, 1b896 <bt_gatt_att_max_mtu_changed+0x12>
   1b892:	3c04      	subs	r4, #4
   1b894:	b904      	cbnz	r4, 1b898 <bt_gatt_att_max_mtu_changed+0x14>
}
   1b896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   1b898:	6823      	ldr	r3, [r4, #0]
   1b89a:	b11b      	cbz	r3, 1b8a4 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   1b89c:	463a      	mov	r2, r7
   1b89e:	4631      	mov	r1, r6
   1b8a0:	4628      	mov	r0, r5
   1b8a2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b8a4:	1d23      	adds	r3, r4, #4
   1b8a6:	d0f6      	beq.n	1b896 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b8a8:	6864      	ldr	r4, [r4, #4]
   1b8aa:	e7f1      	b.n	1b890 <bt_gatt_att_max_mtu_changed+0xc>
   1b8ac:	20002a2c 	.word	0x20002a2c

0001b8b0 <bt_gatt_encrypt_change>:
{
   1b8b0:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b8b2:	4a06      	ldr	r2, [pc, #24]	; (1b8cc <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1b8b4:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b8b6:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1b8b8:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b8ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1b8be:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b8c2:	f010 fc37 	bl	2c134 <bt_gatt_foreach_attr>
}
   1b8c6:	b003      	add	sp, #12
   1b8c8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b8cc:	0001b5ed 	.word	0x0001b5ed

0001b8d0 <db_hash_read>:
{
   1b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b8d2:	4914      	ldr	r1, [pc, #80]	; (1b924 <db_hash_read+0x54>)
{
   1b8d4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b8d8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b8da:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1b8de:	461f      	mov	r7, r3
   1b8e0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b8e2:	f007 fe59 	bl	23598 <k_work_cancel_delayable_sync>
   1b8e6:	4810      	ldr	r0, [pc, #64]	; (1b928 <db_hash_read+0x58>)
   1b8e8:	f010 fa2f 	bl	2bd4a <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b8ec:	0743      	lsls	r3, r0, #29
   1b8ee:	d402      	bmi.n	1b8f6 <db_hash_read+0x26>
		db_hash_gen(true);
   1b8f0:	2001      	movs	r0, #1
   1b8f2:	f7ff fa55 	bl	1ada0 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   1b8f6:	2101      	movs	r1, #1
   1b8f8:	4620      	mov	r0, r4
   1b8fa:	f010 fc51 	bl	2c1a0 <bt_gatt_change_aware>
	if (offset > value_len) {
   1b8fe:	2e10      	cmp	r6, #16
   1b900:	d80c      	bhi.n	1b91c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   1b902:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1b906:	4909      	ldr	r1, [pc, #36]	; (1b92c <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   1b908:	42bc      	cmp	r4, r7
   1b90a:	bfa8      	it	ge
   1b90c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b90e:	4622      	mov	r2, r4
   1b910:	4431      	add	r1, r6
   1b912:	4628      	mov	r0, r5
   1b914:	f00f f8c1 	bl	2aa9a <memcpy>
}
   1b918:	4620      	mov	r0, r4
   1b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b91c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b920:	e7fa      	b.n	1b918 <db_hash_read+0x48>
   1b922:	bf00      	nop
   1b924:	20001be0 	.word	0x20001be0
   1b928:	20001c90 	.word	0x20001c90
   1b92c:	20001b90 	.word	0x20001b90

0001b930 <bt_gatt_store_ccc>:
{
   1b930:	b570      	push	{r4, r5, r6, lr}
   1b932:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1b934:	2300      	movs	r3, #0
{
   1b936:	4604      	mov	r4, r0
   1b938:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1b93a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1b93c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1b940:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1b942:	4a18      	ldr	r2, [pc, #96]	; (1b9a4 <bt_gatt_store_ccc+0x74>)
   1b944:	ab0d      	add	r3, sp, #52	; 0x34
   1b946:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b94a:	2001      	movs	r0, #1
   1b94c:	f010 fbf2 	bl	2c134 <bt_gatt_foreach_attr>
	if (id) {
   1b950:	b31c      	cbz	r4, 1b99a <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
   1b952:	ae03      	add	r6, sp, #12
   1b954:	4622      	mov	r2, r4
   1b956:	2104      	movs	r1, #4
   1b958:	4630      	mov	r0, r6
   1b95a:	f00c fe6d 	bl	28638 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1b95e:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b960:	4a11      	ldr	r2, [pc, #68]	; (1b9a8 <bt_gatt_store_ccc+0x78>)
   1b962:	462b      	mov	r3, r5
   1b964:	2124      	movs	r1, #36	; 0x24
   1b966:	a804      	add	r0, sp, #16
   1b968:	f7f9 fec2 	bl	156f0 <bt_settings_encode_key>
	if (save.count) {
   1b96c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1b96e:	b1b2      	cbz	r2, 1b99e <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
   1b970:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1b972:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1b974:	a804      	add	r0, sp, #16
   1b976:	f7f7 ff33 	bl	137e0 <settings_save_one>
	if (err) {
   1b97a:	4604      	mov	r4, r0
   1b97c:	b150      	cbz	r0, 1b994 <bt_gatt_store_ccc+0x64>
   1b97e:	4a0b      	ldr	r2, [pc, #44]	; (1b9ac <bt_gatt_store_ccc+0x7c>)
   1b980:	4b0b      	ldr	r3, [pc, #44]	; (1b9b0 <bt_gatt_store_ccc+0x80>)
   1b982:	1ad2      	subs	r2, r2, r3
   1b984:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
   1b986:	0192      	lsls	r2, r2, #6
   1b988:	4601      	mov	r1, r0
   1b98a:	f042 0201 	orr.w	r2, r2, #1
   1b98e:	4809      	ldr	r0, [pc, #36]	; (1b9b4 <bt_gatt_store_ccc+0x84>)
   1b990:	f00d f91a 	bl	28bc8 <log_1>
}
   1b994:	4620      	mov	r0, r4
   1b996:	b040      	add	sp, #256	; 0x100
   1b998:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1b99a:	9400      	str	r4, [sp, #0]
   1b99c:	e7e0      	b.n	1b960 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1b99e:	4611      	mov	r1, r2
   1b9a0:	e7e8      	b.n	1b974 <bt_gatt_store_ccc+0x44>
   1b9a2:	bf00      	nop
   1b9a4:	0001a2dd 	.word	0x0001a2dd
   1b9a8:	000311aa 	.word	0x000311aa
   1b9ac:	0002d970 	.word	0x0002d970
   1b9b0:	0002d948 	.word	0x0002d948
   1b9b4:	0003131d 	.word	0x0003131d

0001b9b8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1b9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b9ba:	4603      	mov	r3, r0
   1b9bc:	4a41      	ldr	r2, [pc, #260]	; (1bac4 <bt_gatt_disconnected+0x10c>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1b9be:	4e42      	ldr	r6, [pc, #264]	; (1bac8 <bt_gatt_disconnected+0x110>)
{
   1b9c0:	b08d      	sub	sp, #52	; 0x34
   1b9c2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b9c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b9c8:	2001      	movs	r0, #1
   1b9ca:	f010 fbb3 	bl	2c134 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1b9ce:	4620      	mov	r0, r4
   1b9d0:	f7fc fddc 	bl	1858c <bt_conn_index>
   1b9d4:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1b9d6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1b9da:	b120      	cbz	r0, 1b9e6 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1b9dc:	f7fc fcac 	bl	18338 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1b9e0:	2300      	movs	r3, #0
   1b9e2:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1b9e6:	4839      	ldr	r0, [pc, #228]	; (1bacc <bt_gatt_disconnected+0x114>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b9e8:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1b9ec:	f007 fd76 	bl	234dc <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b9f0:	7a20      	ldrb	r0, [r4, #8]
   1b9f2:	4629      	mov	r1, r5
   1b9f4:	f00f fa84 	bl	2af00 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1b9f8:	2800      	cmp	r0, #0
   1b9fa:	d035      	beq.n	1ba68 <bt_gatt_disconnected+0xb0>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1b9fc:	4629      	mov	r1, r5
   1b9fe:	7a20      	ldrb	r0, [r4, #8]
   1ba00:	f7ff ff96 	bl	1b930 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1ba04:	4620      	mov	r0, r4
   1ba06:	f7fe fe95 	bl	1a734 <find_cf_cfg>
	if (!cfg) {
   1ba0a:	4606      	mov	r6, r0
   1ba0c:	2800      	cmp	r0, #0
   1ba0e:	d04a      	beq.n	1baa6 <bt_gatt_disconnected+0xee>
		if (conn->id) {
   1ba10:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1ba12:	3608      	adds	r6, #8
		if (conn->id) {
   1ba14:	2a00      	cmp	r2, #0
   1ba16:	d048      	beq.n	1baaa <bt_gatt_disconnected+0xf2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1ba18:	af02      	add	r7, sp, #8
   1ba1a:	2104      	movs	r1, #4
   1ba1c:	4638      	mov	r0, r7
   1ba1e:	f00c fe0b 	bl	28638 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ba22:	9700      	str	r7, [sp, #0]
   1ba24:	462b      	mov	r3, r5
   1ba26:	4a2a      	ldr	r2, [pc, #168]	; (1bad0 <bt_gatt_disconnected+0x118>)
   1ba28:	2124      	movs	r1, #36	; 0x24
   1ba2a:	a803      	add	r0, sp, #12
   1ba2c:	f7f9 fe60 	bl	156f0 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1ba30:	7a23      	ldrb	r3, [r4, #8]
   1ba32:	2701      	movs	r7, #1
   1ba34:	b93b      	cbnz	r3, 1ba46 <bt_gatt_disconnected+0x8e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1ba36:	2300      	movs	r3, #0
   1ba38:	9300      	str	r3, [sp, #0]
   1ba3a:	4a25      	ldr	r2, [pc, #148]	; (1bad0 <bt_gatt_disconnected+0x118>)
   1ba3c:	462b      	mov	r3, r5
   1ba3e:	2124      	movs	r1, #36	; 0x24
   1ba40:	a803      	add	r0, sp, #12
   1ba42:	f7f9 fe55 	bl	156f0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1ba46:	4631      	mov	r1, r6
   1ba48:	463a      	mov	r2, r7
   1ba4a:	a803      	add	r0, sp, #12
   1ba4c:	f7f7 fec8 	bl	137e0 <settings_save_one>
	if (err) {
   1ba50:	4601      	mov	r1, r0
   1ba52:	b148      	cbz	r0, 1ba68 <bt_gatt_disconnected+0xb0>
   1ba54:	4a1f      	ldr	r2, [pc, #124]	; (1bad4 <bt_gatt_disconnected+0x11c>)
   1ba56:	4b20      	ldr	r3, [pc, #128]	; (1bad8 <bt_gatt_disconnected+0x120>)
		BT_ERR("Failed to store Client Features (err %d)", err);
   1ba58:	4820      	ldr	r0, [pc, #128]	; (1badc <bt_gatt_disconnected+0x124>)
   1ba5a:	1ad2      	subs	r2, r2, r3
   1ba5c:	08d2      	lsrs	r2, r2, #3
   1ba5e:	0192      	lsls	r2, r2, #6
   1ba60:	f042 0201 	orr.w	r2, r2, #1
   1ba64:	f00d f8b0 	bl	28bc8 <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ba68:	7a20      	ldrb	r0, [r4, #8]
   1ba6a:	4629      	mov	r1, r5
   1ba6c:	f00f fa48 	bl	2af00 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1ba70:	b150      	cbz	r0, 1ba88 <bt_gatt_disconnected+0xd0>
		struct addr_with_id addr_with_id = {
   1ba72:	7a23      	ldrb	r3, [r4, #8]
   1ba74:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1ba78:	4a19      	ldr	r2, [pc, #100]	; (1bae0 <bt_gatt_disconnected+0x128>)
		struct addr_with_id addr_with_id = {
   1ba7a:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1ba7c:	ab03      	add	r3, sp, #12
   1ba7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ba82:	2001      	movs	r0, #1
   1ba84:	f010 fb56 	bl	2c134 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1ba88:	4620      	mov	r0, r4
   1ba8a:	f7fe fe53 	bl	1a734 <find_cf_cfg>
	if (!cfg) {
   1ba8e:	4606      	mov	r6, r0
   1ba90:	b138      	cbz	r0, 1baa2 <bt_gatt_disconnected+0xea>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ba92:	7a20      	ldrb	r0, [r4, #8]
   1ba94:	4629      	mov	r1, r5
   1ba96:	f00f fa33 	bl	2af00 <bt_addr_le_is_bonded>
   1ba9a:	b940      	cbnz	r0, 1baae <bt_gatt_disconnected+0xf6>
		clear_cf_cfg(cfg);
   1ba9c:	4630      	mov	r0, r6
   1ba9e:	f010 f9df 	bl	2be60 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1baa2:	b00d      	add	sp, #52	; 0x34
   1baa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1baa6:	4607      	mov	r7, r0
   1baa8:	e7c5      	b.n	1ba36 <bt_gatt_disconnected+0x7e>
   1baaa:	2701      	movs	r7, #1
   1baac:	e7c3      	b.n	1ba36 <bt_gatt_disconnected+0x7e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1baae:	4629      	mov	r1, r5
   1bab0:	1c70      	adds	r0, r6, #1
   1bab2:	f010 f9b5 	bl	2be20 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bab6:	f06f 0102 	mvn.w	r1, #2
   1baba:	f106 000c 	add.w	r0, r6, #12
   1babe:	f010 f9c0 	bl	2be42 <atomic_and>
}
   1bac2:	e7ee      	b.n	1baa2 <bt_gatt_disconnected+0xea>
   1bac4:	0001aa99 	.word	0x0001aa99
   1bac8:	20001c08 	.word	0x20001c08
   1bacc:	20001c10 	.word	0x20001c10
   1bad0:	00031367 	.word	0x00031367
   1bad4:	0002d970 	.word	0x0002d970
   1bad8:	0002d948 	.word	0x0002d948
   1badc:	0003133b 	.word	0x0003133b
   1bae0:	0001a3a1 	.word	0x0001a3a1

0001bae4 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   1bae4:	4b10      	ldr	r3, [pc, #64]	; (1bb28 <get_io_capa+0x44>)
   1bae6:	681b      	ldr	r3, [r3, #0]
   1bae8:	b1bb      	cbz	r3, 1bb1a <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1baea:	681a      	ldr	r2, [r3, #0]
   1baec:	b142      	cbz	r2, 1bb00 <get_io_capa+0x1c>
   1baee:	6859      	ldr	r1, [r3, #4]
   1baf0:	b131      	cbz	r1, 1bb00 <get_io_capa+0x1c>
   1baf2:	6899      	ldr	r1, [r3, #8]
   1baf4:	b911      	cbnz	r1, 1bafc <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1baf6:	490d      	ldr	r1, [pc, #52]	; (1bb2c <get_io_capa+0x48>)
   1baf8:	7809      	ldrb	r1, [r1, #0]
   1bafa:	b939      	cbnz	r1, 1bb0c <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1bafc:	2004      	movs	r0, #4
   1bafe:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   1bb00:	490a      	ldr	r1, [pc, #40]	; (1bb2c <get_io_capa+0x48>)
   1bb02:	7809      	ldrb	r1, [r1, #0]
   1bb04:	b111      	cbz	r1, 1bb0c <get_io_capa+0x28>
   1bb06:	b10a      	cbz	r2, 1bb0c <get_io_capa+0x28>
   1bb08:	6899      	ldr	r1, [r3, #8]
   1bb0a:	b941      	cbnz	r1, 1bb1e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   1bb0c:	685b      	ldr	r3, [r3, #4]
   1bb0e:	b943      	cbnz	r3, 1bb22 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   1bb10:	2a00      	cmp	r2, #0
   1bb12:	bf0c      	ite	eq
   1bb14:	2003      	moveq	r0, #3
   1bb16:	2000      	movne	r0, #0
   1bb18:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1bb1a:	2003      	movs	r0, #3
   1bb1c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   1bb1e:	2001      	movs	r0, #1
   1bb20:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   1bb22:	2002      	movs	r0, #2
	}
}
   1bb24:	4770      	bx	lr
   1bb26:	bf00      	nop
   1bb28:	200029d8 	.word	0x200029d8
   1bb2c:	200038a4 	.word	0x200038a4

0001bb30 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bb30:	4288      	cmp	r0, r1
{
   1bb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb34:	4604      	mov	r4, r0
   1bb36:	460d      	mov	r5, r1
   1bb38:	4616      	mov	r6, r2
   1bb3a:	eb00 0702 	add.w	r7, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bb3e:	d91a      	bls.n	1bb76 <sys_memcpy_swap+0x46>
   1bb40:	188b      	adds	r3, r1, r2
   1bb42:	4298      	cmp	r0, r3
   1bb44:	d20e      	bcs.n	1bb64 <sys_memcpy_swap+0x34>
   1bb46:	490d      	ldr	r1, [pc, #52]	; (1bb7c <sys_memcpy_swap+0x4c>)
   1bb48:	4a0d      	ldr	r2, [pc, #52]	; (1bb80 <sys_memcpy_swap+0x50>)
   1bb4a:	480e      	ldr	r0, [pc, #56]	; (1bb84 <sys_memcpy_swap+0x54>)
   1bb4c:	f240 2317 	movw	r3, #535	; 0x217
   1bb50:	f00c fe0e 	bl	28770 <printk>
   1bb54:	480c      	ldr	r0, [pc, #48]	; (1bb88 <sys_memcpy_swap+0x58>)
   1bb56:	f00c fe0b 	bl	28770 <printk>
   1bb5a:	4809      	ldr	r0, [pc, #36]	; (1bb80 <sys_memcpy_swap+0x50>)
   1bb5c:	f240 2117 	movw	r1, #535	; 0x217
   1bb60:	f00c fff7 	bl	28b52 <assert_post_action>
	psrc += length - 1;
   1bb64:	3e01      	subs	r6, #1
   1bb66:	4435      	add	r5, r6
		*pdst++ = *psrc--;
   1bb68:	f815 3901 	ldrb.w	r3, [r5], #-1
   1bb6c:	f804 3b01 	strb.w	r3, [r4], #1
	for (; length > 0; length--) {
   1bb70:	42bc      	cmp	r4, r7
   1bb72:	d1f9      	bne.n	1bb68 <sys_memcpy_swap+0x38>
}
   1bb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1bb76:	d0e6      	beq.n	1bb46 <sys_memcpy_swap+0x16>
   1bb78:	42b9      	cmp	r1, r7
   1bb7a:	e7e3      	b.n	1bb44 <sys_memcpy_swap+0x14>
   1bb7c:	0002fc16 	.word	0x0002fc16
   1bb80:	0002fbeb 	.word	0x0002fbeb
   1bb84:	0002e915 	.word	0x0002e915
   1bb88:	0002fc6d 	.word	0x0002fc6d

0001bb8c <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
   1bb8c:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1bb8e:	1d05      	adds	r5, r0, #4
{
   1bb90:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1bb92:	2108      	movs	r1, #8
   1bb94:	4628      	mov	r0, r5
   1bb96:	f010 fb45 	bl	2c224 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1bb9a:	490b      	ldr	r1, [pc, #44]	; (1bbc8 <smp_dhkey_generate+0x3c>)
   1bb9c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bba0:	f7fc f872 	bl	17c88 <bt_dh_key_gen>
	if (err) {
   1bba4:	b170      	cbz	r0, 1bbc4 <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1bba6:	2108      	movs	r1, #8
   1bba8:	4628      	mov	r0, r5
   1bbaa:	f010 fb4f 	bl	2c24c <atomic_clear_bit>
   1bbae:	4b07      	ldr	r3, [pc, #28]	; (1bbcc <smp_dhkey_generate+0x40>)
   1bbb0:	4907      	ldr	r1, [pc, #28]	; (1bbd0 <smp_dhkey_generate+0x44>)

		BT_ERR("Failed to generate DHKey");
   1bbb2:	4808      	ldr	r0, [pc, #32]	; (1bbd4 <smp_dhkey_generate+0x48>)
   1bbb4:	1ac9      	subs	r1, r1, r3
   1bbb6:	08c9      	lsrs	r1, r1, #3
   1bbb8:	0189      	lsls	r1, r1, #6
   1bbba:	f041 0101 	orr.w	r1, r1, #1
   1bbbe:	f00c fff6 	bl	28bae <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1bbc2:	2008      	movs	r0, #8
	}

	return 0;
}
   1bbc4:	bd38      	pop	{r3, r4, r5, pc}
   1bbc6:	bf00      	nop
   1bbc8:	0002c88b 	.word	0x0002c88b
   1bbcc:	0002d948 	.word	0x0002d948
   1bbd0:	0002d9b8 	.word	0x0002d9b8
   1bbd4:	00031378 	.word	0x00031378

0001bbd8 <get_auth.isra.0>:
	if (sc_supported) {
   1bbd8:	4b0c      	ldr	r3, [pc, #48]	; (1bc0c <get_auth.isra.0+0x34>)
   1bbda:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   1bbdc:	b510      	push	{r4, lr}
	if (sc_supported) {
   1bbde:	b17b      	cbz	r3, 1bc00 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1bbe0:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1bbe4:	f7ff ff7e 	bl	1bae4 <get_io_capa>
	if (bondable) {
   1bbe8:	4b09      	ldr	r3, [pc, #36]	; (1bc10 <get_auth.isra.0+0x38>)
   1bbea:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1bbec:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1bbee:	bf0c      	ite	eq
   1bbf0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1bbf4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1bbf8:	b12b      	cbz	r3, 1bc06 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1bbfa:	f044 0001 	orr.w	r0, r4, #1
}
   1bbfe:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1bc00:	f000 0407 	and.w	r4, r0, #7
   1bc04:	e7ee      	b.n	1bbe4 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1bc06:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1bc0a:	e7f8      	b.n	1bbfe <get_auth.isra.0+0x26>
   1bc0c:	200038a4 	.word	0x200038a4
   1bc10:	2000076c 	.word	0x2000076c

0001bc14 <smp_chan_get>:
{
   1bc14:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1bc16:	2106      	movs	r1, #6
   1bc18:	f00f fcc7 	bl	2b5aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bc1c:	4604      	mov	r4, r0
   1bc1e:	b958      	cbnz	r0, 1bc38 <smp_chan_get+0x24>
   1bc20:	4907      	ldr	r1, [pc, #28]	; (1bc40 <smp_chan_get+0x2c>)
   1bc22:	4b08      	ldr	r3, [pc, #32]	; (1bc44 <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   1bc24:	4808      	ldr	r0, [pc, #32]	; (1bc48 <smp_chan_get+0x34>)
   1bc26:	1ac9      	subs	r1, r1, r3
   1bc28:	08c9      	lsrs	r1, r1, #3
   1bc2a:	0189      	lsls	r1, r1, #6
   1bc2c:	f041 0101 	orr.w	r1, r1, #1
   1bc30:	f00c ffbd 	bl	28bae <log_0>
}
   1bc34:	4620      	mov	r0, r4
   1bc36:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1bc38:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1bc3c:	e7fa      	b.n	1bc34 <smp_chan_get+0x20>
   1bc3e:	bf00      	nop
   1bc40:	0002d9b8 	.word	0x0002d9b8
   1bc44:	0002d948 	.word	0x0002d948
   1bc48:	00031391 	.word	0x00031391

0001bc4c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1bc4c:	4b0c      	ldr	r3, [pc, #48]	; (1bc80 <bt_smp_accept+0x34>)
{
   1bc4e:	b510      	push	{r4, lr}
   1bc50:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   1bc52:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   1bc56:	b928      	cbnz	r0, 1bc64 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1bc58:	4a0a      	ldr	r2, [pc, #40]	; (1bc84 <bt_smp_accept+0x38>)
   1bc5a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   1bc5e:	33f0      	adds	r3, #240	; 0xf0
   1bc60:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1bc62:	bd10      	pop	{r4, pc}
   1bc64:	4b08      	ldr	r3, [pc, #32]	; (1bc88 <bt_smp_accept+0x3c>)
   1bc66:	4a09      	ldr	r2, [pc, #36]	; (1bc8c <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   1bc68:	4809      	ldr	r0, [pc, #36]	; (1bc90 <bt_smp_accept+0x44>)
   1bc6a:	1ad2      	subs	r2, r2, r3
   1bc6c:	08d2      	lsrs	r2, r2, #3
   1bc6e:	0192      	lsls	r2, r2, #6
   1bc70:	f042 0201 	orr.w	r2, r2, #1
   1bc74:	4621      	mov	r1, r4
   1bc76:	f00c ffa7 	bl	28bc8 <log_1>
	return -ENOMEM;
   1bc7a:	f06f 000b 	mvn.w	r0, #11
   1bc7e:	e7f0      	b.n	1bc62 <bt_smp_accept+0x16>
   1bc80:	20001c98 	.word	0x20001c98
   1bc84:	0002e1cc 	.word	0x0002e1cc
   1bc88:	0002d948 	.word	0x0002d948
   1bc8c:	0002d9b8 	.word	0x0002d9b8
   1bc90:	000313ac 	.word	0x000313ac

0001bc94 <smp_init>:
{
   1bc94:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1bc96:	22f0      	movs	r2, #240	; 0xf0
{
   1bc98:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1bc9a:	2100      	movs	r1, #0
   1bc9c:	f00e ff08 	bl	2aab0 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1bca0:	2110      	movs	r1, #16
   1bca2:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1bca6:	f004 fd7b 	bl	207a0 <bt_rand>
   1bcaa:	4604      	mov	r4, r0
   1bcac:	b948      	cbnz	r0, 1bcc2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1bcae:	2105      	movs	r1, #5
   1bcb0:	4628      	mov	r0, r5
   1bcb2:	f010 fab7 	bl	2c224 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1bcb6:	f7fb ffd7 	bl	17c68 <bt_pub_key_get>
   1bcba:	4b03      	ldr	r3, [pc, #12]	; (1bcc8 <smp_init+0x34>)
   1bcbc:	6018      	str	r0, [r3, #0]
}
   1bcbe:	4620      	mov	r0, r4
   1bcc0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1bcc2:	2408      	movs	r4, #8
   1bcc4:	e7fb      	b.n	1bcbe <smp_init+0x2a>
   1bcc6:	bf00      	nop
   1bcc8:	20002a74 	.word	0x20002a74

0001bccc <smp_find>:
{
   1bccc:	4601      	mov	r1, r0
   1bcce:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1bcd0:	4803      	ldr	r0, [pc, #12]	; (1bce0 <smp_find+0x14>)
   1bcd2:	f010 fb86 	bl	2c3e2 <atomic_test_bit>
   1bcd6:	2800      	cmp	r0, #0
}
   1bcd8:	4802      	ldr	r0, [pc, #8]	; (1bce4 <smp_find+0x18>)
   1bcda:	bf08      	it	eq
   1bcdc:	2000      	moveq	r0, #0
   1bcde:	bd08      	pop	{r3, pc}
   1bce0:	20001c9c 	.word	0x20001c9c
   1bce4:	20001c98 	.word	0x20001c98

0001bce8 <compute_and_check_and_send_periph_dhcheck>:
{
   1bce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   1bcec:	2210      	movs	r2, #16
{
   1bcee:	b0a3      	sub	sp, #140	; 0x8c
   1bcf0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   1bcf2:	2100      	movs	r1, #0
   1bcf4:	eb0d 0002 	add.w	r0, sp, r2
   1bcf8:	f00e feda 	bl	2aab0 <memset>
	switch (smp->method) {
   1bcfc:	7a21      	ldrb	r1, [r4, #8]
   1bcfe:	2905      	cmp	r1, #5
   1bd00:	f200 8099 	bhi.w	1be36 <compute_and_check_and_send_periph_dhcheck+0x14e>
   1bd04:	e8df f001 	tbb	[pc, r1]
   1bd08:	09030309 	.word	0x09030309
   1bd0c:	8e97      	.short	0x8e97
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1bd0e:	2204      	movs	r2, #4
   1bd10:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   1bd14:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1bd16:	f00e fec0 	bl	2aa9a <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   1bd1a:	4b79      	ldr	r3, [pc, #484]	; (1bf00 <compute_and_check_and_send_periph_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   1bd1c:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   1bd20:	aa14      	add	r2, sp, #80	; 0x50
   1bd22:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1bd26:	6818      	ldr	r0, [r3, #0]
   1bd28:	6859      	ldr	r1, [r3, #4]
   1bd2a:	4615      	mov	r5, r2
   1bd2c:	c503      	stmia	r5!, {r0, r1}
   1bd2e:	3308      	adds	r3, #8
   1bd30:	42b3      	cmp	r3, r6
   1bd32:	462a      	mov	r2, r5
   1bd34:	d1f7      	bne.n	1bd26 <compute_and_check_and_send_periph_dhcheck+0x3e>
   1bd36:	6818      	ldr	r0, [r3, #0]
   1bd38:	791b      	ldrb	r3, [r3, #4]
   1bd3a:	6028      	str	r0, [r5, #0]
   1bd3c:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   1bd3e:	ad0c      	add	r5, sp, #48	; 0x30
   1bd40:	2220      	movs	r2, #32
   1bd42:	f104 0197 	add.w	r1, r4, #151	; 0x97
   1bd46:	4628      	mov	r0, r5
   1bd48:	f7ff fef2 	bl	1bb30 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   1bd4c:	486d      	ldr	r0, [pc, #436]	; (1bf04 <compute_and_check_and_send_periph_dhcheck+0x21c>)
   1bd4e:	ab08      	add	r3, sp, #32
   1bd50:	2220      	movs	r2, #32
   1bd52:	4629      	mov	r1, r5
   1bd54:	f010 fa89 	bl	2c26a <bt_smp_aes_cmac>
	if (err) {
   1bd58:	2800      	cmp	r0, #0
   1bd5a:	f040 80c7 	bne.w	1beec <compute_and_check_and_send_periph_dhcheck+0x204>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1bd5e:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   1bd62:	2210      	movs	r2, #16
   1bd64:	4639      	mov	r1, r7
   1bd66:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   1bd6a:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   1bd6e:	f7ff fedf 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1bd72:	2210      	movs	r2, #16
   1bd74:	4641      	mov	r1, r8
   1bd76:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   1bd7a:	f7ff fed9 	bl	1bb30 <sys_memcpy_swap>
	m[37] = a1->type;
   1bd7e:	f899 3097 	ldrb.w	r3, [r9, #151]	; 0x97
   1bd82:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1bd86:	2206      	movs	r2, #6
   1bd88:	f109 0198 	add.w	r1, r9, #152	; 0x98
   1bd8c:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   1bd90:	f7ff fece 	bl	1bb30 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   1bd94:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   1bd98:	f899 309e 	ldrb.w	r3, [r9, #158]	; 0x9e
   1bd9c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1bda0:	2206      	movs	r2, #6
   1bda2:	f109 019f 	add.w	r1, r9, #159	; 0x9f
   1bda6:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   1bdaa:	f7ff fec1 	bl	1bb30 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   1bdae:	4633      	mov	r3, r6
   1bdb0:	2235      	movs	r2, #53	; 0x35
   1bdb2:	a914      	add	r1, sp, #80	; 0x50
   1bdb4:	a808      	add	r0, sp, #32
   1bdb6:	f010 fa58 	bl	2c26a <bt_smp_aes_cmac>
	if (err) {
   1bdba:	2800      	cmp	r0, #0
   1bdbc:	f040 8096 	bne.w	1beec <compute_and_check_and_send_periph_dhcheck+0x204>
	sys_mem_swap(mackey, 16);
   1bdc0:	4630      	mov	r0, r6
   1bdc2:	f010 fa8d 	bl	2c2e0 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   1bdc6:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   1bdca:	2301      	movs	r3, #1
   1bdcc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   1bdd0:	2235      	movs	r2, #53	; 0x35
   1bdd2:	464b      	mov	r3, r9
   1bdd4:	a914      	add	r1, sp, #80	; 0x50
   1bdd6:	a808      	add	r0, sp, #32
   1bdd8:	f010 fa47 	bl	2c26a <bt_smp_aes_cmac>
	if (err) {
   1bddc:	2800      	cmp	r0, #0
   1bdde:	f040 8085 	bne.w	1beec <compute_and_check_and_send_periph_dhcheck+0x204>
	sys_mem_swap(ltk, 16);
   1bde2:	4648      	mov	r0, r9
   1bde4:	f010 fa7c 	bl	2c2e0 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   1bde8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1bdec:	aa14      	add	r2, sp, #80	; 0x50
   1bdee:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   1bdf0:	f103 0297 	add.w	r2, r3, #151	; 0x97
		   &smp->chan.chan.conn->le.resp_addr,
   1bdf4:	339e      	adds	r3, #158	; 0x9e
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1bdf6:	9301      	str	r3, [sp, #4]
   1bdf8:	f104 0311 	add.w	r3, r4, #17
   1bdfc:	9202      	str	r2, [sp, #8]
   1bdfe:	9300      	str	r3, [sp, #0]
   1be00:	463a      	mov	r2, r7
   1be02:	ab04      	add	r3, sp, #16
   1be04:	4641      	mov	r1, r8
   1be06:	4630      	mov	r0, r6
   1be08:	f010 fa78 	bl	2c2fc <smp_f6>
   1be0c:	b1f8      	cbz	r0, 1be4e <compute_and_check_and_send_periph_dhcheck+0x166>
   1be0e:	493e      	ldr	r1, [pc, #248]	; (1bf08 <compute_and_check_and_send_periph_dhcheck+0x220>)
   1be10:	4b3e      	ldr	r3, [pc, #248]	; (1bf0c <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Calculate local DHKey check failed");
   1be12:	483f      	ldr	r0, [pc, #252]	; (1bf10 <compute_and_check_and_send_periph_dhcheck+0x228>)
   1be14:	1ac9      	subs	r1, r1, r3
   1be16:	08c9      	lsrs	r1, r1, #3
   1be18:	0189      	lsls	r1, r1, #6
   1be1a:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   1be1e:	f00c fec6 	bl	28bae <log_0>
   1be22:	e012      	b.n	1be4a <compute_and_check_and_send_periph_dhcheck+0x162>
		if (smp->oobd_remote) {
   1be24:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1be28:	2900      	cmp	r1, #0
   1be2a:	f43f af76 	beq.w	1bd1a <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1be2e:	2210      	movs	r2, #16
   1be30:	eb0d 0002 	add.w	r0, sp, r2
   1be34:	e76f      	b.n	1bd16 <compute_and_check_and_send_periph_dhcheck+0x2e>
   1be36:	4a34      	ldr	r2, [pc, #208]	; (1bf08 <compute_and_check_and_send_periph_dhcheck+0x220>)
   1be38:	4b34      	ldr	r3, [pc, #208]	; (1bf0c <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1be3a:	4836      	ldr	r0, [pc, #216]	; (1bf14 <compute_and_check_and_send_periph_dhcheck+0x22c>)
   1be3c:	1ad2      	subs	r2, r2, r3
   1be3e:	08d2      	lsrs	r2, r2, #3
   1be40:	0192      	lsls	r2, r2, #6
   1be42:	f042 0201 	orr.w	r2, r2, #1
   1be46:	f00c febf 	bl	28bc8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1be4a:	2008      	movs	r0, #8
   1be4c:	e049      	b.n	1bee2 <compute_and_check_and_send_periph_dhcheck+0x1fa>
	if (smp->method == LE_SC_OOB) {
   1be4e:	7a23      	ldrb	r3, [r4, #8]
   1be50:	2b05      	cmp	r3, #5
   1be52:	d107      	bne.n	1be64 <compute_and_check_and_send_periph_dhcheck+0x17c>
		if (smp->oobd_local) {
   1be54:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1be58:	2210      	movs	r2, #16
   1be5a:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   1be5e:	b1e1      	cbz	r1, 1be9a <compute_and_check_and_send_periph_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1be60:	f00e fe1b 	bl	2aa9a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   1be64:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1be68:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   1be6a:	f103 029e 	add.w	r2, r3, #158	; 0x9e
		   &smp->chan.chan.conn->le.init_addr,
   1be6e:	3397      	adds	r3, #151	; 0x97
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1be70:	9301      	str	r3, [sp, #4]
   1be72:	f104 030a 	add.w	r3, r4, #10
   1be76:	9202      	str	r2, [sp, #8]
   1be78:	9300      	str	r3, [sp, #0]
   1be7a:	4642      	mov	r2, r8
   1be7c:	ab04      	add	r3, sp, #16
   1be7e:	4639      	mov	r1, r7
   1be80:	4630      	mov	r0, r6
   1be82:	f010 fa3b 	bl	2c2fc <smp_f6>
   1be86:	b158      	cbz	r0, 1bea0 <compute_and_check_and_send_periph_dhcheck+0x1b8>
   1be88:	491f      	ldr	r1, [pc, #124]	; (1bf08 <compute_and_check_and_send_periph_dhcheck+0x220>)
   1be8a:	4b20      	ldr	r3, [pc, #128]	; (1bf0c <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Calculate remote DHKey check failed");
   1be8c:	4822      	ldr	r0, [pc, #136]	; (1bf18 <compute_and_check_and_send_periph_dhcheck+0x230>)
   1be8e:	1ac9      	subs	r1, r1, r3
   1be90:	08c9      	lsrs	r1, r1, #3
   1be92:	0189      	lsls	r1, r1, #6
   1be94:	f041 0101 	orr.w	r1, r1, #1
   1be98:	e7c1      	b.n	1be1e <compute_and_check_and_send_periph_dhcheck+0x136>
			memset(r, 0, sizeof(r));
   1be9a:	f00e fe09 	bl	2aab0 <memset>
   1be9e:	e7e1      	b.n	1be64 <compute_and_check_and_send_periph_dhcheck+0x17c>
	if (memcmp(smp->e, re, 16)) {
   1bea0:	4629      	mov	r1, r5
   1bea2:	2210      	movs	r2, #16
   1bea4:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1bea8:	f00e fdd0 	bl	2aa4c <memcmp>
   1beac:	4605      	mov	r5, r0
   1beae:	b9d8      	cbnz	r0, 1bee8 <compute_and_check_and_send_periph_dhcheck+0x200>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1beb0:	210d      	movs	r1, #13
   1beb2:	4620      	mov	r0, r4
   1beb4:	f010 fabf 	bl	2c436 <smp_create_pdu.isra.0>
	if (!buf) {
   1beb8:	4606      	mov	r6, r0
   1beba:	2800      	cmp	r0, #0
   1bebc:	d0c5      	beq.n	1be4a <compute_and_check_and_send_periph_dhcheck+0x162>
   1bebe:	2110      	movs	r1, #16
   1bec0:	3008      	adds	r0, #8
   1bec2:	f001 ff25 	bl	1dd10 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1bec6:	2210      	movs	r2, #16
   1bec8:	a914      	add	r1, sp, #80	; 0x50
   1beca:	f00e fde6 	bl	2aa9a <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1bece:	462a      	mov	r2, r5
   1bed0:	4631      	mov	r1, r6
   1bed2:	4620      	mov	r0, r4
   1bed4:	f010 f9e5 	bl	2c2a2 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1bed8:	1d20      	adds	r0, r4, #4
   1beda:	2101      	movs	r1, #1
   1bedc:	f010 f9a2 	bl	2c224 <atomic_set_bit>
	return 0;
   1bee0:	4628      	mov	r0, r5
}
   1bee2:	b023      	add	sp, #140	; 0x8c
   1bee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1bee8:	200b      	movs	r0, #11
   1beea:	e7fa      	b.n	1bee2 <compute_and_check_and_send_periph_dhcheck+0x1fa>
   1beec:	4906      	ldr	r1, [pc, #24]	; (1bf08 <compute_and_check_and_send_periph_dhcheck+0x220>)
   1beee:	4b07      	ldr	r3, [pc, #28]	; (1bf0c <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Calculate LTK failed");
   1bef0:	480a      	ldr	r0, [pc, #40]	; (1bf1c <compute_and_check_and_send_periph_dhcheck+0x234>)
   1bef2:	1ac9      	subs	r1, r1, r3
   1bef4:	08c9      	lsrs	r1, r1, #3
   1bef6:	0189      	lsls	r1, r1, #6
   1bef8:	f041 0101 	orr.w	r1, r1, #1
   1befc:	e78f      	b.n	1be1e <compute_and_check_and_send_periph_dhcheck+0x136>
   1befe:	bf00      	nop
   1bf00:	0002db02 	.word	0x0002db02
   1bf04:	00031700 	.word	0x00031700
   1bf08:	0002d9b8 	.word	0x0002d9b8
   1bf0c:	0002d948 	.word	0x0002d948
   1bf10:	000313ed 	.word	0x000313ed
   1bf14:	000313d1 	.word	0x000313d1
   1bf18:	00031410 	.word	0x00031410
   1bf1c:	00031434 	.word	0x00031434

0001bf20 <smp_send_pairing_confirm>:
{
   1bf20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1bf22:	7a04      	ldrb	r4, [r0, #8]
   1bf24:	2c02      	cmp	r4, #2
{
   1bf26:	4605      	mov	r5, r0
	switch (smp->method) {
   1bf28:	d824      	bhi.n	1bf74 <smp_send_pairing_confirm+0x54>
   1bf2a:	b14c      	cbz	r4, 1bf40 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1bf2c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1bf30:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1bf34:	40dc      	lsrs	r4, r3
   1bf36:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1bf3a:	f064 047f 	orn	r4, r4, #127	; 0x7f
   1bf3e:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1bf40:	2103      	movs	r1, #3
   1bf42:	4628      	mov	r0, r5
   1bf44:	f010 fa77 	bl	2c436 <smp_create_pdu.isra.0>
	if (!buf) {
   1bf48:	4606      	mov	r6, r0
   1bf4a:	b300      	cbz	r0, 1bf8e <smp_send_pairing_confirm+0x6e>
   1bf4c:	2110      	movs	r1, #16
   1bf4e:	3008      	adds	r0, #8
   1bf50:	f001 fede 	bl	1dd10 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1bf54:	9000      	str	r0, [sp, #0]
   1bf56:	4816      	ldr	r0, [pc, #88]	; (1bfb0 <smp_send_pairing_confirm+0x90>)
   1bf58:	4623      	mov	r3, r4
   1bf5a:	6800      	ldr	r0, [r0, #0]
   1bf5c:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1bf60:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1bf64:	f010 fa16 	bl	2c394 <smp_f4>
   1bf68:	4604      	mov	r4, r0
   1bf6a:	b1a0      	cbz	r0, 1bf96 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   1bf6c:	4630      	mov	r0, r6
   1bf6e:	f001 fd9f 	bl	1dab0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1bf72:	e00c      	b.n	1bf8e <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1bf74:	2c03      	cmp	r4, #3
   1bf76:	d00c      	beq.n	1bf92 <smp_send_pairing_confirm+0x72>
   1bf78:	4a0e      	ldr	r2, [pc, #56]	; (1bfb4 <smp_send_pairing_confirm+0x94>)
   1bf7a:	4b0f      	ldr	r3, [pc, #60]	; (1bfb8 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1bf7c:	480f      	ldr	r0, [pc, #60]	; (1bfbc <smp_send_pairing_confirm+0x9c>)
   1bf7e:	1ad2      	subs	r2, r2, r3
   1bf80:	08d2      	lsrs	r2, r2, #3
   1bf82:	0192      	lsls	r2, r2, #6
   1bf84:	f042 0201 	orr.w	r2, r2, #1
   1bf88:	4621      	mov	r1, r4
   1bf8a:	f00c fe1d 	bl	28bc8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1bf8e:	2008      	movs	r0, #8
   1bf90:	e00b      	b.n	1bfaa <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   1bf92:	2400      	movs	r4, #0
   1bf94:	e7d4      	b.n	1bf40 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   1bf96:	4602      	mov	r2, r0
   1bf98:	4631      	mov	r1, r6
   1bf9a:	4628      	mov	r0, r5
   1bf9c:	f010 f981 	bl	2c2a2 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1bfa0:	1d28      	adds	r0, r5, #4
   1bfa2:	4621      	mov	r1, r4
   1bfa4:	f010 f952 	bl	2c24c <atomic_clear_bit>
	return 0;
   1bfa8:	4620      	mov	r0, r4
}
   1bfaa:	b002      	add	sp, #8
   1bfac:	bd70      	pop	{r4, r5, r6, pc}
   1bfae:	bf00      	nop
   1bfb0:	20002a74 	.word	0x20002a74
   1bfb4:	0002d9b8 	.word	0x0002d9b8
   1bfb8:	0002d948 	.word	0x0002d948
   1bfbc:	000313d1 	.word	0x000313d1

0001bfc0 <smp_public_key_periph>:
{
   1bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1bfc4:	1d06      	adds	r6, r0, #4
{
   1bfc6:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1bfc8:	210e      	movs	r1, #14
   1bfca:	4630      	mov	r0, r6
   1bfcc:	f010 fa09 	bl	2c3e2 <atomic_test_bit>
   1bfd0:	b998      	cbnz	r0, 1bffa <smp_public_key_periph+0x3a>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1bfd2:	4b4e      	ldr	r3, [pc, #312]	; (1c10c <smp_public_key_periph+0x14c>)
   1bfd4:	2220      	movs	r2, #32
   1bfd6:	6819      	ldr	r1, [r3, #0]
   1bfd8:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1bfdc:	f00e fd36 	bl	2aa4c <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1bfe0:	b958      	cbnz	r0, 1bffa <smp_public_key_periph+0x3a>
   1bfe2:	494b      	ldr	r1, [pc, #300]	; (1c110 <smp_public_key_periph+0x150>)
   1bfe4:	4b4b      	ldr	r3, [pc, #300]	; (1c114 <smp_public_key_periph+0x154>)
		BT_WARN("Remote public key rejected");
   1bfe6:	484c      	ldr	r0, [pc, #304]	; (1c118 <smp_public_key_periph+0x158>)
   1bfe8:	1ac9      	subs	r1, r1, r3
   1bfea:	08c9      	lsrs	r1, r1, #3
   1bfec:	0189      	lsls	r1, r1, #6
   1bfee:	f041 0102 	orr.w	r1, r1, #2
   1bff2:	f00c fddc 	bl	28bae <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1bff6:	2008      	movs	r0, #8
   1bff8:	e02e      	b.n	1c058 <smp_public_key_periph+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1bffa:	210c      	movs	r1, #12
   1bffc:	4620      	mov	r0, r4
   1bffe:	f010 fa1a 	bl	2c436 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1c002:	4605      	mov	r5, r0
   1c004:	2800      	cmp	r0, #0
   1c006:	d0f6      	beq.n	1bff6 <smp_public_key_periph+0x36>
   1c008:	2140      	movs	r1, #64	; 0x40
   1c00a:	3008      	adds	r0, #8
   1c00c:	f001 fe80 	bl	1dd10 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1c010:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1c10c <smp_public_key_periph+0x14c>
   1c014:	2220      	movs	r2, #32
   1c016:	f8d8 1000 	ldr.w	r1, [r8]
   1c01a:	4607      	mov	r7, r0
   1c01c:	f00e fd3d 	bl	2aa9a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1c020:	f8d8 1000 	ldr.w	r1, [r8]
   1c024:	2220      	movs	r2, #32
   1c026:	4411      	add	r1, r2
   1c028:	18b8      	adds	r0, r7, r2
   1c02a:	f00e fd36 	bl	2aa9a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1c02e:	4629      	mov	r1, r5
   1c030:	2200      	movs	r2, #0
   1c032:	4620      	mov	r0, r4
   1c034:	f010 f935 	bl	2c2a2 <smp_send.isra.0>
	switch (smp->method) {
   1c038:	7a21      	ldrb	r1, [r4, #8]
   1c03a:	2905      	cmp	r1, #5
   1c03c:	d859      	bhi.n	1c0f2 <smp_public_key_periph+0x132>
   1c03e:	e8df f001 	tbb	[pc, r1]
   1c042:	3803      	.short	0x3803
   1c044:	5658030d 	.word	0x5658030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c048:	2104      	movs	r1, #4
   1c04a:	4620      	mov	r0, r4
   1c04c:	f010 f8ea 	bl	2c224 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1c050:	f7ff ff66 	bl	1bf20 <smp_send_pairing_confirm>
		if (err) {
   1c054:	2800      	cmp	r0, #0
   1c056:	d03d      	beq.n	1c0d4 <smp_public_key_periph+0x114>
}
   1c058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1c05c:	2104      	movs	r1, #4
   1c05e:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1c062:	f004 fb9d 	bl	207a0 <bt_rand>
   1c066:	2800      	cmp	r0, #0
   1c068:	d1c5      	bne.n	1bff6 <smp_public_key_periph+0x36>
		smp->passkey %= 1000000;
   1c06a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1c06e:	4a2b      	ldr	r2, [pc, #172]	; (1c11c <smp_public_key_periph+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   1c070:	4d2b      	ldr	r5, [pc, #172]	; (1c120 <smp_public_key_periph+0x160>)
		smp->passkey %= 1000000;
   1c072:	fbb1 f3f2 	udiv	r3, r1, r2
   1c076:	fb02 1313 	mls	r3, r2, r3, r1
   1c07a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   1c07e:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   1c080:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   1c084:	b163      	cbz	r3, 1c0a0 <smp_public_key_periph+0xe0>
   1c086:	681b      	ldr	r3, [r3, #0]
   1c088:	b153      	cbz	r3, 1c0a0 <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c08a:	210b      	movs	r1, #11
   1c08c:	4630      	mov	r0, r6
   1c08e:	f010 f8c9 	bl	2c224 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   1c092:	682b      	ldr	r3, [r5, #0]
   1c094:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1c098:	681b      	ldr	r3, [r3, #0]
   1c09a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c09e:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1c0a0:	2103      	movs	r1, #3
   1c0a2:	4620      	mov	r0, r4
   1c0a4:	f010 f8be 	bl	2c224 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1c0a8:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c0aa:	4620      	mov	r0, r4
   1c0ac:	f010 f8ba 	bl	2c224 <atomic_set_bit>
		break;
   1c0b0:	e010      	b.n	1c0d4 <smp_public_key_periph+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	2103      	movs	r1, #3
   1c0b6:	f010 f8b5 	bl	2c224 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1c0ba:	210e      	movs	r1, #14
   1c0bc:	f010 f8b2 	bl	2c224 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c0c0:	4630      	mov	r0, r6
   1c0c2:	210a      	movs	r1, #10
   1c0c4:	f010 f8ae 	bl	2c224 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   1c0c8:	4b15      	ldr	r3, [pc, #84]	; (1c120 <smp_public_key_periph+0x160>)
   1c0ca:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c0ce:	681b      	ldr	r3, [r3, #0]
   1c0d0:	685b      	ldr	r3, [r3, #4]
   1c0d2:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1c0d4:	4630      	mov	r0, r6
   1c0d6:	2107      	movs	r1, #7
   1c0d8:	f010 f8a4 	bl	2c224 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1c0dc:	2008      	movs	r0, #8
   1c0de:	f7ff fdf5 	bl	1bccc <smp_find>
   1c0e2:	b988      	cbnz	r0, 1c108 <smp_public_key_periph+0x148>
		return smp_dhkey_generate(smp);
   1c0e4:	4620      	mov	r0, r4
}
   1c0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   1c0ea:	f7ff bd4f 	b.w	1bb8c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c0ee:	2104      	movs	r1, #4
   1c0f0:	e7db      	b.n	1c0aa <smp_public_key_periph+0xea>
   1c0f2:	4b08      	ldr	r3, [pc, #32]	; (1c114 <smp_public_key_periph+0x154>)
   1c0f4:	4a06      	ldr	r2, [pc, #24]	; (1c110 <smp_public_key_periph+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c0f6:	480b      	ldr	r0, [pc, #44]	; (1c124 <smp_public_key_periph+0x164>)
   1c0f8:	1ad2      	subs	r2, r2, r3
   1c0fa:	08d2      	lsrs	r2, r2, #3
   1c0fc:	0192      	lsls	r2, r2, #6
   1c0fe:	f042 0201 	orr.w	r2, r2, #1
   1c102:	f00c fd61 	bl	28bc8 <log_1>
   1c106:	e776      	b.n	1bff6 <smp_public_key_periph+0x36>
	return 0;
   1c108:	2000      	movs	r0, #0
   1c10a:	e7a5      	b.n	1c058 <smp_public_key_periph+0x98>
   1c10c:	20002a74 	.word	0x20002a74
   1c110:	0002d9b8 	.word	0x0002d9b8
   1c114:	0002d948 	.word	0x0002d948
   1c118:	00031449 	.word	0x00031449
   1c11c:	000f4240 	.word	0x000f4240
   1c120:	200029d8 	.word	0x200029d8
   1c124:	000313d1 	.word	0x000313d1

0001c128 <smp_public_key>:
{
   1c128:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   1c12a:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1c12c:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   1c130:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1c132:	2220      	movs	r2, #32
   1c134:	4631      	mov	r1, r6
   1c136:	4628      	mov	r0, r5
   1c138:	f00e fcaf 	bl	2aa9a <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1c13c:	2220      	movs	r2, #32
   1c13e:	18b1      	adds	r1, r6, r2
   1c140:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1c144:	f00e fca9 	bl	2aa9a <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1c148:	4628      	mov	r0, r5
   1c14a:	f7fb fce7 	bl	17b1c <bt_pub_key_is_debug>
   1c14e:	b940      	cbnz	r0, 1c162 <smp_public_key+0x3a>
	if (!sc_public_key) {
   1c150:	4b1a      	ldr	r3, [pc, #104]	; (1c1bc <smp_public_key+0x94>)
   1c152:	681d      	ldr	r5, [r3, #0]
   1c154:	bb6d      	cbnz	r5, 1c1b2 <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1c156:	1d20      	adds	r0, r4, #4
   1c158:	2106      	movs	r1, #6
   1c15a:	f010 f863 	bl	2c224 <atomic_set_bit>
		return 0;
   1c15e:	4628      	mov	r0, r5
   1c160:	e026      	b.n	1c1b0 <smp_public_key+0x88>
   1c162:	4b17      	ldr	r3, [pc, #92]	; (1c1c0 <smp_public_key+0x98>)
   1c164:	4917      	ldr	r1, [pc, #92]	; (1c1c4 <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
   1c166:	4818      	ldr	r0, [pc, #96]	; (1c1c8 <smp_public_key+0xa0>)
   1c168:	1ac9      	subs	r1, r1, r3
   1c16a:	08c9      	lsrs	r1, r1, #3
   1c16c:	0189      	lsls	r1, r1, #6
   1c16e:	f041 0103 	orr.w	r1, r1, #3
   1c172:	f00c fd1c 	bl	28bae <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1c176:	210e      	movs	r1, #14
   1c178:	1d20      	adds	r0, r4, #4
   1c17a:	f010 f853 	bl	2c224 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1c17e:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   1c182:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c186:	b933      	cbnz	r3, 1c196 <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c188:	7a28      	ldrb	r0, [r5, #8]
   1c18a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1c18e:	f001 f8e5 	bl	1d35c <bt_keys_get_addr>
   1c192:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1c196:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c19a:	2b00      	cmp	r3, #0
   1c19c:	d0d8      	beq.n	1c150 <smp_public_key+0x28>
   1c19e:	89da      	ldrh	r2, [r3, #14]
   1c1a0:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1c1a4:	2a00      	cmp	r2, #0
   1c1a6:	d0d3      	beq.n	1c150 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1c1a8:	7b5b      	ldrb	r3, [r3, #13]
   1c1aa:	079b      	lsls	r3, r3, #30
   1c1ac:	d4d0      	bmi.n	1c150 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1c1ae:	2003      	movs	r0, #3
}
   1c1b0:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1c1b2:	4620      	mov	r0, r4
}
   1c1b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1c1b8:	f7ff bf02 	b.w	1bfc0 <smp_public_key_periph>
   1c1bc:	20002a74 	.word	0x20002a74
   1c1c0:	0002d948 	.word	0x0002d948
   1c1c4:	0002d9b8 	.word	0x0002d9b8
   1c1c8:	00031464 	.word	0x00031464

0001c1cc <smp_pairing_req>:
{
   1c1cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   1c1d0:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1c1d2:	78eb      	ldrb	r3, [r5, #3]
   1c1d4:	3b07      	subs	r3, #7
   1c1d6:	2b09      	cmp	r3, #9
{
   1c1d8:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1c1da:	d904      	bls.n	1c1e6 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1c1dc:	2506      	movs	r5, #6
}
   1c1de:	4628      	mov	r0, r5
   1c1e0:	b002      	add	sp, #8
   1c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   1c1e6:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   1c1ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c1ee:	b15b      	cbz	r3, 1c208 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1c1f0:	1d26      	adds	r6, r4, #4
   1c1f2:	210f      	movs	r1, #15
   1c1f4:	4630      	mov	r0, r6
   1c1f6:	f010 f8f4 	bl	2c3e2 <atomic_test_bit>
   1c1fa:	b980      	cbnz	r0, 1c21e <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   1c1fc:	4620      	mov	r0, r4
   1c1fe:	f7ff fd49 	bl	1bc94 <smp_init>
		if (ret) {
   1c202:	b160      	cbz	r0, 1c21e <smp_pairing_req+0x52>
			return ret;
   1c204:	b2c5      	uxtb	r5, r0
   1c206:	e7ea      	b.n	1c1de <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1c208:	7a38      	ldrb	r0, [r7, #8]
   1c20a:	f107 0190 	add.w	r1, r7, #144	; 0x90
   1c20e:	f001 f8a5 	bl	1d35c <bt_keys_get_addr>
   1c212:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
		if (!conn->le.keys) {
   1c216:	2800      	cmp	r0, #0
   1c218:	d1ea      	bne.n	1c1f0 <smp_pairing_req+0x24>
	switch (sec) {
   1c21a:	2508      	movs	r5, #8
   1c21c:	e7df      	b.n	1c1de <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1c21e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1c220:	2206      	movs	r2, #6
   1c222:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1c224:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1c226:	f104 000a 	add.w	r0, r4, #10
   1c22a:	f00e fc36 	bl	2aa9a <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1c22e:	2302      	movs	r3, #2
   1c230:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1c232:	78a8      	ldrb	r0, [r5, #2]
   1c234:	f7ff fcd0 	bl	1bbd8 <get_auth.isra.0>
   1c238:	74e0      	strb	r0, [r4, #19]
   1c23a:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   1c23c:	f7ff fc52 	bl	1bae4 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1c240:	4ba4      	ldr	r3, [pc, #656]	; (1c4d4 <smp_pairing_req+0x308>)
	rsp->io_capability = get_io_capa();
   1c242:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1c244:	781b      	ldrb	r3, [r3, #0]
   1c246:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1c248:	2310      	movs	r3, #16
   1c24a:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1c24c:	792b      	ldrb	r3, [r5, #4]
   1c24e:	f003 0303 	and.w	r3, r3, #3
   1c252:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1c254:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1c256:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1c25a:	f003 0301 	and.w	r3, r3, #1
   1c25e:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1c260:	d00c      	beq.n	1c27c <smp_pairing_req+0xb0>
   1c262:	78ab      	ldrb	r3, [r5, #2]
   1c264:	0719      	lsls	r1, r3, #28
   1c266:	d509      	bpl.n	1c27c <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1c268:	2105      	movs	r1, #5
   1c26a:	4630      	mov	r0, r6
   1c26c:	f00f ffda 	bl	2c224 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1c270:	7d63      	ldrb	r3, [r4, #21]
   1c272:	f003 0302 	and.w	r3, r3, #2
   1c276:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1c278:	2300      	movs	r3, #0
   1c27a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1c27c:	7ce3      	ldrb	r3, [r4, #19]
   1c27e:	069a      	lsls	r2, r3, #26
   1c280:	d506      	bpl.n	1c290 <smp_pairing_req+0xc4>
   1c282:	78ab      	ldrb	r3, [r5, #2]
   1c284:	069b      	lsls	r3, r3, #26
   1c286:	d503      	bpl.n	1c290 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1c288:	2114      	movs	r1, #20
   1c28a:	4630      	mov	r0, r6
   1c28c:	f00f ffca 	bl	2c224 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1c290:	7da3      	ldrb	r3, [r4, #22]
   1c292:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1c296:	7d63      	ldrb	r3, [r4, #21]
   1c298:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1c29c:	7ce3      	ldrb	r3, [r4, #19]
   1c29e:	07d8      	lsls	r0, r3, #31
   1c2a0:	d506      	bpl.n	1c2b0 <smp_pairing_req+0xe4>
   1c2a2:	78ab      	ldrb	r3, [r5, #2]
   1c2a4:	07d9      	lsls	r1, r3, #31
   1c2a6:	d503      	bpl.n	1c2b0 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1c2a8:	210d      	movs	r1, #13
   1c2aa:	4630      	mov	r0, r6
   1c2ac:	f00f ffba 	bl	2c224 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1c2b0:	2103      	movs	r1, #3
   1c2b2:	4630      	mov	r0, r6
   1c2b4:	f00f ffb6 	bl	2c224 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c2b8:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1c2ba:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c2bc:	f010 f891 	bl	2c3e2 <atomic_test_bit>
   1c2c0:	bb28      	cbnz	r0, 1c30e <smp_pairing_req+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1c2c2:	2d04      	cmp	r5, #4
   1c2c4:	d81a      	bhi.n	1c2fc <smp_pairing_req+0x130>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1c2c6:	7ca2      	ldrb	r2, [r4, #18]
   1c2c8:	7ae3      	ldrb	r3, [r4, #11]
   1c2ca:	4013      	ands	r3, r2
   1c2cc:	07da      	lsls	r2, r3, #31
   1c2ce:	d437      	bmi.n	1c340 <smp_pairing_req+0x174>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1c2d0:	7b20      	ldrb	r0, [r4, #12]
   1c2d2:	7ce3      	ldrb	r3, [r4, #19]
   1c2d4:	4318      	orrs	r0, r3
   1c2d6:	f010 0004 	ands.w	r0, r0, #4
   1c2da:	d00f      	beq.n	1c2fc <smp_pairing_req+0x130>
	method = gen_method_legacy[remote_io][get_io_capa()];
   1c2dc:	f7ff fc02 	bl	1bae4 <get_io_capa>
   1c2e0:	4b7d      	ldr	r3, [pc, #500]	; (1c4d8 <smp_pairing_req+0x30c>)
   1c2e2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1c2e6:	441d      	add	r5, r3
   1c2e8:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   1c2ea:	2804      	cmp	r0, #4
   1c2ec:	d106      	bne.n	1c2fc <smp_pairing_req+0x130>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1c2ee:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c2f2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1c2f4:	2b00      	cmp	r3, #0
   1c2f6:	bf0c      	ite	eq
   1c2f8:	2002      	moveq	r0, #2
   1c2fa:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   1c2fc:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1c2fe:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   1c302:	4620      	mov	r0, r4
   1c304:	f010 f876 	bl	2c3f4 <update_keys_check>
   1c308:	bb00      	cbnz	r0, 1c34c <smp_pairing_req+0x180>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1c30a:	2503      	movs	r5, #3
   1c30c:	e767      	b.n	1c1de <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1c30e:	7b20      	ldrb	r0, [r4, #12]
   1c310:	7ce2      	ldrb	r2, [r4, #19]
   1c312:	ea00 0302 	and.w	r3, r0, r2
   1c316:	071b      	lsls	r3, r3, #28
   1c318:	d504      	bpl.n	1c324 <smp_pairing_req+0x158>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1c31a:	7ca1      	ldrb	r1, [r4, #18]
   1c31c:	7ae3      	ldrb	r3, [r4, #11]
   1c31e:	430b      	orrs	r3, r1
   1c320:	07d9      	lsls	r1, r3, #31
   1c322:	d40f      	bmi.n	1c344 <smp_pairing_req+0x178>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1c324:	2d04      	cmp	r5, #4
   1c326:	d80f      	bhi.n	1c348 <smp_pairing_req+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1c328:	4310      	orrs	r0, r2
   1c32a:	f010 0004 	ands.w	r0, r0, #4
   1c32e:	d0e5      	beq.n	1c2fc <smp_pairing_req+0x130>
	return gen_method_sc[remote_io][get_io_capa()];
   1c330:	f7ff fbd8 	bl	1bae4 <get_io_capa>
   1c334:	4b69      	ldr	r3, [pc, #420]	; (1c4dc <smp_pairing_req+0x310>)
   1c336:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1c33a:	441d      	add	r5, r3
   1c33c:	5c28      	ldrb	r0, [r5, r0]
   1c33e:	e7dd      	b.n	1c2fc <smp_pairing_req+0x130>
		return LEGACY_OOB;
   1c340:	2006      	movs	r0, #6
   1c342:	e7db      	b.n	1c2fc <smp_pairing_req+0x130>
			return LE_SC_OOB;
   1c344:	2005      	movs	r0, #5
   1c346:	e7d9      	b.n	1c2fc <smp_pairing_req+0x130>
		return JUST_WORKS;
   1c348:	2000      	movs	r0, #0
   1c34a:	e7d7      	b.n	1c2fc <smp_pairing_req+0x130>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1c34c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c350:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1c352:	2b03      	cmp	r3, #3
   1c354:	d034      	beq.n	1c3c0 <smp_pairing_req+0x1f4>
   1c356:	d822      	bhi.n	1c39e <smp_pairing_req+0x1d2>
   1c358:	3b01      	subs	r3, #1
   1c35a:	2b01      	cmp	r3, #1
   1c35c:	f63f af5d 	bhi.w	1c21a <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c360:	2105      	movs	r1, #5
   1c362:	4630      	mov	r0, r6
   1c364:	f010 f83d 	bl	2c3e2 <atomic_test_bit>
   1c368:	2800      	cmp	r0, #0
   1c36a:	f040 80c5 	bne.w	1c4f8 <smp_pairing_req+0x32c>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c36e:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1c372:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1c376:	7a28      	ldrb	r0, [r5, #8]
   1c378:	f001 f880 	bl	1d47c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1c37c:	7a21      	ldrb	r1, [r4, #8]
   1c37e:	b318      	cbz	r0, 1c3c8 <smp_pairing_req+0x1fc>
   1c380:	7b43      	ldrb	r3, [r0, #13]
   1c382:	07db      	lsls	r3, r3, #31
   1c384:	d520      	bpl.n	1c3c8 <smp_pairing_req+0x1fc>
   1c386:	b9f9      	cbnz	r1, 1c3c8 <smp_pairing_req+0x1fc>
   1c388:	4b55      	ldr	r3, [pc, #340]	; (1c4e0 <smp_pairing_req+0x314>)
   1c38a:	4956      	ldr	r1, [pc, #344]	; (1c4e4 <smp_pairing_req+0x318>)
		BT_ERR("JustWorks failed, authenticated keys present");
   1c38c:	4856      	ldr	r0, [pc, #344]	; (1c4e8 <smp_pairing_req+0x31c>)
   1c38e:	1ac9      	subs	r1, r1, r3
   1c390:	08c9      	lsrs	r1, r1, #3
   1c392:	0189      	lsls	r1, r1, #6
   1c394:	f041 0101 	orr.w	r1, r1, #1
   1c398:	f00c fc09 	bl	28bae <log_0>
	if (ret) {
   1c39c:	e73d      	b.n	1c21a <smp_pairing_req+0x4e>
	switch (sec) {
   1c39e:	2b04      	cmp	r3, #4
   1c3a0:	f47f af3b 	bne.w	1c21a <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1c3a4:	7d23      	ldrb	r3, [r4, #20]
   1c3a6:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1c3a8:	4293      	cmp	r3, r2
   1c3aa:	bf28      	it	cs
   1c3ac:	4613      	movcs	r3, r2
   1c3ae:	2b10      	cmp	r3, #16
   1c3b0:	f47f af14 	bne.w	1c1dc <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c3b4:	2105      	movs	r1, #5
   1c3b6:	4630      	mov	r0, r6
   1c3b8:	f010 f813 	bl	2c3e2 <atomic_test_bit>
   1c3bc:	2800      	cmp	r0, #0
   1c3be:	d0a4      	beq.n	1c30a <smp_pairing_req+0x13e>
		if (smp->method == JUST_WORKS) {
   1c3c0:	7a23      	ldrb	r3, [r4, #8]
   1c3c2:	2b00      	cmp	r3, #0
   1c3c4:	d1cc      	bne.n	1c360 <smp_pairing_req+0x194>
   1c3c6:	e7a0      	b.n	1c30a <smp_pairing_req+0x13e>
	switch (smp->method) {
   1c3c8:	2906      	cmp	r1, #6
   1c3ca:	d869      	bhi.n	1c4a0 <smp_pairing_req+0x2d4>
   1c3cc:	e8df f001 	tbb	[pc, r1]
   1c3d0:	68335e1b 	.word	0x68335e1b
   1c3d4:	6868      	.short	0x6868
   1c3d6:	04          	.byte	0x04
   1c3d7:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   1c3d8:	4d44      	ldr	r5, [pc, #272]	; (1c4ec <smp_pairing_req+0x320>)
   1c3da:	682b      	ldr	r3, [r5, #0]
   1c3dc:	2b00      	cmp	r3, #0
   1c3de:	d06a      	beq.n	1c4b6 <smp_pairing_req+0x2ea>
   1c3e0:	68db      	ldr	r3, [r3, #12]
   1c3e2:	2b00      	cmp	r3, #0
   1c3e4:	d067      	beq.n	1c4b6 <smp_pairing_req+0x2ea>
			struct bt_conn_oob_info info = {
   1c3e6:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c3e8:	210a      	movs	r1, #10
   1c3ea:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   1c3ec:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c3f0:	f00f ff18 	bl	2c224 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1c3f4:	682b      	ldr	r3, [r5, #0]
   1c3f6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c3fa:	68db      	ldr	r3, [r3, #12]
   1c3fc:	a901      	add	r1, sp, #4
   1c3fe:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1c400:	7a23      	ldrb	r3, [r4, #8]
   1c402:	2b00      	cmp	r3, #0
   1c404:	d159      	bne.n	1c4ba <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1c406:	210f      	movs	r1, #15
   1c408:	4630      	mov	r0, r6
   1c40a:	f00f ffea 	bl	2c3e2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1c40e:	4605      	mov	r5, r0
   1c410:	2800      	cmp	r0, #0
   1c412:	d152      	bne.n	1c4ba <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1c414:	4f35      	ldr	r7, [pc, #212]	; (1c4ec <smp_pairing_req+0x320>)
   1c416:	683b      	ldr	r3, [r7, #0]
   1c418:	2b00      	cmp	r3, #0
   1c41a:	d04e      	beq.n	1c4ba <smp_pairing_req+0x2ee>
	    bt_auth && bt_auth->pairing_confirm) {
   1c41c:	695b      	ldr	r3, [r3, #20]
   1c41e:	2b00      	cmp	r3, #0
   1c420:	d04b      	beq.n	1c4ba <smp_pairing_req+0x2ee>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c422:	4630      	mov	r0, r6
   1c424:	210a      	movs	r1, #10
   1c426:	f00f fefd 	bl	2c224 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   1c42a:	683b      	ldr	r3, [r7, #0]
   1c42c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c430:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   1c432:	4798      	blx	r3
		return 0;
   1c434:	e6d3      	b.n	1c1de <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1c436:	2104      	movs	r1, #4
   1c438:	eb0d 0001 	add.w	r0, sp, r1
   1c43c:	f004 f9b0 	bl	207a0 <bt_rand>
   1c440:	2800      	cmp	r0, #0
   1c442:	f47f aeea 	bne.w	1c21a <smp_pairing_req+0x4e>
			passkey %= 1000000;
   1c446:	9901      	ldr	r1, [sp, #4]
   1c448:	4a29      	ldr	r2, [pc, #164]	; (1c4f0 <smp_pairing_req+0x324>)
		if (bt_auth && bt_auth->passkey_display) {
   1c44a:	4f28      	ldr	r7, [pc, #160]	; (1c4ec <smp_pairing_req+0x320>)
			passkey %= 1000000;
   1c44c:	fbb1 f3f2 	udiv	r3, r1, r2
   1c450:	fb02 1313 	mls	r3, r2, r3, r1
   1c454:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1c456:	683b      	ldr	r3, [r7, #0]
   1c458:	b153      	cbz	r3, 1c470 <smp_pairing_req+0x2a4>
   1c45a:	681b      	ldr	r3, [r3, #0]
   1c45c:	b143      	cbz	r3, 1c470 <smp_pairing_req+0x2a4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c45e:	210b      	movs	r1, #11
   1c460:	4630      	mov	r0, r6
   1c462:	f00f fedf 	bl	2c224 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1c466:	683b      	ldr	r3, [r7, #0]
   1c468:	9901      	ldr	r1, [sp, #4]
   1c46a:	681b      	ldr	r3, [r3, #0]
   1c46c:	4628      	mov	r0, r5
   1c46e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1c470:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1c472:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1c476:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1c47a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1c47c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1c480:	0a1b      	lsrs	r3, r3, #8
   1c482:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1c486:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1c48a:	e7b9      	b.n	1c400 <smp_pairing_req+0x234>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c48c:	4630      	mov	r0, r6
   1c48e:	210a      	movs	r1, #10
   1c490:	f00f fec8 	bl	2c224 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   1c494:	4b15      	ldr	r3, [pc, #84]	; (1c4ec <smp_pairing_req+0x320>)
   1c496:	681b      	ldr	r3, [r3, #0]
   1c498:	4628      	mov	r0, r5
   1c49a:	685b      	ldr	r3, [r3, #4]
   1c49c:	4798      	blx	r3
	if (ret) {
   1c49e:	e7af      	b.n	1c400 <smp_pairing_req+0x234>
   1c4a0:	4b0f      	ldr	r3, [pc, #60]	; (1c4e0 <smp_pairing_req+0x314>)
   1c4a2:	4a10      	ldr	r2, [pc, #64]	; (1c4e4 <smp_pairing_req+0x318>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c4a4:	4813      	ldr	r0, [pc, #76]	; (1c4f4 <smp_pairing_req+0x328>)
   1c4a6:	1ad2      	subs	r2, r2, r3
   1c4a8:	08d2      	lsrs	r2, r2, #3
   1c4aa:	0192      	lsls	r2, r2, #6
   1c4ac:	f042 0201 	orr.w	r2, r2, #1
   1c4b0:	f00c fb8a 	bl	28bc8 <log_1>
	if (ret) {
   1c4b4:	e6b1      	b.n	1c21a <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c4b6:	2502      	movs	r5, #2
   1c4b8:	e691      	b.n	1c1de <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1c4ba:	2103      	movs	r1, #3
   1c4bc:	4620      	mov	r0, r4
   1c4be:	f00f feb1 	bl	2c224 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1c4c2:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1c4c4:	4620      	mov	r0, r4
   1c4c6:	f00f fead 	bl	2c224 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1c4ca:	f00f ffec 	bl	2c4a6 <send_pairing_rsp>
   1c4ce:	4605      	mov	r5, r0
   1c4d0:	e685      	b.n	1c1de <smp_pairing_req+0x12>
   1c4d2:	bf00      	nop
   1c4d4:	200038a3 	.word	0x200038a3
   1c4d8:	000316ce 	.word	0x000316ce
   1c4dc:	000316e7 	.word	0x000316e7
   1c4e0:	0002d948 	.word	0x0002d948
   1c4e4:	0002d9b8 	.word	0x0002d9b8
   1c4e8:	00031485 	.word	0x00031485
   1c4ec:	200029d8 	.word	0x200029d8
   1c4f0:	000f4240 	.word	0x000f4240
   1c4f4:	000313d1 	.word	0x000313d1
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1c4f8:	7a25      	ldrb	r5, [r4, #8]
   1c4fa:	b9a5      	cbnz	r5, 1c526 <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1c4fc:	210f      	movs	r1, #15
   1c4fe:	4630      	mov	r0, r6
   1c500:	f00f ff6f 	bl	2c3e2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1c504:	b978      	cbnz	r0, 1c526 <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1c506:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1c52c <smp_pairing_req+0x360>
   1c50a:	f8d8 3000 	ldr.w	r3, [r8]
   1c50e:	b153      	cbz	r3, 1c526 <smp_pairing_req+0x35a>
	    bt_auth && bt_auth->pairing_confirm) {
   1c510:	695b      	ldr	r3, [r3, #20]
   1c512:	b143      	cbz	r3, 1c526 <smp_pairing_req+0x35a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c514:	4630      	mov	r0, r6
   1c516:	210a      	movs	r1, #10
   1c518:	f00f fe84 	bl	2c224 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   1c51c:	f8d8 3000 	ldr.w	r3, [r8]
   1c520:	4638      	mov	r0, r7
   1c522:	695b      	ldr	r3, [r3, #20]
   1c524:	e785      	b.n	1c432 <smp_pairing_req+0x266>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1c526:	210c      	movs	r1, #12
   1c528:	e7cc      	b.n	1c4c4 <smp_pairing_req+0x2f8>
   1c52a:	bf00      	nop
   1c52c:	200029d8 	.word	0x200029d8

0001c530 <smp_ident_info>:
{
   1c530:	b570      	push	{r4, r5, r6, lr}
   1c532:	460b      	mov	r3, r1
   1c534:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c536:	210d      	movs	r1, #13
   1c538:	3004      	adds	r0, #4
   1c53a:	f00f ff52 	bl	2c3e2 <atomic_test_bit>
   1c53e:	b310      	cbz	r0, 1c586 <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1c540:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1c542:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1c546:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1c54a:	7a19      	ldrb	r1, [r3, #8]
   1c54c:	462a      	mov	r2, r5
   1c54e:	2002      	movs	r0, #2
   1c550:	f010 fa10 	bl	2c974 <bt_keys_get_type>
		if (!keys) {
   1c554:	b990      	cbnz	r0, 1c57c <smp_ident_info+0x4c>
   1c556:	4a0f      	ldr	r2, [pc, #60]	; (1c594 <smp_ident_info+0x64>)
   1c558:	4c0f      	ldr	r4, [pc, #60]	; (1c598 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1c55a:	4628      	mov	r0, r5
   1c55c:	1aa4      	subs	r4, r4, r2
   1c55e:	f7f8 fdf7 	bl	15150 <bt_addr_le_str_real>
   1c562:	f7f5 ff1d 	bl	123a0 <z_log_strdup>
   1c566:	08e4      	lsrs	r4, r4, #3
   1c568:	01a4      	lsls	r4, r4, #6
   1c56a:	f044 0401 	orr.w	r4, r4, #1
   1c56e:	4601      	mov	r1, r0
   1c570:	4622      	mov	r2, r4
   1c572:	480a      	ldr	r0, [pc, #40]	; (1c59c <smp_ident_info+0x6c>)
   1c574:	f00c fb28 	bl	28bc8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1c578:	2008      	movs	r0, #8
}
   1c57a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1c57c:	2210      	movs	r2, #16
   1c57e:	4631      	mov	r1, r6
   1c580:	302a      	adds	r0, #42	; 0x2a
   1c582:	f00e fa8a 	bl	2aa9a <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1c586:	4620      	mov	r0, r4
   1c588:	2109      	movs	r1, #9
   1c58a:	f00f fe4b 	bl	2c224 <atomic_set_bit>
	return 0;
   1c58e:	2000      	movs	r0, #0
   1c590:	e7f3      	b.n	1c57a <smp_ident_info+0x4a>
   1c592:	bf00      	nop
   1c594:	0002d948 	.word	0x0002d948
   1c598:	0002d9b8 	.word	0x0002d9b8
   1c59c:	000314b2 	.word	0x000314b2

0001c5a0 <smp_encrypt_info>:
{
   1c5a0:	b570      	push	{r4, r5, r6, lr}
   1c5a2:	460b      	mov	r3, r1
   1c5a4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1c5a6:	210d      	movs	r1, #13
   1c5a8:	3004      	adds	r0, #4
   1c5aa:	f00f ff1a 	bl	2c3e2 <atomic_test_bit>
   1c5ae:	b310      	cbz	r0, 1c5f6 <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1c5b0:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1c5b2:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1c5b6:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1c5ba:	7a19      	ldrb	r1, [r3, #8]
   1c5bc:	462a      	mov	r2, r5
   1c5be:	2004      	movs	r0, #4
   1c5c0:	f010 f9d8 	bl	2c974 <bt_keys_get_type>
		if (!keys) {
   1c5c4:	b990      	cbnz	r0, 1c5ec <smp_encrypt_info+0x4c>
   1c5c6:	4a0f      	ldr	r2, [pc, #60]	; (1c604 <smp_encrypt_info+0x64>)
   1c5c8:	4c0f      	ldr	r4, [pc, #60]	; (1c608 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   1c5ca:	4628      	mov	r0, r5
   1c5cc:	1aa4      	subs	r4, r4, r2
   1c5ce:	f7f8 fdbf 	bl	15150 <bt_addr_le_str_real>
   1c5d2:	f7f5 fee5 	bl	123a0 <z_log_strdup>
   1c5d6:	08e4      	lsrs	r4, r4, #3
   1c5d8:	01a4      	lsls	r4, r4, #6
   1c5da:	f044 0401 	orr.w	r4, r4, #1
   1c5de:	4601      	mov	r1, r0
   1c5e0:	4622      	mov	r2, r4
   1c5e2:	480a      	ldr	r0, [pc, #40]	; (1c60c <smp_encrypt_info+0x6c>)
   1c5e4:	f00c faf0 	bl	28bc8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1c5e8:	2008      	movs	r0, #8
}
   1c5ea:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1c5ec:	2210      	movs	r2, #16
   1c5ee:	4631      	mov	r1, r6
   1c5f0:	301a      	adds	r0, #26
   1c5f2:	f00e fa52 	bl	2aa9a <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1c5f6:	4620      	mov	r0, r4
   1c5f8:	2107      	movs	r1, #7
   1c5fa:	f00f fe13 	bl	2c224 <atomic_set_bit>
	return 0;
   1c5fe:	2000      	movs	r0, #0
   1c600:	e7f3      	b.n	1c5ea <smp_encrypt_info+0x4a>
   1c602:	bf00      	nop
   1c604:	0002d948 	.word	0x0002d948
   1c608:	0002d9b8 	.word	0x0002d9b8
   1c60c:	000314b2 	.word	0x000314b2

0001c610 <bt_smp_connected>:
{
   1c610:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1c612:	4905      	ldr	r1, [pc, #20]	; (1c628 <bt_smp_connected+0x18>)
   1c614:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   1c618:	30f0      	adds	r0, #240	; 0xf0
   1c61a:	f006 fe35 	bl	23288 <k_work_init_delayable>
	smp_reset(smp);
   1c61e:	4620      	mov	r0, r4
}
   1c620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1c624:	f00f bf99 	b.w	2c55a <smp_reset>
   1c628:	0001d17d 	.word	0x0001d17d

0001c62c <smp_pairing_confirm>:
{
   1c62c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1c62e:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c630:	1d05      	adds	r5, r0, #4
{
   1c632:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1c634:	210b      	movs	r1, #11
   1c636:	4628      	mov	r0, r5
   1c638:	f00f fe08 	bl	2c24c <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1c63c:	4631      	mov	r1, r6
   1c63e:	2210      	movs	r2, #16
   1c640:	f104 0017 	add.w	r0, r4, #23
   1c644:	f00e fa29 	bl	2aa9a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c648:	2105      	movs	r1, #5
   1c64a:	4628      	mov	r0, r5
   1c64c:	f00f fec9 	bl	2c3e2 <atomic_test_bit>
   1c650:	b920      	cbnz	r0, 1c65c <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1c652:	4620      	mov	r0, r4
}
   1c654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1c658:	f00f bffd 	b.w	2c656 <legacy_pairing_confirm>
	switch (smp->method) {
   1c65c:	7a21      	ldrb	r1, [r4, #8]
   1c65e:	2901      	cmp	r1, #1
   1c660:	d009      	beq.n	1c676 <smp_pairing_confirm+0x4a>
   1c662:	2902      	cmp	r1, #2
   1c664:	d113      	bne.n	1c68e <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1c666:	4620      	mov	r0, r4
   1c668:	2104      	movs	r1, #4
   1c66a:	f00f fddb 	bl	2c224 <atomic_set_bit>
}
   1c66e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1c672:	f7ff bc55 	b.w	1bf20 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1c676:	210a      	movs	r1, #10
   1c678:	4628      	mov	r0, r5
   1c67a:	f00f feb2 	bl	2c3e2 <atomic_test_bit>
   1c67e:	2800      	cmp	r0, #0
   1c680:	d0f1      	beq.n	1c666 <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1c682:	4628      	mov	r0, r5
   1c684:	2100      	movs	r1, #0
   1c686:	f00f fdcd 	bl	2c224 <atomic_set_bit>
			return 0;
   1c68a:	2000      	movs	r0, #0
}
   1c68c:	bd70      	pop	{r4, r5, r6, pc}
   1c68e:	4b06      	ldr	r3, [pc, #24]	; (1c6a8 <smp_pairing_confirm+0x7c>)
   1c690:	4a06      	ldr	r2, [pc, #24]	; (1c6ac <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c692:	4807      	ldr	r0, [pc, #28]	; (1c6b0 <smp_pairing_confirm+0x84>)
   1c694:	1ad2      	subs	r2, r2, r3
   1c696:	08d2      	lsrs	r2, r2, #3
   1c698:	0192      	lsls	r2, r2, #6
   1c69a:	f042 0201 	orr.w	r2, r2, #1
   1c69e:	f00c fa93 	bl	28bc8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1c6a2:	2008      	movs	r0, #8
   1c6a4:	e7f2      	b.n	1c68c <smp_pairing_confirm+0x60>
   1c6a6:	bf00      	nop
   1c6a8:	0002d948 	.word	0x0002d948
   1c6ac:	0002d9b8 	.word	0x0002d9b8
   1c6b0:	000313d1 	.word	0x000313d1

0001c6b4 <smp_pairing_random>:
{
   1c6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c6b8:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c6ba:	f100 0737 	add.w	r7, r0, #55	; 0x37
   1c6be:	6889      	ldr	r1, [r1, #8]
{
   1c6c0:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c6c2:	2210      	movs	r2, #16
   1c6c4:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c6c6:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1c6c8:	f00e f9e7 	bl	2aa9a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1c6cc:	2105      	movs	r1, #5
   1c6ce:	4630      	mov	r0, r6
   1c6d0:	f00f fe87 	bl	2c3e2 <atomic_test_bit>
   1c6d4:	2800      	cmp	r0, #0
   1c6d6:	d147      	bne.n	1c768 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
   1c6d8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c6dc:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c6e0:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c6e4:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1c6e6:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1c6e8:	9201      	str	r2, [sp, #4]
   1c6ea:	9300      	str	r3, [sp, #0]
   1c6ec:	9502      	str	r5, [sp, #8]
   1c6ee:	f104 0310 	add.w	r3, r4, #16
   1c6f2:	f104 0209 	add.w	r2, r4, #9
   1c6f6:	4639      	mov	r1, r7
   1c6f8:	4640      	mov	r0, r8
   1c6fa:	f00f ff51 	bl	2c5a0 <smp_c1>
	if (err) {
   1c6fe:	bb18      	cbnz	r0, 1c748 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1c700:	2210      	movs	r2, #16
   1c702:	4629      	mov	r1, r5
   1c704:	f104 0017 	add.w	r0, r4, #23
   1c708:	f00e f9a0 	bl	2aa4c <memcmp>
   1c70c:	2800      	cmp	r0, #0
   1c70e:	f040 8095 	bne.w	1c83c <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
   1c712:	2208      	movs	r2, #8
   1c714:	4639      	mov	r1, r7
   1c716:	4628      	mov	r0, r5
   1c718:	f00e f9bf 	bl	2aa9a <memcpy>
	memcpy(out + 8, r1, 8);
   1c71c:	2208      	movs	r2, #8
   1c71e:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c722:	a80c      	add	r0, sp, #48	; 0x30
   1c724:	f00e f9b9 	bl	2aa9a <memcpy>
	return bt_encrypt_le(k, out, out);
   1c728:	462a      	mov	r2, r5
   1c72a:	4629      	mov	r1, r5
   1c72c:	4640      	mov	r0, r8
   1c72e:	f010 fc7c 	bl	2d02a <bt_encrypt_le>
		if (err) {
   1c732:	b158      	cbz	r0, 1c74c <smp_pairing_random+0x98>
   1c734:	4973      	ldr	r1, [pc, #460]	; (1c904 <smp_pairing_random+0x250>)
   1c736:	4b74      	ldr	r3, [pc, #464]	; (1c908 <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
   1c738:	4874      	ldr	r0, [pc, #464]	; (1c90c <smp_pairing_random+0x258>)
   1c73a:	1ac9      	subs	r1, r1, r3
   1c73c:	08c9      	lsrs	r1, r1, #3
   1c73e:	0189      	lsls	r1, r1, #6
   1c740:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   1c744:	f00c fa33 	bl	28bae <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   1c748:	2508      	movs	r5, #8
   1c74a:	e078      	b.n	1c83e <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1c74c:	4629      	mov	r1, r5
   1c74e:	2210      	movs	r2, #16
   1c750:	4640      	mov	r0, r8
   1c752:	f00e f9a2 	bl	2aa9a <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1c756:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c758:	4630      	mov	r0, r6
   1c75a:	f00f fd63 	bl	2c224 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1c75e:	4620      	mov	r0, r4
   1c760:	f00f fe88 	bl	2c474 <smp_send_pairing_random>
   1c764:	4605      	mov	r5, r0
   1c766:	e06a      	b.n	1c83e <smp_pairing_random+0x18a>
	switch (smp->method) {
   1c768:	7a21      	ldrb	r1, [r4, #8]
   1c76a:	2905      	cmp	r1, #5
   1c76c:	f200 80a9 	bhi.w	1c8c2 <smp_pairing_random+0x20e>
   1c770:	e8df f001 	tbb	[pc, r1]
   1c774:	0341413b 	.word	0x0341413b
   1c778:	8ba7      	.short	0x8ba7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   1c77a:	4b65      	ldr	r3, [pc, #404]	; (1c910 <smp_pairing_random+0x25c>)
   1c77c:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   1c77e:	2220      	movs	r2, #32
   1c780:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1c784:	a80a      	add	r0, sp, #40	; 0x28
   1c786:	f7ff f9d3 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1c78a:	2220      	movs	r2, #32
   1c78c:	4629      	mov	r1, r5
   1c78e:	a812      	add	r0, sp, #72	; 0x48
   1c790:	f7ff f9ce 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1c794:	2210      	movs	r2, #16
   1c796:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1c79a:	a81a      	add	r0, sp, #104	; 0x68
   1c79c:	f7ff f9c8 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1c7a0:	2210      	movs	r2, #16
   1c7a2:	4639      	mov	r1, r7
   1c7a4:	a806      	add	r0, sp, #24
   1c7a6:	f7ff f9c3 	bl	1bb30 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   1c7aa:	ab06      	add	r3, sp, #24
   1c7ac:	2250      	movs	r2, #80	; 0x50
   1c7ae:	a90a      	add	r1, sp, #40	; 0x28
   1c7b0:	4618      	mov	r0, r3
   1c7b2:	f00f fd5a 	bl	2c26a <bt_smp_aes_cmac>
	if (err) {
   1c7b6:	2800      	cmp	r0, #0
   1c7b8:	d1c6      	bne.n	1c748 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
   1c7ba:	2204      	movs	r2, #4
   1c7bc:	a909      	add	r1, sp, #36	; 0x24
   1c7be:	a805      	add	r0, sp, #20
   1c7c0:	f00e f96b 	bl	2aa9a <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c7c4:	9b05      	ldr	r3, [sp, #20]
   1c7c6:	4953      	ldr	r1, [pc, #332]	; (1c914 <smp_pairing_random+0x260>)
   1c7c8:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c7ca:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c7cc:	fbb3 f2f1 	udiv	r2, r3, r1
   1c7d0:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c7d4:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1c7d6:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1c7d8:	f00f fd24 	bl	2c224 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1c7dc:	4b4e      	ldr	r3, [pc, #312]	; (1c918 <smp_pairing_random+0x264>)
   1c7de:	9905      	ldr	r1, [sp, #20]
   1c7e0:	681b      	ldr	r3, [r3, #0]
   1c7e2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c7e6:	689b      	ldr	r3, [r3, #8]
   1c7e8:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c7ea:	210d      	movs	r1, #13
   1c7ec:	4620      	mov	r0, r4
   1c7ee:	f00f fd19 	bl	2c224 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c7f2:	2110      	movs	r1, #16
   1c7f4:	e7b0      	b.n	1c758 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c7f6:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1c7fa:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c7fe:	4944      	ldr	r1, [pc, #272]	; (1c910 <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c800:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c802:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1c804:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1c808:	9500      	str	r5, [sp, #0]
   1c80a:	6809      	ldr	r1, [r1, #0]
   1c80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c810:	463a      	mov	r2, r7
   1c812:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1c816:	f00f fdbd 	bl	2c394 <smp_f4>
   1c81a:	b140      	cbz	r0, 1c82e <smp_pairing_random+0x17a>
   1c81c:	4939      	ldr	r1, [pc, #228]	; (1c904 <smp_pairing_random+0x250>)
   1c81e:	4b3a      	ldr	r3, [pc, #232]	; (1c908 <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
   1c820:	483e      	ldr	r0, [pc, #248]	; (1c91c <smp_pairing_random+0x268>)
   1c822:	1ac9      	subs	r1, r1, r3
   1c824:	08c9      	lsrs	r1, r1, #3
   1c826:	0189      	lsls	r1, r1, #6
   1c828:	f041 0101 	orr.w	r1, r1, #1
   1c82c:	e78a      	b.n	1c744 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1c82e:	2210      	movs	r2, #16
   1c830:	4629      	mov	r1, r5
   1c832:	f104 0017 	add.w	r0, r4, #23
   1c836:	f00e f909 	bl	2aa4c <memcmp>
   1c83a:	b120      	cbz	r0, 1c846 <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1c83c:	2504      	movs	r5, #4
}
   1c83e:	4628      	mov	r0, r5
   1c840:	b01e      	add	sp, #120	; 0x78
   1c842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   1c846:	2103      	movs	r1, #3
   1c848:	4620      	mov	r0, r4
   1c84a:	f00f fceb 	bl	2c224 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1c84e:	f00f fe11 	bl	2c474 <smp_send_pairing_random>
		if (err) {
   1c852:	4605      	mov	r5, r0
   1c854:	2800      	cmp	r0, #0
   1c856:	d1f2      	bne.n	1c83e <smp_pairing_random+0x18a>
		smp->passkey_round++;
   1c858:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1c85c:	3301      	adds	r3, #1
   1c85e:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1c860:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1c862:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1c866:	d108      	bne.n	1c87a <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1c868:	4620      	mov	r0, r4
   1c86a:	210d      	movs	r1, #13
   1c86c:	f00f fcda 	bl	2c224 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1c870:	2110      	movs	r1, #16
   1c872:	4630      	mov	r0, r6
   1c874:	f00f fcd6 	bl	2c224 <atomic_set_bit>
			return 0;
   1c878:	e7e1      	b.n	1c83e <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
   1c87a:	2110      	movs	r1, #16
   1c87c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c880:	f003 ff8e 	bl	207a0 <bt_rand>
   1c884:	2800      	cmp	r0, #0
   1c886:	d0da      	beq.n	1c83e <smp_pairing_random+0x18a>
   1c888:	e75e      	b.n	1c748 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
   1c88a:	2110      	movs	r1, #16
   1c88c:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1c890:	f003 ff86 	bl	207a0 <bt_rand>
   1c894:	2800      	cmp	r0, #0
   1c896:	f47f af57 	bne.w	1c748 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
   1c89a:	4f1f      	ldr	r7, [pc, #124]	; (1c918 <smp_pairing_random+0x264>)
   1c89c:	683b      	ldr	r3, [r7, #0]
   1c89e:	b1db      	cbz	r3, 1c8d8 <smp_pairing_random+0x224>
   1c8a0:	68db      	ldr	r3, [r3, #12]
   1c8a2:	b1cb      	cbz	r3, 1c8d8 <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   1c8a4:	4b1e      	ldr	r3, [pc, #120]	; (1c920 <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c8a6:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1c8a8:	881b      	ldrh	r3, [r3, #0]
   1c8aa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c8ae:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c8b0:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1c8b2:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1c8b6:	d411      	bmi.n	1c8dc <smp_pairing_random+0x228>
				     BT_CONN_OOB_BOTH_PEERS :
   1c8b8:	2b00      	cmp	r3, #0
   1c8ba:	bf0c      	ite	eq
   1c8bc:	2003      	moveq	r0, #3
   1c8be:	2001      	movne	r0, #1
   1c8c0:	e00f      	b.n	1c8e2 <smp_pairing_random+0x22e>
   1c8c2:	4b11      	ldr	r3, [pc, #68]	; (1c908 <smp_pairing_random+0x254>)
   1c8c4:	4a0f      	ldr	r2, [pc, #60]	; (1c904 <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   1c8c6:	4817      	ldr	r0, [pc, #92]	; (1c924 <smp_pairing_random+0x270>)
   1c8c8:	1ad2      	subs	r2, r2, r3
   1c8ca:	08d2      	lsrs	r2, r2, #3
   1c8cc:	0192      	lsls	r2, r2, #6
   1c8ce:	f042 0201 	orr.w	r2, r2, #1
   1c8d2:	f00c f979 	bl	28bc8 <log_1>
   1c8d6:	e737      	b.n	1c748 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1c8d8:	2502      	movs	r5, #2
   1c8da:	e7b0      	b.n	1c83e <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
   1c8dc:	2b00      	cmp	r3, #0
   1c8de:	bf18      	it	ne
   1c8e0:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   1c8e2:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   1c8e4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   1c8e8:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1c8ec:	4630      	mov	r0, r6
   1c8ee:	210c      	movs	r1, #12
   1c8f0:	f00f fc98 	bl	2c224 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1c8f4:	683b      	ldr	r3, [r7, #0]
   1c8f6:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1c8fa:	68db      	ldr	r3, [r3, #12]
   1c8fc:	a90a      	add	r1, sp, #40	; 0x28
   1c8fe:	4798      	blx	r3
			return 0;
   1c900:	e79d      	b.n	1c83e <smp_pairing_random+0x18a>
   1c902:	bf00      	nop
   1c904:	0002d9b8 	.word	0x0002d9b8
   1c908:	0002d948 	.word	0x0002d948
   1c90c:	000314cc 	.word	0x000314cc
   1c910:	20002a74 	.word	0x20002a74
   1c914:	000f4240 	.word	0x000f4240
   1c918:	200029d8 	.word	0x200029d8
   1c91c:	000314e1 	.word	0x000314e1
   1c920:	0002db37 	.word	0x0002db37
   1c924:	000313d1 	.word	0x000313d1

0001c928 <bt_smp_start_security>:
{
   1c928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1c92c:	78c4      	ldrb	r4, [r0, #3]
   1c92e:	2c01      	cmp	r4, #1
{
   1c930:	4605      	mov	r5, r0
	switch (conn->role) {
   1c932:	d005      	beq.n	1c940 <bt_smp_start_security+0x18>
		return -EINVAL;
   1c934:	f06f 0415 	mvn.w	r4, #21
}
   1c938:	4620      	mov	r0, r4
   1c93a:	b003      	add	sp, #12
   1c93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1c940:	f7ff f968 	bl	1bc14 <smp_chan_get>
	if (!smp) {
   1c944:	4606      	mov	r6, r0
   1c946:	2800      	cmp	r0, #0
   1c948:	f000 80a5 	beq.w	1ca96 <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1c94c:	1d07      	adds	r7, r0, #4
   1c94e:	2104      	movs	r1, #4
   1c950:	4638      	mov	r0, r7
   1c952:	f00f fd46 	bl	2c3e2 <atomic_test_bit>
   1c956:	2800      	cmp	r0, #0
   1c958:	f040 80a0 	bne.w	1ca9c <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1c95c:	2103      	movs	r1, #3
   1c95e:	4638      	mov	r0, r7
   1c960:	f00f fd3f 	bl	2c3e2 <atomic_test_bit>
   1c964:	b110      	cbz	r0, 1c96c <bt_smp_start_security+0x44>
		return -EBUSY;
   1c966:	f06f 040f 	mvn.w	r4, #15
   1c96a:	e7e5      	b.n	1c938 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1c96c:	4621      	mov	r1, r4
   1c96e:	4638      	mov	r0, r7
   1c970:	f00f fd37 	bl	2c3e2 <atomic_test_bit>
   1c974:	2800      	cmp	r0, #0
   1c976:	d1f6      	bne.n	1c966 <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1c978:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   1c97a:	2b03      	cmp	r3, #3
   1c97c:	d03d      	beq.n	1c9fa <bt_smp_start_security+0xd2>
   1c97e:	d82c      	bhi.n	1c9da <bt_smp_start_security+0xb2>
   1c980:	3b01      	subs	r3, #1
   1c982:	2b01      	cmp	r3, #1
   1c984:	d947      	bls.n	1ca16 <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1c986:	210b      	movs	r1, #11
   1c988:	1d28      	adds	r0, r5, #4
   1c98a:	f00f fd2a 	bl	2c3e2 <atomic_test_bit>
   1c98e:	2800      	cmp	r0, #0
   1c990:	d1d0      	bne.n	1c934 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1c992:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c996:	b983      	cbnz	r3, 1c9ba <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   1c998:	f105 0490 	add.w	r4, r5, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1c99c:	7a29      	ldrb	r1, [r5, #8]
   1c99e:	4622      	mov	r2, r4
   1c9a0:	2020      	movs	r0, #32
   1c9a2:	f000 fd1b 	bl	1d3dc <bt_keys_find>
   1c9a6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1c9aa:	b930      	cbnz	r0, 1c9ba <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1c9ac:	7a29      	ldrb	r1, [r5, #8]
   1c9ae:	4622      	mov	r2, r4
   1c9b0:	2004      	movs	r0, #4
   1c9b2:	f000 fd13 	bl	1d3dc <bt_keys_find>
   1c9b6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
	if (!conn->le.keys ||
   1c9ba:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1c9be:	2b00      	cmp	r3, #0
   1c9c0:	d0b8      	beq.n	1c934 <bt_smp_start_security+0xc>
   1c9c2:	89da      	ldrh	r2, [r3, #14]
   1c9c4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1c9c8:	2a00      	cmp	r2, #0
   1c9ca:	d0b3      	beq.n	1c934 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   1c9cc:	7aaa      	ldrb	r2, [r5, #10]
   1c9ce:	2a02      	cmp	r2, #2
   1c9d0:	d921      	bls.n	1ca16 <bt_smp_start_security+0xee>
   1c9d2:	7b5b      	ldrb	r3, [r3, #13]
   1c9d4:	07db      	lsls	r3, r3, #31
   1c9d6:	d5ad      	bpl.n	1c934 <bt_smp_start_security+0xc>
   1c9d8:	e01d      	b.n	1ca16 <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
   1c9da:	2b04      	cmp	r3, #4
   1c9dc:	d1d3      	bne.n	1c986 <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c9de:	f7ff f881 	bl	1bae4 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c9e2:	2803      	cmp	r0, #3
   1c9e4:	d104      	bne.n	1c9f0 <bt_smp_start_security+0xc8>
   1c9e6:	4b2f      	ldr	r3, [pc, #188]	; (1caa4 <bt_smp_start_security+0x17c>)
   1c9e8:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c9ea:	b1fb      	cbz	r3, 1ca2c <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1c9ec:	68dc      	ldr	r4, [r3, #12]
   1c9ee:	b10c      	cbz	r4, 1c9f4 <bt_smp_start_security+0xcc>
   1c9f0:	4b2d      	ldr	r3, [pc, #180]	; (1caa8 <bt_smp_start_security+0x180>)
   1c9f2:	781c      	ldrb	r4, [r3, #0]
   1c9f4:	f004 0401 	and.w	r4, r4, #1
   1c9f8:	e00b      	b.n	1ca12 <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1c9fa:	f7ff f873 	bl	1bae4 <get_io_capa>
   1c9fe:	2803      	cmp	r0, #3
   1ca00:	d107      	bne.n	1ca12 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   1ca02:	4b28      	ldr	r3, [pc, #160]	; (1caa4 <bt_smp_start_security+0x17c>)
   1ca04:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1ca06:	2c00      	cmp	r4, #0
   1ca08:	d0bd      	beq.n	1c986 <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
   1ca0a:	68e4      	ldr	r4, [r4, #12]
   1ca0c:	3c00      	subs	r4, #0
   1ca0e:	bf18      	it	ne
   1ca10:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1ca12:	2c00      	cmp	r4, #0
   1ca14:	d0b7      	beq.n	1c986 <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   1ca16:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1ca1a:	b14b      	cbz	r3, 1ca30 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
   1ca1c:	4630      	mov	r0, r6
   1ca1e:	f7ff f939 	bl	1bc94 <smp_init>
   1ca22:	4604      	mov	r4, r0
   1ca24:	b180      	cbz	r0, 1ca48 <bt_smp_start_security+0x120>
		return -ENOBUFS;
   1ca26:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1ca2a:	e785      	b.n	1c938 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   1ca2c:	2400      	movs	r4, #0
   1ca2e:	e7e1      	b.n	1c9f4 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1ca30:	7a28      	ldrb	r0, [r5, #8]
   1ca32:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1ca36:	f000 fc91 	bl	1d35c <bt_keys_get_addr>
   1ca3a:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1ca3e:	2800      	cmp	r0, #0
   1ca40:	d1ec      	bne.n	1ca1c <bt_smp_start_security+0xf4>
			return -ENOMEM;
   1ca42:	f06f 040b 	mvn.w	r4, #11
   1ca46:	e777      	b.n	1c938 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1ca48:	210b      	movs	r1, #11
   1ca4a:	4630      	mov	r0, r6
   1ca4c:	f00f fcf3 	bl	2c436 <smp_create_pdu.isra.0>
	if (!req_buf) {
   1ca50:	4680      	mov	r8, r0
   1ca52:	2800      	cmp	r0, #0
   1ca54:	d0e7      	beq.n	1ca26 <bt_smp_start_security+0xfe>
   1ca56:	2101      	movs	r1, #1
   1ca58:	3008      	adds	r0, #8
   1ca5a:	f001 f959 	bl	1dd10 <net_buf_simple_add>
   1ca5e:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   1ca60:	2009      	movs	r0, #9
   1ca62:	f7ff f8b9 	bl	1bbd8 <get_auth.isra.0>
   1ca66:	4623      	mov	r3, r4
   1ca68:	f889 0000 	strb.w	r0, [r9]
   1ca6c:	4642      	mov	r2, r8
   1ca6e:	9400      	str	r4, [sp, #0]
   1ca70:	2106      	movs	r1, #6
   1ca72:	4628      	mov	r0, r5
   1ca74:	f00e fd70 	bl	2b558 <bt_l2cap_send_cb>
	if (err) {
   1ca78:	4604      	mov	r4, r0
   1ca7a:	b118      	cbz	r0, 1ca84 <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
   1ca7c:	4640      	mov	r0, r8
   1ca7e:	f001 f817 	bl	1dab0 <net_buf_unref>
		return err;
   1ca82:	e759      	b.n	1c938 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1ca84:	4638      	mov	r0, r7
   1ca86:	210f      	movs	r1, #15
   1ca88:	f00f fbcc 	bl	2c224 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1ca8c:	2101      	movs	r1, #1
   1ca8e:	4630      	mov	r0, r6
   1ca90:	f00f fbc8 	bl	2c224 <atomic_set_bit>
	return 0;
   1ca94:	e750      	b.n	1c938 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1ca96:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1ca9a:	e74d      	b.n	1c938 <bt_smp_start_security+0x10>
		return -EIO;
   1ca9c:	f06f 0404 	mvn.w	r4, #4
   1caa0:	e74a      	b.n	1c938 <bt_smp_start_security+0x10>
   1caa2:	bf00      	nop
   1caa4:	200029d8 	.word	0x200029d8
   1caa8:	200038a4 	.word	0x200038a4

0001caac <smp_pairing_complete>:
{
   1caac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1caae:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   1cab2:	4605      	mov	r5, r0
   1cab4:	1d07      	adds	r7, r0, #4
	if (!status) {
   1cab6:	b9e9      	cbnz	r1, 1caf4 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1cab8:	210d      	movs	r1, #13
   1caba:	4638      	mov	r0, r7
   1cabc:	f00f fc91 	bl	2c3e2 <atomic_test_bit>
		if (bond_flag) {
   1cac0:	4606      	mov	r6, r0
   1cac2:	b118      	cbz	r0, 1cacc <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1cac4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cac8:	f000 fdbc 	bl	1d644 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   1cacc:	4b24      	ldr	r3, [pc, #144]	; (1cb60 <smp_pairing_complete+0xb4>)
   1cace:	681b      	ldr	r3, [r3, #0]
   1cad0:	b123      	cbz	r3, 1cadc <smp_pairing_complete+0x30>
   1cad2:	699b      	ldr	r3, [r3, #24]
		    bt_auth && bt_auth->pairing_failed) {
   1cad4:	b113      	cbz	r3, 1cadc <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   1cad6:	4631      	mov	r1, r6
   1cad8:	4620      	mov	r0, r4
   1cada:	4798      	blx	r3
	smp_reset(smp);
   1cadc:	4628      	mov	r0, r5
   1cade:	f00f fd3c 	bl	2c55a <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1cae2:	7a62      	ldrb	r2, [r4, #9]
   1cae4:	7aa3      	ldrb	r3, [r4, #10]
   1cae6:	429a      	cmp	r2, r3
   1cae8:	d039      	beq.n	1cb5e <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   1caea:	4620      	mov	r0, r4
}
   1caec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1caf0:	f7ff bf1a 	b.w	1c928 <bt_smp_start_security>
	switch (smp_err) {
   1caf4:	3901      	subs	r1, #1
   1caf6:	b2c9      	uxtb	r1, r1
   1caf8:	290e      	cmp	r1, #14
   1cafa:	bf9c      	itt	ls
   1cafc:	4b19      	ldrls	r3, [pc, #100]	; (1cb64 <smp_pairing_complete+0xb8>)
   1cafe:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1cb00:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
	if (!status) {
   1cb04:	bf88      	it	hi
   1cb06:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   1cb08:	b143      	cbz	r3, 1cb1c <smp_pairing_complete+0x70>
   1cb0a:	7b1b      	ldrb	r3, [r3, #12]
   1cb0c:	bb03      	cbnz	r3, 1cb50 <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   1cb0e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1cb12:	f000 fcc3 	bl	1d49c <bt_keys_clear>
			conn->le.keys = NULL;
   1cb16:	2300      	movs	r3, #0
   1cb18:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1cb1c:	2102      	movs	r1, #2
   1cb1e:	4638      	mov	r0, r7
   1cb20:	f00f fc5f 	bl	2c3e2 <atomic_test_bit>
   1cb24:	b940      	cbnz	r0, 1cb38 <smp_pairing_complete+0x8c>
	switch (err) {
   1cb26:	2e07      	cmp	r6, #7
   1cb28:	bf96      	itet	ls
   1cb2a:	4b0f      	ldrls	r3, [pc, #60]	; (1cb68 <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1cb2c:	211f      	movhi	r1, #31
   1cb2e:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   1cb30:	4632      	mov	r2, r6
   1cb32:	4620      	mov	r0, r4
   1cb34:	f7fb fe98 	bl	18868 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1cb38:	2103      	movs	r1, #3
   1cb3a:	4638      	mov	r0, r7
   1cb3c:	f00f fc51 	bl	2c3e2 <atomic_test_bit>
   1cb40:	2800      	cmp	r0, #0
   1cb42:	d0cb      	beq.n	1cadc <smp_pairing_complete+0x30>
   1cb44:	4b06      	ldr	r3, [pc, #24]	; (1cb60 <smp_pairing_complete+0xb4>)
   1cb46:	681b      	ldr	r3, [r3, #0]
   1cb48:	2b00      	cmp	r3, #0
   1cb4a:	d0c7      	beq.n	1cadc <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   1cb4c:	69db      	ldr	r3, [r3, #28]
   1cb4e:	e7c1      	b.n	1cad4 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1cb50:	2102      	movs	r1, #2
   1cb52:	4638      	mov	r0, r7
   1cb54:	f00f fc45 	bl	2c3e2 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1cb58:	2800      	cmp	r0, #0
   1cb5a:	d1d8      	bne.n	1cb0e <smp_pairing_complete+0x62>
   1cb5c:	e7de      	b.n	1cb1c <smp_pairing_complete+0x70>
}
   1cb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cb60:	200029d8 	.word	0x200029d8
   1cb64:	000316ae 	.word	0x000316ae
   1cb68:	000316c6 	.word	0x000316c6

0001cb6c <bt_smp_recv>:
{
   1cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1cb6e:	898b      	ldrh	r3, [r1, #12]
{
   1cb70:	4607      	mov	r7, r0
   1cb72:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1cb74:	b95b      	cbnz	r3, 1cb8e <bt_smp_recv+0x22>
   1cb76:	493a      	ldr	r1, [pc, #232]	; (1cc60 <bt_smp_recv+0xf4>)
   1cb78:	4b3a      	ldr	r3, [pc, #232]	; (1cc64 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   1cb7a:	483b      	ldr	r0, [pc, #236]	; (1cc68 <bt_smp_recv+0xfc>)
   1cb7c:	1ac9      	subs	r1, r1, r3
   1cb7e:	08c9      	lsrs	r1, r1, #3
   1cb80:	0189      	lsls	r1, r1, #6
   1cb82:	f041 0101 	orr.w	r1, r1, #1
   1cb86:	f00c f812 	bl	28bae <log_0>
}
   1cb8a:	2000      	movs	r0, #0
   1cb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1cb8e:	2101      	movs	r1, #1
   1cb90:	f105 0008 	add.w	r0, r5, #8
   1cb94:	f001 f89a 	bl	1dccc <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1cb98:	2104      	movs	r1, #4
   1cb9a:	4606      	mov	r6, r0
   1cb9c:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   1cba0:	f00f fc1f 	bl	2c3e2 <atomic_test_bit>
   1cba4:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   1cba8:	7831      	ldrb	r1, [r6, #0]
   1cbaa:	b150      	cbz	r0, 1cbc2 <bt_smp_recv+0x56>
   1cbac:	4a2c      	ldr	r2, [pc, #176]	; (1cc60 <bt_smp_recv+0xf4>)
   1cbae:	4b2d      	ldr	r3, [pc, #180]	; (1cc64 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   1cbb0:	482e      	ldr	r0, [pc, #184]	; (1cc6c <bt_smp_recv+0x100>)
   1cbb2:	1ad2      	subs	r2, r2, r3
   1cbb4:	08d2      	lsrs	r2, r2, #3
   1cbb6:	0192      	lsls	r2, r2, #6
   1cbb8:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1cbbc:	f00c f804 	bl	28bc8 <log_1>
		return 0;
   1cbc0:	e7e3      	b.n	1cb8a <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1cbc2:	290e      	cmp	r1, #14
   1cbc4:	d908      	bls.n	1cbd8 <bt_smp_recv+0x6c>
   1cbc6:	4a26      	ldr	r2, [pc, #152]	; (1cc60 <bt_smp_recv+0xf4>)
   1cbc8:	4b26      	ldr	r3, [pc, #152]	; (1cc64 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   1cbca:	4829      	ldr	r0, [pc, #164]	; (1cc70 <bt_smp_recv+0x104>)
   1cbcc:	1ad2      	subs	r2, r2, r3
   1cbce:	08d2      	lsrs	r2, r2, #3
   1cbd0:	0192      	lsls	r2, r2, #6
   1cbd2:	f042 0202 	orr.w	r2, r2, #2
   1cbd6:	e7f1      	b.n	1cbbc <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   1cbd8:	4f26      	ldr	r7, [pc, #152]	; (1cc74 <bt_smp_recv+0x108>)
   1cbda:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1cbde:	b973      	cbnz	r3, 1cbfe <bt_smp_recv+0x92>
   1cbe0:	4b20      	ldr	r3, [pc, #128]	; (1cc64 <bt_smp_recv+0xf8>)
   1cbe2:	4a1f      	ldr	r2, [pc, #124]	; (1cc60 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   1cbe4:	4824      	ldr	r0, [pc, #144]	; (1cc78 <bt_smp_recv+0x10c>)
   1cbe6:	1ad2      	subs	r2, r2, r3
   1cbe8:	08d2      	lsrs	r2, r2, #3
   1cbea:	0192      	lsls	r2, r2, #6
   1cbec:	f042 0202 	orr.w	r2, r2, #2
   1cbf0:	f00b ffea 	bl	28bc8 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1cbf4:	2107      	movs	r1, #7
		smp_error(smp, err);
   1cbf6:	4620      	mov	r0, r4
   1cbf8:	f00f fe0f 	bl	2c81a <smp_error>
   1cbfc:	e7c5      	b.n	1cb8a <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1cbfe:	4620      	mov	r0, r4
   1cc00:	f00f fc93 	bl	2c52a <atomic_test_and_clear_bit>
   1cc04:	7831      	ldrb	r1, [r6, #0]
   1cc06:	b970      	cbnz	r0, 1cc26 <bt_smp_recv+0xba>
   1cc08:	4b16      	ldr	r3, [pc, #88]	; (1cc64 <bt_smp_recv+0xf8>)
   1cc0a:	4a15      	ldr	r2, [pc, #84]	; (1cc60 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1cc0c:	481b      	ldr	r0, [pc, #108]	; (1cc7c <bt_smp_recv+0x110>)
   1cc0e:	1ad2      	subs	r2, r2, r3
   1cc10:	08d2      	lsrs	r2, r2, #3
   1cc12:	0192      	lsls	r2, r2, #6
   1cc14:	f042 0202 	orr.w	r2, r2, #2
   1cc18:	f00b ffd6 	bl	28bc8 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1cc1c:	7833      	ldrb	r3, [r6, #0]
   1cc1e:	2b05      	cmp	r3, #5
   1cc20:	d0b3      	beq.n	1cb8a <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1cc22:	2108      	movs	r1, #8
   1cc24:	e7e7      	b.n	1cbf6 <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1cc26:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   1cc2a:	89a8      	ldrh	r0, [r5, #12]
   1cc2c:	791b      	ldrb	r3, [r3, #4]
   1cc2e:	4283      	cmp	r3, r0
   1cc30:	d00d      	beq.n	1cc4e <bt_smp_recv+0xe2>
   1cc32:	4a0c      	ldr	r2, [pc, #48]	; (1cc64 <bt_smp_recv+0xf8>)
   1cc34:	4b0a      	ldr	r3, [pc, #40]	; (1cc60 <bt_smp_recv+0xf4>)
   1cc36:	1a9b      	subs	r3, r3, r2
   1cc38:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1cc3a:	019b      	lsls	r3, r3, #6
   1cc3c:	460a      	mov	r2, r1
   1cc3e:	f043 0301 	orr.w	r3, r3, #1
   1cc42:	4601      	mov	r1, r0
   1cc44:	480e      	ldr	r0, [pc, #56]	; (1cc80 <bt_smp_recv+0x114>)
   1cc46:	f00b ffd3 	bl	28bf0 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1cc4a:	210a      	movs	r1, #10
   1cc4c:	e7d3      	b.n	1cbf6 <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   1cc4e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   1cc52:	4620      	mov	r0, r4
   1cc54:	4629      	mov	r1, r5
   1cc56:	4798      	blx	r3
	if (err) {
   1cc58:	4601      	mov	r1, r0
   1cc5a:	2800      	cmp	r0, #0
   1cc5c:	d095      	beq.n	1cb8a <bt_smp_recv+0x1e>
   1cc5e:	e7ca      	b.n	1cbf6 <bt_smp_recv+0x8a>
   1cc60:	0002d9b8 	.word	0x0002d9b8
   1cc64:	0002d948 	.word	0x0002d948
   1cc68:	000314fa 	.word	0x000314fa
   1cc6c:	00031515 	.word	0x00031515
   1cc70:	00031546 	.word	0x00031546
   1cc74:	0002e154 	.word	0x0002e154
   1cc78:	00031568 	.word	0x00031568
   1cc7c:	00031582 	.word	0x00031582
   1cc80:	00030f1a 	.word	0x00030f1a

0001cc84 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1cc84:	4b12      	ldr	r3, [pc, #72]	; (1ccd0 <bt_smp_pkey_ready+0x4c>)
{
   1cc86:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1cc88:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1cc8a:	b958      	cbnz	r0, 1cca4 <bt_smp_pkey_ready+0x20>
   1cc8c:	4911      	ldr	r1, [pc, #68]	; (1ccd4 <bt_smp_pkey_ready+0x50>)
   1cc8e:	4b12      	ldr	r3, [pc, #72]	; (1ccd8 <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
   1cc90:	4812      	ldr	r0, [pc, #72]	; (1ccdc <bt_smp_pkey_ready+0x58>)
   1cc92:	1ac9      	subs	r1, r1, r3
   1cc94:	08c9      	lsrs	r1, r1, #3
   1cc96:	0189      	lsls	r1, r1, #6
}
   1cc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   1cc9c:	f041 0102 	orr.w	r1, r1, #2
   1cca0:	f00b bf85 	b.w	28bae <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cca4:	4c0e      	ldr	r4, [pc, #56]	; (1cce0 <bt_smp_pkey_ready+0x5c>)
	z_impl_k_sem_give(sem);
   1cca6:	480f      	ldr	r0, [pc, #60]	; (1cce4 <bt_smp_pkey_ready+0x60>)
   1cca8:	f005 fed6 	bl	22a58 <z_impl_k_sem_give>
   1ccac:	f3bf 8f5b 	dmb	ish
   1ccb0:	6863      	ldr	r3, [r4, #4]
   1ccb2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1ccb6:	065b      	lsls	r3, r3, #25
   1ccb8:	d509      	bpl.n	1ccce <bt_smp_pkey_ready+0x4a>
		err = smp_public_key_periph(smp);
   1ccba:	4620      	mov	r0, r4
   1ccbc:	f7ff f980 	bl	1bfc0 <smp_public_key_periph>
		if (err) {
   1ccc0:	4601      	mov	r1, r0
   1ccc2:	b120      	cbz	r0, 1ccce <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   1ccc4:	4620      	mov	r0, r4
}
   1ccc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   1ccca:	f00f bda6 	b.w	2c81a <smp_error>
}
   1ccce:	bd10      	pop	{r4, pc}
   1ccd0:	20002a74 	.word	0x20002a74
   1ccd4:	0002d9b8 	.word	0x0002d9b8
   1ccd8:	0002d948 	.word	0x0002d948
   1ccdc:	0003159d 	.word	0x0003159d
   1cce0:	20001c98 	.word	0x20001c98
   1cce4:	2000090c 	.word	0x2000090c

0001cce8 <smp_ident_addr_info>:
{
   1cce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1ccec:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1ccee:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1ccf2:	782b      	ldrb	r3, [r5, #0]
{
   1ccf4:	4604      	mov	r4, r0
   1ccf6:	f107 0690 	add.w	r6, r7, #144	; 0x90
   1ccfa:	b313      	cbz	r3, 1cd42 <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1ccfc:	79ab      	ldrb	r3, [r5, #6]
   1ccfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cd02:	2bc0      	cmp	r3, #192	; 0xc0
   1cd04:	d01d      	beq.n	1cd42 <smp_ident_addr_info+0x5a>
   1cd06:	4b4b      	ldr	r3, [pc, #300]	; (1ce34 <smp_ident_addr_info+0x14c>)
   1cd08:	4c4b      	ldr	r4, [pc, #300]	; (1ce38 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1cd0a:	4628      	mov	r0, r5
   1cd0c:	1ae4      	subs	r4, r4, r3
   1cd0e:	f7f8 fa1f 	bl	15150 <bt_addr_le_str_real>
   1cd12:	f7f5 fb45 	bl	123a0 <z_log_strdup>
   1cd16:	08e4      	lsrs	r4, r4, #3
   1cd18:	01a4      	lsls	r4, r4, #6
   1cd1a:	f044 0401 	orr.w	r4, r4, #1
   1cd1e:	4601      	mov	r1, r0
   1cd20:	4622      	mov	r2, r4
   1cd22:	4846      	ldr	r0, [pc, #280]	; (1ce3c <smp_ident_addr_info+0x154>)
   1cd24:	f00b ff50 	bl	28bc8 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1cd28:	4630      	mov	r0, r6
   1cd2a:	f7f8 fa11 	bl	15150 <bt_addr_le_str_real>
   1cd2e:	f7f5 fb37 	bl	123a0 <z_log_strdup>
   1cd32:	4622      	mov	r2, r4
   1cd34:	4601      	mov	r1, r0
   1cd36:	4842      	ldr	r0, [pc, #264]	; (1ce40 <smp_ident_addr_info+0x158>)
   1cd38:	f00b ff46 	bl	28bc8 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   1cd3c:	200a      	movs	r0, #10
}
   1cd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1cd42:	2207      	movs	r2, #7
   1cd44:	4629      	mov	r1, r5
   1cd46:	4630      	mov	r0, r6
   1cd48:	f00d fe80 	bl	2aa4c <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   1cd4c:	b168      	cbz	r0, 1cd6a <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1cd4e:	7a38      	ldrb	r0, [r7, #8]
   1cd50:	4629      	mov	r1, r5
   1cd52:	f000 fb93 	bl	1d47c <bt_keys_find_addr>
		if (keys) {
   1cd56:	4680      	mov	r8, r0
   1cd58:	b138      	cbz	r0, 1cd6a <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   1cd5a:	4601      	mov	r1, r0
   1cd5c:	4620      	mov	r0, r4
   1cd5e:	f00f fb49 	bl	2c3f4 <update_keys_check>
   1cd62:	b300      	cbz	r0, 1cda6 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   1cd64:	4640      	mov	r0, r8
   1cd66:	f000 fb99 	bl	1d49c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cd6a:	210d      	movs	r1, #13
   1cd6c:	1d20      	adds	r0, r4, #4
   1cd6e:	f00f fb38 	bl	2c3e2 <atomic_test_bit>
   1cd72:	2800      	cmp	r0, #0
   1cd74:	d046      	beq.n	1ce04 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1cd76:	7a39      	ldrb	r1, [r7, #8]
   1cd78:	4632      	mov	r2, r6
   1cd7a:	2002      	movs	r0, #2
   1cd7c:	f00f fdfa 	bl	2c974 <bt_keys_get_type>
		if (!keys) {
   1cd80:	4680      	mov	r8, r0
   1cd82:	b990      	cbnz	r0, 1cdaa <smp_ident_addr_info+0xc2>
   1cd84:	4a2b      	ldr	r2, [pc, #172]	; (1ce34 <smp_ident_addr_info+0x14c>)
   1cd86:	4c2c      	ldr	r4, [pc, #176]	; (1ce38 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
   1cd88:	4630      	mov	r0, r6
   1cd8a:	1aa4      	subs	r4, r4, r2
   1cd8c:	f7f8 f9e0 	bl	15150 <bt_addr_le_str_real>
   1cd90:	f7f5 fb06 	bl	123a0 <z_log_strdup>
   1cd94:	08e4      	lsrs	r4, r4, #3
   1cd96:	01a4      	lsls	r4, r4, #6
   1cd98:	f044 0401 	orr.w	r4, r4, #1
   1cd9c:	4601      	mov	r1, r0
   1cd9e:	4622      	mov	r2, r4
   1cda0:	4828      	ldr	r0, [pc, #160]	; (1ce44 <smp_ident_addr_info+0x15c>)
   1cda2:	f00b ff11 	bl	28bc8 <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   1cda6:	2008      	movs	r0, #8
   1cda8:	e7c9      	b.n	1cd3e <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1cdaa:	78fb      	ldrb	r3, [r7, #3]
   1cdac:	2b00      	cmp	r3, #0
   1cdae:	d13e      	bne.n	1ce2e <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
   1cdb0:	f107 019e 	add.w	r1, r7, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1cdb4:	780b      	ldrb	r3, [r1, #0]
   1cdb6:	2b01      	cmp	r3, #1
   1cdb8:	d121      	bne.n	1cdfe <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1cdba:	798b      	ldrb	r3, [r1, #6]
   1cdbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cdc0:	2b40      	cmp	r3, #64	; 0x40
   1cdc2:	d11c      	bne.n	1cdfe <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1cdc4:	2206      	movs	r2, #6
   1cdc6:	3101      	adds	r1, #1
   1cdc8:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   1cdcc:	f00d fe65 	bl	2aa9a <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1cdd0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
   1cdd4:	b19b      	cbz	r3, 1cdfe <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1cdd6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
   1cdda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cdde:	2bc0      	cmp	r3, #192	; 0xc0
   1cde0:	d00d      	beq.n	1cdfe <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1cde2:	2207      	movs	r2, #7
   1cde4:	4629      	mov	r1, r5
   1cde6:	f108 0001 	add.w	r0, r8, #1
   1cdea:	f00d fe56 	bl	2aa9a <memcpy>
   1cdee:	2207      	movs	r2, #7
   1cdf0:	4629      	mov	r1, r5
   1cdf2:	4630      	mov	r0, r6
   1cdf4:	f00d fe51 	bl	2aa9a <memcpy>
				bt_conn_identity_resolved(conn);
   1cdf8:	4638      	mov	r0, r7
   1cdfa:	f7fb fced 	bl	187d8 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1cdfe:	4640      	mov	r0, r8
   1ce00:	f7fa f87e 	bl	16f00 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1ce04:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ce08:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ce0c:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1ce0e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ce12:	d503      	bpl.n	1ce1c <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ce14:	210a      	movs	r1, #10
   1ce16:	4620      	mov	r0, r4
   1ce18:	f00f fa04 	bl	2c224 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ce1c:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1ce20:	b91d      	cbnz	r5, 1ce2a <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
   1ce22:	4629      	mov	r1, r5
   1ce24:	4620      	mov	r0, r4
   1ce26:	f7ff fe41 	bl	1caac <smp_pairing_complete>
	return 0;
   1ce2a:	2000      	movs	r0, #0
   1ce2c:	e787      	b.n	1cd3e <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   1ce2e:	f107 0197 	add.w	r1, r7, #151	; 0x97
   1ce32:	e7bf      	b.n	1cdb4 <smp_ident_addr_info+0xcc>
   1ce34:	0002d948 	.word	0x0002d948
   1ce38:	0002d9b8 	.word	0x0002d9b8
   1ce3c:	000315b6 	.word	0x000315b6
   1ce40:	000315e3 	.word	0x000315e3
   1ce44:	000314b2 	.word	0x000314b2

0001ce48 <smp_central_ident>:
{
   1ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1ce4a:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   1ce4e:	4604      	mov	r4, r0
   1ce50:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ce52:	3004      	adds	r0, #4
   1ce54:	210d      	movs	r1, #13
   1ce56:	f00f fac4 	bl	2c3e2 <atomic_test_bit>
   1ce5a:	b338      	cbz	r0, 1ceac <smp_central_ident+0x64>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ce5c:	f105 0790 	add.w	r7, r5, #144	; 0x90
   1ce60:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1ce62:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ce64:	463a      	mov	r2, r7
   1ce66:	2004      	movs	r0, #4
   1ce68:	f00f fd84 	bl	2c974 <bt_keys_get_type>
		if (!keys) {
   1ce6c:	4605      	mov	r5, r0
   1ce6e:	b990      	cbnz	r0, 1ce96 <smp_central_ident+0x4e>
   1ce70:	4a1b      	ldr	r2, [pc, #108]	; (1cee0 <smp_central_ident+0x98>)
   1ce72:	4c1c      	ldr	r4, [pc, #112]	; (1cee4 <smp_central_ident+0x9c>)
			BT_ERR("Unable to get keys for %s",
   1ce74:	4638      	mov	r0, r7
   1ce76:	1aa4      	subs	r4, r4, r2
   1ce78:	f7f8 f96a 	bl	15150 <bt_addr_le_str_real>
   1ce7c:	f7f5 fa90 	bl	123a0 <z_log_strdup>
   1ce80:	08e4      	lsrs	r4, r4, #3
   1ce82:	01a4      	lsls	r4, r4, #6
   1ce84:	f044 0401 	orr.w	r4, r4, #1
   1ce88:	4601      	mov	r1, r0
   1ce8a:	4622      	mov	r2, r4
   1ce8c:	4816      	ldr	r0, [pc, #88]	; (1cee8 <smp_central_ident+0xa0>)
   1ce8e:	f00b fe9b 	bl	28bc8 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   1ce92:	2008      	movs	r0, #8
}
   1ce94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1ce96:	2202      	movs	r2, #2
   1ce98:	4631      	mov	r1, r6
   1ce9a:	3018      	adds	r0, #24
   1ce9c:	f00d fdfd 	bl	2aa9a <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1cea0:	2208      	movs	r2, #8
   1cea2:	1cb1      	adds	r1, r6, #2
   1cea4:	f105 0010 	add.w	r0, r5, #16
   1cea8:	f00d fdf7 	bl	2aa9a <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1ceac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ceb0:	f023 0201 	bic.w	r2, r3, #1
   1ceb4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ceb8:	079a      	lsls	r2, r3, #30
   1ceba:	d50c      	bpl.n	1ced6 <smp_central_ident+0x8e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1cebc:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1cebe:	4620      	mov	r0, r4
   1cec0:	f00f f9b0 	bl	2c224 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1cec4:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1cec8:	b91d      	cbnz	r5, 1ced2 <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   1ceca:	4629      	mov	r1, r5
   1cecc:	4620      	mov	r0, r4
   1cece:	f7ff fded 	bl	1caac <smp_pairing_complete>
	return 0;
   1ced2:	2000      	movs	r0, #0
   1ced4:	e7de      	b.n	1ce94 <smp_central_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ced6:	075b      	lsls	r3, r3, #29
   1ced8:	d5f4      	bpl.n	1cec4 <smp_central_ident+0x7c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ceda:	210a      	movs	r1, #10
   1cedc:	e7ef      	b.n	1cebe <smp_central_ident+0x76>
   1cede:	bf00      	nop
   1cee0:	0002d948 	.word	0x0002d948
   1cee4:	0002d9b8 	.word	0x0002d9b8
   1cee8:	000314b2 	.word	0x000314b2

0001ceec <smp_pairing_failed>:
{
   1ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ceee:	4a15      	ldr	r2, [pc, #84]	; (1cf44 <smp_pairing_failed+0x58>)
   1cef0:	4b15      	ldr	r3, [pc, #84]	; (1cf48 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1cef2:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1cef4:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   1cef8:	7829      	ldrb	r1, [r5, #0]
   1cefa:	1ad2      	subs	r2, r2, r3
   1cefc:	08d2      	lsrs	r2, r2, #3
{
   1cefe:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   1cf00:	0192      	lsls	r2, r2, #6
   1cf02:	4812      	ldr	r0, [pc, #72]	; (1cf4c <smp_pairing_failed+0x60>)
   1cf04:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1cf08:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   1cf0a:	f00b fe5d 	bl	28bc8 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1cf0e:	210a      	movs	r1, #10
   1cf10:	4638      	mov	r0, r7
   1cf12:	f00f fb0a 	bl	2c52a <atomic_test_and_clear_bit>
   1cf16:	b140      	cbz	r0, 1cf2a <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   1cf18:	4b0d      	ldr	r3, [pc, #52]	; (1cf50 <smp_pairing_failed+0x64>)
   1cf1a:	681b      	ldr	r3, [r3, #0]
   1cf1c:	b963      	cbnz	r3, 1cf38 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   1cf1e:	4620      	mov	r0, r4
   1cf20:	7829      	ldrb	r1, [r5, #0]
   1cf22:	f7ff fdc3 	bl	1caac <smp_pairing_complete>
}
   1cf26:	2000      	movs	r0, #0
   1cf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1cf2a:	210b      	movs	r1, #11
   1cf2c:	4638      	mov	r0, r7
   1cf2e:	f00f fafc 	bl	2c52a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1cf32:	2800      	cmp	r0, #0
   1cf34:	d1f0      	bne.n	1cf18 <smp_pairing_failed+0x2c>
   1cf36:	e7f2      	b.n	1cf1e <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   1cf38:	691b      	ldr	r3, [r3, #16]
   1cf3a:	2b00      	cmp	r3, #0
   1cf3c:	d0ef      	beq.n	1cf1e <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   1cf3e:	4630      	mov	r0, r6
   1cf40:	4798      	blx	r3
   1cf42:	e7ec      	b.n	1cf1e <smp_pairing_failed+0x32>
   1cf44:	0002d9b8 	.word	0x0002d9b8
   1cf48:	0002d948 	.word	0x0002d948
   1cf4c:	000315ca 	.word	0x000315ca
   1cf50:	200029d8 	.word	0x200029d8

0001cf54 <bt_smp_encrypt_change>:
{
   1cf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1cf58:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1cf5a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   1cf5e:	b088      	sub	sp, #32
   1cf60:	4604      	mov	r4, r0
   1cf62:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1cf64:	4630      	mov	r0, r6
   1cf66:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1cf68:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1cf6c:	f00f fadd 	bl	2c52a <atomic_test_and_clear_bit>
   1cf70:	b318      	cbz	r0, 1cfba <bt_smp_encrypt_change+0x66>
	if (hci_status) {
   1cf72:	b1bf      	cbz	r7, 1cfa4 <bt_smp_encrypt_change+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1cf74:	2103      	movs	r1, #3
   1cf76:	4630      	mov	r0, r6
   1cf78:	f00f fa33 	bl	2c3e2 <atomic_test_bit>
   1cf7c:	b1e8      	cbz	r0, 1cfba <bt_smp_encrypt_change+0x66>
			uint8_t smp_err = smp_err_get(
   1cf7e:	4638      	mov	r0, r7
   1cf80:	f7f9 fdd4 	bl	16b2c <bt_security_err_get>
	switch (auth_err) {
   1cf84:	3801      	subs	r0, #1
   1cf86:	b2c0      	uxtb	r0, r0
   1cf88:	2808      	cmp	r0, #8
   1cf8a:	bf9a      	itte	ls
   1cf8c:	4b73      	ldrls	r3, [pc, #460]	; (1d15c <bt_smp_encrypt_change+0x208>)
   1cf8e:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1cf90:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1cf92:	2102      	movs	r1, #2
   1cf94:	4630      	mov	r0, r6
   1cf96:	f00f f945 	bl	2c224 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1cf9a:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1cf9c:	4628      	mov	r0, r5
   1cf9e:	f7ff fd85 	bl	1caac <smp_pairing_complete>
   1cfa2:	e00a      	b.n	1cfba <bt_smp_encrypt_change+0x66>
	if (!conn->encrypt) {
   1cfa4:	f898 300b 	ldrb.w	r3, [r8, #11]
   1cfa8:	b13b      	cbz	r3, 1cfba <bt_smp_encrypt_change+0x66>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1cfaa:	2103      	movs	r1, #3
   1cfac:	4630      	mov	r0, r6
   1cfae:	f00f fa18 	bl	2c3e2 <atomic_test_bit>
   1cfb2:	b928      	cbnz	r0, 1cfc0 <bt_smp_encrypt_change+0x6c>
		smp_reset(smp);
   1cfb4:	4628      	mov	r0, r5
   1cfb6:	f00f fad0 	bl	2c55a <smp_reset>
}
   1cfba:	b008      	add	sp, #32
   1cfbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cfc0:	2105      	movs	r1, #5
   1cfc2:	4630      	mov	r0, r6
   1cfc4:	f00f fa0d 	bl	2c3e2 <atomic_test_bit>
   1cfc8:	b1b8      	cbz	r0, 1cffa <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1cfca:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1cfce:	071b      	lsls	r3, r3, #28
   1cfd0:	d507      	bpl.n	1cfe2 <bt_smp_encrypt_change+0x8e>
   1cfd2:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1cfd6:	071f      	lsls	r7, r3, #28
   1cfd8:	d503      	bpl.n	1cfe2 <bt_smp_encrypt_change+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1cfda:	2111      	movs	r1, #17
   1cfdc:	4630      	mov	r0, r6
   1cfde:	f00f f921 	bl	2c224 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1cfe2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1cfe6:	f023 0308 	bic.w	r3, r3, #8
   1cfea:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1cfee:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1cff2:	f023 0308 	bic.w	r3, r3, #8
   1cff6:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1cffa:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1cffe:	07d8      	lsls	r0, r3, #31
   1d000:	d51d      	bpl.n	1d03e <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1d002:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d004:	4628      	mov	r0, r5
   1d006:	f00f f90d 	bl	2c224 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1d00a:	4630      	mov	r0, r6
   1d00c:	2102      	movs	r1, #2
   1d00e:	f00f f909 	bl	2c224 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1d012:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
   1d014:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1d018:	b9cb      	cbnz	r3, 1d04e <bt_smp_encrypt_change+0xfa>
   1d01a:	4a51      	ldr	r2, [pc, #324]	; (1d160 <bt_smp_encrypt_change+0x20c>)
   1d01c:	4c51      	ldr	r4, [pc, #324]	; (1d164 <bt_smp_encrypt_change+0x210>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1d01e:	3090      	adds	r0, #144	; 0x90
   1d020:	1aa4      	subs	r4, r4, r2
   1d022:	f7f8 f895 	bl	15150 <bt_addr_le_str_real>
   1d026:	f7f5 f9bb 	bl	123a0 <z_log_strdup>
   1d02a:	08e4      	lsrs	r4, r4, #3
   1d02c:	01a4      	lsls	r4, r4, #6
   1d02e:	f044 0401 	orr.w	r4, r4, #1
   1d032:	4601      	mov	r1, r0
   1d034:	4622      	mov	r2, r4
   1d036:	484c      	ldr	r0, [pc, #304]	; (1d168 <bt_smp_encrypt_change+0x214>)
   1d038:	f00b fdc6 	bl	28bc8 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   1d03c:	e7bd      	b.n	1cfba <bt_smp_encrypt_change+0x66>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1d03e:	0799      	lsls	r1, r3, #30
   1d040:	d501      	bpl.n	1d046 <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1d042:	2108      	movs	r1, #8
   1d044:	e7de      	b.n	1d004 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1d046:	075a      	lsls	r2, r3, #29
   1d048:	d5df      	bpl.n	1d00a <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1d04a:	210a      	movs	r1, #10
   1d04c:	e7da      	b.n	1d004 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d04e:	2105      	movs	r1, #5
   1d050:	4630      	mov	r0, r6
   1d052:	f00f f9c6 	bl	2c3e2 <atomic_test_bit>
   1d056:	b9b0      	cbnz	r0, 1d086 <bt_smp_encrypt_change+0x132>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1d058:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1d05c:	07db      	lsls	r3, r3, #31
   1d05e:	d512      	bpl.n	1d086 <bt_smp_encrypt_change+0x132>
	struct bt_keys *keys = conn->le.keys;
   1d060:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1d062:	211a      	movs	r1, #26
   1d064:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1d066:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1d06a:	f003 fb99 	bl	207a0 <bt_rand>
   1d06e:	4681      	mov	r9, r0
   1d070:	b170      	cbz	r0, 1d090 <bt_smp_encrypt_change+0x13c>
   1d072:	493c      	ldr	r1, [pc, #240]	; (1d164 <bt_smp_encrypt_change+0x210>)
   1d074:	4b3a      	ldr	r3, [pc, #232]	; (1d160 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to get random bytes");
   1d076:	483d      	ldr	r0, [pc, #244]	; (1d16c <bt_smp_encrypt_change+0x218>)
   1d078:	1ac9      	subs	r1, r1, r3
   1d07a:	08c9      	lsrs	r1, r1, #3
   1d07c:	0189      	lsls	r1, r1, #6
   1d07e:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1d082:	f00b fd94 	bl	28bae <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
   1d086:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1d08a:	2900      	cmp	r1, #0
   1d08c:	d195      	bne.n	1cfba <bt_smp_encrypt_change+0x66>
   1d08e:	e785      	b.n	1cf9c <bt_smp_encrypt_change+0x48>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1d090:	2106      	movs	r1, #6
   1d092:	4628      	mov	r0, r5
   1d094:	f00f f9cf 	bl	2c436 <smp_create_pdu.isra.0>
		if (!buf) {
   1d098:	4680      	mov	r8, r0
   1d09a:	b940      	cbnz	r0, 1d0ae <bt_smp_encrypt_change+0x15a>
   1d09c:	4931      	ldr	r1, [pc, #196]	; (1d164 <bt_smp_encrypt_change+0x210>)
   1d09e:	4b30      	ldr	r3, [pc, #192]	; (1d160 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   1d0a0:	4833      	ldr	r0, [pc, #204]	; (1d170 <bt_smp_encrypt_change+0x21c>)
   1d0a2:	1ac9      	subs	r1, r1, r3
   1d0a4:	08c9      	lsrs	r1, r1, #3
   1d0a6:	0189      	lsls	r1, r1, #6
   1d0a8:	f041 0101 	orr.w	r1, r1, #1
   1d0ac:	e7e9      	b.n	1d082 <bt_smp_encrypt_change+0x12e>
	return net_buf_simple_add(&buf->b, len);
   1d0ae:	2110      	movs	r1, #16
   1d0b0:	3008      	adds	r0, #8
   1d0b2:	f000 fe2d 	bl	1dd10 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1d0b6:	7b3a      	ldrb	r2, [r7, #12]
   1d0b8:	a901      	add	r1, sp, #4
   1d0ba:	4682      	mov	sl, r0
   1d0bc:	f00d fced 	bl	2aa9a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1d0c0:	7b38      	ldrb	r0, [r7, #12]
   1d0c2:	280f      	cmp	r0, #15
   1d0c4:	d805      	bhi.n	1d0d2 <bt_smp_encrypt_change+0x17e>
			(void)memset(info->ltk + keys->enc_size, 0,
   1d0c6:	f1c0 0210 	rsb	r2, r0, #16
   1d0ca:	4649      	mov	r1, r9
   1d0cc:	4450      	add	r0, sl
   1d0ce:	f00d fcef 	bl	2aab0 <memset>
		smp_send(smp, buf, NULL, NULL);
   1d0d2:	4641      	mov	r1, r8
   1d0d4:	2200      	movs	r2, #0
   1d0d6:	4628      	mov	r0, r5
   1d0d8:	f00f f8e3 	bl	2c2a2 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1d0dc:	2107      	movs	r1, #7
   1d0de:	4628      	mov	r0, r5
   1d0e0:	f00f f9a9 	bl	2c436 <smp_create_pdu.isra.0>
		if (!buf) {
   1d0e4:	4680      	mov	r8, r0
   1d0e6:	b940      	cbnz	r0, 1d0fa <bt_smp_encrypt_change+0x1a6>
   1d0e8:	491e      	ldr	r1, [pc, #120]	; (1d164 <bt_smp_encrypt_change+0x210>)
   1d0ea:	4b1d      	ldr	r3, [pc, #116]	; (1d160 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Central Ident buffer");
   1d0ec:	4821      	ldr	r0, [pc, #132]	; (1d174 <bt_smp_encrypt_change+0x220>)
   1d0ee:	1ac9      	subs	r1, r1, r3
   1d0f0:	08c9      	lsrs	r1, r1, #3
   1d0f2:	0189      	lsls	r1, r1, #6
   1d0f4:	f041 0101 	orr.w	r1, r1, #1
   1d0f8:	e7c3      	b.n	1d082 <bt_smp_encrypt_change+0x12e>
   1d0fa:	210a      	movs	r1, #10
   1d0fc:	3008      	adds	r0, #8
   1d0fe:	f000 fe07 	bl	1dd10 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1d102:	2208      	movs	r2, #8
   1d104:	4681      	mov	r9, r0
   1d106:	a905      	add	r1, sp, #20
   1d108:	3002      	adds	r0, #2
   1d10a:	f00d fcc6 	bl	2aa9a <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1d10e:	2202      	movs	r2, #2
   1d110:	a907      	add	r1, sp, #28
   1d112:	4648      	mov	r0, r9
   1d114:	f00d fcc1 	bl	2aa9a <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1d118:	4641      	mov	r1, r8
   1d11a:	4628      	mov	r0, r5
   1d11c:	4a16      	ldr	r2, [pc, #88]	; (1d178 <bt_smp_encrypt_change+0x224>)
   1d11e:	f00f f8c0 	bl	2c2a2 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d122:	210d      	movs	r1, #13
   1d124:	4630      	mov	r0, r6
   1d126:	f00f f95c 	bl	2c3e2 <atomic_test_bit>
   1d12a:	2800      	cmp	r0, #0
   1d12c:	d0ab      	beq.n	1d086 <bt_smp_encrypt_change+0x132>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1d12e:	4638      	mov	r0, r7
   1d130:	2101      	movs	r1, #1
   1d132:	f00f fc2f 	bl	2c994 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1d136:	a901      	add	r1, sp, #4
   1d138:	2210      	movs	r2, #16
   1d13a:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   1d13e:	f00d fcac 	bl	2aa9a <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1d142:	a905      	add	r1, sp, #20
   1d144:	2208      	movs	r2, #8
   1d146:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1d14a:	f00d fca6 	bl	2aa9a <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1d14e:	2202      	movs	r2, #2
   1d150:	a907      	add	r1, sp, #28
   1d152:	f107 0048 	add.w	r0, r7, #72	; 0x48
   1d156:	f00d fca0 	bl	2aa9a <memcpy>
   1d15a:	e794      	b.n	1d086 <bt_smp_encrypt_change+0x132>
   1d15c:	000316bd 	.word	0x000316bd
   1d160:	0002d948 	.word	0x0002d948
   1d164:	0002d9b8 	.word	0x0002d9b8
   1d168:	000315d6 	.word	0x000315d6
   1d16c:	000315eb 	.word	0x000315eb
   1d170:	00031606 	.word	0x00031606
   1d174:	0003162d 	.word	0x0003162d
   1d178:	0001d1b9 	.word	0x0001d1b9

0001d17c <smp_timeout>:
   1d17c:	4b0b      	ldr	r3, [pc, #44]	; (1d1ac <smp_timeout+0x30>)
   1d17e:	490c      	ldr	r1, [pc, #48]	; (1d1b0 <smp_timeout+0x34>)
{
   1d180:	b510      	push	{r4, lr}
   1d182:	1ac9      	subs	r1, r1, r3
   1d184:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   1d186:	0189      	lsls	r1, r1, #6
{
   1d188:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1d18a:	f041 0101 	orr.w	r1, r1, #1
   1d18e:	4809      	ldr	r0, [pc, #36]	; (1d1b4 <smp_timeout+0x38>)
   1d190:	f00b fd0d 	bl	28bae <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1d194:	f5a4 70f0 	sub.w	r0, r4, #480	; 0x1e0
   1d198:	2108      	movs	r1, #8
   1d19a:	f7ff fc87 	bl	1caac <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d19e:	f5a4 70ee 	sub.w	r0, r4, #476	; 0x1dc
   1d1a2:	2104      	movs	r1, #4
}
   1d1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1d1a8:	f00f b83c 	b.w	2c224 <atomic_set_bit>
   1d1ac:	0002d948 	.word	0x0002d948
   1d1b0:	0002d9b8 	.word	0x0002d9b8
   1d1b4:	00031655 	.word	0x00031655

0001d1b8 <smp_ident_sent>:
{
   1d1b8:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1d1ba:	7883      	ldrb	r3, [r0, #2]
   1d1bc:	2b01      	cmp	r3, #1
   1d1be:	d122      	bne.n	1d206 <smp_ident_sent+0x4e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1d1c0:	2106      	movs	r1, #6
   1d1c2:	f00e f9e2 	bl	2b58a <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1d1c6:	4604      	mov	r4, r0
   1d1c8:	b970      	cbnz	r0, 1d1e8 <smp_ident_sent+0x30>
   1d1ca:	490f      	ldr	r1, [pc, #60]	; (1d208 <smp_ident_sent+0x50>)
   1d1cc:	4a0f      	ldr	r2, [pc, #60]	; (1d20c <smp_ident_sent+0x54>)
   1d1ce:	4810      	ldr	r0, [pc, #64]	; (1d210 <smp_ident_sent+0x58>)
   1d1d0:	f240 332f 	movw	r3, #815	; 0x32f
   1d1d4:	f00b facc 	bl	28770 <printk>
   1d1d8:	480e      	ldr	r0, [pc, #56]	; (1d214 <smp_ident_sent+0x5c>)
   1d1da:	f00b fac9 	bl	28770 <printk>
   1d1de:	480b      	ldr	r0, [pc, #44]	; (1d20c <smp_ident_sent+0x54>)
   1d1e0:	f240 312f 	movw	r1, #815	; 0x32f
   1d1e4:	f00b fcb5 	bl	28b52 <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1d1e8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1d1ec:	f023 0301 	bic.w	r3, r3, #1
   1d1f0:	f804 3c08 	strb.w	r3, [r4, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1d1f4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   1d1f8:	b929      	cbnz	r1, 1d206 <smp_ident_sent+0x4e>
			smp_pairing_complete(smp, 0);
   1d1fa:	f1a4 00f0 	sub.w	r0, r4, #240	; 0xf0
}
   1d1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1d202:	f7ff bc53 	b.w	1caac <smp_pairing_complete>
}
   1d206:	bd10      	pop	{r4, pc}
   1d208:	00030d99 	.word	0x00030d99
   1d20c:	00031661 	.word	0x00031661
   1d210:	0002e915 	.word	0x0002e915
   1d214:	00031690 	.word	0x00031690

0001d218 <bt_smp_update_keys>:
{
   1d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d21a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1d21c:	f7fe fcfa 	bl	1bc14 <smp_chan_get>
	if (!smp) {
   1d220:	4605      	mov	r5, r0
   1d222:	2800      	cmp	r0, #0
   1d224:	d07c      	beq.n	1d320 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d226:	1d06      	adds	r6, r0, #4
   1d228:	2103      	movs	r1, #3
   1d22a:	4630      	mov	r0, r6
   1d22c:	f00f f8d9 	bl	2c3e2 <atomic_test_bit>
   1d230:	2800      	cmp	r0, #0
   1d232:	d075      	beq.n	1d320 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   1d234:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d238:	b108      	cbz	r0, 1d23e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1d23a:	f000 f92f 	bl	1d49c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d23e:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1d242:	7a20      	ldrb	r0, [r4, #8]
   1d244:	4639      	mov	r1, r7
   1d246:	f000 f889 	bl	1d35c <bt_keys_get_addr>
   1d24a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1d24e:	b9b0      	cbnz	r0, 1d27e <bt_smp_update_keys+0x66>
   1d250:	4a34      	ldr	r2, [pc, #208]	; (1d324 <bt_smp_update_keys+0x10c>)
   1d252:	4c35      	ldr	r4, [pc, #212]	; (1d328 <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   1d254:	4638      	mov	r0, r7
   1d256:	1aa4      	subs	r4, r4, r2
   1d258:	f7f7 ff7a 	bl	15150 <bt_addr_le_str_real>
   1d25c:	f7f5 f8a0 	bl	123a0 <z_log_strdup>
   1d260:	08e4      	lsrs	r4, r4, #3
   1d262:	01a4      	lsls	r4, r4, #6
   1d264:	f044 0401 	orr.w	r4, r4, #1
   1d268:	4601      	mov	r1, r0
   1d26a:	4622      	mov	r2, r4
   1d26c:	482f      	ldr	r0, [pc, #188]	; (1d32c <bt_smp_update_keys+0x114>)
   1d26e:	f00b fcab 	bl	28bc8 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d272:	4628      	mov	r0, r5
   1d274:	2108      	movs	r1, #8
}
   1d276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1d27a:	f00f bace 	b.w	2c81a <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1d27e:	210e      	movs	r1, #14
   1d280:	4630      	mov	r0, r6
   1d282:	f00f f8ae 	bl	2c3e2 <atomic_test_bit>
   1d286:	b128      	cbz	r0, 1d294 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1d288:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1d28c:	7b53      	ldrb	r3, [r2, #13]
   1d28e:	f043 0302 	orr.w	r3, r3, #2
   1d292:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1d294:	7a2a      	ldrb	r2, [r5, #8]
   1d296:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1d29a:	2a03      	cmp	r2, #3
   1d29c:	7b4b      	ldrb	r3, [r1, #13]
   1d29e:	d836      	bhi.n	1d30e <bt_smp_update_keys+0xf6>
   1d2a0:	b3c2      	cbz	r2, 1d314 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1d2a2:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d2a6:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1d2a8:	7d2b      	ldrb	r3, [r5, #20]
   1d2aa:	7b6a      	ldrb	r2, [r5, #13]
   1d2ac:	4293      	cmp	r3, r2
   1d2ae:	bf28      	it	cs
   1d2b0:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1d2b2:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d2b4:	4630      	mov	r0, r6
   1d2b6:	2105      	movs	r1, #5
   1d2b8:	f00f f893 	bl	2c3e2 <atomic_test_bit>
   1d2bc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1d2c0:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d2c2:	b350      	cbz	r0, 1d31a <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   1d2c4:	f042 0210 	orr.w	r2, r2, #16
   1d2c8:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d2ca:	210d      	movs	r1, #13
   1d2cc:	4630      	mov	r0, r6
   1d2ce:	f00f f888 	bl	2c3e2 <atomic_test_bit>
   1d2d2:	b328      	cbz	r0, 1d320 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1d2d4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d2d8:	2120      	movs	r1, #32
   1d2da:	f00f fb5b 	bl	2c994 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1d2de:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d2e2:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1d2e6:	2210      	movs	r2, #16
   1d2e8:	301a      	adds	r0, #26
   1d2ea:	f00d fbd6 	bl	2aa9a <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1d2ee:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d2f2:	2208      	movs	r2, #8
   1d2f4:	2100      	movs	r1, #0
   1d2f6:	3010      	adds	r0, #16
   1d2f8:	f00d fbda 	bl	2aab0 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1d2fc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1d300:	2202      	movs	r2, #2
}
   1d302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1d306:	2100      	movs	r1, #0
   1d308:	3018      	adds	r0, #24
   1d30a:	f00d bbd1 	b.w	2aab0 <memset>
	switch (smp->method) {
   1d30e:	3a05      	subs	r2, #5
   1d310:	2a01      	cmp	r2, #1
   1d312:	d9c6      	bls.n	1d2a2 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1d314:	f023 0301 	bic.w	r3, r3, #1
   1d318:	e7c5      	b.n	1d2a6 <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1d31a:	f022 0210 	bic.w	r2, r2, #16
   1d31e:	735a      	strb	r2, [r3, #13]
}
   1d320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d322:	bf00      	nop
   1d324:	0002d948 	.word	0x0002d948
   1d328:	0002d9b8 	.word	0x0002d9b8
   1d32c:	000314b2 	.word	0x000314b2

0001d330 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1d330:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d332:	4b07      	ldr	r3, [pc, #28]	; (1d350 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1d334:	4807      	ldr	r0, [pc, #28]	; (1d354 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1d336:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1d33a:	f003 0306 	and.w	r3, r3, #6
   1d33e:	1f9a      	subs	r2, r3, #6
   1d340:	4253      	negs	r3, r2
   1d342:	4153      	adcs	r3, r2
   1d344:	4a04      	ldr	r2, [pc, #16]	; (1d358 <bt_smp_init+0x28>)
   1d346:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1d348:	f7fa fbf4 	bl	17b34 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1d34c:	2000      	movs	r0, #0
   1d34e:	bd08      	pop	{r3, pc}
   1d350:	200002b0 	.word	0x200002b0
   1d354:	20000584 	.word	0x20000584
   1d358:	200038a4 	.word	0x200038a4

0001d35c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1d35c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d35e:	4c11      	ldr	r4, [pc, #68]	; (1d3a4 <bt_keys_get_addr+0x48>)
   1d360:	7823      	ldrb	r3, [r4, #0]
   1d362:	4283      	cmp	r3, r0
{
   1d364:	4605      	mov	r5, r0
   1d366:	460e      	mov	r6, r1
   1d368:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d36a:	d00b      	beq.n	1d384 <bt_keys_get_addr+0x28>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   1d36c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   1d36e:	480e      	ldr	r0, [pc, #56]	; (1d3a8 <bt_keys_get_addr+0x4c>)
   1d370:	9400      	str	r4, [sp, #0]
   1d372:	2207      	movs	r2, #7
   1d374:	4669      	mov	r1, sp
   1d376:	f8cd 4003 	str.w	r4, [sp, #3]
   1d37a:	f00d fb67 	bl	2aa4c <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   1d37e:	b140      	cbz	r0, 1d392 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1d380:	4620      	mov	r0, r4
   1d382:	e00d      	b.n	1d3a0 <bt_keys_get_addr+0x44>
   1d384:	2207      	movs	r2, #7
   1d386:	1c60      	adds	r0, r4, #1
   1d388:	f00d fb60 	bl	2aa4c <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1d38c:	2800      	cmp	r0, #0
   1d38e:	d1ed      	bne.n	1d36c <bt_keys_get_addr+0x10>
   1d390:	e7f6      	b.n	1d380 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   1d392:	4805      	ldr	r0, [pc, #20]	; (1d3a8 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   1d394:	703d      	strb	r5, [r7, #0]
   1d396:	2207      	movs	r2, #7
   1d398:	4631      	mov	r1, r6
   1d39a:	f00d fb7e 	bl	2aa9a <memcpy>
		return keys;
   1d39e:	4801      	ldr	r0, [pc, #4]	; (1d3a4 <bt_keys_get_addr+0x48>)
}
   1d3a0:	b003      	add	sp, #12
   1d3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d3a4:	20002a78 	.word	0x20002a78
   1d3a8:	20002a79 	.word	0x20002a79

0001d3ac <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1d3ac:	460b      	mov	r3, r1
   1d3ae:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1d3b0:	4a04      	ldr	r2, [pc, #16]	; (1d3c4 <bt_keys_foreach+0x18>)
{
   1d3b2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   1d3b4:	89d4      	ldrh	r4, [r2, #14]
   1d3b6:	4204      	tst	r4, r0
   1d3b8:	d002      	beq.n	1d3c0 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1d3ba:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1d3bc:	4610      	mov	r0, r2
   1d3be:	4718      	bx	r3
}
   1d3c0:	bc10      	pop	{r4}
   1d3c2:	4770      	bx	lr
   1d3c4:	20002a78 	.word	0x20002a78

0001d3c8 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1d3c8:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1d3ca:	4903      	ldr	r1, [pc, #12]	; (1d3d8 <keys_commit+0x10>)
   1d3cc:	2200      	movs	r2, #0
   1d3ce:	2002      	movs	r0, #2
   1d3d0:	f7ff ffec 	bl	1d3ac <bt_keys_foreach>
	}

	return 0;
}
   1d3d4:	2000      	movs	r0, #0
   1d3d6:	bd08      	pop	{r3, pc}
   1d3d8:	0002c971 	.word	0x0002c971

0001d3dc <bt_keys_find>:
{
   1d3dc:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d3de:	4c09      	ldr	r4, [pc, #36]	; (1d404 <bt_keys_find+0x28>)
{
   1d3e0:	460b      	mov	r3, r1
   1d3e2:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1d3e4:	89e2      	ldrh	r2, [r4, #14]
   1d3e6:	4202      	tst	r2, r0
   1d3e8:	d007      	beq.n	1d3fa <bt_keys_find+0x1e>
   1d3ea:	7822      	ldrb	r2, [r4, #0]
   1d3ec:	429a      	cmp	r2, r3
   1d3ee:	d104      	bne.n	1d3fa <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   1d3f0:	2207      	movs	r2, #7
   1d3f2:	1c60      	adds	r0, r4, #1
   1d3f4:	f00d fb2a 	bl	2aa4c <memcmp>
   1d3f8:	b108      	cbz	r0, 1d3fe <bt_keys_find+0x22>
	return NULL;
   1d3fa:	2000      	movs	r0, #0
}
   1d3fc:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1d3fe:	4620      	mov	r0, r4
   1d400:	e7fc      	b.n	1d3fc <bt_keys_find+0x20>
   1d402:	bf00      	nop
   1d404:	20002a78 	.word	0x20002a78

0001d408 <bt_keys_find_irk>:
{
   1d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1d40a:	780b      	ldrb	r3, [r1, #0]
   1d40c:	2b01      	cmp	r3, #1
   1d40e:	4607      	mov	r7, r0
   1d410:	460c      	mov	r4, r1
   1d412:	d001      	beq.n	1d418 <bt_keys_find_irk+0x10>
		return NULL;
   1d414:	2000      	movs	r0, #0
}
   1d416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1d418:	798b      	ldrb	r3, [r1, #6]
   1d41a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d41e:	2b40      	cmp	r3, #64	; 0x40
   1d420:	d1f8      	bne.n	1d414 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d422:	4d13      	ldr	r5, [pc, #76]	; (1d470 <bt_keys_find_irk+0x68>)
   1d424:	89eb      	ldrh	r3, [r5, #14]
   1d426:	f013 0f02 	tst.w	r3, #2
   1d42a:	462e      	mov	r6, r5
   1d42c:	d0f2      	beq.n	1d414 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1d42e:	7833      	ldrb	r3, [r6, #0]
   1d430:	42bb      	cmp	r3, r7
   1d432:	d10b      	bne.n	1d44c <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1d434:	2206      	movs	r2, #6
   1d436:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   1d43a:	1c60      	adds	r0, r4, #1
   1d43c:	f00d fb06 	bl	2aa4c <memcmp>
   1d440:	b908      	cbnz	r0, 1d446 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   1d442:	4628      	mov	r0, r5
   1d444:	e7e7      	b.n	1d416 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1d446:	89f3      	ldrh	r3, [r6, #14]
   1d448:	079b      	lsls	r3, r3, #30
   1d44a:	d5e3      	bpl.n	1d414 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1d44c:	7833      	ldrb	r3, [r6, #0]
   1d44e:	42bb      	cmp	r3, r7
   1d450:	d1e0      	bne.n	1d414 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1d452:	3401      	adds	r4, #1
   1d454:	4807      	ldr	r0, [pc, #28]	; (1d474 <bt_keys_find_irk+0x6c>)
   1d456:	4621      	mov	r1, r4
   1d458:	f00d fb7e 	bl	2ab58 <bt_rpa_irk_matches>
   1d45c:	2800      	cmp	r0, #0
   1d45e:	d0d9      	beq.n	1d414 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   1d460:	4805      	ldr	r0, [pc, #20]	; (1d478 <bt_keys_find_irk+0x70>)
   1d462:	2206      	movs	r2, #6
   1d464:	4621      	mov	r1, r4
   1d466:	f00d fb18 	bl	2aa9a <memcpy>
			return &key_pool[i];
   1d46a:	4801      	ldr	r0, [pc, #4]	; (1d470 <bt_keys_find_irk+0x68>)
}
   1d46c:	e7d3      	b.n	1d416 <bt_keys_find_irk+0xe>
   1d46e:	bf00      	nop
   1d470:	20002a78 	.word	0x20002a78
   1d474:	20002aa2 	.word	0x20002aa2
   1d478:	20002ab2 	.word	0x20002ab2

0001d47c <bt_keys_find_addr>:
{
   1d47c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1d47e:	4c06      	ldr	r4, [pc, #24]	; (1d498 <bt_keys_find_addr+0x1c>)
   1d480:	7823      	ldrb	r3, [r4, #0]
   1d482:	4283      	cmp	r3, r0
   1d484:	d104      	bne.n	1d490 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1d486:	2207      	movs	r2, #7
   1d488:	1c60      	adds	r0, r4, #1
   1d48a:	f00d fadf 	bl	2aa4c <memcmp>
   1d48e:	b108      	cbz	r0, 1d494 <bt_keys_find_addr+0x18>
	return NULL;
   1d490:	2000      	movs	r0, #0
}
   1d492:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1d494:	4620      	mov	r0, r4
   1d496:	e7fc      	b.n	1d492 <bt_keys_find_addr+0x16>
   1d498:	20002a78 	.word	0x20002a78

0001d49c <bt_keys_clear>:
{
   1d49c:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d49e:	7a03      	ldrb	r3, [r0, #8]
   1d4a0:	075b      	lsls	r3, r3, #29
{
   1d4a2:	b08c      	sub	sp, #48	; 0x30
   1d4a4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1d4a6:	d501      	bpl.n	1d4ac <bt_keys_clear+0x10>
		bt_id_del(keys);
   1d4a8:	f7f9 fdfe 	bl	170a8 <bt_id_del>
		if (keys->id) {
   1d4ac:	4625      	mov	r5, r4
   1d4ae:	f815 2b01 	ldrb.w	r2, [r5], #1
   1d4b2:	b1aa      	cbz	r2, 1d4e0 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   1d4b4:	ae02      	add	r6, sp, #8
   1d4b6:	2104      	movs	r1, #4
   1d4b8:	4630      	mov	r0, r6
   1d4ba:	f00b f8bd 	bl	28638 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d4be:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d4c0:	462b      	mov	r3, r5
   1d4c2:	4a08      	ldr	r2, [pc, #32]	; (1d4e4 <bt_keys_clear+0x48>)
   1d4c4:	2124      	movs	r1, #36	; 0x24
   1d4c6:	a803      	add	r0, sp, #12
   1d4c8:	f7f8 f912 	bl	156f0 <bt_settings_encode_key>
		settings_delete(key);
   1d4cc:	a803      	add	r0, sp, #12
   1d4ce:	f00c f824 	bl	2951a <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1d4d2:	225c      	movs	r2, #92	; 0x5c
   1d4d4:	2100      	movs	r1, #0
   1d4d6:	4620      	mov	r0, r4
   1d4d8:	f00d faea 	bl	2aab0 <memset>
}
   1d4dc:	b00c      	add	sp, #48	; 0x30
   1d4de:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   1d4e0:	9200      	str	r2, [sp, #0]
   1d4e2:	e7ed      	b.n	1d4c0 <bt_keys_clear+0x24>
   1d4e4:	000317af 	.word	0x000317af

0001d4e8 <keys_set>:
{
   1d4e8:	b570      	push	{r4, r5, r6, lr}
   1d4ea:	4614      	mov	r4, r2
   1d4ec:	b098      	sub	sp, #96	; 0x60
	if (!name) {
   1d4ee:	4605      	mov	r5, r0
   1d4f0:	b970      	cbnz	r0, 1d510 <keys_set+0x28>
   1d4f2:	494b      	ldr	r1, [pc, #300]	; (1d620 <keys_set+0x138>)
   1d4f4:	4b4b      	ldr	r3, [pc, #300]	; (1d624 <keys_set+0x13c>)
		BT_ERR("Insufficient number of arguments");
   1d4f6:	484c      	ldr	r0, [pc, #304]	; (1d628 <keys_set+0x140>)
   1d4f8:	1ac9      	subs	r1, r1, r3
   1d4fa:	08c9      	lsrs	r1, r1, #3
   1d4fc:	0189      	lsls	r1, r1, #6
   1d4fe:	f041 0101 	orr.w	r1, r1, #1
   1d502:	f00b fb54 	bl	28bae <log_0>
		return -EINVAL;
   1d506:	f06f 0415 	mvn.w	r4, #21
}
   1d50a:	4620      	mov	r0, r4
   1d50c:	b018      	add	sp, #96	; 0x60
   1d50e:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1d510:	2250      	movs	r2, #80	; 0x50
   1d512:	a904      	add	r1, sp, #16
   1d514:	4618      	mov	r0, r3
   1d516:	47a0      	blx	r4
	if (len < 0) {
   1d518:	1e04      	subs	r4, r0, #0
   1d51a:	da0b      	bge.n	1d534 <keys_set+0x4c>
   1d51c:	4a40      	ldr	r2, [pc, #256]	; (1d620 <keys_set+0x138>)
   1d51e:	4b41      	ldr	r3, [pc, #260]	; (1d624 <keys_set+0x13c>)
		BT_ERR("Failed to read value (err %zd)", len);
   1d520:	4842      	ldr	r0, [pc, #264]	; (1d62c <keys_set+0x144>)
   1d522:	1ad2      	subs	r2, r2, r3
   1d524:	08d2      	lsrs	r2, r2, #3
   1d526:	0192      	lsls	r2, r2, #6
   1d528:	f042 0201 	orr.w	r2, r2, #1
   1d52c:	4621      	mov	r1, r4
   1d52e:	f00b fb4b 	bl	28bc8 <log_1>
   1d532:	e7e8      	b.n	1d506 <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   1d534:	a902      	add	r1, sp, #8
   1d536:	4628      	mov	r0, r5
   1d538:	f00d fb59 	bl	2abee <bt_settings_decode_key>
	if (err) {
   1d53c:	4606      	mov	r6, r0
   1d53e:	b148      	cbz	r0, 1d554 <keys_set+0x6c>
   1d540:	4a37      	ldr	r2, [pc, #220]	; (1d620 <keys_set+0x138>)
   1d542:	4b38      	ldr	r3, [pc, #224]	; (1d624 <keys_set+0x13c>)
		BT_ERR("Unable to decode address %s", name);
   1d544:	483a      	ldr	r0, [pc, #232]	; (1d630 <keys_set+0x148>)
   1d546:	1ad2      	subs	r2, r2, r3
   1d548:	08d2      	lsrs	r2, r2, #3
   1d54a:	0192      	lsls	r2, r2, #6
   1d54c:	f042 0201 	orr.w	r2, r2, #1
   1d550:	4629      	mov	r1, r5
   1d552:	e7ec      	b.n	1d52e <keys_set+0x46>
	settings_name_next(name, &next);
   1d554:	a901      	add	r1, sp, #4
   1d556:	4628      	mov	r0, r5
   1d558:	f00c f806 	bl	29568 <settings_name_next>
	if (!next) {
   1d55c:	9801      	ldr	r0, [sp, #4]
   1d55e:	b170      	cbz	r0, 1d57e <keys_set+0x96>
		unsigned long next_id = strtoul(next, NULL, 10);
   1d560:	4631      	mov	r1, r6
   1d562:	220a      	movs	r2, #10
   1d564:	f00d f9a8 	bl	2a8b8 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1d568:	4601      	mov	r1, r0
   1d56a:	b140      	cbz	r0, 1d57e <keys_set+0x96>
   1d56c:	4a2c      	ldr	r2, [pc, #176]	; (1d620 <keys_set+0x138>)
   1d56e:	4b2d      	ldr	r3, [pc, #180]	; (1d624 <keys_set+0x13c>)
			BT_ERR("Invalid local identity %lu", next_id);
   1d570:	4830      	ldr	r0, [pc, #192]	; (1d634 <keys_set+0x14c>)
   1d572:	1ad2      	subs	r2, r2, r3
   1d574:	08d2      	lsrs	r2, r2, #3
   1d576:	0192      	lsls	r2, r2, #6
   1d578:	f042 0201 	orr.w	r2, r2, #1
   1d57c:	e7d7      	b.n	1d52e <keys_set+0x46>
	if (!len) {
   1d57e:	b9e4      	cbnz	r4, 1d5ba <keys_set+0xd2>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1d580:	aa02      	add	r2, sp, #8
   1d582:	4621      	mov	r1, r4
   1d584:	203f      	movs	r0, #63	; 0x3f
   1d586:	f7ff ff29 	bl	1d3dc <bt_keys_find>
		if (keys) {
   1d58a:	b120      	cbz	r0, 1d596 <keys_set+0xae>
			(void)memset(keys, 0, sizeof(*keys));
   1d58c:	225c      	movs	r2, #92	; 0x5c
   1d58e:	4621      	mov	r1, r4
   1d590:	f00d fa8e 	bl	2aab0 <memset>
			BT_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1d594:	e7b9      	b.n	1d50a <keys_set+0x22>
   1d596:	4a23      	ldr	r2, [pc, #140]	; (1d624 <keys_set+0x13c>)
   1d598:	4d21      	ldr	r5, [pc, #132]	; (1d620 <keys_set+0x138>)
			BT_WARN("Unable to find deleted keys for %s",
   1d59a:	a802      	add	r0, sp, #8
   1d59c:	1aad      	subs	r5, r5, r2
   1d59e:	f7f7 fdd7 	bl	15150 <bt_addr_le_str_real>
   1d5a2:	f7f4 fefd 	bl	123a0 <z_log_strdup>
   1d5a6:	08ed      	lsrs	r5, r5, #3
   1d5a8:	01ad      	lsls	r5, r5, #6
   1d5aa:	f045 0502 	orr.w	r5, r5, #2
   1d5ae:	4601      	mov	r1, r0
   1d5b0:	462a      	mov	r2, r5
   1d5b2:	4821      	ldr	r0, [pc, #132]	; (1d638 <keys_set+0x150>)
   1d5b4:	f00b fb08 	bl	28bc8 <log_1>
   1d5b8:	e7a7      	b.n	1d50a <keys_set+0x22>
	keys = bt_keys_get_addr(id, &addr);
   1d5ba:	a902      	add	r1, sp, #8
   1d5bc:	2000      	movs	r0, #0
   1d5be:	f7ff fecd 	bl	1d35c <bt_keys_get_addr>
	if (!keys) {
   1d5c2:	4605      	mov	r5, r0
   1d5c4:	b998      	cbnz	r0, 1d5ee <keys_set+0x106>
   1d5c6:	4a17      	ldr	r2, [pc, #92]	; (1d624 <keys_set+0x13c>)
   1d5c8:	4c15      	ldr	r4, [pc, #84]	; (1d620 <keys_set+0x138>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1d5ca:	a802      	add	r0, sp, #8
   1d5cc:	1aa4      	subs	r4, r4, r2
   1d5ce:	f7f7 fdbf 	bl	15150 <bt_addr_le_str_real>
   1d5d2:	f7f4 fee5 	bl	123a0 <z_log_strdup>
   1d5d6:	08e4      	lsrs	r4, r4, #3
   1d5d8:	01a4      	lsls	r4, r4, #6
   1d5da:	f044 0401 	orr.w	r4, r4, #1
   1d5de:	4601      	mov	r1, r0
   1d5e0:	4622      	mov	r2, r4
   1d5e2:	4816      	ldr	r0, [pc, #88]	; (1d63c <keys_set+0x154>)
   1d5e4:	f00b faf0 	bl	28bc8 <log_1>
		return -ENOMEM;
   1d5e8:	f06f 040b 	mvn.w	r4, #11
   1d5ec:	e78d      	b.n	1d50a <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1d5ee:	2c50      	cmp	r4, #80	; 0x50
   1d5f0:	d00f      	beq.n	1d612 <keys_set+0x12a>
   1d5f2:	4a0c      	ldr	r2, [pc, #48]	; (1d624 <keys_set+0x13c>)
   1d5f4:	4b0a      	ldr	r3, [pc, #40]	; (1d620 <keys_set+0x138>)
			BT_ERR("Invalid key length %zd != %zu", len,
   1d5f6:	4812      	ldr	r0, [pc, #72]	; (1d640 <keys_set+0x158>)
   1d5f8:	1a9b      	subs	r3, r3, r2
   1d5fa:	08db      	lsrs	r3, r3, #3
   1d5fc:	019b      	lsls	r3, r3, #6
   1d5fe:	f043 0301 	orr.w	r3, r3, #1
   1d602:	2250      	movs	r2, #80	; 0x50
   1d604:	4621      	mov	r1, r4
   1d606:	f00b faf3 	bl	28bf0 <log_2>
			bt_keys_clear(keys);
   1d60a:	4628      	mov	r0, r5
   1d60c:	f7ff ff46 	bl	1d49c <bt_keys_clear>
			return -EINVAL;
   1d610:	e779      	b.n	1d506 <keys_set+0x1e>
		memcpy(keys->storage_start, val, len);
   1d612:	4622      	mov	r2, r4
   1d614:	a904      	add	r1, sp, #16
   1d616:	300c      	adds	r0, #12
   1d618:	f00d fa3f 	bl	2aa9a <memcpy>
	return 0;
   1d61c:	2400      	movs	r4, #0
   1d61e:	e774      	b.n	1d50a <keys_set+0x22>
   1d620:	0002d990 	.word	0x0002d990
   1d624:	0002d948 	.word	0x0002d948
   1d628:	0002fd91 	.word	0x0002fd91
   1d62c:	00031710 	.word	0x00031710
   1d630:	0003103c 	.word	0x0003103c
   1d634:	00031058 	.word	0x00031058
   1d638:	0003172f 	.word	0x0003172f
   1d63c:	00031752 	.word	0x00031752
   1d640:	00031771 	.word	0x00031771

0001d644 <bt_keys_store>:
{
   1d644:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1d646:	4605      	mov	r5, r0
{
   1d648:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1d64a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1d64e:	4604      	mov	r4, r0
	if (keys->id) {
   1d650:	b30a      	cbz	r2, 1d696 <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   1d652:	ae02      	add	r6, sp, #8
   1d654:	2104      	movs	r1, #4
   1d656:	4630      	mov	r0, r6
   1d658:	f00a ffee 	bl	28638 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d65c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d65e:	4a0f      	ldr	r2, [pc, #60]	; (1d69c <bt_keys_store+0x58>)
   1d660:	462b      	mov	r3, r5
   1d662:	2124      	movs	r1, #36	; 0x24
   1d664:	a803      	add	r0, sp, #12
   1d666:	f7f8 f843 	bl	156f0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1d66a:	f104 010c 	add.w	r1, r4, #12
   1d66e:	2250      	movs	r2, #80	; 0x50
   1d670:	a803      	add	r0, sp, #12
   1d672:	f7f6 f8b5 	bl	137e0 <settings_save_one>
	if (err) {
   1d676:	4604      	mov	r4, r0
   1d678:	b150      	cbz	r0, 1d690 <bt_keys_store+0x4c>
   1d67a:	4a09      	ldr	r2, [pc, #36]	; (1d6a0 <bt_keys_store+0x5c>)
   1d67c:	4b09      	ldr	r3, [pc, #36]	; (1d6a4 <bt_keys_store+0x60>)
   1d67e:	1ad2      	subs	r2, r2, r3
   1d680:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   1d682:	0192      	lsls	r2, r2, #6
   1d684:	4601      	mov	r1, r0
   1d686:	f042 0201 	orr.w	r2, r2, #1
   1d68a:	4807      	ldr	r0, [pc, #28]	; (1d6a8 <bt_keys_store+0x64>)
   1d68c:	f00b fa9c 	bl	28bc8 <log_1>
}
   1d690:	4620      	mov	r0, r4
   1d692:	b00c      	add	sp, #48	; 0x30
   1d694:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1d696:	9200      	str	r2, [sp, #0]
   1d698:	e7e1      	b.n	1d65e <bt_keys_store+0x1a>
   1d69a:	bf00      	nop
   1d69c:	000317af 	.word	0x000317af
   1d6a0:	0002d990 	.word	0x0002d990
   1d6a4:	0002d948 	.word	0x0002d948
   1d6a8:	0003178f 	.word	0x0003178f

0001d6ac <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d6ac:	4b02      	ldr	r3, [pc, #8]	; (1d6b8 <net_buf_pool_get+0xc>)
   1d6ae:	2234      	movs	r2, #52	; 0x34
   1d6b0:	fb02 3000 	mla	r0, r2, r0, r3
   1d6b4:	4770      	bx	lr
   1d6b6:	bf00      	nop
   1d6b8:	200009a8 	.word	0x200009a8

0001d6bc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d6bc:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1d6be:	4a07      	ldr	r2, [pc, #28]	; (1d6dc <net_buf_id+0x20>)
   1d6c0:	2134      	movs	r1, #52	; 0x34
   1d6c2:	fb01 2303 	mla	r3, r1, r3, r2
   1d6c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d6c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1d6cc:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1d6ce:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d6d0:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1d6d4:	fbb0 f0f3 	udiv	r0, r0, r3
   1d6d8:	4770      	bx	lr
   1d6da:	bf00      	nop
   1d6dc:	200009a8 	.word	0x200009a8

0001d6e0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d6e0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d6e2:	4a0a      	ldr	r2, [pc, #40]	; (1d70c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d6e4:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d6e6:	2434      	movs	r4, #52	; 0x34
   1d6e8:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1d6ec:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d6f0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d6f2:	6823      	ldr	r3, [r4, #0]
   1d6f4:	429a      	cmp	r2, r3
   1d6f6:	bf94      	ite	ls
   1d6f8:	600a      	strls	r2, [r1, #0]
   1d6fa:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d6fc:	f7ff ffde 	bl	1d6bc <net_buf_id>
   1d700:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d704:	fb02 3000 	mla	r0, r2, r0, r3
   1d708:	bd10      	pop	{r4, pc}
   1d70a:	bf00      	nop
   1d70c:	200009a8 	.word	0x200009a8

0001d710 <net_buf_reset>:
{
   1d710:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1d712:	7943      	ldrb	r3, [r0, #5]
{
   1d714:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1d716:	b14b      	cbz	r3, 1d72c <net_buf_reset+0x1c>
   1d718:	490d      	ldr	r1, [pc, #52]	; (1d750 <net_buf_reset+0x40>)
   1d71a:	480e      	ldr	r0, [pc, #56]	; (1d754 <net_buf_reset+0x44>)
   1d71c:	4a0e      	ldr	r2, [pc, #56]	; (1d758 <net_buf_reset+0x48>)
   1d71e:	2356      	movs	r3, #86	; 0x56
   1d720:	f00b f826 	bl	28770 <printk>
   1d724:	480c      	ldr	r0, [pc, #48]	; (1d758 <net_buf_reset+0x48>)
   1d726:	2156      	movs	r1, #86	; 0x56
   1d728:	f00b fa13 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1d72c:	6823      	ldr	r3, [r4, #0]
   1d72e:	b14b      	cbz	r3, 1d744 <net_buf_reset+0x34>
   1d730:	490a      	ldr	r1, [pc, #40]	; (1d75c <net_buf_reset+0x4c>)
   1d732:	4808      	ldr	r0, [pc, #32]	; (1d754 <net_buf_reset+0x44>)
   1d734:	4a08      	ldr	r2, [pc, #32]	; (1d758 <net_buf_reset+0x48>)
   1d736:	2357      	movs	r3, #87	; 0x57
   1d738:	f00b f81a 	bl	28770 <printk>
   1d73c:	4806      	ldr	r0, [pc, #24]	; (1d758 <net_buf_reset+0x48>)
   1d73e:	2157      	movs	r1, #87	; 0x57
   1d740:	f00b fa07 	bl	28b52 <assert_post_action>
	buf->len  = 0U;
   1d744:	2300      	movs	r3, #0
   1d746:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1d748:	6923      	ldr	r3, [r4, #16]
   1d74a:	60a3      	str	r3, [r4, #8]
}
   1d74c:	bd10      	pop	{r4, pc}
   1d74e:	bf00      	nop
   1d750:	000317e0 	.word	0x000317e0
   1d754:	0002e915 	.word	0x0002e915
   1d758:	000317bc 	.word	0x000317bc
   1d75c:	000317f1 	.word	0x000317f1

0001d760 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d764:	4605      	mov	r5, r0
   1d766:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1d768:	4610      	mov	r0, r2
   1d76a:	4619      	mov	r1, r3
{
   1d76c:	4616      	mov	r6, r2
   1d76e:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1d770:	f00f fe68 	bl	2d444 <sys_clock_timeout_end_calc>
   1d774:	4681      	mov	r9, r0
   1d776:	468a      	mov	sl, r1
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1d778:	b94d      	cbnz	r5, 1d78e <net_buf_alloc_len+0x2e>
   1d77a:	4978      	ldr	r1, [pc, #480]	; (1d95c <net_buf_alloc_len+0x1fc>)
   1d77c:	4878      	ldr	r0, [pc, #480]	; (1d960 <net_buf_alloc_len+0x200>)
   1d77e:	4a79      	ldr	r2, [pc, #484]	; (1d964 <net_buf_alloc_len+0x204>)
   1d780:	23f4      	movs	r3, #244	; 0xf4
   1d782:	f00a fff5 	bl	28770 <printk>
   1d786:	4877      	ldr	r0, [pc, #476]	; (1d964 <net_buf_alloc_len+0x204>)
   1d788:	21f4      	movs	r1, #244	; 0xf4
   1d78a:	f00b f9e2 	bl	28b52 <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1d78e:	f105 081c 	add.w	r8, r5, #28
	__asm__ volatile(
   1d792:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d796:	f3ef 8b11 	mrs	fp, BASEPRI
   1d79a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d79e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d7a2:	4640      	mov	r0, r8
   1d7a4:	f004 fdda 	bl	2235c <z_spin_lock_valid>
   1d7a8:	b968      	cbnz	r0, 1d7c6 <net_buf_alloc_len+0x66>
   1d7aa:	4a6f      	ldr	r2, [pc, #444]	; (1d968 <net_buf_alloc_len+0x208>)
   1d7ac:	496f      	ldr	r1, [pc, #444]	; (1d96c <net_buf_alloc_len+0x20c>)
   1d7ae:	486c      	ldr	r0, [pc, #432]	; (1d960 <net_buf_alloc_len+0x200>)
   1d7b0:	2381      	movs	r3, #129	; 0x81
   1d7b2:	f00a ffdd 	bl	28770 <printk>
   1d7b6:	486e      	ldr	r0, [pc, #440]	; (1d970 <net_buf_alloc_len+0x210>)
   1d7b8:	4641      	mov	r1, r8
   1d7ba:	f00a ffd9 	bl	28770 <printk>
   1d7be:	486a      	ldr	r0, [pc, #424]	; (1d968 <net_buf_alloc_len+0x208>)
   1d7c0:	2181      	movs	r1, #129	; 0x81
   1d7c2:	f00b f9c6 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d7c6:	4640      	mov	r0, r8
   1d7c8:	f004 fde6 	bl	22398 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d7cc:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1d7ce:	2b00      	cmp	r3, #0
   1d7d0:	f000 8082 	beq.w	1d8d8 <net_buf_alloc_len+0x178>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d7d4:	8c2a      	ldrh	r2, [r5, #32]
   1d7d6:	429a      	cmp	r2, r3
   1d7d8:	d952      	bls.n	1d880 <net_buf_alloc_len+0x120>
	return z_impl_k_queue_get(queue, timeout);
   1d7da:	2200      	movs	r2, #0
   1d7dc:	2300      	movs	r3, #0
   1d7de:	4628      	mov	r0, r5
   1d7e0:	f005 f8ce 	bl	22980 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d7e4:	4604      	mov	r4, r0
   1d7e6:	2800      	cmp	r0, #0
   1d7e8:	d04a      	beq.n	1d880 <net_buf_alloc_len+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d7ea:	4640      	mov	r0, r8
   1d7ec:	f004 fdc4 	bl	22378 <z_spin_unlock_valid>
   1d7f0:	b968      	cbnz	r0, 1d80e <net_buf_alloc_len+0xae>
   1d7f2:	4a5d      	ldr	r2, [pc, #372]	; (1d968 <net_buf_alloc_len+0x208>)
   1d7f4:	495f      	ldr	r1, [pc, #380]	; (1d974 <net_buf_alloc_len+0x214>)
   1d7f6:	485a      	ldr	r0, [pc, #360]	; (1d960 <net_buf_alloc_len+0x200>)
   1d7f8:	23ac      	movs	r3, #172	; 0xac
   1d7fa:	f00a ffb9 	bl	28770 <printk>
   1d7fe:	485e      	ldr	r0, [pc, #376]	; (1d978 <net_buf_alloc_len+0x218>)
   1d800:	4641      	mov	r1, r8
   1d802:	f00a ffb5 	bl	28770 <printk>
   1d806:	4858      	ldr	r0, [pc, #352]	; (1d968 <net_buf_alloc_len+0x208>)
   1d808:	21ac      	movs	r1, #172	; 0xac
   1d80a:	f00b f9a2 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   1d80e:	f38b 8811 	msr	BASEPRI, fp
   1d812:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d816:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1d81a:	f1b8 0f00 	cmp.w	r8, #0
   1d81e:	f000 8099 	beq.w	1d954 <net_buf_alloc_len+0x1f4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d822:	ea56 0307 	orrs.w	r3, r6, r7
   1d826:	d010      	beq.n	1d84a <net_buf_alloc_len+0xea>
   1d828:	1c7b      	adds	r3, r7, #1
   1d82a:	bf08      	it	eq
   1d82c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1d830:	d00b      	beq.n	1d84a <net_buf_alloc_len+0xea>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1d832:	f007 fc65 	bl	25100 <sys_clock_tick_get>
   1d836:	ebb9 0600 	subs.w	r6, r9, r0
   1d83a:	eb6a 0701 	sbc.w	r7, sl, r1
   1d83e:	2e00      	cmp	r6, #0
   1d840:	f177 0300 	sbcs.w	r3, r7, #0
   1d844:	bfbc      	itt	lt
   1d846:	2600      	movlt	r6, #0
   1d848:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d84a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d84c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1d97c <net_buf_alloc_len+0x21c>
   1d850:	f04f 0a34 	mov.w	sl, #52	; 0x34
   1d854:	fb0a 9303 	mla	r3, sl, r3, r9
   1d858:	4632      	mov	r2, r6
   1d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d85c:	681b      	ldr	r3, [r3, #0]
   1d85e:	a901      	add	r1, sp, #4
   1d860:	681d      	ldr	r5, [r3, #0]
   1d862:	4620      	mov	r0, r4
   1d864:	463b      	mov	r3, r7
   1d866:	47a8      	blx	r5
   1d868:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d86a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d86c:	2800      	cmp	r0, #0
   1d86e:	d155      	bne.n	1d91c <net_buf_alloc_len+0x1bc>
	k_lifo_put(&pool->free, buf);
   1d870:	79a0      	ldrb	r0, [r4, #6]
   1d872:	4621      	mov	r1, r4
   1d874:	fb00 900a 	mla	r0, r0, sl, r9
   1d878:	f00f fd41 	bl	2d2fe <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d87c:	462c      	mov	r4, r5
}
   1d87e:	e049      	b.n	1d914 <net_buf_alloc_len+0x1b4>
		uninit_count = pool->uninit_count--;
   1d880:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1d882:	1e63      	subs	r3, r4, #1
   1d884:	846b      	strh	r3, [r5, #34]	; 0x22
   1d886:	4640      	mov	r0, r8
   1d888:	f004 fd76 	bl	22378 <z_spin_unlock_valid>
   1d88c:	b968      	cbnz	r0, 1d8aa <net_buf_alloc_len+0x14a>
   1d88e:	4a36      	ldr	r2, [pc, #216]	; (1d968 <net_buf_alloc_len+0x208>)
   1d890:	4938      	ldr	r1, [pc, #224]	; (1d974 <net_buf_alloc_len+0x214>)
   1d892:	4833      	ldr	r0, [pc, #204]	; (1d960 <net_buf_alloc_len+0x200>)
   1d894:	23ac      	movs	r3, #172	; 0xac
   1d896:	f00a ff6b 	bl	28770 <printk>
   1d89a:	4837      	ldr	r0, [pc, #220]	; (1d978 <net_buf_alloc_len+0x218>)
   1d89c:	4641      	mov	r1, r8
   1d89e:	f00a ff67 	bl	28770 <printk>
   1d8a2:	4831      	ldr	r0, [pc, #196]	; (1d968 <net_buf_alloc_len+0x208>)
   1d8a4:	21ac      	movs	r1, #172	; 0xac
   1d8a6:	f00b f954 	bl	28b52 <assert_post_action>
   1d8aa:	f38b 8811 	msr	BASEPRI, fp
   1d8ae:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1d8b2:	8c2b      	ldrh	r3, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d8b4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1d8b8:	1b1c      	subs	r4, r3, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d8ba:	f102 0017 	add.w	r0, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1d8be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1d8c0:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1d8c4:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   1d8c8:	482c      	ldr	r0, [pc, #176]	; (1d97c <net_buf_alloc_len+0x21c>)
   1d8ca:	4b2d      	ldr	r3, [pc, #180]	; (1d980 <net_buf_alloc_len+0x220>)
	buf->user_data_size = pool->user_data_size;
   1d8cc:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1d8ce:	1a2d      	subs	r5, r5, r0
   1d8d0:	10ad      	asrs	r5, r5, #2
   1d8d2:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d8d4:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d8d6:	e79e      	b.n	1d816 <net_buf_alloc_len+0xb6>
   1d8d8:	4640      	mov	r0, r8
   1d8da:	f004 fd4d 	bl	22378 <z_spin_unlock_valid>
   1d8de:	b968      	cbnz	r0, 1d8fc <net_buf_alloc_len+0x19c>
   1d8e0:	4a21      	ldr	r2, [pc, #132]	; (1d968 <net_buf_alloc_len+0x208>)
   1d8e2:	4924      	ldr	r1, [pc, #144]	; (1d974 <net_buf_alloc_len+0x214>)
   1d8e4:	481e      	ldr	r0, [pc, #120]	; (1d960 <net_buf_alloc_len+0x200>)
   1d8e6:	23ac      	movs	r3, #172	; 0xac
   1d8e8:	f00a ff42 	bl	28770 <printk>
   1d8ec:	4822      	ldr	r0, [pc, #136]	; (1d978 <net_buf_alloc_len+0x218>)
   1d8ee:	4641      	mov	r1, r8
   1d8f0:	f00a ff3e 	bl	28770 <printk>
   1d8f4:	481c      	ldr	r0, [pc, #112]	; (1d968 <net_buf_alloc_len+0x208>)
   1d8f6:	21ac      	movs	r1, #172	; 0xac
   1d8f8:	f00b f92b 	bl	28b52 <assert_post_action>
   1d8fc:	f38b 8811 	msr	BASEPRI, fp
   1d900:	f3bf 8f6f 	isb	sy
   1d904:	4632      	mov	r2, r6
   1d906:	463b      	mov	r3, r7
   1d908:	4628      	mov	r0, r5
   1d90a:	f005 f839 	bl	22980 <z_impl_k_queue_get>
	if (!buf) {
   1d90e:	4604      	mov	r4, r0
   1d910:	2800      	cmp	r0, #0
   1d912:	d180      	bne.n	1d816 <net_buf_alloc_len+0xb6>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d914:	4620      	mov	r0, r4
   1d916:	b003      	add	sp, #12
   1d918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1d91c:	9b01      	ldr	r3, [sp, #4]
   1d91e:	4598      	cmp	r8, r3
   1d920:	d90e      	bls.n	1d940 <net_buf_alloc_len+0x1e0>
   1d922:	4918      	ldr	r1, [pc, #96]	; (1d984 <net_buf_alloc_len+0x224>)
   1d924:	4a0f      	ldr	r2, [pc, #60]	; (1d964 <net_buf_alloc_len+0x204>)
   1d926:	480e      	ldr	r0, [pc, #56]	; (1d960 <net_buf_alloc_len+0x200>)
   1d928:	f240 1355 	movw	r3, #341	; 0x155
   1d92c:	f00a ff20 	bl	28770 <printk>
   1d930:	4815      	ldr	r0, [pc, #84]	; (1d988 <net_buf_alloc_len+0x228>)
   1d932:	f00a ff1d 	bl	28770 <printk>
   1d936:	480b      	ldr	r0, [pc, #44]	; (1d964 <net_buf_alloc_len+0x204>)
   1d938:	f240 1155 	movw	r1, #341	; 0x155
   1d93c:	f00b f909 	bl	28b52 <assert_post_action>
	buf->frags = NULL;
   1d940:	2300      	movs	r3, #0
   1d942:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d944:	2301      	movs	r3, #1
   1d946:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1d948:	9b01      	ldr	r3, [sp, #4]
   1d94a:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1d94c:	4620      	mov	r0, r4
   1d94e:	f7ff fedf 	bl	1d710 <net_buf_reset>
	return buf;
   1d952:	e7df      	b.n	1d914 <net_buf_alloc_len+0x1b4>
		buf->__buf = NULL;
   1d954:	f8c4 8010 	str.w	r8, [r4, #16]
   1d958:	e7f2      	b.n	1d940 <net_buf_alloc_len+0x1e0>
   1d95a:	bf00      	nop
   1d95c:	0003180b 	.word	0x0003180b
   1d960:	0002e915 	.word	0x0002e915
   1d964:	000317bc 	.word	0x000317bc
   1d968:	0002ebfd 	.word	0x0002ebfd
   1d96c:	0002ec4f 	.word	0x0002ec4f
   1d970:	0002ec64 	.word	0x0002ec64
   1d974:	0002ec23 	.word	0x0002ec23
   1d978:	0002ec3a 	.word	0x0002ec3a
   1d97c:	200009a8 	.word	0x200009a8
   1d980:	c4ec4ec5 	.word	0xc4ec4ec5
   1d984:	00031810 	.word	0x00031810
   1d988:	00031821 	.word	0x00031821

0001d98c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1d98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d990:	4606      	mov	r6, r0
   1d992:	f004 fff5 	bl	22980 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1d996:	4605      	mov	r5, r0
   1d998:	b150      	cbz	r0, 1d9b0 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1d99a:	4f13      	ldr	r7, [pc, #76]	; (1d9e8 <net_buf_get+0x5c>)
   1d99c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1d9ec <net_buf_get+0x60>
   1d9a0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1d9f0 <net_buf_get+0x64>
   1d9a4:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d9a6:	7963      	ldrb	r3, [r4, #5]
   1d9a8:	f013 0301 	ands.w	r3, r3, #1
   1d9ac:	d103      	bne.n	1d9b6 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1d9ae:	6023      	str	r3, [r4, #0]

	return buf;
}
   1d9b0:	4628      	mov	r0, r5
   1d9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d9b6:	2200      	movs	r2, #0
   1d9b8:	2300      	movs	r3, #0
   1d9ba:	4630      	mov	r0, r6
   1d9bc:	f004 ffe0 	bl	22980 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1d9c0:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1d9c2:	b958      	cbnz	r0, 1d9dc <net_buf_get+0x50>
   1d9c4:	4641      	mov	r1, r8
   1d9c6:	4648      	mov	r0, r9
   1d9c8:	f240 13ad 	movw	r3, #429	; 0x1ad
   1d9cc:	463a      	mov	r2, r7
   1d9ce:	f00a fecf 	bl	28770 <printk>
   1d9d2:	f240 11ad 	movw	r1, #429	; 0x1ad
   1d9d6:	4638      	mov	r0, r7
   1d9d8:	f00b f8bb 	bl	28b52 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1d9dc:	7963      	ldrb	r3, [r4, #5]
   1d9de:	f023 0301 	bic.w	r3, r3, #1
   1d9e2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d9e4:	6824      	ldr	r4, [r4, #0]
   1d9e6:	e7de      	b.n	1d9a6 <net_buf_get+0x1a>
   1d9e8:	000317bc 	.word	0x000317bc
   1d9ec:	00031824 	.word	0x00031824
   1d9f0:	0002e915 	.word	0x0002e915

0001d9f4 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1d9f4:	b538      	push	{r3, r4, r5, lr}
   1d9f6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1d9f8:	4604      	mov	r4, r0
   1d9fa:	b958      	cbnz	r0, 1da14 <net_buf_simple_reserve+0x20>
   1d9fc:	490e      	ldr	r1, [pc, #56]	; (1da38 <net_buf_simple_reserve+0x44>)
   1d9fe:	480f      	ldr	r0, [pc, #60]	; (1da3c <net_buf_simple_reserve+0x48>)
   1da00:	4a0f      	ldr	r2, [pc, #60]	; (1da40 <net_buf_simple_reserve+0x4c>)
   1da02:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1da06:	f00a feb3 	bl	28770 <printk>
   1da0a:	480d      	ldr	r0, [pc, #52]	; (1da40 <net_buf_simple_reserve+0x4c>)
   1da0c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1da10:	f00b f89f 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1da14:	88a3      	ldrh	r3, [r4, #4]
   1da16:	b15b      	cbz	r3, 1da30 <net_buf_simple_reserve+0x3c>
   1da18:	490a      	ldr	r1, [pc, #40]	; (1da44 <net_buf_simple_reserve+0x50>)
   1da1a:	4808      	ldr	r0, [pc, #32]	; (1da3c <net_buf_simple_reserve+0x48>)
   1da1c:	4a08      	ldr	r2, [pc, #32]	; (1da40 <net_buf_simple_reserve+0x4c>)
   1da1e:	f240 13c5 	movw	r3, #453	; 0x1c5
   1da22:	f00a fea5 	bl	28770 <printk>
   1da26:	4806      	ldr	r0, [pc, #24]	; (1da40 <net_buf_simple_reserve+0x4c>)
   1da28:	f240 11c5 	movw	r1, #453	; 0x1c5
   1da2c:	f00b f891 	bl	28b52 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1da30:	68a3      	ldr	r3, [r4, #8]
   1da32:	442b      	add	r3, r5
   1da34:	6023      	str	r3, [r4, #0]
}
   1da36:	bd38      	pop	{r3, r4, r5, pc}
   1da38:	0002ff40 	.word	0x0002ff40
   1da3c:	0002e915 	.word	0x0002e915
   1da40:	000317bc 	.word	0x000317bc
   1da44:	00031830 	.word	0x00031830

0001da48 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1da48:	b538      	push	{r3, r4, r5, lr}
   1da4a:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1da4c:	4605      	mov	r5, r0
   1da4e:	b958      	cbnz	r0, 1da68 <net_buf_put+0x20>
   1da50:	4913      	ldr	r1, [pc, #76]	; (1daa0 <net_buf_put+0x58>)
   1da52:	4814      	ldr	r0, [pc, #80]	; (1daa4 <net_buf_put+0x5c>)
   1da54:	4a14      	ldr	r2, [pc, #80]	; (1daa8 <net_buf_put+0x60>)
   1da56:	f44f 7300 	mov.w	r3, #512	; 0x200
   1da5a:	f00a fe89 	bl	28770 <printk>
   1da5e:	4812      	ldr	r0, [pc, #72]	; (1daa8 <net_buf_put+0x60>)
   1da60:	f44f 7100 	mov.w	r1, #512	; 0x200
   1da64:	f00b f875 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1da68:	b95c      	cbnz	r4, 1da82 <net_buf_put+0x3a>
   1da6a:	4910      	ldr	r1, [pc, #64]	; (1daac <net_buf_put+0x64>)
   1da6c:	480d      	ldr	r0, [pc, #52]	; (1daa4 <net_buf_put+0x5c>)
   1da6e:	4a0e      	ldr	r2, [pc, #56]	; (1daa8 <net_buf_put+0x60>)
   1da70:	f240 2301 	movw	r3, #513	; 0x201
   1da74:	f00a fe7c 	bl	28770 <printk>
   1da78:	480b      	ldr	r0, [pc, #44]	; (1daa8 <net_buf_put+0x60>)
   1da7a:	f240 2101 	movw	r1, #513	; 0x201
   1da7e:	f00b f868 	bl	28b52 <assert_post_action>
{
   1da82:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1da84:	6811      	ldr	r1, [r2, #0]
   1da86:	b929      	cbnz	r1, 1da94 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1da88:	4621      	mov	r1, r4
   1da8a:	4628      	mov	r0, r5
}
   1da8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1da90:	f004 bf18 	b.w	228c4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1da94:	7953      	ldrb	r3, [r2, #5]
   1da96:	f043 0301 	orr.w	r3, r3, #1
   1da9a:	7153      	strb	r3, [r2, #5]
   1da9c:	460a      	mov	r2, r1
   1da9e:	e7f1      	b.n	1da84 <net_buf_put+0x3c>
   1daa0:	0003183f 	.word	0x0003183f
   1daa4:	0002e915 	.word	0x0002e915
   1daa8:	000317bc 	.word	0x000317bc
   1daac:	0002ff40 	.word	0x0002ff40

0001dab0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1dab4:	4605      	mov	r5, r0
   1dab6:	b328      	cbz	r0, 1db04 <net_buf_unref+0x54>
   1dab8:	4e1c      	ldr	r6, [pc, #112]	; (1db2c <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1daba:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1dabc:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1dac0:	462c      	mov	r4, r5
   1dac2:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1dac4:	7923      	ldrb	r3, [r4, #4]
   1dac6:	3b01      	subs	r3, #1
   1dac8:	b2db      	uxtb	r3, r3
   1daca:	7123      	strb	r3, [r4, #4]
   1dacc:	b9c3      	cbnz	r3, 1db00 <net_buf_unref+0x50>
		if (buf->__buf) {
   1dace:	6921      	ldr	r1, [r4, #16]
   1dad0:	b159      	cbz	r1, 1daea <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1dad2:	7963      	ldrb	r3, [r4, #5]
   1dad4:	079b      	lsls	r3, r3, #30
   1dad6:	d407      	bmi.n	1dae8 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   1dad8:	79a3      	ldrb	r3, [r4, #6]
   1dada:	fb08 6303 	mla	r3, r8, r3, r6
   1dade:	4620      	mov	r0, r4
   1dae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dae2:	681b      	ldr	r3, [r3, #0]
   1dae4:	689b      	ldr	r3, [r3, #8]
   1dae6:	4798      	blx	r3
			buf->__buf = NULL;
   1dae8:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1daea:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1daec:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1daee:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1daf2:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1daf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1daf6:	b19b      	cbz	r3, 1db20 <net_buf_unref+0x70>
			pool->destroy(buf);
   1daf8:	4620      	mov	r0, r4
   1dafa:	4798      	blx	r3
	while (buf) {
   1dafc:	2d00      	cmp	r5, #0
   1dafe:	d1df      	bne.n	1dac0 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1db00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1db04:	490a      	ldr	r1, [pc, #40]	; (1db30 <net_buf_unref+0x80>)
   1db06:	480b      	ldr	r0, [pc, #44]	; (1db34 <net_buf_unref+0x84>)
   1db08:	4a0b      	ldr	r2, [pc, #44]	; (1db38 <net_buf_unref+0x88>)
   1db0a:	f44f 7304 	mov.w	r3, #528	; 0x210
   1db0e:	f00a fe2f 	bl	28770 <printk>
}
   1db12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1db16:	4808      	ldr	r0, [pc, #32]	; (1db38 <net_buf_unref+0x88>)
   1db18:	f44f 7104 	mov.w	r1, #528	; 0x210
   1db1c:	f00b b819 	b.w	28b52 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1db20:	4621      	mov	r1, r4
   1db22:	fb00 6008 	mla	r0, r0, r8, r6
   1db26:	f00f fbea 	bl	2d2fe <k_queue_prepend>
}
   1db2a:	e7e7      	b.n	1dafc <net_buf_unref+0x4c>
   1db2c:	200009a8 	.word	0x200009a8
   1db30:	0002ff40 	.word	0x0002ff40
   1db34:	0002e915 	.word	0x0002e915
   1db38:	000317bc 	.word	0x000317bc

0001db3c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1db3c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1db3e:	4604      	mov	r4, r0
   1db40:	b958      	cbnz	r0, 1db5a <net_buf_ref+0x1e>
   1db42:	4908      	ldr	r1, [pc, #32]	; (1db64 <net_buf_ref+0x28>)
   1db44:	4808      	ldr	r0, [pc, #32]	; (1db68 <net_buf_ref+0x2c>)
   1db46:	4a09      	ldr	r2, [pc, #36]	; (1db6c <net_buf_ref+0x30>)
   1db48:	f240 233f 	movw	r3, #575	; 0x23f
   1db4c:	f00a fe10 	bl	28770 <printk>
   1db50:	4806      	ldr	r0, [pc, #24]	; (1db6c <net_buf_ref+0x30>)
   1db52:	f240 213f 	movw	r1, #575	; 0x23f
   1db56:	f00a fffc 	bl	28b52 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1db5a:	7923      	ldrb	r3, [r4, #4]
   1db5c:	3301      	adds	r3, #1
   1db5e:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1db60:	4620      	mov	r0, r4
   1db62:	bd10      	pop	{r4, pc}
   1db64:	0002ff40 	.word	0x0002ff40
   1db68:	0002e915 	.word	0x0002e915
   1db6c:	000317bc 	.word	0x000317bc

0001db70 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1db70:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1db72:	4604      	mov	r4, r0
   1db74:	b958      	cbnz	r0, 1db8e <net_buf_frag_last+0x1e>
   1db76:	4908      	ldr	r1, [pc, #32]	; (1db98 <net_buf_frag_last+0x28>)
   1db78:	4808      	ldr	r0, [pc, #32]	; (1db9c <net_buf_frag_last+0x2c>)
   1db7a:	4a09      	ldr	r2, [pc, #36]	; (1dba0 <net_buf_frag_last+0x30>)
   1db7c:	f44f 731f 	mov.w	r3, #636	; 0x27c
   1db80:	f00a fdf6 	bl	28770 <printk>
   1db84:	4806      	ldr	r0, [pc, #24]	; (1dba0 <net_buf_frag_last+0x30>)
   1db86:	f44f 711f 	mov.w	r1, #636	; 0x27c
   1db8a:	f00a ffe2 	bl	28b52 <assert_post_action>

	while (buf->frags) {
   1db8e:	4620      	mov	r0, r4
   1db90:	6824      	ldr	r4, [r4, #0]
   1db92:	2c00      	cmp	r4, #0
   1db94:	d1fb      	bne.n	1db8e <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1db96:	bd10      	pop	{r4, pc}
   1db98:	0002ff40 	.word	0x0002ff40
   1db9c:	0002e915 	.word	0x0002e915
   1dba0:	000317bc 	.word	0x000317bc

0001dba4 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1dba4:	b538      	push	{r3, r4, r5, lr}
   1dba6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1dba8:	4604      	mov	r4, r0
   1dbaa:	b958      	cbnz	r0, 1dbc4 <net_buf_frag_insert+0x20>
   1dbac:	4910      	ldr	r1, [pc, #64]	; (1dbf0 <net_buf_frag_insert+0x4c>)
   1dbae:	4811      	ldr	r0, [pc, #68]	; (1dbf4 <net_buf_frag_insert+0x50>)
   1dbb0:	4a11      	ldr	r2, [pc, #68]	; (1dbf8 <net_buf_frag_insert+0x54>)
   1dbb2:	f240 2387 	movw	r3, #647	; 0x287
   1dbb6:	f00a fddb 	bl	28770 <printk>
   1dbba:	480f      	ldr	r0, [pc, #60]	; (1dbf8 <net_buf_frag_insert+0x54>)
   1dbbc:	f240 2187 	movw	r1, #647	; 0x287
   1dbc0:	f00a ffc7 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1dbc4:	b95d      	cbnz	r5, 1dbde <net_buf_frag_insert+0x3a>
   1dbc6:	490d      	ldr	r1, [pc, #52]	; (1dbfc <net_buf_frag_insert+0x58>)
   1dbc8:	480a      	ldr	r0, [pc, #40]	; (1dbf4 <net_buf_frag_insert+0x50>)
   1dbca:	4a0b      	ldr	r2, [pc, #44]	; (1dbf8 <net_buf_frag_insert+0x54>)
   1dbcc:	f44f 7322 	mov.w	r3, #648	; 0x288
   1dbd0:	f00a fdce 	bl	28770 <printk>
   1dbd4:	4808      	ldr	r0, [pc, #32]	; (1dbf8 <net_buf_frag_insert+0x54>)
   1dbd6:	f44f 7122 	mov.w	r1, #648	; 0x288
   1dbda:	f00a ffba 	bl	28b52 <assert_post_action>

	if (parent->frags) {
   1dbde:	6823      	ldr	r3, [r4, #0]
   1dbe0:	b123      	cbz	r3, 1dbec <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   1dbe2:	4628      	mov	r0, r5
   1dbe4:	f7ff ffc4 	bl	1db70 <net_buf_frag_last>
   1dbe8:	6823      	ldr	r3, [r4, #0]
   1dbea:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1dbec:	6025      	str	r5, [r4, #0]
}
   1dbee:	bd38      	pop	{r3, r4, r5, pc}
   1dbf0:	00031844 	.word	0x00031844
   1dbf4:	0002e915 	.word	0x0002e915
   1dbf8:	000317bc 	.word	0x000317bc
   1dbfc:	0003184b 	.word	0x0003184b

0001dc00 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1dc00:	b538      	push	{r3, r4, r5, lr}
   1dc02:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1dc04:	460d      	mov	r5, r1
   1dc06:	b959      	cbnz	r1, 1dc20 <net_buf_frag_add+0x20>
   1dc08:	490c      	ldr	r1, [pc, #48]	; (1dc3c <net_buf_frag_add+0x3c>)
   1dc0a:	480d      	ldr	r0, [pc, #52]	; (1dc40 <net_buf_frag_add+0x40>)
   1dc0c:	4a0d      	ldr	r2, [pc, #52]	; (1dc44 <net_buf_frag_add+0x44>)
   1dc0e:	f240 2393 	movw	r3, #659	; 0x293
   1dc12:	f00a fdad 	bl	28770 <printk>
   1dc16:	480b      	ldr	r0, [pc, #44]	; (1dc44 <net_buf_frag_add+0x44>)
   1dc18:	f240 2193 	movw	r1, #659	; 0x293
   1dc1c:	f00a ff99 	bl	28b52 <assert_post_action>

	if (!head) {
   1dc20:	b924      	cbnz	r4, 1dc2c <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   1dc22:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1dc24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1dc28:	f7ff bf88 	b.w	1db3c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1dc2c:	4620      	mov	r0, r4
   1dc2e:	f7ff ff9f 	bl	1db70 <net_buf_frag_last>
   1dc32:	4629      	mov	r1, r5
   1dc34:	f7ff ffb6 	bl	1dba4 <net_buf_frag_insert>
}
   1dc38:	4620      	mov	r0, r4
   1dc3a:	bd38      	pop	{r3, r4, r5, pc}
   1dc3c:	0003184b 	.word	0x0003184b
   1dc40:	0002e915 	.word	0x0002e915
   1dc44:	000317bc 	.word	0x000317bc

0001dc48 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1dc48:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1dc4a:	6882      	ldr	r2, [r0, #8]
   1dc4c:	6803      	ldr	r3, [r0, #0]
   1dc4e:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1dc50:	4299      	cmp	r1, r3
{
   1dc52:	4604      	mov	r4, r0
   1dc54:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1dc56:	d90b      	bls.n	1dc70 <net_buf_simple_push+0x28>
   1dc58:	4909      	ldr	r1, [pc, #36]	; (1dc80 <net_buf_simple_push+0x38>)
   1dc5a:	480a      	ldr	r0, [pc, #40]	; (1dc84 <net_buf_simple_push+0x3c>)
   1dc5c:	4a0a      	ldr	r2, [pc, #40]	; (1dc88 <net_buf_simple_push+0x40>)
   1dc5e:	f240 4317 	movw	r3, #1047	; 0x417
   1dc62:	f00a fd85 	bl	28770 <printk>
   1dc66:	4808      	ldr	r0, [pc, #32]	; (1dc88 <net_buf_simple_push+0x40>)
   1dc68:	f240 4117 	movw	r1, #1047	; 0x417
   1dc6c:	f00a ff71 	bl	28b52 <assert_post_action>
	buf->data -= len;
   1dc70:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1dc72:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1dc74:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1dc76:	440d      	add	r5, r1
	buf->data -= len;
   1dc78:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1dc7a:	80a5      	strh	r5, [r4, #4]
}
   1dc7c:	bd38      	pop	{r3, r4, r5, pc}
   1dc7e:	bf00      	nop
   1dc80:	00031860 	.word	0x00031860
   1dc84:	0002e915 	.word	0x0002e915
   1dc88:	000317bc 	.word	0x000317bc

0001dc8c <net_buf_simple_pull>:
{
   1dc8c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1dc8e:	8883      	ldrh	r3, [r0, #4]
   1dc90:	428b      	cmp	r3, r1
{
   1dc92:	4604      	mov	r4, r0
   1dc94:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1dc96:	d20b      	bcs.n	1dcb0 <net_buf_simple_pull+0x24>
   1dc98:	4909      	ldr	r1, [pc, #36]	; (1dcc0 <net_buf_simple_pull+0x34>)
   1dc9a:	480a      	ldr	r0, [pc, #40]	; (1dcc4 <net_buf_simple_pull+0x38>)
   1dc9c:	4a0a      	ldr	r2, [pc, #40]	; (1dcc8 <net_buf_simple_pull+0x3c>)
   1dc9e:	f240 4377 	movw	r3, #1143	; 0x477
   1dca2:	f00a fd65 	bl	28770 <printk>
   1dca6:	4808      	ldr	r0, [pc, #32]	; (1dcc8 <net_buf_simple_pull+0x3c>)
   1dca8:	f240 4177 	movw	r1, #1143	; 0x477
   1dcac:	f00a ff51 	bl	28b52 <assert_post_action>
	buf->len -= len;
   1dcb0:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1dcb2:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1dcb4:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1dcb6:	4428      	add	r0, r5
	buf->len -= len;
   1dcb8:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1dcba:	6020      	str	r0, [r4, #0]
}
   1dcbc:	bd38      	pop	{r3, r4, r5, pc}
   1dcbe:	bf00      	nop
   1dcc0:	00031850 	.word	0x00031850
   1dcc4:	0002e915 	.word	0x0002e915
   1dcc8:	000317bc 	.word	0x000317bc

0001dccc <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1dccc:	8883      	ldrh	r3, [r0, #4]
   1dcce:	428b      	cmp	r3, r1
{
   1dcd0:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   1dcd2:	6806      	ldr	r6, [r0, #0]
{
   1dcd4:	4604      	mov	r4, r0
   1dcd6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1dcd8:	d20b      	bcs.n	1dcf2 <net_buf_simple_pull_mem+0x26>
   1dcda:	490a      	ldr	r1, [pc, #40]	; (1dd04 <net_buf_simple_pull_mem+0x38>)
   1dcdc:	480a      	ldr	r0, [pc, #40]	; (1dd08 <net_buf_simple_pull_mem+0x3c>)
   1dcde:	4a0b      	ldr	r2, [pc, #44]	; (1dd0c <net_buf_simple_pull_mem+0x40>)
   1dce0:	f240 4383 	movw	r3, #1155	; 0x483
   1dce4:	f00a fd44 	bl	28770 <printk>
   1dce8:	4808      	ldr	r0, [pc, #32]	; (1dd0c <net_buf_simple_pull_mem+0x40>)
   1dcea:	f240 4183 	movw	r1, #1155	; 0x483
   1dcee:	f00a ff30 	bl	28b52 <assert_post_action>
	buf->len -= len;
   1dcf2:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1dcf4:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1dcf6:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1dcf8:	4429      	add	r1, r5
	buf->len -= len;
   1dcfa:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1dcfc:	6021      	str	r1, [r4, #0]
}
   1dcfe:	4630      	mov	r0, r6
   1dd00:	bd70      	pop	{r4, r5, r6, pc}
   1dd02:	bf00      	nop
   1dd04:	00031850 	.word	0x00031850
   1dd08:	0002e915 	.word	0x0002e915
   1dd0c:	000317bc 	.word	0x000317bc

0001dd10 <net_buf_simple_add>:
{
   1dd10:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1dd12:	6803      	ldr	r3, [r0, #0]
   1dd14:	8886      	ldrh	r6, [r0, #4]
   1dd16:	4604      	mov	r4, r0
   1dd18:	460d      	mov	r5, r1
   1dd1a:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1dd1c:	f00e fe50 	bl	2c9c0 <net_buf_simple_tailroom>
   1dd20:	4288      	cmp	r0, r1
   1dd22:	d20b      	bcs.n	1dd3c <net_buf_simple_add+0x2c>
   1dd24:	4908      	ldr	r1, [pc, #32]	; (1dd48 <net_buf_simple_add+0x38>)
   1dd26:	4809      	ldr	r0, [pc, #36]	; (1dd4c <net_buf_simple_add+0x3c>)
   1dd28:	4a09      	ldr	r2, [pc, #36]	; (1dd50 <net_buf_simple_add+0x40>)
   1dd2a:	f44f 734a 	mov.w	r3, #808	; 0x328
   1dd2e:	f00a fd1f 	bl	28770 <printk>
   1dd32:	4807      	ldr	r0, [pc, #28]	; (1dd50 <net_buf_simple_add+0x40>)
   1dd34:	f44f 714a 	mov.w	r1, #808	; 0x328
   1dd38:	f00a ff0b 	bl	28b52 <assert_post_action>
	buf->len += len;
   1dd3c:	88a1      	ldrh	r1, [r4, #4]
   1dd3e:	440d      	add	r5, r1
   1dd40:	80a5      	strh	r5, [r4, #4]
}
   1dd42:	4630      	mov	r0, r6
   1dd44:	bd70      	pop	{r4, r5, r6, pc}
   1dd46:	bf00      	nop
   1dd48:	00031884 	.word	0x00031884
   1dd4c:	0002e915 	.word	0x0002e915
   1dd50:	000317bc 	.word	0x000317bc

0001dd54 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1dd58:	4c0e      	ldr	r4, [pc, #56]	; (1dd94 <onoff_start+0x40>)
   1dd5a:	1b05      	subs	r5, r0, r4
   1dd5c:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   1dd60:	250c      	movs	r5, #12
   1dd62:	435d      	muls	r5, r3
{
   1dd64:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1dd66:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   1dd6a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1dd6c:	4420      	add	r0, r4
   1dd6e:	2140      	movs	r1, #64	; 0x40
   1dd70:	f00e fe41 	bl	2c9f6 <set_starting_state>
	if (err < 0) {
   1dd74:	1e01      	subs	r1, r0, #0
   1dd76:	db08      	blt.n	1dd8a <onoff_start+0x36>
	subdata->cb = cb;
   1dd78:	4b07      	ldr	r3, [pc, #28]	; (1dd98 <onoff_start+0x44>)
   1dd7a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1dd7c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   1dd80:	4b06      	ldr	r3, [pc, #24]	; (1dd9c <onoff_start+0x48>)
   1dd82:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1dd84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1dd88:	4718      	bx	r3
		notify(mgr, err);
   1dd8a:	4638      	mov	r0, r7
   1dd8c:	4633      	mov	r3, r6
}
   1dd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1dd92:	4718      	bx	r3
   1dd94:	20002ae4 	.word	0x20002ae4
   1dd98:	0002ca59 	.word	0x0002ca59
   1dd9c:	0002e214 	.word	0x0002e214

0001dda0 <get_status>:
{
   1dda0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1dda2:	b2cc      	uxtb	r4, r1
   1dda4:	2c01      	cmp	r4, #1
{
   1dda6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1dda8:	d909      	bls.n	1ddbe <get_status+0x1e>
   1ddaa:	4909      	ldr	r1, [pc, #36]	; (1ddd0 <get_status+0x30>)
   1ddac:	4809      	ldr	r0, [pc, #36]	; (1ddd4 <get_status+0x34>)
   1ddae:	4a0a      	ldr	r2, [pc, #40]	; (1ddd8 <get_status+0x38>)
   1ddb0:	2379      	movs	r3, #121	; 0x79
   1ddb2:	f00a fcdd 	bl	28770 <printk>
   1ddb6:	4808      	ldr	r0, [pc, #32]	; (1ddd8 <get_status+0x38>)
   1ddb8:	2179      	movs	r1, #121	; 0x79
   1ddba:	f00a feca 	bl	28b52 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1ddbe:	692b      	ldr	r3, [r5, #16]
   1ddc0:	210c      	movs	r1, #12
   1ddc2:	fb04 3401 	mla	r4, r4, r1, r3
   1ddc6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   1ddc8:	f000 0007 	and.w	r0, r0, #7
   1ddcc:	bd38      	pop	{r3, r4, r5, pc}
   1ddce:	bf00      	nop
   1ddd0:	000318ed 	.word	0x000318ed
   1ddd4:	0002e915 	.word	0x0002e915
   1ddd8:	000318b0 	.word	0x000318b0

0001dddc <stop>:
{
   1dddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ddde:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1dde0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1dde2:	6907      	ldr	r7, [r0, #16]
{
   1dde4:	4605      	mov	r5, r0
   1dde6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1dde8:	d90b      	bls.n	1de02 <stop+0x26>
   1ddea:	4919      	ldr	r1, [pc, #100]	; (1de50 <stop+0x74>)
   1ddec:	4819      	ldr	r0, [pc, #100]	; (1de54 <stop+0x78>)
   1ddee:	4a1a      	ldr	r2, [pc, #104]	; (1de58 <stop+0x7c>)
   1ddf0:	f240 134d 	movw	r3, #333	; 0x14d
   1ddf4:	f00a fcbc 	bl	28770 <printk>
   1ddf8:	4817      	ldr	r0, [pc, #92]	; (1de58 <stop+0x7c>)
   1ddfa:	f240 114d 	movw	r1, #333	; 0x14d
   1ddfe:	f00a fea8 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   1de02:	f04f 0340 	mov.w	r3, #64	; 0x40
   1de06:	f3ef 8211 	mrs	r2, BASEPRI
   1de0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1de0e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1de12:	230c      	movs	r3, #12
   1de14:	fb03 7104 	mla	r1, r3, r4, r7
   1de18:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1de1a:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   1de1e:	d001      	beq.n	1de24 <stop+0x48>
   1de20:	428e      	cmp	r6, r1
   1de22:	d111      	bne.n	1de48 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1de24:	fb03 7304 	mla	r3, r3, r4, r7
   1de28:	2101      	movs	r1, #1
   1de2a:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   1de2c:	2000      	movs	r0, #0
	__asm__ volatile(
   1de2e:	f382 8811 	msr	BASEPRI, r2
   1de32:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1de36:	b930      	cbnz	r0, 1de46 <stop+0x6a>
	get_sub_config(dev, type)->stop();
   1de38:	6869      	ldr	r1, [r5, #4]
   1de3a:	230c      	movs	r3, #12
   1de3c:	fb03 1404 	mla	r4, r3, r4, r1
   1de40:	6863      	ldr	r3, [r4, #4]
   1de42:	4798      	blx	r3
	return 0;
   1de44:	2000      	movs	r0, #0
}
   1de46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   1de48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de4c:	e7ef      	b.n	1de2e <stop+0x52>
   1de4e:	bf00      	nop
   1de50:	000318ed 	.word	0x000318ed
   1de54:	0002e915 	.word	0x0002e915
   1de58:	000318b0 	.word	0x000318b0

0001de5c <onoff_stop>:
{
   1de5c:	b570      	push	{r4, r5, r6, lr}
   1de5e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1de60:	4906      	ldr	r1, [pc, #24]	; (1de7c <onoff_stop+0x20>)
   1de62:	1a41      	subs	r1, r0, r1
{
   1de64:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1de66:	1149      	asrs	r1, r1, #5
   1de68:	4805      	ldr	r0, [pc, #20]	; (1de80 <onoff_stop+0x24>)
   1de6a:	2240      	movs	r2, #64	; 0x40
   1de6c:	f7ff ffb6 	bl	1dddc <stop>
	notify(mgr, res);
   1de70:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1de72:	4601      	mov	r1, r0
	notify(mgr, res);
   1de74:	4620      	mov	r0, r4
}
   1de76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1de7a:	4718      	bx	r3
   1de7c:	20002ae4 	.word	0x20002ae4
   1de80:	0002d638 	.word	0x0002d638

0001de84 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de84:	2200      	movs	r2, #0
{
   1de86:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de88:	2101      	movs	r1, #1
{
   1de8a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1de8c:	4610      	mov	r0, r2
   1de8e:	f7f6 fb2b 	bl	144e8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1de92:	2000      	movs	r0, #0
   1de94:	f7f6 faf6 	bl	14484 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1de98:	480f      	ldr	r0, [pc, #60]	; (1ded8 <clk_init+0x54>)
   1de9a:	f002 fdaf 	bl	209fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1de9e:	4b0f      	ldr	r3, [pc, #60]	; (1dedc <clk_init+0x58>)
   1dea0:	4298      	cmp	r0, r3
   1dea2:	d115      	bne.n	1ded0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1dea4:	f00f f910 	bl	2d0c8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1dea8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1deaa:	490d      	ldr	r1, [pc, #52]	; (1dee0 <clk_init+0x5c>)
   1deac:	4630      	mov	r0, r6
   1deae:	f00a fcba 	bl	28826 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1deb2:	2800      	cmp	r0, #0
   1deb4:	db0b      	blt.n	1dece <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1deb6:	2501      	movs	r5, #1
   1deb8:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   1deba:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1debc:	4908      	ldr	r1, [pc, #32]	; (1dee0 <clk_init+0x5c>)
   1debe:	f104 0020 	add.w	r0, r4, #32
   1dec2:	f00a fcb0 	bl	28826 <onoff_manager_init>
		if (err < 0) {
   1dec6:	2800      	cmp	r0, #0
   1dec8:	db01      	blt.n	1dece <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1deca:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1decc:	2000      	movs	r0, #0
}
   1dece:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1ded0:	f06f 0004 	mvn.w	r0, #4
   1ded4:	e7fb      	b.n	1dece <clk_init+0x4a>
   1ded6:	bf00      	nop
   1ded8:	0001df19 	.word	0x0001df19
   1dedc:	0bad0000 	.word	0x0bad0000
   1dee0:	0002e22c 	.word	0x0002e22c

0001dee4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1dee4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1dee6:	230c      	movs	r3, #12
   1dee8:	4809      	ldr	r0, [pc, #36]	; (1df10 <clkstarted_handle.constprop.0+0x2c>)
   1deea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1deec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1deee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1def0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1def4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1def6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1def8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1defa:	4418      	add	r0, r3
   1defc:	f00e fd99 	bl	2ca32 <set_on_state>
	if (callback) {
   1df00:	b12d      	cbz	r5, 1df0e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1df02:	4632      	mov	r2, r6
   1df04:	462b      	mov	r3, r5
   1df06:	4803      	ldr	r0, [pc, #12]	; (1df14 <clkstarted_handle.constprop.0+0x30>)
}
   1df08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1df0c:	4718      	bx	r3
}
   1df0e:	bd70      	pop	{r4, r5, r6, pc}
   1df10:	20002ae4 	.word	0x20002ae4
   1df14:	0002d638 	.word	0x0002d638

0001df18 <clock_event_handler>:
	switch (event) {
   1df18:	2801      	cmp	r0, #1
{
   1df1a:	b508      	push	{r3, lr}
	switch (event) {
   1df1c:	d006      	beq.n	1df2c <clock_event_handler+0x14>
   1df1e:	2803      	cmp	r0, #3
   1df20:	d008      	beq.n	1df34 <clock_event_handler+0x1c>
   1df22:	b9a8      	cbnz	r0, 1df50 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1df24:	4b10      	ldr	r3, [pc, #64]	; (1df68 <clock_event_handler+0x50>)
   1df26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1df28:	075b      	lsls	r3, r3, #29
   1df2a:	d11b      	bne.n	1df64 <clock_event_handler+0x4c>
}
   1df2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1df30:	f7ff bfd8 	b.w	1dee4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1df34:	490d      	ldr	r1, [pc, #52]	; (1df6c <clock_event_handler+0x54>)
   1df36:	4a0e      	ldr	r2, [pc, #56]	; (1df70 <clock_event_handler+0x58>)
   1df38:	480e      	ldr	r0, [pc, #56]	; (1df74 <clock_event_handler+0x5c>)
   1df3a:	f240 235e 	movw	r3, #606	; 0x25e
   1df3e:	f00a fc17 	bl	28770 <printk>
   1df42:	f240 215e 	movw	r1, #606	; 0x25e
}
   1df46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   1df4a:	4809      	ldr	r0, [pc, #36]	; (1df70 <clock_event_handler+0x58>)
   1df4c:	f00a be01 	b.w	28b52 <assert_post_action>
   1df50:	4906      	ldr	r1, [pc, #24]	; (1df6c <clock_event_handler+0x54>)
   1df52:	4a07      	ldr	r2, [pc, #28]	; (1df70 <clock_event_handler+0x58>)
   1df54:	4807      	ldr	r0, [pc, #28]	; (1df74 <clock_event_handler+0x5c>)
   1df56:	f240 2362 	movw	r3, #610	; 0x262
   1df5a:	f00a fc09 	bl	28770 <printk>
   1df5e:	f240 2162 	movw	r1, #610	; 0x262
   1df62:	e7f0      	b.n	1df46 <clock_event_handler+0x2e>
}
   1df64:	bd08      	pop	{r3, pc}
   1df66:	bf00      	nop
   1df68:	20002ae4 	.word	0x20002ae4
   1df6c:	00032bb3 	.word	0x00032bb3
   1df70:	000318b0 	.word	0x000318b0
   1df74:	0002e915 	.word	0x0002e915

0001df78 <generic_hfclk_start>:
{
   1df78:	b508      	push	{r3, lr}
	__asm__ volatile(
   1df7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1df7e:	f3ef 8111 	mrs	r1, BASEPRI
   1df82:	f383 8812 	msr	BASEPRI_MAX, r3
   1df86:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1df8a:	4a12      	ldr	r2, [pc, #72]	; (1dfd4 <generic_hfclk_start+0x5c>)
   1df8c:	6813      	ldr	r3, [r2, #0]
   1df8e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1df92:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1df96:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1df98:	d00c      	beq.n	1dfb4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1df9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1df9e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1dfa2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1dfa6:	f013 0301 	ands.w	r3, r3, #1
   1dfaa:	d003      	beq.n	1dfb4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1dfac:	480a      	ldr	r0, [pc, #40]	; (1dfd8 <generic_hfclk_start+0x60>)
   1dfae:	f00e fd40 	bl	2ca32 <set_on_state>
			already_started = true;
   1dfb2:	2301      	movs	r3, #1
	__asm__ volatile(
   1dfb4:	f381 8811 	msr	BASEPRI, r1
   1dfb8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1dfbc:	b123      	cbz	r3, 1dfc8 <generic_hfclk_start+0x50>
}
   1dfbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1dfc2:	2000      	movs	r0, #0
   1dfc4:	f7ff bf8e 	b.w	1dee4 <clkstarted_handle.constprop.0>
}
   1dfc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1dfcc:	2001      	movs	r0, #1
   1dfce:	f002 bccb 	b.w	20968 <nrfx_clock_start>
   1dfd2:	bf00      	nop
   1dfd4:	20002b3c 	.word	0x20002b3c
   1dfd8:	20002b2c 	.word	0x20002b2c

0001dfdc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dfdc:	4b09      	ldr	r3, [pc, #36]	; (1e004 <generic_hfclk_stop+0x28>)
   1dfde:	f3bf 8f5b 	dmb	ish
   1dfe2:	e853 2f00 	ldrex	r2, [r3]
   1dfe6:	f022 0102 	bic.w	r1, r2, #2
   1dfea:	e843 1000 	strex	r0, r1, [r3]
   1dfee:	2800      	cmp	r0, #0
   1dff0:	d1f7      	bne.n	1dfe2 <generic_hfclk_stop+0x6>
   1dff2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1dff6:	07d3      	lsls	r3, r2, #31
   1dff8:	d402      	bmi.n	1e000 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1dffa:	2001      	movs	r0, #1
   1dffc:	f002 bcde 	b.w	209bc <nrfx_clock_stop>
}
   1e000:	4770      	bx	lr
   1e002:	bf00      	nop
   1e004:	20002b3c 	.word	0x20002b3c

0001e008 <api_blocking_start>:
{
   1e008:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1e00a:	2200      	movs	r2, #0
   1e00c:	2301      	movs	r3, #1
   1e00e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e012:	ab04      	add	r3, sp, #16
   1e014:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1e018:	4a09      	ldr	r2, [pc, #36]	; (1e040 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1e01a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1e01e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1e020:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1e024:	f00e fd2a 	bl	2ca7c <api_start>
	if (err < 0) {
   1e028:	2800      	cmp	r0, #0
   1e02a:	db05      	blt.n	1e038 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1e02c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1e030:	2300      	movs	r3, #0
   1e032:	4668      	mov	r0, sp
   1e034:	f004 fd54 	bl	22ae0 <z_impl_k_sem_take>
}
   1e038:	b007      	add	sp, #28
   1e03a:	f85d fb04 	ldr.w	pc, [sp], #4
   1e03e:	bf00      	nop
   1e040:	0002ca77 	.word	0x0002ca77

0001e044 <z_nrf_clock_control_lf_on>:
{
   1e044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e048:	4949      	ldr	r1, [pc, #292]	; (1e170 <z_nrf_clock_control_lf_on+0x12c>)
   1e04a:	f3bf 8f5b 	dmb	ish
   1e04e:	4605      	mov	r5, r0
   1e050:	2201      	movs	r2, #1
   1e052:	e851 3f00 	ldrex	r3, [r1]
   1e056:	e841 2000 	strex	r0, r2, [r1]
   1e05a:	2800      	cmp	r0, #0
   1e05c:	d1f9      	bne.n	1e052 <z_nrf_clock_control_lf_on+0xe>
   1e05e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1e062:	b9a3      	cbnz	r3, 1e08e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1e064:	4943      	ldr	r1, [pc, #268]	; (1e174 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   1e066:	4844      	ldr	r0, [pc, #272]	; (1e178 <z_nrf_clock_control_lf_on+0x134>)
   1e068:	604b      	str	r3, [r1, #4]
   1e06a:	60cb      	str	r3, [r1, #12]
   1e06c:	608a      	str	r2, [r1, #8]
   1e06e:	f7f3 fa87 	bl	11580 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1e072:	2800      	cmp	r0, #0
   1e074:	da0b      	bge.n	1e08e <z_nrf_clock_control_lf_on+0x4a>
   1e076:	4941      	ldr	r1, [pc, #260]	; (1e17c <z_nrf_clock_control_lf_on+0x138>)
   1e078:	4841      	ldr	r0, [pc, #260]	; (1e180 <z_nrf_clock_control_lf_on+0x13c>)
   1e07a:	4a42      	ldr	r2, [pc, #264]	; (1e184 <z_nrf_clock_control_lf_on+0x140>)
   1e07c:	f44f 7308 	mov.w	r3, #544	; 0x220
   1e080:	f00a fb76 	bl	28770 <printk>
   1e084:	483f      	ldr	r0, [pc, #252]	; (1e184 <z_nrf_clock_control_lf_on+0x140>)
   1e086:	f44f 7108 	mov.w	r1, #544	; 0x220
   1e08a:	f00a fd62 	bl	28b52 <assert_post_action>
	switch (start_mode) {
   1e08e:	b3ad      	cbz	r5, 1e0fc <z_nrf_clock_control_lf_on+0xb8>
   1e090:	1e6b      	subs	r3, r5, #1
   1e092:	2b01      	cmp	r3, #1
   1e094:	d856      	bhi.n	1e144 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1e096:	2d01      	cmp	r5, #1
   1e098:	d107      	bne.n	1e0aa <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1e09a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e09e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1e0a2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1e0a6:	2b01      	cmp	r3, #1
   1e0a8:	d028      	beq.n	1e0fc <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e0aa:	f00f f8e9 	bl	2d280 <k_is_in_isr>
   1e0ae:	4604      	mov	r4, r0
   1e0b0:	b918      	cbnz	r0, 1e0ba <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
   1e0b2:	4b35      	ldr	r3, [pc, #212]	; (1e188 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   1e0b4:	781b      	ldrb	r3, [r3, #0]
   1e0b6:	2b00      	cmp	r3, #0
   1e0b8:	d152      	bne.n	1e160 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   1e0ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e0be:	f3ef 8611 	mrs	r6, BASEPRI
   1e0c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0c6:	f3bf 8f6f 	isb	sy
   1e0ca:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e0cc:	4f2f      	ldr	r7, [pc, #188]	; (1e18c <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e0ce:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1e194 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e0d2:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 1e198 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e0d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e0da:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e0de:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1e0e2:	03d2      	lsls	r2, r2, #15
   1e0e4:	d50c      	bpl.n	1e100 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1e0e6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1e0ea:	2b01      	cmp	r3, #1
   1e0ec:	d001      	beq.n	1e0f2 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1e0ee:	2d01      	cmp	r5, #1
   1e0f0:	d106      	bne.n	1e100 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   1e0f2:	b30c      	cbz	r4, 1e138 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   1e0f4:	f386 8811 	msr	BASEPRI, r6
   1e0f8:	f3bf 8f6f 	isb	sy
}
   1e0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1e100:	b1ac      	cbz	r4, 1e12e <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1e102:	4630      	mov	r0, r6
   1e104:	f7f6 f97c 	bl	14400 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1e108:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e10c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1e110:	2b00      	cmp	r3, #0
   1e112:	d1e0      	bne.n	1e0d6 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e114:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1e116:	2900      	cmp	r1, #0
   1e118:	d0dd      	beq.n	1e0d6 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e11a:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1e11c:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e11e:	2301      	movs	r3, #1
   1e120:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   1e124:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e128:	f8c9 3000 	str.w	r3, [r9]
}
   1e12c:	e7d3      	b.n	1e0d6 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   1e12e:	2100      	movs	r1, #0
   1e130:	2021      	movs	r0, #33	; 0x21
   1e132:	f006 fb89 	bl	24848 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e136:	e7e7      	b.n	1e108 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   1e138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e13c:	2202      	movs	r2, #2
   1e13e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1e142:	e7db      	b.n	1e0fc <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   1e144:	4912      	ldr	r1, [pc, #72]	; (1e190 <z_nrf_clock_control_lf_on+0x14c>)
   1e146:	480e      	ldr	r0, [pc, #56]	; (1e180 <z_nrf_clock_control_lf_on+0x13c>)
   1e148:	4a0e      	ldr	r2, [pc, #56]	; (1e184 <z_nrf_clock_control_lf_on+0x140>)
   1e14a:	f240 2332 	movw	r3, #562	; 0x232
   1e14e:	f00a fb0f 	bl	28770 <printk>
}
   1e152:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   1e156:	480b      	ldr	r0, [pc, #44]	; (1e184 <z_nrf_clock_control_lf_on+0x140>)
   1e158:	f240 2132 	movw	r1, #562	; 0x232
   1e15c:	f00a bcf9 	b.w	28b52 <assert_post_action>
    p_reg->INTENCLR = mask;
   1e160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e164:	2202      	movs	r2, #2
   1e166:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1e16a:	4606      	mov	r6, r0
}
   1e16c:	e7ae      	b.n	1e0cc <z_nrf_clock_control_lf_on+0x88>
   1e16e:	bf00      	nop
   1e170:	20002b40 	.word	0x20002b40
   1e174:	20002ad4 	.word	0x20002ad4
   1e178:	20002b04 	.word	0x20002b04
   1e17c:	00031911 	.word	0x00031911
   1e180:	0002e915 	.word	0x0002e915
   1e184:	000318b0 	.word	0x000318b0
   1e188:	200042be 	.word	0x200042be
   1e18c:	40000104 	.word	0x40000104
   1e190:	00032bb3 	.word	0x00032bb3
   1e194:	e000e100 	.word	0xe000e100
   1e198:	40000008 	.word	0x40000008

0001e19c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1e19c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1e19e:	4b08      	ldr	r3, [pc, #32]	; (1e1c0 <uart_console_init+0x24>)
   1e1a0:	4808      	ldr	r0, [pc, #32]	; (1e1c4 <uart_console_init+0x28>)
   1e1a2:	6018      	str	r0, [r3, #0]
   1e1a4:	f00f f83e 	bl	2d224 <z_device_ready>
   1e1a8:	b138      	cbz	r0, 1e1ba <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   1e1aa:	4807      	ldr	r0, [pc, #28]	; (1e1c8 <uart_console_init+0x2c>)
   1e1ac:	f7f6 ff3e 	bl	1502c <__stdout_hook_install>
	__printk_hook_install(console_out);
   1e1b0:	4805      	ldr	r0, [pc, #20]	; (1e1c8 <uart_console_init+0x2c>)
   1e1b2:	f7f2 ff91 	bl	110d8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1e1b6:	2000      	movs	r0, #0
}
   1e1b8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1e1ba:	f06f 0012 	mvn.w	r0, #18
   1e1be:	e7fb      	b.n	1e1b8 <uart_console_init+0x1c>
   1e1c0:	20002b44 	.word	0x20002b44
   1e1c4:	0002d6c8 	.word	0x0002d6c8
   1e1c8:	0001e1cd 	.word	0x0001e1cd

0001e1cc <console_out>:
	if ('\n' == c) {
   1e1cc:	280a      	cmp	r0, #10
{
   1e1ce:	b538      	push	{r3, r4, r5, lr}
   1e1d0:	4d07      	ldr	r5, [pc, #28]	; (1e1f0 <console_out+0x24>)
   1e1d2:	4604      	mov	r4, r0
	if ('\n' == c) {
   1e1d4:	d104      	bne.n	1e1e0 <console_out+0x14>
   1e1d6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1e1d8:	6883      	ldr	r3, [r0, #8]
   1e1da:	210d      	movs	r1, #13
   1e1dc:	69db      	ldr	r3, [r3, #28]
   1e1de:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1e1e0:	6828      	ldr	r0, [r5, #0]
   1e1e2:	6883      	ldr	r3, [r0, #8]
   1e1e4:	b2e1      	uxtb	r1, r4
   1e1e6:	69db      	ldr	r3, [r3, #28]
   1e1e8:	4798      	blx	r3
}
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	bd38      	pop	{r3, r4, r5, pc}
   1e1ee:	bf00      	nop
   1e1f0:	20002b44 	.word	0x20002b44

0001e1f4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1e1f4:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e1f6:	6905      	ldr	r5, [r0, #16]
{
   1e1f8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1e1fa:	460c      	mov	r4, r1
   1e1fc:	b961      	cbnz	r1, 1e218 <gpio_nrfx_manage_callback+0x24>
   1e1fe:	4922      	ldr	r1, [pc, #136]	; (1e288 <gpio_nrfx_manage_callback+0x94>)
   1e200:	4a22      	ldr	r2, [pc, #136]	; (1e28c <gpio_nrfx_manage_callback+0x98>)
   1e202:	4823      	ldr	r0, [pc, #140]	; (1e290 <gpio_nrfx_manage_callback+0x9c>)
   1e204:	2324      	movs	r3, #36	; 0x24
   1e206:	f00a fab3 	bl	28770 <printk>
   1e20a:	4822      	ldr	r0, [pc, #136]	; (1e294 <gpio_nrfx_manage_callback+0xa0>)
   1e20c:	f00a fab0 	bl	28770 <printk>
   1e210:	481e      	ldr	r0, [pc, #120]	; (1e28c <gpio_nrfx_manage_callback+0x98>)
   1e212:	2124      	movs	r1, #36	; 0x24
   1e214:	f00a fc9d 	bl	28b52 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1e218:	6863      	ldr	r3, [r4, #4]
   1e21a:	b963      	cbnz	r3, 1e236 <gpio_nrfx_manage_callback+0x42>
   1e21c:	491e      	ldr	r1, [pc, #120]	; (1e298 <gpio_nrfx_manage_callback+0xa4>)
   1e21e:	4a1b      	ldr	r2, [pc, #108]	; (1e28c <gpio_nrfx_manage_callback+0x98>)
   1e220:	481b      	ldr	r0, [pc, #108]	; (1e290 <gpio_nrfx_manage_callback+0x9c>)
   1e222:	2325      	movs	r3, #37	; 0x25
   1e224:	f00a faa4 	bl	28770 <printk>
   1e228:	481c      	ldr	r0, [pc, #112]	; (1e29c <gpio_nrfx_manage_callback+0xa8>)
   1e22a:	f00a faa1 	bl	28770 <printk>
   1e22e:	4817      	ldr	r0, [pc, #92]	; (1e28c <gpio_nrfx_manage_callback+0x98>)
   1e230:	2125      	movs	r1, #37	; 0x25
   1e232:	f00a fc8e 	bl	28b52 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1e236:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1e238:	b15b      	cbz	r3, 1e252 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e23a:	2200      	movs	r2, #0
   1e23c:	429c      	cmp	r4, r3
   1e23e:	d113      	bne.n	1e268 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   1e240:	6823      	ldr	r3, [r4, #0]
   1e242:	b95a      	cbnz	r2, 1e25c <gpio_nrfx_manage_callback+0x68>
   1e244:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   1e246:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e248:	4294      	cmp	r4, r2
   1e24a:	d100      	bne.n	1e24e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   1e24c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   1e24e:	2300      	movs	r3, #0
   1e250:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1e252:	b976      	cbnz	r6, 1e272 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1e254:	2000      	movs	r0, #0
				     callback, set);
}
   1e256:	bd70      	pop	{r4, r5, r6, pc}
   1e258:	460b      	mov	r3, r1
   1e25a:	e7ef      	b.n	1e23c <gpio_nrfx_manage_callback+0x48>
   1e25c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e25e:	68ab      	ldr	r3, [r5, #8]
   1e260:	429c      	cmp	r4, r3
	list->tail = node;
   1e262:	bf08      	it	eq
   1e264:	60aa      	streq	r2, [r5, #8]
}
   1e266:	e7f2      	b.n	1e24e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e268:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e26a:	461a      	mov	r2, r3
   1e26c:	2900      	cmp	r1, #0
   1e26e:	d1f3      	bne.n	1e258 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1e270:	b13e      	cbz	r6, 1e282 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   1e272:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1e274:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e276:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   1e278:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e27a:	2800      	cmp	r0, #0
   1e27c:	d1ea      	bne.n	1e254 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1e27e:	60ac      	str	r4, [r5, #8]
}
   1e280:	e7e9      	b.n	1e256 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   1e282:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e286:	e7e6      	b.n	1e256 <gpio_nrfx_manage_callback+0x62>
   1e288:	0002e774 	.word	0x0002e774
   1e28c:	0003193a 	.word	0x0003193a
   1e290:	0002e915 	.word	0x0002e915
   1e294:	00031967 	.word	0x00031967
   1e298:	00031976 	.word	0x00031976
   1e29c:	00031988 	.word	0x00031988

0001e2a0 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e2a0:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   1e2a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e2a6:	d003      	beq.n	1e2b0 <nrfx_gpio_handler+0x10>
   1e2a8:	2b01      	cmp	r3, #1
   1e2aa:	d036      	beq.n	1e31a <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   1e2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e2b0:	4f1b      	ldr	r7, [pc, #108]	; (1e320 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e2b2:	693b      	ldr	r3, [r7, #16]
   1e2b4:	685c      	ldr	r4, [r3, #4]
   1e2b6:	2c00      	cmp	r4, #0
   1e2b8:	d0f8      	beq.n	1e2ac <nrfx_gpio_handler+0xc>
   1e2ba:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1e2bc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1e32c <nrfx_gpio_handler+0x8c>
   1e2c0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1e330 <nrfx_gpio_handler+0x90>
   1e2c4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1e334 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1e2c8:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   1e2cc:	2601      	movs	r6, #1
   1e2ce:	2d00      	cmp	r5, #0
   1e2d0:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
   1e2d4:	bf38      	it	cc
   1e2d6:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   1e2d8:	68a3      	ldr	r3, [r4, #8]
   1e2da:	421e      	tst	r6, r3
   1e2dc:	d014      	beq.n	1e308 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
   1e2de:	6863      	ldr	r3, [r4, #4]
   1e2e0:	b963      	cbnz	r3, 1e2fc <nrfx_gpio_handler+0x5c>
   1e2e2:	4649      	mov	r1, r9
   1e2e4:	2345      	movs	r3, #69	; 0x45
   1e2e6:	4642      	mov	r2, r8
   1e2e8:	4650      	mov	r0, sl
   1e2ea:	f00a fa41 	bl	28770 <printk>
   1e2ee:	480d      	ldr	r0, [pc, #52]	; (1e324 <nrfx_gpio_handler+0x84>)
   1e2f0:	f00a fa3e 	bl	28770 <printk>
   1e2f4:	2145      	movs	r1, #69	; 0x45
   1e2f6:	4640      	mov	r0, r8
   1e2f8:	f00a fc2b 	bl	28b52 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1e2fc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1e300:	4621      	mov	r1, r4
   1e302:	4032      	ands	r2, r6
   1e304:	4638      	mov	r0, r7
   1e306:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e308:	2d00      	cmp	r5, #0
   1e30a:	d0cf      	beq.n	1e2ac <nrfx_gpio_handler+0xc>
   1e30c:	682b      	ldr	r3, [r5, #0]
   1e30e:	2b00      	cmp	r3, #0
   1e310:	bf38      	it	cc
   1e312:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e314:	462c      	mov	r4, r5
   1e316:	461d      	mov	r5, r3
   1e318:	e7de      	b.n	1e2d8 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1e31a:	4f03      	ldr	r7, [pc, #12]	; (1e328 <nrfx_gpio_handler+0x88>)
   1e31c:	e7c9      	b.n	1e2b2 <nrfx_gpio_handler+0x12>
   1e31e:	bf00      	nop
   1e320:	0002d650 	.word	0x0002d650
   1e324:	00031988 	.word	0x00031988
   1e328:	0002d668 	.word	0x0002d668
   1e32c:	0003193a 	.word	0x0003193a
   1e330:	0003199f 	.word	0x0003199f
   1e334:	0002e915 	.word	0x0002e915

0001e338 <gpio_nrfx_pin_interrupt_configure>:
{
   1e338:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e33a:	6840      	ldr	r0, [r0, #4]
   1e33c:	7b05      	ldrb	r5, [r0, #12]
   1e33e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1e342:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e346:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1e34a:	f04f 0500 	mov.w	r5, #0
   1e34e:	d104      	bne.n	1e35a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1e350:	4620      	mov	r0, r4
   1e352:	f003 f8db 	bl	2150c <nrfx_gpiote_trigger_disable>
	return 0;
   1e356:	2000      	movs	r0, #0
   1e358:	e054      	b.n	1e404 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
   1e35a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e35e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1e362:	d151      	bne.n	1e408 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1e364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1e368:	bf0c      	ite	eq
   1e36a:	2304      	moveq	r3, #4
   1e36c:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e36e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1e372:	6883      	ldr	r3, [r0, #8]
   1e374:	fa23 f101 	lsr.w	r1, r3, r1
   1e378:	f011 0101 	ands.w	r1, r1, #1
   1e37c:	d155      	bne.n	1e42a <gpio_nrfx_pin_interrupt_configure+0xf2>
   1e37e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1e382:	d152      	bne.n	1e42a <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
   1e384:	0966      	lsrs	r6, r4, #5
   1e386:	d04a      	beq.n	1e41e <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
   1e388:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e38c:	2e01      	cmp	r6, #1
   1e38e:	bf08      	it	eq
   1e390:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
   1e392:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e396:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e398:	07ca      	lsls	r2, r1, #31
   1e39a:	d40b      	bmi.n	1e3b4 <gpio_nrfx_pin_interrupt_configure+0x7c>
   1e39c:	492b      	ldr	r1, [pc, #172]	; (1e44c <gpio_nrfx_pin_interrupt_configure+0x114>)
   1e39e:	482c      	ldr	r0, [pc, #176]	; (1e450 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1e3a0:	4a2c      	ldr	r2, [pc, #176]	; (1e454 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1e3a2:	f240 2329 	movw	r3, #553	; 0x229
   1e3a6:	f00a f9e3 	bl	28770 <printk>
   1e3aa:	482a      	ldr	r0, [pc, #168]	; (1e454 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1e3ac:	f240 2129 	movw	r1, #553	; 0x229
   1e3b0:	f00a fbcf 	bl	28b52 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e3b4:	b16e      	cbz	r6, 1e3d2 <gpio_nrfx_pin_interrupt_configure+0x9a>
   1e3b6:	2e01      	cmp	r6, #1
   1e3b8:	d034      	beq.n	1e424 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
   1e3ba:	4927      	ldr	r1, [pc, #156]	; (1e458 <gpio_nrfx_pin_interrupt_configure+0x120>)
   1e3bc:	4824      	ldr	r0, [pc, #144]	; (1e450 <gpio_nrfx_pin_interrupt_configure+0x118>)
   1e3be:	4a25      	ldr	r2, [pc, #148]	; (1e454 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1e3c0:	f240 232e 	movw	r3, #558	; 0x22e
   1e3c4:	f00a f9d4 	bl	28770 <printk>
   1e3c8:	4822      	ldr	r0, [pc, #136]	; (1e454 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   1e3ca:	f240 212e 	movw	r1, #558	; 0x22e
   1e3ce:	f00a fbc0 	bl	28b52 <assert_post_action>
        case 0: return NRF_P0;
   1e3d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e3d6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1e3da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1e3de:	07db      	lsls	r3, r3, #31
   1e3e0:	d423      	bmi.n	1e42a <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1e3e2:	f10d 0507 	add.w	r5, sp, #7
   1e3e6:	4629      	mov	r1, r5
   1e3e8:	4620      	mov	r0, r4
   1e3ea:	f002 ffb9 	bl	21360 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1e3ee:	4b1b      	ldr	r3, [pc, #108]	; (1e45c <gpio_nrfx_pin_interrupt_configure+0x124>)
   1e3f0:	4298      	cmp	r0, r3
   1e3f2:	d119      	bne.n	1e428 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
   1e3f4:	4628      	mov	r0, r5
   1e3f6:	f003 f813 	bl	21420 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1e3fa:	4b19      	ldr	r3, [pc, #100]	; (1e460 <gpio_nrfx_pin_interrupt_configure+0x128>)
   1e3fc:	4298      	cmp	r0, r3
   1e3fe:	d013      	beq.n	1e428 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
   1e400:	f06f 000b 	mvn.w	r0, #11
}
   1e404:	b004      	add	sp, #16
   1e406:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1e408:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1e40c:	d005      	beq.n	1e41a <gpio_nrfx_pin_interrupt_configure+0xe2>
   1e40e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1e412:	bf0c      	ite	eq
   1e414:	2302      	moveq	r3, #2
   1e416:	2301      	movne	r3, #1
   1e418:	e7a9      	b.n	1e36e <gpio_nrfx_pin_interrupt_configure+0x36>
   1e41a:	2303      	movs	r3, #3
   1e41c:	e7a7      	b.n	1e36e <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
   1e41e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e422:	e7b6      	b.n	1e392 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e424:	4b0f      	ldr	r3, [pc, #60]	; (1e464 <gpio_nrfx_pin_interrupt_configure+0x12c>)
   1e426:	e7d6      	b.n	1e3d6 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
   1e428:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e42a:	2300      	movs	r3, #0
   1e42c:	4619      	mov	r1, r3
   1e42e:	aa02      	add	r2, sp, #8
   1e430:	4620      	mov	r0, r4
   1e432:	f002 fe77 	bl	21124 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1e436:	4b0a      	ldr	r3, [pc, #40]	; (1e460 <gpio_nrfx_pin_interrupt_configure+0x128>)
   1e438:	4298      	cmp	r0, r3
   1e43a:	d104      	bne.n	1e446 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1e43c:	2101      	movs	r1, #1
   1e43e:	4620      	mov	r0, r4
   1e440:	f002 fff4 	bl	2142c <nrfx_gpiote_trigger_enable>
   1e444:	e787      	b.n	1e356 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   1e446:	f06f 0004 	mvn.w	r0, #4
   1e44a:	e7db      	b.n	1e404 <gpio_nrfx_pin_interrupt_configure+0xcc>
   1e44c:	000319de 	.word	0x000319de
   1e450:	0002e915 	.word	0x0002e915
   1e454:	000319ab 	.word	0x000319ab
   1e458:	00032bb3 	.word	0x00032bb3
   1e45c:	0bad0004 	.word	0x0bad0004
   1e460:	0bad0000 	.word	0x0bad0000
   1e464:	50000300 	.word	0x50000300

0001e468 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1e468:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1e46a:	f002 ffc9 	bl	21400 <nrfx_gpiote_is_init>
   1e46e:	4604      	mov	r4, r0
   1e470:	b968      	cbnz	r0, 1e48e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1e472:	f002 ff9d 	bl	213b0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1e476:	4b08      	ldr	r3, [pc, #32]	; (1e498 <gpio_nrfx_init+0x30>)
   1e478:	4298      	cmp	r0, r3
   1e47a:	d10a      	bne.n	1e492 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1e47c:	4807      	ldr	r0, [pc, #28]	; (1e49c <gpio_nrfx_init+0x34>)
   1e47e:	4621      	mov	r1, r4
   1e480:	f002 ff68 	bl	21354 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e484:	4622      	mov	r2, r4
   1e486:	2105      	movs	r1, #5
   1e488:	2006      	movs	r0, #6
   1e48a:	f7f6 f82d 	bl	144e8 <z_arm_irq_priority_set>
		return 0;
   1e48e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1e490:	bd10      	pop	{r4, pc}
		return -EIO;
   1e492:	f06f 0004 	mvn.w	r0, #4
   1e496:	e7fb      	b.n	1e490 <gpio_nrfx_init+0x28>
   1e498:	0bad0000 	.word	0x0bad0000
   1e49c:	0001e2a1 	.word	0x0001e2a1

0001e4a0 <gpio_nrfx_pin_configure>:
{
   1e4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1e4a4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e4a6:	7b3b      	ldrb	r3, [r7, #12]
   1e4a8:	f001 051f 	and.w	r5, r1, #31
{
   1e4ac:	b085      	sub	sp, #20
   1e4ae:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e4b0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1e4b4:	4614      	mov	r4, r2
   1e4b6:	b9ca      	cbnz	r2, 1e4ec <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e4b8:	a902      	add	r1, sp, #8
   1e4ba:	4628      	mov	r0, r5
   1e4bc:	f002 ff50 	bl	21360 <nrfx_gpiote_channel_get>
   1e4c0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1e4c2:	4628      	mov	r0, r5
   1e4c4:	f003 f844 	bl	21550 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1e4c8:	4b48      	ldr	r3, [pc, #288]	; (1e5ec <gpio_nrfx_pin_configure+0x14c>)
   1e4ca:	4298      	cmp	r0, r3
   1e4cc:	d004      	beq.n	1e4d8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   1e4ce:	f06f 0004 	mvn.w	r0, #4
}
   1e4d2:	b005      	add	sp, #20
   1e4d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1e4d8:	4284      	cmp	r4, r0
   1e4da:	d105      	bne.n	1e4e8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   1e4dc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   1e4e0:	f002 ff98 	bl	21414 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1e4e4:	42a0      	cmp	r0, r4
   1e4e6:	d1f2      	bne.n	1e4ce <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e4e8:	2000      	movs	r0, #0
   1e4ea:	e7f2      	b.n	1e4d2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e4ec:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e4f0:	f10d 0103 	add.w	r1, sp, #3
   1e4f4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1e4f6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e4fa:	f002 ff31 	bl	21360 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e4fe:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   1e500:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1e502:	aa02      	add	r2, sp, #8
   1e504:	4649      	mov	r1, r9
   1e506:	4628      	mov	r0, r5
   1e508:	f002 fe0c 	bl	21124 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1e50c:	4b37      	ldr	r3, [pc, #220]	; (1e5ec <gpio_nrfx_pin_configure+0x14c>)
   1e50e:	4298      	cmp	r0, r3
   1e510:	d002      	beq.n	1e518 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e512:	f06f 0015 	mvn.w	r0, #21
   1e516:	e7dc      	b.n	1e4d2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1e518:	4580      	cmp	r8, r0
   1e51a:	d103      	bne.n	1e524 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   1e51c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1e520:	f002 ff78 	bl	21414 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1e524:	05a3      	lsls	r3, r4, #22
   1e526:	d54e      	bpl.n	1e5c6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e528:	4b31      	ldr	r3, [pc, #196]	; (1e5f0 <gpio_nrfx_pin_configure+0x150>)
   1e52a:	4a32      	ldr	r2, [pc, #200]	; (1e5f4 <gpio_nrfx_pin_configure+0x154>)
   1e52c:	4023      	ands	r3, r4
   1e52e:	4293      	cmp	r3, r2
   1e530:	d03a      	beq.n	1e5a8 <gpio_nrfx_pin_configure+0x108>
   1e532:	d80c      	bhi.n	1e54e <gpio_nrfx_pin_configure+0xae>
   1e534:	2b06      	cmp	r3, #6
   1e536:	d014      	beq.n	1e562 <gpio_nrfx_pin_configure+0xc2>
   1e538:	d804      	bhi.n	1e544 <gpio_nrfx_pin_configure+0xa4>
   1e53a:	b193      	cbz	r3, 1e562 <gpio_nrfx_pin_configure+0xc2>
   1e53c:	2b02      	cmp	r3, #2
   1e53e:	d1e8      	bne.n	1e512 <gpio_nrfx_pin_configure+0x72>
   1e540:	2304      	movs	r3, #4
   1e542:	e00e      	b.n	1e562 <gpio_nrfx_pin_configure+0xc2>
   1e544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e548:	d1e3      	bne.n	1e512 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1e54a:	2301      	movs	r3, #1
   1e54c:	e009      	b.n	1e562 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e54e:	4a2a      	ldr	r2, [pc, #168]	; (1e5f8 <gpio_nrfx_pin_configure+0x158>)
   1e550:	4293      	cmp	r3, r2
   1e552:	d02b      	beq.n	1e5ac <gpio_nrfx_pin_configure+0x10c>
   1e554:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1e558:	d02a      	beq.n	1e5b0 <gpio_nrfx_pin_configure+0x110>
   1e55a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1e55e:	d1d8      	bne.n	1e512 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   1e560:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   1e562:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1e566:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   1e56a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   1e56e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1e570:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   1e574:	bf54      	ite	pl
   1e576:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1e57a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1e57c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   1e57e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1e582:	d517      	bpl.n	1e5b4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1e584:	687b      	ldr	r3, [r7, #4]
   1e586:	2101      	movs	r1, #1
   1e588:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   1e58c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1e590:	2200      	movs	r2, #0
   1e592:	a901      	add	r1, sp, #4
   1e594:	4628      	mov	r0, r5
   1e596:	f002 fe6d 	bl	21274 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e59a:	4b14      	ldr	r3, [pc, #80]	; (1e5ec <gpio_nrfx_pin_configure+0x14c>)
   1e59c:	4298      	cmp	r0, r3
   1e59e:	bf14      	ite	ne
   1e5a0:	f06f 0015 	mvnne.w	r0, #21
   1e5a4:	2000      	moveq	r0, #0
   1e5a6:	e794      	b.n	1e4d2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   1e5a8:	2307      	movs	r3, #7
   1e5aa:	e7da      	b.n	1e562 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   1e5ac:	2305      	movs	r3, #5
   1e5ae:	e7d8      	b.n	1e562 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   1e5b0:	2303      	movs	r3, #3
   1e5b2:	e7d6      	b.n	1e562 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1e5b4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1e5b6:	bf41      	itttt	mi
   1e5b8:	687b      	ldrmi	r3, [r7, #4]
   1e5ba:	2101      	movmi	r1, #1
   1e5bc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   1e5c0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   1e5c4:	e7e4      	b.n	1e590 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   1e5c6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e5c8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1e5cc:	bf54      	ite	pl
   1e5ce:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   1e5d2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e5d4:	461a      	mov	r2, r3
   1e5d6:	a901      	add	r1, sp, #4
   1e5d8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1e5da:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1e5de:	f002 fda1 	bl	21124 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1e5e2:	4b02      	ldr	r3, [pc, #8]	; (1e5ec <gpio_nrfx_pin_configure+0x14c>)
   1e5e4:	4298      	cmp	r0, r3
   1e5e6:	f43f af7f 	beq.w	1e4e8 <gpio_nrfx_pin_configure+0x48>
   1e5ea:	e792      	b.n	1e512 <gpio_nrfx_pin_configure+0x72>
   1e5ec:	0bad0000 	.word	0x0bad0000
   1e5f0:	00f00006 	.word	0x00f00006
   1e5f4:	00100006 	.word	0x00100006
   1e5f8:	00400002 	.word	0x00400002

0001e5fc <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e5fc:	4b02      	ldr	r3, [pc, #8]	; (1e608 <flash_nrf_pages_layout+0xc>)
   1e5fe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e600:	2301      	movs	r3, #1
   1e602:	6013      	str	r3, [r2, #0]
}
   1e604:	4770      	bx	lr
   1e606:	bf00      	nop
   1e608:	20002b60 	.word	0x20002b60

0001e60c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e60c:	4800      	ldr	r0, [pc, #0]	; (1e610 <flash_nrf_get_parameters+0x4>)
   1e60e:	4770      	bx	lr
   1e610:	0002e294 	.word	0x0002e294

0001e614 <flash_nrf_read>:
{
   1e614:	b570      	push	{r4, r5, r6, lr}
   1e616:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1e618:	4628      	mov	r0, r5
   1e61a:	4619      	mov	r1, r3
{
   1e61c:	4616      	mov	r6, r2
   1e61e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e620:	f00e fa6d 	bl	2cafe <is_regular_addr_valid>
   1e624:	b970      	cbnz	r0, 1e644 <flash_nrf_read+0x30>
   1e626:	4a0c      	ldr	r2, [pc, #48]	; (1e658 <flash_nrf_read+0x44>)
   1e628:	4b0c      	ldr	r3, [pc, #48]	; (1e65c <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e62a:	480d      	ldr	r0, [pc, #52]	; (1e660 <flash_nrf_read+0x4c>)
   1e62c:	1a9b      	subs	r3, r3, r2
   1e62e:	08db      	lsrs	r3, r3, #3
   1e630:	019b      	lsls	r3, r3, #6
   1e632:	f043 0301 	orr.w	r3, r3, #1
   1e636:	4622      	mov	r2, r4
   1e638:	4629      	mov	r1, r5
   1e63a:	f00a fad9 	bl	28bf0 <log_2>
		return -EINVAL;
   1e63e:	f06f 0015 	mvn.w	r0, #21
}
   1e642:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1e644:	b134      	cbz	r4, 1e654 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1e646:	4622      	mov	r2, r4
   1e648:	4629      	mov	r1, r5
   1e64a:	4630      	mov	r0, r6
   1e64c:	f00c fa25 	bl	2aa9a <memcpy>
	return 0;
   1e650:	2000      	movs	r0, #0
   1e652:	e7f6      	b.n	1e642 <flash_nrf_read+0x2e>
		return 0;
   1e654:	4620      	mov	r0, r4
   1e656:	e7f4      	b.n	1e642 <flash_nrf_read+0x2e>
   1e658:	0002d948 	.word	0x0002d948
   1e65c:	0002d9d8 	.word	0x0002d9d8
   1e660:	00031a0f 	.word	0x00031a0f

0001e664 <restore_pofwarn.part.0>:
	}

	return 0;
}

static void restore_pofwarn(void)
   1e664:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   1e666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1e66a:	2001      	movs	r0, #1
   1e66c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1e670:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1e674:	f00e fa56 	bl	2cb24 <nrf_power_pofcon_set.constprop.0>
		pofcon_enabled = false;
   1e678:	4b01      	ldr	r3, [pc, #4]	; (1e680 <restore_pofwarn.part.0+0x1c>)
   1e67a:	2200      	movs	r2, #0
   1e67c:	701a      	strb	r2, [r3, #0]
	}
}
   1e67e:	bd08      	pop	{r3, pc}
   1e680:	200038a5 	.word	0x200038a5

0001e684 <suspend_pofwarn.part.0>:
static int suspend_pofwarn(void)
   1e684:	b508      	push	{r3, lr}
   1e686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e68a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
	if (enabled) {
   1e68e:	f011 0001 	ands.w	r0, r1, #1
   1e692:	d00c      	beq.n	1e6ae <suspend_pofwarn.part.0+0x2a>
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1e694:	2000      	movs	r0, #0
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   1e696:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1e69a:	f00e fa43 	bl	2cb24 <nrf_power_pofcon_set.constprop.0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e69e:	4b06      	ldr	r3, [pc, #24]	; (1e6b8 <suspend_pofwarn.part.0+0x34>)
   1e6a0:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1e6a2:	b128      	cbz	r0, 1e6b0 <suspend_pofwarn.part.0+0x2c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1e6a4:	2001      	movs	r0, #1
   1e6a6:	f00e fa3d 	bl	2cb24 <nrf_power_pofcon_set.constprop.0>
			return -ECANCELED;
   1e6aa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1e6ae:	bd08      	pop	{r3, pc}
		pofcon_enabled = enabled;
   1e6b0:	4b02      	ldr	r3, [pc, #8]	; (1e6bc <suspend_pofwarn.part.0+0x38>)
   1e6b2:	2201      	movs	r2, #1
   1e6b4:	701a      	strb	r2, [r3, #0]
   1e6b6:	e7fa      	b.n	1e6ae <suspend_pofwarn.part.0+0x2a>
   1e6b8:	40000108 	.word	0x40000108
   1e6bc:	200038a5 	.word	0x200038a5

0001e6c0 <erase_op>:
{
   1e6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e6c4:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e6c6:	f00e fd9d 	bl	2d204 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1e6ca:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e6cc:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   1e6ce:	b10b      	cbz	r3, 1e6d4 <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   1e6d0:	f00e fcff 	bl	2d0d2 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e6d4:	4f16      	ldr	r7, [pc, #88]	; (1e730 <erase_op+0x70>)
	if (pofcon_enabled) {
   1e6d6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e734 <erase_op+0x74>
{
   1e6da:	2600      	movs	r6, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e6dc:	683b      	ldr	r3, [r7, #0]
   1e6de:	2b08      	cmp	r3, #8
   1e6e0:	d019      	beq.n	1e716 <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1e6e2:	6860      	ldr	r0, [r4, #4]
   1e6e4:	f003 f832 	bl	2174c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1e6e8:	68a3      	ldr	r3, [r4, #8]
   1e6ea:	1b5b      	subs	r3, r3, r5
   1e6ec:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1e6ee:	6863      	ldr	r3, [r4, #4]
   1e6f0:	442b      	add	r3, r5
   1e6f2:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1e6f4:	f898 3000 	ldrb.w	r3, [r8]
   1e6f8:	b10b      	cbz	r3, 1e6fe <erase_op+0x3e>
   1e6fa:	f7ff ffb3 	bl	1e664 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   1e6fe:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e700:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   1e702:	b97b      	cbnz	r3, 1e724 <erase_op+0x64>
	} while (e_ctx->len > 0);
   1e704:	68a3      	ldr	r3, [r4, #8]
   1e706:	2b00      	cmp	r3, #0
   1e708:	d1e8      	bne.n	1e6dc <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1e70a:	68a0      	ldr	r0, [r4, #8]
   1e70c:	3800      	subs	r0, #0
   1e70e:	bf18      	it	ne
   1e710:	2001      	movne	r0, #1
}
   1e712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   1e716:	f7ff ffb5 	bl	1e684 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   1e71a:	2800      	cmp	r0, #0
   1e71c:	d0e1      	beq.n	1e6e2 <erase_op+0x22>
			return -ECANCELED;
   1e71e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e722:	e7f6      	b.n	1e712 <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e724:	4630      	mov	r0, r6
   1e726:	f002 fad9 	bl	20cdc <nrf_flash_sync_check_time_limit>
   1e72a:	2800      	cmp	r0, #0
   1e72c:	d0ea      	beq.n	1e704 <erase_op+0x44>
   1e72e:	e7ec      	b.n	1e70a <erase_op+0x4a>
   1e730:	10000130 	.word	0x10000130
   1e734:	200038a5 	.word	0x200038a5

0001e738 <flash_nrf_erase>:
{
   1e738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e73a:	b087      	sub	sp, #28
   1e73c:	460e      	mov	r6, r1
   1e73e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e740:	f00e fd60 	bl	2d204 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e744:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e746:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e748:	4630      	mov	r0, r6
   1e74a:	f00e f9d8 	bl	2cafe <is_regular_addr_valid>
   1e74e:	b388      	cbz	r0, 1e7b4 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e750:	fbb6 f3f7 	udiv	r3, r6, r7
   1e754:	fb07 6313 	mls	r3, r7, r3, r6
   1e758:	b923      	cbnz	r3, 1e764 <flash_nrf_erase+0x2c>
   1e75a:	fbb5 f4f7 	udiv	r4, r5, r7
   1e75e:	fb07 5414 	mls	r4, r7, r4, r5
   1e762:	b184      	cbz	r4, 1e786 <flash_nrf_erase+0x4e>
   1e764:	4a25      	ldr	r2, [pc, #148]	; (1e7fc <flash_nrf_erase+0xc4>)
   1e766:	4b26      	ldr	r3, [pc, #152]	; (1e800 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e768:	4826      	ldr	r0, [pc, #152]	; (1e804 <flash_nrf_erase+0xcc>)
   1e76a:	1a9b      	subs	r3, r3, r2
   1e76c:	08db      	lsrs	r3, r3, #3
   1e76e:	019b      	lsls	r3, r3, #6
   1e770:	f043 0301 	orr.w	r3, r3, #1
   1e774:	462a      	mov	r2, r5
   1e776:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e778:	f00a fa3a 	bl	28bf0 <log_2>
		return -EINVAL;
   1e77c:	f06f 0415 	mvn.w	r4, #21
}
   1e780:	4620      	mov	r0, r4
   1e782:	b007      	add	sp, #28
   1e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e786:	42bd      	cmp	r5, r7
   1e788:	d3fa      	bcc.n	1e780 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1e78a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e78e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e792:	481d      	ldr	r0, [pc, #116]	; (1e808 <flash_nrf_erase+0xd0>)
   1e794:	f004 f9a4 	bl	22ae0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e798:	f00e fc99 	bl	2d0ce <nrf_flash_sync_is_required>
   1e79c:	ab02      	add	r3, sp, #8
   1e79e:	4601      	mov	r1, r0
   1e7a0:	b998      	cbnz	r0, 1e7ca <flash_nrf_erase+0x92>
	struct flash_context context = {
   1e7a2:	2210      	movs	r2, #16
   1e7a4:	4618      	mov	r0, r3
   1e7a6:	f00c f983 	bl	2aab0 <memset>
   1e7aa:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1e7ae:	f7ff ff87 	bl	1e6c0 <erase_op>
   1e7b2:	e01d      	b.n	1e7f0 <flash_nrf_erase+0xb8>
   1e7b4:	4a11      	ldr	r2, [pc, #68]	; (1e7fc <flash_nrf_erase+0xc4>)
   1e7b6:	4b12      	ldr	r3, [pc, #72]	; (1e800 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e7b8:	4814      	ldr	r0, [pc, #80]	; (1e80c <flash_nrf_erase+0xd4>)
   1e7ba:	1a9b      	subs	r3, r3, r2
   1e7bc:	08db      	lsrs	r3, r3, #3
   1e7be:	019b      	lsls	r3, r3, #6
   1e7c0:	f043 0301 	orr.w	r3, r3, #1
   1e7c4:	462a      	mov	r2, r5
   1e7c6:	4631      	mov	r1, r6
   1e7c8:	e7d6      	b.n	1e778 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1e7ca:	2210      	movs	r2, #16
   1e7cc:	4621      	mov	r1, r4
   1e7ce:	4618      	mov	r0, r3
   1e7d0:	f00c f96e 	bl	2aab0 <memset>
   1e7d4:	2201      	movs	r2, #1
   1e7d6:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e7da:	4a0d      	ldr	r2, [pc, #52]	; (1e810 <flash_nrf_erase+0xd8>)
   1e7dc:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e7e0:	480c      	ldr	r0, [pc, #48]	; (1e814 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1e7e2:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e7e6:	f002 f99d 	bl	20b24 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e7ea:	4668      	mov	r0, sp
   1e7ec:	f002 f9a0 	bl	20b30 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e7f0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e7f2:	4805      	ldr	r0, [pc, #20]	; (1e808 <flash_nrf_erase+0xd0>)
   1e7f4:	f004 f930 	bl	22a58 <z_impl_k_sem_give>
}
   1e7f8:	e7c2      	b.n	1e780 <flash_nrf_erase+0x48>
   1e7fa:	bf00      	nop
   1e7fc:	0002d948 	.word	0x0002d948
   1e800:	0002d9d8 	.word	0x0002d9d8
   1e804:	00031a2c 	.word	0x00031a2c
   1e808:	20002b68 	.word	0x20002b68
   1e80c:	00031a0f 	.word	0x00031a0f
   1e810:	0001e6c1 	.word	0x0001e6c1
   1e814:	00015e64 	.word	0x00015e64

0001e818 <nrf_flash_init>:
{
   1e818:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e81a:	2201      	movs	r2, #1
   1e81c:	4611      	mov	r1, r2
   1e81e:	4807      	ldr	r0, [pc, #28]	; (1e83c <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e820:	4c07      	ldr	r4, [pc, #28]	; (1e840 <nrf_flash_init+0x28>)
   1e822:	f00e fd76 	bl	2d312 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e826:	f002 f975 	bl	20b14 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e82a:	f00e fcef 	bl	2d20c <nrfx_nvmc_flash_page_count_get>
   1e82e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e830:	f00e fce8 	bl	2d204 <nrfx_nvmc_flash_page_size_get>
   1e834:	6060      	str	r0, [r4, #4]
}
   1e836:	2000      	movs	r0, #0
   1e838:	bd10      	pop	{r4, pc}
   1e83a:	bf00      	nop
   1e83c:	20002b68 	.word	0x20002b68
   1e840:	20002b60 	.word	0x20002b60

0001e844 <write_op>:
{
   1e844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   1e846:	7b03      	ldrb	r3, [r0, #12]
{
   1e848:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e84a:	b10b      	cbz	r3, 1e850 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e84c:	f00e fc41 	bl	2d0d2 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e850:	4e1c      	ldr	r6, [pc, #112]	; (1e8c4 <write_op+0x80>)
	if (pofcon_enabled) {
   1e852:	4f1d      	ldr	r7, [pc, #116]	; (1e8c8 <write_op+0x84>)
{
   1e854:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e856:	68a3      	ldr	r3, [r4, #8]
   1e858:	2b03      	cmp	r3, #3
   1e85a:	d806      	bhi.n	1e86a <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e85c:	4a1b      	ldr	r2, [pc, #108]	; (1e8cc <write_op+0x88>)
   1e85e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e862:	07db      	lsls	r3, r3, #31
   1e864:	d5fb      	bpl.n	1e85e <write_op+0x1a>
	return FLASH_OP_DONE;
   1e866:	2000      	movs	r0, #0
}
   1e868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   1e86a:	6833      	ldr	r3, [r6, #0]
   1e86c:	2b08      	cmp	r3, #8
   1e86e:	d021      	beq.n	1e8b4 <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e870:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e872:	6860      	ldr	r0, [r4, #4]
   1e874:	6819      	ldr	r1, [r3, #0]
   1e876:	f002 ffa1 	bl	217bc <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1e87a:	783b      	ldrb	r3, [r7, #0]
   1e87c:	b10b      	cbz	r3, 1e882 <write_op+0x3e>
   1e87e:	f7ff fef1 	bl	1e664 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   1e882:	6863      	ldr	r3, [r4, #4]
   1e884:	3304      	adds	r3, #4
   1e886:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e888:	6823      	ldr	r3, [r4, #0]
   1e88a:	3304      	adds	r3, #4
   1e88c:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e88e:	68a3      	ldr	r3, [r4, #8]
   1e890:	3b04      	subs	r3, #4
   1e892:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e894:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e896:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e898:	2b00      	cmp	r3, #0
   1e89a:	d0dc      	beq.n	1e856 <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e89c:	4628      	mov	r0, r5
   1e89e:	f002 fa1d 	bl	20cdc <nrf_flash_sync_check_time_limit>
   1e8a2:	2800      	cmp	r0, #0
   1e8a4:	d0d7      	beq.n	1e856 <write_op+0x12>
   1e8a6:	4a09      	ldr	r2, [pc, #36]	; (1e8cc <write_op+0x88>)
   1e8a8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e8ac:	07d9      	lsls	r1, r3, #31
   1e8ae:	d5fb      	bpl.n	1e8a8 <write_op+0x64>
				return FLASH_OP_ONGOING;
   1e8b0:	2001      	movs	r0, #1
   1e8b2:	e7d9      	b.n	1e868 <write_op+0x24>
                switch(var2)
   1e8b4:	f7ff fee6 	bl	1e684 <suspend_pofwarn.part.0>
		if (SUSPEND_POFWARN()) {
   1e8b8:	2800      	cmp	r0, #0
   1e8ba:	d0d9      	beq.n	1e870 <write_op+0x2c>
			return -ECANCELED;
   1e8bc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1e8c0:	e7d2      	b.n	1e868 <write_op+0x24>
   1e8c2:	bf00      	nop
   1e8c4:	10000130 	.word	0x10000130
   1e8c8:	200038a5 	.word	0x200038a5
   1e8cc:	4001e000 	.word	0x4001e000

0001e8d0 <flash_nrf_write>:
{
   1e8d0:	b570      	push	{r4, r5, r6, lr}
   1e8d2:	460d      	mov	r5, r1
   1e8d4:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1e8d6:	4619      	mov	r1, r3
   1e8d8:	4628      	mov	r0, r5
{
   1e8da:	4616      	mov	r6, r2
   1e8dc:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e8de:	f00e f90e 	bl	2cafe <is_regular_addr_valid>
   1e8e2:	b980      	cbnz	r0, 1e906 <flash_nrf_write+0x36>
   1e8e4:	4a23      	ldr	r2, [pc, #140]	; (1e974 <flash_nrf_write+0xa4>)
   1e8e6:	4b24      	ldr	r3, [pc, #144]	; (1e978 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e8e8:	4824      	ldr	r0, [pc, #144]	; (1e97c <flash_nrf_write+0xac>)
   1e8ea:	1a9b      	subs	r3, r3, r2
   1e8ec:	08db      	lsrs	r3, r3, #3
   1e8ee:	019b      	lsls	r3, r3, #6
   1e8f0:	f043 0301 	orr.w	r3, r3, #1
   1e8f4:	4622      	mov	r2, r4
   1e8f6:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e8f8:	f00a f97a 	bl	28bf0 <log_2>
		return -EINVAL;
   1e8fc:	f06f 0415 	mvn.w	r4, #21
}
   1e900:	4620      	mov	r0, r4
   1e902:	b006      	add	sp, #24
   1e904:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e906:	ea45 0304 	orr.w	r3, r5, r4
   1e90a:	079b      	lsls	r3, r3, #30
   1e90c:	d00a      	beq.n	1e924 <flash_nrf_write+0x54>
   1e90e:	4a19      	ldr	r2, [pc, #100]	; (1e974 <flash_nrf_write+0xa4>)
   1e910:	4b19      	ldr	r3, [pc, #100]	; (1e978 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e912:	481b      	ldr	r0, [pc, #108]	; (1e980 <flash_nrf_write+0xb0>)
   1e914:	1a9b      	subs	r3, r3, r2
   1e916:	08db      	lsrs	r3, r3, #3
   1e918:	019b      	lsls	r3, r3, #6
   1e91a:	f043 0301 	orr.w	r3, r3, #1
   1e91e:	4622      	mov	r2, r4
   1e920:	4629      	mov	r1, r5
   1e922:	e7e9      	b.n	1e8f8 <flash_nrf_write+0x28>
	if (!len) {
   1e924:	2c00      	cmp	r4, #0
   1e926:	d0eb      	beq.n	1e900 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1e928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e930:	4814      	ldr	r0, [pc, #80]	; (1e984 <flash_nrf_write+0xb4>)
   1e932:	f004 f8d5 	bl	22ae0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e936:	f00e fbca 	bl	2d0ce <nrf_flash_sync_is_required>
   1e93a:	4603      	mov	r3, r0
	struct flash_context context = {
   1e93c:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1e940:	a802      	add	r0, sp, #8
   1e942:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1e944:	b18b      	cbz	r3, 1e96a <flash_nrf_write+0x9a>
	struct flash_context context = {
   1e946:	2301      	movs	r3, #1
   1e948:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e94c:	4b0e      	ldr	r3, [pc, #56]	; (1e988 <flash_nrf_write+0xb8>)
   1e94e:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e952:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e956:	f002 f8e5 	bl	20b24 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e95a:	4668      	mov	r0, sp
   1e95c:	f002 f8e8 	bl	20b30 <nrf_flash_sync_exe>
	return write_op(&context);
   1e960:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e962:	4808      	ldr	r0, [pc, #32]	; (1e984 <flash_nrf_write+0xb4>)
   1e964:	f004 f878 	bl	22a58 <z_impl_k_sem_give>
}
   1e968:	e7ca      	b.n	1e900 <flash_nrf_write+0x30>
	struct flash_context context = {
   1e96a:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1e96e:	f7ff ff69 	bl	1e844 <write_op>
   1e972:	e7f5      	b.n	1e960 <flash_nrf_write+0x90>
   1e974:	0002d948 	.word	0x0002d948
   1e978:	0002d9d8 	.word	0x0002d9d8
   1e97c:	00031a0f 	.word	0x00031a0f
   1e980:	00031a4b 	.word	0x00031a4b
   1e984:	20002b68 	.word	0x20002b68
   1e988:	0001e845 	.word	0x0001e845

0001e98c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e98c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e98e:	794b      	ldrb	r3, [r1, #5]
   1e990:	2b01      	cmp	r3, #1
   1e992:	d026      	beq.n	1e9e2 <uarte_nrfx_configure+0x56>
   1e994:	2b03      	cmp	r3, #3
   1e996:	d121      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e998:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e99a:	798b      	ldrb	r3, [r1, #6]
   1e99c:	2b03      	cmp	r3, #3
   1e99e:	d11d      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e9a0:	79cc      	ldrb	r4, [r1, #7]
   1e9a2:	b10c      	cbz	r4, 1e9a8 <uarte_nrfx_configure+0x1c>
   1e9a4:	2c01      	cmp	r4, #1
   1e9a6:	d119      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e9a8:	790a      	ldrb	r2, [r1, #4]
   1e9aa:	b112      	cbz	r2, 1e9b2 <uarte_nrfx_configure+0x26>
   1e9ac:	2a02      	cmp	r2, #2
   1e9ae:	d115      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e9b0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e9b2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e9b4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e9b6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e9ba:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e9bc:	d065      	beq.n	1ea8a <uarte_nrfx_configure+0xfe>
   1e9be:	d82d      	bhi.n	1ea1c <uarte_nrfx_configure+0x90>
   1e9c0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e9c4:	d064      	beq.n	1ea90 <uarte_nrfx_configure+0x104>
   1e9c6:	d816      	bhi.n	1e9f6 <uarte_nrfx_configure+0x6a>
   1e9c8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e9cc:	d062      	beq.n	1ea94 <uarte_nrfx_configure+0x108>
   1e9ce:	d80a      	bhi.n	1e9e6 <uarte_nrfx_configure+0x5a>
   1e9d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e9d4:	d061      	beq.n	1ea9a <uarte_nrfx_configure+0x10e>
   1e9d6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e9da:	d061      	beq.n	1eaa0 <uarte_nrfx_configure+0x114>
   1e9dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e9e0:	e052      	b.n	1ea88 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   1e9e2:	2600      	movs	r6, #0
   1e9e4:	e7d9      	b.n	1e99a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e9e6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e9ea:	d05c      	beq.n	1eaa6 <uarte_nrfx_configure+0x11a>
   1e9ec:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e9f0:	d1f4      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e9f2:	4b37      	ldr	r3, [pc, #220]	; (1ead0 <uarte_nrfx_configure+0x144>)
   1e9f4:	e03c      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1e9f6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e9fa:	d057      	beq.n	1eaac <uarte_nrfx_configure+0x120>
   1e9fc:	d807      	bhi.n	1ea0e <uarte_nrfx_configure+0x82>
   1e9fe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1ea02:	d055      	beq.n	1eab0 <uarte_nrfx_configure+0x124>
   1ea04:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1ea08:	d1e8      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1ea0a:	4b32      	ldr	r3, [pc, #200]	; (1ead4 <uarte_nrfx_configure+0x148>)
   1ea0c:	e030      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1ea0e:	f647 2712 	movw	r7, #31250	; 0x7a12
   1ea12:	42bb      	cmp	r3, r7
   1ea14:	d1e2      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1ea16:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1ea1a:	e029      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1ea1c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1ea20:	d048      	beq.n	1eab4 <uarte_nrfx_configure+0x128>
   1ea22:	d813      	bhi.n	1ea4c <uarte_nrfx_configure+0xc0>
   1ea24:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1ea28:	d047      	beq.n	1eaba <uarte_nrfx_configure+0x12e>
   1ea2a:	d809      	bhi.n	1ea40 <uarte_nrfx_configure+0xb4>
   1ea2c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1ea30:	42bb      	cmp	r3, r7
   1ea32:	d044      	beq.n	1eabe <uarte_nrfx_configure+0x132>
   1ea34:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1ea38:	d1d0      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1ea3a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1ea3e:	e017      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1ea40:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1ea44:	d1ca      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1ea46:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1ea4a:	e011      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1ea4c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1ea50:	d038      	beq.n	1eac4 <uarte_nrfx_configure+0x138>
   1ea52:	d808      	bhi.n	1ea66 <uarte_nrfx_configure+0xda>
   1ea54:	4f20      	ldr	r7, [pc, #128]	; (1ead8 <uarte_nrfx_configure+0x14c>)
   1ea56:	42bb      	cmp	r3, r7
   1ea58:	d037      	beq.n	1eaca <uarte_nrfx_configure+0x13e>
   1ea5a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1ea5e:	d1bd      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1ea60:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1ea64:	e004      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1ea66:	4f1d      	ldr	r7, [pc, #116]	; (1eadc <uarte_nrfx_configure+0x150>)
   1ea68:	42bb      	cmp	r3, r7
   1ea6a:	d1b7      	bne.n	1e9dc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1ea6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1ea70:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1ea74:	6903      	ldr	r3, [r0, #16]
   1ea76:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1ea78:	4334      	orrs	r4, r6
   1ea7a:	4322      	orrs	r2, r4
   1ea7c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ea7e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1ea82:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1ea86:	2000      	movs	r0, #0
}
   1ea88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1ea8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1ea8e:	e7ef      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1ea90:	4b13      	ldr	r3, [pc, #76]	; (1eae0 <uarte_nrfx_configure+0x154>)
   1ea92:	e7ed      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1ea94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ea98:	e7ea      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1ea9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ea9e:	e7e7      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1eaa0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1eaa4:	e7e4      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1eaa6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1eaaa:	e7e1      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1eaac:	4b0d      	ldr	r3, [pc, #52]	; (1eae4 <uarte_nrfx_configure+0x158>)
   1eaae:	e7df      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1eab0:	4b0d      	ldr	r3, [pc, #52]	; (1eae8 <uarte_nrfx_configure+0x15c>)
   1eab2:	e7dd      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1eab4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1eab8:	e7da      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1eaba:	4b0c      	ldr	r3, [pc, #48]	; (1eaec <uarte_nrfx_configure+0x160>)
   1eabc:	e7d8      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1eabe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1eac2:	e7d5      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1eac4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1eac8:	e7d2      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1eaca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1eace:	e7cf      	b.n	1ea70 <uarte_nrfx_configure+0xe4>
   1ead0:	0013b000 	.word	0x0013b000
   1ead4:	004ea000 	.word	0x004ea000
   1ead8:	0003d090 	.word	0x0003d090
   1eadc:	000f4240 	.word	0x000f4240
   1eae0:	00275000 	.word	0x00275000
   1eae4:	0075c000 	.word	0x0075c000
   1eae8:	003af000 	.word	0x003af000
   1eaec:	013a9000 	.word	0x013a9000

0001eaf0 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   1eaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eaf4:	4614      	mov	r4, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1eaf6:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1eaf8:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   1eafc:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   1eafe:	7a12      	ldrb	r2, [r2, #8]
{
   1eb00:	4605      	mov	r5, r0
   1eb02:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   1eb04:	b192      	cbz	r2, 1eb2c <uarte_nrfx_rx_enable+0x3c>
		__ASSERT(false, "TX only UARTE instance");
   1eb06:	4a44      	ldr	r2, [pc, #272]	; (1ec18 <uarte_nrfx_rx_enable+0x128>)
   1eb08:	4944      	ldr	r1, [pc, #272]	; (1ec1c <uarte_nrfx_rx_enable+0x12c>)
   1eb0a:	4845      	ldr	r0, [pc, #276]	; (1ec20 <uarte_nrfx_rx_enable+0x130>)
   1eb0c:	f240 337f 	movw	r3, #895	; 0x37f
   1eb10:	f009 fe2e 	bl	28770 <printk>
   1eb14:	4843      	ldr	r0, [pc, #268]	; (1ec24 <uarte_nrfx_rx_enable+0x134>)
   1eb16:	f009 fe2b 	bl	28770 <printk>
   1eb1a:	483f      	ldr	r0, [pc, #252]	; (1ec18 <uarte_nrfx_rx_enable+0x128>)
   1eb1c:	f240 317f 	movw	r1, #895	; 0x37f
   1eb20:	f00a f817 	bl	28b52 <assert_post_action>
		return -ENOTSUP;
   1eb24:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   1eb28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
   1eb2c:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1eb30:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
   1eb34:	2a00      	cmp	r2, #0
   1eb36:	d16b      	bne.n	1ec10 <uarte_nrfx_rx_enable+0x120>
		MAX(timeout / RX_TIMEOUT_DIV,
   1eb38:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1eb3c:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   1eb3e:	bfd2      	itee	le
   1eb40:	235c      	movle	r3, #92	; 0x5c
   1eb42:	2205      	movgt	r2, #5
   1eb44:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1eb48:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
   1eb4c:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   1eb4e:	e9c1 8418 	strd	r8, r4, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1eb52:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
   1eb56:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1eb58:	6843      	ldr	r3, [r0, #4]
   1eb5a:	685b      	ldr	r3, [r3, #4]
   1eb5c:	06da      	lsls	r2, r3, #27
   1eb5e:	d524      	bpl.n	1ebaa <uarte_nrfx_rx_enable+0xba>
		if (data->async->rx_flush_cnt) {
   1eb60:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
   1eb64:	b30e      	cbz	r6, 1ebaa <uarte_nrfx_rx_enable+0xba>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1eb66:	42a6      	cmp	r6, r4
   1eb68:	bf28      	it	cs
   1eb6a:	4626      	movcs	r6, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   1eb6c:	4640      	mov	r0, r8
   1eb6e:	4632      	mov	r2, r6
   1eb70:	31cc      	adds	r1, #204	; 0xcc
   1eb72:	f00b ff92 	bl	2aa9a <memcpy>
			if (!len) {
   1eb76:	1ba4      	subs	r4, r4, r6
			buf += cpy_len;
   1eb78:	44b0      	add	r8, r6
			if (!len) {
   1eb7a:	d116      	bne.n	1ebaa <uarte_nrfx_rx_enable+0xba>
				data->async->rx_flush_cnt -= cpy_len;
   1eb7c:	f8d9 200c 	ldr.w	r2, [r9, #12]
   1eb80:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   1eb84:	1b9b      	subs	r3, r3, r6
   1eb86:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   1eb8a:	4631      	mov	r1, r6
   1eb8c:	4628      	mov	r0, r5
   1eb8e:	f00e f861 	bl	2cc54 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   1eb92:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1eb96:	4628      	mov	r0, r5
   1eb98:	2201      	movs	r2, #1
   1eb9a:	3160      	adds	r1, #96	; 0x60
   1eb9c:	f00e f873 	bl	2cc86 <notify_rx_buf_release>
				notify_rx_disable(dev);
   1eba0:	4628      	mov	r0, r5
   1eba2:	f00e f88a 	bl	2ccba <notify_rx_disable>
	return 0;
   1eba6:	2000      	movs	r0, #0
   1eba8:	e7be      	b.n	1eb28 <uarte_nrfx_rx_enable+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ebaa:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ebac:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ebb0:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ebb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   1ebb8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   1ebbc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   1ebc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   1ebc4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ebc8:	2201      	movs	r2, #1
   1ebca:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ebce:	686b      	ldr	r3, [r5, #4]
   1ebd0:	685b      	ldr	r3, [r3, #4]
   1ebd2:	06db      	lsls	r3, r3, #27
   1ebd4:	d519      	bpl.n	1ec0a <uarte_nrfx_rx_enable+0x11a>
	__asm__ volatile(
   1ebd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ebda:	f3ef 8111 	mrs	r1, BASEPRI
   1ebde:	f383 8812 	msr	BASEPRI_MAX, r3
   1ebe2:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1ebe6:	692b      	ldr	r3, [r5, #16]
   1ebe8:	68db      	ldr	r3, [r3, #12]
   1ebea:	b12b      	cbz	r3, 1ebf8 <uarte_nrfx_rx_enable+0x108>
		data->async->low_power_mask |= mask;
   1ebec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   1ebf0:	f042 0202 	orr.w	r2, r2, #2
   1ebf4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
   1ebf8:	686b      	ldr	r3, [r5, #4]
   1ebfa:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ebfc:	2208      	movs	r2, #8
   1ebfe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1ec02:	f381 8811 	msr	BASEPRI, r1
   1ec06:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec0a:	2301      	movs	r3, #1
   1ec0c:	603b      	str	r3, [r7, #0]
   1ec0e:	e7ca      	b.n	1eba6 <uarte_nrfx_rx_enable+0xb6>
		return -EBUSY;
   1ec10:	f06f 000f 	mvn.w	r0, #15
   1ec14:	e788      	b.n	1eb28 <uarte_nrfx_rx_enable+0x38>
   1ec16:	bf00      	nop
   1ec18:	00031a73 	.word	0x00031a73
   1ec1c:	00032bb3 	.word	0x00032bb3
   1ec20:	0002e915 	.word	0x0002e915
   1ec24:	00031aa7 	.word	0x00031aa7

0001ec28 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ec28:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1ec2a:	0953      	lsrs	r3, r2, #5
{
   1ec2c:	b510      	push	{r4, lr}
   1ec2e:	4604      	mov	r4, r0
    switch (port)
   1ec30:	d02c      	beq.n	1ec8c <nrf_gpio_pin_port_decode+0x64>
   1ec32:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1ec34:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ec38:	bf18      	it	ne
   1ec3a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1ec3c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1ec40:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ec42:	07db      	lsls	r3, r3, #31
   1ec44:	d40b      	bmi.n	1ec5e <nrf_gpio_pin_port_decode+0x36>
   1ec46:	4914      	ldr	r1, [pc, #80]	; (1ec98 <nrf_gpio_pin_port_decode+0x70>)
   1ec48:	4814      	ldr	r0, [pc, #80]	; (1ec9c <nrf_gpio_pin_port_decode+0x74>)
   1ec4a:	4a15      	ldr	r2, [pc, #84]	; (1eca0 <nrf_gpio_pin_port_decode+0x78>)
   1ec4c:	f240 2329 	movw	r3, #553	; 0x229
   1ec50:	f009 fd8e 	bl	28770 <printk>
   1ec54:	4812      	ldr	r0, [pc, #72]	; (1eca0 <nrf_gpio_pin_port_decode+0x78>)
   1ec56:	f240 2129 	movw	r1, #553	; 0x229
   1ec5a:	f009 ff7a 	bl	28b52 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1ec5e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1ec60:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec64:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1ec66:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec68:	d00d      	beq.n	1ec86 <nrf_gpio_pin_port_decode+0x5e>
   1ec6a:	2b01      	cmp	r3, #1
   1ec6c:	d011      	beq.n	1ec92 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   1ec6e:	490d      	ldr	r1, [pc, #52]	; (1eca4 <nrf_gpio_pin_port_decode+0x7c>)
   1ec70:	480a      	ldr	r0, [pc, #40]	; (1ec9c <nrf_gpio_pin_port_decode+0x74>)
   1ec72:	4a0b      	ldr	r2, [pc, #44]	; (1eca0 <nrf_gpio_pin_port_decode+0x78>)
   1ec74:	f240 232e 	movw	r3, #558	; 0x22e
   1ec78:	f009 fd7a 	bl	28770 <printk>
   1ec7c:	4808      	ldr	r0, [pc, #32]	; (1eca0 <nrf_gpio_pin_port_decode+0x78>)
   1ec7e:	f240 212e 	movw	r1, #558	; 0x22e
   1ec82:	f009 ff66 	bl	28b52 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ec86:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1ec8a:	bd10      	pop	{r4, pc}
    switch (port)
   1ec8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ec90:	e7d4      	b.n	1ec3c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1ec92:	4805      	ldr	r0, [pc, #20]	; (1eca8 <nrf_gpio_pin_port_decode+0x80>)
   1ec94:	e7f9      	b.n	1ec8a <nrf_gpio_pin_port_decode+0x62>
   1ec96:	bf00      	nop
   1ec98:	000319de 	.word	0x000319de
   1ec9c:	0002e915 	.word	0x0002e915
   1eca0:	000319ab 	.word	0x000319ab
   1eca4:	00032bb3 	.word	0x00032bb3
   1eca8:	50000300 	.word	0x50000300

0001ecac <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1ecac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1ecb0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ecb4:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   1ecb6:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1ecba:	2300      	movs	r3, #0
   1ecbc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1ecc0:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   1ecc2:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1ecc4:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
   1ecc6:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1ecc8:	1c58      	adds	r0, r3, #1
   1ecca:	d013      	beq.n	1ecf4 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eccc:	a801      	add	r0, sp, #4
   1ecce:	9301      	str	r3, [sp, #4]
   1ecd0:	f7ff ffaa 	bl	1ec28 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ecd4:	9a01      	ldr	r2, [sp, #4]
   1ecd6:	2301      	movs	r3, #1
   1ecd8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ecda:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1ecde:	68eb      	ldr	r3, [r5, #12]
   1ece0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ece2:	a801      	add	r0, sp, #4
   1ece4:	f7ff ffa0 	bl	1ec28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ece8:	9b01      	ldr	r3, [sp, #4]
   1ecea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ecee:	2203      	movs	r2, #3
   1ecf0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1ecf4:	692b      	ldr	r3, [r5, #16]
   1ecf6:	1c59      	adds	r1, r3, #1
   1ecf8:	d011      	beq.n	1ed1e <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1ecfa:	7f2a      	ldrb	r2, [r5, #28]
   1ecfc:	9301      	str	r3, [sp, #4]
   1ecfe:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ed00:	a801      	add	r0, sp, #4
   1ed02:	bf14      	ite	ne
   1ed04:	f04f 0903 	movne.w	r9, #3
   1ed08:	f04f 0900 	moveq.w	r9, #0
   1ed0c:	f7ff ff8c 	bl	1ec28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ed10:	9b01      	ldr	r3, [sp, #4]
   1ed12:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ed16:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1ed1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1ed1e:	696b      	ldr	r3, [r5, #20]
   1ed20:	1c5a      	adds	r2, r3, #1
   1ed22:	d013      	beq.n	1ed4c <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ed24:	a801      	add	r0, sp, #4
   1ed26:	9301      	str	r3, [sp, #4]
   1ed28:	f7ff ff7e 	bl	1ec28 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ed2c:	9a01      	ldr	r2, [sp, #4]
   1ed2e:	2301      	movs	r3, #1
   1ed30:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ed32:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1ed36:	696b      	ldr	r3, [r5, #20]
   1ed38:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ed3a:	a801      	add	r0, sp, #4
   1ed3c:	f7ff ff74 	bl	1ec28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ed40:	9b01      	ldr	r3, [sp, #4]
   1ed42:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ed46:	2203      	movs	r2, #3
   1ed48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1ed4c:	69ab      	ldr	r3, [r5, #24]
   1ed4e:	1c58      	adds	r0, r3, #1
   1ed50:	d011      	beq.n	1ed76 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1ed52:	7f6a      	ldrb	r2, [r5, #29]
   1ed54:	9301      	str	r3, [sp, #4]
   1ed56:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ed58:	a801      	add	r0, sp, #4
   1ed5a:	bf14      	ite	ne
   1ed5c:	f04f 0903 	movne.w	r9, #3
   1ed60:	f04f 0900 	moveq.w	r9, #0
   1ed64:	f7ff ff60 	bl	1ec28 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ed68:	9b01      	ldr	r3, [sp, #4]
   1ed6a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ed6e:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1ed72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1ed76:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   1ed7a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   1ed7c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1ed80:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1ed84:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   1ed88:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1ed8c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
   1ed8e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1ed92:	3104      	adds	r1, #4
   1ed94:	4630      	mov	r0, r6
   1ed96:	f7ff fdf9 	bl	1e98c <uarte_nrfx_configure>
	if (err) {
   1ed9a:	4681      	mov	r9, r0
   1ed9c:	b9b0      	cbnz	r0, 1edcc <uarte_instance_init.isra.0+0x120>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1ed9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1eda2:	0799      	lsls	r1, r3, #30
   1eda4:	d529      	bpl.n	1edfa <uarte_instance_init.isra.0+0x14e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1eda6:	f107 0016 	add.w	r0, r7, #22
   1edaa:	f002 fd41 	bl	21830 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1edae:	4b46      	ldr	r3, [pc, #280]	; (1eec8 <uarte_instance_init.isra.0+0x21c>)
   1edb0:	4298      	cmp	r0, r3
   1edb2:	d00f      	beq.n	1edd4 <uarte_instance_init.isra.0+0x128>
   1edb4:	4b45      	ldr	r3, [pc, #276]	; (1eecc <uarte_instance_init.isra.0+0x220>)
   1edb6:	4946      	ldr	r1, [pc, #280]	; (1eed0 <uarte_instance_init.isra.0+0x224>)
		LOG_ERR("Failed to allocate PPI Channel");
   1edb8:	4846      	ldr	r0, [pc, #280]	; (1eed4 <uarte_instance_init.isra.0+0x228>)
   1edba:	1ac9      	subs	r1, r1, r3
   1edbc:	08c9      	lsrs	r1, r1, #3
   1edbe:	0189      	lsls	r1, r1, #6
   1edc0:	f041 0101 	orr.w	r1, r1, #1
   1edc4:	f009 fef3 	bl	28bae <log_0>
		return -EIO;
   1edc8:	f06f 0904 	mvn.w	r9, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1edcc:	4648      	mov	r0, r9
   1edce:	b003      	add	sp, #12
   1edd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1edd4:	7db8      	ldrb	r0, [r7, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1edd6:	00c3      	lsls	r3, r0, #3
   1edd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eddc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1ede0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ede4:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ede8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1edec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1edf0:	4a39      	ldr	r2, [pc, #228]	; (1eed8 <uarte_instance_init.isra.0+0x22c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1edf2:	2301      	movs	r3, #1
   1edf4:	4083      	lsls	r3, r0
   1edf6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1edfa:	68fb      	ldr	r3, [r7, #12]
   1edfc:	2b00      	cmp	r3, #0
   1edfe:	d04f      	beq.n	1eea0 <uarte_instance_init.isra.0+0x1f4>
	return config->uarte_regs;
   1ee00:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ee02:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   1ee04:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1ee06:	68e8      	ldr	r0, [r5, #12]
    p_reg->INTENSET = mask;
   1ee08:	4934      	ldr	r1, [pc, #208]	; (1eedc <uarte_instance_init.isra.0+0x230>)
   1ee0a:	2204      	movs	r2, #4
   1ee0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1ee10:	2201      	movs	r2, #1
   1ee12:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   1ee16:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ee1a:	2108      	movs	r1, #8
   1ee1c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ee20:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1ee24:	b1a1      	cbz	r1, 1ee50 <uarte_instance_init.isra.0+0x1a4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee26:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ee28:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1ee2c:	b91a      	cbnz	r2, 1ee36 <uarte_instance_init.isra.0+0x18a>
   1ee2e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1ee32:	2a00      	cmp	r2, #0
   1ee34:	d0f8      	beq.n	1ee28 <uarte_instance_init.isra.0+0x17c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee36:	2200      	movs	r2, #0
   1ee38:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1ee3c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1ee40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1ee44:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1ee48:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1ee4c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1ee50:	4923      	ldr	r1, [pc, #140]	; (1eee0 <uarte_instance_init.isra.0+0x234>)
   1ee52:	2200      	movs	r2, #0
   1ee54:	3088      	adds	r0, #136	; 0x88
   1ee56:	f00e fb1e 	bl	2d496 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1ee5a:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
   1ee5c:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1ee60:	68e8      	ldr	r0, [r5, #12]
   1ee62:	4920      	ldr	r1, [pc, #128]	; (1eee4 <uarte_instance_init.isra.0+0x238>)
   1ee64:	2200      	movs	r2, #0
   1ee66:	3028      	adds	r0, #40	; 0x28
   1ee68:	f00e fb15 	bl	2d496 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1ee6c:	68eb      	ldr	r3, [r5, #12]
   1ee6e:	65dd      	str	r5, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ee70:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ee74:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1ee76:	bf5c      	itt	pl
   1ee78:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1ee7c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ee80:	06db      	lsls	r3, r3, #27
   1ee82:	bf44      	itt	mi
   1ee84:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1ee88:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1ee8c:	3714      	adds	r7, #20
    p_reg->TXD.MAXCNT = length;
   1ee8e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ee90:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ee94:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee98:	2301      	movs	r3, #1
   1ee9a:	60a3      	str	r3, [r4, #8]
   1ee9c:	60e3      	str	r3, [r4, #12]
	return 0;
   1ee9e:	e795      	b.n	1edcc <uarte_instance_init.isra.0+0x120>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1eea0:	2308      	movs	r3, #8
   1eea2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1eea6:	f898 3008 	ldrb.w	r3, [r8, #8]
   1eeaa:	2b00      	cmp	r3, #0
   1eeac:	d1e0      	bne.n	1ee70 <uarte_instance_init.isra.0+0x1c4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eeae:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1eeb2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1eeb6:	f107 0315 	add.w	r3, r7, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1eeba:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1eebe:	2301      	movs	r3, #1
   1eec0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eec4:	6023      	str	r3, [r4, #0]
}
   1eec6:	e7d3      	b.n	1ee70 <uarte_instance_init.isra.0+0x1c4>
   1eec8:	0bad0000 	.word	0x0bad0000
   1eecc:	0002d948 	.word	0x0002d948
   1eed0:	0002da50 	.word	0x0002da50
   1eed4:	00031ac0 	.word	0x00031ac0
   1eed8:	4001f000 	.word	0x4001f000
   1eedc:	000a0210 	.word	0x000a0210
   1eee0:	0002cd71 	.word	0x0002cd71
   1eee4:	0002cf09 	.word	0x0002cf09

0001eee8 <uarte_nrfx_poll_out>:
{
   1eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1eeea:	6906      	ldr	r6, [r0, #16]
{
   1eeec:	4604      	mov	r4, r0
   1eeee:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1eef0:	f00e f9c6 	bl	2d280 <k_is_in_isr>
   1eef4:	b910      	cbnz	r0, 1eefc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1eef6:	4b28      	ldr	r3, [pc, #160]	; (1ef98 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   1eef8:	781b      	ldrb	r3, [r3, #0]
   1eefa:	bb5b      	cbnz	r3, 1ef54 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1eefc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef00:	f3ef 8111 	mrs	r1, BASEPRI
   1ef04:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef08:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1ef0c:	4620      	mov	r0, r4
			key = irq_lock();
   1ef0e:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   1ef10:	f00d fe89 	bl	2cc26 <is_tx_ready>
   1ef14:	b1c8      	cbz	r0, 1ef4a <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   1ef16:	68f3      	ldr	r3, [r6, #12]
   1ef18:	b15b      	cbz	r3, 1ef32 <uarte_nrfx_poll_out+0x4a>
   1ef1a:	68da      	ldr	r2, [r3, #12]
   1ef1c:	b14a      	cbz	r2, 1ef32 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   1ef1e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   1ef22:	2a00      	cmp	r2, #0
   1ef24:	da05      	bge.n	1ef32 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   1ef26:	6862      	ldr	r2, [r4, #4]
   1ef28:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   1ef2a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1ef2e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
   1ef32:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   1ef34:	2201      	movs	r2, #1
	data->char_out = c;
   1ef36:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1ef3a:	4620      	mov	r0, r4
   1ef3c:	f00e f827 	bl	2cf8e <tx_start>
	__asm__ volatile(
   1ef40:	f385 8811 	msr	BASEPRI, r5
   1ef44:	f3bf 8f6f 	isb	sy
}
   1ef48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ef4a:	f381 8811 	msr	BASEPRI, r1
   1ef4e:	f3bf 8f6f 	isb	sy
}
   1ef52:	e7d3      	b.n	1eefc <uarte_nrfx_poll_out+0x14>
{
   1ef54:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1ef56:	4620      	mov	r0, r4
   1ef58:	f00d fe65 	bl	2cc26 <is_tx_ready>
   1ef5c:	b948      	cbnz	r0, 1ef72 <uarte_nrfx_poll_out+0x8a>
   1ef5e:	2001      	movs	r0, #1
   1ef60:	f00e f8c4 	bl	2d0ec <nrfx_busy_wait>
   1ef64:	3d01      	subs	r5, #1
   1ef66:	d1f6      	bne.n	1ef56 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   1ef68:	2100      	movs	r1, #0
   1ef6a:	2021      	movs	r0, #33	; 0x21
   1ef6c:	f005 fc6c 	bl	24848 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ef70:	e7f0      	b.n	1ef54 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   1ef72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ef76:	f3ef 8511 	mrs	r5, BASEPRI
   1ef7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ef7e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1ef82:	4620      	mov	r0, r4
   1ef84:	f00d fe4f 	bl	2cc26 <is_tx_ready>
   1ef88:	2800      	cmp	r0, #0
   1ef8a:	d1d2      	bne.n	1ef32 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1ef8c:	f385 8811 	msr	BASEPRI, r5
   1ef90:	f3bf 8f6f 	isb	sy
}
   1ef94:	e7e8      	b.n	1ef68 <uarte_nrfx_poll_out+0x80>
   1ef96:	bf00      	nop
   1ef98:	200042be 	.word	0x200042be

0001ef9c <uarte_nrfx_tx>:
{
   1ef9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ef9e:	461c      	mov	r4, r3
	return config->uarte_regs;
   1efa0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1efa2:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1efa4:	f8d3 c000 	ldr.w	ip, [r3]
{
   1efa8:	4605      	mov	r5, r0
	__asm__ volatile(
   1efaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1efae:	f3ef 8711 	mrs	r7, BASEPRI
   1efb2:	f383 8812 	msr	BASEPRI_MAX, r3
   1efb6:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   1efba:	68f0      	ldr	r0, [r6, #12]
   1efbc:	68c3      	ldr	r3, [r0, #12]
   1efbe:	b13b      	cbz	r3, 1efd0 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1efc0:	f387 8811 	msr	BASEPRI, r7
   1efc4:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1efc8:	f06f 000f 	mvn.w	r0, #15
}
   1efcc:	b003      	add	sp, #12
   1efce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENSET = mask;
   1efd0:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
   1efd4:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
   1efd6:	6081      	str	r1, [r0, #8]
   1efd8:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1efdc:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1efe0:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   1efe4:	d128      	bne.n	1f038 <uarte_nrfx_tx+0x9c>
		data->async->xfer_len = len;
   1efe6:	e9c0 1204 	strd	r1, r2, [r0, #16]
	start_tx_locked(dev, data);
   1efea:	f106 010c 	add.w	r1, r6, #12
   1efee:	4628      	mov	r0, r5
   1eff0:	f00d fff3 	bl	2cfda <start_tx_locked.isra.0>
   1eff4:	f387 8811 	msr	BASEPRI, r7
   1eff8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1effc:	7af3      	ldrb	r3, [r6, #11]
   1effe:	2b01      	cmp	r3, #1
   1f000:	d118      	bne.n	1f034 <uarte_nrfx_tx+0x98>
	    && timeout != SYS_FOREVER_US) {
   1f002:	1c63      	adds	r3, r4, #1
   1f004:	d016      	beq.n	1f034 <uarte_nrfx_tx+0x98>
		} else {
			return (t * to_hz + off) / from_hz;
   1f006:	480e      	ldr	r0, [pc, #56]	; (1f040 <uarte_nrfx_tx+0xa4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1f008:	68f5      	ldr	r5, [r6, #12]
   1f00a:	4a0e      	ldr	r2, [pc, #56]	; (1f044 <uarte_nrfx_tx+0xa8>)
   1f00c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   1f010:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f014:	2100      	movs	r1, #0
   1f016:	2300      	movs	r3, #0
   1f018:	fbc6 0104 	smlal	r0, r1, r6, r4
   1f01c:	f7e1 f870 	bl	100 <__aeabi_uldivmod>
   1f020:	3528      	adds	r5, #40	; 0x28
   1f022:	4602      	mov	r2, r0
   1f024:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1f026:	2000      	movs	r0, #0
   1f028:	2100      	movs	r1, #0
   1f02a:	e9cd 0100 	strd	r0, r1, [sp]
   1f02e:	4628      	mov	r0, r5
   1f030:	f006 f96a 	bl	25308 <z_impl_k_timer_start>
	return 0;
   1f034:	2000      	movs	r0, #0
   1f036:	e7c9      	b.n	1efcc <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1f038:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
   1f03a:	f00d ff3d 	bl	2ceb8 <setup_tx_cache.isra.0>
   1f03e:	e7d4      	b.n	1efea <uarte_nrfx_tx+0x4e>
   1f040:	000f423f 	.word	0x000f423f
   1f044:	000f4240 	.word	0x000f4240

0001f048 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
   1f048:	6843      	ldr	r3, [r0, #4]
{
   1f04a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return config->uarte_regs;
   1f04e:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f050:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   1f054:	b089      	sub	sp, #36	; 0x24
   1f056:	4604      	mov	r4, r0
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   1f058:	b171      	cbz	r1, 1f078 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f05a:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f05c:	2200      	movs	r2, #0
   1f05e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1f062:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1f066:	68da      	ldr	r2, [r3, #12]
   1f068:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   1f06c:	3301      	adds	r3, #1
   1f06e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
   1f072:	b009      	add	sp, #36	; 0x24
   1f074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f078:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1f07c:	b313      	cbz	r3, 1f0c4 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f07e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1f082:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1f086:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1f08a:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
   1f08e:	2214      	movs	r2, #20
   1f090:	a803      	add	r0, sp, #12
   1f092:	f00b fd0d 	bl	2aab0 <memset>
   1f096:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1f098:	07f0      	lsls	r0, r6, #31
	struct uart_event evt = {
   1f09a:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1f09e:	f100 8104 	bmi.w	1f2aa <uarte_nrfx_isr_async+0x262>
   1f0a2:	07b1      	lsls	r1, r6, #30
   1f0a4:	f100 8103 	bmi.w	1f2ae <uarte_nrfx_isr_async+0x266>
   1f0a8:	0772      	lsls	r2, r6, #29
   1f0aa:	f100 8102 	bmi.w	1f2b2 <uarte_nrfx_isr_async+0x26a>
   1f0ae:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1f0b2:	4620      	mov	r0, r4
   1f0b4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1f0b6:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1f0ba:	f00d fdc4 	bl	2cc46 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1f0be:	4620      	mov	r0, r4
   1f0c0:	f00d ff26 	bl	2cf10 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f0c4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1f0c8:	b37b      	cbz	r3, 1f12a <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
   1f0ca:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1f0ce:	06db      	lsls	r3, r3, #27
   1f0d0:	d52b      	bpl.n	1f12a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f0d2:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f0d6:	6927      	ldr	r7, [r4, #16]
   1f0d8:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1f0dc:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1f0e0:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
   1f0e2:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
   1f0e4:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   1f0e6:	2301      	movs	r3, #1
   1f0e8:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
   1f0ec:	3088      	adds	r0, #136	; 0x88
   1f0ee:	f00e f9de 	bl	2d4ae <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1f0f2:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1f0f4:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
   1f0f8:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   1f0fc:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
   1f0fe:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   1f102:	1a1b      	subs	r3, r3, r0
   1f104:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1f106:	6f90      	ldr	r0, [r2, #120]	; 0x78
   1f108:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1f10c:	4408      	add	r0, r1
	if (rx_len > 0) {
   1f10e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1f110:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
   1f112:	dd02      	ble.n	1f11a <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
   1f114:	4620      	mov	r0, r4
   1f116:	f00d fd9d 	bl	2cc54 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1f11a:	68f9      	ldr	r1, [r7, #12]
   1f11c:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
   1f120:	2b00      	cmp	r3, #0
   1f122:	f040 80c8 	bne.w	1f2b6 <uarte_nrfx_isr_async+0x26e>
		data->async->is_in_irq = false;
   1f126:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f12a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1f12e:	b393      	cbz	r3, 1f196 <uarte_nrfx_isr_async+0x14e>
   1f130:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
   1f134:	bb79      	cbnz	r1, 1f196 <uarte_nrfx_isr_async+0x14e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f136:	f8c5 114c 	str.w	r1, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f13a:	6926      	ldr	r6, [r4, #16]
   1f13c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1f140:	2214      	movs	r2, #20
   1f142:	a803      	add	r0, sp, #12
   1f144:	f00b fcb4 	bl	2aab0 <memset>
   1f148:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1f14a:	a903      	add	r1, sp, #12
   1f14c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1f14e:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1f152:	f00d fd78 	bl	2cc46 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1f156:	68f6      	ldr	r6, [r6, #12]
   1f158:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
   1f15a:	1c5f      	adds	r7, r3, #1
   1f15c:	d01b      	beq.n	1f196 <uarte_nrfx_isr_async+0x14e>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1f15e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
   1f162:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
   1f166:	f8df 8234 	ldr.w	r8, [pc, #564]	; 1f39c <uarte_nrfx_isr_async+0x354>
   1f16a:	4a8b      	ldr	r2, [pc, #556]	; (1f398 <uarte_nrfx_isr_async+0x350>)
   1f16c:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1f170:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1f174:	f04f 0900 	mov.w	r9, #0
   1f178:	fbc0 8901 	smlal	r8, r9, r0, r1
   1f17c:	2300      	movs	r3, #0
   1f17e:	4640      	mov	r0, r8
   1f180:	4649      	mov	r1, r9
   1f182:	f7e0 ffbd 	bl	100 <__aeabi_uldivmod>
   1f186:	4602      	mov	r2, r0
   1f188:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1f18a:	e9cd 0100 	strd	r0, r1, [sp]
   1f18e:	f106 0088 	add.w	r0, r6, #136	; 0x88
   1f192:	f006 f8b9 	bl	25308 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f196:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1f19a:	b333      	cbz	r3, 1f1ea <uarte_nrfx_isr_async+0x1a2>
   1f19c:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1f1a0:	bb1e      	cbnz	r6, 1f1ea <uarte_nrfx_isr_async+0x1a2>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f1a2:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1a4:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   1f1a8:	68f9      	ldr	r1, [r7, #12]
   1f1aa:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1f1ae:	2201      	movs	r2, #1
   1f1b0:	3160      	adds	r1, #96	; 0x60
   1f1b2:	4620      	mov	r0, r4
   1f1b4:	f00d fd67 	bl	2cc86 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   1f1b8:	68f9      	ldr	r1, [r7, #12]
   1f1ba:	2201      	movs	r2, #1
   1f1bc:	316c      	adds	r1, #108	; 0x6c
   1f1be:	4620      	mov	r0, r4
   1f1c0:	f00d fd61 	bl	2cc86 <notify_rx_buf_release>
	if (data->async->rx_enabled) {
   1f1c4:	68fb      	ldr	r3, [r7, #12]
   1f1c6:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   1f1ca:	2a00      	cmp	r2, #0
   1f1cc:	f000 80a1 	beq.w	1f312 <uarte_nrfx_isr_async+0x2ca>
		data->async->rx_enabled = false;
   1f1d0:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f1d4:	6863      	ldr	r3, [r4, #4]
   1f1d6:	685b      	ldr	r3, [r3, #4]
   1f1d8:	06d8      	lsls	r0, r3, #27
   1f1da:	d503      	bpl.n	1f1e4 <uarte_nrfx_isr_async+0x19c>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1f1dc:	2102      	movs	r1, #2
   1f1de:	4620      	mov	r0, r4
   1f1e0:	f00d fe44 	bl	2ce6c <async_uart_release>
	notify_rx_disable(dev);
   1f1e4:	4620      	mov	r0, r4
   1f1e6:	f00d fd68 	bl	2ccba <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f1ea:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1f1ee:	b1db      	cbz	r3, 1f228 <uarte_nrfx_isr_async+0x1e0>
    return p_reg->INTENSET & mask;
   1f1f0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1f1f4:	05d9      	lsls	r1, r3, #23
   1f1f6:	d517      	bpl.n	1f228 <uarte_nrfx_isr_async+0x1e0>
	return config->uarte_regs;
   1f1f8:	6863      	ldr	r3, [r4, #4]
   1f1fa:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1f1fc:	f04f 0140 	mov.w	r1, #64	; 0x40
   1f200:	f3ef 8211 	mrs	r2, BASEPRI
   1f204:	f381 8812 	msr	BASEPRI_MAX, r1
   1f208:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f20c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1f210:	b131      	cbz	r1, 1f220 <uarte_nrfx_isr_async+0x1d8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f212:	2100      	movs	r1, #0
   1f214:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1f218:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f21c:	2101      	movs	r1, #1
   1f21e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1f220:	f382 8811 	msr	BASEPRI, r2
   1f224:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f228:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1f22c:	2b00      	cmp	r3, #0
   1f22e:	f43f af20 	beq.w	1f072 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1f232:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1f236:	025a      	lsls	r2, r3, #9
   1f238:	f57f af1b 	bpl.w	1f072 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1f23c:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1f23e:	6926      	ldr	r6, [r4, #16]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1f240:	e9d3 7300 	ldrd	r7, r3, [r3]
   1f244:	06db      	lsls	r3, r3, #27
   1f246:	d469      	bmi.n	1f31c <uarte_nrfx_isr_async+0x2d4>
	if (!data->async->tx_buf) {
   1f248:	68f3      	ldr	r3, [r6, #12]
   1f24a:	689b      	ldr	r3, [r3, #8]
   1f24c:	2b00      	cmp	r3, #0
   1f24e:	f43f af10 	beq.w	1f072 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1f252:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f256:	f3ef 8211 	mrs	r2, BASEPRI
   1f25a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f25e:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1f262:	68f3      	ldr	r3, [r6, #12]
   1f264:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1f268:	2900      	cmp	r1, #0
   1f26a:	bfac      	ite	ge
   1f26c:	f8d3 50c4 	ldrge.w	r5, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
   1f270:	f8d7 554c 	ldrlt.w	r5, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1f274:	f382 8811 	msr	BASEPRI, r2
   1f278:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1f27c:	68f0      	ldr	r0, [r6, #12]
   1f27e:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
   1f282:	2b00      	cmp	r3, #0
   1f284:	d057      	beq.n	1f336 <uarte_nrfx_isr_async+0x2ee>
	__asm__ volatile(
   1f286:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f28a:	f3ef 8511 	mrs	r5, BASEPRI
   1f28e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f292:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1f296:	f106 010c 	add.w	r1, r6, #12
   1f29a:	4620      	mov	r0, r4
   1f29c:	f00d fe9d 	bl	2cfda <start_tx_locked.isra.0>
	__asm__ volatile(
   1f2a0:	f385 8811 	msr	BASEPRI, r5
   1f2a4:	f3bf 8f6f 	isb	sy
				return;
   1f2a8:	e6e3      	b.n	1f072 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1f2aa:	2601      	movs	r6, #1
   1f2ac:	e701      	b.n	1f0b2 <uarte_nrfx_isr_async+0x6a>
   1f2ae:	2602      	movs	r6, #2
   1f2b0:	e6ff      	b.n	1f0b2 <uarte_nrfx_isr_async+0x6a>
   1f2b2:	2604      	movs	r6, #4
   1f2b4:	e6fd      	b.n	1f0b2 <uarte_nrfx_isr_async+0x6a>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   1f2b6:	2200      	movs	r2, #0
   1f2b8:	3160      	adds	r1, #96	; 0x60
   1f2ba:	4620      	mov	r0, r4
   1f2bc:	f00d fce3 	bl	2cc86 <notify_rx_buf_release>
	__asm__ volatile(
   1f2c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f2c4:	f3ef 8111 	mrs	r1, BASEPRI
   1f2c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f2cc:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1f2d0:	68fb      	ldr	r3, [r7, #12]
   1f2d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1f2d4:	b1d2      	cbz	r2, 1f30c <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_buf = data->async->rx_next_buf;
   1f2d6:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1f2d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1f2da:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
   1f2dc:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
   1f2de:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
   1f2e2:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f2e4:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1f2e8:	b90b      	cbnz	r3, 1f2ee <uarte_nrfx_isr_async+0x2a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f2ea:	2301      	movs	r3, #1
   1f2ec:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   1f2ee:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   1f2f2:	f023 0320 	bic.w	r3, r3, #32
   1f2f6:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   1f2fa:	f381 8811 	msr	BASEPRI, r1
   1f2fe:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1f302:	68fb      	ldr	r3, [r7, #12]
   1f304:	2200      	movs	r2, #0
   1f306:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
   1f30a:	e70e      	b.n	1f12a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f30c:	2301      	movs	r3, #1
   1f30e:	6073      	str	r3, [r6, #4]
}
   1f310:	e7f3      	b.n	1f2fa <uarte_nrfx_isr_async+0x2b2>
		(void)rx_flush(dev, NULL, 0);
   1f312:	4611      	mov	r1, r2
   1f314:	4620      	mov	r0, r4
   1f316:	f00d fd74 	bl	2ce02 <rx_flush>
   1f31a:	e75b      	b.n	1f1d4 <uarte_nrfx_isr_async+0x18c>
    p_reg->INTENCLR = mask;
   1f31c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1f320:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1f324:	2101      	movs	r1, #1
   1f326:	4620      	mov	r0, r4
   1f328:	f00d fda0 	bl	2ce6c <async_uart_release>
		if (!data->async->tx_size) {
   1f32c:	68f3      	ldr	r3, [r6, #12]
   1f32e:	68db      	ldr	r3, [r3, #12]
   1f330:	2b00      	cmp	r3, #0
   1f332:	d189      	bne.n	1f248 <uarte_nrfx_isr_async+0x200>
   1f334:	e69d      	b.n	1f072 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1f336:	6882      	ldr	r2, [r0, #8]
   1f338:	6903      	ldr	r3, [r0, #16]
   1f33a:	429a      	cmp	r2, r3
   1f33c:	d00b      	beq.n	1f356 <uarte_nrfx_isr_async+0x30e>
		if (amount == data->async->xfer_len) {
   1f33e:	6942      	ldr	r2, [r0, #20]
   1f340:	6a03      	ldr	r3, [r0, #32]
   1f342:	42aa      	cmp	r2, r5
   1f344:	442b      	add	r3, r5
   1f346:	d125      	bne.n	1f394 <uarte_nrfx_isr_async+0x34c>
			data->async->tx_cache_offset += amount;
   1f348:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
   1f34a:	f00d fdb5 	bl	2ceb8 <setup_tx_cache.isra.0>
   1f34e:	2800      	cmp	r0, #0
   1f350:	d199      	bne.n	1f286 <uarte_nrfx_isr_async+0x23e>
			amount = data->async->tx_cache_offset;
   1f352:	68f3      	ldr	r3, [r6, #12]
   1f354:	6a1d      	ldr	r5, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
   1f356:	68f0      	ldr	r0, [r6, #12]
   1f358:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
   1f35a:	f00e f8a8 	bl	2d4ae <z_impl_k_timer_stop>
	struct uart_event evt = {
   1f35e:	2214      	movs	r2, #20
   1f360:	2100      	movs	r1, #0
   1f362:	a803      	add	r0, sp, #12
   1f364:	f00b fba4 	bl	2aab0 <memset>
		.data.tx.buf = data->async->tx_buf,
   1f368:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   1f36a:	689a      	ldr	r2, [r3, #8]
   1f36c:	e9cd 2504 	strd	r2, r5, [sp, #16]
	if (amount == data->async->tx_size) {
   1f370:	68da      	ldr	r2, [r3, #12]
   1f372:	1aad      	subs	r5, r5, r2
   1f374:	bf18      	it	ne
   1f376:	2501      	movne	r5, #1
   1f378:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1f37c:	f88d 500c 	strb.w	r5, [sp, #12]
   1f380:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1f384:	2200      	movs	r2, #0
   1f386:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   1f388:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   1f38a:	a903      	add	r1, sp, #12
   1f38c:	4620      	mov	r0, r4
   1f38e:	f00d fc5a 	bl	2cc46 <user_callback>
   1f392:	e66e      	b.n	1f072 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1f394:	461d      	mov	r5, r3
   1f396:	e7de      	b.n	1f356 <uarte_nrfx_isr_async+0x30e>
   1f398:	000f4240 	.word	0x000f4240
   1f39c:	000f423f 	.word	0x000f423f

0001f3a0 <random_byte_get>:
	__asm__ volatile(
   1f3a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f3a4:	f3ef 8211 	mrs	r2, BASEPRI
   1f3a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3ac:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f3b0:	4b08      	ldr	r3, [pc, #32]	; (1f3d4 <random_byte_get+0x34>)
   1f3b2:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1f3b4:	b159      	cbz	r1, 1f3ce <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1f3b6:	4908      	ldr	r1, [pc, #32]	; (1f3d8 <random_byte_get+0x38>)
   1f3b8:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f3bc:	2100      	movs	r1, #0
   1f3be:	6019      	str	r1, [r3, #0]
   1f3c0:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1f3c2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1f3c4:	f382 8811 	msr	BASEPRI, r2
   1f3c8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1f3cc:	4770      	bx	lr
	int retval = -EAGAIN;
   1f3ce:	f06f 000a 	mvn.w	r0, #10
   1f3d2:	e7f7      	b.n	1f3c4 <random_byte_get+0x24>
   1f3d4:	4000d100 	.word	0x4000d100
   1f3d8:	4000d000 	.word	0x4000d000

0001f3dc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1f3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3de:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1f3e0:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1f3e2:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1f3e4:	f04f 0540 	mov.w	r5, #64	; 0x40
   1f3e8:	f3ef 8011 	mrs	r0, BASEPRI
   1f3ec:	f385 8812 	msr	BASEPRI_MAX, r5
   1f3f0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1f3f4:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1f3f6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1f3fa:	1ba4      	subs	r4, r4, r6
   1f3fc:	403c      	ands	r4, r7
	if (available < len) {
   1f3fe:	42a2      	cmp	r2, r4
		len = available;
   1f400:	bf88      	it	hi
   1f402:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1f404:	eb06 0c02 	add.w	ip, r6, r2
   1f408:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1f40c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1f40e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1f412:	f380 8811 	msr	BASEPRI, r0
   1f416:	f3bf 8f6f 	isb	sy
   1f41a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1f41c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1f41e:	4282      	cmp	r2, r0
   1f420:	d119      	bne.n	1f456 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1f422:	4576      	cmp	r6, lr
   1f424:	d10d      	bne.n	1f442 <rng_pool_get+0x66>
	__asm__ volatile(
   1f426:	f04f 0540 	mov.w	r5, #64	; 0x40
   1f42a:	f3ef 8211 	mrs	r2, BASEPRI
   1f42e:	f385 8812 	msr	BASEPRI_MAX, r5
   1f432:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1f436:	781d      	ldrb	r5, [r3, #0]
   1f438:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1f43a:	f382 8811 	msr	BASEPRI, r2
   1f43e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1f442:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1f444:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1f446:	b288      	uxth	r0, r1
	available = available - len;
   1f448:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1f44a:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f44c:	bf22      	ittt	cs
   1f44e:	4b06      	ldrcs	r3, [pc, #24]	; (1f468 <rng_pool_get+0x8c>)
   1f450:	2201      	movcs	r2, #1
   1f452:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1f454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1f456:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1f45a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1f45c:	f89c c005 	ldrb.w	ip, [ip, #5]
   1f460:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1f464:	403d      	ands	r5, r7
   1f466:	e7da      	b.n	1f41e <rng_pool_get+0x42>
   1f468:	4000d000 	.word	0x4000d000

0001f46c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1f46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f470:	4614      	mov	r4, r2
   1f472:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f474:	6902      	ldr	r2, [r0, #16]
   1f476:	4b2c      	ldr	r3, [pc, #176]	; (1f528 <entropy_nrf5_get_entropy_isr+0xbc>)
   1f478:	429a      	cmp	r2, r3
{
   1f47a:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f47c:	d00b      	beq.n	1f496 <entropy_nrf5_get_entropy_isr+0x2a>
   1f47e:	492b      	ldr	r1, [pc, #172]	; (1f52c <entropy_nrf5_get_entropy_isr+0xc0>)
   1f480:	482b      	ldr	r0, [pc, #172]	; (1f530 <entropy_nrf5_get_entropy_isr+0xc4>)
   1f482:	4a2c      	ldr	r2, [pc, #176]	; (1f534 <entropy_nrf5_get_entropy_isr+0xc8>)
   1f484:	f44f 7384 	mov.w	r3, #264	; 0x108
   1f488:	f009 f972 	bl	28770 <printk>
   1f48c:	4829      	ldr	r0, [pc, #164]	; (1f534 <entropy_nrf5_get_entropy_isr+0xc8>)
   1f48e:	f44f 7184 	mov.w	r1, #264	; 0x108
   1f492:	f009 fb5e 	bl	28b52 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1f496:	43eb      	mvns	r3, r5
   1f498:	f013 0501 	ands.w	r5, r3, #1
   1f49c:	d006      	beq.n	1f4ac <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1f49e:	4826      	ldr	r0, [pc, #152]	; (1f538 <entropy_nrf5_get_entropy_isr+0xcc>)
   1f4a0:	4622      	mov	r2, r4
   1f4a2:	4631      	mov	r1, r6
   1f4a4:	f7ff ff9a 	bl	1f3dc <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1f4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1f4ac:	2c00      	cmp	r4, #0
   1f4ae:	d033      	beq.n	1f518 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   1f4b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f4b4:	f3ef 8811 	mrs	r8, BASEPRI
   1f4b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4bc:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1f4c0:	200d      	movs	r0, #13
   1f4c2:	f7f5 f803 	bl	144cc <arch_irq_is_enabled>
   1f4c6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1f4c8:	200d      	movs	r0, #13
   1f4ca:	f7f4 ffeb 	bl	144a4 <arch_irq_disable>
	__asm__ volatile(
   1f4ce:	f388 8811 	msr	BASEPRI, r8
   1f4d2:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f4d6:	4a19      	ldr	r2, [pc, #100]	; (1f53c <entropy_nrf5_get_entropy_isr+0xd0>)
   1f4d8:	6015      	str	r5, [r2, #0]
   1f4da:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f4dc:	4b18      	ldr	r3, [pc, #96]	; (1f540 <entropy_nrf5_get_entropy_isr+0xd4>)
   1f4de:	2101      	movs	r1, #1
   1f4e0:	6019      	str	r1, [r3, #0]
   1f4e2:	4918      	ldr	r1, [pc, #96]	; (1f544 <entropy_nrf5_get_entropy_isr+0xd8>)
   1f4e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1f4e8:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1f4ec:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1f4ee:	4691      	mov	r9, r2
   1f4f0:	468a      	mov	sl, r1
   1f4f2:	4698      	mov	r8, r3
   1f4f4:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1f4f8:	b183      	cbz	r3, 1f51c <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   1f4fa:	f7ff ff51 	bl	1f3a0 <random_byte_get>
			if (byte < 0) {
   1f4fe:	1e03      	subs	r3, r0, #0
   1f500:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1f504:	dbf6      	blt.n	1f4f4 <entropy_nrf5_get_entropy_isr+0x88>
   1f506:	3d01      	subs	r5, #1
   1f508:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1f50a:	5573      	strb	r3, [r6, r5]
		} while (len);
   1f50c:	2d00      	cmp	r5, #0
   1f50e:	d1f1      	bne.n	1f4f4 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   1f510:	b117      	cbz	r7, 1f518 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   1f512:	200d      	movs	r0, #13
   1f514:	f7f4 ffb6 	bl	14484 <arch_irq_enable>
	return cnt;
   1f518:	4620      	mov	r0, r4
   1f51a:	e7c5      	b.n	1f4a8 <entropy_nrf5_get_entropy_isr+0x3c>
   1f51c:	f3bf 8f4f 	dsb	sy
				__WFE();
   1f520:	bf20      	wfe
				__SEV();
   1f522:	bf40      	sev
				__WFE();
   1f524:	bf20      	wfe
   1f526:	e7e5      	b.n	1f4f4 <entropy_nrf5_get_entropy_isr+0x88>
   1f528:	20002b80 	.word	0x20002b80
   1f52c:	00031b28 	.word	0x00031b28
   1f530:	0002e915 	.word	0x0002e915
   1f534:	00031af6 	.word	0x00031af6
   1f538:	20002bb0 	.word	0x20002bb0
   1f53c:	4000d100 	.word	0x4000d100
   1f540:	4000d000 	.word	0x4000d000
   1f544:	e000e100 	.word	0xe000e100

0001f548 <entropy_nrf5_get_entropy>:
{
   1f548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f54c:	4b1a      	ldr	r3, [pc, #104]	; (1f5b8 <entropy_nrf5_get_entropy+0x70>)
{
   1f54e:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f550:	6902      	ldr	r2, [r0, #16]
   1f552:	429a      	cmp	r2, r3
{
   1f554:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f556:	d009      	beq.n	1f56c <entropy_nrf5_get_entropy+0x24>
   1f558:	4918      	ldr	r1, [pc, #96]	; (1f5bc <entropy_nrf5_get_entropy+0x74>)
   1f55a:	4819      	ldr	r0, [pc, #100]	; (1f5c0 <entropy_nrf5_get_entropy+0x78>)
   1f55c:	4a19      	ldr	r2, [pc, #100]	; (1f5c4 <entropy_nrf5_get_entropy+0x7c>)
   1f55e:	23ea      	movs	r3, #234	; 0xea
   1f560:	f009 f906 	bl	28770 <printk>
   1f564:	4817      	ldr	r0, [pc, #92]	; (1f5c4 <entropy_nrf5_get_entropy+0x7c>)
   1f566:	21ea      	movs	r1, #234	; 0xea
   1f568:	f009 faf3 	bl	28b52 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1f56c:	4e12      	ldr	r6, [pc, #72]	; (1f5b8 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f56e:	f106 0745 	add.w	r7, r6, #69	; 0x45
   1f572:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   1f576:	b914      	cbnz	r4, 1f57e <entropy_nrf5_get_entropy+0x36>
}
   1f578:	4620      	mov	r0, r4
   1f57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f57e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f586:	4630      	mov	r0, r6
   1f588:	f003 faaa 	bl	22ae0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1f58c:	4622      	mov	r2, r4
   1f58e:	4649      	mov	r1, r9
   1f590:	4638      	mov	r0, r7
   1f592:	f7ff ff23 	bl	1f3dc <rng_pool_get>
   1f596:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1f598:	4630      	mov	r0, r6
   1f59a:	f003 fa5d 	bl	22a58 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1f59e:	b93d      	cbnz	r5, 1f5b0 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   1f5a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f5a8:	4640      	mov	r0, r8
   1f5aa:	f003 fa99 	bl	22ae0 <z_impl_k_sem_take>
			continue;
   1f5ae:	e7e2      	b.n	1f576 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   1f5b0:	1b64      	subs	r4, r4, r5
   1f5b2:	b2a4      	uxth	r4, r4
		buf += bytes;
   1f5b4:	44a9      	add	r9, r5
   1f5b6:	e7de      	b.n	1f576 <entropy_nrf5_get_entropy+0x2e>
   1f5b8:	20002b80 	.word	0x20002b80
   1f5bc:	00031b28 	.word	0x00031b28
   1f5c0:	0002e915 	.word	0x0002e915
   1f5c4:	00031af6 	.word	0x00031af6

0001f5c8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1f5c8:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1f5ca:	4c20      	ldr	r4, [pc, #128]	; (1f64c <entropy_nrf5_init+0x84>)
   1f5cc:	6903      	ldr	r3, [r0, #16]
   1f5ce:	42a3      	cmp	r3, r4
   1f5d0:	d00b      	beq.n	1f5ea <entropy_nrf5_init+0x22>
   1f5d2:	491f      	ldr	r1, [pc, #124]	; (1f650 <entropy_nrf5_init+0x88>)
   1f5d4:	481f      	ldr	r0, [pc, #124]	; (1f654 <entropy_nrf5_init+0x8c>)
   1f5d6:	4a20      	ldr	r2, [pc, #128]	; (1f658 <entropy_nrf5_init+0x90>)
   1f5d8:	f240 1357 	movw	r3, #343	; 0x157
   1f5dc:	f009 f8c8 	bl	28770 <printk>
   1f5e0:	481d      	ldr	r0, [pc, #116]	; (1f658 <entropy_nrf5_init+0x90>)
   1f5e2:	f240 1157 	movw	r1, #343	; 0x157
   1f5e6:	f009 fab4 	bl	28b52 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f5ea:	2201      	movs	r2, #1
   1f5ec:	4611      	mov	r1, r2
   1f5ee:	4817      	ldr	r0, [pc, #92]	; (1f64c <entropy_nrf5_init+0x84>)
   1f5f0:	f00d fe8f 	bl	2d312 <z_impl_k_sem_init>
   1f5f4:	2201      	movs	r2, #1
   1f5f6:	2100      	movs	r1, #0
   1f5f8:	4818      	ldr	r0, [pc, #96]	; (1f65c <entropy_nrf5_init+0x94>)
   1f5fa:	f00d fe8a 	bl	2d312 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1f5fe:	f240 4307 	movw	r3, #1031	; 0x407
   1f602:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1f606:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1f60a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1f60c:	230c      	movs	r3, #12
   1f60e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1f612:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1f614:	4b12      	ldr	r3, [pc, #72]	; (1f660 <entropy_nrf5_init+0x98>)
   1f616:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1f61a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1f61e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1f622:	f022 0201 	bic.w	r2, r2, #1
   1f626:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f62a:	4a0e      	ldr	r2, [pc, #56]	; (1f664 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   1f62c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1f62e:	6015      	str	r5, [r2, #0]
   1f630:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1f632:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1f636:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1f638:	6019      	str	r1, [r3, #0]
   1f63a:	200d      	movs	r0, #13
   1f63c:	f7f4 ff54 	bl	144e8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1f640:	200d      	movs	r0, #13
   1f642:	f7f4 ff1f 	bl	14484 <arch_irq_enable>

	return 0;
}
   1f646:	4628      	mov	r0, r5
   1f648:	bd38      	pop	{r3, r4, r5, pc}
   1f64a:	bf00      	nop
   1f64c:	20002b80 	.word	0x20002b80
   1f650:	00031b28 	.word	0x00031b28
   1f654:	0002e915 	.word	0x0002e915
   1f658:	00031af6 	.word	0x00031af6
   1f65c:	20002b98 	.word	0x20002b98
   1f660:	4000d000 	.word	0x4000d000
   1f664:	4000d100 	.word	0x4000d100

0001f668 <isr>:
{
   1f668:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1f66a:	f7ff fe99 	bl	1f3a0 <random_byte_get>
	if (byte < 0) {
   1f66e:	2800      	cmp	r0, #0
   1f670:	db20      	blt.n	1f6b4 <isr+0x4c>
	uint8_t last  = rngp->last;
   1f672:	4b17      	ldr	r3, [pc, #92]	; (1f6d0 <isr+0x68>)
   1f674:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1f678:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1f67c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1f680:	1a51      	subs	r1, r2, r1
   1f682:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1f686:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1f688:	d10d      	bne.n	1f6a6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1f68a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1f68e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1f692:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1f696:	1a51      	subs	r1, r2, r1
   1f698:	ea34 0101 	bics.w	r1, r4, r1
   1f69c:	d10b      	bne.n	1f6b6 <isr+0x4e>
   1f69e:	4b0d      	ldr	r3, [pc, #52]	; (1f6d4 <isr+0x6c>)
   1f6a0:	2201      	movs	r2, #1
   1f6a2:	601a      	str	r2, [r3, #0]
}
   1f6a4:	e00e      	b.n	1f6c4 <isr+0x5c>
	rngp->buffer[last] = byte;
   1f6a6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f6a8:	3201      	adds	r2, #1
   1f6aa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f6ac:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1f6b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1f6b4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1f6b6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1f6b8:	3201      	adds	r2, #1
   1f6ba:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1f6bc:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1f6c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1f6c4:	4804      	ldr	r0, [pc, #16]	; (1f6d8 <isr+0x70>)
}
   1f6c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f6ca:	f003 b9c5 	b.w	22a58 <z_impl_k_sem_give>
   1f6ce:	bf00      	nop
   1f6d0:	20002b80 	.word	0x20002b80
   1f6d4:	4000d004 	.word	0x4000d004
   1f6d8:	20002b98 	.word	0x20002b98

0001f6dc <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1f6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f6de:	460f      	mov	r7, r1
   1f6e0:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   1f6e2:	b948      	cbnz	r0, 1f6f8 <entropy_cc3xx_rng_get_entropy+0x1c>
   1f6e4:	4919      	ldr	r1, [pc, #100]	; (1f74c <entropy_cc3xx_rng_get_entropy+0x70>)
   1f6e6:	481a      	ldr	r0, [pc, #104]	; (1f750 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f6e8:	4a1a      	ldr	r2, [pc, #104]	; (1f754 <entropy_cc3xx_rng_get_entropy+0x78>)
   1f6ea:	2324      	movs	r3, #36	; 0x24
   1f6ec:	f009 f840 	bl	28770 <printk>
   1f6f0:	4818      	ldr	r0, [pc, #96]	; (1f754 <entropy_cc3xx_rng_get_entropy+0x78>)
   1f6f2:	2124      	movs	r1, #36	; 0x24
   1f6f4:	f009 fa2d 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1f6f8:	b94f      	cbnz	r7, 1f70e <entropy_cc3xx_rng_get_entropy+0x32>
   1f6fa:	4917      	ldr	r1, [pc, #92]	; (1f758 <entropy_cc3xx_rng_get_entropy+0x7c>)
   1f6fc:	4814      	ldr	r0, [pc, #80]	; (1f750 <entropy_cc3xx_rng_get_entropy+0x74>)
   1f6fe:	4a15      	ldr	r2, [pc, #84]	; (1f754 <entropy_cc3xx_rng_get_entropy+0x78>)
   1f700:	2325      	movs	r3, #37	; 0x25
   1f702:	f009 f835 	bl	28770 <printk>
   1f706:	4813      	ldr	r0, [pc, #76]	; (1f754 <entropy_cc3xx_rng_get_entropy+0x78>)
   1f708:	2125      	movs	r1, #37	; 0x25
   1f70a:	f009 fa22 	bl	28b52 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1f70e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   1f712:	2400      	movs	r4, #0
   1f714:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   1f718:	42a6      	cmp	r6, r4
   1f71a:	d801      	bhi.n	1f720 <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   1f71c:	b003      	add	sp, #12
   1f71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1f720:	1b33      	subs	r3, r6, r4
   1f722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1f726:	bf38      	it	cc
   1f728:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   1f72a:	462a      	mov	r2, r5
   1f72c:	ab01      	add	r3, sp, #4
   1f72e:	1939      	adds	r1, r7, r4
   1f730:	2000      	movs	r0, #0
   1f732:	f006 fb8b 	bl	25e4c <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   1f736:	9b01      	ldr	r3, [sp, #4]
   1f738:	42ab      	cmp	r3, r5
   1f73a:	d103      	bne.n	1f744 <entropy_cc3xx_rng_get_entropy+0x68>
		if (res != 0) {
   1f73c:	2800      	cmp	r0, #0
   1f73e:	d1ed      	bne.n	1f71c <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   1f740:	442c      	add	r4, r5
   1f742:	e7e9      	b.n	1f718 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   1f744:	f06f 0015 	mvn.w	r0, #21
   1f748:	e7e8      	b.n	1f71c <entropy_cc3xx_rng_get_entropy+0x40>
   1f74a:	bf00      	nop
   1f74c:	00031ba0 	.word	0x00031ba0
   1f750:	0002e915 	.word	0x0002e915
   1f754:	00031b70 	.word	0x00031b70
   1f758:	00031bb3 	.word	0x00031bb3

0001f75c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f75c:	4919      	ldr	r1, [pc, #100]	; (1f7c4 <sys_clock_timeout_handler+0x68>)
{
   1f75e:	b570      	push	{r4, r5, r6, lr}
   1f760:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1f762:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f766:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1f768:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1f76c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1f770:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1f772:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1f776:	f04f 0500 	mov.w	r5, #0
   1f77a:	d20a      	bcs.n	1f792 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1f77c:	4b12      	ldr	r3, [pc, #72]	; (1f7c8 <sys_clock_timeout_handler+0x6c>)
   1f77e:	6819      	ldr	r1, [r3, #0]
   1f780:	060a      	lsls	r2, r1, #24
   1f782:	0a0b      	lsrs	r3, r1, #8
   1f784:	1992      	adds	r2, r2, r6
   1f786:	4911      	ldr	r1, [pc, #68]	; (1f7cc <sys_clock_timeout_handler+0x70>)
   1f788:	f143 0300 	adc.w	r3, r3, #0
   1f78c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1f790:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1f792:	f005 fbe9 	bl	24f68 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1f796:	00a3      	lsls	r3, r4, #2
   1f798:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f79c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1f7a0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1f7a4:	42b2      	cmp	r2, r6
   1f7a6:	d10b      	bne.n	1f7c0 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1f7a8:	b91d      	cbnz	r5, 1f7b2 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1f7aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1f7ae:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1f7b2:	4b07      	ldr	r3, [pc, #28]	; (1f7d0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f7b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1f7b8:	fa00 f404 	lsl.w	r4, r0, r4
   1f7bc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1f7c0:	bd70      	pop	{r4, r5, r6, pc}
   1f7c2:	bf00      	nop
   1f7c4:	20002070 	.word	0x20002070
   1f7c8:	20002bdc 	.word	0x20002bdc
   1f7cc:	20002058 	.word	0x20002058
   1f7d0:	40011000 	.word	0x40011000

0001f7d4 <compare_int_lock>:
{
   1f7d4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1f7d6:	2301      	movs	r3, #1
   1f7d8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f7da:	4a11      	ldr	r2, [pc, #68]	; (1f820 <compare_int_lock+0x4c>)
   1f7dc:	f3bf 8f5b 	dmb	ish
   1f7e0:	43dc      	mvns	r4, r3
   1f7e2:	e852 1f00 	ldrex	r1, [r2]
   1f7e6:	ea01 0c04 	and.w	ip, r1, r4
   1f7ea:	e842 ce00 	strex	lr, ip, [r2]
   1f7ee:	f1be 0f00 	cmp.w	lr, #0
   1f7f2:	d1f6      	bne.n	1f7e2 <compare_int_lock+0xe>
   1f7f4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f7f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f7fc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1f800:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1f808:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1f80c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f810:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1f814:	420b      	tst	r3, r1
}
   1f816:	bf14      	ite	ne
   1f818:	2001      	movne	r0, #1
   1f81a:	2000      	moveq	r0, #0
   1f81c:	bd10      	pop	{r4, pc}
   1f81e:	bf00      	nop
   1f820:	20002bd8 	.word	0x20002bd8

0001f824 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   1f824:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f826:	4a12      	ldr	r2, [pc, #72]	; (1f870 <compare_int_unlock.part.0+0x4c>)
   1f828:	f3bf 8f5b 	dmb	ish
   1f82c:	4083      	lsls	r3, r0
   1f82e:	e852 1f00 	ldrex	r1, [r2]
   1f832:	4319      	orrs	r1, r3
   1f834:	e842 1c00 	strex	ip, r1, [r2]
   1f838:	f1bc 0f00 	cmp.w	ip, #0
   1f83c:	d1f7      	bne.n	1f82e <compare_int_unlock.part.0+0xa>
   1f83e:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1f842:	4a0c      	ldr	r2, [pc, #48]	; (1f874 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1f848:	4083      	lsls	r3, r0
   1f84a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f84e:	4b0a      	ldr	r3, [pc, #40]	; (1f878 <compare_int_unlock.part.0+0x54>)
   1f850:	f3bf 8f5b 	dmb	ish
   1f854:	681b      	ldr	r3, [r3, #0]
   1f856:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1f85a:	fa23 f000 	lsr.w	r0, r3, r0
   1f85e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f860:	bf42      	ittt	mi
   1f862:	4b06      	ldrmi	r3, [pc, #24]	; (1f87c <compare_int_unlock.part.0+0x58>)
   1f864:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1f868:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1f86c:	4770      	bx	lr
   1f86e:	bf00      	nop
   1f870:	20002bd8 	.word	0x20002bd8
   1f874:	40011000 	.word	0x40011000
   1f878:	20002bd4 	.word	0x20002bd4
   1f87c:	e000e100 	.word	0xe000e100

0001f880 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1f880:	4b0d      	ldr	r3, [pc, #52]	; (1f8b8 <z_nrf_rtc_timer_read+0x38>)
   1f882:	681b      	ldr	r3, [r3, #0]
   1f884:	0a19      	lsrs	r1, r3, #8
   1f886:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1f888:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1f88c:	4b0b      	ldr	r3, [pc, #44]	; (1f8bc <z_nrf_rtc_timer_read+0x3c>)
   1f88e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1f892:	18c0      	adds	r0, r0, r3
   1f894:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1f898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1f89c:	d20a      	bcs.n	1f8b4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1f89e:	4b08      	ldr	r3, [pc, #32]	; (1f8c0 <z_nrf_rtc_timer_read+0x40>)
   1f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f8a4:	4299      	cmp	r1, r3
   1f8a6:	bf08      	it	eq
   1f8a8:	4290      	cmpeq	r0, r2
   1f8aa:	d203      	bcs.n	1f8b4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1f8ac:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1f8b0:	f141 0100 	adc.w	r1, r1, #0
}
   1f8b4:	4770      	bx	lr
   1f8b6:	bf00      	nop
   1f8b8:	20002bdc 	.word	0x20002bdc
   1f8bc:	40011000 	.word	0x40011000
   1f8c0:	20002058 	.word	0x20002058

0001f8c4 <compare_set>:
{
   1f8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8c8:	b085      	sub	sp, #20
   1f8ca:	4616      	mov	r6, r2
   1f8cc:	461f      	mov	r7, r3
   1f8ce:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1f8d0:	f7ff ff80 	bl	1f7d4 <compare_int_lock>
   1f8d4:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1f8d6:	f7ff ffd3 	bl	1f880 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1f8da:	42b9      	cmp	r1, r7
   1f8dc:	bf08      	it	eq
   1f8de:	42b0      	cmpeq	r0, r6
   1f8e0:	d27f      	bcs.n	1f9e2 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1f8e2:	ebb6 0800 	subs.w	r8, r6, r0
   1f8e6:	eb67 0901 	sbc.w	r9, r7, r1
   1f8ea:	2300      	movs	r3, #0
   1f8ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1f8f0:	454b      	cmp	r3, r9
   1f8f2:	bf08      	it	eq
   1f8f4:	4542      	cmpeq	r2, r8
   1f8f6:	f0c0 8085 	bcc.w	1fa04 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   1f8fa:	4b44      	ldr	r3, [pc, #272]	; (1fa0c <compare_set+0x148>)
   1f8fc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1f900:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1f904:	429f      	cmp	r7, r3
   1f906:	bf08      	it	eq
   1f908:	4296      	cmpeq	r6, r2
   1f90a:	d054      	beq.n	1f9b6 <compare_set+0xf2>
   1f90c:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f910:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   1f914:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f918:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f91c:	fa0b f205 	lsl.w	r2, fp, r5
   1f920:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f924:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f928:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1f92c:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   1f92e:	4a38      	ldr	r2, [pc, #224]	; (1fa10 <compare_set+0x14c>)
    return p_reg->CC[ch];
   1f930:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   1f934:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f938:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1f93c:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1f940:	461c      	mov	r4, r3
   1f942:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   1f944:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1f948:	eba0 000a 	sub.w	r0, r0, sl
   1f94c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f950:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1f954:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1f956:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1f95a:	d105      	bne.n	1f968 <compare_set+0xa4>
   1f95c:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1f95e:	2013      	movs	r0, #19
   1f960:	f00d fd6c 	bl	2d43c <z_impl_k_busy_wait>
   1f964:	4a2a      	ldr	r2, [pc, #168]	; (1fa10 <compare_set+0x14c>)
   1f966:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   1f968:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1f96a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1f96e:	eba4 000c 	sub.w	r0, r4, ip
   1f972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1f976:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f97a:	bf88      	it	hi
   1f97c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f97e:	2000      	movs	r0, #0
   1f980:	f8c8 0000 	str.w	r0, [r8]
   1f984:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1f988:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1f98c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1f990:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1f994:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1f998:	4582      	cmp	sl, r0
   1f99a:	d006      	beq.n	1f9aa <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   1f99c:	1a20      	subs	r0, r4, r0
   1f99e:	3802      	subs	r0, #2
   1f9a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1f9a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f9a8:	d819      	bhi.n	1f9de <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   1f9aa:	1ae4      	subs	r4, r4, r3
   1f9ac:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1f9b0:	1932      	adds	r2, r6, r4
   1f9b2:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   1f9b6:	4c15      	ldr	r4, [pc, #84]	; (1fa0c <compare_set+0x148>)
   1f9b8:	0129      	lsls	r1, r5, #4
   1f9ba:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   1f9be:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1f9c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   1f9c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   1f9c6:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   1f9c8:	6043      	str	r3, [r0, #4]
	return ret;
   1f9ca:	2400      	movs	r4, #0
	if (key) {
   1f9cc:	9b01      	ldr	r3, [sp, #4]
   1f9ce:	b113      	cbz	r3, 1f9d6 <compare_set+0x112>
   1f9d0:	4628      	mov	r0, r5
   1f9d2:	f7ff ff27 	bl	1f824 <compare_int_unlock.part.0>
}
   1f9d6:	4620      	mov	r0, r4
   1f9d8:	b005      	add	sp, #20
   1f9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9de:	4620      	mov	r0, r4
   1f9e0:	e7b0      	b.n	1f944 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1f9e2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f9e4:	4a0b      	ldr	r2, [pc, #44]	; (1fa14 <compare_set+0x150>)
   1f9e6:	f3bf 8f5b 	dmb	ish
   1f9ea:	40ab      	lsls	r3, r5
   1f9ec:	e852 1f00 	ldrex	r1, [r2]
   1f9f0:	4319      	orrs	r1, r3
   1f9f2:	e842 1000 	strex	r0, r1, [r2]
   1f9f6:	2800      	cmp	r0, #0
   1f9f8:	d1f8      	bne.n	1f9ec <compare_set+0x128>
   1f9fa:	f3bf 8f5b 	dmb	ish
   1f9fe:	4632      	mov	r2, r6
   1fa00:	463b      	mov	r3, r7
   1fa02:	e7d8      	b.n	1f9b6 <compare_set+0xf2>
			return -EINVAL;
   1fa04:	f06f 0415 	mvn.w	r4, #21
   1fa08:	e7e0      	b.n	1f9cc <compare_set+0x108>
   1fa0a:	bf00      	nop
   1fa0c:	20002060 	.word	0x20002060
   1fa10:	40011000 	.word	0x40011000
   1fa14:	20002bd4 	.word	0x20002bd4

0001fa18 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1fa18:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1fa1a:	4b19      	ldr	r3, [pc, #100]	; (1fa80 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1fa1c:	4d19      	ldr	r5, [pc, #100]	; (1fa84 <sys_clock_driver_init+0x6c>)
   1fa1e:	2400      	movs	r4, #0
   1fa20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fa24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa28:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1fa2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1fa30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fa34:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fa38:	4b13      	ldr	r3, [pc, #76]	; (1fa88 <sys_clock_driver_init+0x70>)
   1fa3a:	2602      	movs	r6, #2
   1fa3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1fa40:	2101      	movs	r1, #1
   1fa42:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1fa46:	2011      	movs	r0, #17
   1fa48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1fa4c:	4622      	mov	r2, r4
   1fa4e:	f7f4 fd4b 	bl	144e8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1fa52:	2011      	movs	r0, #17
   1fa54:	f7f4 fd16 	bl	14484 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1fa58:	4a0c      	ldr	r2, [pc, #48]	; (1fa8c <sys_clock_driver_init+0x74>)
   1fa5a:	2301      	movs	r3, #1
   1fa5c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1fa5e:	4a0c      	ldr	r2, [pc, #48]	; (1fa90 <sys_clock_driver_init+0x78>)
   1fa60:	602b      	str	r3, [r5, #0]
   1fa62:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1fa64:	4b0b      	ldr	r3, [pc, #44]	; (1fa94 <sys_clock_driver_init+0x7c>)
   1fa66:	4a0c      	ldr	r2, [pc, #48]	; (1fa98 <sys_clock_driver_init+0x80>)
   1fa68:	9300      	str	r3, [sp, #0]
   1fa6a:	9401      	str	r4, [sp, #4]
   1fa6c:	2300      	movs	r3, #0
   1fa6e:	4620      	mov	r0, r4
   1fa70:	f7ff ff28 	bl	1f8c4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1fa74:	4630      	mov	r0, r6
   1fa76:	f7fe fae5 	bl	1e044 <z_nrf_clock_control_lf_on>

	return 0;
}
   1fa7a:	4620      	mov	r0, r4
   1fa7c:	b002      	add	sp, #8
   1fa7e:	bd70      	pop	{r4, r5, r6, pc}
   1fa80:	20002060 	.word	0x20002060
   1fa84:	40011000 	.word	0x40011000
   1fa88:	e000e100 	.word	0xe000e100
   1fa8c:	40011008 	.word	0x40011008
   1fa90:	20002bd8 	.word	0x20002bd8
   1fa94:	0001f75d 	.word	0x0001f75d
   1fa98:	007fffff 	.word	0x007fffff

0001fa9c <rtc_nrf_isr>:
{
   1fa9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   1faa0:	4c2a      	ldr	r4, [pc, #168]	; (1fb4c <rtc_nrf_isr+0xb0>)
   1faa2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1faa6:	0799      	lsls	r1, r3, #30
   1faa8:	d509      	bpl.n	1fabe <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1faaa:	4b29      	ldr	r3, [pc, #164]	; (1fb50 <rtc_nrf_isr+0xb4>)
   1faac:	681a      	ldr	r2, [r3, #0]
   1faae:	b132      	cbz	r2, 1fabe <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1fab0:	2200      	movs	r2, #0
   1fab2:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   1fab4:	4a27      	ldr	r2, [pc, #156]	; (1fb54 <rtc_nrf_isr+0xb8>)
   1fab6:	681b      	ldr	r3, [r3, #0]
   1fab8:	6813      	ldr	r3, [r2, #0]
   1faba:	3301      	adds	r3, #1
   1fabc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1fabe:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1fac2:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1fac4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1fac8:	03d2      	lsls	r2, r2, #15
   1faca:	d52c      	bpl.n	1fb26 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1facc:	f3bf 8f5b 	dmb	ish
   1fad0:	4a21      	ldr	r2, [pc, #132]	; (1fb58 <rtc_nrf_isr+0xbc>)
   1fad2:	e852 1f00 	ldrex	r1, [r2]
   1fad6:	f021 0001 	bic.w	r0, r1, #1
   1fada:	e842 0500 	strex	r5, r0, [r2]
   1fade:	2d00      	cmp	r5, #0
   1fae0:	d1f7      	bne.n	1fad2 <rtc_nrf_isr+0x36>
   1fae2:	f3bf 8f5b 	dmb	ish
   1fae6:	4a1d      	ldr	r2, [pc, #116]	; (1fb5c <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1fae8:	b909      	cbnz	r1, 1faee <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1faea:	6811      	ldr	r1, [r2, #0]
		if (result) {
   1faec:	b1d9      	cbz	r1, 1fb26 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1faee:	2500      	movs	r5, #0
   1faf0:	6015      	str	r5, [r2, #0]
   1faf2:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1faf4:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1faf8:	f7ff fec2 	bl	1f880 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1fafc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1fb00:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1fb02:	4b17      	ldr	r3, [pc, #92]	; (1fb60 <rtc_nrf_isr+0xc4>)
   1fb04:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1fb08:	4549      	cmp	r1, r9
   1fb0a:	bf08      	it	eq
   1fb0c:	4540      	cmpeq	r0, r8
   1fb0e:	d20f      	bcs.n	1fb30 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1fb10:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1fb12:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1fb16:	b141      	cbz	r1, 1fb2a <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   1fb18:	f8cd a000 	str.w	sl, [sp]
   1fb1c:	4642      	mov	r2, r8
   1fb1e:	464b      	mov	r3, r9
   1fb20:	2000      	movs	r0, #0
   1fb22:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1fb24:	e001      	b.n	1fb2a <rtc_nrf_isr+0x8e>
   1fb26:	f383 8810 	msr	PRIMASK, r3
}
   1fb2a:	b002      	add	sp, #8
   1fb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1fb30:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1fb34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   1fb38:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1fb3c:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   1fb40:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1fb42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1fb46:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1fb4a:	e7e2      	b.n	1fb12 <rtc_nrf_isr+0x76>
   1fb4c:	40011000 	.word	0x40011000
   1fb50:	40011104 	.word	0x40011104
   1fb54:	20002bdc 	.word	0x20002bdc
   1fb58:	20002bd4 	.word	0x20002bd4
   1fb5c:	40011140 	.word	0x40011140
   1fb60:	20002060 	.word	0x20002060

0001fb64 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1fb64:	4b14      	ldr	r3, [pc, #80]	; (1fbb8 <sys_clock_set_timeout+0x54>)
{
   1fb66:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1fb68:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1fb6c:	bf08      	it	eq
   1fb6e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1fb70:	1e44      	subs	r4, r0, #1
   1fb72:	2c00      	cmp	r4, #0
   1fb74:	dd1e      	ble.n	1fbb4 <sys_clock_set_timeout+0x50>
   1fb76:	429c      	cmp	r4, r3
   1fb78:	bfa8      	it	ge
   1fb7a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1fb7c:	f7ff fe80 	bl	1f880 <z_nrf_rtc_timer_read>
   1fb80:	4b0e      	ldr	r3, [pc, #56]	; (1fbbc <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1fb82:	490f      	ldr	r1, [pc, #60]	; (1fbc0 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fb88:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1fb8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1fb8e:	bf28      	it	cs
   1fb90:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1fb92:	3001      	adds	r0, #1
   1fb94:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1fb96:	4808      	ldr	r0, [pc, #32]	; (1fbb8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1fb98:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1fb9a:	4284      	cmp	r4, r0
   1fb9c:	bf28      	it	cs
   1fb9e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1fba0:	1912      	adds	r2, r2, r4
   1fba2:	f04f 0000 	mov.w	r0, #0
   1fba6:	9001      	str	r0, [sp, #4]
   1fba8:	f143 0300 	adc.w	r3, r3, #0
   1fbac:	f7ff fe8a 	bl	1f8c4 <compare_set>
}
   1fbb0:	b002      	add	sp, #8
   1fbb2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1fbb4:	2400      	movs	r4, #0
   1fbb6:	e7e1      	b.n	1fb7c <sys_clock_set_timeout+0x18>
   1fbb8:	007fffff 	.word	0x007fffff
   1fbbc:	20002070 	.word	0x20002070
   1fbc0:	0001f75d 	.word	0x0001f75d

0001fbc4 <sys_clock_elapsed>:
{
   1fbc4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1fbc6:	f7ff fe5b 	bl	1f880 <z_nrf_rtc_timer_read>
   1fbca:	4b02      	ldr	r3, [pc, #8]	; (1fbd4 <sys_clock_elapsed+0x10>)
   1fbcc:	681b      	ldr	r3, [r3, #0]
}
   1fbce:	1ac0      	subs	r0, r0, r3
   1fbd0:	bd08      	pop	{r3, pc}
   1fbd2:	bf00      	nop
   1fbd4:	20002070 	.word	0x20002070

0001fbd8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1fbd8:	4602      	mov	r2, r0
   1fbda:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1fbdc:	4801      	ldr	r0, [pc, #4]	; (1fbe4 <multithreading_lock_acquire+0xc>)
   1fbde:	f002 bc0f 	b.w	22400 <z_impl_k_mutex_lock>
   1fbe2:	bf00      	nop
   1fbe4:	2000084c 	.word	0x2000084c

0001fbe8 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1fbe8:	4801      	ldr	r0, [pc, #4]	; (1fbf0 <multithreading_lock_release+0x8>)
   1fbea:	f002 bd09 	b.w	22600 <z_impl_k_mutex_unlock>
   1fbee:	bf00      	nop
   1fbf0:	2000084c 	.word	0x2000084c

0001fbf4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1fbf4:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1fbf6:	f7f2 fd5b 	bl	126b0 <z_impl_log_panic>
   1fbfa:	4b06      	ldr	r3, [pc, #24]	; (1fc14 <k_sys_fatal_error_handler+0x20>)
   1fbfc:	4906      	ldr	r1, [pc, #24]	; (1fc18 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1fbfe:	4807      	ldr	r0, [pc, #28]	; (1fc1c <k_sys_fatal_error_handler+0x28>)
   1fc00:	1ac9      	subs	r1, r1, r3
   1fc02:	08c9      	lsrs	r1, r1, #3
   1fc04:	0189      	lsls	r1, r1, #6
   1fc06:	f041 0101 	orr.w	r1, r1, #1
   1fc0a:	f008 ffd0 	bl	28bae <log_0>
		sys_arch_reboot(0);
   1fc0e:	2000      	movs	r0, #0
   1fc10:	f7f5 fa5c 	bl	150cc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1fc14:	0002d948 	.word	0x0002d948
   1fc18:	0002d9d0 	.word	0x0002d9d0
   1fc1c:	00031be8 	.word	0x00031be8

0001fc20 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1fc20:	b538      	push	{r3, r4, r5, lr}
   1fc22:	4b0b      	ldr	r3, [pc, #44]	; (1fc50 <sdc_assertion_handler+0x30>)
   1fc24:	4c0b      	ldr	r4, [pc, #44]	; (1fc54 <sdc_assertion_handler+0x34>)
   1fc26:	1ae4      	subs	r4, r4, r3
   1fc28:	460d      	mov	r5, r1
   1fc2a:	08e4      	lsrs	r4, r4, #3
   1fc2c:	f7f2 fbb8 	bl	123a0 <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1fc30:	01a4      	lsls	r4, r4, #6
   1fc32:	f044 0401 	orr.w	r4, r4, #1
   1fc36:	4601      	mov	r1, r0
   1fc38:	4623      	mov	r3, r4
   1fc3a:	4807      	ldr	r0, [pc, #28]	; (1fc58 <sdc_assertion_handler+0x38>)
   1fc3c:	462a      	mov	r2, r5
   1fc3e:	f008 ffd7 	bl	28bf0 <log_2>
	k_oops();
   1fc42:	4040      	eors	r0, r0
   1fc44:	f380 8811 	msr	BASEPRI, r0
   1fc48:	f04f 0003 	mov.w	r0, #3
   1fc4c:	df02      	svc	2
}
   1fc4e:	bd38      	pop	{r3, r4, r5, pc}
   1fc50:	0002d948 	.word	0x0002d948
   1fc54:	0002da30 	.word	0x0002da30
   1fc58:	00031c05 	.word	0x00031c05

0001fc5c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1fc5c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1fc5e:	4804      	ldr	r0, [pc, #16]	; (1fc70 <hci_driver_init+0x14>)
   1fc60:	f7f6 fff2 	bl	16c48 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1fc64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1fc68:	4802      	ldr	r0, [pc, #8]	; (1fc74 <hci_driver_init+0x18>)
   1fc6a:	f7e4 b8a3 	b.w	3db4 <sdc_init>
   1fc6e:	bf00      	nop
   1fc70:	0002e328 	.word	0x0002e328
   1fc74:	0001fc21 	.word	0x0001fc21

0001fc78 <rand_prio_low_vector_get_blocking>:
{
   1fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1fc7a:	4b16      	ldr	r3, [pc, #88]	; (1fcd4 <rand_prio_low_vector_get_blocking+0x5c>)
{
   1fc7c:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1fc7e:	681e      	ldr	r6, [r3, #0]
   1fc80:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1fc82:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1fc84:	683b      	ldr	r3, [r7, #0]
   1fc86:	b963      	cbnz	r3, 1fca2 <rand_prio_low_vector_get_blocking+0x2a>
   1fc88:	4913      	ldr	r1, [pc, #76]	; (1fcd8 <rand_prio_low_vector_get_blocking+0x60>)
   1fc8a:	4a14      	ldr	r2, [pc, #80]	; (1fcdc <rand_prio_low_vector_get_blocking+0x64>)
   1fc8c:	4814      	ldr	r0, [pc, #80]	; (1fce0 <rand_prio_low_vector_get_blocking+0x68>)
   1fc8e:	234b      	movs	r3, #75	; 0x4b
   1fc90:	f008 fd6e 	bl	28770 <printk>
   1fc94:	4813      	ldr	r0, [pc, #76]	; (1fce4 <rand_prio_low_vector_get_blocking+0x6c>)
   1fc96:	f008 fd6b 	bl	28770 <printk>
   1fc9a:	4810      	ldr	r0, [pc, #64]	; (1fcdc <rand_prio_low_vector_get_blocking+0x64>)
   1fc9c:	214b      	movs	r1, #75	; 0x4b
   1fc9e:	f008 ff58 	bl	28b52 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1fca2:	683b      	ldr	r3, [r7, #0]
   1fca4:	462a      	mov	r2, r5
   1fca6:	4621      	mov	r1, r4
   1fca8:	4630      	mov	r0, r6
   1fcaa:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1fcac:	b180      	cbz	r0, 1fcd0 <rand_prio_low_vector_get_blocking+0x58>
   1fcae:	490e      	ldr	r1, [pc, #56]	; (1fce8 <rand_prio_low_vector_get_blocking+0x70>)
   1fcb0:	4a0e      	ldr	r2, [pc, #56]	; (1fcec <rand_prio_low_vector_get_blocking+0x74>)
   1fcb2:	480b      	ldr	r0, [pc, #44]	; (1fce0 <rand_prio_low_vector_get_blocking+0x68>)
   1fcb4:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   1fcb8:	f008 fd5a 	bl	28770 <printk>
   1fcbc:	480c      	ldr	r0, [pc, #48]	; (1fcf0 <rand_prio_low_vector_get_blocking+0x78>)
   1fcbe:	f008 fd57 	bl	28770 <printk>
}
   1fcc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1fcc6:	4809      	ldr	r0, [pc, #36]	; (1fcec <rand_prio_low_vector_get_blocking+0x74>)
   1fcc8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   1fccc:	f008 bf41 	b.w	28b52 <assert_post_action>
}
   1fcd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fcd2:	bf00      	nop
   1fcd4:	20002be0 	.word	0x20002be0
   1fcd8:	00031c57 	.word	0x00031c57
   1fcdc:	00031c2a 	.word	0x00031c2a
   1fce0:	0002e915 	.word	0x0002e915
   1fce4:	00031c77 	.word	0x00031c77
   1fce8:	000301d6 	.word	0x000301d6
   1fcec:	00031c9d 	.word	0x00031c9d
   1fcf0:	00031cd6 	.word	0x00031cd6

0001fcf4 <rand_prio_high_vector_get>:
{
   1fcf4:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1fcf6:	4b11      	ldr	r3, [pc, #68]	; (1fd3c <rand_prio_high_vector_get+0x48>)
{
   1fcf8:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1fcfa:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1fcfc:	6883      	ldr	r3, [r0, #8]
   1fcfe:	685d      	ldr	r5, [r3, #4]
   1fd00:	460a      	mov	r2, r1
   1fd02:	b1bd      	cbz	r5, 1fd34 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1fd04:	4621      	mov	r1, r4
   1fd06:	2300      	movs	r3, #0
   1fd08:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1fd0a:	1e04      	subs	r4, r0, #0
   1fd0c:	da0e      	bge.n	1fd2c <rand_prio_high_vector_get+0x38>
   1fd0e:	490c      	ldr	r1, [pc, #48]	; (1fd40 <rand_prio_high_vector_get+0x4c>)
   1fd10:	4a0c      	ldr	r2, [pc, #48]	; (1fd44 <rand_prio_high_vector_get+0x50>)
   1fd12:	480d      	ldr	r0, [pc, #52]	; (1fd48 <rand_prio_high_vector_get+0x54>)
   1fd14:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1fd18:	f008 fd2a 	bl	28770 <printk>
   1fd1c:	480b      	ldr	r0, [pc, #44]	; (1fd4c <rand_prio_high_vector_get+0x58>)
   1fd1e:	f008 fd27 	bl	28770 <printk>
   1fd22:	4808      	ldr	r0, [pc, #32]	; (1fd44 <rand_prio_high_vector_get+0x50>)
   1fd24:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1fd28:	f008 ff13 	bl	28b52 <assert_post_action>
	return ret >= 0 ? ret : 0;
   1fd2c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   1fd30:	b2c0      	uxtb	r0, r0
   1fd32:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1fd34:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1fd38:	e7e9      	b.n	1fd0e <rand_prio_high_vector_get+0x1a>
   1fd3a:	bf00      	nop
   1fd3c:	20002be0 	.word	0x20002be0
   1fd40:	00031d10 	.word	0x00031d10
   1fd44:	00031c9d 	.word	0x00031c9d
   1fd48:	0002e915 	.word	0x0002e915
   1fd4c:	00031d19 	.word	0x00031d19

0001fd50 <hci_driver_open>:
{
   1fd50:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd52:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fd54:	2200      	movs	r2, #0
   1fd56:	2300      	movs	r3, #0
   1fd58:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fd5c:	2300      	movs	r3, #0
   1fd5e:	f06f 0209 	mvn.w	r2, #9
   1fd62:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1fd66:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1fd6a:	9300      	str	r3, [sp, #0]
   1fd6c:	4956      	ldr	r1, [pc, #344]	; (1fec8 <hci_driver_open+0x178>)
   1fd6e:	4b57      	ldr	r3, [pc, #348]	; (1fecc <hci_driver_open+0x17c>)
   1fd70:	4857      	ldr	r0, [pc, #348]	; (1fed0 <hci_driver_open+0x180>)
   1fd72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fd76:	f002 fa13 	bl	221a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1fd7a:	4956      	ldr	r1, [pc, #344]	; (1fed4 <hci_driver_open+0x184>)
   1fd7c:	4854      	ldr	r0, [pc, #336]	; (1fed0 <hci_driver_open+0x180>)
   1fd7e:	4c56      	ldr	r4, [pc, #344]	; (1fed8 <hci_driver_open+0x188>)
   1fd80:	f00d fa84 	bl	2d28c <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1fd84:	a80b      	add	r0, sp, #44	; 0x2c
   1fd86:	f7e3 ff83 	bl	3c90 <sdc_build_revision_get>
   1fd8a:	4b54      	ldr	r3, [pc, #336]	; (1fedc <hci_driver_open+0x18c>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1fd8c:	4854      	ldr	r0, [pc, #336]	; (1fee0 <hci_driver_open+0x190>)
   1fd8e:	1ae4      	subs	r4, r4, r3
   1fd90:	08e4      	lsrs	r4, r4, #3
   1fd92:	01a4      	lsls	r4, r4, #6
   1fd94:	f044 0303 	orr.w	r3, r4, #3
   1fd98:	2214      	movs	r2, #20
   1fd9a:	a90b      	add	r1, sp, #44	; 0x2c
   1fd9c:	f008 ff68 	bl	28c70 <log_hexdump>
			err = sdc_support_adv();
   1fda0:	f7e4 f888 	bl	3eb4 <sdc_support_adv>
			if (err) {
   1fda4:	b118      	cbz	r0, 1fdae <hci_driver_open+0x5e>
				return -ENOTSUP;
   1fda6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1fdaa:	b011      	add	sp, #68	; 0x44
   1fdac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sdc_support_slave();
   1fdae:	f7e4 f8b1 	bl	3f14 <sdc_support_slave>
		if (err) {
   1fdb2:	2800      	cmp	r0, #0
   1fdb4:	d1f7      	bne.n	1fda6 <hci_driver_open+0x56>
		err = sdc_support_dle();
   1fdb6:	f7e4 f88d 	bl	3ed4 <sdc_support_dle>
		if (err) {
   1fdba:	2800      	cmp	r0, #0
   1fdbc:	d1f3      	bne.n	1fda6 <hci_driver_open+0x56>
		err = sdc_support_le_2m_phy();
   1fdbe:	f7e4 f899 	bl	3ef4 <sdc_support_le_2m_phy>
		if (err) {
   1fdc2:	4606      	mov	r6, r0
   1fdc4:	2800      	cmp	r0, #0
   1fdc6:	d1ee      	bne.n	1fda6 <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fdc8:	ad08      	add	r5, sp, #32
   1fdca:	462a      	mov	r2, r5
   1fdcc:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   1fdce:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fdd2:	f7e3 ff6b 	bl	3cac <sdc_cfg_set>
	if (required_memory < 0) {
   1fdd6:	2800      	cmp	r0, #0
   1fdd8:	dbe7      	blt.n	1fdaa <hci_driver_open+0x5a>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1fdda:	2701      	movs	r7, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fddc:	462a      	mov	r2, r5
   1fdde:	2102      	movs	r1, #2
   1fde0:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1fde2:	f88d 7020 	strb.w	r7, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fde6:	f7e3 ff61 	bl	3cac <sdc_cfg_set>
	if (required_memory < 0) {
   1fdea:	2800      	cmp	r0, #0
   1fdec:	dbdd      	blt.n	1fdaa <hci_driver_open+0x5a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1fdee:	4b3d      	ldr	r3, [pc, #244]	; (1fee4 <hci_driver_open+0x194>)
   1fdf0:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fdf2:	462a      	mov	r2, r5
   1fdf4:	2103      	movs	r1, #3
   1fdf6:	4630      	mov	r0, r6
   1fdf8:	f7e3 ff58 	bl	3cac <sdc_cfg_set>
	if (required_memory < 0) {
   1fdfc:	2800      	cmp	r0, #0
   1fdfe:	dbd4      	blt.n	1fdaa <hci_driver_open+0x5a>
	cfg.event_length.event_length_us =
   1fe00:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fe04:	462a      	mov	r2, r5
   1fe06:	2104      	movs	r1, #4
   1fe08:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   1fe0a:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fe0c:	f7e3 ff4e 	bl	3cac <sdc_cfg_set>
	if (required_memory < 0) {
   1fe10:	2800      	cmp	r0, #0
   1fe12:	dbca      	blt.n	1fdaa <hci_driver_open+0x5a>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fe14:	462a      	mov	r2, r5
   1fe16:	2105      	movs	r1, #5
   1fe18:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1fe1a:	f88d 7020 	strb.w	r7, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fe1e:	f7e3 ff45 	bl	3cac <sdc_cfg_set>
	if (required_memory < 0) {
   1fe22:	2800      	cmp	r0, #0
   1fe24:	dbc1      	blt.n	1fdaa <hci_driver_open+0x5a>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1fe26:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fe28:	462a      	mov	r2, r5
   1fe2a:	2107      	movs	r1, #7
   1fe2c:	4630      	mov	r0, r6
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1fe2e:	f8ad 3020 	strh.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1fe32:	f7e3 ff3b 	bl	3cac <sdc_cfg_set>
		if (required_memory < 0) {
   1fe36:	2800      	cmp	r0, #0
   1fe38:	dbb7      	blt.n	1fdaa <hci_driver_open+0x5a>
	if (required_memory > sizeof(sdc_mempool)) {
   1fe3a:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   1fe3e:	dd10      	ble.n	1fe62 <hci_driver_open+0x112>
		BT_ERR("Allocated memory too low: %u < %u",
   1fe40:	4602      	mov	r2, r0
   1fe42:	ea44 0307 	orr.w	r3, r4, r7
   1fe46:	4828      	ldr	r0, [pc, #160]	; (1fee8 <hci_driver_open+0x198>)
   1fe48:	f44f 61af 	mov.w	r1, #1400	; 0x578
   1fe4c:	f008 fed0 	bl	28bf0 <log_2>
		k_panic();
   1fe50:	4040      	eors	r0, r0
   1fe52:	f380 8811 	msr	BASEPRI, r0
   1fe56:	f04f 0004 	mov.w	r0, #4
   1fe5a:	df02      	svc	2
		return -ENOMEM;
   1fe5c:	f06f 000b 	mvn.w	r0, #11
   1fe60:	e7a3      	b.n	1fdaa <hci_driver_open+0x5a>
   1fe62:	4822      	ldr	r0, [pc, #136]	; (1feec <hci_driver_open+0x19c>)
   1fe64:	f001 fd90 	bl	21988 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1fe68:	4b21      	ldr	r3, [pc, #132]	; (1fef0 <hci_driver_open+0x1a0>)
   1fe6a:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1fe6c:	b938      	cbnz	r0, 1fe7e <hci_driver_open+0x12e>
		BT_ERR("An entropy source is required");
   1fe6e:	4821      	ldr	r0, [pc, #132]	; (1fef4 <hci_driver_open+0x1a4>)
   1fe70:	f044 0101 	orr.w	r1, r4, #1
   1fe74:	f008 fe9b 	bl	28bae <log_0>
		return -ENODEV;
   1fe78:	f06f 0012 	mvn.w	r0, #18
   1fe7c:	e795      	b.n	1fdaa <hci_driver_open+0x5a>
	sdc_rand_source_t rand_functions = {
   1fe7e:	4b1e      	ldr	r3, [pc, #120]	; (1fef8 <hci_driver_open+0x1a8>)
   1fe80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1fe84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1fe88:	4628      	mov	r0, r5
   1fe8a:	f7e4 f895 	bl	3fb8 <sdc_rand_source_register>
	if (err) {
   1fe8e:	4601      	mov	r1, r0
   1fe90:	b138      	cbz	r0, 1fea2 <hci_driver_open+0x152>
		BT_ERR("Failed to register rand source (%d)", err);
   1fe92:	481a      	ldr	r0, [pc, #104]	; (1fefc <hci_driver_open+0x1ac>)
   1fe94:	f044 0201 	orr.w	r2, r4, #1
   1fe98:	f008 fe96 	bl	28bc8 <log_1>
		return -EINVAL;
   1fe9c:	f06f 0015 	mvn.w	r0, #21
   1fea0:	e783      	b.n	1fdaa <hci_driver_open+0x5a>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1fea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fea6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1feaa:	f7ff fe95 	bl	1fbd8 <multithreading_lock_acquire>
	if (!err) {
   1feae:	4604      	mov	r4, r0
   1feb0:	b930      	cbnz	r0, 1fec0 <hci_driver_open+0x170>
		err = sdc_enable(host_signal, sdc_mempool);
   1feb2:	4913      	ldr	r1, [pc, #76]	; (1ff00 <hci_driver_open+0x1b0>)
   1feb4:	4813      	ldr	r0, [pc, #76]	; (1ff04 <hci_driver_open+0x1b4>)
   1feb6:	f7e3 ff55 	bl	3d64 <sdc_enable>
   1feba:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1febc:	f7ff fe94 	bl	1fbe8 <multithreading_lock_release>
	if (err < 0) {
   1fec0:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1fec4:	e771      	b.n	1fdaa <hci_driver_open+0x5a>
   1fec6:	bf00      	nop
   1fec8:	20005f40 	.word	0x20005f40
   1fecc:	0001ff09 	.word	0x0001ff09
   1fed0:	20002078 	.word	0x20002078
   1fed4:	00031d5d 	.word	0x00031d5d
   1fed8:	0002da30 	.word	0x0002da30
   1fedc:	0002d948 	.word	0x0002d948
   1fee0:	00031d64 	.word	0x00031d64
   1fee4:	02031b1b 	.word	0x02031b1b
   1fee8:	00031d8b 	.word	0x00031d8b
   1feec:	00031b6c 	.word	0x00031b6c
   1fef0:	20002be0 	.word	0x20002be0
   1fef4:	00031dad 	.word	0x00031dad
   1fef8:	0002dae0 	.word	0x0002dae0
   1fefc:	00031dcb 	.word	0x00031dcb
   1ff00:	200038ef 	.word	0x200038ef
   1ff04:	00020021 	.word	0x00020021

0001ff08 <recv_thread>:
{
   1ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff0c:	4b3e      	ldr	r3, [pc, #248]	; (20008 <recv_thread+0x100>)
   1ff0e:	4e3f      	ldr	r6, [pc, #252]	; (2000c <recv_thread+0x104>)
	return z_impl_k_sem_take(sem, timeout);
   1ff10:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2001c <recv_thread+0x114>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1ff14:	4d3e      	ldr	r5, [pc, #248]	; (20010 <recv_thread+0x108>)
   1ff16:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1ff18:	2700      	movs	r7, #0
   1ff1a:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1ff1c:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1ff1e:	b93c      	cbnz	r4, 1ff30 <recv_thread+0x28>
   1ff20:	b937      	cbnz	r7, 1ff30 <recv_thread+0x28>
   1ff22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ff26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff2a:	4640      	mov	r0, r8
   1ff2c:	f002 fdd8 	bl	22ae0 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ff30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ff34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff38:	f7ff fe4e 	bl	1fbd8 <multithreading_lock_acquire>
	if (!errcode) {
   1ff3c:	b160      	cbz	r0, 1ff58 <recv_thread+0x50>
		return false;
   1ff3e:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ff40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ff44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff48:	f7ff fe46 	bl	1fbd8 <multithreading_lock_acquire>
	if (!errcode) {
   1ff4c:	2800      	cmp	r0, #0
   1ff4e:	d038      	beq.n	1ffc2 <recv_thread+0xba>
		return false;
   1ff50:	2700      	movs	r7, #0
	z_impl_k_yield();
   1ff52:	f004 fb27 	bl	245a4 <z_impl_k_yield>
}
   1ff56:	e7e2      	b.n	1ff1e <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1ff58:	482d      	ldr	r0, [pc, #180]	; (20010 <recv_thread+0x108>)
   1ff5a:	f000 fbe1 	bl	20720 <hci_internal_evt_get>
   1ff5e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ff60:	f7ff fe42 	bl	1fbe8 <multithreading_lock_release>
	if (errcode) {
   1ff64:	2c00      	cmp	r4, #0
   1ff66:	d1ea      	bne.n	1ff3e <recv_thread+0x36>
	switch (hdr->evt) {
   1ff68:	7828      	ldrb	r0, [r5, #0]
   1ff6a:	283e      	cmp	r0, #62	; 0x3e
   1ff6c:	d007      	beq.n	1ff7e <recv_thread+0x76>
   1ff6e:	28ff      	cmp	r0, #255	; 0xff
   1ff70:	d01a      	beq.n	1ffa8 <recv_thread+0xa0>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ff72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ff76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff7a:	2400      	movs	r4, #0
   1ff7c:	e005      	b.n	1ff8a <recv_thread+0x82>
		switch (me->subevent) {
   1ff7e:	78ab      	ldrb	r3, [r5, #2]
   1ff80:	2b02      	cmp	r3, #2
		switch (subevent) {
   1ff82:	d1f6      	bne.n	1ff72 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ff84:	2200      	movs	r2, #0
   1ff86:	2300      	movs	r3, #0
   1ff88:	2401      	movs	r4, #1
   1ff8a:	4621      	mov	r1, r4
   1ff8c:	f7f5 fcc8 	bl	15920 <bt_buf_get_evt>
	if (!evt_buf) {
   1ff90:	4607      	mov	r7, r0
   1ff92:	b960      	cbnz	r0, 1ffae <recv_thread+0xa6>
		if (discardable) {
   1ff94:	2c00      	cmp	r4, #0
   1ff96:	d1d3      	bne.n	1ff40 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1ff98:	01b1      	lsls	r1, r6, #6
   1ff9a:	481e      	ldr	r0, [pc, #120]	; (20014 <recv_thread+0x10c>)
   1ff9c:	f041 0101 	orr.w	r1, r1, #1
   1ffa0:	f008 fe05 	bl	28bae <log_0>
	return true;
   1ffa4:	2401      	movs	r4, #1
   1ffa6:	e7cb      	b.n	1ff40 <recv_thread+0x38>
		switch (subevent) {
   1ffa8:	78ab      	ldrb	r3, [r5, #2]
   1ffaa:	2b80      	cmp	r3, #128	; 0x80
   1ffac:	e7e9      	b.n	1ff82 <recv_thread+0x7a>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1ffae:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ffb0:	4629      	mov	r1, r5
   1ffb2:	3202      	adds	r2, #2
   1ffb4:	3008      	adds	r0, #8
   1ffb6:	f00c fd0b 	bl	2c9d0 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1ffba:	4638      	mov	r0, r7
   1ffbc:	f7f6 fe10 	bl	16be0 <bt_recv>
   1ffc0:	e7f0      	b.n	1ffa4 <recv_thread+0x9c>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1ffc2:	4813      	ldr	r0, [pc, #76]	; (20010 <recv_thread+0x108>)
   1ffc4:	f7ec fb81 	bl	c6ca <sdc_hci_data_get>
   1ffc8:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1ffca:	f7ff fe0d 	bl	1fbe8 <multithreading_lock_release>
	if (errcode) {
   1ffce:	2f00      	cmp	r7, #0
   1ffd0:	d1be      	bne.n	1ff50 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1ffd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ffd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ffda:	2003      	movs	r0, #3
   1ffdc:	f7f5 fc56 	bl	1588c <bt_buf_get_rx>
	if (!data_buf) {
   1ffe0:	4607      	mov	r7, r0
   1ffe2:	b938      	cbnz	r0, 1fff4 <recv_thread+0xec>
		BT_ERR("No data buffer available");
   1ffe4:	01b1      	lsls	r1, r6, #6
   1ffe6:	480c      	ldr	r0, [pc, #48]	; (20018 <recv_thread+0x110>)
   1ffe8:	f041 0101 	orr.w	r1, r1, #1
   1ffec:	f008 fddf 	bl	28bae <log_0>
	return true;
   1fff0:	2701      	movs	r7, #1
   1fff2:	e7ae      	b.n	1ff52 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1fff4:	886a      	ldrh	r2, [r5, #2]
   1fff6:	4629      	mov	r1, r5
   1fff8:	3204      	adds	r2, #4
   1fffa:	3008      	adds	r0, #8
   1fffc:	f00c fce8 	bl	2c9d0 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   20000:	4638      	mov	r0, r7
   20002:	f7f6 fded 	bl	16be0 <bt_recv>
   20006:	e7f3      	b.n	1fff0 <recv_thread+0xe8>
   20008:	0002d948 	.word	0x0002d948
   2000c:	0002da30 	.word	0x0002da30
   20010:	200038a6 	.word	0x200038a6
   20014:	00031def 	.word	0x00031def
   20018:	00031e09 	.word	0x00031e09
   2001c:	20000924 	.word	0x20000924

00020020 <host_signal>:
	z_impl_k_sem_give(sem);
   20020:	4801      	ldr	r0, [pc, #4]	; (20028 <host_signal+0x8>)
   20022:	f002 bd19 	b.w	22a58 <z_impl_k_sem_give>
   20026:	bf00      	nop
   20028:	20000924 	.word	0x20000924

0002002c <hci_driver_send>:
{
   2002c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2002e:	8983      	ldrh	r3, [r0, #12]
{
   20030:	4605      	mov	r5, r0
	if (!buf->len) {
   20032:	b383      	cbz	r3, 20096 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   20034:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   20036:	b1ab      	cbz	r3, 20064 <hci_driver_send+0x38>
   20038:	2b02      	cmp	r3, #2
   2003a:	d12c      	bne.n	20096 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2003c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20044:	f7ff fdc8 	bl	1fbd8 <multithreading_lock_acquire>
	if (!errcode) {
   20048:	4604      	mov	r4, r0
   2004a:	b948      	cbnz	r0, 20060 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   2004c:	68a8      	ldr	r0, [r5, #8]
   2004e:	f7ec fb49 	bl	c6e4 <sdc_hci_data_put>
   20052:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20054:	f7ff fdc8 	bl	1fbe8 <multithreading_lock_release>
		if (errcode) {
   20058:	b1c4      	cbz	r4, 2008c <hci_driver_send+0x60>
   2005a:	4810      	ldr	r0, [pc, #64]	; (2009c <hci_driver_send+0x70>)
   2005c:	f002 fcfc 	bl	22a58 <z_impl_k_sem_give>
}
   20060:	4620      	mov	r0, r4
   20062:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2006c:	f7ff fdb4 	bl	1fbd8 <multithreading_lock_acquire>
	if (!errcode) {
   20070:	4604      	mov	r4, r0
   20072:	2800      	cmp	r0, #0
   20074:	d1f4      	bne.n	20060 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   20076:	68a8      	ldr	r0, [r5, #8]
   20078:	f000 f840 	bl	200fc <hci_internal_cmd_put>
   2007c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2007e:	f7ff fdb3 	bl	1fbe8 <multithreading_lock_release>
	if (errcode) {
   20082:	2c00      	cmp	r4, #0
   20084:	d1ec      	bne.n	20060 <hci_driver_send+0x34>
   20086:	4805      	ldr	r0, [pc, #20]	; (2009c <hci_driver_send+0x70>)
   20088:	f002 fce6 	bl	22a58 <z_impl_k_sem_give>
		net_buf_unref(buf);
   2008c:	4628      	mov	r0, r5
   2008e:	f7fd fd0f 	bl	1dab0 <net_buf_unref>
   20092:	2400      	movs	r4, #0
   20094:	e7e4      	b.n	20060 <hci_driver_send+0x34>
	switch (type) {
   20096:	f06f 0415 	mvn.w	r4, #21
   2009a:	e7e1      	b.n	20060 <hci_driver_send+0x34>
   2009c:	20000924 	.word	0x20000924

000200a0 <rand_prio_low_vector_get>:
{
   200a0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   200a2:	4b11      	ldr	r3, [pc, #68]	; (200e8 <rand_prio_low_vector_get+0x48>)
{
   200a4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   200a6:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   200a8:	6883      	ldr	r3, [r0, #8]
   200aa:	685d      	ldr	r5, [r3, #4]
   200ac:	460a      	mov	r2, r1
   200ae:	b1bd      	cbz	r5, 200e0 <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   200b0:	4621      	mov	r1, r4
   200b2:	2300      	movs	r3, #0
   200b4:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   200b6:	1e04      	subs	r4, r0, #0
   200b8:	da0e      	bge.n	200d8 <rand_prio_low_vector_get+0x38>
   200ba:	490c      	ldr	r1, [pc, #48]	; (200ec <rand_prio_low_vector_get+0x4c>)
   200bc:	4a0c      	ldr	r2, [pc, #48]	; (200f0 <rand_prio_low_vector_get+0x50>)
   200be:	480d      	ldr	r0, [pc, #52]	; (200f4 <rand_prio_low_vector_get+0x54>)
   200c0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   200c4:	f008 fb54 	bl	28770 <printk>
   200c8:	480b      	ldr	r0, [pc, #44]	; (200f8 <rand_prio_low_vector_get+0x58>)
   200ca:	f008 fb51 	bl	28770 <printk>
   200ce:	4808      	ldr	r0, [pc, #32]	; (200f0 <rand_prio_low_vector_get+0x50>)
   200d0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   200d4:	f008 fd3d 	bl	28b52 <assert_post_action>
	return ret >= 0 ? ret : 0;
   200d8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   200dc:	b2c0      	uxtb	r0, r0
   200de:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   200e0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   200e4:	e7e9      	b.n	200ba <rand_prio_low_vector_get+0x1a>
   200e6:	bf00      	nop
   200e8:	20002be0 	.word	0x20002be0
   200ec:	00031d10 	.word	0x00031d10
   200f0:	00031c9d 	.word	0x00031c9d
   200f4:	0002e915 	.word	0x0002e915
   200f8:	00031e22 	.word	0x00031e22

000200fc <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   200fc:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   200fe:	4c8e      	ldr	r4, [pc, #568]	; (20338 <hci_internal_cmd_put+0x23c>)
   20100:	7823      	ldrb	r3, [r4, #0]
   20102:	2b00      	cmp	r3, #0
   20104:	f040 82f7 	bne.w	206f6 <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   20108:	7843      	ldrb	r3, [r0, #1]
   2010a:	7805      	ldrb	r5, [r0, #0]
   2010c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   20110:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   20114:	b22e      	sxth	r6, r5
   20116:	ea4f 2395 	mov.w	r3, r5, lsr #10
   2011a:	d20d      	bcs.n	20138 <hci_internal_cmd_put+0x3c>
   2011c:	b17b      	cbz	r3, 2013e <hci_internal_cmd_put+0x42>
   2011e:	3b01      	subs	r3, #1
   20120:	2b07      	cmp	r3, #7
   20122:	d80c      	bhi.n	2013e <hci_internal_cmd_put+0x42>
   20124:	e8df f013 	tbh	[pc, r3, lsl #1]
   20128:	000b000e 	.word	0x000b000e
   2012c:	0060002c 	.word	0x0060002c
   20130:	000b000b 	.word	0x000b000b
   20134:	010c000b 	.word	0x010c000b
   20138:	2b3f      	cmp	r3, #63	; 0x3f
   2013a:	f000 8233 	beq.w	205a4 <hci_internal_cmd_put+0x4a8>
   2013e:	2304      	movs	r3, #4
   20140:	2001      	movs	r0, #1
   20142:	e26b      	b.n	2061c <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   20144:	f240 4306 	movw	r3, #1030	; 0x406
   20148:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2014a:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2014e:	d005      	beq.n	2015c <hci_internal_cmd_put+0x60>
   20150:	f240 431d 	movw	r3, #1053	; 0x41d
   20154:	429e      	cmp	r6, r3
   20156:	d010      	beq.n	2017a <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   20158:	2001      	movs	r0, #1
   2015a:	e001      	b.n	20160 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2015c:	f7ec fbe8 	bl	c930 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   20160:	230f      	movs	r3, #15
   20162:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   20164:	2304      	movs	r3, #4
   20166:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   20168:	2301      	movs	r3, #1
	evt_data->status = status_code;
   2016a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   2016c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   2016e:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   20172:	2301      	movs	r3, #1
   20174:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   20176:	2000      	movs	r0, #0
}
   20178:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2017a:	f7ec fbdb 	bl	c934 <sdc_hci_cmd_lc_read_remote_version_information>
   2017e:	e7ef      	b.n	20160 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   20180:	f640 4363 	movw	r3, #3171	; 0xc63
   20184:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   20186:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2018a:	d025      	beq.n	201d8 <hci_internal_cmd_put+0xdc>
   2018c:	dc0f      	bgt.n	201ae <hci_internal_cmd_put+0xb2>
   2018e:	f640 4303 	movw	r3, #3075	; 0xc03
   20192:	429e      	cmp	r6, r3
   20194:	d018      	beq.n	201c8 <hci_internal_cmd_put+0xcc>
   20196:	f640 432d 	movw	r3, #3117	; 0xc2d
   2019a:	429e      	cmp	r6, r3
   2019c:	d017      	beq.n	201ce <hci_internal_cmd_put+0xd2>
   2019e:	f640 4301 	movw	r3, #3073	; 0xc01
   201a2:	429e      	cmp	r6, r3
   201a4:	d1d8      	bne.n	20158 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   201a6:	f7ec fab9 	bl	c71c <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   201aa:	2304      	movs	r3, #4
   201ac:	e0b8      	b.n	20320 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   201ae:	f640 437b 	movw	r3, #3195	; 0xc7b
   201b2:	429e      	cmp	r6, r3
   201b4:	d013      	beq.n	201de <hci_internal_cmd_put+0xe2>
   201b6:	f640 437c 	movw	r3, #3196	; 0xc7c
   201ba:	429e      	cmp	r6, r3
   201bc:	d1cc      	bne.n	20158 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   201be:	495f      	ldr	r1, [pc, #380]	; (2033c <hci_internal_cmd_put+0x240>)
   201c0:	f7ec fab6 	bl	c730 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   201c4:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   201c6:	e0ab      	b.n	20320 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   201c8:	f7e3 ffea 	bl	41a0 <sdc_hci_cmd_cb_reset>
   201cc:	e7ed      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   201ce:	495b      	ldr	r1, [pc, #364]	; (2033c <hci_internal_cmd_put+0x240>)
   201d0:	f7ec faa2 	bl	c718 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   201d4:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   201d6:	e0a3      	b.n	20320 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   201d8:	f7ec faa5 	bl	c726 <sdc_hci_cmd_cb_set_event_mask_page_2>
   201dc:	e7e5      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   201de:	4957      	ldr	r1, [pc, #348]	; (2033c <hci_internal_cmd_put+0x240>)
   201e0:	f7ec fa98 	bl	c714 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   201e4:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   201e6:	e09b      	b.n	20320 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   201e8:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   201ec:	3e01      	subs	r6, #1
   201ee:	2e08      	cmp	r6, #8
   201f0:	d8b2      	bhi.n	20158 <hci_internal_cmd_put+0x5c>
   201f2:	a301      	add	r3, pc, #4	; (adr r3, 201f8 <hci_internal_cmd_put+0xfc>)
   201f4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   201f8:	0002021d 	.word	0x0002021d
   201fc:	00020227 	.word	0x00020227
   20200:	00020301 	.word	0x00020301
   20204:	00020159 	.word	0x00020159
   20208:	00020159 	.word	0x00020159
   2020c:	00020159 	.word	0x00020159
   20210:	00020159 	.word	0x00020159
   20214:	00020159 	.word	0x00020159
   20218:	00020319 	.word	0x00020319
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2021c:	4847      	ldr	r0, [pc, #284]	; (2033c <hci_internal_cmd_put+0x240>)
   2021e:	f7ec fb3c 	bl	c89a <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   20222:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   20224:	e07c      	b.n	20320 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   20226:	4845      	ldr	r0, [pc, #276]	; (2033c <hci_internal_cmd_put+0x240>)
   20228:	222e      	movs	r2, #46	; 0x2e
   2022a:	2100      	movs	r1, #0
   2022c:	f00a fc40 	bl	2aab0 <memset>
	cmds->hci_disconnect = 1;
   20230:	79e3      	ldrb	r3, [r4, #7]
   20232:	f043 0320 	orr.w	r3, r3, #32
   20236:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   20238:	7a63      	ldrb	r3, [r4, #9]
   2023a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2023e:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   20240:	7b23      	ldrb	r3, [r4, #12]
   20242:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20246:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   20248:	7c63      	ldrb	r3, [r4, #17]
   2024a:	f043 0304 	orr.w	r3, r3, #4
   2024e:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   20250:	7d63      	ldrb	r3, [r4, #21]
   20252:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   20256:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   2025a:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   2025c:	7da3      	ldrb	r3, [r4, #22]
   2025e:	f043 0302 	orr.w	r3, r3, #2
   20262:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   20264:	7f63      	ldrb	r3, [r4, #29]
   20266:	f043 0304 	orr.w	r3, r3, #4
   2026a:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   2026c:	f894 3020 	ldrb.w	r3, [r4, #32]
   20270:	f063 0308 	orn	r3, r3, #8
   20274:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   20278:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2027c:	f063 033c 	orn	r3, r3, #60	; 0x3c
   20280:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   20284:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   20288:	f063 030c 	orn	r3, r3, #12
   2028c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   20290:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   20294:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   20298:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   2029c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   202a0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   202a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   202a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   202ac:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   202b0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   202b4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   202b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   202bc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   202c0:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   202c4:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   202c8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   202cc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   202d0:	f063 0301 	orn	r3, r3, #1
   202d4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   202d8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   202dc:	f043 0301 	orr.w	r3, r3, #1
   202e0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   202e4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   202e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   202ec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   202f0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   202f4:	f043 0304 	orr.w	r3, r3, #4
   202f8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   202fc:	2344      	movs	r3, #68	; 0x44
   202fe:	e0de      	b.n	204be <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   20300:	480e      	ldr	r0, [pc, #56]	; (2033c <hci_internal_cmd_put+0x240>)
   20302:	2208      	movs	r2, #8
   20304:	2100      	movs	r1, #0
   20306:	f00a fbd3 	bl	2aab0 <memset>
	features->bdedr_not_supported = 1;
   2030a:	7ae3      	ldrb	r3, [r4, #11]
   2030c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   20310:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   20314:	72e3      	strb	r3, [r4, #11]
   20316:	e0d1      	b.n	204bc <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   20318:	4808      	ldr	r0, [pc, #32]	; (2033c <hci_internal_cmd_put+0x240>)
   2031a:	f7ec fabc 	bl	c896 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2031e:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   20320:	2801      	cmp	r0, #1
   20322:	f43f af1d 	beq.w	20160 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20326:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   20328:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   2032a:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2032c:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   2032e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   20330:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   20332:	71a0      	strb	r0, [r4, #6]
}
   20334:	e71d      	b.n	20172 <hci_internal_cmd_put+0x76>
   20336:	bf00      	nop
   20338:	20003e67 	.word	0x20003e67
   2033c:	20003e6e 	.word	0x20003e6e
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   20340:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   20344:	3e01      	subs	r6, #1
   20346:	3003      	adds	r0, #3
	switch (opcode)	{
   20348:	2e4d      	cmp	r6, #77	; 0x4d
   2034a:	f63f af05 	bhi.w	20158 <hci_internal_cmd_put+0x5c>
   2034e:	a301      	add	r3, pc, #4	; (adr r3, 20354 <hci_internal_cmd_put+0x258>)
   20350:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   20354:	0002048d 	.word	0x0002048d
   20358:	00020493 	.word	0x00020493
   2035c:	0002049b 	.word	0x0002049b
   20360:	00020159 	.word	0x00020159
   20364:	000204c3 	.word	0x000204c3
   20368:	000204c9 	.word	0x000204c9
   2036c:	000204cf 	.word	0x000204cf
   20370:	000204d9 	.word	0x000204d9
   20374:	000204df 	.word	0x000204df
   20378:	000204e5 	.word	0x000204e5
   2037c:	00020159 	.word	0x00020159
   20380:	00020159 	.word	0x00020159
   20384:	00020159 	.word	0x00020159
   20388:	00020159 	.word	0x00020159
   2038c:	000204eb 	.word	0x000204eb
   20390:	000204f3 	.word	0x000204f3
   20394:	000204f9 	.word	0x000204f9
   20398:	000204ff 	.word	0x000204ff
   2039c:	00020159 	.word	0x00020159
   203a0:	00020159 	.word	0x00020159
   203a4:	00020505 	.word	0x00020505
   203a8:	0002050f 	.word	0x0002050f
   203ac:	00020515 	.word	0x00020515
   203b0:	0002051f 	.word	0x0002051f
   203b4:	00020159 	.word	0x00020159
   203b8:	00020527 	.word	0x00020527
   203bc:	0002052f 	.word	0x0002052f
   203c0:	00020537 	.word	0x00020537
   203c4:	00020159 	.word	0x00020159
   203c8:	00020159 	.word	0x00020159
   203cc:	00020159 	.word	0x00020159
   203d0:	00020159 	.word	0x00020159
   203d4:	00020159 	.word	0x00020159
   203d8:	0002053f 	.word	0x0002053f
   203dc:	00020547 	.word	0x00020547
   203e0:	0002054f 	.word	0x0002054f
   203e4:	00020159 	.word	0x00020159
   203e8:	00020159 	.word	0x00020159
   203ec:	00020555 	.word	0x00020555
   203f0:	0002055b 	.word	0x0002055b
   203f4:	00020561 	.word	0x00020561
   203f8:	00020567 	.word	0x00020567
   203fc:	00020159 	.word	0x00020159
   20400:	00020159 	.word	0x00020159
   20404:	0002056f 	.word	0x0002056f
   20408:	00020575 	.word	0x00020575
   2040c:	0002057b 	.word	0x0002057b
   20410:	00020583 	.word	0x00020583
   20414:	0002058b 	.word	0x0002058b
   20418:	00020591 	.word	0x00020591
   2041c:	00020159 	.word	0x00020159
   20420:	00020159 	.word	0x00020159
   20424:	00020159 	.word	0x00020159
   20428:	00020159 	.word	0x00020159
   2042c:	00020159 	.word	0x00020159
   20430:	00020159 	.word	0x00020159
   20434:	00020159 	.word	0x00020159
   20438:	00020159 	.word	0x00020159
   2043c:	00020159 	.word	0x00020159
   20440:	00020159 	.word	0x00020159
   20444:	00020159 	.word	0x00020159
   20448:	00020159 	.word	0x00020159
   2044c:	00020159 	.word	0x00020159
   20450:	00020159 	.word	0x00020159
   20454:	00020159 	.word	0x00020159
   20458:	00020159 	.word	0x00020159
   2045c:	00020159 	.word	0x00020159
   20460:	00020159 	.word	0x00020159
   20464:	00020159 	.word	0x00020159
   20468:	00020159 	.word	0x00020159
   2046c:	00020159 	.word	0x00020159
   20470:	00020159 	.word	0x00020159
   20474:	00020159 	.word	0x00020159
   20478:	00020159 	.word	0x00020159
   2047c:	00020597 	.word	0x00020597
   20480:	00020159 	.word	0x00020159
   20484:	00020159 	.word	0x00020159
   20488:	0002059f 	.word	0x0002059f
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2048c:	f7ec fa3f 	bl	c90e <sdc_hci_cmd_le_set_event_mask>
   20490:	e68b      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   20492:	48a2      	ldr	r0, [pc, #648]	; (2071c <hci_internal_cmd_put+0x620>)
   20494:	f7ec fa19 	bl	c8ca <sdc_hci_cmd_le_read_buffer_size>
   20498:	e69c      	b.n	201d4 <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   2049a:	48a0      	ldr	r0, [pc, #640]	; (2071c <hci_internal_cmd_put+0x620>)
   2049c:	2205      	movs	r2, #5
   2049e:	2100      	movs	r1, #0
   204a0:	f00a fb06 	bl	2aab0 <memset>
	features->le_encryption = 1;
   204a4:	79e3      	ldrb	r3, [r4, #7]
   204a6:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   204aa:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   204ae:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   204b0:	7a23      	ldrb	r3, [r4, #8]
   204b2:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   204b6:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   204ba:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   204bc:	230c      	movs	r3, #12
	switch (hci_opcode) {
   204be:	2000      	movs	r0, #0
   204c0:	e731      	b.n	20326 <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   204c2:	f7ec fa2d 	bl	c920 <sdc_hci_cmd_le_set_random_address>
   204c6:	e670      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   204c8:	f7ec fa1b 	bl	c902 <sdc_hci_cmd_le_set_adv_params>
   204cc:	e66d      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   204ce:	4893      	ldr	r0, [pc, #588]	; (2071c <hci_internal_cmd_put+0x620>)
   204d0:	f7ec f9f9 	bl	c8c6 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   204d4:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   204d6:	e723      	b.n	20320 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   204d8:	f7ec fa0f 	bl	c8fa <sdc_hci_cmd_le_set_adv_data>
   204dc:	e665      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   204de:	f7ec fa23 	bl	c928 <sdc_hci_cmd_le_set_scan_response_data>
   204e2:	e662      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   204e4:	f7ec fa0b 	bl	c8fe <sdc_hci_cmd_le_set_adv_enable>
   204e8:	e65f      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   204ea:	488c      	ldr	r0, [pc, #560]	; (2071c <hci_internal_cmd_put+0x620>)
   204ec:	f7ec f9fd 	bl	c8ea <sdc_hci_cmd_le_read_white_list_size>
   204f0:	e7f0      	b.n	204d4 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   204f2:	f7ec f9da 	bl	c8aa <sdc_hci_cmd_le_clear_white_list>
   204f6:	e658      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   204f8:	f7ec f9d3 	bl	c8a2 <sdc_hci_cmd_le_add_device_to_white_list>
   204fc:	e655      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   204fe:	f7ec f9f8 	bl	c8f2 <sdc_hci_cmd_le_remove_device_from_white_list>
   20502:	e652      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   20504:	4985      	ldr	r1, [pc, #532]	; (2071c <hci_internal_cmd_put+0x620>)
   20506:	f7ec f9e2 	bl	c8ce <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2050a:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2050c:	e708      	b.n	20320 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2050e:	f7ec f9e4 	bl	c8da <sdc_hci_cmd_le_read_remote_features>
   20512:	e625      	b.n	20160 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   20514:	4981      	ldr	r1, [pc, #516]	; (2071c <hci_internal_cmd_put+0x620>)
   20516:	f7ec f9ca 	bl	c8ae <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2051a:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2051c:	e700      	b.n	20320 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2051e:	487f      	ldr	r0, [pc, #508]	; (2071c <hci_internal_cmd_put+0x620>)
   20520:	f7ec f9cf 	bl	c8c2 <sdc_hci_cmd_le_rand>
   20524:	e67d      	b.n	20222 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   20526:	497d      	ldr	r1, [pc, #500]	; (2071c <hci_internal_cmd_put+0x620>)
   20528:	f7ec f9c7 	bl	c8ba <sdc_hci_cmd_le_long_term_key_request_reply>
   2052c:	e64a      	b.n	201c4 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   2052e:	497b      	ldr	r1, [pc, #492]	; (2071c <hci_internal_cmd_put+0x620>)
   20530:	f7ec f9bf 	bl	c8b2 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   20534:	e646      	b.n	201c4 <hci_internal_cmd_put+0xc8>
	*buf = states1;
   20536:	238f      	movs	r3, #143	; 0x8f
   20538:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   2053a:	23c0      	movs	r3, #192	; 0xc0
   2053c:	e6ea      	b.n	20314 <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2053e:	4977      	ldr	r1, [pc, #476]	; (2071c <hci_internal_cmd_put+0x620>)
   20540:	f7ec f9e1 	bl	c906 <sdc_hci_cmd_le_set_data_length>
   20544:	e63e      	b.n	201c4 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   20546:	4875      	ldr	r0, [pc, #468]	; (2071c <hci_internal_cmd_put+0x620>)
   20548:	f7ec f9cb 	bl	c8e2 <sdc_hci_cmd_le_read_suggested_default_data_length>
   2054c:	e64a      	b.n	201e4 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2054e:	f7ec f9ed 	bl	c92c <sdc_hci_cmd_le_write_suggested_default_data_length>
   20552:	e62a      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   20554:	f7ec f9a3 	bl	c89e <sdc_hci_cmd_le_add_device_to_resolving_list>
   20558:	e627      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   2055a:	f7ec f9c8 	bl	c8ee <sdc_hci_cmd_le_remove_device_from_resolving_list>
   2055e:	e624      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   20560:	f7ec f9a1 	bl	c8a6 <sdc_hci_cmd_le_clear_resolving_list>
   20564:	e621      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   20566:	486d      	ldr	r0, [pc, #436]	; (2071c <hci_internal_cmd_put+0x620>)
   20568:	f7ec f9b9 	bl	c8de <sdc_hci_cmd_le_read_resolving_list_size>
   2056c:	e7b2      	b.n	204d4 <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2056e:	f7ec f9c2 	bl	c8f6 <sdc_hci_cmd_le_set_address_resolution_enable>
   20572:	e61a      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   20574:	f7ec f9d6 	bl	c924 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   20578:	e617      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2057a:	4868      	ldr	r0, [pc, #416]	; (2071c <hci_internal_cmd_put+0x620>)
   2057c:	f7ec f9a9 	bl	c8d2 <sdc_hci_cmd_le_read_max_data_length>
   20580:	e64f      	b.n	20222 <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   20582:	4966      	ldr	r1, [pc, #408]	; (2071c <hci_internal_cmd_put+0x620>)
   20584:	f7ec f9a7 	bl	c8d6 <sdc_hci_cmd_le_read_phy>
   20588:	e62c      	b.n	201e4 <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2058a:	f7ec f9be 	bl	c90a <sdc_hci_cmd_le_set_default_phy>
   2058e:	e60c      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   20590:	f7ec f9c2 	bl	c918 <sdc_hci_cmd_le_set_phy>
   20594:	e5e4      	b.n	20160 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   20596:	4861      	ldr	r0, [pc, #388]	; (2071c <hci_internal_cmd_put+0x620>)
   20598:	f7ec f9a5 	bl	c8e6 <sdc_hci_cmd_le_read_transmit_power>
   2059c:	e612      	b.n	201c4 <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2059e:	f7ec f9bd 	bl	c91c <sdc_hci_cmd_le_set_privacy_mode>
   205a2:	e602      	b.n	201aa <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   205a4:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   205a8:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   205aa:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   205ae:	d821      	bhi.n	205f4 <hci_internal_cmd_put+0x4f8>
   205b0:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   205b4:	f43f add0 	beq.w	20158 <hci_internal_cmd_put+0x5c>
   205b8:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   205bc:	3b01      	subs	r3, #1
   205be:	2b09      	cmp	r3, #9
   205c0:	f63f adca 	bhi.w	20158 <hci_internal_cmd_put+0x5c>
   205c4:	a201      	add	r2, pc, #4	; (adr r2, 205cc <hci_internal_cmd_put+0x4d0>)
   205c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   205ca:	bf00      	nop
   205cc:	00020615 	.word	0x00020615
   205d0:	00020643 	.word	0x00020643
   205d4:	00020159 	.word	0x00020159
   205d8:	00020159 	.word	0x00020159
   205dc:	00020159 	.word	0x00020159
   205e0:	00020687 	.word	0x00020687
   205e4:	00020159 	.word	0x00020159
   205e8:	00020159 	.word	0x00020159
   205ec:	00020673 	.word	0x00020673
   205f0:	0002067d 	.word	0x0002067d
   205f4:	f505 7340 	add.w	r3, r5, #768	; 0x300
   205f8:	b29b      	uxth	r3, r3
   205fa:	2b05      	cmp	r3, #5
   205fc:	f63f adac 	bhi.w	20158 <hci_internal_cmd_put+0x5c>
   20600:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   20604:	2b05      	cmp	r3, #5
   20606:	f63f ada7 	bhi.w	20158 <hci_internal_cmd_put+0x5c>
   2060a:	e8df f003 	tbb	[pc, r3]
   2060e:	4c40      	.short	0x4c40
   20610:	5855524f 	.word	0x5855524f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   20614:	4841      	ldr	r0, [pc, #260]	; (2071c <hci_internal_cmd_put+0x620>)
   20616:	f7e3 fdd7 	bl	41c8 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2061a:	2310      	movs	r3, #16
	switch (hci_opcode) {
   2061c:	f242 0219 	movw	r2, #8217	; 0x2019
   20620:	4296      	cmp	r6, r2
   20622:	dc5c      	bgt.n	206de <hci_internal_cmd_put+0x5e2>
   20624:	f242 020c 	movw	r2, #8204	; 0x200c
   20628:	4296      	cmp	r6, r2
   2062a:	dc4b      	bgt.n	206c4 <hci_internal_cmd_put+0x5c8>
   2062c:	f240 4206 	movw	r2, #1030	; 0x406
   20630:	4296      	cmp	r6, r2
   20632:	f43f ad95 	beq.w	20160 <hci_internal_cmd_put+0x64>
   20636:	f240 421d 	movw	r2, #1053	; 0x41d
   2063a:	4296      	cmp	r6, r2
   2063c:	f43f ad90 	beq.w	20160 <hci_internal_cmd_put+0x64>
   20640:	e66e      	b.n	20320 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   20642:	4836      	ldr	r0, [pc, #216]	; (2071c <hci_internal_cmd_put+0x620>)
   20644:	2202      	movs	r2, #2
   20646:	2100      	movs	r1, #0
   20648:	f00a fa32 	bl	2aab0 <memset>
	cmds->read_version_info = 1;
   2064c:	79e3      	ldrb	r3, [r4, #7]
   2064e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   20652:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   20656:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   20658:	7a23      	ldrb	r3, [r4, #8]
   2065a:	f023 0307 	bic.w	r3, r3, #7
   2065e:	f043 0307 	orr.w	r3, r3, #7
   20662:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   20664:	f242 0319 	movw	r3, #8217	; 0x2019
   20668:	429e      	cmp	r6, r3
   2066a:	dd47      	ble.n	206fc <hci_internal_cmd_put+0x600>
   2066c:	f242 0332 	movw	r3, #8242	; 0x2032
   20670:	e04f      	b.n	20712 <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   20672:	482a      	ldr	r0, [pc, #168]	; (2071c <hci_internal_cmd_put+0x620>)
   20674:	f7ec f8be 	bl	c7f4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   20678:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2067a:	e7cf      	b.n	2061c <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2067c:	4827      	ldr	r0, [pc, #156]	; (2071c <hci_internal_cmd_put+0x620>)
   2067e:	f7ec f86c 	bl	c75a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   20682:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   20684:	e7ca      	b.n	2061c <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   20686:	f7ec f904 	bl	c892 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   2068a:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2068c:	e7c6      	b.n	2061c <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   2068e:	4823      	ldr	r0, [pc, #140]	; (2071c <hci_internal_cmd_put+0x620>)
   20690:	2201      	movs	r2, #1
   20692:	2100      	movs	r1, #0
   20694:	f00a fa0c 	bl	2aab0 <memset>
	cmds->read_supported_vs_commands = 1;
   20698:	79e3      	ldrb	r3, [r4, #7]
   2069a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2069e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   206a2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   206a4:	e62a      	b.n	202fc <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   206a6:	f7ec f851 	bl	c74c <sdc_hci_cmd_vs_llpm_mode_set>
   206aa:	e57e      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   206ac:	f7ec f84a 	bl	c744 <sdc_hci_cmd_vs_conn_update>
   206b0:	e57b      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   206b2:	f7ec f83f 	bl	c734 <sdc_hci_cmd_vs_conn_event_extend>
   206b6:	e578      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   206b8:	f7ec f84a 	bl	c750 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   206bc:	e575      	b.n	201aa <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   206be:	f7ec f843 	bl	c748 <sdc_hci_cmd_vs_event_length_set>
   206c2:	e572      	b.n	201aa <hci_internal_cmd_put+0xae>
   206c4:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   206c8:	3a0d      	subs	r2, #13
   206ca:	2101      	movs	r1, #1
   206cc:	b292      	uxth	r2, r2
   206ce:	fa01 f202 	lsl.w	r2, r1, r2
   206d2:	f241 2141 	movw	r1, #4673	; 0x1241
   206d6:	420a      	tst	r2, r1
   206d8:	f43f ae22 	beq.w	20320 <hci_internal_cmd_put+0x224>
   206dc:	e540      	b.n	20160 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   206de:	f242 0232 	movw	r2, #8242	; 0x2032
   206e2:	4296      	cmp	r6, r2
   206e4:	f43f ad3c 	beq.w	20160 <hci_internal_cmd_put+0x64>
   206e8:	f5a5 5201 	sub.w	r2, r5, #8256	; 0x2040
   206ec:	3a03      	subs	r2, #3
   206ee:	2a01      	cmp	r2, #1
   206f0:	f67f ad36 	bls.w	20160 <hci_internal_cmd_put+0x64>
   206f4:	e614      	b.n	20320 <hci_internal_cmd_put+0x224>
		return -NRF_EPERM;
   206f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   206fa:	e53d      	b.n	20178 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   206fc:	f242 030c 	movw	r3, #8204	; 0x200c
   20700:	429e      	cmp	r6, r3
   20702:	f73f adfb 	bgt.w	202fc <hci_internal_cmd_put+0x200>
   20706:	f240 4306 	movw	r3, #1030	; 0x406
   2070a:	429e      	cmp	r6, r3
   2070c:	d004      	beq.n	20718 <hci_internal_cmd_put+0x61c>
   2070e:	f240 431d 	movw	r3, #1053	; 0x41d
   20712:	429e      	cmp	r6, r3
   20714:	f47f adf2 	bne.w	202fc <hci_internal_cmd_put+0x200>
   20718:	2000      	movs	r0, #0
   2071a:	e521      	b.n	20160 <hci_internal_cmd_put+0x64>
   2071c:	20003e6e 	.word	0x20003e6e

00020720 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   20720:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   20722:	4c07      	ldr	r4, [pc, #28]	; (20740 <hci_internal_evt_get+0x20>)
   20724:	7823      	ldrb	r3, [r4, #0]
   20726:	b13b      	cbz	r3, 20738 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   20728:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   2072a:	1c61      	adds	r1, r4, #1
   2072c:	3202      	adds	r2, #2
   2072e:	f00a f9b4 	bl	2aa9a <memcpy>
		cmd_complete_or_status.occurred = false;
   20732:	2000      	movs	r0, #0
   20734:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   20736:	bd10      	pop	{r4, pc}
   20738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   2073c:	f7eb bfdd 	b.w	c6fa <sdc_hci_evt_get>
   20740:	20003e67 	.word	0x20003e67

00020744 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   20744:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   20746:	b570      	push	{r4, r5, r6, lr}
   20748:	4604      	mov	r4, r0
   2074a:	460d      	mov	r5, r1
   2074c:	f101 0610 	add.w	r6, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   20750:	d919      	bls.n	20786 <sys_memcpy_swap.constprop.0+0x42>
   20752:	42b0      	cmp	r0, r6
   20754:	d20e      	bcs.n	20774 <sys_memcpy_swap.constprop.0+0x30>
   20756:	490e      	ldr	r1, [pc, #56]	; (20790 <sys_memcpy_swap.constprop.0+0x4c>)
   20758:	4a0e      	ldr	r2, [pc, #56]	; (20794 <sys_memcpy_swap.constprop.0+0x50>)
   2075a:	480f      	ldr	r0, [pc, #60]	; (20798 <sys_memcpy_swap.constprop.0+0x54>)
   2075c:	f240 2317 	movw	r3, #535	; 0x217
   20760:	f008 f806 	bl	28770 <printk>
   20764:	480d      	ldr	r0, [pc, #52]	; (2079c <sys_memcpy_swap.constprop.0+0x58>)
   20766:	f008 f803 	bl	28770 <printk>
   2076a:	480a      	ldr	r0, [pc, #40]	; (20794 <sys_memcpy_swap.constprop.0+0x50>)
   2076c:	f240 2117 	movw	r1, #535	; 0x217
   20770:	f008 f9ef 	bl	28b52 <assert_post_action>
	for (; length > 0; length--) {
   20774:	4633      	mov	r3, r6
   20776:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   20778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2077c:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   20780:	42ab      	cmp	r3, r5
   20782:	d1f9      	bne.n	20778 <sys_memcpy_swap.constprop.0+0x34>
}
   20784:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   20786:	d0e6      	beq.n	20756 <sys_memcpy_swap.constprop.0+0x12>
   20788:	f100 0310 	add.w	r3, r0, #16
   2078c:	4299      	cmp	r1, r3
   2078e:	e7e1      	b.n	20754 <sys_memcpy_swap.constprop.0+0x10>
   20790:	0002fc16 	.word	0x0002fc16
   20794:	0002fbeb 	.word	0x0002fbeb
   20798:	0002e915 	.word	0x0002e915
   2079c:	0002fc6d 	.word	0x0002fc6d

000207a0 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   207a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   207a4:	4e14      	ldr	r6, [pc, #80]	; (207f8 <bt_rand+0x58>)
   207a6:	6833      	ldr	r3, [r6, #0]
{
   207a8:	4605      	mov	r5, r0
   207aa:	460c      	mov	r4, r1
   207ac:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   207ae:	b1c3      	cbz	r3, 207e2 <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   207b0:	683e      	ldr	r6, [r7, #0]
   207b2:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   207b4:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   207b6:	683b      	ldr	r3, [r7, #0]
   207b8:	b963      	cbnz	r3, 207d4 <bt_rand+0x34>
   207ba:	4910      	ldr	r1, [pc, #64]	; (207fc <bt_rand+0x5c>)
   207bc:	4a10      	ldr	r2, [pc, #64]	; (20800 <bt_rand+0x60>)
   207be:	4811      	ldr	r0, [pc, #68]	; (20804 <bt_rand+0x64>)
   207c0:	234b      	movs	r3, #75	; 0x4b
   207c2:	f007 ffd5 	bl	28770 <printk>
   207c6:	4810      	ldr	r0, [pc, #64]	; (20808 <bt_rand+0x68>)
   207c8:	f007 ffd2 	bl	28770 <printk>
   207cc:	480c      	ldr	r0, [pc, #48]	; (20800 <bt_rand+0x60>)
   207ce:	214b      	movs	r1, #75	; 0x4b
   207d0:	f008 f9bf 	bl	28b52 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   207d4:	683b      	ldr	r3, [r7, #0]
   207d6:	4622      	mov	r2, r4
   207d8:	4629      	mov	r1, r5
   207da:	4630      	mov	r0, r6
}
   207dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   207e0:	4718      	bx	r3
   207e2:	480a      	ldr	r0, [pc, #40]	; (2080c <bt_rand+0x6c>)
   207e4:	f001 f8d0 	bl	21988 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   207e8:	6030      	str	r0, [r6, #0]
		if (!dev) {
   207ea:	2800      	cmp	r0, #0
   207ec:	d1e0      	bne.n	207b0 <bt_rand+0x10>
}
   207ee:	f06f 0012 	mvn.w	r0, #18
   207f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207f6:	bf00      	nop
   207f8:	20002be4 	.word	0x20002be4
   207fc:	00031c57 	.word	0x00031c57
   20800:	00031c2a 	.word	0x00031c2a
   20804:	0002e915 	.word	0x0002e915
   20808:	00031c77 	.word	0x00031c77
   2080c:	00031b6c 	.word	0x00031b6c

00020810 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   20810:	b538      	push	{r3, r4, r5, lr}
   20812:	4b0b      	ldr	r3, [pc, #44]	; (20840 <m_assert_handler+0x30>)
   20814:	4c0b      	ldr	r4, [pc, #44]	; (20844 <m_assert_handler+0x34>)
   20816:	1ae4      	subs	r4, r4, r3
   20818:	460d      	mov	r5, r1
   2081a:	08e4      	lsrs	r4, r4, #3
   2081c:	f7f1 fdc0 	bl	123a0 <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   20820:	01a4      	lsls	r4, r4, #6
   20822:	f044 0401 	orr.w	r4, r4, #1
   20826:	4601      	mov	r1, r0
   20828:	4623      	mov	r3, r4
   2082a:	4807      	ldr	r0, [pc, #28]	; (20848 <m_assert_handler+0x38>)
   2082c:	462a      	mov	r2, r5
   2082e:	f008 f9df 	bl	28bf0 <log_2>
	k_oops();
   20832:	4040      	eors	r0, r0
   20834:	f380 8811 	msr	BASEPRI, r0
   20838:	f04f 0003 	mov.w	r0, #3
   2083c:	df02      	svc	2
}
   2083e:	bd38      	pop	{r3, r4, r5, pc}
   20840:	0002d948 	.word	0x0002d948
   20844:	0002d9f8 	.word	0x0002d9f8
   20848:	00031ea6 	.word	0x00031ea6

0002084c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   2084c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2084e:	2332      	movs	r3, #50	; 0x32
   20850:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   20854:	4a13      	ldr	r2, [pc, #76]	; (208a4 <mpsl_lib_init+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   20856:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   20858:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2085a:	2119      	movs	r1, #25
   2085c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   2085e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   20862:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   20866:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2086a:	f7e3 f867 	bl	393c <mpsl_init>
	if (err) {
   2086e:	4604      	mov	r4, r0
   20870:	b9a0      	cbnz	r0, 2089c <mpsl_lib_init+0x50>
		return err;
	}

#if MPSL_TIMESLOT_SESSION_COUNT > 0
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   20872:	480d      	ldr	r0, [pc, #52]	; (208a8 <mpsl_lib_init+0x5c>)
   20874:	4629      	mov	r1, r5
   20876:	f7eb f9b8 	bl	bbea <mpsl_timeslot_session_count_set>
			MPSL_TIMESLOT_SESSION_COUNT);
	if (err) {
   2087a:	4604      	mov	r4, r0
   2087c:	b970      	cbnz	r0, 2089c <mpsl_lib_init+0x50>
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2087e:	4601      	mov	r1, r0
   20880:	462a      	mov	r2, r5
   20882:	2008      	movs	r0, #8
   20884:	f7f3 fe30 	bl	144e8 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20888:	462a      	mov	r2, r5
   2088a:	4621      	mov	r1, r4
   2088c:	200b      	movs	r0, #11
   2088e:	f7f3 fe2b 	bl	144e8 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   20892:	462a      	mov	r2, r5
   20894:	4621      	mov	r1, r4
   20896:	4628      	mov	r0, r5
   20898:	f7f3 fe26 	bl	144e8 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   2089c:	4620      	mov	r0, r4
   2089e:	b003      	add	sp, #12
   208a0:	bd30      	pop	{r4, r5, pc}
   208a2:	bf00      	nop
   208a4:	00020811 	.word	0x00020811
   208a8:	20002be8 	.word	0x20002be8

000208ac <mpsl_low_prio_irq_handler>:
   208ac:	4801      	ldr	r0, [pc, #4]	; (208b4 <mpsl_low_prio_irq_handler+0x8>)
   208ae:	f002 b8d3 	b.w	22a58 <z_impl_k_sem_give>
   208b2:	bf00      	nop
   208b4:	2000093c 	.word	0x2000093c

000208b8 <signal_thread>:
{
   208b8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   208ba:	4d0f      	ldr	r5, [pc, #60]	; (208f8 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   208bc:	4c0f      	ldr	r4, [pc, #60]	; (208fc <signal_thread+0x44>)
   208be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   208c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   208c6:	4628      	mov	r0, r5
   208c8:	f002 f90a 	bl	22ae0 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   208cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   208d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   208d4:	f7ff f980 	bl	1fbd8 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   208d8:	b148      	cbz	r0, 208ee <signal_thread+0x36>
   208da:	4909      	ldr	r1, [pc, #36]	; (20900 <signal_thread+0x48>)
   208dc:	4809      	ldr	r0, [pc, #36]	; (20904 <signal_thread+0x4c>)
   208de:	2346      	movs	r3, #70	; 0x46
   208e0:	4622      	mov	r2, r4
   208e2:	f007 ff45 	bl	28770 <printk>
   208e6:	2146      	movs	r1, #70	; 0x46
   208e8:	4620      	mov	r0, r4
   208ea:	f008 f932 	bl	28b52 <assert_post_action>
		mpsl_low_priority_process();
   208ee:	f7eb fa93 	bl	be18 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   208f2:	f7ff f979 	bl	1fbe8 <multithreading_lock_release>
	while (true) {
   208f6:	e7e2      	b.n	208be <signal_thread+0x6>
   208f8:	2000093c 	.word	0x2000093c
   208fc:	00031eba 	.word	0x00031eba
   20900:	00031ee7 	.word	0x00031ee7
   20904:	0002e915 	.word	0x0002e915

00020908 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   20908:	b530      	push	{r4, r5, lr}
   2090a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2090c:	4d0f      	ldr	r5, [pc, #60]	; (2094c <mpsl_signal_thread_init+0x44>)
   2090e:	4910      	ldr	r1, [pc, #64]	; (20950 <mpsl_signal_thread_init+0x48>)
   20910:	2200      	movs	r2, #0
   20912:	2300      	movs	r3, #0
   20914:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20918:	2400      	movs	r4, #0
   2091a:	f06f 0309 	mvn.w	r3, #9
   2091e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   20922:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20926:	4b0b      	ldr	r3, [pc, #44]	; (20954 <mpsl_signal_thread_init+0x4c>)
   20928:	9400      	str	r4, [sp, #0]
   2092a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2092e:	4628      	mov	r0, r5
   20930:	f001 fc36 	bl	221a0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   20934:	4908      	ldr	r1, [pc, #32]	; (20958 <mpsl_signal_thread_init+0x50>)
   20936:	4628      	mov	r0, r5
   20938:	f00c fca8 	bl	2d28c <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2093c:	4622      	mov	r2, r4
   2093e:	2104      	movs	r1, #4
   20940:	2019      	movs	r0, #25
   20942:	f7f3 fdd1 	bl	144e8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   20946:	4620      	mov	r0, r4
   20948:	b009      	add	sp, #36	; 0x24
   2094a:	bd30      	pop	{r4, r5, pc}
   2094c:	200020f8 	.word	0x200020f8
   20950:	20006360 	.word	0x20006360
   20954:	000208b9 	.word	0x000208b9
   20958:	00031ef4 	.word	0x00031ef4

0002095c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2095c:	4b01      	ldr	r3, [pc, #4]	; (20964 <mpsl_hfclk_callback+0x8>)
   2095e:	2000      	movs	r0, #0
   20960:	681b      	ldr	r3, [r3, #0]
   20962:	4718      	bx	r3
   20964:	20002c0c 	.word	0x20002c0c

00020968 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   20968:	b510      	push	{r4, lr}
	switch (domain) {
   2096a:	b130      	cbz	r0, 2097a <nrfx_clock_start+0x12>
   2096c:	2801      	cmp	r0, #1
   2096e:	d10a      	bne.n	20986 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   20970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   20974:	480b      	ldr	r0, [pc, #44]	; (209a4 <nrfx_clock_start+0x3c>)
   20976:	f7e2 be2d 	b.w	35d4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2097a:	4b0b      	ldr	r3, [pc, #44]	; (209a8 <nrfx_clock_start+0x40>)
}
   2097c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   20980:	681b      	ldr	r3, [r3, #0]
   20982:	2001      	movs	r0, #1
   20984:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   20986:	4909      	ldr	r1, [pc, #36]	; (209ac <nrfx_clock_start+0x44>)
   20988:	4a09      	ldr	r2, [pc, #36]	; (209b0 <nrfx_clock_start+0x48>)
   2098a:	480a      	ldr	r0, [pc, #40]	; (209b4 <nrfx_clock_start+0x4c>)
   2098c:	231c      	movs	r3, #28
   2098e:	f007 feef 	bl	28770 <printk>
   20992:	4809      	ldr	r0, [pc, #36]	; (209b8 <nrfx_clock_start+0x50>)
   20994:	f007 feec 	bl	28770 <printk>
}
   20998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   2099c:	4804      	ldr	r0, [pc, #16]	; (209b0 <nrfx_clock_start+0x48>)
   2099e:	211c      	movs	r1, #28
   209a0:	f008 b8d7 	b.w	28b52 <assert_post_action>
   209a4:	0002095d 	.word	0x0002095d
   209a8:	20002c0c 	.word	0x20002c0c
   209ac:	00032bb3 	.word	0x00032bb3
   209b0:	00031f0a 	.word	0x00031f0a
   209b4:	0002e915 	.word	0x0002e915
   209b8:	00031f47 	.word	0x00031f47

000209bc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   209bc:	b508      	push	{r3, lr}
	switch (domain) {
   209be:	b1a0      	cbz	r0, 209ea <nrfx_clock_stop+0x2e>
   209c0:	2801      	cmp	r0, #1
   209c2:	d103      	bne.n	209cc <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   209c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   209c8:	f7e2 bdf6 	b.w	35b8 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   209cc:	4907      	ldr	r1, [pc, #28]	; (209ec <nrfx_clock_stop+0x30>)
   209ce:	4a08      	ldr	r2, [pc, #32]	; (209f0 <nrfx_clock_stop+0x34>)
   209d0:	4808      	ldr	r0, [pc, #32]	; (209f4 <nrfx_clock_stop+0x38>)
   209d2:	232a      	movs	r3, #42	; 0x2a
   209d4:	f007 fecc 	bl	28770 <printk>
   209d8:	4807      	ldr	r0, [pc, #28]	; (209f8 <nrfx_clock_stop+0x3c>)
   209da:	f007 fec9 	bl	28770 <printk>
}
   209de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   209e2:	4803      	ldr	r0, [pc, #12]	; (209f0 <nrfx_clock_stop+0x34>)
   209e4:	212a      	movs	r1, #42	; 0x2a
   209e6:	f008 b8b4 	b.w	28b52 <assert_post_action>
}
   209ea:	bd08      	pop	{r3, pc}
   209ec:	00032bb3 	.word	0x00032bb3
   209f0:	00031f0a 	.word	0x00031f0a
   209f4:	0002e915 	.word	0x0002e915
   209f8:	00031f47 	.word	0x00031f47

000209fc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   209fc:	4b01      	ldr	r3, [pc, #4]	; (20a04 <nrfx_clock_init+0x8>)
   209fe:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   20a00:	4801      	ldr	r0, [pc, #4]	; (20a08 <nrfx_clock_init+0xc>)
   20a02:	4770      	bx	lr
   20a04:	20002c0c 	.word	0x20002c0c
   20a08:	0bad0000 	.word	0x0bad0000

00020a0c <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   20a0c:	b538      	push	{r3, r4, r5, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   20a0e:	4d37      	ldr	r5, [pc, #220]	; (20aec <timeslot_callback+0xe0>)
   20a10:	7e2b      	ldrb	r3, [r5, #24]
   20a12:	4283      	cmp	r3, r0
{
   20a14:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(session_id == _context.session_id);
   20a16:	d009      	beq.n	20a2c <timeslot_callback+0x20>
   20a18:	4935      	ldr	r1, [pc, #212]	; (20af0 <timeslot_callback+0xe4>)
   20a1a:	4836      	ldr	r0, [pc, #216]	; (20af4 <timeslot_callback+0xe8>)
   20a1c:	4a36      	ldr	r2, [pc, #216]	; (20af8 <timeslot_callback+0xec>)
   20a1e:	234c      	movs	r3, #76	; 0x4c
   20a20:	f007 fea6 	bl	28770 <printk>
   20a24:	4834      	ldr	r0, [pc, #208]	; (20af8 <timeslot_callback+0xec>)
   20a26:	214c      	movs	r1, #76	; 0x4c
   20a28:	f008 f893 	bl	28b52 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20a2c:	f3bf 8f5b 	dmb	ish
   20a30:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   20a32:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   20a36:	b10b      	cbz	r3, 20a3c <timeslot_callback+0x30>
   20a38:	2000      	movs	r0, #0
   20a3a:	e024      	b.n	20a86 <timeslot_callback+0x7a>
		return NULL;
	}

	switch (signal) {
   20a3c:	2c09      	cmp	r4, #9
   20a3e:	d849      	bhi.n	20ad4 <timeslot_callback+0xc8>
   20a40:	a301      	add	r3, pc, #4	; (adr r3, 20a48 <timeslot_callback+0x3c>)
   20a42:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   20a46:	bf00      	nop
   20a48:	00020a71 	.word	0x00020a71
   20a4c:	00020ad5 	.word	0x00020ad5
   20a50:	00020ad5 	.word	0x00020ad5
   20a54:	00020ad5 	.word	0x00020ad5
   20a58:	00020ad5 	.word	0x00020ad5
   20a5c:	00020aa3 	.word	0x00020aa3
   20a60:	00020aa3 	.word	0x00020aa3
   20a64:	00020a9b 	.word	0x00020a9b
   20a68:	00020ad5 	.word	0x00020ad5
   20a6c:	00020a39 	.word	0x00020a39
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   20a70:	6a2b      	ldr	r3, [r5, #32]
   20a72:	e9d3 2000 	ldrd	r2, r0, [r3]
   20a76:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   20a78:	2801      	cmp	r0, #1
   20a7a:	d005      	beq.n	20a88 <timeslot_callback+0x7c>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   20a7c:	63e8      	str	r0, [r5, #60]	; 0x3c
			_context.return_param.callback_action =
   20a7e:	2302      	movs	r3, #2
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   20a80:	481e      	ldr	r0, [pc, #120]	; (20afc <timeslot_callback+0xf0>)
			_context.return_param.callback_action =
   20a82:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
   20a86:	bd38      	pop	{r3, r4, r5, pc}
			_context.timeslot_request.params.earliest.priority =
   20a88:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
			_context.return_param.params.request.p_next =
   20a8c:	481c      	ldr	r0, [pc, #112]	; (20b00 <timeslot_callback+0xf4>)
   20a8e:	63a8      	str	r0, [r5, #56]	; 0x38
			_context.return_param.callback_action =
   20a90:	2303      	movs	r3, #3
   20a92:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	return &_context.return_param;
   20a96:	3010      	adds	r0, #16
   20a98:	e7f5      	b.n	20a86 <timeslot_callback+0x7a>
	z_impl_k_sem_give(sem);
   20a9a:	4814      	ldr	r0, [pc, #80]	; (20aec <timeslot_callback+0xe0>)
   20a9c:	f001 ffdc 	bl	22a58 <z_impl_k_sem_give>
   20aa0:	e7ca      	b.n	20a38 <timeslot_callback+0x2c>
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20aa2:	7e28      	ldrb	r0, [r5, #24]
   20aa4:	4916      	ldr	r1, [pc, #88]	; (20b00 <timeslot_callback+0xf4>)
	_context.timeslot_request.params.earliest.priority =
   20aa6:	2400      	movs	r4, #0
   20aa8:	f885 4029 	strb.w	r4, [r5, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   20aac:	f7eb f846 	bl	bb3c <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20ab0:	4605      	mov	r5, r0
   20ab2:	2800      	cmp	r0, #0
   20ab4:	d0c0      	beq.n	20a38 <timeslot_callback+0x2c>
   20ab6:	4a10      	ldr	r2, [pc, #64]	; (20af8 <timeslot_callback+0xec>)
   20ab8:	4912      	ldr	r1, [pc, #72]	; (20b04 <timeslot_callback+0xf8>)
   20aba:	480e      	ldr	r0, [pc, #56]	; (20af4 <timeslot_callback+0xe8>)
   20abc:	2344      	movs	r3, #68	; 0x44
   20abe:	f007 fe57 	bl	28770 <printk>
   20ac2:	4629      	mov	r1, r5
   20ac4:	4810      	ldr	r0, [pc, #64]	; (20b08 <timeslot_callback+0xfc>)
   20ac6:	f007 fe53 	bl	28770 <printk>
   20aca:	2144      	movs	r1, #68	; 0x44
		__ASSERT(false, "unexpected signal: %u", signal);
   20acc:	480a      	ldr	r0, [pc, #40]	; (20af8 <timeslot_callback+0xec>)
   20ace:	f008 f840 	bl	28b52 <assert_post_action>
		return NULL;
   20ad2:	e7b1      	b.n	20a38 <timeslot_callback+0x2c>
		__ASSERT(false, "unexpected signal: %u", signal);
   20ad4:	4a08      	ldr	r2, [pc, #32]	; (20af8 <timeslot_callback+0xec>)
   20ad6:	490d      	ldr	r1, [pc, #52]	; (20b0c <timeslot_callback+0x100>)
   20ad8:	4806      	ldr	r0, [pc, #24]	; (20af4 <timeslot_callback+0xe8>)
   20ada:	2376      	movs	r3, #118	; 0x76
   20adc:	f007 fe48 	bl	28770 <printk>
   20ae0:	4621      	mov	r1, r4
   20ae2:	480b      	ldr	r0, [pc, #44]	; (20b10 <timeslot_callback+0x104>)
   20ae4:	f007 fe44 	bl	28770 <printk>
   20ae8:	2176      	movs	r1, #118	; 0x76
   20aea:	e7ef      	b.n	20acc <timeslot_callback+0xc0>
   20aec:	20002c10 	.word	0x20002c10
   20af0:	00031f91 	.word	0x00031f91
   20af4:	0002e915 	.word	0x0002e915
   20af8:	00031f57 	.word	0x00031f57
   20afc:	20002c44 	.word	0x20002c44
   20b00:	20002c34 	.word	0x20002c34
   20b04:	00031fb3 	.word	0x00031fb3
   20b08:	00031fbc 	.word	0x00031fbc
   20b0c:	00032bb3 	.word	0x00032bb3
   20b10:	00031fdf 	.word	0x00031fdf

00020b14 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   20b14:	4802      	ldr	r0, [pc, #8]	; (20b20 <nrf_flash_sync_init+0xc>)
   20b16:	2201      	movs	r2, #1
   20b18:	2100      	movs	r1, #0
   20b1a:	f00c bbfa 	b.w	2d312 <z_impl_k_sem_init>
   20b1e:	bf00      	nop
   20b20:	20002c10 	.word	0x20002c10

00020b24 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   20b24:	4b01      	ldr	r3, [pc, #4]	; (20b2c <nrf_flash_sync_set_context+0x8>)
   20b26:	61d8      	str	r0, [r3, #28]
}
   20b28:	4770      	bx	lr
   20b2a:	bf00      	nop
   20b2c:	20002c10 	.word	0x20002c10

00020b30 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   20b30:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20b32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   20b36:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   20b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20b3c:	f7ff f84c 	bl	1fbd8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20b40:	b148      	cbz	r0, 20b56 <nrf_flash_sync_exe+0x26>
   20b42:	4957      	ldr	r1, [pc, #348]	; (20ca0 <nrf_flash_sync_exe+0x170>)
   20b44:	4857      	ldr	r0, [pc, #348]	; (20ca4 <nrf_flash_sync_exe+0x174>)
   20b46:	4a58      	ldr	r2, [pc, #352]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20b48:	2393      	movs	r3, #147	; 0x93
   20b4a:	f007 fe11 	bl	28770 <printk>
   20b4e:	4856      	ldr	r0, [pc, #344]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20b50:	2193      	movs	r1, #147	; 0x93
   20b52:	f007 fffe 	bl	28b52 <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   20b56:	4c55      	ldr	r4, [pc, #340]	; (20cac <nrf_flash_sync_exe+0x17c>)
   20b58:	4855      	ldr	r0, [pc, #340]	; (20cb0 <nrf_flash_sync_exe+0x180>)
   20b5a:	f104 0118 	add.w	r1, r4, #24
   20b5e:	f7df fc9f 	bl	4a0 <mpsl_timeslot_session_open>
   20b62:	4605      	mov	r5, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   20b64:	f7ff f840 	bl	1fbe8 <multithreading_lock_release>

	if (ret < 0) {
   20b68:	2d00      	cmp	r5, #0
   20b6a:	da0d      	bge.n	20b88 <nrf_flash_sync_exe+0x58>
   20b6c:	4b51      	ldr	r3, [pc, #324]	; (20cb4 <nrf_flash_sync_exe+0x184>)
   20b6e:	4a52      	ldr	r2, [pc, #328]	; (20cb8 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   20b70:	4852      	ldr	r0, [pc, #328]	; (20cbc <nrf_flash_sync_exe+0x18c>)
   20b72:	1ad2      	subs	r2, r2, r3
   20b74:	08d2      	lsrs	r2, r2, #3
   20b76:	0192      	lsls	r2, r2, #6
   20b78:	f042 0201 	orr.w	r2, r2, #1
   20b7c:	4629      	mov	r1, r5
   20b7e:	f008 f823 	bl	28bc8 <log_1>
		return -ENOMEM;
   20b82:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   20b86:	bd70      	pop	{r4, r5, r6, pc}
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   20b88:	f240 1301 	movw	r3, #257	; 0x101
   20b8c:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   20b8e:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   20b90:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   20b92:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   20b94:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = MPSL_TIMESLOT_EARLIEST_TIMEOUT_MAX_US;
   20b96:	4b4a      	ldr	r3, [pc, #296]	; (20cc0 <nrf_flash_sync_exe+0x190>)
   20b98:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20b9a:	2200      	movs	r2, #0
	_context.status = -ETIMEDOUT;
   20b9c:	f06f 0373 	mvn.w	r3, #115	; 0x73
   20ba0:	63e3      	str	r3, [r4, #60]	; 0x3c
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   20ba2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20ba6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   20baa:	f3bf 8f5b 	dmb	ish
   20bae:	e853 1f00 	ldrex	r1, [r3]
   20bb2:	e843 2000 	strex	r0, r2, [r3]
   20bb6:	2800      	cmp	r0, #0
   20bb8:	d1f9      	bne.n	20bae <nrf_flash_sync_exe+0x7e>
   20bba:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   20bbe:	68a2      	ldr	r2, [r4, #8]
   20bc0:	461e      	mov	r6, r3
   20bc2:	b14a      	cbz	r2, 20bd8 <nrf_flash_sync_exe+0xa8>
   20bc4:	493f      	ldr	r1, [pc, #252]	; (20cc4 <nrf_flash_sync_exe+0x194>)
   20bc6:	4837      	ldr	r0, [pc, #220]	; (20ca4 <nrf_flash_sync_exe+0x174>)
   20bc8:	4a37      	ldr	r2, [pc, #220]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20bca:	23a9      	movs	r3, #169	; 0xa9
   20bcc:	f007 fdd0 	bl	28770 <printk>
   20bd0:	4835      	ldr	r0, [pc, #212]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20bd2:	21a9      	movs	r1, #169	; 0xa9
   20bd4:	f007 ffbd 	bl	28b52 <assert_post_action>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20be0:	f7fe fffa 	bl	1fbd8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20be4:	b148      	cbz	r0, 20bfa <nrf_flash_sync_exe+0xca>
   20be6:	492e      	ldr	r1, [pc, #184]	; (20ca0 <nrf_flash_sync_exe+0x170>)
   20be8:	482e      	ldr	r0, [pc, #184]	; (20ca4 <nrf_flash_sync_exe+0x174>)
   20bea:	4a2f      	ldr	r2, [pc, #188]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20bec:	23ac      	movs	r3, #172	; 0xac
   20bee:	f007 fdbf 	bl	28770 <printk>
   20bf2:	482d      	ldr	r0, [pc, #180]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20bf4:	21ac      	movs	r1, #172	; 0xac
   20bf6:	f007 ffac 	bl	28b52 <assert_post_action>
	ret = mpsl_timeslot_request(_context.session_id, req);
   20bfa:	4933      	ldr	r1, [pc, #204]	; (20cc8 <nrf_flash_sync_exe+0x198>)
   20bfc:	7e20      	ldrb	r0, [r4, #24]
   20bfe:	f7ea ff9d 	bl	bb3c <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   20c02:	4605      	mov	r5, r0
   20c04:	b168      	cbz	r0, 20c22 <nrf_flash_sync_exe+0xf2>
   20c06:	4a28      	ldr	r2, [pc, #160]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20c08:	4930      	ldr	r1, [pc, #192]	; (20ccc <nrf_flash_sync_exe+0x19c>)
   20c0a:	4826      	ldr	r0, [pc, #152]	; (20ca4 <nrf_flash_sync_exe+0x174>)
   20c0c:	23ae      	movs	r3, #174	; 0xae
   20c0e:	f007 fdaf 	bl	28770 <printk>
   20c12:	482f      	ldr	r0, [pc, #188]	; (20cd0 <nrf_flash_sync_exe+0x1a0>)
   20c14:	4629      	mov	r1, r5
   20c16:	f007 fdab 	bl	28770 <printk>
   20c1a:	4823      	ldr	r0, [pc, #140]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20c1c:	21ae      	movs	r1, #174	; 0xae
   20c1e:	f007 ff98 	bl	28b52 <assert_post_action>
	MULTITHREADING_LOCK_RELEASE();
   20c22:	f7fe ffe1 	bl	1fbe8 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   20c26:	4a2b      	ldr	r2, [pc, #172]	; (20cd4 <nrf_flash_sync_exe+0x1a4>)
   20c28:	4820      	ldr	r0, [pc, #128]	; (20cac <nrf_flash_sync_exe+0x17c>)
   20c2a:	2300      	movs	r3, #0
   20c2c:	f001 ff58 	bl	22ae0 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   20c30:	2800      	cmp	r0, #0
   20c32:	da14      	bge.n	20c5e <nrf_flash_sync_exe+0x12e>
   20c34:	4b1f      	ldr	r3, [pc, #124]	; (20cb4 <nrf_flash_sync_exe+0x184>)
   20c36:	4920      	ldr	r1, [pc, #128]	; (20cb8 <nrf_flash_sync_exe+0x188>)
		LOG_ERR("timeout");
   20c38:	4827      	ldr	r0, [pc, #156]	; (20cd8 <nrf_flash_sync_exe+0x1a8>)
   20c3a:	1ac9      	subs	r1, r1, r3
   20c3c:	08c9      	lsrs	r1, r1, #3
   20c3e:	0189      	lsls	r1, r1, #6
   20c40:	f041 0101 	orr.w	r1, r1, #1
   20c44:	f007 ffb3 	bl	28bae <log_0>
   20c48:	f3bf 8f5b 	dmb	ish
   20c4c:	2301      	movs	r3, #1
   20c4e:	e856 2f00 	ldrex	r2, [r6]
   20c52:	e846 3100 	strex	r1, r3, [r6]
   20c56:	2900      	cmp	r1, #0
   20c58:	d1f9      	bne.n	20c4e <nrf_flash_sync_exe+0x11e>
   20c5a:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20c62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20c66:	f7fe ffb7 	bl	1fbd8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   20c6a:	b148      	cbz	r0, 20c80 <nrf_flash_sync_exe+0x150>
   20c6c:	490c      	ldr	r1, [pc, #48]	; (20ca0 <nrf_flash_sync_exe+0x170>)
   20c6e:	480d      	ldr	r0, [pc, #52]	; (20ca4 <nrf_flash_sync_exe+0x174>)
   20c70:	4a0d      	ldr	r2, [pc, #52]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20c72:	23b9      	movs	r3, #185	; 0xb9
   20c74:	f007 fd7c 	bl	28770 <printk>
   20c78:	480b      	ldr	r0, [pc, #44]	; (20ca8 <nrf_flash_sync_exe+0x178>)
   20c7a:	21b9      	movs	r1, #185	; 0xb9
   20c7c:	f007 ff69 	bl	28b52 <assert_post_action>
	mpsl_timeslot_session_close(_context.session_id);
   20c80:	7e20      	ldrb	r0, [r4, #24]
   20c82:	f7ea ff94 	bl	bbae <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   20c86:	f7fe ffaf 	bl	1fbe8 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20c8a:	f3bf 8f5b 	dmb	ish
   20c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   20c90:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   20c94:	b113      	cbz	r3, 20c9c <nrf_flash_sync_exe+0x16c>
	z_impl_k_sem_reset(sem);
   20c96:	4805      	ldr	r0, [pc, #20]	; (20cac <nrf_flash_sync_exe+0x17c>)
   20c98:	f001 ffac 	bl	22bf4 <z_impl_k_sem_reset>
	return _context.status;
   20c9c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   20c9e:	e772      	b.n	20b86 <nrf_flash_sync_exe+0x56>
   20ca0:	00031ee7 	.word	0x00031ee7
   20ca4:	0002e915 	.word	0x0002e915
   20ca8:	00031f57 	.word	0x00031f57
   20cac:	20002c10 	.word	0x20002c10
   20cb0:	00020a0d 	.word	0x00020a0d
   20cb4:	0002d948 	.word	0x0002d948
   20cb8:	0002d9e0 	.word	0x0002d9e0
   20cbc:	00031ff7 	.word	0x00031ff7
   20cc0:	07a11fff 	.word	0x07a11fff
   20cc4:	0003201d 	.word	0x0003201d
   20cc8:	20002c34 	.word	0x20002c34
   20ccc:	00031fb3 	.word	0x00031fb3
   20cd0:	00031fbc 	.word	0x00031fbc
   20cd4:	000b7b44 	.word	0x000b7b44
   20cd8:	00030b25 	.word	0x00030b25

00020cdc <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20cdc:	4b07      	ldr	r3, [pc, #28]	; (20cfc <nrf_flash_sync_check_time_limit+0x20>)
   20cde:	2201      	movs	r2, #1
   20ce0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   20ce2:	3b40      	subs	r3, #64	; 0x40
   20ce4:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   20ce8:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   20cec:	4418      	add	r0, r3
   20cee:	4b04      	ldr	r3, [pc, #16]	; (20d00 <nrf_flash_sync_check_time_limit+0x24>)
   20cf0:	69db      	ldr	r3, [r3, #28]
}
   20cf2:	4298      	cmp	r0, r3
   20cf4:	bf34      	ite	cc
   20cf6:	2000      	movcc	r0, #0
   20cf8:	2001      	movcs	r0, #1
   20cfa:	4770      	bx	lr
   20cfc:	40008040 	.word	0x40008040
   20d00:	20002c10 	.word	0x20002c10

00020d04 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20d04:	4b03      	ldr	r3, [pc, #12]	; (20d14 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   20d06:	6818      	ldr	r0, [r3, #0]
}
   20d08:	f1a0 0308 	sub.w	r3, r0, #8
   20d0c:	4258      	negs	r0, r3
   20d0e:	4158      	adcs	r0, r3
   20d10:	4770      	bx	lr
   20d12:	bf00      	nop
   20d14:	10000130 	.word	0x10000130

00020d18 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20d18:	4b06      	ldr	r3, [pc, #24]	; (20d34 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   20d1a:	681b      	ldr	r3, [r3, #0]
   20d1c:	2b08      	cmp	r3, #8
   20d1e:	d106      	bne.n	20d2e <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20d20:	4b05      	ldr	r3, [pc, #20]	; (20d38 <nrf52_errata_103+0x20>)
   20d22:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   20d24:	2b05      	cmp	r3, #5
   20d26:	d802      	bhi.n	20d2e <nrf52_errata_103+0x16>
   20d28:	4a04      	ldr	r2, [pc, #16]	; (20d3c <nrf52_errata_103+0x24>)
   20d2a:	5cd0      	ldrb	r0, [r2, r3]
   20d2c:	4770      	bx	lr
        return false;
   20d2e:	2000      	movs	r0, #0
}
   20d30:	4770      	bx	lr
   20d32:	bf00      	nop
   20d34:	10000130 	.word	0x10000130
   20d38:	10000134 	.word	0x10000134
   20d3c:	0003205f 	.word	0x0003205f

00020d40 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   20d40:	4a02      	ldr	r2, [pc, #8]	; (20d4c <nvmc_wait+0xc>)
   20d42:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   20d46:	2b00      	cmp	r3, #0
   20d48:	d0fb      	beq.n	20d42 <nvmc_wait+0x2>
}
   20d4a:	4770      	bx	lr
   20d4c:	4001e000 	.word	0x4001e000

00020d50 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   20d50:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   20d52:	f7ff ffd7 	bl	20d04 <nrf52_errata_136>
   20d56:	b140      	cbz	r0, 20d6a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   20d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20d5c:	2200      	movs	r2, #0
   20d5e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   20d62:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   20d66:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   20d6a:	f7ff ffcb 	bl	20d04 <nrf52_errata_136>
   20d6e:	2800      	cmp	r0, #0
   20d70:	d046      	beq.n	20e00 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   20d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20d76:	4b5b      	ldr	r3, [pc, #364]	; (20ee4 <SystemInit+0x194>)
   20d78:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   20d7c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   20d80:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   20d84:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   20d88:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   20d8c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   20d90:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   20d94:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   20d98:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   20d9c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   20da0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   20da4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   20da8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   20dac:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   20db0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   20db4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   20db8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   20dbc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   20dc0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   20dc4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   20dc8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   20dcc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   20dd0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   20dd4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   20dd8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   20ddc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   20de0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   20de4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   20de8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   20dec:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   20df0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   20df4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   20df8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   20dfc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   20e00:	f7ff ff8a 	bl	20d18 <nrf52_errata_103>
   20e04:	b110      	cbz	r0, 20e0c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   20e06:	4b38      	ldr	r3, [pc, #224]	; (20ee8 <SystemInit+0x198>)
   20e08:	4a38      	ldr	r2, [pc, #224]	; (20eec <SystemInit+0x19c>)
   20e0a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   20e0c:	f7ff ff84 	bl	20d18 <nrf52_errata_103>
   20e10:	b118      	cbz	r0, 20e1a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   20e12:	4b37      	ldr	r3, [pc, #220]	; (20ef0 <SystemInit+0x1a0>)
   20e14:	22fb      	movs	r2, #251	; 0xfb
   20e16:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   20e1a:	f7ff ff7d 	bl	20d18 <nrf52_errata_103>
   20e1e:	b148      	cbz	r0, 20e34 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   20e20:	4934      	ldr	r1, [pc, #208]	; (20ef4 <SystemInit+0x1a4>)
   20e22:	4b35      	ldr	r3, [pc, #212]	; (20ef8 <SystemInit+0x1a8>)
   20e24:	680a      	ldr	r2, [r1, #0]
   20e26:	681b      	ldr	r3, [r3, #0]
   20e28:	f022 020f 	bic.w	r2, r2, #15
   20e2c:	f003 030f 	and.w	r3, r3, #15
   20e30:	4313      	orrs	r3, r2
   20e32:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   20e34:	f7ff ff70 	bl	20d18 <nrf52_errata_103>
   20e38:	b118      	cbz	r0, 20e42 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   20e3a:	4b30      	ldr	r3, [pc, #192]	; (20efc <SystemInit+0x1ac>)
   20e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
   20e40:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   20e42:	f7ff ff5f 	bl	20d04 <nrf52_errata_136>
   20e46:	b148      	cbz	r0, 20e5c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   20e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20e4c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   20e50:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   20e52:	bf44      	itt	mi
   20e54:	f06f 0201 	mvnmi.w	r2, #1
   20e58:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20e5c:	4b28      	ldr	r3, [pc, #160]	; (20f00 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   20e5e:	681b      	ldr	r3, [r3, #0]
   20e60:	2b08      	cmp	r3, #8
   20e62:	d10e      	bne.n	20e82 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20e64:	4b27      	ldr	r3, [pc, #156]	; (20f04 <SystemInit+0x1b4>)
   20e66:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   20e68:	2b05      	cmp	r3, #5
   20e6a:	d802      	bhi.n	20e72 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   20e6c:	4a26      	ldr	r2, [pc, #152]	; (20f08 <SystemInit+0x1b8>)
   20e6e:	5cd3      	ldrb	r3, [r2, r3]
   20e70:	b13b      	cbz	r3, 20e82 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   20e72:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20e76:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   20e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20e7e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20e82:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   20e86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   20e8a:	2a00      	cmp	r2, #0
   20e8c:	db03      	blt.n	20e96 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   20e8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   20e92:	2b00      	cmp	r3, #0
   20e94:	da22      	bge.n	20edc <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20e96:	491d      	ldr	r1, [pc, #116]	; (20f0c <SystemInit+0x1bc>)
   20e98:	2301      	movs	r3, #1
   20e9a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   20e9e:	f7ff ff4f 	bl	20d40 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   20ea2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   20ea6:	2412      	movs	r4, #18
   20ea8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   20eac:	f7ff ff48 	bl	20d40 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   20eb0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   20eb4:	f7ff ff44 	bl	20d40 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   20eb8:	2300      	movs	r3, #0
   20eba:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   20ebe:	f7ff ff3f 	bl	20d40 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   20ec2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   20ec6:	4912      	ldr	r1, [pc, #72]	; (20f10 <SystemInit+0x1c0>)
   20ec8:	4b12      	ldr	r3, [pc, #72]	; (20f14 <SystemInit+0x1c4>)
   20eca:	68ca      	ldr	r2, [r1, #12]
   20ecc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20ed0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   20ed2:	60cb      	str	r3, [r1, #12]
   20ed4:	f3bf 8f4f 	dsb	sy
    __NOP();
   20ed8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   20eda:	e7fd      	b.n	20ed8 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   20edc:	4b0e      	ldr	r3, [pc, #56]	; (20f18 <SystemInit+0x1c8>)
   20ede:	4a0f      	ldr	r2, [pc, #60]	; (20f1c <SystemInit+0x1cc>)
   20ee0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   20ee2:	bd10      	pop	{r4, pc}
   20ee4:	4000c000 	.word	0x4000c000
   20ee8:	4000568c 	.word	0x4000568c
   20eec:	00038148 	.word	0x00038148
   20ef0:	4000f000 	.word	0x4000f000
   20ef4:	40000ee4 	.word	0x40000ee4
   20ef8:	10000258 	.word	0x10000258
   20efc:	40029640 	.word	0x40029640
   20f00:	10000130 	.word	0x10000130
   20f04:	10000134 	.word	0x10000134
   20f08:	00032059 	.word	0x00032059
   20f0c:	4001e000 	.word	0x4001e000
   20f10:	e000ed00 	.word	0xe000ed00
   20f14:	05fa0004 	.word	0x05fa0004
   20f18:	200005bc 	.word	0x200005bc
   20f1c:	03d09000 	.word	0x03d09000

00020f20 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   20f20:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   20f22:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   20f24:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   20f26:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   20f2a:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   20f2c:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   20f30:	d014      	beq.n	20f5c <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20f32:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   20f36:	fa05 f204 	lsl.w	r2, r5, r4
   20f3a:	ea23 0202 	bic.w	r2, r3, r2
   20f3e:	e850 6f00 	ldrex	r6, [r0]
   20f42:	429e      	cmp	r6, r3
   20f44:	d104      	bne.n	20f50 <nrfx_flag32_alloc+0x30>
   20f46:	e840 2c00 	strex	ip, r2, [r0]
   20f4a:	f1bc 0f00 	cmp.w	ip, #0
   20f4e:	d1f6      	bne.n	20f3e <nrfx_flag32_alloc+0x1e>
   20f50:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20f54:	d1e6      	bne.n	20f24 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   20f56:	4802      	ldr	r0, [pc, #8]	; (20f60 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   20f58:	700c      	strb	r4, [r1, #0]
}
   20f5a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   20f5c:	4801      	ldr	r0, [pc, #4]	; (20f64 <nrfx_flag32_alloc+0x44>)
   20f5e:	e7fc      	b.n	20f5a <nrfx_flag32_alloc+0x3a>
   20f60:	0bad0000 	.word	0x0bad0000
   20f64:	0bad0002 	.word	0x0bad0002

00020f68 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   20f68:	6803      	ldr	r3, [r0, #0]
   20f6a:	40cb      	lsrs	r3, r1
   20f6c:	07db      	lsls	r3, r3, #31
{
   20f6e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   20f70:	d415      	bmi.n	20f9e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   20f72:	2301      	movs	r3, #1
   20f74:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   20f78:	6803      	ldr	r3, [r0, #0]
   20f7a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   20f7e:	ea41 0203 	orr.w	r2, r1, r3
   20f82:	e850 4f00 	ldrex	r4, [r0]
   20f86:	429c      	cmp	r4, r3
   20f88:	d104      	bne.n	20f94 <nrfx_flag32_free+0x2c>
   20f8a:	e840 2c00 	strex	ip, r2, [r0]
   20f8e:	f1bc 0f00 	cmp.w	ip, #0
   20f92:	d1f6      	bne.n	20f82 <nrfx_flag32_free+0x1a>
   20f94:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   20f98:	d1ee      	bne.n	20f78 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   20f9a:	4802      	ldr	r0, [pc, #8]	; (20fa4 <nrfx_flag32_free+0x3c>)
}
   20f9c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   20f9e:	4802      	ldr	r0, [pc, #8]	; (20fa8 <nrfx_flag32_free+0x40>)
   20fa0:	e7fc      	b.n	20f9c <nrfx_flag32_free+0x34>
   20fa2:	bf00      	nop
   20fa4:	0bad0000 	.word	0x0bad0000
   20fa8:	0bad0004 	.word	0x0bad0004

00020fac <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   20fac:	4b05      	ldr	r3, [pc, #20]	; (20fc4 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   20fae:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   20fb0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   20fb4:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   20fb8:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   20fbc:	4258      	negs	r0, r3
   20fbe:	4158      	adcs	r0, r3
   20fc0:	4770      	bx	lr
   20fc2:	bf00      	nop
   20fc4:	200005c0 	.word	0x200005c0

00020fc8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   20fc8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20fca:	f100 0308 	add.w	r3, r0, #8
   20fce:	4c0c      	ldr	r4, [pc, #48]	; (21000 <call_handler+0x38>)
   20fd0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   20fd4:	05da      	lsls	r2, r3, #23
{
   20fd6:	4605      	mov	r5, r0
   20fd8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   20fda:	d507      	bpl.n	20fec <call_handler+0x24>
   20fdc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   20fe0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   20fe4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   20fe8:	6852      	ldr	r2, [r2, #4]
   20fea:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   20fec:	68a3      	ldr	r3, [r4, #8]
   20fee:	b12b      	cbz	r3, 20ffc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20ff0:	68e2      	ldr	r2, [r4, #12]
   20ff2:	4631      	mov	r1, r6
   20ff4:	4628      	mov	r0, r5
    }
}
   20ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   20ffa:	4718      	bx	r3
}
   20ffc:	bd70      	pop	{r4, r5, r6, pc}
   20ffe:	bf00      	nop
   21000:	200005c0 	.word	0x200005c0

00021004 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   21004:	4b19      	ldr	r3, [pc, #100]	; (2106c <release_handler+0x68>)
   21006:	3008      	adds	r0, #8
{
   21008:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2100a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   2100e:	05d1      	lsls	r1, r2, #23
   21010:	d51d      	bpl.n	2104e <release_handler+0x4a>
   21012:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   21016:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   2101a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2101e:	f103 0410 	add.w	r4, r3, #16
   21022:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   21024:	f834 2b02 	ldrh.w	r2, [r4], #2
   21028:	f412 7f80 	tst.w	r2, #256	; 0x100
   2102c:	d003      	beq.n	21036 <release_handler+0x32>
   2102e:	f3c2 2243 	ubfx	r2, r2, #9, #4
   21032:	4291      	cmp	r1, r2
   21034:	d00b      	beq.n	2104e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21036:	3001      	adds	r0, #1
   21038:	2830      	cmp	r0, #48	; 0x30
   2103a:	d1f3      	bne.n	21024 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2103c:	2200      	movs	r2, #0
   2103e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21042:	480b      	ldr	r0, [pc, #44]	; (21070 <release_handler+0x6c>)
   21044:	f7ff ff90 	bl	20f68 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21048:	4b0a      	ldr	r3, [pc, #40]	; (21074 <release_handler+0x70>)
   2104a:	4298      	cmp	r0, r3
   2104c:	d100      	bne.n	21050 <release_handler+0x4c>
}
   2104e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21050:	4909      	ldr	r1, [pc, #36]	; (21078 <release_handler+0x74>)
   21052:	480a      	ldr	r0, [pc, #40]	; (2107c <release_handler+0x78>)
   21054:	4a0a      	ldr	r2, [pc, #40]	; (21080 <release_handler+0x7c>)
   21056:	f44f 7399 	mov.w	r3, #306	; 0x132
   2105a:	f007 fb89 	bl	28770 <printk>
}
   2105e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   21062:	4807      	ldr	r0, [pc, #28]	; (21080 <release_handler+0x7c>)
   21064:	f44f 7199 	mov.w	r1, #306	; 0x132
   21068:	f007 bd73 	b.w	28b52 <assert_post_action>
   2106c:	200005c0 	.word	0x200005c0
   21070:	20000634 	.word	0x20000634
   21074:	0bad0000 	.word	0x0bad0000
   21078:	000320c9 	.word	0x000320c9
   2107c:	0002e915 	.word	0x0002e915
   21080:	00032065 	.word	0x00032065

00021084 <pin_handler_trigger_uninit>:
{
   21084:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21086:	4c0a      	ldr	r4, [pc, #40]	; (210b0 <pin_handler_trigger_uninit+0x2c>)
   21088:	f100 0508 	add.w	r5, r0, #8
   2108c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   21090:	069a      	lsls	r2, r3, #26
   21092:	d506      	bpl.n	210a2 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   21094:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21096:	4a07      	ldr	r2, [pc, #28]	; (210b4 <pin_handler_trigger_uninit+0x30>)
   21098:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2109c:	2100      	movs	r1, #0
   2109e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   210a2:	f7ff ffaf 	bl	21004 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   210a6:	2300      	movs	r3, #0
   210a8:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   210ac:	bd38      	pop	{r3, r4, r5, pc}
   210ae:	bf00      	nop
   210b0:	200005c0 	.word	0x200005c0
   210b4:	40006000 	.word	0x40006000

000210b8 <nrf_gpio_pin_port_decode>:
{
   210b8:	b510      	push	{r4, lr}
   210ba:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   210bc:	6800      	ldr	r0, [r0, #0]
   210be:	f00c f817 	bl	2d0f0 <nrf_gpio_pin_present_check>
   210c2:	b958      	cbnz	r0, 210dc <nrf_gpio_pin_port_decode+0x24>
   210c4:	4912      	ldr	r1, [pc, #72]	; (21110 <nrf_gpio_pin_port_decode+0x58>)
   210c6:	4813      	ldr	r0, [pc, #76]	; (21114 <nrf_gpio_pin_port_decode+0x5c>)
   210c8:	4a13      	ldr	r2, [pc, #76]	; (21118 <nrf_gpio_pin_port_decode+0x60>)
   210ca:	f240 2329 	movw	r3, #553	; 0x229
   210ce:	f007 fb4f 	bl	28770 <printk>
   210d2:	4811      	ldr	r0, [pc, #68]	; (21118 <nrf_gpio_pin_port_decode+0x60>)
   210d4:	f240 2129 	movw	r1, #553	; 0x229
   210d8:	f007 fd3b 	bl	28b52 <assert_post_action>
    uint32_t pin_number = *p_pin;
   210dc:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   210de:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   210e2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   210e4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   210e6:	d00d      	beq.n	21104 <nrf_gpio_pin_port_decode+0x4c>
   210e8:	2b01      	cmp	r3, #1
   210ea:	d00e      	beq.n	2110a <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
   210ec:	490b      	ldr	r1, [pc, #44]	; (2111c <nrf_gpio_pin_port_decode+0x64>)
   210ee:	4809      	ldr	r0, [pc, #36]	; (21114 <nrf_gpio_pin_port_decode+0x5c>)
   210f0:	4a09      	ldr	r2, [pc, #36]	; (21118 <nrf_gpio_pin_port_decode+0x60>)
   210f2:	f240 232e 	movw	r3, #558	; 0x22e
   210f6:	f007 fb3b 	bl	28770 <printk>
   210fa:	4807      	ldr	r0, [pc, #28]	; (21118 <nrf_gpio_pin_port_decode+0x60>)
   210fc:	f240 212e 	movw	r1, #558	; 0x22e
   21100:	f007 fd27 	bl	28b52 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21104:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   21108:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   2110a:	4805      	ldr	r0, [pc, #20]	; (21120 <nrf_gpio_pin_port_decode+0x68>)
   2110c:	e7fc      	b.n	21108 <nrf_gpio_pin_port_decode+0x50>
   2110e:	bf00      	nop
   21110:	000319de 	.word	0x000319de
   21114:	0002e915 	.word	0x0002e915
   21118:	000319ab 	.word	0x000319ab
   2111c:	00032bb3 	.word	0x00032bb3
   21120:	50000300 	.word	0x50000300

00021124 <nrfx_gpiote_input_configure>:
{
   21124:	b5f0      	push	{r4, r5, r6, r7, lr}
   21126:	4604      	mov	r4, r0
   21128:	b085      	sub	sp, #20
   2112a:	4617      	mov	r7, r2
   2112c:	461d      	mov	r5, r3
    if (p_input_config)
   2112e:	b1f1      	cbz	r1, 2116e <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   21130:	f7ff ff3c 	bl	20fac <pin_is_task_output>
   21134:	b110      	cbz	r0, 2113c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   21136:	484a      	ldr	r0, [pc, #296]	; (21260 <nrfx_gpiote_input_configure+0x13c>)
}
   21138:	b005      	add	sp, #20
   2113a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2113c:	460b      	mov	r3, r1
   2113e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21142:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   21146:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2114a:	f10d 020f 	add.w	r2, sp, #15
   2114e:	f10d 010e 	add.w	r1, sp, #14
   21152:	4620      	mov	r0, r4
   21154:	f00b ffe1 	bl	2d11a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21158:	4a42      	ldr	r2, [pc, #264]	; (21264 <nrfx_gpiote_input_configure+0x140>)
   2115a:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2115e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   21162:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   21166:	f043 0301 	orr.w	r3, r3, #1
   2116a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2116e:	b197      	cbz	r7, 21196 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21170:	4b3c      	ldr	r3, [pc, #240]	; (21264 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   21172:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   21174:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21176:	f104 0008 	add.w	r0, r4, #8
   2117a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   2117e:	078f      	lsls	r7, r1, #30
   21180:	d50c      	bpl.n	2119c <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   21182:	2a00      	cmp	r2, #0
   21184:	d1d7      	bne.n	21136 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   21186:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   2118a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2118e:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   21192:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   21196:	bbcd      	cbnz	r5, 2120c <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   21198:	4833      	ldr	r0, [pc, #204]	; (21268 <nrfx_gpiote_input_configure+0x144>)
   2119a:	e7cd      	b.n	21138 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2119c:	f021 0120 	bic.w	r1, r1, #32
   211a0:	04c9      	lsls	r1, r1, #19
   211a2:	0cc9      	lsrs	r1, r1, #19
   211a4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   211a8:	2a00      	cmp	r2, #0
   211aa:	d0ec      	beq.n	21186 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   211ac:	2e03      	cmp	r6, #3
   211ae:	d8c2      	bhi.n	21136 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   211b0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   211b2:	b92e      	cbnz	r6, 211c0 <nrfx_gpiote_input_configure+0x9c>
   211b4:	4a2d      	ldr	r2, [pc, #180]	; (2126c <nrfx_gpiote_input_configure+0x148>)
   211b6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   211ba:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   211be:	e7e2      	b.n	21186 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   211c0:	00ba      	lsls	r2, r7, #2
   211c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   211c6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   211ca:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   211ce:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   211d2:	f02c 0c03 	bic.w	ip, ip, #3
   211d6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   211da:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   211de:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   211e2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   211e6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   211ea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   211ee:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   211f2:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   211f6:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   211fa:	ea4c 0c0e 	orr.w	ip, ip, lr
   211fe:	f041 0120 	orr.w	r1, r1, #32
   21202:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   21206:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   2120a:	e7bc      	b.n	21186 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2120c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   21210:	4620      	mov	r0, r4
   21212:	f7ff fef7 	bl	21004 <release_handler>
    if (!handler)
   21216:	2e00      	cmp	r6, #0
   21218:	d0be      	beq.n	21198 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2121a:	4d12      	ldr	r5, [pc, #72]	; (21264 <nrfx_gpiote_input_configure+0x140>)
   2121c:	682b      	ldr	r3, [r5, #0]
   2121e:	429e      	cmp	r6, r3
   21220:	d104      	bne.n	2122c <nrfx_gpiote_input_configure+0x108>
   21222:	686b      	ldr	r3, [r5, #4]
   21224:	429f      	cmp	r7, r3
   21226:	d101      	bne.n	2122c <nrfx_gpiote_input_configure+0x108>
   21228:	2200      	movs	r2, #0
   2122a:	e00a      	b.n	21242 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2122c:	4810      	ldr	r0, [pc, #64]	; (21270 <nrfx_gpiote_input_configure+0x14c>)
   2122e:	f10d 010f 	add.w	r1, sp, #15
   21232:	f7ff fe75 	bl	20f20 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   21236:	4b0c      	ldr	r3, [pc, #48]	; (21268 <nrfx_gpiote_input_configure+0x144>)
   21238:	4298      	cmp	r0, r3
   2123a:	f47f af7d 	bne.w	21138 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   2123e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   21242:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   21246:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2124a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   2124c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2124e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   21252:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   21256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2125a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   2125e:	e79b      	b.n	21198 <nrfx_gpiote_input_configure+0x74>
   21260:	0bad0004 	.word	0x0bad0004
   21264:	200005c0 	.word	0x200005c0
   21268:	0bad0000 	.word	0x0bad0000
   2126c:	40006000 	.word	0x40006000
   21270:	20000634 	.word	0x20000634

00021274 <nrfx_gpiote_output_configure>:
{
   21274:	b5f0      	push	{r4, r5, r6, r7, lr}
   21276:	4604      	mov	r4, r0
   21278:	b085      	sub	sp, #20
   2127a:	4615      	mov	r5, r2
    if (p_config)
   2127c:	b309      	cbz	r1, 212c2 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2127e:	f100 0708 	add.w	r7, r0, #8
   21282:	4e31      	ldr	r6, [pc, #196]	; (21348 <nrfx_gpiote_output_configure+0xd4>)
   21284:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   21288:	0798      	lsls	r0, r3, #30
   2128a:	d401      	bmi.n	21290 <nrfx_gpiote_output_configure+0x1c>
   2128c:	069a      	lsls	r2, r3, #26
   2128e:	d458      	bmi.n	21342 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   21290:	f013 0f1c 	tst.w	r3, #28
   21294:	d002      	beq.n	2129c <nrfx_gpiote_output_configure+0x28>
   21296:	784b      	ldrb	r3, [r1, #1]
   21298:	2b01      	cmp	r3, #1
   2129a:	d052      	beq.n	21342 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2129c:	2301      	movs	r3, #1
   2129e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   212a2:	2300      	movs	r3, #0
   212a4:	e9cd 1300 	strd	r1, r3, [sp]
   212a8:	1c4a      	adds	r2, r1, #1
   212aa:	1c8b      	adds	r3, r1, #2
   212ac:	4620      	mov	r0, r4
   212ae:	f10d 010f 	add.w	r1, sp, #15
   212b2:	f00b ff32 	bl	2d11a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   212b6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   212ba:	f043 0303 	orr.w	r3, r3, #3
   212be:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   212c2:	b915      	cbnz	r5, 212ca <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   212c4:	4821      	ldr	r0, [pc, #132]	; (2134c <nrfx_gpiote_output_configure+0xd8>)
}
   212c6:	b005      	add	sp, #20
   212c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   212ca:	4e1f      	ldr	r6, [pc, #124]	; (21348 <nrfx_gpiote_output_configure+0xd4>)
   212cc:	f104 0708 	add.w	r7, r4, #8
   212d0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   212d4:	0783      	lsls	r3, r0, #30
   212d6:	d534      	bpl.n	21342 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   212d8:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   212dc:	4661      	mov	r1, ip
   212de:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   212e0:	f020 0020 	bic.w	r0, r0, #32
   212e4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   212e8:	04c0      	lsls	r0, r0, #19
   212ea:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   212ee:	0cc0      	lsrs	r0, r0, #19
   212f0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   212f4:	2300      	movs	r3, #0
   212f6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   212fa:	786a      	ldrb	r2, [r5, #1]
   212fc:	2a00      	cmp	r2, #0
   212fe:	d0e1      	beq.n	212c4 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   21300:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   21304:	78ad      	ldrb	r5, [r5, #2]
   21306:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   2130a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2130e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21312:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   21316:	0223      	lsls	r3, r4, #8
   21318:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2131c:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2131e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21322:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   21326:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21328:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   2132a:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2132e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   21332:	432b      	orrs	r3, r5
   21334:	f040 0020 	orr.w	r0, r0, #32
   21338:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2133c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21340:	e7c0      	b.n	212c4 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   21342:	4803      	ldr	r0, [pc, #12]	; (21350 <nrfx_gpiote_output_configure+0xdc>)
   21344:	e7bf      	b.n	212c6 <nrfx_gpiote_output_configure+0x52>
   21346:	bf00      	nop
   21348:	200005c0 	.word	0x200005c0
   2134c:	0bad0000 	.word	0x0bad0000
   21350:	0bad0004 	.word	0x0bad0004

00021354 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   21354:	4b01      	ldr	r3, [pc, #4]	; (2135c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   21356:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   2135a:	4770      	bx	lr
   2135c:	200005c0 	.word	0x200005c0

00021360 <nrfx_gpiote_channel_get>:
{
   21360:	b538      	push	{r3, r4, r5, lr}
   21362:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   21364:	460d      	mov	r5, r1
   21366:	b959      	cbnz	r1, 21380 <nrfx_gpiote_channel_get+0x20>
   21368:	490b      	ldr	r1, [pc, #44]	; (21398 <nrfx_gpiote_channel_get+0x38>)
   2136a:	480c      	ldr	r0, [pc, #48]	; (2139c <nrfx_gpiote_channel_get+0x3c>)
   2136c:	4a0c      	ldr	r2, [pc, #48]	; (213a0 <nrfx_gpiote_channel_get+0x40>)
   2136e:	f240 2335 	movw	r3, #565	; 0x235
   21372:	f007 f9fd 	bl	28770 <printk>
   21376:	480a      	ldr	r0, [pc, #40]	; (213a0 <nrfx_gpiote_channel_get+0x40>)
   21378:	f240 2135 	movw	r1, #565	; 0x235
   2137c:	f007 fbe9 	bl	28b52 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21380:	3408      	adds	r4, #8
   21382:	4b08      	ldr	r3, [pc, #32]	; (213a4 <nrfx_gpiote_channel_get+0x44>)
   21384:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   21388:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2138a:	bf43      	ittte	mi
   2138c:	0b5b      	lsrmi	r3, r3, #13
   2138e:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   21390:	4805      	ldrmi	r0, [pc, #20]	; (213a8 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
   21392:	4806      	ldrpl	r0, [pc, #24]	; (213ac <nrfx_gpiote_channel_get+0x4c>)
}
   21394:	bd38      	pop	{r3, r4, r5, pc}
   21396:	bf00      	nop
   21398:	000320dd 	.word	0x000320dd
   2139c:	0002e915 	.word	0x0002e915
   213a0:	00032065 	.word	0x00032065
   213a4:	200005c0 	.word	0x200005c0
   213a8:	0bad0000 	.word	0x0bad0000
   213ac:	0bad0004 	.word	0x0bad0004

000213b0 <nrfx_gpiote_init>:
{
   213b0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   213b2:	4c0e      	ldr	r4, [pc, #56]	; (213ec <nrfx_gpiote_init+0x3c>)
   213b4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   213b8:	b9b5      	cbnz	r5, 213e8 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   213ba:	2260      	movs	r2, #96	; 0x60
   213bc:	4629      	mov	r1, r5
   213be:	f104 0010 	add.w	r0, r4, #16
   213c2:	f009 fb75 	bl	2aab0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   213c6:	2006      	movs	r0, #6
   213c8:	f7f3 f85c 	bl	14484 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   213cc:	4b08      	ldr	r3, [pc, #32]	; (213f0 <nrfx_gpiote_init+0x40>)
    return err_code;
   213ce:	4809      	ldr	r0, [pc, #36]	; (213f4 <nrfx_gpiote_init+0x44>)
   213d0:	601d      	str	r5, [r3, #0]
   213d2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   213d4:	4b08      	ldr	r3, [pc, #32]	; (213f8 <nrfx_gpiote_init+0x48>)
   213d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   213da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   213de:	2301      	movs	r3, #1
   213e0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   213e4:	6763      	str	r3, [r4, #116]	; 0x74
}
   213e6:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   213e8:	4804      	ldr	r0, [pc, #16]	; (213fc <nrfx_gpiote_init+0x4c>)
   213ea:	e7fc      	b.n	213e6 <nrfx_gpiote_init+0x36>
   213ec:	200005c0 	.word	0x200005c0
   213f0:	4000617c 	.word	0x4000617c
   213f4:	0bad0000 	.word	0x0bad0000
   213f8:	40006000 	.word	0x40006000
   213fc:	0bad0005 	.word	0x0bad0005

00021400 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   21400:	4b03      	ldr	r3, [pc, #12]	; (21410 <nrfx_gpiote_is_init+0x10>)
   21402:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   21406:	3800      	subs	r0, #0
   21408:	bf18      	it	ne
   2140a:	2001      	movne	r0, #1
   2140c:	4770      	bx	lr
   2140e:	bf00      	nop
   21410:	200005c0 	.word	0x200005c0

00021414 <nrfx_gpiote_channel_free>:
{
   21414:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   21416:	4801      	ldr	r0, [pc, #4]	; (2141c <nrfx_gpiote_channel_free+0x8>)
   21418:	f7ff bda6 	b.w	20f68 <nrfx_flag32_free>
   2141c:	20000630 	.word	0x20000630

00021420 <nrfx_gpiote_channel_alloc>:
{
   21420:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   21422:	4801      	ldr	r0, [pc, #4]	; (21428 <nrfx_gpiote_channel_alloc+0x8>)
   21424:	f7ff bd7c 	b.w	20f20 <nrfx_flag32_alloc>
   21428:	20000630 	.word	0x20000630

0002142c <nrfx_gpiote_trigger_enable>:
{
   2142c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2142e:	4d31      	ldr	r5, [pc, #196]	; (214f4 <nrfx_gpiote_trigger_enable+0xc8>)
   21430:	f100 0708 	add.w	r7, r0, #8
{
   21434:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   21436:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
   2143a:	f013 0f1c 	tst.w	r3, #28
{
   2143e:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   21440:	d10b      	bne.n	2145a <nrfx_gpiote_trigger_enable+0x2e>
   21442:	492d      	ldr	r1, [pc, #180]	; (214f8 <nrfx_gpiote_trigger_enable+0xcc>)
   21444:	482d      	ldr	r0, [pc, #180]	; (214fc <nrfx_gpiote_trigger_enable+0xd0>)
   21446:	4a2e      	ldr	r2, [pc, #184]	; (21500 <nrfx_gpiote_trigger_enable+0xd4>)
   21448:	f240 33df 	movw	r3, #991	; 0x3df
   2144c:	f007 f990 	bl	28770 <printk>
   21450:	482b      	ldr	r0, [pc, #172]	; (21500 <nrfx_gpiote_trigger_enable+0xd4>)
   21452:	f240 31df 	movw	r1, #991	; 0x3df
   21456:	f007 fb7c 	bl	28b52 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2145a:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2145e:	0683      	lsls	r3, r0, #26
   21460:	d51f      	bpl.n	214a2 <nrfx_gpiote_trigger_enable+0x76>
   21462:	f010 0302 	ands.w	r3, r0, #2
   21466:	d11c      	bne.n	214a2 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21468:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   2146a:	4608      	mov	r0, r1
   2146c:	f00b fe51 	bl	2d112 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   21470:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   21474:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21478:	6003      	str	r3, [r0, #0]
   2147a:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2147c:	008b      	lsls	r3, r1, #2
   2147e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21482:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   21486:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2148a:	f042 0201 	orr.w	r2, r2, #1
   2148e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   21492:	b126      	cbz	r6, 2149e <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
   21494:	4a1b      	ldr	r2, [pc, #108]	; (21504 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   21496:	2301      	movs	r3, #1
   21498:	408b      	lsls	r3, r1
   2149a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2149e:	b003      	add	sp, #12
   214a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   214a2:	b95e      	cbnz	r6, 214bc <nrfx_gpiote_trigger_enable+0x90>
   214a4:	4918      	ldr	r1, [pc, #96]	; (21508 <nrfx_gpiote_trigger_enable+0xdc>)
   214a6:	4815      	ldr	r0, [pc, #84]	; (214fc <nrfx_gpiote_trigger_enable+0xd0>)
   214a8:	4a15      	ldr	r2, [pc, #84]	; (21500 <nrfx_gpiote_trigger_enable+0xd4>)
   214aa:	f240 33ee 	movw	r3, #1006	; 0x3ee
   214ae:	f007 f95f 	bl	28770 <printk>
   214b2:	4813      	ldr	r0, [pc, #76]	; (21500 <nrfx_gpiote_trigger_enable+0xd4>)
   214b4:	f240 31ee 	movw	r1, #1006	; 0x3ee
   214b8:	f007 fb4b 	bl	28b52 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   214bc:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   214c0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   214c4:	2b04      	cmp	r3, #4
   214c6:	d010      	beq.n	214ea <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   214c8:	2b05      	cmp	r3, #5
   214ca:	d010      	beq.n	214ee <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   214cc:	a801      	add	r0, sp, #4
   214ce:	9401      	str	r4, [sp, #4]
   214d0:	f7ff fdf2 	bl	210b8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   214d4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   214d6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   214da:	40d9      	lsrs	r1, r3
   214dc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   214e0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   214e2:	4620      	mov	r0, r4
   214e4:	f00b fe64 	bl	2d1b0 <nrf_gpio_cfg_sense_set>
}
   214e8:	e7d9      	b.n	2149e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   214ea:	2103      	movs	r1, #3
   214ec:	e7f9      	b.n	214e2 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   214ee:	2102      	movs	r1, #2
   214f0:	e7f7      	b.n	214e2 <nrfx_gpiote_trigger_enable+0xb6>
   214f2:	bf00      	nop
   214f4:	200005c0 	.word	0x200005c0
   214f8:	000320e7 	.word	0x000320e7
   214fc:	0002e915 	.word	0x0002e915
   21500:	00032065 	.word	0x00032065
   21504:	40006000 	.word	0x40006000
   21508:	000320fc 	.word	0x000320fc

0002150c <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2150c:	4b0e      	ldr	r3, [pc, #56]	; (21548 <nrfx_gpiote_trigger_disable+0x3c>)
   2150e:	f100 0208 	add.w	r2, r0, #8
   21512:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21516:	0699      	lsls	r1, r3, #26
   21518:	d513      	bpl.n	21542 <nrfx_gpiote_trigger_disable+0x36>
   2151a:	079a      	lsls	r2, r3, #30
   2151c:	d411      	bmi.n	21542 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2151e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   21520:	2201      	movs	r2, #1
   21522:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   21524:	009b      	lsls	r3, r3, #2
   21526:	4909      	ldr	r1, [pc, #36]	; (2154c <nrfx_gpiote_trigger_disable+0x40>)
   21528:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2152c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   21530:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21534:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21538:	f022 0203 	bic.w	r2, r2, #3
   2153c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   21540:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21542:	2100      	movs	r1, #0
   21544:	f00b be34 	b.w	2d1b0 <nrf_gpio_cfg_sense_set>
   21548:	200005c0 	.word	0x200005c0
   2154c:	40006000 	.word	0x40006000

00021550 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21550:	4b0e      	ldr	r3, [pc, #56]	; (2158c <nrfx_gpiote_pin_uninit+0x3c>)
   21552:	f100 0208 	add.w	r2, r0, #8
{
   21556:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21558:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   2155c:	07db      	lsls	r3, r3, #31
{
   2155e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21560:	d511      	bpl.n	21586 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   21562:	f7ff ffd3 	bl	2150c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21566:	4620      	mov	r0, r4
   21568:	f7ff fd8c 	bl	21084 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2156c:	a801      	add	r0, sp, #4
   2156e:	9401      	str	r4, [sp, #4]
   21570:	f7ff fda2 	bl	210b8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21574:	9b01      	ldr	r3, [sp, #4]
   21576:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2157a:	2202      	movs	r2, #2
   2157c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21580:	4803      	ldr	r0, [pc, #12]	; (21590 <nrfx_gpiote_pin_uninit+0x40>)
}
   21582:	b002      	add	sp, #8
   21584:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21586:	4803      	ldr	r0, [pc, #12]	; (21594 <nrfx_gpiote_pin_uninit+0x44>)
   21588:	e7fb      	b.n	21582 <nrfx_gpiote_pin_uninit+0x32>
   2158a:	bf00      	nop
   2158c:	200005c0 	.word	0x200005c0
   21590:	0bad0000 	.word	0x0bad0000
   21594:	0bad0004 	.word	0x0bad0004

00021598 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2159c:	4b65      	ldr	r3, [pc, #404]	; (21734 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   2159e:	4866      	ldr	r0, [pc, #408]	; (21738 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   215a0:	4966      	ldr	r1, [pc, #408]	; (2173c <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   215a2:	2500      	movs	r5, #0
{
   215a4:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   215a6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   215a8:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215aa:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   215ac:	b136      	cbz	r6, 215bc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   215ae:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   215b2:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   215b4:	bf1e      	ittt	ne
   215b6:	601c      	strne	r4, [r3, #0]
   215b8:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   215ba:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   215bc:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   215be:	428b      	cmp	r3, r1
        mask <<= 1;
   215c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   215c4:	d1f1      	bne.n	215aa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215c6:	4f5e      	ldr	r7, [pc, #376]	; (21740 <nrfx_gpiote_irq_handler+0x1a8>)
   215c8:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   215ca:	b37b      	cbz	r3, 2162c <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   215cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   215d0:	4e5c      	ldr	r6, [pc, #368]	; (21744 <nrfx_gpiote_irq_handler+0x1ac>)
   215d2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   215d6:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   215d8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   215dc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   215e0:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   215e2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   215e6:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   215e8:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   215ec:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   215f0:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   215f4:	f8d9 3000 	ldr.w	r3, [r9]
   215f8:	b9f3      	cbnz	r3, 21638 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   215fa:	f108 0820 	add.w	r8, r8, #32
   215fe:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   21602:	f109 0904 	add.w	r9, r9, #4
   21606:	d1f5      	bne.n	215f4 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21608:	603b      	str	r3, [r7, #0]
   2160a:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   2160c:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
   2160e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   21612:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   21616:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   21618:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2161c:	9b01      	ldr	r3, [sp, #4]
   2161e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   21622:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   21624:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   21628:	4313      	orrs	r3, r2
   2162a:	d1dd      	bne.n	215e8 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   2162c:	2401      	movs	r4, #1
    while (mask)
   2162e:	2d00      	cmp	r5, #0
   21630:	d168      	bne.n	21704 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   21632:	b009      	add	sp, #36	; 0x24
   21634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   21638:	fa93 f3a3 	rbit	r3, r3
   2163c:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   21640:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21644:	f106 0208 	add.w	r2, r6, #8
   21648:	4b3f      	ldr	r3, [pc, #252]	; (21748 <nrfx_gpiote_irq_handler+0x1b0>)
   2164a:	9605      	str	r6, [sp, #20]
   2164c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   21650:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   21654:	08f4      	lsrs	r4, r6, #3
   21656:	9302      	str	r3, [sp, #8]
   21658:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   2165a:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
   2165c:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   21660:	fa0b fc00 	lsl.w	ip, fp, r0
   21664:	5d18      	ldrb	r0, [r3, r4]
   21666:	ea20 000c 	bic.w	r0, r0, ip
   2166a:	5518      	strb	r0, [r3, r4]
   2166c:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2166e:	a805      	add	r0, sp, #20
   21670:	9103      	str	r1, [sp, #12]
   21672:	f7ff fd21 	bl	210b8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21676:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
   21678:	9903      	ldr	r1, [sp, #12]
   2167a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   2167e:	074b      	lsls	r3, r1, #29
   21680:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   21684:	f3c4 4401 	ubfx	r4, r4, #16, #2
   21688:	d523      	bpl.n	216d2 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
   2168a:	4651      	mov	r1, sl
   2168c:	4630      	mov	r0, r6
   2168e:	f7ff fc9b 	bl	20fc8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21692:	a805      	add	r0, sp, #20
   21694:	9605      	str	r6, [sp, #20]
   21696:	f7ff fd0f 	bl	210b8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2169a:	9a05      	ldr	r2, [sp, #20]
   2169c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   216a0:	b2e4      	uxtb	r4, r4
   216a2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   216a6:	f3c2 4201 	ubfx	r2, r2, #16, #2
   216aa:	4294      	cmp	r4, r2
   216ac:	d107      	bne.n	216be <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   216ae:	2100      	movs	r1, #0
   216b0:	4630      	mov	r0, r6
   216b2:	f00b fd7d 	bl	2d1b0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   216b6:	4621      	mov	r1, r4
   216b8:	4630      	mov	r0, r6
   216ba:	f00b fd79 	bl	2d1b0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   216be:	a805      	add	r0, sp, #20
   216c0:	9605      	str	r6, [sp, #20]
   216c2:	f7ff fcf9 	bl	210b8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   216c6:	9b05      	ldr	r3, [sp, #20]
   216c8:	fa0b f303 	lsl.w	r3, fp, r3
   216cc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   216d0:	e790      	b.n	215f4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   216d2:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   216d4:	bf0c      	ite	eq
   216d6:	2103      	moveq	r1, #3
   216d8:	2102      	movne	r1, #2
   216da:	4630      	mov	r0, r6
   216dc:	f00b fd68 	bl	2d1b0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   216e0:	9b02      	ldr	r3, [sp, #8]
   216e2:	2b03      	cmp	r3, #3
   216e4:	d004      	beq.n	216f0 <nrfx_gpiote_irq_handler+0x158>
   216e6:	2c02      	cmp	r4, #2
   216e8:	d107      	bne.n	216fa <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   216ea:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   216ee:	d1e6      	bne.n	216be <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
   216f0:	4651      	mov	r1, sl
   216f2:	4630      	mov	r0, r6
   216f4:	f7ff fc68 	bl	20fc8 <call_handler>
   216f8:	e7e1      	b.n	216be <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   216fa:	2c03      	cmp	r4, #3
   216fc:	d1df      	bne.n	216be <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   216fe:	f1ba 0f02 	cmp.w	sl, #2
   21702:	e7f4      	b.n	216ee <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
   21704:	fa95 f3a5 	rbit	r3, r5
   21708:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2170c:	fa04 f203 	lsl.w	r2, r4, r3
   21710:	009b      	lsls	r3, r3, #2
   21712:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21716:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2171a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2171e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21722:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21726:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2172a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2172e:	f7ff fc4b 	bl	20fc8 <call_handler>
   21732:	e77c      	b.n	2162e <nrfx_gpiote_irq_handler+0x96>
   21734:	40006100 	.word	0x40006100
   21738:	40006000 	.word	0x40006000
   2173c:	40006120 	.word	0x40006120
   21740:	4000617c 	.word	0x4000617c
   21744:	50000300 	.word	0x50000300
   21748:	200005c0 	.word	0x200005c0

0002174c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   2174c:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   2174e:	2100      	movs	r1, #0
{
   21750:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   21752:	f00b fd3c 	bl	2d1ce <is_valid_address>
   21756:	b958      	cbnz	r0, 21770 <nrfx_nvmc_page_erase+0x24>
   21758:	4912      	ldr	r1, [pc, #72]	; (217a4 <nrfx_nvmc_page_erase+0x58>)
   2175a:	4813      	ldr	r0, [pc, #76]	; (217a8 <nrfx_nvmc_page_erase+0x5c>)
   2175c:	4a13      	ldr	r2, [pc, #76]	; (217ac <nrfx_nvmc_page_erase+0x60>)
   2175e:	f44f 7383 	mov.w	r3, #262	; 0x106
   21762:	f007 f805 	bl	28770 <printk>
   21766:	4811      	ldr	r0, [pc, #68]	; (217ac <nrfx_nvmc_page_erase+0x60>)
   21768:	f44f 7183 	mov.w	r1, #262	; 0x106
   2176c:	f007 f9f1 	bl	28b52 <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   21770:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21774:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   21776:	fbb4 f3f2 	udiv	r3, r4, r2
   2177a:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   2177e:	b973      	cbnz	r3, 2179e <nrfx_nvmc_page_erase+0x52>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   21780:	4b0b      	ldr	r3, [pc, #44]	; (217b0 <nrfx_nvmc_page_erase+0x64>)
   21782:	2202      	movs	r2, #2
   21784:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   21788:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2178c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   21790:	07d2      	lsls	r2, r2, #31
   21792:	d5fb      	bpl.n	2178c <nrfx_nvmc_page_erase+0x40>
    p_reg->CONFIG = (uint32_t)mode;
   21794:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   21796:	4807      	ldr	r0, [pc, #28]	; (217b4 <nrfx_nvmc_page_erase+0x68>)
   21798:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2179c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2179e:	4806      	ldr	r0, [pc, #24]	; (217b8 <nrfx_nvmc_page_erase+0x6c>)
   217a0:	e7fc      	b.n	2179c <nrfx_nvmc_page_erase+0x50>
   217a2:	bf00      	nop
   217a4:	00032163 	.word	0x00032163
   217a8:	0002e915 	.word	0x0002e915
   217ac:	00032107 	.word	0x00032107
   217b0:	4001e000 	.word	0x4001e000
   217b4:	0bad0000 	.word	0x0bad0000
   217b8:	0bad000a 	.word	0x0bad000a

000217bc <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   217bc:	b538      	push	{r3, r4, r5, lr}
   217be:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   217c0:	2101      	movs	r1, #1
{
   217c2:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   217c4:	f00b fd03 	bl	2d1ce <is_valid_address>
   217c8:	b958      	cbnz	r0, 217e2 <nrfx_nvmc_word_write+0x26>
   217ca:	4914      	ldr	r1, [pc, #80]	; (2181c <nrfx_nvmc_word_write+0x60>)
   217cc:	4814      	ldr	r0, [pc, #80]	; (21820 <nrfx_nvmc_word_write+0x64>)
   217ce:	4a15      	ldr	r2, [pc, #84]	; (21824 <nrfx_nvmc_word_write+0x68>)
   217d0:	f44f 73ca 	mov.w	r3, #404	; 0x194
   217d4:	f006 ffcc 	bl	28770 <printk>
   217d8:	4812      	ldr	r0, [pc, #72]	; (21824 <nrfx_nvmc_word_write+0x68>)
   217da:	f44f 71ca 	mov.w	r1, #404	; 0x194
   217de:	f007 f9b8 	bl	28b52 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   217e2:	07a1      	lsls	r1, r4, #30
   217e4:	d00b      	beq.n	217fe <nrfx_nvmc_word_write+0x42>
   217e6:	4910      	ldr	r1, [pc, #64]	; (21828 <nrfx_nvmc_word_write+0x6c>)
   217e8:	480d      	ldr	r0, [pc, #52]	; (21820 <nrfx_nvmc_word_write+0x64>)
   217ea:	4a0e      	ldr	r2, [pc, #56]	; (21824 <nrfx_nvmc_word_write+0x68>)
   217ec:	f240 1395 	movw	r3, #405	; 0x195
   217f0:	f006 ffbe 	bl	28770 <printk>
   217f4:	480b      	ldr	r0, [pc, #44]	; (21824 <nrfx_nvmc_word_write+0x68>)
   217f6:	f240 1195 	movw	r1, #405	; 0x195
   217fa:	f007 f9aa 	bl	28b52 <assert_post_action>
   217fe:	4b0b      	ldr	r3, [pc, #44]	; (2182c <nrfx_nvmc_word_write+0x70>)
   21800:	2201      	movs	r2, #1
   21802:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21806:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2180a:	07d2      	lsls	r2, r2, #31
   2180c:	d5fb      	bpl.n	21806 <nrfx_nvmc_word_write+0x4a>
    *(volatile uint32_t *)addr = value;
   2180e:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   21810:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   21814:	2200      	movs	r2, #0
   21816:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   2181a:	bd38      	pop	{r3, r4, r5, pc}
   2181c:	0003217d 	.word	0x0003217d
   21820:	0002e915 	.word	0x0002e915
   21824:	00032107 	.word	0x00032107
   21828:	00032197 	.word	0x00032197
   2182c:	4001e000 	.word	0x4001e000

00021830 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   21830:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   21832:	4801      	ldr	r0, [pc, #4]	; (21838 <nrfx_ppi_channel_alloc+0x8>)
   21834:	f7ff bb74 	b.w	20f20 <nrfx_flag32_alloc>
   21838:	2000063c 	.word	0x2000063c

0002183c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   2183c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2183e:	4c11      	ldr	r4, [pc, #68]	; (21884 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   21840:	4a11      	ldr	r2, [pc, #68]	; (21888 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   21842:	4912      	ldr	r1, [pc, #72]	; (2188c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21844:	2303      	movs	r3, #3
   21846:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21848:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2184a:	4b11      	ldr	r3, [pc, #68]	; (21890 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   2184c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2184e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   21850:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21854:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   21856:	2300      	movs	r3, #0
   21858:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2185a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2185c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   2185e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   21860:	4a0c      	ldr	r2, [pc, #48]	; (21894 <_DoInit+0x58>)
   21862:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   21864:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   21866:	2210      	movs	r2, #16
   21868:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2186a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2186c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   2186e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   21870:	f009 f89b 	bl	2a9aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   21874:	4908      	ldr	r1, [pc, #32]	; (21898 <_DoInit+0x5c>)
   21876:	4620      	mov	r0, r4
   21878:	f009 f897 	bl	2a9aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   2187c:	2320      	movs	r3, #32
   2187e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   21880:	bd10      	pop	{r4, pc}
   21882:	bf00      	nop
   21884:	20002c54 	.word	0x20002c54
   21888:	000321c0 	.word	0x000321c0
   2188c:	000321c9 	.word	0x000321c9
   21890:	20003ebe 	.word	0x20003ebe
   21894:	20003eae 	.word	0x20003eae
   21898:	000321cd 	.word	0x000321cd

0002189c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2189c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   218a0:	4f23      	ldr	r7, [pc, #140]	; (21930 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   218a2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   218a6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   218a8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   218ac:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   218ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   218b0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   218b2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   218b4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   218b6:	d834      	bhi.n	21922 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   218b8:	f8d2 a020 	ldr.w	sl, [r2, #32]
   218bc:	ebaa 0905 	sub.w	r9, sl, r5
   218c0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   218c4:	4294      	cmp	r4, r2
   218c6:	d811      	bhi.n	218ec <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   218c8:	f04f 0918 	mov.w	r9, #24
   218cc:	fb06 9309 	mla	r3, r6, r9, r9
   218d0:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   218d2:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   218d4:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   218d6:	4641      	mov	r1, r8
   218d8:	4428      	add	r0, r5
   218da:	f009 f8de 	bl	2aa9a <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   218de:	fb09 7606 	mla	r6, r9, r6, r7
   218e2:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   218e4:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   218e6:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   218e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   218ec:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   218ee:	429c      	cmp	r4, r3
   218f0:	d81b      	bhi.n	2192a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   218f2:	fb00 bb0b 	mla	fp, r0, fp, fp
   218f6:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   218f8:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   218fa:	f8db 0004 	ldr.w	r0, [fp, #4]
   218fe:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   21900:	4428      	add	r0, r5
   21902:	f009 f8ca 	bl	2aa9a <memcpy>
      if (NumBytes) {
   21906:	ebb4 040a 	subs.w	r4, r4, sl
   2190a:	d006      	beq.n	2191a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   2190c:	f8db 0004 	ldr.w	r0, [fp, #4]
   21910:	4622      	mov	r2, r4
   21912:	eb08 0109 	add.w	r1, r8, r9
   21916:	f009 f8c0 	bl	2aa9a <memcpy>
      pRing->WrOff = NumBytes;
   2191a:	2018      	movs	r0, #24
   2191c:	fb00 7606 	mla	r6, r0, r6, r7
   21920:	e7e0      	b.n	218e4 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   21922:	3b01      	subs	r3, #1
   21924:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   21926:	42a3      	cmp	r3, r4
   21928:	d2ce      	bcs.n	218c8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   2192a:	2000      	movs	r0, #0
   2192c:	e7dc      	b.n	218e8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   2192e:	bf00      	nop
   21930:	20002c54 	.word	0x20002c54

00021934 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   21934:	4b03      	ldr	r3, [pc, #12]	; (21944 <SEGGER_RTT_HasDataUp+0x10>)
   21936:	2218      	movs	r2, #24
   21938:	fb02 3300 	mla	r3, r2, r0, r3
   2193c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   2193e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   21940:	1a80      	subs	r0, r0, r2
   21942:	4770      	bx	lr
   21944:	20002c54 	.word	0x20002c54

00021948 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21948:	4b0e      	ldr	r3, [pc, #56]	; (21984 <z_sys_init_run_level+0x3c>)
{
   2194a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2194c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21950:	3001      	adds	r0, #1
   21952:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   21956:	42a6      	cmp	r6, r4
   21958:	d800      	bhi.n	2195c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2195a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   2195c:	e9d4 3500 	ldrd	r3, r5, [r4]
   21960:	4628      	mov	r0, r5
   21962:	4798      	blx	r3
		if (dev != NULL) {
   21964:	b165      	cbz	r5, 21980 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   21966:	68eb      	ldr	r3, [r5, #12]
   21968:	b130      	cbz	r0, 21978 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2196a:	2800      	cmp	r0, #0
   2196c:	bfb8      	it	lt
   2196e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   21970:	28ff      	cmp	r0, #255	; 0xff
   21972:	bfa8      	it	ge
   21974:	20ff      	movge	r0, #255	; 0xff
   21976:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   21978:	785a      	ldrb	r2, [r3, #1]
   2197a:	f042 0201 	orr.w	r2, r2, #1
   2197e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21980:	3408      	adds	r4, #8
   21982:	e7e8      	b.n	21956 <z_sys_init_run_level+0xe>
   21984:	0002e33c 	.word	0x0002e33c

00021988 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   21988:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   2198a:	4605      	mov	r5, r0
   2198c:	b910      	cbnz	r0, 21994 <z_impl_device_get_binding+0xc>
		return NULL;
   2198e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   21990:	4620      	mov	r0, r4
   21992:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   21994:	7803      	ldrb	r3, [r0, #0]
   21996:	2b00      	cmp	r3, #0
   21998:	d0f9      	beq.n	2198e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   2199a:	4a0f      	ldr	r2, [pc, #60]	; (219d8 <z_impl_device_get_binding+0x50>)
   2199c:	4c0f      	ldr	r4, [pc, #60]	; (219dc <z_impl_device_get_binding+0x54>)
   2199e:	4616      	mov	r6, r2
   219a0:	4294      	cmp	r4, r2
   219a2:	d108      	bne.n	219b6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   219a4:	4c0d      	ldr	r4, [pc, #52]	; (219dc <z_impl_device_get_binding+0x54>)
   219a6:	42b4      	cmp	r4, r6
   219a8:	d0f1      	beq.n	2198e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   219aa:	4620      	mov	r0, r4
   219ac:	f00b fc3a 	bl	2d224 <z_device_ready>
   219b0:	b950      	cbnz	r0, 219c8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   219b2:	3418      	adds	r4, #24
   219b4:	e7f7      	b.n	219a6 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   219b6:	4620      	mov	r0, r4
   219b8:	f00b fc34 	bl	2d224 <z_device_ready>
   219bc:	b110      	cbz	r0, 219c4 <z_impl_device_get_binding+0x3c>
   219be:	6823      	ldr	r3, [r4, #0]
   219c0:	42ab      	cmp	r3, r5
   219c2:	d0e5      	beq.n	21990 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   219c4:	3418      	adds	r4, #24
   219c6:	e7eb      	b.n	219a0 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   219c8:	6821      	ldr	r1, [r4, #0]
   219ca:	4628      	mov	r0, r5
   219cc:	f009 f81a 	bl	2aa04 <strcmp>
   219d0:	2800      	cmp	r0, #0
   219d2:	d1ee      	bne.n	219b2 <z_impl_device_get_binding+0x2a>
   219d4:	e7dc      	b.n	21990 <z_impl_device_get_binding+0x8>
   219d6:	bf00      	nop
   219d8:	0002d6f8 	.word	0x0002d6f8
   219dc:	0002d638 	.word	0x0002d638

000219e0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   219e0:	4b01      	ldr	r3, [pc, #4]	; (219e8 <z_impl_z_errno+0x8>)
   219e2:	6898      	ldr	r0, [r3, #8]
}
   219e4:	3064      	adds	r0, #100	; 0x64
   219e6:	4770      	bx	lr
   219e8:	20002cfc 	.word	0x20002cfc

000219ec <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   219ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   219f0:	4605      	mov	r5, r0
   219f2:	460f      	mov	r7, r1
	__asm__ volatile(
   219f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   219f8:	f3ef 8811 	mrs	r8, BASEPRI
   219fc:	f383 8812 	msr	BASEPRI_MAX, r3
   21a00:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   21a04:	f002 ff58 	bl	248b8 <z_impl_z_current_get>
   21a08:	4c27      	ldr	r4, [pc, #156]	; (21aa8 <z_fatal_error+0xbc>)
   21a0a:	4b28      	ldr	r3, [pc, #160]	; (21aac <z_fatal_error+0xc0>)
   21a0c:	1ae4      	subs	r4, r4, r3
   21a0e:	2d04      	cmp	r5, #4
   21a10:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   21a14:	bf96      	itet	ls
   21a16:	4a26      	ldrls	r2, [pc, #152]	; (21ab0 <z_fatal_error+0xc4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21a18:	4a26      	ldrhi	r2, [pc, #152]	; (21ab4 <z_fatal_error+0xc8>)
   21a1a:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   21a1e:	01a4      	lsls	r4, r4, #6
   21a20:	f044 0301 	orr.w	r3, r4, #1
   21a24:	4606      	mov	r6, r0
   21a26:	f8ad 3000 	strh.w	r3, [sp]
   21a2a:	4823      	ldr	r0, [pc, #140]	; (21ab8 <z_fatal_error+0xcc>)
   21a2c:	2300      	movs	r3, #0
   21a2e:	4629      	mov	r1, r5
   21a30:	f007 f8f7 	bl	28c22 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21a34:	b147      	cbz	r7, 21a48 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21a36:	69fb      	ldr	r3, [r7, #28]
   21a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
   21a3c:	b123      	cbz	r3, 21a48 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   21a3e:	481f      	ldr	r0, [pc, #124]	; (21abc <z_fatal_error+0xd0>)
   21a40:	f044 0101 	orr.w	r1, r4, #1
   21a44:	f007 f8b3 	bl	28bae <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21a48:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21a4c:	b12e      	cbz	r6, 21a5a <z_fatal_error+0x6e>
   21a4e:	4630      	mov	r0, r6
   21a50:	f00b fc1f 	bl	2d292 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   21a54:	b108      	cbz	r0, 21a5a <z_fatal_error+0x6e>
   21a56:	7803      	ldrb	r3, [r0, #0]
   21a58:	b903      	cbnz	r3, 21a5c <z_fatal_error+0x70>
		thread_name = "unknown";
   21a5a:	4819      	ldr	r0, [pc, #100]	; (21ac0 <z_fatal_error+0xd4>)
   21a5c:	f7f0 fca0 	bl	123a0 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   21a60:	4623      	mov	r3, r4
   21a62:	4602      	mov	r2, r0
   21a64:	4631      	mov	r1, r6
   21a66:	4817      	ldr	r0, [pc, #92]	; (21ac4 <z_fatal_error+0xd8>)
   21a68:	f007 f8c2 	bl	28bf0 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   21a6c:	4639      	mov	r1, r7
   21a6e:	4628      	mov	r0, r5
   21a70:	f7fe f8c0 	bl	1fbf4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   21a74:	2d04      	cmp	r5, #4
   21a76:	d10c      	bne.n	21a92 <z_fatal_error+0xa6>
   21a78:	4913      	ldr	r1, [pc, #76]	; (21ac8 <z_fatal_error+0xdc>)
   21a7a:	4a14      	ldr	r2, [pc, #80]	; (21acc <z_fatal_error+0xe0>)
   21a7c:	4814      	ldr	r0, [pc, #80]	; (21ad0 <z_fatal_error+0xe4>)
   21a7e:	238f      	movs	r3, #143	; 0x8f
   21a80:	f006 fe76 	bl	28770 <printk>
   21a84:	4813      	ldr	r0, [pc, #76]	; (21ad4 <z_fatal_error+0xe8>)
   21a86:	f006 fe73 	bl	28770 <printk>
   21a8a:	4810      	ldr	r0, [pc, #64]	; (21acc <z_fatal_error+0xe0>)
   21a8c:	218f      	movs	r1, #143	; 0x8f
   21a8e:	f007 f860 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   21a92:	f388 8811 	msr	BASEPRI, r8
   21a96:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   21a9a:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   21a9c:	b002      	add	sp, #8
   21a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21aa2:	f7f3 b96f 	b.w	14d84 <z_impl_k_thread_abort>
   21aa6:	bf00      	nop
   21aa8:	0002da10 	.word	0x0002da10
   21aac:	0002d948 	.word	0x0002d948
   21ab0:	0002e354 	.word	0x0002e354
   21ab4:	000321d4 	.word	0x000321d4
   21ab8:	000321ea 	.word	0x000321ea
   21abc:	00032212 	.word	0x00032212
   21ac0:	000321e2 	.word	0x000321e2
   21ac4:	00032233 	.word	0x00032233
   21ac8:	0003226d 	.word	0x0003226d
   21acc:	0003224b 	.word	0x0003224b
   21ad0:	0002e915 	.word	0x0002e915
   21ad4:	0003228a 	.word	0x0003228a

00021ad8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   21ad8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   21ada:	2300      	movs	r3, #0
{
   21adc:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   21ade:	2201      	movs	r2, #1
   21ae0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21ae4:	220f      	movs	r2, #15
   21ae6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   21aea:	4c0d      	ldr	r4, [pc, #52]	; (21b20 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21aec:	4a0d      	ldr	r2, [pc, #52]	; (21b24 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   21aee:	9301      	str	r3, [sp, #4]
   21af0:	490d      	ldr	r1, [pc, #52]	; (21b28 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21af2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   21af4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21af8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   21afc:	f44f 75b0 	mov.w	r5, #352	; 0x160
   21b00:	9300      	str	r3, [sp, #0]
   21b02:	fb05 1100 	mla	r1, r5, r0, r1
   21b06:	4b09      	ldr	r3, [pc, #36]	; (21b2c <init_idle_thread+0x54>)
   21b08:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21b0c:	4620      	mov	r0, r4
   21b0e:	f000 fae3 	bl	220d8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21b12:	7b63      	ldrb	r3, [r4, #13]
   21b14:	f023 0304 	bic.w	r3, r3, #4
   21b18:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   21b1a:	b007      	add	sp, #28
   21b1c:	bd30      	pop	{r4, r5, pc}
   21b1e:	bf00      	nop
   21b20:	20002178 	.word	0x20002178
   21b24:	20002cfc 	.word	0x20002cfc
   21b28:	20006fa0 	.word	0x20006fa0
   21b2c:	000223a9 	.word	0x000223a9

00021b30 <bg_thread_main>:
{
   21b30:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   21b32:	4b0a      	ldr	r3, [pc, #40]	; (21b5c <bg_thread_main+0x2c>)
   21b34:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21b36:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21b38:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21b3a:	f7ff ff05 	bl	21948 <z_sys_init_run_level>
	boot_banner();
   21b3e:	f004 f8e9 	bl	25d14 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   21b42:	2003      	movs	r0, #3
   21b44:	f7ff ff00 	bl	21948 <z_sys_init_run_level>
	z_init_static_threads();
   21b48:	f000 fb78 	bl	2223c <z_init_static_threads>
	main();
   21b4c:	f7ee ff52 	bl	109f4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21b50:	4a03      	ldr	r2, [pc, #12]	; (21b60 <bg_thread_main+0x30>)
   21b52:	7b13      	ldrb	r3, [r2, #12]
   21b54:	f023 0301 	bic.w	r3, r3, #1
   21b58:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21b5a:	bd08      	pop	{r3, pc}
   21b5c:	200042be 	.word	0x200042be
   21b60:	200021f8 	.word	0x200021f8

00021b64 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   21b64:	4802      	ldr	r0, [pc, #8]	; (21b70 <z_bss_zero+0xc>)
   21b66:	4a03      	ldr	r2, [pc, #12]	; (21b74 <z_bss_zero+0x10>)
   21b68:	2100      	movs	r1, #0
   21b6a:	1a12      	subs	r2, r2, r0
   21b6c:	f008 bfa0 	b.w	2aab0 <memset>
   21b70:	20000ae0 	.word	0x20000ae0
   21b74:	2000447c 	.word	0x2000447c

00021b78 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21b78:	b580      	push	{r7, lr}
   21b7a:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   21b7c:	f7f0 fb38 	bl	121f0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21b80:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 21c5c <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21b84:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21b88:	4d2e      	ldr	r5, [pc, #184]	; (21c44 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   21b8a:	4e2f      	ldr	r6, [pc, #188]	; (21c48 <z_cstart+0xd0>)
   21b8c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21b8e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 21c60 <z_cstart+0xe8>
   21b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   21b96:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b98:	23e0      	movs	r3, #224	; 0xe0
   21b9a:	2400      	movs	r4, #0
   21b9c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21ba0:	2320      	movs	r3, #32
   21ba2:	77eb      	strb	r3, [r5, #31]
   21ba4:	762c      	strb	r4, [r5, #24]
   21ba6:	766c      	strb	r4, [r5, #25]
   21ba8:	76ac      	strb	r4, [r5, #26]
   21baa:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21bb0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21bb4:	626b      	str	r3, [r5, #36]	; 0x24
   21bb6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21bba:	f7f3 f859 	bl	14c70 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21bbe:	f7f2 fc0b 	bl	143d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21bc6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21bc8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   21bca:	f7f3 f9d1 	bl	14f70 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21bce:	f7f3 f8eb 	bl	14da8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   21bd2:	f240 1301 	movw	r3, #257	; 0x101
   21bd6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   21bda:	ab06      	add	r3, sp, #24
   21bdc:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   21bde:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   21be2:	f00b fb1e 	bl	2d222 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21be6:	4620      	mov	r0, r4
   21be8:	f7ff feae 	bl	21948 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21bec:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   21bee:	4d17      	ldr	r5, [pc, #92]	; (21c4c <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21bf0:	f7ff feaa 	bl	21948 <z_sys_init_run_level>
	z_sched_init();
   21bf4:	f002 fcca 	bl	2458c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21bf8:	4b15      	ldr	r3, [pc, #84]	; (21c50 <z_cstart+0xd8>)
   21bfa:	9305      	str	r3, [sp, #20]
   21bfc:	2301      	movs	r3, #1
   21bfe:	4915      	ldr	r1, [pc, #84]	; (21c54 <z_cstart+0xdc>)
   21c00:	9400      	str	r4, [sp, #0]
   21c02:	e9cd 4303 	strd	r4, r3, [sp, #12]
   21c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21c0a:	464b      	mov	r3, r9
   21c0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21c10:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   21c12:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21c14:	f000 fa60 	bl	220d8 <z_setup_new_thread>
   21c18:	7b6a      	ldrb	r2, [r5, #13]
   21c1a:	f022 0204 	bic.w	r2, r2, #4
   21c1e:	736a      	strb	r2, [r5, #13]
   21c20:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   21c22:	4628      	mov	r0, r5
   21c24:	f002 f8b2 	bl	23d8c <z_ready_thread>
		init_idle_thread(i);
   21c28:	4620      	mov	r0, r4
   21c2a:	f7ff ff55 	bl	21ad8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   21c2e:	4b0a      	ldr	r3, [pc, #40]	; (21c58 <z_cstart+0xe0>)
   21c30:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21c32:	464a      	mov	r2, r9
   21c34:	4639      	mov	r1, r7
   21c36:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   21c38:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   21c3a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21c3e:	f7f2 fd43 	bl	146c8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21c42:	bf00      	nop
   21c44:	e000ed00 	.word	0xe000ed00
   21c48:	20002cfc 	.word	0x20002cfc
   21c4c:	200021f8 	.word	0x200021f8
   21c50:	00032309 	.word	0x00032309
   21c54:	20006780 	.word	0x20006780
   21c58:	20002178 	.word	0x20002178
   21c5c:	20007920 	.word	0x20007920
   21c60:	00021b31 	.word	0x00021b31

00021c64 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21c66:	4d0f      	ldr	r5, [pc, #60]	; (21ca4 <statics_init+0x40>)
   21c68:	4c0f      	ldr	r4, [pc, #60]	; (21ca8 <statics_init+0x44>)
   21c6a:	4e10      	ldr	r6, [pc, #64]	; (21cac <statics_init+0x48>)
   21c6c:	462f      	mov	r7, r5
   21c6e:	42ac      	cmp	r4, r5
   21c70:	d90c      	bls.n	21c8c <statics_init+0x28>
   21c72:	490f      	ldr	r1, [pc, #60]	; (21cb0 <statics_init+0x4c>)
   21c74:	480f      	ldr	r0, [pc, #60]	; (21cb4 <statics_init+0x50>)
   21c76:	2318      	movs	r3, #24
   21c78:	4632      	mov	r2, r6
   21c7a:	f006 fd79 	bl	28770 <printk>
   21c7e:	480e      	ldr	r0, [pc, #56]	; (21cb8 <statics_init+0x54>)
   21c80:	f006 fd76 	bl	28770 <printk>
   21c84:	2118      	movs	r1, #24
   21c86:	4630      	mov	r0, r6
   21c88:	f006 ff63 	bl	28b52 <assert_post_action>
   21c8c:	42bc      	cmp	r4, r7
   21c8e:	d301      	bcc.n	21c94 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   21c90:	2000      	movs	r0, #0
   21c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21c94:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   21c98:	4620      	mov	r0, r4
   21c9a:	f00b facd 	bl	2d238 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21c9e:	3418      	adds	r4, #24
   21ca0:	e7e5      	b.n	21c6e <statics_init+0xa>
   21ca2:	bf00      	nop
   21ca4:	20000838 	.word	0x20000838
   21ca8:	20000820 	.word	0x20000820
   21cac:	00032311 	.word	0x00032311
   21cb0:	00032333 	.word	0x00032333
   21cb4:	0002e915 	.word	0x0002e915
   21cb8:	0002f2e8 	.word	0x0002f2e8

00021cbc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   21cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cc0:	b087      	sub	sp, #28
   21cc2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   21cc6:	4606      	mov	r6, r0
   21cc8:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21cca:	4640      	mov	r0, r8
   21ccc:	4649      	mov	r1, r9
{
   21cce:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21cd0:	f00b fbb8 	bl	2d444 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21cd4:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   21cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   21cdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ce0:	f3ef 8511 	mrs	r5, BASEPRI
   21ce4:	f383 8812 	msr	BASEPRI_MAX, r3
   21ce8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21cec:	4620      	mov	r0, r4
   21cee:	f000 fb35 	bl	2235c <z_spin_lock_valid>
   21cf2:	b968      	cbnz	r0, 21d10 <k_heap_aligned_alloc+0x54>
   21cf4:	4a3f      	ldr	r2, [pc, #252]	; (21df4 <k_heap_aligned_alloc+0x138>)
   21cf6:	4940      	ldr	r1, [pc, #256]	; (21df8 <k_heap_aligned_alloc+0x13c>)
   21cf8:	4840      	ldr	r0, [pc, #256]	; (21dfc <k_heap_aligned_alloc+0x140>)
   21cfa:	2381      	movs	r3, #129	; 0x81
   21cfc:	f006 fd38 	bl	28770 <printk>
   21d00:	483f      	ldr	r0, [pc, #252]	; (21e00 <k_heap_aligned_alloc+0x144>)
   21d02:	4621      	mov	r1, r4
   21d04:	f006 fd34 	bl	28770 <printk>
   21d08:	483a      	ldr	r0, [pc, #232]	; (21df4 <k_heap_aligned_alloc+0x138>)
   21d0a:	2181      	movs	r1, #129	; 0x81
   21d0c:	f006 ff21 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   21d10:	4620      	mov	r0, r4
   21d12:	f000 fb41 	bl	22398 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21d16:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   21d1a:	b17b      	cbz	r3, 21d3c <k_heap_aligned_alloc+0x80>
   21d1c:	ea58 0309 	orrs.w	r3, r8, r9
   21d20:	d00c      	beq.n	21d3c <k_heap_aligned_alloc+0x80>
   21d22:	4938      	ldr	r1, [pc, #224]	; (21e04 <k_heap_aligned_alloc+0x148>)
   21d24:	4a38      	ldr	r2, [pc, #224]	; (21e08 <k_heap_aligned_alloc+0x14c>)
   21d26:	4835      	ldr	r0, [pc, #212]	; (21dfc <k_heap_aligned_alloc+0x140>)
   21d28:	2349      	movs	r3, #73	; 0x49
   21d2a:	f006 fd21 	bl	28770 <printk>
   21d2e:	4837      	ldr	r0, [pc, #220]	; (21e0c <k_heap_aligned_alloc+0x150>)
   21d30:	f006 fd1e 	bl	28770 <printk>
   21d34:	4834      	ldr	r0, [pc, #208]	; (21e08 <k_heap_aligned_alloc+0x14c>)
   21d36:	2149      	movs	r1, #73	; 0x49
   21d38:	f006 ff0b 	bl	28b52 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d3c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 21df4 <k_heap_aligned_alloc+0x138>
   21d40:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 21df8 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   21d44:	4652      	mov	r2, sl
   21d46:	4659      	mov	r1, fp
   21d48:	4630      	mov	r0, r6
   21d4a:	f7ef fcfd 	bl	11748 <sys_heap_aligned_alloc>
   21d4e:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   21d50:	f003 f9d6 	bl	25100 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   21d54:	b1cf      	cbz	r7, 21d8a <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d56:	4620      	mov	r0, r4
   21d58:	f000 fb0e 	bl	22378 <z_spin_unlock_valid>
   21d5c:	b968      	cbnz	r0, 21d7a <k_heap_aligned_alloc+0xbe>
   21d5e:	4a25      	ldr	r2, [pc, #148]	; (21df4 <k_heap_aligned_alloc+0x138>)
   21d60:	492b      	ldr	r1, [pc, #172]	; (21e10 <k_heap_aligned_alloc+0x154>)
   21d62:	4826      	ldr	r0, [pc, #152]	; (21dfc <k_heap_aligned_alloc+0x140>)
   21d64:	23ac      	movs	r3, #172	; 0xac
   21d66:	f006 fd03 	bl	28770 <printk>
   21d6a:	482a      	ldr	r0, [pc, #168]	; (21e14 <k_heap_aligned_alloc+0x158>)
   21d6c:	4621      	mov	r1, r4
   21d6e:	f006 fcff 	bl	28770 <printk>
   21d72:	4820      	ldr	r0, [pc, #128]	; (21df4 <k_heap_aligned_alloc+0x138>)
   21d74:	21ac      	movs	r1, #172	; 0xac
   21d76:	f006 feec 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   21d7a:	f385 8811 	msr	BASEPRI, r5
   21d7e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   21d82:	4638      	mov	r0, r7
   21d84:	b007      	add	sp, #28
   21d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   21d8a:	9b04      	ldr	r3, [sp, #16]
   21d8c:	1a1b      	subs	r3, r3, r0
   21d8e:	9302      	str	r3, [sp, #8]
   21d90:	9b05      	ldr	r3, [sp, #20]
   21d92:	eb63 0301 	sbc.w	r3, r3, r1
   21d96:	9303      	str	r3, [sp, #12]
   21d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21d9c:	2a01      	cmp	r2, #1
   21d9e:	f173 0300 	sbcs.w	r3, r3, #0
   21da2:	dbd8      	blt.n	21d56 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   21da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21da8:	4629      	mov	r1, r5
   21daa:	e9cd 2300 	strd	r2, r3, [sp]
   21dae:	4620      	mov	r0, r4
   21db0:	f106 020c 	add.w	r2, r6, #12
   21db4:	f002 f99c 	bl	240f0 <z_pend_curr>
	__asm__ volatile(
   21db8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21dbc:	f3ef 8511 	mrs	r5, BASEPRI
   21dc0:	f383 8812 	msr	BASEPRI_MAX, r3
   21dc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21dc8:	4620      	mov	r0, r4
   21dca:	f000 fac7 	bl	2235c <z_spin_lock_valid>
   21dce:	b968      	cbnz	r0, 21dec <k_heap_aligned_alloc+0x130>
   21dd0:	480a      	ldr	r0, [pc, #40]	; (21dfc <k_heap_aligned_alloc+0x140>)
   21dd2:	2381      	movs	r3, #129	; 0x81
   21dd4:	4642      	mov	r2, r8
   21dd6:	4649      	mov	r1, r9
   21dd8:	f006 fcca 	bl	28770 <printk>
   21ddc:	4808      	ldr	r0, [pc, #32]	; (21e00 <k_heap_aligned_alloc+0x144>)
   21dde:	4621      	mov	r1, r4
   21de0:	f006 fcc6 	bl	28770 <printk>
   21de4:	2181      	movs	r1, #129	; 0x81
   21de6:	4640      	mov	r0, r8
   21de8:	f006 feb3 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   21dec:	4620      	mov	r0, r4
   21dee:	f000 fad3 	bl	22398 <z_spin_lock_set_owner>
	return k;
   21df2:	e7a7      	b.n	21d44 <k_heap_aligned_alloc+0x88>
   21df4:	0002ebfd 	.word	0x0002ebfd
   21df8:	0002ec4f 	.word	0x0002ec4f
   21dfc:	0002e915 	.word	0x0002e915
   21e00:	0002ec64 	.word	0x0002ec64
   21e04:	00032349 	.word	0x00032349
   21e08:	00032311 	.word	0x00032311
   21e0c:	00031821 	.word	0x00031821
   21e10:	0002ec23 	.word	0x0002ec23
   21e14:	0002ec3a 	.word	0x0002ec3a

00021e18 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   21e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e1a:	4605      	mov	r5, r0
   21e1c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   21e1e:	f100 0414 	add.w	r4, r0, #20
   21e22:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e26:	f3ef 8711 	mrs	r7, BASEPRI
   21e2a:	f383 8812 	msr	BASEPRI_MAX, r3
   21e2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e32:	4620      	mov	r0, r4
   21e34:	f000 fa92 	bl	2235c <z_spin_lock_valid>
   21e38:	b968      	cbnz	r0, 21e56 <k_heap_free+0x3e>
   21e3a:	4a1b      	ldr	r2, [pc, #108]	; (21ea8 <k_heap_free+0x90>)
   21e3c:	491b      	ldr	r1, [pc, #108]	; (21eac <k_heap_free+0x94>)
   21e3e:	481c      	ldr	r0, [pc, #112]	; (21eb0 <k_heap_free+0x98>)
   21e40:	2381      	movs	r3, #129	; 0x81
   21e42:	f006 fc95 	bl	28770 <printk>
   21e46:	481b      	ldr	r0, [pc, #108]	; (21eb4 <k_heap_free+0x9c>)
   21e48:	4621      	mov	r1, r4
   21e4a:	f006 fc91 	bl	28770 <printk>
   21e4e:	4816      	ldr	r0, [pc, #88]	; (21ea8 <k_heap_free+0x90>)
   21e50:	2181      	movs	r1, #129	; 0x81
   21e52:	f006 fe7e 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   21e56:	4620      	mov	r0, r4
   21e58:	f000 fa9e 	bl	22398 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   21e5c:	4628      	mov	r0, r5
   21e5e:	4631      	mov	r1, r6
   21e60:	f7ef fc26 	bl	116b0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   21e64:	f105 000c 	add.w	r0, r5, #12
   21e68:	f00b fad4 	bl	2d414 <z_unpend_all>
   21e6c:	b128      	cbz	r0, 21e7a <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   21e6e:	4639      	mov	r1, r7
   21e70:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21e72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   21e76:	f001 bce9 	b.w	2384c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e7a:	4620      	mov	r0, r4
   21e7c:	f000 fa7c 	bl	22378 <z_spin_unlock_valid>
   21e80:	b968      	cbnz	r0, 21e9e <k_heap_free+0x86>
   21e82:	4a09      	ldr	r2, [pc, #36]	; (21ea8 <k_heap_free+0x90>)
   21e84:	490c      	ldr	r1, [pc, #48]	; (21eb8 <k_heap_free+0xa0>)
   21e86:	480a      	ldr	r0, [pc, #40]	; (21eb0 <k_heap_free+0x98>)
   21e88:	23ac      	movs	r3, #172	; 0xac
   21e8a:	f006 fc71 	bl	28770 <printk>
   21e8e:	480b      	ldr	r0, [pc, #44]	; (21ebc <k_heap_free+0xa4>)
   21e90:	4621      	mov	r1, r4
   21e92:	f006 fc6d 	bl	28770 <printk>
   21e96:	4804      	ldr	r0, [pc, #16]	; (21ea8 <k_heap_free+0x90>)
   21e98:	21ac      	movs	r1, #172	; 0xac
   21e9a:	f006 fe5a 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   21e9e:	f387 8811 	msr	BASEPRI, r7
   21ea2:	f3bf 8f6f 	isb	sy
}
   21ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ea8:	0002ebfd 	.word	0x0002ebfd
   21eac:	0002ec4f 	.word	0x0002ec4f
   21eb0:	0002e915 	.word	0x0002e915
   21eb4:	0002ec64 	.word	0x0002ec64
   21eb8:	0002ec23 	.word	0x0002ec23
   21ebc:	0002ec3a 	.word	0x0002ec3a

00021ec0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   21ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21ec4:	4d16      	ldr	r5, [pc, #88]	; (21f20 <init_mem_slab_module+0x60>)
   21ec6:	4c17      	ldr	r4, [pc, #92]	; (21f24 <init_mem_slab_module+0x64>)
   21ec8:	4e17      	ldr	r6, [pc, #92]	; (21f28 <init_mem_slab_module+0x68>)
   21eca:	46a8      	mov	r8, r5
   21ecc:	42ac      	cmp	r4, r5
   21ece:	d90c      	bls.n	21eea <init_mem_slab_module+0x2a>
   21ed0:	4916      	ldr	r1, [pc, #88]	; (21f2c <init_mem_slab_module+0x6c>)
   21ed2:	4817      	ldr	r0, [pc, #92]	; (21f30 <init_mem_slab_module+0x70>)
   21ed4:	233c      	movs	r3, #60	; 0x3c
   21ed6:	4632      	mov	r2, r6
   21ed8:	f006 fc4a 	bl	28770 <printk>
   21edc:	4815      	ldr	r0, [pc, #84]	; (21f34 <init_mem_slab_module+0x74>)
   21ede:	f006 fc47 	bl	28770 <printk>
   21ee2:	213c      	movs	r1, #60	; 0x3c
   21ee4:	4630      	mov	r0, r6
   21ee6:	f006 fe34 	bl	28b52 <assert_post_action>
   21eea:	4544      	cmp	r4, r8
   21eec:	d302      	bcc.n	21ef4 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   21eee:	2000      	movs	r0, #0
	return rc;
}
   21ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21ef4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   21ef8:	ea41 0302 	orr.w	r3, r1, r2
   21efc:	f013 0303 	ands.w	r3, r3, #3
   21f00:	d10b      	bne.n	21f1a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   21f02:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   21f04:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   21f06:	4283      	cmp	r3, r0
   21f08:	d101      	bne.n	21f0e <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21f0a:	3420      	adds	r4, #32
   21f0c:	e7de      	b.n	21ecc <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   21f0e:	69a7      	ldr	r7, [r4, #24]
   21f10:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   21f12:	3301      	adds	r3, #1
		slab->free_list = p;
   21f14:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   21f16:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   21f18:	e7f5      	b.n	21f06 <init_mem_slab_module+0x46>
		return -EINVAL;
   21f1a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   21f1e:	e7e7      	b.n	21ef0 <init_mem_slab_module+0x30>
   21f20:	20000820 	.word	0x20000820
   21f24:	200007c0 	.word	0x200007c0
   21f28:	0003238e 	.word	0x0003238e
   21f2c:	000323b3 	.word	0x000323b3
   21f30:	0002e915 	.word	0x0002e915
   21f34:	0002f2e8 	.word	0x0002f2e8

00021f38 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21f3c:	4604      	mov	r4, r0
   21f3e:	460e      	mov	r6, r1
   21f40:	4690      	mov	r8, r2
   21f42:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   21f44:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21f48:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f4c:	f3ef 8711 	mrs	r7, BASEPRI
   21f50:	f383 8812 	msr	BASEPRI_MAX, r3
   21f54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f58:	4628      	mov	r0, r5
   21f5a:	f000 f9ff 	bl	2235c <z_spin_lock_valid>
   21f5e:	b968      	cbnz	r0, 21f7c <k_mem_slab_alloc+0x44>
   21f60:	4a24      	ldr	r2, [pc, #144]	; (21ff4 <k_mem_slab_alloc+0xbc>)
   21f62:	4925      	ldr	r1, [pc, #148]	; (21ff8 <k_mem_slab_alloc+0xc0>)
   21f64:	4825      	ldr	r0, [pc, #148]	; (21ffc <k_mem_slab_alloc+0xc4>)
   21f66:	2381      	movs	r3, #129	; 0x81
   21f68:	f006 fc02 	bl	28770 <printk>
   21f6c:	4824      	ldr	r0, [pc, #144]	; (22000 <k_mem_slab_alloc+0xc8>)
   21f6e:	4629      	mov	r1, r5
   21f70:	f006 fbfe 	bl	28770 <printk>
   21f74:	481f      	ldr	r0, [pc, #124]	; (21ff4 <k_mem_slab_alloc+0xbc>)
   21f76:	2181      	movs	r1, #129	; 0x81
   21f78:	f006 fdeb 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f7c:	4628      	mov	r0, r5
   21f7e:	f000 fa0b 	bl	22398 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21f82:	69a3      	ldr	r3, [r4, #24]
   21f84:	b1eb      	cbz	r3, 21fc2 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   21f86:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   21f88:	681b      	ldr	r3, [r3, #0]
   21f8a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   21f8c:	69e3      	ldr	r3, [r4, #28]
   21f8e:	3301      	adds	r3, #1
   21f90:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21f92:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f94:	4628      	mov	r0, r5
   21f96:	f000 f9ef 	bl	22378 <z_spin_unlock_valid>
   21f9a:	b968      	cbnz	r0, 21fb8 <k_mem_slab_alloc+0x80>
   21f9c:	4a15      	ldr	r2, [pc, #84]	; (21ff4 <k_mem_slab_alloc+0xbc>)
   21f9e:	4919      	ldr	r1, [pc, #100]	; (22004 <k_mem_slab_alloc+0xcc>)
   21fa0:	4816      	ldr	r0, [pc, #88]	; (21ffc <k_mem_slab_alloc+0xc4>)
   21fa2:	23ac      	movs	r3, #172	; 0xac
   21fa4:	f006 fbe4 	bl	28770 <printk>
   21fa8:	4817      	ldr	r0, [pc, #92]	; (22008 <k_mem_slab_alloc+0xd0>)
   21faa:	4629      	mov	r1, r5
   21fac:	f006 fbe0 	bl	28770 <printk>
   21fb0:	4810      	ldr	r0, [pc, #64]	; (21ff4 <k_mem_slab_alloc+0xbc>)
   21fb2:	21ac      	movs	r1, #172	; 0xac
   21fb4:	f006 fdcd 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   21fb8:	f387 8811 	msr	BASEPRI, r7
   21fbc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   21fc0:	e013      	b.n	21fea <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21fc2:	ea58 0209 	orrs.w	r2, r8, r9
   21fc6:	d103      	bne.n	21fd0 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   21fc8:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   21fca:	f06f 040b 	mvn.w	r4, #11
   21fce:	e7e1      	b.n	21f94 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21fd0:	4622      	mov	r2, r4
   21fd2:	e9cd 8900 	strd	r8, r9, [sp]
   21fd6:	4639      	mov	r1, r7
   21fd8:	4628      	mov	r0, r5
   21fda:	f002 f889 	bl	240f0 <z_pend_curr>
		if (result == 0) {
   21fde:	4604      	mov	r4, r0
   21fe0:	b918      	cbnz	r0, 21fea <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   21fe2:	4b0a      	ldr	r3, [pc, #40]	; (2200c <k_mem_slab_alloc+0xd4>)
   21fe4:	689b      	ldr	r3, [r3, #8]
   21fe6:	695b      	ldr	r3, [r3, #20]
   21fe8:	6033      	str	r3, [r6, #0]
}
   21fea:	4620      	mov	r0, r4
   21fec:	b003      	add	sp, #12
   21fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21ff2:	bf00      	nop
   21ff4:	0002ebfd 	.word	0x0002ebfd
   21ff8:	0002ec4f 	.word	0x0002ec4f
   21ffc:	0002e915 	.word	0x0002e915
   22000:	0002ec64 	.word	0x0002ec64
   22004:	0002ec23 	.word	0x0002ec23
   22008:	0002ec3a 	.word	0x0002ec3a
   2200c:	20002cfc 	.word	0x20002cfc

00022010 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   22010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22014:	4604      	mov	r4, r0
   22016:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   22018:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2201c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22020:	f3ef 8711 	mrs	r7, BASEPRI
   22024:	f383 8812 	msr	BASEPRI_MAX, r3
   22028:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2202c:	4628      	mov	r0, r5
   2202e:	f000 f995 	bl	2235c <z_spin_lock_valid>
   22032:	b968      	cbnz	r0, 22050 <k_mem_slab_free+0x40>
   22034:	4a22      	ldr	r2, [pc, #136]	; (220c0 <k_mem_slab_free+0xb0>)
   22036:	4923      	ldr	r1, [pc, #140]	; (220c4 <k_mem_slab_free+0xb4>)
   22038:	4823      	ldr	r0, [pc, #140]	; (220c8 <k_mem_slab_free+0xb8>)
   2203a:	2381      	movs	r3, #129	; 0x81
   2203c:	f006 fb98 	bl	28770 <printk>
   22040:	4822      	ldr	r0, [pc, #136]	; (220cc <k_mem_slab_free+0xbc>)
   22042:	4629      	mov	r1, r5
   22044:	f006 fb94 	bl	28770 <printk>
   22048:	481d      	ldr	r0, [pc, #116]	; (220c0 <k_mem_slab_free+0xb0>)
   2204a:	2181      	movs	r1, #129	; 0x81
   2204c:	f006 fd81 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   22050:	4628      	mov	r0, r5
   22052:	f000 f9a1 	bl	22398 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   22056:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2205a:	f1b8 0f00 	cmp.w	r8, #0
   2205e:	d10f      	bne.n	22080 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   22060:	4620      	mov	r0, r4
   22062:	f002 fa43 	bl	244ec <z_unpend_first_thread>

		if (pending_thread != NULL) {
   22066:	b158      	cbz	r0, 22080 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   22068:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2206a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2206c:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   22070:	f001 fe8c 	bl	23d8c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   22074:	4639      	mov	r1, r7
   22076:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   22078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   2207c:	f001 bbe6 	b.w	2384c <z_reschedule>
	**(char ***) mem = slab->free_list;
   22080:	6833      	ldr	r3, [r6, #0]
   22082:	69a2      	ldr	r2, [r4, #24]
   22084:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   22086:	6833      	ldr	r3, [r6, #0]
   22088:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   2208a:	69e3      	ldr	r3, [r4, #28]
   2208c:	3b01      	subs	r3, #1
   2208e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22090:	4628      	mov	r0, r5
   22092:	f000 f971 	bl	22378 <z_spin_unlock_valid>
   22096:	b968      	cbnz	r0, 220b4 <k_mem_slab_free+0xa4>
   22098:	4a09      	ldr	r2, [pc, #36]	; (220c0 <k_mem_slab_free+0xb0>)
   2209a:	490d      	ldr	r1, [pc, #52]	; (220d0 <k_mem_slab_free+0xc0>)
   2209c:	480a      	ldr	r0, [pc, #40]	; (220c8 <k_mem_slab_free+0xb8>)
   2209e:	23ac      	movs	r3, #172	; 0xac
   220a0:	f006 fb66 	bl	28770 <printk>
   220a4:	480b      	ldr	r0, [pc, #44]	; (220d4 <k_mem_slab_free+0xc4>)
   220a6:	4629      	mov	r1, r5
   220a8:	f006 fb62 	bl	28770 <printk>
   220ac:	4804      	ldr	r0, [pc, #16]	; (220c0 <k_mem_slab_free+0xb0>)
   220ae:	21ac      	movs	r1, #172	; 0xac
   220b0:	f006 fd4f 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   220b4:	f387 8811 	msr	BASEPRI, r7
   220b8:	f3bf 8f6f 	isb	sy
}
   220bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220c0:	0002ebfd 	.word	0x0002ebfd
   220c4:	0002ec4f 	.word	0x0002ec4f
   220c8:	0002e915 	.word	0x0002e915
   220cc:	0002ec64 	.word	0x0002ec64
   220d0:	0002ec23 	.word	0x0002ec23
   220d4:	0002ec3a 	.word	0x0002ec3a

000220d8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   220d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   220dc:	b085      	sub	sp, #20
   220de:	4604      	mov	r4, r0
   220e0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   220e4:	f1b8 0f0f 	cmp.w	r8, #15
{
   220e8:	460f      	mov	r7, r1
   220ea:	4615      	mov	r5, r2
   220ec:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   220ee:	d132      	bne.n	22156 <z_setup_new_thread+0x7e>
   220f0:	4b25      	ldr	r3, [pc, #148]	; (22188 <z_setup_new_thread+0xb0>)
   220f2:	4599      	cmp	r9, r3
   220f4:	d133      	bne.n	2215e <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   220f6:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   220fa:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   220fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22100:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22102:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   22104:	2304      	movs	r3, #4
   22106:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22108:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2210c:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   22110:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22114:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
   22116:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2211a:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2211c:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22122:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
   22124:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22128:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   2212a:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2212c:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2212e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   22132:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   22134:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   22136:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22138:	4642      	mov	r2, r8
   2213a:	4639      	mov	r1, r7
   2213c:	4620      	mov	r0, r4
   2213e:	f7f2 fa8d 	bl	1465c <arch_new_thread>
	if (!_current) {
   22142:	4b12      	ldr	r3, [pc, #72]	; (2218c <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
   22144:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   22146:	689b      	ldr	r3, [r3, #8]
   22148:	b103      	cbz	r3, 2214c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
   2214a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   2214c:	6763      	str	r3, [r4, #116]	; 0x74
}
   2214e:	4640      	mov	r0, r8
   22150:	b005      	add	sp, #20
   22152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   22156:	f108 0310 	add.w	r3, r8, #16
   2215a:	2b1e      	cmp	r3, #30
   2215c:	d9cb      	bls.n	220f6 <z_setup_new_thread+0x1e>
   2215e:	4a0c      	ldr	r2, [pc, #48]	; (22190 <z_setup_new_thread+0xb8>)
   22160:	490c      	ldr	r1, [pc, #48]	; (22194 <z_setup_new_thread+0xbc>)
   22162:	480d      	ldr	r0, [pc, #52]	; (22198 <z_setup_new_thread+0xc0>)
   22164:	f240 13ff 	movw	r3, #511	; 0x1ff
   22168:	f006 fb02 	bl	28770 <printk>
   2216c:	4641      	mov	r1, r8
   2216e:	480b      	ldr	r0, [pc, #44]	; (2219c <z_setup_new_thread+0xc4>)
   22170:	f06f 030f 	mvn.w	r3, #15
   22174:	220e      	movs	r2, #14
   22176:	f006 fafb 	bl	28770 <printk>
   2217a:	4805      	ldr	r0, [pc, #20]	; (22190 <z_setup_new_thread+0xb8>)
   2217c:	f240 11ff 	movw	r1, #511	; 0x1ff
   22180:	f006 fce7 	bl	28b52 <assert_post_action>
   22184:	e7b7      	b.n	220f6 <z_setup_new_thread+0x1e>
   22186:	bf00      	nop
   22188:	000223a9 	.word	0x000223a9
   2218c:	20002cfc 	.word	0x20002cfc
   22190:	000323d0 	.word	0x000323d0
   22194:	000323f3 	.word	0x000323f3
   22198:	0002e915 	.word	0x0002e915
   2219c:	00032473 	.word	0x00032473

000221a0 <z_impl_k_thread_create>:
{
   221a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   221a4:	b087      	sub	sp, #28
   221a6:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   221aa:	4604      	mov	r4, r0
   221ac:	460d      	mov	r5, r1
   221ae:	4690      	mov	r8, r2
   221b0:	4699      	mov	r9, r3
   221b2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   221b6:	b173      	cbz	r3, 221d6 <z_impl_k_thread_create+0x36>
   221b8:	491b      	ldr	r1, [pc, #108]	; (22228 <z_impl_k_thread_create+0x88>)
   221ba:	4a1c      	ldr	r2, [pc, #112]	; (2222c <z_impl_k_thread_create+0x8c>)
   221bc:	481c      	ldr	r0, [pc, #112]	; (22230 <z_impl_k_thread_create+0x90>)
   221be:	f44f 731a 	mov.w	r3, #616	; 0x268
   221c2:	f006 fad5 	bl	28770 <printk>
   221c6:	481b      	ldr	r0, [pc, #108]	; (22234 <z_impl_k_thread_create+0x94>)
   221c8:	f006 fad2 	bl	28770 <printk>
   221cc:	4817      	ldr	r0, [pc, #92]	; (2222c <z_impl_k_thread_create+0x8c>)
   221ce:	f44f 711a 	mov.w	r1, #616	; 0x268
   221d2:	f006 fcbe 	bl	28b52 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   221d6:	2300      	movs	r3, #0
   221d8:	9305      	str	r3, [sp, #20]
   221da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   221dc:	9304      	str	r3, [sp, #16]
   221de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   221e0:	9303      	str	r3, [sp, #12]
   221e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   221e4:	9302      	str	r3, [sp, #8]
   221e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   221e8:	9301      	str	r3, [sp, #4]
   221ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   221ec:	9300      	str	r3, [sp, #0]
   221ee:	4642      	mov	r2, r8
   221f0:	464b      	mov	r3, r9
   221f2:	4629      	mov	r1, r5
   221f4:	4620      	mov	r0, r4
   221f6:	f7ff ff6f 	bl	220d8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   221fa:	1c7b      	adds	r3, r7, #1
   221fc:	bf08      	it	eq
   221fe:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   22202:	d005      	beq.n	22210 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22204:	ea56 0307 	orrs.w	r3, r6, r7
   22208:	d106      	bne.n	22218 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   2220a:	4620      	mov	r0, r4
   2220c:	f001 fe06 	bl	23e1c <z_sched_start>
}
   22210:	4620      	mov	r0, r4
   22212:	b007      	add	sp, #28
   22214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22218:	4907      	ldr	r1, [pc, #28]	; (22238 <z_impl_k_thread_create+0x98>)
   2221a:	4632      	mov	r2, r6
   2221c:	463b      	mov	r3, r7
   2221e:	f104 0018 	add.w	r0, r4, #24
   22222:	f002 fce7 	bl	24bf4 <z_add_timeout>
   22226:	e7f3      	b.n	22210 <z_impl_k_thread_create+0x70>
   22228:	000324a4 	.word	0x000324a4
   2222c:	000323d0 	.word	0x000323d0
   22230:	0002e915 	.word	0x0002e915
   22234:	000324b6 	.word	0x000324b6
   22238:	00023ec5 	.word	0x00023ec5

0002223c <z_init_static_threads>:
{
   2223c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   22240:	4f3f      	ldr	r7, [pc, #252]	; (22340 <z_init_static_threads+0x104>)
   22242:	4d40      	ldr	r5, [pc, #256]	; (22344 <z_init_static_threads+0x108>)
   22244:	f8df 810c 	ldr.w	r8, [pc, #268]	; 22354 <z_init_static_threads+0x118>
{
   22248:	b086      	sub	sp, #24
   2224a:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   2224c:	42bd      	cmp	r5, r7
   2224e:	d90e      	bls.n	2226e <z_init_static_threads+0x32>
   22250:	493d      	ldr	r1, [pc, #244]	; (22348 <z_init_static_threads+0x10c>)
   22252:	483e      	ldr	r0, [pc, #248]	; (2234c <z_init_static_threads+0x110>)
   22254:	f240 23cf 	movw	r3, #719	; 0x2cf
   22258:	4642      	mov	r2, r8
   2225a:	f006 fa89 	bl	28770 <printk>
   2225e:	483c      	ldr	r0, [pc, #240]	; (22350 <z_init_static_threads+0x114>)
   22260:	f006 fa86 	bl	28770 <printk>
   22264:	f240 21cf 	movw	r1, #719	; 0x2cf
   22268:	4640      	mov	r0, r8
   2226a:	f006 fc72 	bl	28b52 <assert_post_action>
   2226e:	42b5      	cmp	r5, r6
   22270:	f105 0430 	add.w	r4, r5, #48	; 0x30
   22274:	d31f      	bcc.n	222b6 <z_init_static_threads+0x7a>
	k_sched_lock();
   22276:	f001 fb2d 	bl	238d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2227a:	4c32      	ldr	r4, [pc, #200]	; (22344 <z_init_static_threads+0x108>)
   2227c:	4d35      	ldr	r5, [pc, #212]	; (22354 <z_init_static_threads+0x118>)
   2227e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 22348 <z_init_static_threads+0x10c>
   22282:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2234c <z_init_static_threads+0x110>
   22286:	42b4      	cmp	r4, r6
   22288:	d90e      	bls.n	222a8 <z_init_static_threads+0x6c>
   2228a:	4641      	mov	r1, r8
   2228c:	f240 23ee 	movw	r3, #750	; 0x2ee
   22290:	462a      	mov	r2, r5
   22292:	4648      	mov	r0, r9
   22294:	f006 fa6c 	bl	28770 <printk>
   22298:	482d      	ldr	r0, [pc, #180]	; (22350 <z_init_static_threads+0x114>)
   2229a:	f006 fa69 	bl	28770 <printk>
   2229e:	f240 21ee 	movw	r1, #750	; 0x2ee
   222a2:	4628      	mov	r0, r5
   222a4:	f006 fc55 	bl	28b52 <assert_post_action>
   222a8:	42b4      	cmp	r4, r6
   222aa:	d321      	bcc.n	222f0 <z_init_static_threads+0xb4>
}
   222ac:	b006      	add	sp, #24
   222ae:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   222b2:	f002 b853 	b.w	2435c <k_sched_unlock>
		z_setup_new_thread(
   222b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   222ba:	9305      	str	r3, [sp, #20]
   222bc:	f854 3c10 	ldr.w	r3, [r4, #-16]
   222c0:	9304      	str	r3, [sp, #16]
   222c2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   222c6:	9303      	str	r3, [sp, #12]
   222c8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   222cc:	9302      	str	r3, [sp, #8]
   222ce:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   222d2:	9301      	str	r3, [sp, #4]
   222d4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   222d8:	9300      	str	r3, [sp, #0]
   222da:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   222de:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   222e2:	f7ff fef9 	bl	220d8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   222e6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   222ea:	655d      	str	r5, [r3, #84]	; 0x54
   222ec:	4625      	mov	r5, r4
   222ee:	e7ad      	b.n	2224c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   222f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   222f2:	1c4b      	adds	r3, r1, #1
   222f4:	d014      	beq.n	22320 <z_init_static_threads+0xe4>
   222f6:	f240 32e7 	movw	r2, #999	; 0x3e7
   222fa:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   222fc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   22300:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22304:	4693      	mov	fp, r2
   22306:	469c      	mov	ip, r3
   22308:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2230c:	459c      	cmp	ip, r3
   2230e:	bf08      	it	eq
   22310:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   22312:	6827      	ldr	r7, [r4, #0]
   22314:	4658      	mov	r0, fp
   22316:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22318:	d104      	bne.n	22324 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   2231a:	4638      	mov	r0, r7
   2231c:	f001 fd7e 	bl	23e1c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22320:	3430      	adds	r4, #48	; 0x30
   22322:	e7b0      	b.n	22286 <z_init_static_threads+0x4a>
   22324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22328:	2300      	movs	r3, #0
   2232a:	f7dd fee9 	bl	100 <__aeabi_uldivmod>
   2232e:	4602      	mov	r2, r0
   22330:	460b      	mov	r3, r1
   22332:	f107 0018 	add.w	r0, r7, #24
   22336:	4908      	ldr	r1, [pc, #32]	; (22358 <z_init_static_threads+0x11c>)
   22338:	f002 fc5c 	bl	24bf4 <z_add_timeout>
   2233c:	e7f0      	b.n	22320 <z_init_static_threads+0xe4>
   2233e:	bf00      	nop
   22340:	200007c0 	.word	0x200007c0
   22344:	20000790 	.word	0x20000790
   22348:	000324db 	.word	0x000324db
   2234c:	0002e915 	.word	0x0002e915
   22350:	0002f2e8 	.word	0x0002f2e8
   22354:	000323d0 	.word	0x000323d0
   22358:	00023ec5 	.word	0x00023ec5

0002235c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   2235c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2235e:	b138      	cbz	r0, 22370 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   22360:	4b04      	ldr	r3, [pc, #16]	; (22374 <z_spin_lock_valid+0x18>)
   22362:	7d1b      	ldrb	r3, [r3, #20]
   22364:	f000 0003 	and.w	r0, r0, #3
   22368:	1ac0      	subs	r0, r0, r3
   2236a:	bf18      	it	ne
   2236c:	2001      	movne	r0, #1
   2236e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   22370:	2001      	movs	r0, #1
}
   22372:	4770      	bx	lr
   22374:	20002cfc 	.word	0x20002cfc

00022378 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   22378:	4906      	ldr	r1, [pc, #24]	; (22394 <z_spin_unlock_valid+0x1c>)
{
   2237a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   2237c:	688a      	ldr	r2, [r1, #8]
   2237e:	7d08      	ldrb	r0, [r1, #20]
   22380:	6819      	ldr	r1, [r3, #0]
   22382:	4302      	orrs	r2, r0
   22384:	4291      	cmp	r1, r2
   22386:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   2238a:	bf04      	itt	eq
   2238c:	6018      	streq	r0, [r3, #0]
	return true;
   2238e:	2001      	moveq	r0, #1
}
   22390:	4770      	bx	lr
   22392:	bf00      	nop
   22394:	20002cfc 	.word	0x20002cfc

00022398 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   22398:	4a02      	ldr	r2, [pc, #8]	; (223a4 <z_spin_lock_set_owner+0xc>)
   2239a:	7d11      	ldrb	r1, [r2, #20]
   2239c:	6893      	ldr	r3, [r2, #8]
   2239e:	430b      	orrs	r3, r1
   223a0:	6003      	str	r3, [r0, #0]
}
   223a2:	4770      	bx	lr
   223a4:	20002cfc 	.word	0x20002cfc

000223a8 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   223a8:	4c11      	ldr	r4, [pc, #68]	; (223f0 <idle+0x48>)
   223aa:	68a2      	ldr	r2, [r4, #8]
   223ac:	f992 200e 	ldrsb.w	r2, [r2, #14]
   223b0:	2a00      	cmp	r2, #0
{
   223b2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   223b4:	da09      	bge.n	223ca <idle+0x22>
   223b6:	490f      	ldr	r1, [pc, #60]	; (223f4 <idle+0x4c>)
   223b8:	480f      	ldr	r0, [pc, #60]	; (223f8 <idle+0x50>)
   223ba:	4a10      	ldr	r2, [pc, #64]	; (223fc <idle+0x54>)
   223bc:	2327      	movs	r3, #39	; 0x27
   223be:	f006 f9d7 	bl	28770 <printk>
   223c2:	480e      	ldr	r0, [pc, #56]	; (223fc <idle+0x54>)
   223c4:	2127      	movs	r1, #39	; 0x27
   223c6:	f006 fbc4 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   223ca:	f04f 0240 	mov.w	r2, #64	; 0x40
   223ce:	f3ef 8311 	mrs	r3, BASEPRI
   223d2:	f382 8812 	msr	BASEPRI_MAX, r2
   223d6:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   223da:	f002 fd2d 	bl	24e38 <z_get_next_timeout_expiry>
   223de:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   223e0:	f7f1 fd1e 	bl	13e20 <pm_system_suspend>
   223e4:	2800      	cmp	r0, #0
   223e6:	d1f0      	bne.n	223ca <idle+0x22>
	arch_cpu_idle();
   223e8:	f7f1 fffc 	bl	143e4 <arch_cpu_idle>
}
   223ec:	e7ed      	b.n	223ca <idle+0x22>
   223ee:	bf00      	nop
   223f0:	20002cfc 	.word	0x20002cfc
   223f4:	00032529 	.word	0x00032529
   223f8:	0002e915 	.word	0x0002e915
   223fc:	00032508 	.word	0x00032508

00022400 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   22400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22404:	4604      	mov	r4, r0
   22406:	4616      	mov	r6, r2
   22408:	461f      	mov	r7, r3
   2240a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2240e:	b163      	cbz	r3, 2242a <z_impl_k_mutex_lock+0x2a>
   22410:	4970      	ldr	r1, [pc, #448]	; (225d4 <z_impl_k_mutex_lock+0x1d4>)
   22412:	4a71      	ldr	r2, [pc, #452]	; (225d8 <z_impl_k_mutex_lock+0x1d8>)
   22414:	4871      	ldr	r0, [pc, #452]	; (225dc <z_impl_k_mutex_lock+0x1dc>)
   22416:	2365      	movs	r3, #101	; 0x65
   22418:	f006 f9aa 	bl	28770 <printk>
   2241c:	4870      	ldr	r0, [pc, #448]	; (225e0 <z_impl_k_mutex_lock+0x1e0>)
   2241e:	f006 f9a7 	bl	28770 <printk>
   22422:	486d      	ldr	r0, [pc, #436]	; (225d8 <z_impl_k_mutex_lock+0x1d8>)
   22424:	2165      	movs	r1, #101	; 0x65
   22426:	f006 fb94 	bl	28b52 <assert_post_action>
   2242a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2242e:	f3ef 8811 	mrs	r8, BASEPRI
   22432:	f383 8812 	msr	BASEPRI_MAX, r3
   22436:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2243a:	486a      	ldr	r0, [pc, #424]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   2243c:	f7ff ff8e 	bl	2235c <z_spin_lock_valid>
   22440:	b968      	cbnz	r0, 2245e <z_impl_k_mutex_lock+0x5e>
   22442:	4a69      	ldr	r2, [pc, #420]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   22444:	4969      	ldr	r1, [pc, #420]	; (225ec <z_impl_k_mutex_lock+0x1ec>)
   22446:	4865      	ldr	r0, [pc, #404]	; (225dc <z_impl_k_mutex_lock+0x1dc>)
   22448:	2381      	movs	r3, #129	; 0x81
   2244a:	f006 f991 	bl	28770 <printk>
   2244e:	4965      	ldr	r1, [pc, #404]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   22450:	4867      	ldr	r0, [pc, #412]	; (225f0 <z_impl_k_mutex_lock+0x1f0>)
   22452:	f006 f98d 	bl	28770 <printk>
   22456:	4864      	ldr	r0, [pc, #400]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   22458:	2181      	movs	r1, #129	; 0x81
   2245a:	f006 fb7a 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2245e:	4861      	ldr	r0, [pc, #388]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   22460:	f7ff ff9a 	bl	22398 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   22464:	68e3      	ldr	r3, [r4, #12]
   22466:	4a63      	ldr	r2, [pc, #396]	; (225f4 <z_impl_k_mutex_lock+0x1f4>)
   22468:	b1fb      	cbz	r3, 224aa <z_impl_k_mutex_lock+0xaa>
   2246a:	68a0      	ldr	r0, [r4, #8]
   2246c:	6891      	ldr	r1, [r2, #8]
   2246e:	4288      	cmp	r0, r1
   22470:	d03d      	beq.n	224ee <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   22472:	ea56 0307 	orrs.w	r3, r6, r7
   22476:	d13c      	bne.n	224f2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22478:	485a      	ldr	r0, [pc, #360]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   2247a:	f7ff ff7d 	bl	22378 <z_spin_unlock_valid>
   2247e:	b968      	cbnz	r0, 2249c <z_impl_k_mutex_lock+0x9c>
   22480:	4a59      	ldr	r2, [pc, #356]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   22482:	495d      	ldr	r1, [pc, #372]	; (225f8 <z_impl_k_mutex_lock+0x1f8>)
   22484:	4855      	ldr	r0, [pc, #340]	; (225dc <z_impl_k_mutex_lock+0x1dc>)
   22486:	23ac      	movs	r3, #172	; 0xac
   22488:	f006 f972 	bl	28770 <printk>
   2248c:	4955      	ldr	r1, [pc, #340]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   2248e:	485b      	ldr	r0, [pc, #364]	; (225fc <z_impl_k_mutex_lock+0x1fc>)
   22490:	f006 f96e 	bl	28770 <printk>
   22494:	4854      	ldr	r0, [pc, #336]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   22496:	21ac      	movs	r1, #172	; 0xac
   22498:	f006 fb5b 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2249c:	f388 8811 	msr	BASEPRI, r8
   224a0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   224a4:	f06f 000f 	mvn.w	r0, #15
   224a8:	e01e      	b.n	224e8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   224aa:	6891      	ldr	r1, [r2, #8]
   224ac:	f991 100e 	ldrsb.w	r1, [r1, #14]
   224b0:	484c      	ldr	r0, [pc, #304]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   224b2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   224b4:	3301      	adds	r3, #1
   224b6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   224b8:	6893      	ldr	r3, [r2, #8]
   224ba:	60a3      	str	r3, [r4, #8]
   224bc:	f7ff ff5c 	bl	22378 <z_spin_unlock_valid>
   224c0:	b968      	cbnz	r0, 224de <z_impl_k_mutex_lock+0xde>
   224c2:	4a49      	ldr	r2, [pc, #292]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   224c4:	494c      	ldr	r1, [pc, #304]	; (225f8 <z_impl_k_mutex_lock+0x1f8>)
   224c6:	4845      	ldr	r0, [pc, #276]	; (225dc <z_impl_k_mutex_lock+0x1dc>)
   224c8:	23ac      	movs	r3, #172	; 0xac
   224ca:	f006 f951 	bl	28770 <printk>
   224ce:	4945      	ldr	r1, [pc, #276]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   224d0:	484a      	ldr	r0, [pc, #296]	; (225fc <z_impl_k_mutex_lock+0x1fc>)
   224d2:	f006 f94d 	bl	28770 <printk>
   224d6:	4844      	ldr	r0, [pc, #272]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   224d8:	21ac      	movs	r1, #172	; 0xac
   224da:	f006 fb3a 	bl	28b52 <assert_post_action>
   224de:	f388 8811 	msr	BASEPRI, r8
   224e2:	f3bf 8f6f 	isb	sy
		return 0;
   224e6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   224e8:	b002      	add	sp, #8
   224ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   224ee:	6921      	ldr	r1, [r4, #16]
   224f0:	e7de      	b.n	224b0 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   224f2:	f991 100e 	ldrsb.w	r1, [r1, #14]
   224f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   224fa:	4299      	cmp	r1, r3
   224fc:	bfa8      	it	ge
   224fe:	4619      	movge	r1, r3
   22500:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   22504:	4291      	cmp	r1, r2
   22506:	bfb8      	it	lt
   22508:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2250a:	428b      	cmp	r3, r1
   2250c:	dd44      	ble.n	22598 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   2250e:	f001 fe1f 	bl	24150 <z_set_prio>
   22512:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   22514:	e9cd 6700 	strd	r6, r7, [sp]
   22518:	4832      	ldr	r0, [pc, #200]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   2251a:	4622      	mov	r2, r4
   2251c:	4641      	mov	r1, r8
   2251e:	f001 fde7 	bl	240f0 <z_pend_curr>
	if (got_mutex == 0) {
   22522:	2800      	cmp	r0, #0
   22524:	d0e0      	beq.n	224e8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   22526:	f04f 0340 	mov.w	r3, #64	; 0x40
   2252a:	f3ef 8611 	mrs	r6, BASEPRI
   2252e:	f383 8812 	msr	BASEPRI_MAX, r3
   22532:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22536:	482b      	ldr	r0, [pc, #172]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   22538:	f7ff ff10 	bl	2235c <z_spin_lock_valid>
   2253c:	b968      	cbnz	r0, 2255a <z_impl_k_mutex_lock+0x15a>
   2253e:	4a2a      	ldr	r2, [pc, #168]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   22540:	492a      	ldr	r1, [pc, #168]	; (225ec <z_impl_k_mutex_lock+0x1ec>)
   22542:	4826      	ldr	r0, [pc, #152]	; (225dc <z_impl_k_mutex_lock+0x1dc>)
   22544:	2381      	movs	r3, #129	; 0x81
   22546:	f006 f913 	bl	28770 <printk>
   2254a:	4926      	ldr	r1, [pc, #152]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   2254c:	4828      	ldr	r0, [pc, #160]	; (225f0 <z_impl_k_mutex_lock+0x1f0>)
   2254e:	f006 f90f 	bl	28770 <printk>
   22552:	4825      	ldr	r0, [pc, #148]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   22554:	2181      	movs	r1, #129	; 0x81
   22556:	f006 fafc 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2255a:	4822      	ldr	r0, [pc, #136]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   2255c:	f7ff ff1c 	bl	22398 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22560:	6823      	ldr	r3, [r4, #0]
   22562:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22564:	429c      	cmp	r4, r3
   22566:	d00a      	beq.n	2257e <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22568:	b14b      	cbz	r3, 2257e <z_impl_k_mutex_lock+0x17e>
   2256a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2256e:	4299      	cmp	r1, r3
   22570:	bfa8      	it	ge
   22572:	4619      	movge	r1, r3
   22574:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   22578:	4299      	cmp	r1, r3
   2257a:	bfb8      	it	lt
   2257c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2257e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   22580:	f990 300e 	ldrsb.w	r3, [r0, #14]
   22584:	4299      	cmp	r1, r3
   22586:	d109      	bne.n	2259c <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   22588:	b16d      	cbz	r5, 225a6 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   2258a:	4816      	ldr	r0, [pc, #88]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   2258c:	4631      	mov	r1, r6
   2258e:	f001 f95d 	bl	2384c <z_reschedule>
	return -EAGAIN;
   22592:	f06f 000a 	mvn.w	r0, #10
   22596:	e7a7      	b.n	224e8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   22598:	2500      	movs	r5, #0
   2259a:	e7bb      	b.n	22514 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   2259c:	f001 fdd8 	bl	24150 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   225a0:	2800      	cmp	r0, #0
   225a2:	d1f2      	bne.n	2258a <z_impl_k_mutex_lock+0x18a>
   225a4:	e7f0      	b.n	22588 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225a6:	480f      	ldr	r0, [pc, #60]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   225a8:	f7ff fee6 	bl	22378 <z_spin_unlock_valid>
   225ac:	b968      	cbnz	r0, 225ca <z_impl_k_mutex_lock+0x1ca>
   225ae:	4a0e      	ldr	r2, [pc, #56]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   225b0:	4911      	ldr	r1, [pc, #68]	; (225f8 <z_impl_k_mutex_lock+0x1f8>)
   225b2:	480a      	ldr	r0, [pc, #40]	; (225dc <z_impl_k_mutex_lock+0x1dc>)
   225b4:	23ac      	movs	r3, #172	; 0xac
   225b6:	f006 f8db 	bl	28770 <printk>
   225ba:	490a      	ldr	r1, [pc, #40]	; (225e4 <z_impl_k_mutex_lock+0x1e4>)
   225bc:	480f      	ldr	r0, [pc, #60]	; (225fc <z_impl_k_mutex_lock+0x1fc>)
   225be:	f006 f8d7 	bl	28770 <printk>
   225c2:	4809      	ldr	r0, [pc, #36]	; (225e8 <z_impl_k_mutex_lock+0x1e8>)
   225c4:	21ac      	movs	r1, #172	; 0xac
   225c6:	f006 fac4 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   225ca:	f386 8811 	msr	BASEPRI, r6
   225ce:	f3bf 8f6f 	isb	sy
   225d2:	e7de      	b.n	22592 <z_impl_k_mutex_lock+0x192>
   225d4:	000324a4 	.word	0x000324a4
   225d8:	00032551 	.word	0x00032551
   225dc:	0002e915 	.word	0x0002e915
   225e0:	00032573 	.word	0x00032573
   225e4:	20002d24 	.word	0x20002d24
   225e8:	0002ebfd 	.word	0x0002ebfd
   225ec:	0002ec4f 	.word	0x0002ec4f
   225f0:	0002ec64 	.word	0x0002ec64
   225f4:	20002cfc 	.word	0x20002cfc
   225f8:	0002ec23 	.word	0x0002ec23
   225fc:	0002ec3a 	.word	0x0002ec3a

00022600 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   22600:	b538      	push	{r3, r4, r5, lr}
   22602:	4604      	mov	r4, r0
   22604:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   22608:	b163      	cbz	r3, 22624 <z_impl_k_mutex_unlock+0x24>
   2260a:	4952      	ldr	r1, [pc, #328]	; (22754 <z_impl_k_mutex_unlock+0x154>)
   2260c:	4a52      	ldr	r2, [pc, #328]	; (22758 <z_impl_k_mutex_unlock+0x158>)
   2260e:	4853      	ldr	r0, [pc, #332]	; (2275c <z_impl_k_mutex_unlock+0x15c>)
   22610:	23c7      	movs	r3, #199	; 0xc7
   22612:	f006 f8ad 	bl	28770 <printk>
   22616:	4852      	ldr	r0, [pc, #328]	; (22760 <z_impl_k_mutex_unlock+0x160>)
   22618:	f006 f8aa 	bl	28770 <printk>
   2261c:	484e      	ldr	r0, [pc, #312]	; (22758 <z_impl_k_mutex_unlock+0x158>)
   2261e:	21c7      	movs	r1, #199	; 0xc7
   22620:	f006 fa97 	bl	28b52 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   22624:	68a3      	ldr	r3, [r4, #8]
   22626:	2b00      	cmp	r3, #0
   22628:	f000 808d 	beq.w	22746 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2262c:	4d4d      	ldr	r5, [pc, #308]	; (22764 <z_impl_k_mutex_unlock+0x164>)
   2262e:	68aa      	ldr	r2, [r5, #8]
   22630:	4293      	cmp	r3, r2
   22632:	f040 808b 	bne.w	2274c <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   22636:	68e3      	ldr	r3, [r4, #12]
   22638:	b94b      	cbnz	r3, 2264e <z_impl_k_mutex_unlock+0x4e>
   2263a:	494b      	ldr	r1, [pc, #300]	; (22768 <z_impl_k_mutex_unlock+0x168>)
   2263c:	4847      	ldr	r0, [pc, #284]	; (2275c <z_impl_k_mutex_unlock+0x15c>)
   2263e:	4a46      	ldr	r2, [pc, #280]	; (22758 <z_impl_k_mutex_unlock+0x158>)
   22640:	23df      	movs	r3, #223	; 0xdf
   22642:	f006 f895 	bl	28770 <printk>
   22646:	4844      	ldr	r0, [pc, #272]	; (22758 <z_impl_k_mutex_unlock+0x158>)
   22648:	21df      	movs	r1, #223	; 0xdf
   2264a:	f006 fa82 	bl	28b52 <assert_post_action>
   2264e:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   22652:	b163      	cbz	r3, 2266e <z_impl_k_mutex_unlock+0x6e>
   22654:	493f      	ldr	r1, [pc, #252]	; (22754 <z_impl_k_mutex_unlock+0x154>)
   22656:	4a45      	ldr	r2, [pc, #276]	; (2276c <z_impl_k_mutex_unlock+0x16c>)
   22658:	4840      	ldr	r0, [pc, #256]	; (2275c <z_impl_k_mutex_unlock+0x15c>)
   2265a:	23fd      	movs	r3, #253	; 0xfd
   2265c:	f006 f888 	bl	28770 <printk>
   22660:	4843      	ldr	r0, [pc, #268]	; (22770 <z_impl_k_mutex_unlock+0x170>)
   22662:	f006 f885 	bl	28770 <printk>
   22666:	4841      	ldr	r0, [pc, #260]	; (2276c <z_impl_k_mutex_unlock+0x16c>)
   22668:	21fd      	movs	r1, #253	; 0xfd
   2266a:	f006 fa72 	bl	28b52 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2266e:	68ab      	ldr	r3, [r5, #8]
   22670:	7bdb      	ldrb	r3, [r3, #15]
   22672:	2b01      	cmp	r3, #1
   22674:	d10c      	bne.n	22690 <z_impl_k_mutex_unlock+0x90>
   22676:	493f      	ldr	r1, [pc, #252]	; (22774 <z_impl_k_mutex_unlock+0x174>)
   22678:	4a3c      	ldr	r2, [pc, #240]	; (2276c <z_impl_k_mutex_unlock+0x16c>)
   2267a:	4838      	ldr	r0, [pc, #224]	; (2275c <z_impl_k_mutex_unlock+0x15c>)
   2267c:	23fe      	movs	r3, #254	; 0xfe
   2267e:	f006 f877 	bl	28770 <printk>
   22682:	483b      	ldr	r0, [pc, #236]	; (22770 <z_impl_k_mutex_unlock+0x170>)
   22684:	f006 f874 	bl	28770 <printk>
   22688:	4838      	ldr	r0, [pc, #224]	; (2276c <z_impl_k_mutex_unlock+0x16c>)
   2268a:	21fe      	movs	r1, #254	; 0xfe
   2268c:	f006 fa61 	bl	28b52 <assert_post_action>

	--_current->base.sched_locked;
   22690:	68aa      	ldr	r2, [r5, #8]
   22692:	7bd3      	ldrb	r3, [r2, #15]
   22694:	3b01      	subs	r3, #1
   22696:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   22698:	68e3      	ldr	r3, [r4, #12]
   2269a:	2b01      	cmp	r3, #1
   2269c:	d905      	bls.n	226aa <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   2269e:	3b01      	subs	r3, #1
   226a0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   226a2:	f001 fe5b 	bl	2435c <k_sched_unlock>

	return 0;
   226a6:	2000      	movs	r0, #0
}
   226a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   226aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   226ae:	f3ef 8511 	mrs	r5, BASEPRI
   226b2:	f383 8812 	msr	BASEPRI_MAX, r3
   226b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226ba:	482f      	ldr	r0, [pc, #188]	; (22778 <z_impl_k_mutex_unlock+0x178>)
   226bc:	f7ff fe4e 	bl	2235c <z_spin_lock_valid>
   226c0:	b968      	cbnz	r0, 226de <z_impl_k_mutex_unlock+0xde>
   226c2:	4a2e      	ldr	r2, [pc, #184]	; (2277c <z_impl_k_mutex_unlock+0x17c>)
   226c4:	492e      	ldr	r1, [pc, #184]	; (22780 <z_impl_k_mutex_unlock+0x180>)
   226c6:	4825      	ldr	r0, [pc, #148]	; (2275c <z_impl_k_mutex_unlock+0x15c>)
   226c8:	2381      	movs	r3, #129	; 0x81
   226ca:	f006 f851 	bl	28770 <printk>
   226ce:	492a      	ldr	r1, [pc, #168]	; (22778 <z_impl_k_mutex_unlock+0x178>)
   226d0:	482c      	ldr	r0, [pc, #176]	; (22784 <z_impl_k_mutex_unlock+0x184>)
   226d2:	f006 f84d 	bl	28770 <printk>
   226d6:	4829      	ldr	r0, [pc, #164]	; (2277c <z_impl_k_mutex_unlock+0x17c>)
   226d8:	2181      	movs	r1, #129	; 0x81
   226da:	f006 fa3a 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   226de:	4826      	ldr	r0, [pc, #152]	; (22778 <z_impl_k_mutex_unlock+0x178>)
   226e0:	f7ff fe5a 	bl	22398 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   226e4:	68a0      	ldr	r0, [r4, #8]
   226e6:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   226e8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   226ec:	4299      	cmp	r1, r3
   226ee:	d001      	beq.n	226f4 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   226f0:	f001 fd2e 	bl	24150 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   226f4:	4620      	mov	r0, r4
   226f6:	f001 fef9 	bl	244ec <z_unpend_first_thread>
	mutex->owner = new_owner;
   226fa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   226fc:	b158      	cbz	r0, 22716 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
   226fe:	f990 200e 	ldrsb.w	r2, [r0, #14]
   22702:	6122      	str	r2, [r4, #16]
   22704:	2200      	movs	r2, #0
   22706:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   22708:	f001 fb40 	bl	23d8c <z_ready_thread>
		z_reschedule(&lock, key);
   2270c:	481a      	ldr	r0, [pc, #104]	; (22778 <z_impl_k_mutex_unlock+0x178>)
   2270e:	4629      	mov	r1, r5
   22710:	f001 f89c 	bl	2384c <z_reschedule>
   22714:	e7c5      	b.n	226a2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   22716:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22718:	4817      	ldr	r0, [pc, #92]	; (22778 <z_impl_k_mutex_unlock+0x178>)
   2271a:	f7ff fe2d 	bl	22378 <z_spin_unlock_valid>
   2271e:	b968      	cbnz	r0, 2273c <z_impl_k_mutex_unlock+0x13c>
   22720:	4a16      	ldr	r2, [pc, #88]	; (2277c <z_impl_k_mutex_unlock+0x17c>)
   22722:	4919      	ldr	r1, [pc, #100]	; (22788 <z_impl_k_mutex_unlock+0x188>)
   22724:	480d      	ldr	r0, [pc, #52]	; (2275c <z_impl_k_mutex_unlock+0x15c>)
   22726:	23ac      	movs	r3, #172	; 0xac
   22728:	f006 f822 	bl	28770 <printk>
   2272c:	4912      	ldr	r1, [pc, #72]	; (22778 <z_impl_k_mutex_unlock+0x178>)
   2272e:	4817      	ldr	r0, [pc, #92]	; (2278c <z_impl_k_mutex_unlock+0x18c>)
   22730:	f006 f81e 	bl	28770 <printk>
   22734:	4811      	ldr	r0, [pc, #68]	; (2277c <z_impl_k_mutex_unlock+0x17c>)
   22736:	21ac      	movs	r1, #172	; 0xac
   22738:	f006 fa0b 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2273c:	f385 8811 	msr	BASEPRI, r5
   22740:	f3bf 8f6f 	isb	sy
   22744:	e7ad      	b.n	226a2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   22746:	f06f 0015 	mvn.w	r0, #21
   2274a:	e7ad      	b.n	226a8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   2274c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22750:	e7aa      	b.n	226a8 <z_impl_k_mutex_unlock+0xa8>
   22752:	bf00      	nop
   22754:	000324a4 	.word	0x000324a4
   22758:	00032551 	.word	0x00032551
   2275c:	0002e915 	.word	0x0002e915
   22760:	00032573 	.word	0x00032573
   22764:	20002cfc 	.word	0x20002cfc
   22768:	00032598 	.word	0x00032598
   2276c:	000325af 	.word	0x000325af
   22770:	00031821 	.word	0x00031821
   22774:	000325da 	.word	0x000325da
   22778:	20002d24 	.word	0x20002d24
   2277c:	0002ebfd 	.word	0x0002ebfd
   22780:	0002ec4f 	.word	0x0002ec4f
   22784:	0002ec64 	.word	0x0002ec64
   22788:	0002ec23 	.word	0x0002ec23
   2278c:	0002ec3a 	.word	0x0002ec3a

00022790 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   22790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22794:	4604      	mov	r4, r0
   22796:	f89d a020 	ldrb.w	sl, [sp, #32]
   2279a:	460e      	mov	r6, r1
   2279c:	4690      	mov	r8, r2
   2279e:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   227a0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   227a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   227a8:	f3ef 8711 	mrs	r7, BASEPRI
   227ac:	f383 8812 	msr	BASEPRI_MAX, r3
   227b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227b4:	4628      	mov	r0, r5
   227b6:	f7ff fdd1 	bl	2235c <z_spin_lock_valid>
   227ba:	b968      	cbnz	r0, 227d8 <queue_insert+0x48>
   227bc:	4a3b      	ldr	r2, [pc, #236]	; (228ac <queue_insert+0x11c>)
   227be:	493c      	ldr	r1, [pc, #240]	; (228b0 <queue_insert+0x120>)
   227c0:	483c      	ldr	r0, [pc, #240]	; (228b4 <queue_insert+0x124>)
   227c2:	2381      	movs	r3, #129	; 0x81
   227c4:	f005 ffd4 	bl	28770 <printk>
   227c8:	483b      	ldr	r0, [pc, #236]	; (228b8 <queue_insert+0x128>)
   227ca:	4629      	mov	r1, r5
   227cc:	f005 ffd0 	bl	28770 <printk>
   227d0:	4836      	ldr	r0, [pc, #216]	; (228ac <queue_insert+0x11c>)
   227d2:	2181      	movs	r1, #129	; 0x81
   227d4:	f006 f9bd 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   227d8:	4628      	mov	r0, r5
   227da:	f7ff fddd 	bl	22398 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   227de:	f1ba 0f00 	cmp.w	sl, #0
   227e2:	d000      	beq.n	227e6 <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   227e4:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   227e6:	f104 000c 	add.w	r0, r4, #12
   227ea:	f001 fe7f 	bl	244ec <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   227ee:	b158      	cbz	r0, 22808 <queue_insert+0x78>
   227f0:	2400      	movs	r4, #0
   227f2:	67c4      	str	r4, [r0, #124]	; 0x7c
   227f4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   227f8:	f001 fac8 	bl	23d8c <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   227fc:	4628      	mov	r0, r5
   227fe:	4639      	mov	r1, r7
   22800:	f001 f824 	bl	2384c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   22804:	2000      	movs	r0, #0
   22806:	e01e      	b.n	22846 <queue_insert+0xb6>
	if (alloc) {
   22808:	f1b9 0f00 	cmp.w	r9, #0
   2280c:	d02d      	beq.n	2286a <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
   2280e:	2108      	movs	r1, #8
   22810:	f003 fa68 	bl	25ce4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   22814:	b9c8      	cbnz	r0, 2284a <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22816:	4628      	mov	r0, r5
   22818:	f7ff fdae 	bl	22378 <z_spin_unlock_valid>
   2281c:	b968      	cbnz	r0, 2283a <queue_insert+0xaa>
   2281e:	4a23      	ldr	r2, [pc, #140]	; (228ac <queue_insert+0x11c>)
   22820:	4926      	ldr	r1, [pc, #152]	; (228bc <queue_insert+0x12c>)
   22822:	4824      	ldr	r0, [pc, #144]	; (228b4 <queue_insert+0x124>)
   22824:	23ac      	movs	r3, #172	; 0xac
   22826:	f005 ffa3 	bl	28770 <printk>
   2282a:	4825      	ldr	r0, [pc, #148]	; (228c0 <queue_insert+0x130>)
   2282c:	4629      	mov	r1, r5
   2282e:	f005 ff9f 	bl	28770 <printk>
   22832:	481e      	ldr	r0, [pc, #120]	; (228ac <queue_insert+0x11c>)
   22834:	21ac      	movs	r1, #172	; 0xac
   22836:	f006 f98c 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2283a:	f387 8811 	msr	BASEPRI, r7
   2283e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   22842:	f06f 000b 	mvn.w	r0, #11
}
   22846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2284a:	2301      	movs	r3, #1
		anode->data = data;
   2284c:	f8c0 8004 	str.w	r8, [r0, #4]
   22850:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   22852:	6803      	ldr	r3, [r0, #0]
   22854:	f003 0303 	and.w	r3, r3, #3
   22858:	b95e      	cbnz	r6, 22872 <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2285a:	6822      	ldr	r2, [r4, #0]
   2285c:	4313      	orrs	r3, r2
   2285e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22860:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   22862:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   22864:	b973      	cbnz	r3, 22884 <queue_insert+0xf4>
	list->tail = node;
   22866:	6060      	str	r0, [r4, #4]
}
   22868:	e00c      	b.n	22884 <queue_insert+0xf4>
	node->next_and_flags = flags;
   2286a:	f8c8 9000 	str.w	r9, [r8]
}
   2286e:	4640      	mov	r0, r8
   22870:	e7ef      	b.n	22852 <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22872:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   22874:	f032 0203 	bics.w	r2, r2, #3
   22878:	d110      	bne.n	2289c <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
   2287a:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2287c:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2287e:	b93a      	cbnz	r2, 22890 <queue_insert+0x100>
	list->head = node;
   22880:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   22884:	2104      	movs	r1, #4
   22886:	f104 0014 	add.w	r0, r4, #20
   2288a:	f00a fe62 	bl	2d552 <z_handle_obj_poll_events>
   2288e:	e7b5      	b.n	227fc <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   22890:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   22892:	f003 0303 	and.w	r3, r3, #3
   22896:	4303      	orrs	r3, r0
   22898:	6013      	str	r3, [r2, #0]
   2289a:	e7e4      	b.n	22866 <queue_insert+0xd6>
   2289c:	4313      	orrs	r3, r2
   2289e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   228a0:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   228a2:	f003 0303 	and.w	r3, r3, #3
   228a6:	4303      	orrs	r3, r0
   228a8:	6033      	str	r3, [r6, #0]
}
   228aa:	e7eb      	b.n	22884 <queue_insert+0xf4>
   228ac:	0002ebfd 	.word	0x0002ebfd
   228b0:	0002ec4f 	.word	0x0002ec4f
   228b4:	0002e915 	.word	0x0002e915
   228b8:	0002ec64 	.word	0x0002ec64
   228bc:	0002ec23 	.word	0x0002ec23
   228c0:	0002ec3a 	.word	0x0002ec3a

000228c4 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   228c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   228c8:	4605      	mov	r5, r0
   228ca:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   228cc:	460c      	mov	r4, r1
   228ce:	2900      	cmp	r1, #0
   228d0:	d04a      	beq.n	22968 <k_queue_append_list+0xa4>
   228d2:	2a00      	cmp	r2, #0
   228d4:	d048      	beq.n	22968 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   228d6:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   228da:	f04f 0340 	mov.w	r3, #64	; 0x40
   228de:	f3ef 8911 	mrs	r9, BASEPRI
   228e2:	f383 8812 	msr	BASEPRI_MAX, r3
   228e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228ea:	4630      	mov	r0, r6
   228ec:	f7ff fd36 	bl	2235c <z_spin_lock_valid>
   228f0:	b968      	cbnz	r0, 2290e <k_queue_append_list+0x4a>
   228f2:	4a1f      	ldr	r2, [pc, #124]	; (22970 <k_queue_append_list+0xac>)
   228f4:	491f      	ldr	r1, [pc, #124]	; (22974 <k_queue_append_list+0xb0>)
   228f6:	4820      	ldr	r0, [pc, #128]	; (22978 <k_queue_append_list+0xb4>)
   228f8:	2381      	movs	r3, #129	; 0x81
   228fa:	f005 ff39 	bl	28770 <printk>
   228fe:	481f      	ldr	r0, [pc, #124]	; (2297c <k_queue_append_list+0xb8>)
   22900:	4631      	mov	r1, r6
   22902:	f005 ff35 	bl	28770 <printk>
   22906:	481a      	ldr	r0, [pc, #104]	; (22970 <k_queue_append_list+0xac>)
   22908:	2181      	movs	r1, #129	; 0x81
   2290a:	f006 f922 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2290e:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   22910:	f105 080c 	add.w	r8, r5, #12
   22914:	f7ff fd40 	bl	22398 <z_spin_lock_set_owner>
   22918:	4640      	mov	r0, r8
   2291a:	f001 fde7 	bl	244ec <z_unpend_first_thread>
   2291e:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   22922:	b920      	cbnz	r0, 2292e <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   22924:	686b      	ldr	r3, [r5, #4]
   22926:	b9cb      	cbnz	r3, 2295c <k_queue_append_list+0x98>
	list->head = node;
   22928:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2292a:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2292c:	e00a      	b.n	22944 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   2292e:	6144      	str	r4, [r0, #20]
   22930:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   22934:	f001 fa2a 	bl	23d8c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   22938:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2293a:	4640      	mov	r0, r8
   2293c:	f001 fdd6 	bl	244ec <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   22940:	2c00      	cmp	r4, #0
   22942:	d1ee      	bne.n	22922 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   22944:	2104      	movs	r1, #4
   22946:	f105 0014 	add.w	r0, r5, #20
   2294a:	f00a fe02 	bl	2d552 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2294e:	4630      	mov	r0, r6
   22950:	4649      	mov	r1, r9
   22952:	f000 ff7b 	bl	2384c <z_reschedule>
	return 0;
   22956:	2000      	movs	r0, #0
}
   22958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2295c:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2295e:	f001 0103 	and.w	r1, r1, #3
   22962:	430c      	orrs	r4, r1
   22964:	601c      	str	r4, [r3, #0]
}
   22966:	e7e0      	b.n	2292a <k_queue_append_list+0x66>
		return -EINVAL;
   22968:	f06f 0015 	mvn.w	r0, #21
   2296c:	e7f4      	b.n	22958 <k_queue_append_list+0x94>
   2296e:	bf00      	nop
   22970:	0002ebfd 	.word	0x0002ebfd
   22974:	0002ec4f 	.word	0x0002ec4f
   22978:	0002e915 	.word	0x0002e915
   2297c:	0002ec64 	.word	0x0002ec64

00022980 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   22980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22984:	4606      	mov	r6, r0
   22986:	4690      	mov	r8, r2
   22988:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2298a:	f100 0508 	add.w	r5, r0, #8
   2298e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22992:	f3ef 8711 	mrs	r7, BASEPRI
   22996:	f383 8812 	msr	BASEPRI_MAX, r3
   2299a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2299e:	4628      	mov	r0, r5
   229a0:	f7ff fcdc 	bl	2235c <z_spin_lock_valid>
   229a4:	b968      	cbnz	r0, 229c2 <z_impl_k_queue_get+0x42>
   229a6:	4a25      	ldr	r2, [pc, #148]	; (22a3c <z_impl_k_queue_get+0xbc>)
   229a8:	4925      	ldr	r1, [pc, #148]	; (22a40 <z_impl_k_queue_get+0xc0>)
   229aa:	4826      	ldr	r0, [pc, #152]	; (22a44 <z_impl_k_queue_get+0xc4>)
   229ac:	2381      	movs	r3, #129	; 0x81
   229ae:	f005 fedf 	bl	28770 <printk>
   229b2:	4825      	ldr	r0, [pc, #148]	; (22a48 <z_impl_k_queue_get+0xc8>)
   229b4:	4629      	mov	r1, r5
   229b6:	f005 fedb 	bl	28770 <printk>
   229ba:	4820      	ldr	r0, [pc, #128]	; (22a3c <z_impl_k_queue_get+0xbc>)
   229bc:	2181      	movs	r1, #129	; 0x81
   229be:	f006 f8c8 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   229c2:	4628      	mov	r0, r5
   229c4:	f7ff fce8 	bl	22398 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   229c8:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   229ca:	b334      	cbz	r4, 22a1a <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   229cc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   229ce:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   229d0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   229d4:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   229d6:	4620      	mov	r0, r4
	list->head = node;
   229d8:	6033      	str	r3, [r6, #0]
	list->tail = node;
   229da:	bf08      	it	eq
   229dc:	6073      	streq	r3, [r6, #4]
   229de:	2101      	movs	r1, #1
   229e0:	f00a fc69 	bl	2d2b6 <z_queue_node_peek>
   229e4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229e6:	4628      	mov	r0, r5
   229e8:	f7ff fcc6 	bl	22378 <z_spin_unlock_valid>
   229ec:	b968      	cbnz	r0, 22a0a <z_impl_k_queue_get+0x8a>
   229ee:	4a13      	ldr	r2, [pc, #76]	; (22a3c <z_impl_k_queue_get+0xbc>)
   229f0:	4916      	ldr	r1, [pc, #88]	; (22a4c <z_impl_k_queue_get+0xcc>)
   229f2:	4814      	ldr	r0, [pc, #80]	; (22a44 <z_impl_k_queue_get+0xc4>)
   229f4:	23ac      	movs	r3, #172	; 0xac
   229f6:	f005 febb 	bl	28770 <printk>
   229fa:	4815      	ldr	r0, [pc, #84]	; (22a50 <z_impl_k_queue_get+0xd0>)
   229fc:	4629      	mov	r1, r5
   229fe:	f005 feb7 	bl	28770 <printk>
   22a02:	480e      	ldr	r0, [pc, #56]	; (22a3c <z_impl_k_queue_get+0xbc>)
   22a04:	21ac      	movs	r1, #172	; 0xac
   22a06:	f006 f8a4 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   22a0a:	f387 8811 	msr	BASEPRI, r7
   22a0e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   22a12:	4620      	mov	r0, r4
   22a14:	b003      	add	sp, #12
   22a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22a1a:	ea58 0309 	orrs.w	r3, r8, r9
   22a1e:	d0e2      	beq.n	229e6 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   22a20:	e9cd 8900 	strd	r8, r9, [sp]
   22a24:	f106 020c 	add.w	r2, r6, #12
   22a28:	4639      	mov	r1, r7
   22a2a:	4628      	mov	r0, r5
   22a2c:	f001 fb60 	bl	240f0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22a30:	2800      	cmp	r0, #0
   22a32:	d1ee      	bne.n	22a12 <z_impl_k_queue_get+0x92>
   22a34:	4b07      	ldr	r3, [pc, #28]	; (22a54 <z_impl_k_queue_get+0xd4>)
   22a36:	689b      	ldr	r3, [r3, #8]
   22a38:	695c      	ldr	r4, [r3, #20]
   22a3a:	e7ea      	b.n	22a12 <z_impl_k_queue_get+0x92>
   22a3c:	0002ebfd 	.word	0x0002ebfd
   22a40:	0002ec4f 	.word	0x0002ec4f
   22a44:	0002e915 	.word	0x0002e915
   22a48:	0002ec64 	.word	0x0002ec64
   22a4c:	0002ec23 	.word	0x0002ec23
   22a50:	0002ec3a 	.word	0x0002ec3a
   22a54:	20002cfc 	.word	0x20002cfc

00022a58 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22a58:	b538      	push	{r3, r4, r5, lr}
   22a5a:	4604      	mov	r4, r0
	__asm__ volatile(
   22a5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a60:	f3ef 8511 	mrs	r5, BASEPRI
   22a64:	f383 8812 	msr	BASEPRI_MAX, r3
   22a68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a6c:	4817      	ldr	r0, [pc, #92]	; (22acc <z_impl_k_sem_give+0x74>)
   22a6e:	f7ff fc75 	bl	2235c <z_spin_lock_valid>
   22a72:	b968      	cbnz	r0, 22a90 <z_impl_k_sem_give+0x38>
   22a74:	4a16      	ldr	r2, [pc, #88]	; (22ad0 <z_impl_k_sem_give+0x78>)
   22a76:	4917      	ldr	r1, [pc, #92]	; (22ad4 <z_impl_k_sem_give+0x7c>)
   22a78:	4817      	ldr	r0, [pc, #92]	; (22ad8 <z_impl_k_sem_give+0x80>)
   22a7a:	2381      	movs	r3, #129	; 0x81
   22a7c:	f005 fe78 	bl	28770 <printk>
   22a80:	4912      	ldr	r1, [pc, #72]	; (22acc <z_impl_k_sem_give+0x74>)
   22a82:	4816      	ldr	r0, [pc, #88]	; (22adc <z_impl_k_sem_give+0x84>)
   22a84:	f005 fe74 	bl	28770 <printk>
   22a88:	4811      	ldr	r0, [pc, #68]	; (22ad0 <z_impl_k_sem_give+0x78>)
   22a8a:	2181      	movs	r1, #129	; 0x81
   22a8c:	f006 f861 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a90:	480e      	ldr	r0, [pc, #56]	; (22acc <z_impl_k_sem_give+0x74>)
   22a92:	f7ff fc81 	bl	22398 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   22a96:	4620      	mov	r0, r4
   22a98:	f001 fd28 	bl	244ec <z_unpend_first_thread>

	if (thread != NULL) {
   22a9c:	b148      	cbz	r0, 22ab2 <z_impl_k_sem_give+0x5a>
   22a9e:	2200      	movs	r2, #0
   22aa0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   22aa2:	f001 f973 	bl	23d8c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   22aa6:	4629      	mov	r1, r5
   22aa8:	4808      	ldr	r0, [pc, #32]	; (22acc <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   22aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   22aae:	f000 becd 	b.w	2384c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22ab2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   22ab6:	429a      	cmp	r2, r3
   22ab8:	bf18      	it	ne
   22aba:	3301      	addne	r3, #1
   22abc:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22abe:	2102      	movs	r1, #2
   22ac0:	f104 0010 	add.w	r0, r4, #16
   22ac4:	f00a fd45 	bl	2d552 <z_handle_obj_poll_events>
}
   22ac8:	e7ed      	b.n	22aa6 <z_impl_k_sem_give+0x4e>
   22aca:	bf00      	nop
   22acc:	20002d28 	.word	0x20002d28
   22ad0:	0002ebfd 	.word	0x0002ebfd
   22ad4:	0002ec4f 	.word	0x0002ec4f
   22ad8:	0002e915 	.word	0x0002e915
   22adc:	0002ec64 	.word	0x0002ec64

00022ae0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   22ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22ae2:	4604      	mov	r4, r0
   22ae4:	4616      	mov	r6, r2
   22ae6:	461f      	mov	r7, r3
   22ae8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   22aec:	b17b      	cbz	r3, 22b0e <z_impl_k_sem_take+0x2e>
   22aee:	ea56 0307 	orrs.w	r3, r6, r7
   22af2:	d00c      	beq.n	22b0e <z_impl_k_sem_take+0x2e>
   22af4:	4935      	ldr	r1, [pc, #212]	; (22bcc <z_impl_k_sem_take+0xec>)
   22af6:	4a36      	ldr	r2, [pc, #216]	; (22bd0 <z_impl_k_sem_take+0xf0>)
   22af8:	4836      	ldr	r0, [pc, #216]	; (22bd4 <z_impl_k_sem_take+0xf4>)
   22afa:	2379      	movs	r3, #121	; 0x79
   22afc:	f005 fe38 	bl	28770 <printk>
   22b00:	4835      	ldr	r0, [pc, #212]	; (22bd8 <z_impl_k_sem_take+0xf8>)
   22b02:	f005 fe35 	bl	28770 <printk>
   22b06:	4832      	ldr	r0, [pc, #200]	; (22bd0 <z_impl_k_sem_take+0xf0>)
   22b08:	2179      	movs	r1, #121	; 0x79
   22b0a:	f006 f822 	bl	28b52 <assert_post_action>
   22b0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b12:	f3ef 8511 	mrs	r5, BASEPRI
   22b16:	f383 8812 	msr	BASEPRI_MAX, r3
   22b1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b1e:	482f      	ldr	r0, [pc, #188]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22b20:	f7ff fc1c 	bl	2235c <z_spin_lock_valid>
   22b24:	b968      	cbnz	r0, 22b42 <z_impl_k_sem_take+0x62>
   22b26:	4a2e      	ldr	r2, [pc, #184]	; (22be0 <z_impl_k_sem_take+0x100>)
   22b28:	492e      	ldr	r1, [pc, #184]	; (22be4 <z_impl_k_sem_take+0x104>)
   22b2a:	482a      	ldr	r0, [pc, #168]	; (22bd4 <z_impl_k_sem_take+0xf4>)
   22b2c:	2381      	movs	r3, #129	; 0x81
   22b2e:	f005 fe1f 	bl	28770 <printk>
   22b32:	492a      	ldr	r1, [pc, #168]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22b34:	482c      	ldr	r0, [pc, #176]	; (22be8 <z_impl_k_sem_take+0x108>)
   22b36:	f005 fe1b 	bl	28770 <printk>
   22b3a:	4829      	ldr	r0, [pc, #164]	; (22be0 <z_impl_k_sem_take+0x100>)
   22b3c:	2181      	movs	r1, #129	; 0x81
   22b3e:	f006 f808 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   22b42:	4826      	ldr	r0, [pc, #152]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22b44:	f7ff fc28 	bl	22398 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   22b48:	68a3      	ldr	r3, [r4, #8]
   22b4a:	b1d3      	cbz	r3, 22b82 <z_impl_k_sem_take+0xa2>
		sem->count--;
   22b4c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b4e:	4823      	ldr	r0, [pc, #140]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22b50:	60a3      	str	r3, [r4, #8]
   22b52:	f7ff fc11 	bl	22378 <z_spin_unlock_valid>
   22b56:	b968      	cbnz	r0, 22b74 <z_impl_k_sem_take+0x94>
   22b58:	4a21      	ldr	r2, [pc, #132]	; (22be0 <z_impl_k_sem_take+0x100>)
   22b5a:	4924      	ldr	r1, [pc, #144]	; (22bec <z_impl_k_sem_take+0x10c>)
   22b5c:	481d      	ldr	r0, [pc, #116]	; (22bd4 <z_impl_k_sem_take+0xf4>)
   22b5e:	23ac      	movs	r3, #172	; 0xac
   22b60:	f005 fe06 	bl	28770 <printk>
   22b64:	491d      	ldr	r1, [pc, #116]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22b66:	4822      	ldr	r0, [pc, #136]	; (22bf0 <z_impl_k_sem_take+0x110>)
   22b68:	f005 fe02 	bl	28770 <printk>
   22b6c:	481c      	ldr	r0, [pc, #112]	; (22be0 <z_impl_k_sem_take+0x100>)
   22b6e:	21ac      	movs	r1, #172	; 0xac
   22b70:	f005 ffef 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   22b74:	f385 8811 	msr	BASEPRI, r5
   22b78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   22b7c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   22b7e:	b003      	add	sp, #12
   22b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22b82:	ea56 0307 	orrs.w	r3, r6, r7
   22b86:	d118      	bne.n	22bba <z_impl_k_sem_take+0xda>
   22b88:	4814      	ldr	r0, [pc, #80]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22b8a:	f7ff fbf5 	bl	22378 <z_spin_unlock_valid>
   22b8e:	b968      	cbnz	r0, 22bac <z_impl_k_sem_take+0xcc>
   22b90:	4a13      	ldr	r2, [pc, #76]	; (22be0 <z_impl_k_sem_take+0x100>)
   22b92:	4916      	ldr	r1, [pc, #88]	; (22bec <z_impl_k_sem_take+0x10c>)
   22b94:	480f      	ldr	r0, [pc, #60]	; (22bd4 <z_impl_k_sem_take+0xf4>)
   22b96:	23ac      	movs	r3, #172	; 0xac
   22b98:	f005 fdea 	bl	28770 <printk>
   22b9c:	490f      	ldr	r1, [pc, #60]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22b9e:	4814      	ldr	r0, [pc, #80]	; (22bf0 <z_impl_k_sem_take+0x110>)
   22ba0:	f005 fde6 	bl	28770 <printk>
   22ba4:	480e      	ldr	r0, [pc, #56]	; (22be0 <z_impl_k_sem_take+0x100>)
   22ba6:	21ac      	movs	r1, #172	; 0xac
   22ba8:	f005 ffd3 	bl	28b52 <assert_post_action>
   22bac:	f385 8811 	msr	BASEPRI, r5
   22bb0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   22bb4:	f06f 000f 	mvn.w	r0, #15
   22bb8:	e7e1      	b.n	22b7e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   22bba:	e9cd 6700 	strd	r6, r7, [sp]
   22bbe:	4622      	mov	r2, r4
   22bc0:	4629      	mov	r1, r5
   22bc2:	4806      	ldr	r0, [pc, #24]	; (22bdc <z_impl_k_sem_take+0xfc>)
   22bc4:	f001 fa94 	bl	240f0 <z_pend_curr>
	return ret;
   22bc8:	e7d9      	b.n	22b7e <z_impl_k_sem_take+0x9e>
   22bca:	bf00      	nop
   22bcc:	0003262b 	.word	0x0003262b
   22bd0:	0003260b 	.word	0x0003260b
   22bd4:	0002e915 	.word	0x0002e915
   22bd8:	00031821 	.word	0x00031821
   22bdc:	20002d28 	.word	0x20002d28
   22be0:	0002ebfd 	.word	0x0002ebfd
   22be4:	0002ec4f 	.word	0x0002ec4f
   22be8:	0002ec64 	.word	0x0002ec64
   22bec:	0002ec23 	.word	0x0002ec23
   22bf0:	0002ec3a 	.word	0x0002ec3a

00022bf4 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   22bf4:	b570      	push	{r4, r5, r6, lr}
   22bf6:	4604      	mov	r4, r0
	__asm__ volatile(
   22bf8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bfc:	f3ef 8511 	mrs	r5, BASEPRI
   22c00:	f383 8812 	msr	BASEPRI_MAX, r3
   22c04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c08:	4815      	ldr	r0, [pc, #84]	; (22c60 <z_impl_k_sem_reset+0x6c>)
   22c0a:	f7ff fba7 	bl	2235c <z_spin_lock_valid>
   22c0e:	b968      	cbnz	r0, 22c2c <z_impl_k_sem_reset+0x38>
   22c10:	4a14      	ldr	r2, [pc, #80]	; (22c64 <z_impl_k_sem_reset+0x70>)
   22c12:	4915      	ldr	r1, [pc, #84]	; (22c68 <z_impl_k_sem_reset+0x74>)
   22c14:	4815      	ldr	r0, [pc, #84]	; (22c6c <z_impl_k_sem_reset+0x78>)
   22c16:	2381      	movs	r3, #129	; 0x81
   22c18:	f005 fdaa 	bl	28770 <printk>
   22c1c:	4910      	ldr	r1, [pc, #64]	; (22c60 <z_impl_k_sem_reset+0x6c>)
   22c1e:	4814      	ldr	r0, [pc, #80]	; (22c70 <z_impl_k_sem_reset+0x7c>)
   22c20:	f005 fda6 	bl	28770 <printk>
   22c24:	480f      	ldr	r0, [pc, #60]	; (22c64 <z_impl_k_sem_reset+0x70>)
   22c26:	2181      	movs	r1, #129	; 0x81
   22c28:	f005 ff93 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   22c2c:	480c      	ldr	r0, [pc, #48]	; (22c60 <z_impl_k_sem_reset+0x6c>)
   22c2e:	f7ff fbb3 	bl	22398 <z_spin_lock_set_owner>
   22c32:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   22c36:	4620      	mov	r0, r4
   22c38:	f001 fc58 	bl	244ec <z_unpend_first_thread>
		if (thread == NULL) {
   22c3c:	b118      	cbz	r0, 22c46 <z_impl_k_sem_reset+0x52>
   22c3e:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   22c40:	f001 f8a4 	bl	23d8c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   22c44:	e7f7      	b.n	22c36 <z_impl_k_sem_reset+0x42>
	}
	sem->count = 0;
   22c46:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   22c48:	2102      	movs	r1, #2
   22c4a:	f104 0010 	add.w	r0, r4, #16
   22c4e:	f00a fc80 	bl	2d552 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   22c52:	4629      	mov	r1, r5
   22c54:	4802      	ldr	r0, [pc, #8]	; (22c60 <z_impl_k_sem_reset+0x6c>)
}
   22c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   22c5a:	f000 bdf7 	b.w	2384c <z_reschedule>
   22c5e:	bf00      	nop
   22c60:	20002d28 	.word	0x20002d28
   22c64:	0002ebfd 	.word	0x0002ebfd
   22c68:	0002ec4f 	.word	0x0002ec4f
   22c6c:	0002e915 	.word	0x0002e915
   22c70:	0002ec64 	.word	0x0002ec64

00022c74 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   22c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   22c76:	4b09      	ldr	r3, [pc, #36]	; (22c9c <k_sys_work_q_init+0x28>)
   22c78:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   22c7a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   22c7c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   22c7e:	9300      	str	r3, [sp, #0]
   22c80:	4907      	ldr	r1, [pc, #28]	; (22ca0 <k_sys_work_q_init+0x2c>)
   22c82:	4808      	ldr	r0, [pc, #32]	; (22ca4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   22c84:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   22c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   22c90:	f000 fa88 	bl	231a4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   22c94:	4620      	mov	r0, r4
   22c96:	b004      	add	sp, #16
   22c98:	bd10      	pop	{r4, pc}
   22c9a:	bf00      	nop
   22c9c:	00032678 	.word	0x00032678
   22ca0:	20007920 	.word	0x20007920
   22ca4:	20002278 	.word	0x20002278

00022ca8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   22ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22cac:	4e7e      	ldr	r6, [pc, #504]	; (22ea8 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22cae:	4f7f      	ldr	r7, [pc, #508]	; (22eac <work_queue_main+0x204>)
{
   22cb0:	b085      	sub	sp, #20
   22cb2:	4604      	mov	r4, r0
   22cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   22cb8:	f3ef 8811 	mrs	r8, BASEPRI
   22cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   22cc0:	f3bf 8f6f 	isb	sy
   22cc4:	4630      	mov	r0, r6
   22cc6:	f7ff fb49 	bl	2235c <z_spin_lock_valid>
   22cca:	b968      	cbnz	r0, 22ce8 <work_queue_main+0x40>
   22ccc:	4a78      	ldr	r2, [pc, #480]	; (22eb0 <work_queue_main+0x208>)
   22cce:	4979      	ldr	r1, [pc, #484]	; (22eb4 <work_queue_main+0x20c>)
   22cd0:	4879      	ldr	r0, [pc, #484]	; (22eb8 <work_queue_main+0x210>)
   22cd2:	2381      	movs	r3, #129	; 0x81
   22cd4:	f005 fd4c 	bl	28770 <printk>
   22cd8:	4878      	ldr	r0, [pc, #480]	; (22ebc <work_queue_main+0x214>)
   22cda:	4631      	mov	r1, r6
   22cdc:	f005 fd48 	bl	28770 <printk>
   22ce0:	4873      	ldr	r0, [pc, #460]	; (22eb0 <work_queue_main+0x208>)
   22ce2:	2181      	movs	r1, #129	; 0x81
   22ce4:	f005 ff35 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   22ce8:	4630      	mov	r0, r6
   22cea:	f7ff fb55 	bl	22398 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   22cee:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   22cf2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   22cf6:	b9ad      	cbnz	r5, 22d24 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   22cf8:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   22cfc:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   22cfe:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   22d02:	f100 8092 	bmi.w	22e2a <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   22d06:	2300      	movs	r3, #0
   22d08:	9302      	str	r3, [sp, #8]
   22d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22d12:	e9cd 2300 	strd	r2, r3, [sp]
   22d16:	4641      	mov	r1, r8
   22d18:	f104 0288 	add.w	r2, r4, #136	; 0x88
   22d1c:	4630      	mov	r0, r6
   22d1e:	f001 feed 	bl	24afc <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   22d22:	e7c7      	b.n	22cb4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22d24:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   22d28:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   22d2a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22d2e:	428d      	cmp	r5, r1
   22d30:	d101      	bne.n	22d36 <work_queue_main+0x8e>
	list->tail = node;
   22d32:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   22d36:	f043 0302 	orr.w	r3, r3, #2
   22d3a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   22d3e:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   22d40:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   22d44:	f023 0304 	bic.w	r3, r3, #4
   22d48:	f043 0301 	orr.w	r3, r3, #1
   22d4c:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d4e:	4630      	mov	r0, r6
   22d50:	f7ff fb12 	bl	22378 <z_spin_unlock_valid>
   22d54:	b968      	cbnz	r0, 22d72 <work_queue_main+0xca>
   22d56:	4a56      	ldr	r2, [pc, #344]	; (22eb0 <work_queue_main+0x208>)
   22d58:	4959      	ldr	r1, [pc, #356]	; (22ec0 <work_queue_main+0x218>)
   22d5a:	4857      	ldr	r0, [pc, #348]	; (22eb8 <work_queue_main+0x210>)
   22d5c:	23ac      	movs	r3, #172	; 0xac
   22d5e:	f005 fd07 	bl	28770 <printk>
   22d62:	4858      	ldr	r0, [pc, #352]	; (22ec4 <work_queue_main+0x21c>)
   22d64:	4631      	mov	r1, r6
   22d66:	f005 fd03 	bl	28770 <printk>
   22d6a:	4851      	ldr	r0, [pc, #324]	; (22eb0 <work_queue_main+0x208>)
   22d6c:	21ac      	movs	r1, #172	; 0xac
   22d6e:	f005 fef0 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   22d72:	f388 8811 	msr	BASEPRI, r8
   22d76:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   22d7a:	f1b9 0f00 	cmp.w	r9, #0
   22d7e:	d10b      	bne.n	22d98 <work_queue_main+0xf0>
   22d80:	4951      	ldr	r1, [pc, #324]	; (22ec8 <work_queue_main+0x220>)
   22d82:	484d      	ldr	r0, [pc, #308]	; (22eb8 <work_queue_main+0x210>)
   22d84:	4a51      	ldr	r2, [pc, #324]	; (22ecc <work_queue_main+0x224>)
   22d86:	f44f 7322 	mov.w	r3, #648	; 0x288
   22d8a:	f005 fcf1 	bl	28770 <printk>
   22d8e:	484f      	ldr	r0, [pc, #316]	; (22ecc <work_queue_main+0x224>)
   22d90:	f44f 7122 	mov.w	r1, #648	; 0x288
   22d94:	f005 fedd 	bl	28b52 <assert_post_action>
		handler(work);
   22d98:	4628      	mov	r0, r5
   22d9a:	47c8      	blx	r9
	__asm__ volatile(
   22d9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22da0:	f3ef 8a11 	mrs	sl, BASEPRI
   22da4:	f383 8812 	msr	BASEPRI_MAX, r3
   22da8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22dac:	4630      	mov	r0, r6
   22dae:	f7ff fad5 	bl	2235c <z_spin_lock_valid>
   22db2:	b968      	cbnz	r0, 22dd0 <work_queue_main+0x128>
   22db4:	4a3e      	ldr	r2, [pc, #248]	; (22eb0 <work_queue_main+0x208>)
   22db6:	493f      	ldr	r1, [pc, #252]	; (22eb4 <work_queue_main+0x20c>)
   22db8:	483f      	ldr	r0, [pc, #252]	; (22eb8 <work_queue_main+0x210>)
   22dba:	2381      	movs	r3, #129	; 0x81
   22dbc:	f005 fcd8 	bl	28770 <printk>
   22dc0:	483e      	ldr	r0, [pc, #248]	; (22ebc <work_queue_main+0x214>)
   22dc2:	4631      	mov	r1, r6
   22dc4:	f005 fcd4 	bl	28770 <printk>
   22dc8:	4839      	ldr	r0, [pc, #228]	; (22eb0 <work_queue_main+0x208>)
   22dca:	2181      	movs	r1, #129	; 0x81
   22dcc:	f005 fec1 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   22dd0:	4630      	mov	r0, r6
   22dd2:	f7ff fae1 	bl	22398 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   22dd6:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22dd8:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   22dda:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22dde:	d42e      	bmi.n	22e3e <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   22de0:	60ea      	str	r2, [r5, #12]
   22de2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   22de6:	f023 0302 	bic.w	r3, r3, #2
   22dea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22dee:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   22df0:	f3c3 2500 	ubfx	r5, r3, #8, #1
   22df4:	f7ff fac0 	bl	22378 <z_spin_unlock_valid>
   22df8:	b968      	cbnz	r0, 22e16 <work_queue_main+0x16e>
   22dfa:	4a2d      	ldr	r2, [pc, #180]	; (22eb0 <work_queue_main+0x208>)
   22dfc:	4930      	ldr	r1, [pc, #192]	; (22ec0 <work_queue_main+0x218>)
   22dfe:	482e      	ldr	r0, [pc, #184]	; (22eb8 <work_queue_main+0x210>)
   22e00:	23ac      	movs	r3, #172	; 0xac
   22e02:	f005 fcb5 	bl	28770 <printk>
   22e06:	482f      	ldr	r0, [pc, #188]	; (22ec4 <work_queue_main+0x21c>)
   22e08:	4631      	mov	r1, r6
   22e0a:	f005 fcb1 	bl	28770 <printk>
   22e0e:	4828      	ldr	r0, [pc, #160]	; (22eb0 <work_queue_main+0x208>)
   22e10:	21ac      	movs	r1, #172	; 0xac
   22e12:	f005 fe9e 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   22e16:	f38a 8811 	msr	BASEPRI, sl
   22e1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   22e1e:	2d00      	cmp	r5, #0
   22e20:	f47f af48 	bne.w	22cb4 <work_queue_main+0xc>
	z_impl_k_yield();
   22e24:	f001 fbbe 	bl	245a4 <z_impl_k_yield>
}
   22e28:	e744      	b.n	22cb4 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   22e2a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   22e2e:	2200      	movs	r2, #0
   22e30:	2101      	movs	r1, #1
   22e32:	4628      	mov	r0, r5
   22e34:	f001 fe0a 	bl	24a4c <z_sched_wake>
   22e38:	2800      	cmp	r0, #0
   22e3a:	d1f8      	bne.n	22e2e <work_queue_main+0x186>
   22e3c:	e763      	b.n	22d06 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22e3e:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   22e40:	f023 0303 	bic.w	r3, r3, #3
   22e44:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22e46:	2800      	cmp	r0, #0
   22e48:	d0cb      	beq.n	22de2 <work_queue_main+0x13a>
	return node->next;
   22e4a:	6803      	ldr	r3, [r0, #0]
   22e4c:	2b00      	cmp	r3, #0
   22e4e:	bf38      	it	cc
   22e50:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22e52:	f04f 0900 	mov.w	r9, #0
   22e56:	4698      	mov	r8, r3
	parent->next = child;
   22e58:	46cb      	mov	fp, r9
		if (wc->work == work) {
   22e5a:	6843      	ldr	r3, [r0, #4]
   22e5c:	429d      	cmp	r5, r3
   22e5e:	4602      	mov	r2, r0
   22e60:	d10d      	bne.n	22e7e <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   22e62:	6802      	ldr	r2, [r0, #0]
   22e64:	f1b9 0f00 	cmp.w	r9, #0
   22e68:	d115      	bne.n	22e96 <work_queue_main+0x1ee>
   22e6a:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   22e6c:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   22e6e:	4283      	cmp	r3, r0
   22e70:	d100      	bne.n	22e74 <work_queue_main+0x1cc>
	list->tail = node;
   22e72:	607a      	str	r2, [r7, #4]
	parent->next = child;
   22e74:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   22e78:	f7ff fdee 	bl	22a58 <z_impl_k_sem_give>
}
   22e7c:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22e7e:	f1b8 0f00 	cmp.w	r8, #0
   22e82:	d0ae      	beq.n	22de2 <work_queue_main+0x13a>
	return node->next;
   22e84:	f8d8 3000 	ldr.w	r3, [r8]
   22e88:	2b00      	cmp	r3, #0
   22e8a:	bf38      	it	cc
   22e8c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22e8e:	4640      	mov	r0, r8
   22e90:	4691      	mov	r9, r2
   22e92:	4698      	mov	r8, r3
   22e94:	e7e1      	b.n	22e5a <work_queue_main+0x1b2>
	parent->next = child;
   22e96:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   22e9a:	687b      	ldr	r3, [r7, #4]
   22e9c:	4283      	cmp	r3, r0
	list->tail = node;
   22e9e:	bf08      	it	eq
   22ea0:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   22ea4:	e7e6      	b.n	22e74 <work_queue_main+0x1cc>
   22ea6:	bf00      	nop
   22ea8:	20002d2c 	.word	0x20002d2c
   22eac:	20002d30 	.word	0x20002d30
   22eb0:	0002ebfd 	.word	0x0002ebfd
   22eb4:	0002ec4f 	.word	0x0002ec4f
   22eb8:	0002e915 	.word	0x0002e915
   22ebc:	0002ec64 	.word	0x0002ec64
   22ec0:	0002ec23 	.word	0x0002ec23
   22ec4:	0002ec3a 	.word	0x0002ec3a
   22ec8:	000326a2 	.word	0x000326a2
   22ecc:	00032681 	.word	0x00032681

00022ed0 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   22ed0:	68c3      	ldr	r3, [r0, #12]
{
   22ed2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   22ed4:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   22ed8:	079b      	lsls	r3, r3, #30
{
   22eda:	4605      	mov	r5, r0
   22edc:	460c      	mov	r4, r1
	if (ret) {
   22ede:	d50d      	bpl.n	22efc <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   22ee0:	2201      	movs	r2, #1
   22ee2:	2100      	movs	r1, #0
   22ee4:	f104 0008 	add.w	r0, r4, #8
   22ee8:	f00a fa13 	bl	2d312 <z_impl_k_sem_init>
	parent->next = child;
   22eec:	2300      	movs	r3, #0
   22eee:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22ef0:	4b05      	ldr	r3, [pc, #20]	; (22f08 <cancel_sync_locked+0x38>)
	canceler->work = work;
   22ef2:	6065      	str	r5, [r4, #4]
   22ef4:	685a      	ldr	r2, [r3, #4]
   22ef6:	b91a      	cbnz	r2, 22f00 <cancel_sync_locked+0x30>
	list->head = node;
   22ef8:	e9c3 4400 	strd	r4, r4, [r3]
}
   22efc:	4630      	mov	r0, r6
   22efe:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   22f00:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22f02:	605c      	str	r4, [r3, #4]
}
   22f04:	e7fa      	b.n	22efc <cancel_sync_locked+0x2c>
   22f06:	bf00      	nop
   22f08:	20002d30 	.word	0x20002d30

00022f0c <submit_to_queue_locked>:
{
   22f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22f0e:	68c3      	ldr	r3, [r0, #12]
   22f10:	079a      	lsls	r2, r3, #30
{
   22f12:	4604      	mov	r4, r0
   22f14:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   22f16:	f3c3 0540 	ubfx	r5, r3, #1, #1
   22f1a:	d42b      	bmi.n	22f74 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   22f1c:	075f      	lsls	r7, r3, #29
   22f1e:	d42b      	bmi.n	22f78 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   22f20:	680a      	ldr	r2, [r1, #0]
   22f22:	b90a      	cbnz	r2, 22f28 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   22f24:	6882      	ldr	r2, [r0, #8]
   22f26:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   22f28:	07d8      	lsls	r0, r3, #31
   22f2a:	d528      	bpl.n	22f7e <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   22f2c:	68a3      	ldr	r3, [r4, #8]
   22f2e:	b95b      	cbnz	r3, 22f48 <submit_to_queue_locked+0x3c>
   22f30:	4924      	ldr	r1, [pc, #144]	; (22fc4 <submit_to_queue_locked+0xb8>)
   22f32:	4825      	ldr	r0, [pc, #148]	; (22fc8 <submit_to_queue_locked+0xbc>)
   22f34:	4a25      	ldr	r2, [pc, #148]	; (22fcc <submit_to_queue_locked+0xc0>)
   22f36:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   22f3a:	f005 fc19 	bl	28770 <printk>
   22f3e:	4823      	ldr	r0, [pc, #140]	; (22fcc <submit_to_queue_locked+0xc0>)
   22f40:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   22f44:	f005 fe05 	bl	28b52 <assert_post_action>
			*queuep = work->queue;
   22f48:	68a3      	ldr	r3, [r4, #8]
   22f4a:	6033      	str	r3, [r6, #0]
			ret = 2;
   22f4c:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   22f4e:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   22f50:	b38f      	cbz	r7, 22fb6 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22f52:	4b1f      	ldr	r3, [pc, #124]	; (22fd0 <submit_to_queue_locked+0xc4>)
   22f54:	689b      	ldr	r3, [r3, #8]
   22f56:	42bb      	cmp	r3, r7
   22f58:	d113      	bne.n	22f82 <submit_to_queue_locked+0x76>
   22f5a:	f00a f991 	bl	2d280 <k_is_in_isr>
   22f5e:	f080 0001 	eor.w	r0, r0, #1
   22f62:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   22f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22f68:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   22f6a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   22f6e:	d525      	bpl.n	22fbc <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   22f70:	b14a      	cbz	r2, 22f86 <submit_to_queue_locked+0x7a>
   22f72:	b950      	cbnz	r0, 22f8a <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   22f74:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   22f78:	2300      	movs	r3, #0
   22f7a:	6033      	str	r3, [r6, #0]
	return ret;
   22f7c:	e015      	b.n	22faa <submit_to_queue_locked+0x9e>
		ret = 1;
   22f7e:	2501      	movs	r5, #1
   22f80:	e7e5      	b.n	22f4e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   22f82:	2000      	movs	r0, #0
   22f84:	e7ee      	b.n	22f64 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   22f86:	071b      	lsls	r3, r3, #28
   22f88:	d4f4      	bmi.n	22f74 <submit_to_queue_locked+0x68>
	parent->next = child;
   22f8a:	2300      	movs	r3, #0
   22f8c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   22f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   22f92:	b963      	cbnz	r3, 22fae <submit_to_queue_locked+0xa2>
	list->head = node;
   22f94:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   22f98:	4638      	mov	r0, r7
   22f9a:	f00a f9ca 	bl	2d332 <notify_queue_locked>
	*flagp |= BIT(bit);
   22f9e:	68e3      	ldr	r3, [r4, #12]
   22fa0:	f043 0304 	orr.w	r3, r3, #4
   22fa4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   22fa6:	6833      	ldr	r3, [r6, #0]
   22fa8:	60a3      	str	r3, [r4, #8]
}
   22faa:	4628      	mov	r0, r5
   22fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   22fae:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22fb0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   22fb4:	e7f0      	b.n	22f98 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   22fb6:	f06f 0515 	mvn.w	r5, #21
   22fba:	e7dd      	b.n	22f78 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   22fbc:	f06f 0512 	mvn.w	r5, #18
   22fc0:	e7da      	b.n	22f78 <submit_to_queue_locked+0x6c>
   22fc2:	bf00      	nop
   22fc4:	000326b9 	.word	0x000326b9
   22fc8:	0002e915 	.word	0x0002e915
   22fcc:	00032681 	.word	0x00032681
   22fd0:	20002cfc 	.word	0x20002cfc

00022fd4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   22fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22fd6:	4604      	mov	r4, r0
	__asm__ volatile(
   22fd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   22fdc:	f3ef 8511 	mrs	r5, BASEPRI
   22fe0:	f383 8812 	msr	BASEPRI_MAX, r3
   22fe4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22fe8:	481e      	ldr	r0, [pc, #120]	; (23064 <work_timeout+0x90>)
   22fea:	f7ff f9b7 	bl	2235c <z_spin_lock_valid>
   22fee:	b968      	cbnz	r0, 2300c <work_timeout+0x38>
   22ff0:	4a1d      	ldr	r2, [pc, #116]	; (23068 <work_timeout+0x94>)
   22ff2:	491e      	ldr	r1, [pc, #120]	; (2306c <work_timeout+0x98>)
   22ff4:	481e      	ldr	r0, [pc, #120]	; (23070 <work_timeout+0x9c>)
   22ff6:	2381      	movs	r3, #129	; 0x81
   22ff8:	f005 fbba 	bl	28770 <printk>
   22ffc:	4919      	ldr	r1, [pc, #100]	; (23064 <work_timeout+0x90>)
   22ffe:	481d      	ldr	r0, [pc, #116]	; (23074 <work_timeout+0xa0>)
   23000:	f005 fbb6 	bl	28770 <printk>
   23004:	4818      	ldr	r0, [pc, #96]	; (23068 <work_timeout+0x94>)
   23006:	2181      	movs	r1, #129	; 0x81
   23008:	f005 fda3 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2300c:	4815      	ldr	r0, [pc, #84]	; (23064 <work_timeout+0x90>)
   2300e:	f7ff f9c3 	bl	22398 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   23012:	2300      	movs	r3, #0
   23014:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   23016:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   2301a:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2301e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   23020:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   23024:	d506      	bpl.n	23034 <work_timeout+0x60>
		queue = dw->queue;
   23026:	69a3      	ldr	r3, [r4, #24]
   23028:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2302a:	a901      	add	r1, sp, #4
   2302c:	f1a4 0010 	sub.w	r0, r4, #16
   23030:	f7ff ff6c 	bl	22f0c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23034:	480b      	ldr	r0, [pc, #44]	; (23064 <work_timeout+0x90>)
   23036:	f7ff f99f 	bl	22378 <z_spin_unlock_valid>
   2303a:	b968      	cbnz	r0, 23058 <work_timeout+0x84>
   2303c:	4a0a      	ldr	r2, [pc, #40]	; (23068 <work_timeout+0x94>)
   2303e:	490e      	ldr	r1, [pc, #56]	; (23078 <work_timeout+0xa4>)
   23040:	480b      	ldr	r0, [pc, #44]	; (23070 <work_timeout+0x9c>)
   23042:	23ac      	movs	r3, #172	; 0xac
   23044:	f005 fb94 	bl	28770 <printk>
   23048:	4906      	ldr	r1, [pc, #24]	; (23064 <work_timeout+0x90>)
   2304a:	480c      	ldr	r0, [pc, #48]	; (2307c <work_timeout+0xa8>)
   2304c:	f005 fb90 	bl	28770 <printk>
   23050:	4805      	ldr	r0, [pc, #20]	; (23068 <work_timeout+0x94>)
   23052:	21ac      	movs	r1, #172	; 0xac
   23054:	f005 fd7d 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23058:	f385 8811 	msr	BASEPRI, r5
   2305c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   23060:	b003      	add	sp, #12
   23062:	bd30      	pop	{r4, r5, pc}
   23064:	20002d2c 	.word	0x20002d2c
   23068:	0002ebfd 	.word	0x0002ebfd
   2306c:	0002ec4f 	.word	0x0002ec4f
   23070:	0002e915 	.word	0x0002e915
   23074:	0002ec64 	.word	0x0002ec64
   23078:	0002ec23 	.word	0x0002ec23
   2307c:	0002ec3a 	.word	0x0002ec3a

00023080 <k_work_init>:
{
   23080:	b538      	push	{r3, r4, r5, lr}
   23082:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   23084:	4604      	mov	r4, r0
   23086:	b948      	cbnz	r0, 2309c <k_work_init+0x1c>
   23088:	490d      	ldr	r1, [pc, #52]	; (230c0 <k_work_init+0x40>)
   2308a:	480e      	ldr	r0, [pc, #56]	; (230c4 <k_work_init+0x44>)
   2308c:	4a0e      	ldr	r2, [pc, #56]	; (230c8 <k_work_init+0x48>)
   2308e:	2389      	movs	r3, #137	; 0x89
   23090:	f005 fb6e 	bl	28770 <printk>
   23094:	480c      	ldr	r0, [pc, #48]	; (230c8 <k_work_init+0x48>)
   23096:	2189      	movs	r1, #137	; 0x89
   23098:	f005 fd5b 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   2309c:	b94d      	cbnz	r5, 230b2 <k_work_init+0x32>
   2309e:	490b      	ldr	r1, [pc, #44]	; (230cc <k_work_init+0x4c>)
   230a0:	4808      	ldr	r0, [pc, #32]	; (230c4 <k_work_init+0x44>)
   230a2:	4a09      	ldr	r2, [pc, #36]	; (230c8 <k_work_init+0x48>)
   230a4:	238a      	movs	r3, #138	; 0x8a
   230a6:	f005 fb63 	bl	28770 <printk>
   230aa:	4807      	ldr	r0, [pc, #28]	; (230c8 <k_work_init+0x48>)
   230ac:	218a      	movs	r1, #138	; 0x8a
   230ae:	f005 fd50 	bl	28b52 <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   230b2:	2210      	movs	r2, #16
   230b4:	2100      	movs	r1, #0
   230b6:	4620      	mov	r0, r4
   230b8:	f007 fcfa 	bl	2aab0 <memset>
   230bc:	6065      	str	r5, [r4, #4]
}
   230be:	bd38      	pop	{r3, r4, r5, pc}
   230c0:	00032758 	.word	0x00032758
   230c4:	0002e915 	.word	0x0002e915
   230c8:	00032681 	.word	0x00032681
   230cc:	000326a2 	.word	0x000326a2

000230d0 <k_work_submit_to_queue>:
{
   230d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   230d2:	460c      	mov	r4, r1
{
   230d4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   230d6:	b959      	cbnz	r1, 230f0 <k_work_submit_to_queue+0x20>
   230d8:	4926      	ldr	r1, [pc, #152]	; (23174 <k_work_submit_to_queue+0xa4>)
   230da:	4827      	ldr	r0, [pc, #156]	; (23178 <k_work_submit_to_queue+0xa8>)
   230dc:	4a27      	ldr	r2, [pc, #156]	; (2317c <k_work_submit_to_queue+0xac>)
   230de:	f240 1369 	movw	r3, #361	; 0x169
   230e2:	f005 fb45 	bl	28770 <printk>
   230e6:	4825      	ldr	r0, [pc, #148]	; (2317c <k_work_submit_to_queue+0xac>)
   230e8:	f240 1169 	movw	r1, #361	; 0x169
   230ec:	f005 fd31 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   230f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   230f4:	f3ef 8511 	mrs	r5, BASEPRI
   230f8:	f383 8812 	msr	BASEPRI_MAX, r3
   230fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23100:	481f      	ldr	r0, [pc, #124]	; (23180 <k_work_submit_to_queue+0xb0>)
   23102:	f7ff f92b 	bl	2235c <z_spin_lock_valid>
   23106:	b968      	cbnz	r0, 23124 <k_work_submit_to_queue+0x54>
   23108:	4a1e      	ldr	r2, [pc, #120]	; (23184 <k_work_submit_to_queue+0xb4>)
   2310a:	491f      	ldr	r1, [pc, #124]	; (23188 <k_work_submit_to_queue+0xb8>)
   2310c:	481a      	ldr	r0, [pc, #104]	; (23178 <k_work_submit_to_queue+0xa8>)
   2310e:	2381      	movs	r3, #129	; 0x81
   23110:	f005 fb2e 	bl	28770 <printk>
   23114:	491a      	ldr	r1, [pc, #104]	; (23180 <k_work_submit_to_queue+0xb0>)
   23116:	481d      	ldr	r0, [pc, #116]	; (2318c <k_work_submit_to_queue+0xbc>)
   23118:	f005 fb2a 	bl	28770 <printk>
   2311c:	4819      	ldr	r0, [pc, #100]	; (23184 <k_work_submit_to_queue+0xb4>)
   2311e:	2181      	movs	r1, #129	; 0x81
   23120:	f005 fd17 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23124:	4816      	ldr	r0, [pc, #88]	; (23180 <k_work_submit_to_queue+0xb0>)
   23126:	f7ff f937 	bl	22398 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   2312a:	4620      	mov	r0, r4
   2312c:	a901      	add	r1, sp, #4
   2312e:	f7ff feed 	bl	22f0c <submit_to_queue_locked>
   23132:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23134:	4812      	ldr	r0, [pc, #72]	; (23180 <k_work_submit_to_queue+0xb0>)
   23136:	f7ff f91f 	bl	22378 <z_spin_unlock_valid>
   2313a:	b968      	cbnz	r0, 23158 <k_work_submit_to_queue+0x88>
   2313c:	4a11      	ldr	r2, [pc, #68]	; (23184 <k_work_submit_to_queue+0xb4>)
   2313e:	4914      	ldr	r1, [pc, #80]	; (23190 <k_work_submit_to_queue+0xc0>)
   23140:	480d      	ldr	r0, [pc, #52]	; (23178 <k_work_submit_to_queue+0xa8>)
   23142:	23ac      	movs	r3, #172	; 0xac
   23144:	f005 fb14 	bl	28770 <printk>
   23148:	490d      	ldr	r1, [pc, #52]	; (23180 <k_work_submit_to_queue+0xb0>)
   2314a:	4812      	ldr	r0, [pc, #72]	; (23194 <k_work_submit_to_queue+0xc4>)
   2314c:	f005 fb10 	bl	28770 <printk>
   23150:	480c      	ldr	r0, [pc, #48]	; (23184 <k_work_submit_to_queue+0xb4>)
   23152:	21ac      	movs	r1, #172	; 0xac
   23154:	f005 fcfd 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23158:	f385 8811 	msr	BASEPRI, r5
   2315c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   23160:	2c00      	cmp	r4, #0
   23162:	dd04      	ble.n	2316e <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   23164:	f001 fbae 	bl	248c4 <z_impl_k_is_preempt_thread>
   23168:	b108      	cbz	r0, 2316e <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   2316a:	f001 fa1b 	bl	245a4 <z_impl_k_yield>
}
   2316e:	4620      	mov	r0, r4
   23170:	b003      	add	sp, #12
   23172:	bd30      	pop	{r4, r5, pc}
   23174:	00032758 	.word	0x00032758
   23178:	0002e915 	.word	0x0002e915
   2317c:	00032681 	.word	0x00032681
   23180:	20002d2c 	.word	0x20002d2c
   23184:	0002ebfd 	.word	0x0002ebfd
   23188:	0002ec4f 	.word	0x0002ec4f
   2318c:	0002ec64 	.word	0x0002ec64
   23190:	0002ec23 	.word	0x0002ec23
   23194:	0002ec3a 	.word	0x0002ec3a

00023198 <k_work_submit>:
{
   23198:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2319a:	4801      	ldr	r0, [pc, #4]	; (231a0 <k_work_submit+0x8>)
   2319c:	f7ff bf98 	b.w	230d0 <k_work_submit_to_queue>
   231a0:	20002278 	.word	0x20002278

000231a4 <k_work_queue_start>:
{
   231a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231a8:	b088      	sub	sp, #32
   231aa:	460e      	mov	r6, r1
   231ac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   231ae:	4617      	mov	r7, r2
   231b0:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   231b2:	4604      	mov	r4, r0
   231b4:	b958      	cbnz	r0, 231ce <k_work_queue_start+0x2a>
   231b6:	492e      	ldr	r1, [pc, #184]	; (23270 <k_work_queue_start+0xcc>)
   231b8:	482e      	ldr	r0, [pc, #184]	; (23274 <k_work_queue_start+0xd0>)
   231ba:	4a2f      	ldr	r2, [pc, #188]	; (23278 <k_work_queue_start+0xd4>)
   231bc:	f240 23b5 	movw	r3, #693	; 0x2b5
   231c0:	f005 fad6 	bl	28770 <printk>
   231c4:	482c      	ldr	r0, [pc, #176]	; (23278 <k_work_queue_start+0xd4>)
   231c6:	f240 21b5 	movw	r1, #693	; 0x2b5
   231ca:	f005 fcc2 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   231ce:	b95e      	cbnz	r6, 231e8 <k_work_queue_start+0x44>
   231d0:	492a      	ldr	r1, [pc, #168]	; (2327c <k_work_queue_start+0xd8>)
   231d2:	4828      	ldr	r0, [pc, #160]	; (23274 <k_work_queue_start+0xd0>)
   231d4:	4a28      	ldr	r2, [pc, #160]	; (23278 <k_work_queue_start+0xd4>)
   231d6:	f240 23b6 	movw	r3, #694	; 0x2b6
   231da:	f005 fac9 	bl	28770 <printk>
   231de:	4826      	ldr	r0, [pc, #152]	; (23278 <k_work_queue_start+0xd4>)
   231e0:	f240 21b6 	movw	r1, #694	; 0x2b6
   231e4:	f005 fcb5 	bl	28b52 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   231e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   231ec:	07db      	lsls	r3, r3, #31
   231ee:	d50b      	bpl.n	23208 <k_work_queue_start+0x64>
   231f0:	4923      	ldr	r1, [pc, #140]	; (23280 <k_work_queue_start+0xdc>)
   231f2:	4820      	ldr	r0, [pc, #128]	; (23274 <k_work_queue_start+0xd0>)
   231f4:	4a20      	ldr	r2, [pc, #128]	; (23278 <k_work_queue_start+0xd4>)
   231f6:	f240 23b7 	movw	r3, #695	; 0x2b7
   231fa:	f005 fab9 	bl	28770 <printk>
   231fe:	481e      	ldr	r0, [pc, #120]	; (23278 <k_work_queue_start+0xd4>)
   23200:	f240 21b7 	movw	r1, #695	; 0x2b7
   23204:	f005 fca5 	bl	28b52 <assert_post_action>
	list->head = NULL;
   23208:	2300      	movs	r3, #0
	list->tail = NULL;
   2320a:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
   2320e:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   23212:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
   23216:	f104 0390 	add.w	r3, r4, #144	; 0x90
   2321a:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   2321e:	b32d      	cbz	r5, 2326c <k_work_queue_start+0xc8>
   23220:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   23222:	2b00      	cmp	r3, #0
   23224:	f240 1101 	movw	r1, #257	; 0x101
   23228:	bf08      	it	eq
   2322a:	2101      	moveq	r1, #1
	*flagp = flags;
   2322c:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23238:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2323c:	2200      	movs	r2, #0
   2323e:	e9cd 8203 	strd	r8, r2, [sp, #12]
   23242:	e9cd 2201 	strd	r2, r2, [sp, #4]
   23246:	4b0f      	ldr	r3, [pc, #60]	; (23284 <k_work_queue_start+0xe0>)
   23248:	9400      	str	r4, [sp, #0]
   2324a:	463a      	mov	r2, r7
   2324c:	4631      	mov	r1, r6
   2324e:	4620      	mov	r0, r4
   23250:	f7fe ffa6 	bl	221a0 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   23254:	b125      	cbz	r5, 23260 <k_work_queue_start+0xbc>
   23256:	6829      	ldr	r1, [r5, #0]
   23258:	b111      	cbz	r1, 23260 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   2325a:	4620      	mov	r0, r4
   2325c:	f00a f816 	bl	2d28c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   23260:	4620      	mov	r0, r4
}
   23262:	b008      	add	sp, #32
   23264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23268:	f00a b815 	b.w	2d296 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2326c:	2101      	movs	r1, #1
   2326e:	e7dd      	b.n	2322c <k_work_queue_start+0x88>
   23270:	00032717 	.word	0x00032717
   23274:	0002e915 	.word	0x0002e915
   23278:	00032681 	.word	0x00032681
   2327c:	0003271d 	.word	0x0003271d
   23280:	00032723 	.word	0x00032723
   23284:	00022ca9 	.word	0x00022ca9

00023288 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   23288:	b538      	push	{r3, r4, r5, lr}
   2328a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2328c:	4604      	mov	r4, r0
   2328e:	b958      	cbnz	r0, 232a8 <k_work_init_delayable+0x20>
   23290:	4911      	ldr	r1, [pc, #68]	; (232d8 <k_work_init_delayable+0x50>)
   23292:	4812      	ldr	r0, [pc, #72]	; (232dc <k_work_init_delayable+0x54>)
   23294:	4a12      	ldr	r2, [pc, #72]	; (232e0 <k_work_init_delayable+0x58>)
   23296:	f240 332d 	movw	r3, #813	; 0x32d
   2329a:	f005 fa69 	bl	28770 <printk>
   2329e:	4810      	ldr	r0, [pc, #64]	; (232e0 <k_work_init_delayable+0x58>)
   232a0:	f240 312d 	movw	r1, #813	; 0x32d
   232a4:	f005 fc55 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   232a8:	b95d      	cbnz	r5, 232c2 <k_work_init_delayable+0x3a>
   232aa:	490e      	ldr	r1, [pc, #56]	; (232e4 <k_work_init_delayable+0x5c>)
   232ac:	480b      	ldr	r0, [pc, #44]	; (232dc <k_work_init_delayable+0x54>)
   232ae:	4a0c      	ldr	r2, [pc, #48]	; (232e0 <k_work_init_delayable+0x58>)
   232b0:	f240 332e 	movw	r3, #814	; 0x32e
   232b4:	f005 fa5c 	bl	28770 <printk>
   232b8:	4809      	ldr	r0, [pc, #36]	; (232e0 <k_work_init_delayable+0x58>)
   232ba:	f240 312e 	movw	r1, #814	; 0x32e
   232be:	f005 fc48 	bl	28b52 <assert_post_action>

	*dwork = (struct k_work_delayable){
   232c2:	2230      	movs	r2, #48	; 0x30
   232c4:	2100      	movs	r1, #0
   232c6:	4620      	mov	r0, r4
   232c8:	f007 fbf2 	bl	2aab0 <memset>
   232cc:	f44f 7380 	mov.w	r3, #256	; 0x100
   232d0:	6065      	str	r5, [r4, #4]
   232d2:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   232d4:	bd38      	pop	{r3, r4, r5, pc}
   232d6:	bf00      	nop
   232d8:	00032757 	.word	0x00032757
   232dc:	0002e915 	.word	0x0002e915
   232e0:	00032681 	.word	0x00032681
   232e4:	000326a2 	.word	0x000326a2

000232e8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   232e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   232ea:	4616      	mov	r6, r2
   232ec:	9001      	str	r0, [sp, #4]
   232ee:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   232f0:	460c      	mov	r4, r1
   232f2:	b959      	cbnz	r1, 2330c <k_work_schedule_for_queue+0x24>
   232f4:	492e      	ldr	r1, [pc, #184]	; (233b0 <k_work_schedule_for_queue+0xc8>)
   232f6:	482f      	ldr	r0, [pc, #188]	; (233b4 <k_work_schedule_for_queue+0xcc>)
   232f8:	4a2f      	ldr	r2, [pc, #188]	; (233b8 <k_work_schedule_for_queue+0xd0>)
   232fa:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   232fe:	f005 fa37 	bl	28770 <printk>
   23302:	482d      	ldr	r0, [pc, #180]	; (233b8 <k_work_schedule_for_queue+0xd0>)
   23304:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   23308:	f005 fc23 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2330c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23310:	f3ef 8511 	mrs	r5, BASEPRI
   23314:	f383 8812 	msr	BASEPRI_MAX, r3
   23318:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2331c:	4827      	ldr	r0, [pc, #156]	; (233bc <k_work_schedule_for_queue+0xd4>)
   2331e:	f7ff f81d 	bl	2235c <z_spin_lock_valid>
   23322:	b968      	cbnz	r0, 23340 <k_work_schedule_for_queue+0x58>
   23324:	4a26      	ldr	r2, [pc, #152]	; (233c0 <k_work_schedule_for_queue+0xd8>)
   23326:	4927      	ldr	r1, [pc, #156]	; (233c4 <k_work_schedule_for_queue+0xdc>)
   23328:	4822      	ldr	r0, [pc, #136]	; (233b4 <k_work_schedule_for_queue+0xcc>)
   2332a:	2381      	movs	r3, #129	; 0x81
   2332c:	f005 fa20 	bl	28770 <printk>
   23330:	4922      	ldr	r1, [pc, #136]	; (233bc <k_work_schedule_for_queue+0xd4>)
   23332:	4825      	ldr	r0, [pc, #148]	; (233c8 <k_work_schedule_for_queue+0xe0>)
   23334:	f005 fa1c 	bl	28770 <printk>
   23338:	4821      	ldr	r0, [pc, #132]	; (233c0 <k_work_schedule_for_queue+0xd8>)
   2333a:	2181      	movs	r1, #129	; 0x81
   2333c:	f005 fc09 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23340:	481e      	ldr	r0, [pc, #120]	; (233bc <k_work_schedule_for_queue+0xd4>)
   23342:	f7ff f829 	bl	22398 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   23346:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   23348:	f013 0f0e 	tst.w	r3, #14
   2334c:	d12e      	bne.n	233ac <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2334e:	ea56 0207 	orrs.w	r2, r6, r7
   23352:	d11d      	bne.n	23390 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   23354:	4620      	mov	r0, r4
   23356:	a901      	add	r1, sp, #4
   23358:	f7ff fdd8 	bl	22f0c <submit_to_queue_locked>
   2335c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2335e:	4817      	ldr	r0, [pc, #92]	; (233bc <k_work_schedule_for_queue+0xd4>)
   23360:	f7ff f80a 	bl	22378 <z_spin_unlock_valid>
   23364:	b968      	cbnz	r0, 23382 <k_work_schedule_for_queue+0x9a>
   23366:	4a16      	ldr	r2, [pc, #88]	; (233c0 <k_work_schedule_for_queue+0xd8>)
   23368:	4918      	ldr	r1, [pc, #96]	; (233cc <k_work_schedule_for_queue+0xe4>)
   2336a:	4812      	ldr	r0, [pc, #72]	; (233b4 <k_work_schedule_for_queue+0xcc>)
   2336c:	23ac      	movs	r3, #172	; 0xac
   2336e:	f005 f9ff 	bl	28770 <printk>
   23372:	4912      	ldr	r1, [pc, #72]	; (233bc <k_work_schedule_for_queue+0xd4>)
   23374:	4816      	ldr	r0, [pc, #88]	; (233d0 <k_work_schedule_for_queue+0xe8>)
   23376:	f005 f9fb 	bl	28770 <printk>
   2337a:	4811      	ldr	r0, [pc, #68]	; (233c0 <k_work_schedule_for_queue+0xd8>)
   2337c:	21ac      	movs	r1, #172	; 0xac
   2337e:	f005 fbe8 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23382:	f385 8811 	msr	BASEPRI, r5
   23386:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2338a:	4620      	mov	r0, r4
   2338c:	b003      	add	sp, #12
   2338e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23390:	f043 0308 	orr.w	r3, r3, #8
   23394:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23396:	9b01      	ldr	r3, [sp, #4]
   23398:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2339a:	f104 0010 	add.w	r0, r4, #16
   2339e:	490d      	ldr	r1, [pc, #52]	; (233d4 <k_work_schedule_for_queue+0xec>)
   233a0:	4632      	mov	r2, r6
   233a2:	463b      	mov	r3, r7
   233a4:	f001 fc26 	bl	24bf4 <z_add_timeout>
	return ret;
   233a8:	2401      	movs	r4, #1
   233aa:	e7d8      	b.n	2335e <k_work_schedule_for_queue+0x76>
	int ret = 0;
   233ac:	2400      	movs	r4, #0
   233ae:	e7d6      	b.n	2335e <k_work_schedule_for_queue+0x76>
   233b0:	00032757 	.word	0x00032757
   233b4:	0002e915 	.word	0x0002e915
   233b8:	00032681 	.word	0x00032681
   233bc:	20002d2c 	.word	0x20002d2c
   233c0:	0002ebfd 	.word	0x0002ebfd
   233c4:	0002ec4f 	.word	0x0002ec4f
   233c8:	0002ec64 	.word	0x0002ec64
   233cc:	0002ec23 	.word	0x0002ec23
   233d0:	0002ec3a 	.word	0x0002ec3a
   233d4:	00022fd5 	.word	0x00022fd5

000233d8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   233d8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   233da:	4801      	ldr	r0, [pc, #4]	; (233e0 <k_work_schedule+0x8>)
   233dc:	f7ff bf84 	b.w	232e8 <k_work_schedule_for_queue>
   233e0:	20002278 	.word	0x20002278

000233e4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   233e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   233e6:	4616      	mov	r6, r2
   233e8:	9001      	str	r0, [sp, #4]
   233ea:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   233ec:	460c      	mov	r4, r1
   233ee:	b959      	cbnz	r1, 23408 <k_work_reschedule_for_queue+0x24>
   233f0:	492d      	ldr	r1, [pc, #180]	; (234a8 <k_work_reschedule_for_queue+0xc4>)
   233f2:	482e      	ldr	r0, [pc, #184]	; (234ac <k_work_reschedule_for_queue+0xc8>)
   233f4:	4a2e      	ldr	r2, [pc, #184]	; (234b0 <k_work_reschedule_for_queue+0xcc>)
   233f6:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   233fa:	f005 f9b9 	bl	28770 <printk>
   233fe:	482c      	ldr	r0, [pc, #176]	; (234b0 <k_work_reschedule_for_queue+0xcc>)
   23400:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   23404:	f005 fba5 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23408:	f04f 0340 	mov.w	r3, #64	; 0x40
   2340c:	f3ef 8511 	mrs	r5, BASEPRI
   23410:	f383 8812 	msr	BASEPRI_MAX, r3
   23414:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23418:	4826      	ldr	r0, [pc, #152]	; (234b4 <k_work_reschedule_for_queue+0xd0>)
   2341a:	f7fe ff9f 	bl	2235c <z_spin_lock_valid>
   2341e:	b968      	cbnz	r0, 2343c <k_work_reschedule_for_queue+0x58>
   23420:	4a25      	ldr	r2, [pc, #148]	; (234b8 <k_work_reschedule_for_queue+0xd4>)
   23422:	4926      	ldr	r1, [pc, #152]	; (234bc <k_work_reschedule_for_queue+0xd8>)
   23424:	4821      	ldr	r0, [pc, #132]	; (234ac <k_work_reschedule_for_queue+0xc8>)
   23426:	2381      	movs	r3, #129	; 0x81
   23428:	f005 f9a2 	bl	28770 <printk>
   2342c:	4921      	ldr	r1, [pc, #132]	; (234b4 <k_work_reschedule_for_queue+0xd0>)
   2342e:	4824      	ldr	r0, [pc, #144]	; (234c0 <k_work_reschedule_for_queue+0xdc>)
   23430:	f005 f99e 	bl	28770 <printk>
   23434:	4820      	ldr	r0, [pc, #128]	; (234b8 <k_work_reschedule_for_queue+0xd4>)
   23436:	2181      	movs	r1, #129	; 0x81
   23438:	f005 fb8b 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2343c:	481d      	ldr	r0, [pc, #116]	; (234b4 <k_work_reschedule_for_queue+0xd0>)
   2343e:	f7fe ffab 	bl	22398 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   23442:	4620      	mov	r0, r4
   23444:	f009 ff7c 	bl	2d340 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23448:	ea56 0307 	orrs.w	r3, r6, r7
   2344c:	d11d      	bne.n	2348a <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   2344e:	4620      	mov	r0, r4
   23450:	a901      	add	r1, sp, #4
   23452:	f7ff fd5b 	bl	22f0c <submit_to_queue_locked>
   23456:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23458:	4816      	ldr	r0, [pc, #88]	; (234b4 <k_work_reschedule_for_queue+0xd0>)
   2345a:	f7fe ff8d 	bl	22378 <z_spin_unlock_valid>
   2345e:	b968      	cbnz	r0, 2347c <k_work_reschedule_for_queue+0x98>
   23460:	4a15      	ldr	r2, [pc, #84]	; (234b8 <k_work_reschedule_for_queue+0xd4>)
   23462:	4918      	ldr	r1, [pc, #96]	; (234c4 <k_work_reschedule_for_queue+0xe0>)
   23464:	4811      	ldr	r0, [pc, #68]	; (234ac <k_work_reschedule_for_queue+0xc8>)
   23466:	23ac      	movs	r3, #172	; 0xac
   23468:	f005 f982 	bl	28770 <printk>
   2346c:	4911      	ldr	r1, [pc, #68]	; (234b4 <k_work_reschedule_for_queue+0xd0>)
   2346e:	4816      	ldr	r0, [pc, #88]	; (234c8 <k_work_reschedule_for_queue+0xe4>)
   23470:	f005 f97e 	bl	28770 <printk>
   23474:	4810      	ldr	r0, [pc, #64]	; (234b8 <k_work_reschedule_for_queue+0xd4>)
   23476:	21ac      	movs	r1, #172	; 0xac
   23478:	f005 fb6b 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2347c:	f385 8811 	msr	BASEPRI, r5
   23480:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23484:	4620      	mov	r0, r4
   23486:	b003      	add	sp, #12
   23488:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2348a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2348c:	490f      	ldr	r1, [pc, #60]	; (234cc <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   2348e:	f043 0308 	orr.w	r3, r3, #8
   23492:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23494:	9b01      	ldr	r3, [sp, #4]
   23496:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23498:	f104 0010 	add.w	r0, r4, #16
   2349c:	4632      	mov	r2, r6
   2349e:	463b      	mov	r3, r7
   234a0:	f001 fba8 	bl	24bf4 <z_add_timeout>
	return ret;
   234a4:	2401      	movs	r4, #1
   234a6:	e7d7      	b.n	23458 <k_work_reschedule_for_queue+0x74>
   234a8:	00032757 	.word	0x00032757
   234ac:	0002e915 	.word	0x0002e915
   234b0:	00032681 	.word	0x00032681
   234b4:	20002d2c 	.word	0x20002d2c
   234b8:	0002ebfd 	.word	0x0002ebfd
   234bc:	0002ec4f 	.word	0x0002ec4f
   234c0:	0002ec64 	.word	0x0002ec64
   234c4:	0002ec23 	.word	0x0002ec23
   234c8:	0002ec3a 	.word	0x0002ec3a
   234cc:	00022fd5 	.word	0x00022fd5

000234d0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   234d0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   234d2:	4801      	ldr	r0, [pc, #4]	; (234d8 <k_work_reschedule+0x8>)
   234d4:	f7ff bf86 	b.w	233e4 <k_work_reschedule_for_queue>
   234d8:	20002278 	.word	0x20002278

000234dc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   234dc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   234de:	4604      	mov	r4, r0
   234e0:	b958      	cbnz	r0, 234fa <k_work_cancel_delayable+0x1e>
   234e2:	4924      	ldr	r1, [pc, #144]	; (23574 <k_work_cancel_delayable+0x98>)
   234e4:	4824      	ldr	r0, [pc, #144]	; (23578 <k_work_cancel_delayable+0x9c>)
   234e6:	4a25      	ldr	r2, [pc, #148]	; (2357c <k_work_cancel_delayable+0xa0>)
   234e8:	f240 33ea 	movw	r3, #1002	; 0x3ea
   234ec:	f005 f940 	bl	28770 <printk>
   234f0:	4822      	ldr	r0, [pc, #136]	; (2357c <k_work_cancel_delayable+0xa0>)
   234f2:	f240 31ea 	movw	r1, #1002	; 0x3ea
   234f6:	f005 fb2c 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   234fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   234fe:	f3ef 8511 	mrs	r5, BASEPRI
   23502:	f383 8812 	msr	BASEPRI_MAX, r3
   23506:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2350a:	481d      	ldr	r0, [pc, #116]	; (23580 <k_work_cancel_delayable+0xa4>)
   2350c:	f7fe ff26 	bl	2235c <z_spin_lock_valid>
   23510:	b968      	cbnz	r0, 2352e <k_work_cancel_delayable+0x52>
   23512:	4a1c      	ldr	r2, [pc, #112]	; (23584 <k_work_cancel_delayable+0xa8>)
   23514:	491c      	ldr	r1, [pc, #112]	; (23588 <k_work_cancel_delayable+0xac>)
   23516:	4818      	ldr	r0, [pc, #96]	; (23578 <k_work_cancel_delayable+0x9c>)
   23518:	2381      	movs	r3, #129	; 0x81
   2351a:	f005 f929 	bl	28770 <printk>
   2351e:	4918      	ldr	r1, [pc, #96]	; (23580 <k_work_cancel_delayable+0xa4>)
   23520:	481a      	ldr	r0, [pc, #104]	; (2358c <k_work_cancel_delayable+0xb0>)
   23522:	f005 f925 	bl	28770 <printk>
   23526:	4817      	ldr	r0, [pc, #92]	; (23584 <k_work_cancel_delayable+0xa8>)
   23528:	2181      	movs	r1, #129	; 0x81
   2352a:	f005 fb12 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2352e:	4814      	ldr	r0, [pc, #80]	; (23580 <k_work_cancel_delayable+0xa4>)
   23530:	f7fe ff32 	bl	22398 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   23534:	4620      	mov	r0, r4
   23536:	f009 ff03 	bl	2d340 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2353a:	4620      	mov	r0, r4
   2353c:	f009 ff0e 	bl	2d35c <cancel_async_locked>
   23540:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23542:	480f      	ldr	r0, [pc, #60]	; (23580 <k_work_cancel_delayable+0xa4>)
   23544:	f7fe ff18 	bl	22378 <z_spin_unlock_valid>
   23548:	b968      	cbnz	r0, 23566 <k_work_cancel_delayable+0x8a>
   2354a:	4a0e      	ldr	r2, [pc, #56]	; (23584 <k_work_cancel_delayable+0xa8>)
   2354c:	4910      	ldr	r1, [pc, #64]	; (23590 <k_work_cancel_delayable+0xb4>)
   2354e:	480a      	ldr	r0, [pc, #40]	; (23578 <k_work_cancel_delayable+0x9c>)
   23550:	23ac      	movs	r3, #172	; 0xac
   23552:	f005 f90d 	bl	28770 <printk>
   23556:	490a      	ldr	r1, [pc, #40]	; (23580 <k_work_cancel_delayable+0xa4>)
   23558:	480e      	ldr	r0, [pc, #56]	; (23594 <k_work_cancel_delayable+0xb8>)
   2355a:	f005 f909 	bl	28770 <printk>
   2355e:	4809      	ldr	r0, [pc, #36]	; (23584 <k_work_cancel_delayable+0xa8>)
   23560:	21ac      	movs	r1, #172	; 0xac
   23562:	f005 faf6 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23566:	f385 8811 	msr	BASEPRI, r5
   2356a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2356e:	4620      	mov	r0, r4
   23570:	bd38      	pop	{r3, r4, r5, pc}
   23572:	bf00      	nop
   23574:	00032757 	.word	0x00032757
   23578:	0002e915 	.word	0x0002e915
   2357c:	00032681 	.word	0x00032681
   23580:	20002d2c 	.word	0x20002d2c
   23584:	0002ebfd 	.word	0x0002ebfd
   23588:	0002ec4f 	.word	0x0002ec4f
   2358c:	0002ec64 	.word	0x0002ec64
   23590:	0002ec23 	.word	0x0002ec23
   23594:	0002ec3a 	.word	0x0002ec3a

00023598 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   23598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2359c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2359e:	4605      	mov	r5, r0
   235a0:	b958      	cbnz	r0, 235ba <k_work_cancel_delayable_sync+0x22>
   235a2:	493d      	ldr	r1, [pc, #244]	; (23698 <k_work_cancel_delayable_sync+0x100>)
   235a4:	483d      	ldr	r0, [pc, #244]	; (2369c <k_work_cancel_delayable_sync+0x104>)
   235a6:	4a3e      	ldr	r2, [pc, #248]	; (236a0 <k_work_cancel_delayable_sync+0x108>)
   235a8:	f240 33fb 	movw	r3, #1019	; 0x3fb
   235ac:	f005 f8e0 	bl	28770 <printk>
   235b0:	483b      	ldr	r0, [pc, #236]	; (236a0 <k_work_cancel_delayable_sync+0x108>)
   235b2:	f240 31fb 	movw	r1, #1019	; 0x3fb
   235b6:	f005 facc 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   235ba:	b95e      	cbnz	r6, 235d4 <k_work_cancel_delayable_sync+0x3c>
   235bc:	4939      	ldr	r1, [pc, #228]	; (236a4 <k_work_cancel_delayable_sync+0x10c>)
   235be:	4837      	ldr	r0, [pc, #220]	; (2369c <k_work_cancel_delayable_sync+0x104>)
   235c0:	4a37      	ldr	r2, [pc, #220]	; (236a0 <k_work_cancel_delayable_sync+0x108>)
   235c2:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   235c6:	f005 f8d3 	bl	28770 <printk>
   235ca:	4835      	ldr	r0, [pc, #212]	; (236a0 <k_work_cancel_delayable_sync+0x108>)
   235cc:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   235d0:	f005 fabf 	bl	28b52 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   235d4:	f009 fe54 	bl	2d280 <k_is_in_isr>
   235d8:	b158      	cbz	r0, 235f2 <k_work_cancel_delayable_sync+0x5a>
   235da:	4933      	ldr	r1, [pc, #204]	; (236a8 <k_work_cancel_delayable_sync+0x110>)
   235dc:	482f      	ldr	r0, [pc, #188]	; (2369c <k_work_cancel_delayable_sync+0x104>)
   235de:	4a30      	ldr	r2, [pc, #192]	; (236a0 <k_work_cancel_delayable_sync+0x108>)
   235e0:	f240 33fd 	movw	r3, #1021	; 0x3fd
   235e4:	f005 f8c4 	bl	28770 <printk>
   235e8:	482d      	ldr	r0, [pc, #180]	; (236a0 <k_work_cancel_delayable_sync+0x108>)
   235ea:	f240 31fd 	movw	r1, #1021	; 0x3fd
   235ee:	f005 fab0 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   235f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   235f6:	f3ef 8811 	mrs	r8, BASEPRI
   235fa:	f383 8812 	msr	BASEPRI_MAX, r3
   235fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23602:	482a      	ldr	r0, [pc, #168]	; (236ac <k_work_cancel_delayable_sync+0x114>)
   23604:	f7fe feaa 	bl	2235c <z_spin_lock_valid>
   23608:	b968      	cbnz	r0, 23626 <k_work_cancel_delayable_sync+0x8e>
   2360a:	4a29      	ldr	r2, [pc, #164]	; (236b0 <k_work_cancel_delayable_sync+0x118>)
   2360c:	4929      	ldr	r1, [pc, #164]	; (236b4 <k_work_cancel_delayable_sync+0x11c>)
   2360e:	4823      	ldr	r0, [pc, #140]	; (2369c <k_work_cancel_delayable_sync+0x104>)
   23610:	2381      	movs	r3, #129	; 0x81
   23612:	f005 f8ad 	bl	28770 <printk>
   23616:	4925      	ldr	r1, [pc, #148]	; (236ac <k_work_cancel_delayable_sync+0x114>)
   23618:	4827      	ldr	r0, [pc, #156]	; (236b8 <k_work_cancel_delayable_sync+0x120>)
   2361a:	f005 f8a9 	bl	28770 <printk>
   2361e:	4824      	ldr	r0, [pc, #144]	; (236b0 <k_work_cancel_delayable_sync+0x118>)
   23620:	2181      	movs	r1, #129	; 0x81
   23622:	f005 fa96 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23626:	4821      	ldr	r0, [pc, #132]	; (236ac <k_work_cancel_delayable_sync+0x114>)
   23628:	f7fe feb6 	bl	22398 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2362c:	68ec      	ldr	r4, [r5, #12]
   2362e:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   23632:	2c00      	cmp	r4, #0
   23634:	bf14      	ite	ne
   23636:	2701      	movne	r7, #1
   23638:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2363a:	d00a      	beq.n	23652 <k_work_cancel_delayable_sync+0xba>
	(void)unschedule_locked(dwork);
   2363c:	4628      	mov	r0, r5
   2363e:	f009 fe7f 	bl	2d340 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   23642:	4628      	mov	r0, r5
   23644:	f009 fe8a 	bl	2d35c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   23648:	4631      	mov	r1, r6
   2364a:	4628      	mov	r0, r5
   2364c:	f7ff fc40 	bl	22ed0 <cancel_sync_locked>
   23650:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23652:	4816      	ldr	r0, [pc, #88]	; (236ac <k_work_cancel_delayable_sync+0x114>)
   23654:	f7fe fe90 	bl	22378 <z_spin_unlock_valid>
   23658:	b968      	cbnz	r0, 23676 <k_work_cancel_delayable_sync+0xde>
   2365a:	4a15      	ldr	r2, [pc, #84]	; (236b0 <k_work_cancel_delayable_sync+0x118>)
   2365c:	4917      	ldr	r1, [pc, #92]	; (236bc <k_work_cancel_delayable_sync+0x124>)
   2365e:	480f      	ldr	r0, [pc, #60]	; (2369c <k_work_cancel_delayable_sync+0x104>)
   23660:	23ac      	movs	r3, #172	; 0xac
   23662:	f005 f885 	bl	28770 <printk>
   23666:	4911      	ldr	r1, [pc, #68]	; (236ac <k_work_cancel_delayable_sync+0x114>)
   23668:	4815      	ldr	r0, [pc, #84]	; (236c0 <k_work_cancel_delayable_sync+0x128>)
   2366a:	f005 f881 	bl	28770 <printk>
   2366e:	4810      	ldr	r0, [pc, #64]	; (236b0 <k_work_cancel_delayable_sync+0x118>)
   23670:	21ac      	movs	r1, #172	; 0xac
   23672:	f005 fa6e 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23676:	f388 8811 	msr	BASEPRI, r8
   2367a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2367e:	b13c      	cbz	r4, 23690 <k_work_cancel_delayable_sync+0xf8>
	return z_impl_k_sem_take(sem, timeout);
   23680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23688:	f106 0008 	add.w	r0, r6, #8
   2368c:	f7ff fa28 	bl	22ae0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   23690:	4638      	mov	r0, r7
   23692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23696:	bf00      	nop
   23698:	00032757 	.word	0x00032757
   2369c:	0002e915 	.word	0x0002e915
   236a0:	00032681 	.word	0x00032681
   236a4:	00032703 	.word	0x00032703
   236a8:	00030af5 	.word	0x00030af5
   236ac:	20002d2c 	.word	0x20002d2c
   236b0:	0002ebfd 	.word	0x0002ebfd
   236b4:	0002ec4f 	.word	0x0002ec4f
   236b8:	0002ec64 	.word	0x0002ec64
   236bc:	0002ec23 	.word	0x0002ec23
   236c0:	0002ec3a 	.word	0x0002ec3a

000236c4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   236c4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   236c6:	4c08      	ldr	r4, [pc, #32]	; (236e8 <z_reset_time_slice+0x24>)
   236c8:	6823      	ldr	r3, [r4, #0]
   236ca:	b15b      	cbz	r3, 236e4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   236cc:	f7fc fa7a 	bl	1fbc4 <sys_clock_elapsed>
   236d0:	4603      	mov	r3, r0
   236d2:	6820      	ldr	r0, [r4, #0]
   236d4:	4a05      	ldr	r2, [pc, #20]	; (236ec <z_reset_time_slice+0x28>)
   236d6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   236d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   236dc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   236de:	2100      	movs	r1, #0
   236e0:	f001 bbf2 	b.w	24ec8 <z_set_timeout_expiry>
}
   236e4:	bd10      	pop	{r4, pc}
   236e6:	bf00      	nop
   236e8:	20002d44 	.word	0x20002d44
   236ec:	20002cfc 	.word	0x20002cfc

000236f0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   236f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   236f2:	4604      	mov	r4, r0
   236f4:	460d      	mov	r5, r1
	__asm__ volatile(
   236f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   236fa:	f3ef 8611 	mrs	r6, BASEPRI
   236fe:	f383 8812 	msr	BASEPRI_MAX, r3
   23702:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23706:	4823      	ldr	r0, [pc, #140]	; (23794 <k_sched_time_slice_set+0xa4>)
   23708:	f7fe fe28 	bl	2235c <z_spin_lock_valid>
   2370c:	b968      	cbnz	r0, 2372a <k_sched_time_slice_set+0x3a>
   2370e:	4a22      	ldr	r2, [pc, #136]	; (23798 <k_sched_time_slice_set+0xa8>)
   23710:	4922      	ldr	r1, [pc, #136]	; (2379c <k_sched_time_slice_set+0xac>)
   23712:	4823      	ldr	r0, [pc, #140]	; (237a0 <k_sched_time_slice_set+0xb0>)
   23714:	2381      	movs	r3, #129	; 0x81
   23716:	f005 f82b 	bl	28770 <printk>
   2371a:	491e      	ldr	r1, [pc, #120]	; (23794 <k_sched_time_slice_set+0xa4>)
   2371c:	4821      	ldr	r0, [pc, #132]	; (237a4 <k_sched_time_slice_set+0xb4>)
   2371e:	f005 f827 	bl	28770 <printk>
   23722:	481d      	ldr	r0, [pc, #116]	; (23798 <k_sched_time_slice_set+0xa8>)
   23724:	2181      	movs	r1, #129	; 0x81
   23726:	f005 fa14 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2372a:	481a      	ldr	r0, [pc, #104]	; (23794 <k_sched_time_slice_set+0xa4>)
   2372c:	f7fe fe34 	bl	22398 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   23730:	4b1d      	ldr	r3, [pc, #116]	; (237a8 <k_sched_time_slice_set+0xb8>)
   23732:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   23734:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   23738:	f240 30e7 	movw	r0, #999	; 0x3e7
   2373c:	2100      	movs	r1, #0
   2373e:	611a      	str	r2, [r3, #16]
   23740:	fbe7 0104 	umlal	r0, r1, r7, r4
   23744:	2300      	movs	r3, #0
   23746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2374a:	f7dc fcd9 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2374e:	2c00      	cmp	r4, #0
   23750:	4b16      	ldr	r3, [pc, #88]	; (237ac <k_sched_time_slice_set+0xbc>)
   23752:	dc1b      	bgt.n	2378c <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   23754:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   23756:	4b16      	ldr	r3, [pc, #88]	; (237b0 <k_sched_time_slice_set+0xc0>)
   23758:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   2375a:	f7ff ffb3 	bl	236c4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2375e:	480d      	ldr	r0, [pc, #52]	; (23794 <k_sched_time_slice_set+0xa4>)
   23760:	f7fe fe0a 	bl	22378 <z_spin_unlock_valid>
   23764:	b968      	cbnz	r0, 23782 <k_sched_time_slice_set+0x92>
   23766:	4a0c      	ldr	r2, [pc, #48]	; (23798 <k_sched_time_slice_set+0xa8>)
   23768:	4912      	ldr	r1, [pc, #72]	; (237b4 <k_sched_time_slice_set+0xc4>)
   2376a:	480d      	ldr	r0, [pc, #52]	; (237a0 <k_sched_time_slice_set+0xb0>)
   2376c:	23ac      	movs	r3, #172	; 0xac
   2376e:	f004 ffff 	bl	28770 <printk>
   23772:	4908      	ldr	r1, [pc, #32]	; (23794 <k_sched_time_slice_set+0xa4>)
   23774:	4810      	ldr	r0, [pc, #64]	; (237b8 <k_sched_time_slice_set+0xc8>)
   23776:	f004 fffb 	bl	28770 <printk>
   2377a:	4807      	ldr	r0, [pc, #28]	; (23798 <k_sched_time_slice_set+0xa8>)
   2377c:	21ac      	movs	r1, #172	; 0xac
   2377e:	f005 f9e8 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23782:	f386 8811 	msr	BASEPRI, r6
   23786:	f3bf 8f6f 	isb	sy
	}
}
   2378a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   2378c:	2802      	cmp	r0, #2
   2378e:	bfb8      	it	lt
   23790:	2002      	movlt	r0, #2
   23792:	e7df      	b.n	23754 <k_sched_time_slice_set+0x64>
   23794:	20002d3c 	.word	0x20002d3c
   23798:	0002ebfd 	.word	0x0002ebfd
   2379c:	0002ec4f 	.word	0x0002ec4f
   237a0:	0002e915 	.word	0x0002e915
   237a4:	0002ec64 	.word	0x0002ec64
   237a8:	20002cfc 	.word	0x20002cfc
   237ac:	20002d44 	.word	0x20002d44
   237b0:	20002d40 	.word	0x20002d40
   237b4:	0002ec23 	.word	0x0002ec23
   237b8:	0002ec3a 	.word	0x0002ec3a

000237bc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   237bc:	b538      	push	{r3, r4, r5, lr}
   237be:	4604      	mov	r4, r0
	__asm__ volatile(
   237c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   237c4:	f3ef 8511 	mrs	r5, BASEPRI
   237c8:	f383 8812 	msr	BASEPRI_MAX, r3
   237cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   237d0:	4817      	ldr	r0, [pc, #92]	; (23830 <z_unpend_thread_no_timeout+0x74>)
   237d2:	f7fe fdc3 	bl	2235c <z_spin_lock_valid>
   237d6:	b968      	cbnz	r0, 237f4 <z_unpend_thread_no_timeout+0x38>
   237d8:	4a16      	ldr	r2, [pc, #88]	; (23834 <z_unpend_thread_no_timeout+0x78>)
   237da:	4917      	ldr	r1, [pc, #92]	; (23838 <z_unpend_thread_no_timeout+0x7c>)
   237dc:	4817      	ldr	r0, [pc, #92]	; (2383c <z_unpend_thread_no_timeout+0x80>)
   237de:	2381      	movs	r3, #129	; 0x81
   237e0:	f004 ffc6 	bl	28770 <printk>
   237e4:	4912      	ldr	r1, [pc, #72]	; (23830 <z_unpend_thread_no_timeout+0x74>)
   237e6:	4816      	ldr	r0, [pc, #88]	; (23840 <z_unpend_thread_no_timeout+0x84>)
   237e8:	f004 ffc2 	bl	28770 <printk>
   237ec:	4811      	ldr	r0, [pc, #68]	; (23834 <z_unpend_thread_no_timeout+0x78>)
   237ee:	2181      	movs	r1, #129	; 0x81
   237f0:	f005 f9af 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   237f4:	480e      	ldr	r0, [pc, #56]	; (23830 <z_unpend_thread_no_timeout+0x74>)
   237f6:	f7fe fdcf 	bl	22398 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   237fa:	4620      	mov	r0, r4
   237fc:	f000 f900 	bl	23a00 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23800:	480b      	ldr	r0, [pc, #44]	; (23830 <z_unpend_thread_no_timeout+0x74>)
   23802:	f7fe fdb9 	bl	22378 <z_spin_unlock_valid>
   23806:	b968      	cbnz	r0, 23824 <z_unpend_thread_no_timeout+0x68>
   23808:	4a0a      	ldr	r2, [pc, #40]	; (23834 <z_unpend_thread_no_timeout+0x78>)
   2380a:	490e      	ldr	r1, [pc, #56]	; (23844 <z_unpend_thread_no_timeout+0x88>)
   2380c:	480b      	ldr	r0, [pc, #44]	; (2383c <z_unpend_thread_no_timeout+0x80>)
   2380e:	23ac      	movs	r3, #172	; 0xac
   23810:	f004 ffae 	bl	28770 <printk>
   23814:	4906      	ldr	r1, [pc, #24]	; (23830 <z_unpend_thread_no_timeout+0x74>)
   23816:	480c      	ldr	r0, [pc, #48]	; (23848 <z_unpend_thread_no_timeout+0x8c>)
   23818:	f004 ffaa 	bl	28770 <printk>
   2381c:	4805      	ldr	r0, [pc, #20]	; (23834 <z_unpend_thread_no_timeout+0x78>)
   2381e:	21ac      	movs	r1, #172	; 0xac
   23820:	f005 f997 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23824:	f385 8811 	msr	BASEPRI, r5
   23828:	f3bf 8f6f 	isb	sy
	}
}
   2382c:	bd38      	pop	{r3, r4, r5, pc}
   2382e:	bf00      	nop
   23830:	20002d3c 	.word	0x20002d3c
   23834:	0002ebfd 	.word	0x0002ebfd
   23838:	0002ec4f 	.word	0x0002ec4f
   2383c:	0002e915 	.word	0x0002e915
   23840:	0002ec64 	.word	0x0002ec64
   23844:	0002ec23 	.word	0x0002ec23
   23848:	0002ec3a 	.word	0x0002ec3a

0002384c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2384c:	b538      	push	{r3, r4, r5, lr}
   2384e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23850:	460d      	mov	r5, r1
   23852:	b9e9      	cbnz	r1, 23890 <z_reschedule+0x44>
   23854:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   23858:	b9d3      	cbnz	r3, 23890 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   2385a:	4b19      	ldr	r3, [pc, #100]	; (238c0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   2385c:	69da      	ldr	r2, [r3, #28]
   2385e:	689b      	ldr	r3, [r3, #8]
   23860:	429a      	cmp	r2, r3
   23862:	d015      	beq.n	23890 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23864:	f7fe fd88 	bl	22378 <z_spin_unlock_valid>
   23868:	b968      	cbnz	r0, 23886 <z_reschedule+0x3a>
   2386a:	4a16      	ldr	r2, [pc, #88]	; (238c4 <z_reschedule+0x78>)
   2386c:	4916      	ldr	r1, [pc, #88]	; (238c8 <z_reschedule+0x7c>)
   2386e:	4817      	ldr	r0, [pc, #92]	; (238cc <z_reschedule+0x80>)
   23870:	23c3      	movs	r3, #195	; 0xc3
   23872:	f004 ff7d 	bl	28770 <printk>
   23876:	4816      	ldr	r0, [pc, #88]	; (238d0 <z_reschedule+0x84>)
   23878:	4621      	mov	r1, r4
   2387a:	f004 ff79 	bl	28770 <printk>
   2387e:	4811      	ldr	r0, [pc, #68]	; (238c4 <z_reschedule+0x78>)
   23880:	21c3      	movs	r1, #195	; 0xc3
   23882:	f005 f966 	bl	28b52 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   23886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   2388a:	2000      	movs	r0, #0
   2388c:	f7f0 be92 	b.w	145b4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23890:	4620      	mov	r0, r4
   23892:	f7fe fd71 	bl	22378 <z_spin_unlock_valid>
   23896:	b968      	cbnz	r0, 238b4 <z_reschedule+0x68>
   23898:	4a0a      	ldr	r2, [pc, #40]	; (238c4 <z_reschedule+0x78>)
   2389a:	490b      	ldr	r1, [pc, #44]	; (238c8 <z_reschedule+0x7c>)
   2389c:	480b      	ldr	r0, [pc, #44]	; (238cc <z_reschedule+0x80>)
   2389e:	23ac      	movs	r3, #172	; 0xac
   238a0:	f004 ff66 	bl	28770 <printk>
   238a4:	480a      	ldr	r0, [pc, #40]	; (238d0 <z_reschedule+0x84>)
   238a6:	4621      	mov	r1, r4
   238a8:	f004 ff62 	bl	28770 <printk>
   238ac:	4805      	ldr	r0, [pc, #20]	; (238c4 <z_reschedule+0x78>)
   238ae:	21ac      	movs	r1, #172	; 0xac
   238b0:	f005 f94f 	bl	28b52 <assert_post_action>
   238b4:	f385 8811 	msr	BASEPRI, r5
   238b8:	f3bf 8f6f 	isb	sy
   238bc:	bd38      	pop	{r3, r4, r5, pc}
   238be:	bf00      	nop
   238c0:	20002cfc 	.word	0x20002cfc
   238c4:	0002ebfd 	.word	0x0002ebfd
   238c8:	0002ec23 	.word	0x0002ec23
   238cc:	0002e915 	.word	0x0002e915
   238d0:	0002ec3a 	.word	0x0002ec3a

000238d4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   238d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   238d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   238da:	f3ef 8511 	mrs	r5, BASEPRI
   238de:	f383 8812 	msr	BASEPRI_MAX, r3
   238e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   238e6:	4829      	ldr	r0, [pc, #164]	; (2398c <k_sched_lock+0xb8>)
   238e8:	f7fe fd38 	bl	2235c <z_spin_lock_valid>
   238ec:	b968      	cbnz	r0, 2390a <k_sched_lock+0x36>
   238ee:	4a28      	ldr	r2, [pc, #160]	; (23990 <k_sched_lock+0xbc>)
   238f0:	4928      	ldr	r1, [pc, #160]	; (23994 <k_sched_lock+0xc0>)
   238f2:	4829      	ldr	r0, [pc, #164]	; (23998 <k_sched_lock+0xc4>)
   238f4:	2381      	movs	r3, #129	; 0x81
   238f6:	f004 ff3b 	bl	28770 <printk>
   238fa:	4924      	ldr	r1, [pc, #144]	; (2398c <k_sched_lock+0xb8>)
   238fc:	4827      	ldr	r0, [pc, #156]	; (2399c <k_sched_lock+0xc8>)
   238fe:	f004 ff37 	bl	28770 <printk>
   23902:	4823      	ldr	r0, [pc, #140]	; (23990 <k_sched_lock+0xbc>)
   23904:	2181      	movs	r1, #129	; 0x81
   23906:	f005 f924 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2390a:	4820      	ldr	r0, [pc, #128]	; (2398c <k_sched_lock+0xb8>)
   2390c:	f7fe fd44 	bl	22398 <z_spin_lock_set_owner>
   23910:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   23914:	b163      	cbz	r3, 23930 <k_sched_lock+0x5c>
   23916:	4922      	ldr	r1, [pc, #136]	; (239a0 <k_sched_lock+0xcc>)
   23918:	4a22      	ldr	r2, [pc, #136]	; (239a4 <k_sched_lock+0xd0>)
   2391a:	481f      	ldr	r0, [pc, #124]	; (23998 <k_sched_lock+0xc4>)
   2391c:	23fd      	movs	r3, #253	; 0xfd
   2391e:	f004 ff27 	bl	28770 <printk>
   23922:	4821      	ldr	r0, [pc, #132]	; (239a8 <k_sched_lock+0xd4>)
   23924:	f004 ff24 	bl	28770 <printk>
   23928:	481e      	ldr	r0, [pc, #120]	; (239a4 <k_sched_lock+0xd0>)
   2392a:	21fd      	movs	r1, #253	; 0xfd
   2392c:	f005 f911 	bl	28b52 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   23930:	4c1e      	ldr	r4, [pc, #120]	; (239ac <k_sched_lock+0xd8>)
   23932:	68a2      	ldr	r2, [r4, #8]
   23934:	7bd2      	ldrb	r2, [r2, #15]
   23936:	2a01      	cmp	r2, #1
   23938:	d10c      	bne.n	23954 <k_sched_lock+0x80>
   2393a:	491d      	ldr	r1, [pc, #116]	; (239b0 <k_sched_lock+0xdc>)
   2393c:	4a19      	ldr	r2, [pc, #100]	; (239a4 <k_sched_lock+0xd0>)
   2393e:	4816      	ldr	r0, [pc, #88]	; (23998 <k_sched_lock+0xc4>)
   23940:	23fe      	movs	r3, #254	; 0xfe
   23942:	f004 ff15 	bl	28770 <printk>
   23946:	4818      	ldr	r0, [pc, #96]	; (239a8 <k_sched_lock+0xd4>)
   23948:	f004 ff12 	bl	28770 <printk>
   2394c:	4815      	ldr	r0, [pc, #84]	; (239a4 <k_sched_lock+0xd0>)
   2394e:	21fe      	movs	r1, #254	; 0xfe
   23950:	f005 f8ff 	bl	28b52 <assert_post_action>
	--_current->base.sched_locked;
   23954:	68a2      	ldr	r2, [r4, #8]
   23956:	7bd3      	ldrb	r3, [r2, #15]
   23958:	3b01      	subs	r3, #1
   2395a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2395c:	480b      	ldr	r0, [pc, #44]	; (2398c <k_sched_lock+0xb8>)
   2395e:	f7fe fd0b 	bl	22378 <z_spin_unlock_valid>
   23962:	b968      	cbnz	r0, 23980 <k_sched_lock+0xac>
   23964:	4a0a      	ldr	r2, [pc, #40]	; (23990 <k_sched_lock+0xbc>)
   23966:	4913      	ldr	r1, [pc, #76]	; (239b4 <k_sched_lock+0xe0>)
   23968:	480b      	ldr	r0, [pc, #44]	; (23998 <k_sched_lock+0xc4>)
   2396a:	23ac      	movs	r3, #172	; 0xac
   2396c:	f004 ff00 	bl	28770 <printk>
   23970:	4906      	ldr	r1, [pc, #24]	; (2398c <k_sched_lock+0xb8>)
   23972:	4811      	ldr	r0, [pc, #68]	; (239b8 <k_sched_lock+0xe4>)
   23974:	f004 fefc 	bl	28770 <printk>
   23978:	4805      	ldr	r0, [pc, #20]	; (23990 <k_sched_lock+0xbc>)
   2397a:	21ac      	movs	r1, #172	; 0xac
   2397c:	f005 f8e9 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23980:	f385 8811 	msr	BASEPRI, r5
   23984:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   23988:	bd38      	pop	{r3, r4, r5, pc}
   2398a:	bf00      	nop
   2398c:	20002d3c 	.word	0x20002d3c
   23990:	0002ebfd 	.word	0x0002ebfd
   23994:	0002ec4f 	.word	0x0002ec4f
   23998:	0002e915 	.word	0x0002e915
   2399c:	0002ec64 	.word	0x0002ec64
   239a0:	000324a4 	.word	0x000324a4
   239a4:	000325af 	.word	0x000325af
   239a8:	00031821 	.word	0x00031821
   239ac:	20002cfc 	.word	0x20002cfc
   239b0:	000325da 	.word	0x000325da
   239b4:	0002ec23 	.word	0x0002ec23
   239b8:	0002ec3a 	.word	0x0002ec3a

000239bc <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   239bc:	4b0c      	ldr	r3, [pc, #48]	; (239f0 <z_priq_dumb_remove+0x34>)
   239be:	4299      	cmp	r1, r3
{
   239c0:	b510      	push	{r4, lr}
   239c2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   239c4:	d10b      	bne.n	239de <z_priq_dumb_remove+0x22>
   239c6:	490b      	ldr	r1, [pc, #44]	; (239f4 <z_priq_dumb_remove+0x38>)
   239c8:	480b      	ldr	r0, [pc, #44]	; (239f8 <z_priq_dumb_remove+0x3c>)
   239ca:	4a0c      	ldr	r2, [pc, #48]	; (239fc <z_priq_dumb_remove+0x40>)
   239cc:	f240 33e7 	movw	r3, #999	; 0x3e7
   239d0:	f004 fece 	bl	28770 <printk>
   239d4:	4809      	ldr	r0, [pc, #36]	; (239fc <z_priq_dumb_remove+0x40>)
   239d6:	f240 31e7 	movw	r1, #999	; 0x3e7
   239da:	f005 f8ba 	bl	28b52 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   239de:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   239e2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   239e4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   239e6:	2300      	movs	r3, #0
	node->prev = NULL;
   239e8:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   239ec:	bd10      	pop	{r4, pc}
   239ee:	bf00      	nop
   239f0:	20002178 	.word	0x20002178
   239f4:	0003278e 	.word	0x0003278e
   239f8:	0002e915 	.word	0x0002e915
   239fc:	0003276c 	.word	0x0003276c

00023a00 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   23a00:	6883      	ldr	r3, [r0, #8]
{
   23a02:	b510      	push	{r4, lr}
   23a04:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   23a06:	b95b      	cbnz	r3, 23a20 <unpend_thread_no_timeout+0x20>
   23a08:	490b      	ldr	r1, [pc, #44]	; (23a38 <unpend_thread_no_timeout+0x38>)
   23a0a:	480c      	ldr	r0, [pc, #48]	; (23a3c <unpend_thread_no_timeout+0x3c>)
   23a0c:	4a0c      	ldr	r2, [pc, #48]	; (23a40 <unpend_thread_no_timeout+0x40>)
   23a0e:	f240 2383 	movw	r3, #643	; 0x283
   23a12:	f004 fead 	bl	28770 <printk>
   23a16:	480a      	ldr	r0, [pc, #40]	; (23a40 <unpend_thread_no_timeout+0x40>)
   23a18:	f240 2183 	movw	r1, #643	; 0x283
   23a1c:	f005 f899 	bl	28b52 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   23a20:	68a0      	ldr	r0, [r4, #8]
   23a22:	4621      	mov	r1, r4
   23a24:	f7ff ffca 	bl	239bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   23a28:	7b63      	ldrb	r3, [r4, #13]
   23a2a:	f023 0302 	bic.w	r3, r3, #2
   23a2e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   23a30:	2300      	movs	r3, #0
   23a32:	60a3      	str	r3, [r4, #8]
}
   23a34:	bd10      	pop	{r4, pc}
   23a36:	bf00      	nop
   23a38:	000327af 	.word	0x000327af
   23a3c:	0002e915 	.word	0x0002e915
   23a40:	0003276c 	.word	0x0003276c

00023a44 <z_unpend_thread>:
{
   23a44:	b538      	push	{r3, r4, r5, lr}
   23a46:	4604      	mov	r4, r0
	__asm__ volatile(
   23a48:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a4c:	f3ef 8511 	mrs	r5, BASEPRI
   23a50:	f383 8812 	msr	BASEPRI_MAX, r3
   23a54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a58:	4819      	ldr	r0, [pc, #100]	; (23ac0 <z_unpend_thread+0x7c>)
   23a5a:	f7fe fc7f 	bl	2235c <z_spin_lock_valid>
   23a5e:	b968      	cbnz	r0, 23a7c <z_unpend_thread+0x38>
   23a60:	4a18      	ldr	r2, [pc, #96]	; (23ac4 <z_unpend_thread+0x80>)
   23a62:	4919      	ldr	r1, [pc, #100]	; (23ac8 <z_unpend_thread+0x84>)
   23a64:	4819      	ldr	r0, [pc, #100]	; (23acc <z_unpend_thread+0x88>)
   23a66:	2381      	movs	r3, #129	; 0x81
   23a68:	f004 fe82 	bl	28770 <printk>
   23a6c:	4914      	ldr	r1, [pc, #80]	; (23ac0 <z_unpend_thread+0x7c>)
   23a6e:	4818      	ldr	r0, [pc, #96]	; (23ad0 <z_unpend_thread+0x8c>)
   23a70:	f004 fe7e 	bl	28770 <printk>
   23a74:	4813      	ldr	r0, [pc, #76]	; (23ac4 <z_unpend_thread+0x80>)
   23a76:	2181      	movs	r1, #129	; 0x81
   23a78:	f005 f86b 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23a7c:	4810      	ldr	r0, [pc, #64]	; (23ac0 <z_unpend_thread+0x7c>)
   23a7e:	f7fe fc8b 	bl	22398 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   23a82:	4620      	mov	r0, r4
   23a84:	f7ff ffbc 	bl	23a00 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a88:	480d      	ldr	r0, [pc, #52]	; (23ac0 <z_unpend_thread+0x7c>)
   23a8a:	f7fe fc75 	bl	22378 <z_spin_unlock_valid>
   23a8e:	b968      	cbnz	r0, 23aac <z_unpend_thread+0x68>
   23a90:	4a0c      	ldr	r2, [pc, #48]	; (23ac4 <z_unpend_thread+0x80>)
   23a92:	4910      	ldr	r1, [pc, #64]	; (23ad4 <z_unpend_thread+0x90>)
   23a94:	480d      	ldr	r0, [pc, #52]	; (23acc <z_unpend_thread+0x88>)
   23a96:	23ac      	movs	r3, #172	; 0xac
   23a98:	f004 fe6a 	bl	28770 <printk>
   23a9c:	4908      	ldr	r1, [pc, #32]	; (23ac0 <z_unpend_thread+0x7c>)
   23a9e:	480e      	ldr	r0, [pc, #56]	; (23ad8 <z_unpend_thread+0x94>)
   23aa0:	f004 fe66 	bl	28770 <printk>
   23aa4:	4807      	ldr	r0, [pc, #28]	; (23ac4 <z_unpend_thread+0x80>)
   23aa6:	21ac      	movs	r1, #172	; 0xac
   23aa8:	f005 f853 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23aac:	f385 8811 	msr	BASEPRI, r5
   23ab0:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   23ab4:	f104 0018 	add.w	r0, r4, #24
}
   23ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23abc:	f001 b96e 	b.w	24d9c <z_abort_timeout>
   23ac0:	20002d3c 	.word	0x20002d3c
   23ac4:	0002ebfd 	.word	0x0002ebfd
   23ac8:	0002ec4f 	.word	0x0002ec4f
   23acc:	0002e915 	.word	0x0002e915
   23ad0:	0002ec64 	.word	0x0002ec64
   23ad4:	0002ec23 	.word	0x0002ec23
   23ad8:	0002ec3a 	.word	0x0002ec3a

00023adc <update_cache>:
{
   23adc:	b538      	push	{r3, r4, r5, lr}
   23ade:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   23ae0:	4814      	ldr	r0, [pc, #80]	; (23b34 <update_cache+0x58>)
   23ae2:	4d15      	ldr	r5, [pc, #84]	; (23b38 <update_cache+0x5c>)
   23ae4:	f009 fc8c 	bl	2d400 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   23ae8:	4604      	mov	r4, r0
   23aea:	b900      	cbnz	r0, 23aee <update_cache+0x12>
   23aec:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   23aee:	b9ca      	cbnz	r2, 23b24 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   23af0:	68ab      	ldr	r3, [r5, #8]
   23af2:	b963      	cbnz	r3, 23b0e <update_cache+0x32>
   23af4:	4911      	ldr	r1, [pc, #68]	; (23b3c <update_cache+0x60>)
   23af6:	4a12      	ldr	r2, [pc, #72]	; (23b40 <update_cache+0x64>)
   23af8:	4812      	ldr	r0, [pc, #72]	; (23b44 <update_cache+0x68>)
   23afa:	2389      	movs	r3, #137	; 0x89
   23afc:	f004 fe38 	bl	28770 <printk>
   23b00:	4811      	ldr	r0, [pc, #68]	; (23b48 <update_cache+0x6c>)
   23b02:	f004 fe35 	bl	28770 <printk>
   23b06:	480e      	ldr	r0, [pc, #56]	; (23b40 <update_cache+0x64>)
   23b08:	2189      	movs	r1, #137	; 0x89
   23b0a:	f005 f822 	bl	28b52 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   23b0e:	68ab      	ldr	r3, [r5, #8]
   23b10:	7b5a      	ldrb	r2, [r3, #13]
   23b12:	06d2      	lsls	r2, r2, #27
   23b14:	d106      	bne.n	23b24 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23b16:	69a2      	ldr	r2, [r4, #24]
   23b18:	b922      	cbnz	r2, 23b24 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   23b1a:	89da      	ldrh	r2, [r3, #14]
   23b1c:	2a7f      	cmp	r2, #127	; 0x7f
   23b1e:	d901      	bls.n	23b24 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   23b20:	61eb      	str	r3, [r5, #28]
}
   23b22:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   23b24:	68ab      	ldr	r3, [r5, #8]
   23b26:	42a3      	cmp	r3, r4
   23b28:	d001      	beq.n	23b2e <update_cache+0x52>
			z_reset_time_slice();
   23b2a:	f7ff fdcb 	bl	236c4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   23b2e:	61ec      	str	r4, [r5, #28]
}
   23b30:	e7f7      	b.n	23b22 <update_cache+0x46>
   23b32:	bf00      	nop
   23b34:	20002d1c 	.word	0x20002d1c
   23b38:	20002cfc 	.word	0x20002cfc
   23b3c:	000327c6 	.word	0x000327c6
   23b40:	0003276c 	.word	0x0003276c
   23b44:	0002e915 	.word	0x0002e915
   23b48:	00031821 	.word	0x00031821

00023b4c <move_thread_to_end_of_prio_q>:
{
   23b4c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23b4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   23b52:	7b43      	ldrb	r3, [r0, #13]
   23b54:	2a00      	cmp	r2, #0
{
   23b56:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23b58:	da06      	bge.n	23b68 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23b5e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23b60:	4601      	mov	r1, r0
   23b62:	481f      	ldr	r0, [pc, #124]	; (23be0 <move_thread_to_end_of_prio_q+0x94>)
   23b64:	f7ff ff2a 	bl	239bc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23b68:	7b63      	ldrb	r3, [r4, #13]
   23b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23b6e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23b70:	4b1c      	ldr	r3, [pc, #112]	; (23be4 <move_thread_to_end_of_prio_q+0x98>)
   23b72:	429c      	cmp	r4, r3
   23b74:	d109      	bne.n	23b8a <move_thread_to_end_of_prio_q+0x3e>
   23b76:	491c      	ldr	r1, [pc, #112]	; (23be8 <move_thread_to_end_of_prio_q+0x9c>)
   23b78:	481c      	ldr	r0, [pc, #112]	; (23bec <move_thread_to_end_of_prio_q+0xa0>)
   23b7a:	4a1d      	ldr	r2, [pc, #116]	; (23bf0 <move_thread_to_end_of_prio_q+0xa4>)
   23b7c:	23ba      	movs	r3, #186	; 0xba
   23b7e:	f004 fdf7 	bl	28770 <printk>
   23b82:	481b      	ldr	r0, [pc, #108]	; (23bf0 <move_thread_to_end_of_prio_q+0xa4>)
   23b84:	21ba      	movs	r1, #186	; 0xba
   23b86:	f004 ffe4 	bl	28b52 <assert_post_action>
	return list->head == list;
   23b8a:	4a1a      	ldr	r2, [pc, #104]	; (23bf4 <move_thread_to_end_of_prio_q+0xa8>)
   23b8c:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23b8e:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
   23b90:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23b94:	428b      	cmp	r3, r1
   23b96:	bf08      	it	eq
   23b98:	2300      	moveq	r3, #0
   23b9a:	2b00      	cmp	r3, #0
   23b9c:	bf38      	it	cc
   23b9e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23ba0:	b1cb      	cbz	r3, 23bd6 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   23ba2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23ba6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   23baa:	4286      	cmp	r6, r0
   23bac:	d00f      	beq.n	23bce <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   23bae:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23bb0:	2800      	cmp	r0, #0
   23bb2:	dd0c      	ble.n	23bce <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   23bb4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   23bb6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   23bba:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   23bbc:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   23bbe:	6890      	ldr	r0, [r2, #8]
   23bc0:	1b03      	subs	r3, r0, r4
   23bc2:	4258      	negs	r0, r3
}
   23bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   23bc8:	4158      	adcs	r0, r3
   23bca:	f7ff bf87 	b.w	23adc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23bce:	42ab      	cmp	r3, r5
   23bd0:	d001      	beq.n	23bd6 <move_thread_to_end_of_prio_q+0x8a>
   23bd2:	681b      	ldr	r3, [r3, #0]
   23bd4:	e7e4      	b.n	23ba0 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   23bd6:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   23bda:	602c      	str	r4, [r5, #0]
	list->tail = node;
   23bdc:	6254      	str	r4, [r2, #36]	; 0x24
}
   23bde:	e7ee      	b.n	23bbe <move_thread_to_end_of_prio_q+0x72>
   23be0:	20002d1c 	.word	0x20002d1c
   23be4:	20002178 	.word	0x20002178
   23be8:	0003278e 	.word	0x0003278e
   23bec:	0002e915 	.word	0x0002e915
   23bf0:	0003276c 	.word	0x0003276c
   23bf4:	20002cfc 	.word	0x20002cfc

00023bf8 <z_time_slice>:
{
   23bf8:	b570      	push	{r4, r5, r6, lr}
   23bfa:	4604      	mov	r4, r0
	__asm__ volatile(
   23bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c00:	f3ef 8511 	mrs	r5, BASEPRI
   23c04:	f383 8812 	msr	BASEPRI_MAX, r3
   23c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c0c:	482a      	ldr	r0, [pc, #168]	; (23cb8 <z_time_slice+0xc0>)
   23c0e:	f7fe fba5 	bl	2235c <z_spin_lock_valid>
   23c12:	b968      	cbnz	r0, 23c30 <z_time_slice+0x38>
   23c14:	4a29      	ldr	r2, [pc, #164]	; (23cbc <z_time_slice+0xc4>)
   23c16:	492a      	ldr	r1, [pc, #168]	; (23cc0 <z_time_slice+0xc8>)
   23c18:	482a      	ldr	r0, [pc, #168]	; (23cc4 <z_time_slice+0xcc>)
   23c1a:	2381      	movs	r3, #129	; 0x81
   23c1c:	f004 fda8 	bl	28770 <printk>
   23c20:	4925      	ldr	r1, [pc, #148]	; (23cb8 <z_time_slice+0xc0>)
   23c22:	4829      	ldr	r0, [pc, #164]	; (23cc8 <z_time_slice+0xd0>)
   23c24:	f004 fda4 	bl	28770 <printk>
   23c28:	4824      	ldr	r0, [pc, #144]	; (23cbc <z_time_slice+0xc4>)
   23c2a:	2181      	movs	r1, #129	; 0x81
   23c2c:	f004 ff91 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23c30:	4821      	ldr	r0, [pc, #132]	; (23cb8 <z_time_slice+0xc0>)
   23c32:	f7fe fbb1 	bl	22398 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   23c36:	4b25      	ldr	r3, [pc, #148]	; (23ccc <z_time_slice+0xd4>)
   23c38:	4a25      	ldr	r2, [pc, #148]	; (23cd0 <z_time_slice+0xd8>)
   23c3a:	6898      	ldr	r0, [r3, #8]
   23c3c:	6811      	ldr	r1, [r2, #0]
   23c3e:	4288      	cmp	r0, r1
   23c40:	4619      	mov	r1, r3
   23c42:	d118      	bne.n	23c76 <z_time_slice+0x7e>
			z_reset_time_slice();
   23c44:	f7ff fd3e 	bl	236c4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c48:	481b      	ldr	r0, [pc, #108]	; (23cb8 <z_time_slice+0xc0>)
   23c4a:	f7fe fb95 	bl	22378 <z_spin_unlock_valid>
   23c4e:	b968      	cbnz	r0, 23c6c <z_time_slice+0x74>
   23c50:	4a1a      	ldr	r2, [pc, #104]	; (23cbc <z_time_slice+0xc4>)
   23c52:	4920      	ldr	r1, [pc, #128]	; (23cd4 <z_time_slice+0xdc>)
   23c54:	481b      	ldr	r0, [pc, #108]	; (23cc4 <z_time_slice+0xcc>)
   23c56:	23ac      	movs	r3, #172	; 0xac
   23c58:	f004 fd8a 	bl	28770 <printk>
   23c5c:	4916      	ldr	r1, [pc, #88]	; (23cb8 <z_time_slice+0xc0>)
   23c5e:	481e      	ldr	r0, [pc, #120]	; (23cd8 <z_time_slice+0xe0>)
   23c60:	f004 fd86 	bl	28770 <printk>
   23c64:	4815      	ldr	r0, [pc, #84]	; (23cbc <z_time_slice+0xc4>)
   23c66:	21ac      	movs	r1, #172	; 0xac
   23c68:	f004 ff73 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23c6c:	f385 8811 	msr	BASEPRI, r5
   23c70:	f3bf 8f6f 	isb	sy
}
   23c74:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23c76:	2600      	movs	r6, #0
   23c78:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   23c7a:	4a18      	ldr	r2, [pc, #96]	; (23cdc <z_time_slice+0xe4>)
   23c7c:	6812      	ldr	r2, [r2, #0]
   23c7e:	b1ba      	cbz	r2, 23cb0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23c80:	89c2      	ldrh	r2, [r0, #14]
   23c82:	2a7f      	cmp	r2, #127	; 0x7f
   23c84:	d814      	bhi.n	23cb0 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   23c86:	7b42      	ldrb	r2, [r0, #13]
   23c88:	06d2      	lsls	r2, r2, #27
   23c8a:	d111      	bne.n	23cb0 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23c8c:	4a14      	ldr	r2, [pc, #80]	; (23ce0 <z_time_slice+0xe8>)
   23c8e:	f990 600e 	ldrsb.w	r6, [r0, #14]
   23c92:	6812      	ldr	r2, [r2, #0]
   23c94:	4296      	cmp	r6, r2
   23c96:	db0b      	blt.n	23cb0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   23c98:	4a12      	ldr	r2, [pc, #72]	; (23ce4 <z_time_slice+0xec>)
   23c9a:	4290      	cmp	r0, r2
   23c9c:	d008      	beq.n	23cb0 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   23c9e:	691a      	ldr	r2, [r3, #16]
   23ca0:	42a2      	cmp	r2, r4
   23ca2:	dc02      	bgt.n	23caa <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   23ca4:	f7ff ff52 	bl	23b4c <move_thread_to_end_of_prio_q>
   23ca8:	e7cc      	b.n	23c44 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   23caa:	1b12      	subs	r2, r2, r4
   23cac:	611a      	str	r2, [r3, #16]
   23cae:	e7cb      	b.n	23c48 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   23cb0:	2300      	movs	r3, #0
   23cb2:	610b      	str	r3, [r1, #16]
   23cb4:	e7c8      	b.n	23c48 <z_time_slice+0x50>
   23cb6:	bf00      	nop
   23cb8:	20002d3c 	.word	0x20002d3c
   23cbc:	0002ebfd 	.word	0x0002ebfd
   23cc0:	0002ec4f 	.word	0x0002ec4f
   23cc4:	0002e915 	.word	0x0002e915
   23cc8:	0002ec64 	.word	0x0002ec64
   23ccc:	20002cfc 	.word	0x20002cfc
   23cd0:	20002d38 	.word	0x20002d38
   23cd4:	0002ec23 	.word	0x0002ec23
   23cd8:	0002ec3a 	.word	0x0002ec3a
   23cdc:	20002d44 	.word	0x20002d44
   23ce0:	20002d40 	.word	0x20002d40
   23ce4:	20002178 	.word	0x20002178

00023ce8 <ready_thread>:
{
   23ce8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23cea:	f990 200d 	ldrsb.w	r2, [r0, #13]
   23cee:	7b43      	ldrb	r3, [r0, #13]
   23cf0:	2a00      	cmp	r2, #0
{
   23cf2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23cf4:	db3e      	blt.n	23d74 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23cf6:	06da      	lsls	r2, r3, #27
   23cf8:	d13c      	bne.n	23d74 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   23cfa:	6985      	ldr	r5, [r0, #24]
   23cfc:	2d00      	cmp	r5, #0
   23cfe:	d139      	bne.n	23d74 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   23d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23d04:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23d06:	4b1c      	ldr	r3, [pc, #112]	; (23d78 <ready_thread+0x90>)
   23d08:	4298      	cmp	r0, r3
   23d0a:	d109      	bne.n	23d20 <ready_thread+0x38>
   23d0c:	491b      	ldr	r1, [pc, #108]	; (23d7c <ready_thread+0x94>)
   23d0e:	481c      	ldr	r0, [pc, #112]	; (23d80 <ready_thread+0x98>)
   23d10:	4a1c      	ldr	r2, [pc, #112]	; (23d84 <ready_thread+0x9c>)
   23d12:	23ba      	movs	r3, #186	; 0xba
   23d14:	f004 fd2c 	bl	28770 <printk>
   23d18:	481a      	ldr	r0, [pc, #104]	; (23d84 <ready_thread+0x9c>)
   23d1a:	21ba      	movs	r1, #186	; 0xba
   23d1c:	f004 ff19 	bl	28b52 <assert_post_action>
	return list->head == list;
   23d20:	4919      	ldr	r1, [pc, #100]	; (23d88 <ready_thread+0xa0>)
   23d22:	460b      	mov	r3, r1
   23d24:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23d28:	4298      	cmp	r0, r3
   23d2a:	bf18      	it	ne
   23d2c:	4605      	movne	r5, r0
   23d2e:	2d00      	cmp	r5, #0
   23d30:	461a      	mov	r2, r3
   23d32:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23d34:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   23d36:	bf38      	it	cc
   23d38:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23d3a:	b1b3      	cbz	r3, 23d6a <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   23d3c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23d40:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   23d44:	4286      	cmp	r6, r0
   23d46:	d00c      	beq.n	23d62 <ready_thread+0x7a>
		return b2 - b1;
   23d48:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   23d4a:	2800      	cmp	r0, #0
   23d4c:	dd09      	ble.n	23d62 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   23d4e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23d50:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   23d54:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23d56:	605c      	str	r4, [r3, #4]
}
   23d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   23d5c:	2000      	movs	r0, #0
   23d5e:	f7ff bebd 	b.w	23adc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23d62:	42ab      	cmp	r3, r5
   23d64:	d001      	beq.n	23d6a <ready_thread+0x82>
   23d66:	681b      	ldr	r3, [r3, #0]
   23d68:	e7e7      	b.n	23d3a <ready_thread+0x52>
	node->prev = tail;
   23d6a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   23d6e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   23d70:	624c      	str	r4, [r1, #36]	; 0x24
}
   23d72:	e7f1      	b.n	23d58 <ready_thread+0x70>
}
   23d74:	bd70      	pop	{r4, r5, r6, pc}
   23d76:	bf00      	nop
   23d78:	20002178 	.word	0x20002178
   23d7c:	0003278e 	.word	0x0003278e
   23d80:	0002e915 	.word	0x0002e915
   23d84:	0003276c 	.word	0x0003276c
   23d88:	20002cfc 	.word	0x20002cfc

00023d8c <z_ready_thread>:
{
   23d8c:	b538      	push	{r3, r4, r5, lr}
   23d8e:	4604      	mov	r4, r0
	__asm__ volatile(
   23d90:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d94:	f3ef 8511 	mrs	r5, BASEPRI
   23d98:	f383 8812 	msr	BASEPRI_MAX, r3
   23d9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23da0:	4817      	ldr	r0, [pc, #92]	; (23e00 <z_ready_thread+0x74>)
   23da2:	f7fe fadb 	bl	2235c <z_spin_lock_valid>
   23da6:	b968      	cbnz	r0, 23dc4 <z_ready_thread+0x38>
   23da8:	4a16      	ldr	r2, [pc, #88]	; (23e04 <z_ready_thread+0x78>)
   23daa:	4917      	ldr	r1, [pc, #92]	; (23e08 <z_ready_thread+0x7c>)
   23dac:	4817      	ldr	r0, [pc, #92]	; (23e0c <z_ready_thread+0x80>)
   23dae:	2381      	movs	r3, #129	; 0x81
   23db0:	f004 fcde 	bl	28770 <printk>
   23db4:	4912      	ldr	r1, [pc, #72]	; (23e00 <z_ready_thread+0x74>)
   23db6:	4816      	ldr	r0, [pc, #88]	; (23e10 <z_ready_thread+0x84>)
   23db8:	f004 fcda 	bl	28770 <printk>
   23dbc:	4811      	ldr	r0, [pc, #68]	; (23e04 <z_ready_thread+0x78>)
   23dbe:	2181      	movs	r1, #129	; 0x81
   23dc0:	f004 fec7 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23dc4:	480e      	ldr	r0, [pc, #56]	; (23e00 <z_ready_thread+0x74>)
   23dc6:	f7fe fae7 	bl	22398 <z_spin_lock_set_owner>
			ready_thread(thread);
   23dca:	4620      	mov	r0, r4
   23dcc:	f7ff ff8c 	bl	23ce8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23dd0:	480b      	ldr	r0, [pc, #44]	; (23e00 <z_ready_thread+0x74>)
   23dd2:	f7fe fad1 	bl	22378 <z_spin_unlock_valid>
   23dd6:	b968      	cbnz	r0, 23df4 <z_ready_thread+0x68>
   23dd8:	4a0a      	ldr	r2, [pc, #40]	; (23e04 <z_ready_thread+0x78>)
   23dda:	490e      	ldr	r1, [pc, #56]	; (23e14 <z_ready_thread+0x88>)
   23ddc:	480b      	ldr	r0, [pc, #44]	; (23e0c <z_ready_thread+0x80>)
   23dde:	23ac      	movs	r3, #172	; 0xac
   23de0:	f004 fcc6 	bl	28770 <printk>
   23de4:	4906      	ldr	r1, [pc, #24]	; (23e00 <z_ready_thread+0x74>)
   23de6:	480c      	ldr	r0, [pc, #48]	; (23e18 <z_ready_thread+0x8c>)
   23de8:	f004 fcc2 	bl	28770 <printk>
   23dec:	4805      	ldr	r0, [pc, #20]	; (23e04 <z_ready_thread+0x78>)
   23dee:	21ac      	movs	r1, #172	; 0xac
   23df0:	f004 feaf 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23df4:	f385 8811 	msr	BASEPRI, r5
   23df8:	f3bf 8f6f 	isb	sy
}
   23dfc:	bd38      	pop	{r3, r4, r5, pc}
   23dfe:	bf00      	nop
   23e00:	20002d3c 	.word	0x20002d3c
   23e04:	0002ebfd 	.word	0x0002ebfd
   23e08:	0002ec4f 	.word	0x0002ec4f
   23e0c:	0002e915 	.word	0x0002e915
   23e10:	0002ec64 	.word	0x0002ec64
   23e14:	0002ec23 	.word	0x0002ec23
   23e18:	0002ec3a 	.word	0x0002ec3a

00023e1c <z_sched_start>:
{
   23e1c:	b538      	push	{r3, r4, r5, lr}
   23e1e:	4604      	mov	r4, r0
	__asm__ volatile(
   23e20:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e24:	f3ef 8511 	mrs	r5, BASEPRI
   23e28:	f383 8812 	msr	BASEPRI_MAX, r3
   23e2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e30:	481d      	ldr	r0, [pc, #116]	; (23ea8 <z_sched_start+0x8c>)
   23e32:	f7fe fa93 	bl	2235c <z_spin_lock_valid>
   23e36:	b968      	cbnz	r0, 23e54 <z_sched_start+0x38>
   23e38:	4a1c      	ldr	r2, [pc, #112]	; (23eac <z_sched_start+0x90>)
   23e3a:	491d      	ldr	r1, [pc, #116]	; (23eb0 <z_sched_start+0x94>)
   23e3c:	481d      	ldr	r0, [pc, #116]	; (23eb4 <z_sched_start+0x98>)
   23e3e:	2381      	movs	r3, #129	; 0x81
   23e40:	f004 fc96 	bl	28770 <printk>
   23e44:	4918      	ldr	r1, [pc, #96]	; (23ea8 <z_sched_start+0x8c>)
   23e46:	481c      	ldr	r0, [pc, #112]	; (23eb8 <z_sched_start+0x9c>)
   23e48:	f004 fc92 	bl	28770 <printk>
   23e4c:	4817      	ldr	r0, [pc, #92]	; (23eac <z_sched_start+0x90>)
   23e4e:	2181      	movs	r1, #129	; 0x81
   23e50:	f004 fe7f 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23e54:	4814      	ldr	r0, [pc, #80]	; (23ea8 <z_sched_start+0x8c>)
   23e56:	f7fe fa9f 	bl	22398 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   23e5a:	7b63      	ldrb	r3, [r4, #13]
   23e5c:	075a      	lsls	r2, r3, #29
   23e5e:	d416      	bmi.n	23e8e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e60:	4811      	ldr	r0, [pc, #68]	; (23ea8 <z_sched_start+0x8c>)
   23e62:	f7fe fa89 	bl	22378 <z_spin_unlock_valid>
   23e66:	b968      	cbnz	r0, 23e84 <z_sched_start+0x68>
   23e68:	4a10      	ldr	r2, [pc, #64]	; (23eac <z_sched_start+0x90>)
   23e6a:	4914      	ldr	r1, [pc, #80]	; (23ebc <z_sched_start+0xa0>)
   23e6c:	4811      	ldr	r0, [pc, #68]	; (23eb4 <z_sched_start+0x98>)
   23e6e:	23ac      	movs	r3, #172	; 0xac
   23e70:	f004 fc7e 	bl	28770 <printk>
   23e74:	490c      	ldr	r1, [pc, #48]	; (23ea8 <z_sched_start+0x8c>)
   23e76:	4812      	ldr	r0, [pc, #72]	; (23ec0 <z_sched_start+0xa4>)
   23e78:	f004 fc7a 	bl	28770 <printk>
   23e7c:	480b      	ldr	r0, [pc, #44]	; (23eac <z_sched_start+0x90>)
   23e7e:	21ac      	movs	r1, #172	; 0xac
   23e80:	f004 fe67 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23e84:	f385 8811 	msr	BASEPRI, r5
   23e88:	f3bf 8f6f 	isb	sy
}
   23e8c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23e8e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   23e92:	4620      	mov	r0, r4
   23e94:	7363      	strb	r3, [r4, #13]
   23e96:	f7ff ff27 	bl	23ce8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   23e9a:	4629      	mov	r1, r5
   23e9c:	4802      	ldr	r0, [pc, #8]	; (23ea8 <z_sched_start+0x8c>)
}
   23e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   23ea2:	f7ff bcd3 	b.w	2384c <z_reschedule>
   23ea6:	bf00      	nop
   23ea8:	20002d3c 	.word	0x20002d3c
   23eac:	0002ebfd 	.word	0x0002ebfd
   23eb0:	0002ec4f 	.word	0x0002ec4f
   23eb4:	0002e915 	.word	0x0002e915
   23eb8:	0002ec64 	.word	0x0002ec64
   23ebc:	0002ec23 	.word	0x0002ec23
   23ec0:	0002ec3a 	.word	0x0002ec3a

00023ec4 <z_thread_timeout>:
{
   23ec4:	b570      	push	{r4, r5, r6, lr}
   23ec6:	4604      	mov	r4, r0
	__asm__ volatile(
   23ec8:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ecc:	f3ef 8611 	mrs	r6, BASEPRI
   23ed0:	f383 8812 	msr	BASEPRI_MAX, r3
   23ed4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ed8:	4820      	ldr	r0, [pc, #128]	; (23f5c <z_thread_timeout+0x98>)
   23eda:	f7fe fa3f 	bl	2235c <z_spin_lock_valid>
   23ede:	b968      	cbnz	r0, 23efc <z_thread_timeout+0x38>
   23ee0:	4a1f      	ldr	r2, [pc, #124]	; (23f60 <z_thread_timeout+0x9c>)
   23ee2:	4920      	ldr	r1, [pc, #128]	; (23f64 <z_thread_timeout+0xa0>)
   23ee4:	4820      	ldr	r0, [pc, #128]	; (23f68 <z_thread_timeout+0xa4>)
   23ee6:	2381      	movs	r3, #129	; 0x81
   23ee8:	f004 fc42 	bl	28770 <printk>
   23eec:	491b      	ldr	r1, [pc, #108]	; (23f5c <z_thread_timeout+0x98>)
   23eee:	481f      	ldr	r0, [pc, #124]	; (23f6c <z_thread_timeout+0xa8>)
   23ef0:	f004 fc3e 	bl	28770 <printk>
   23ef4:	481a      	ldr	r0, [pc, #104]	; (23f60 <z_thread_timeout+0x9c>)
   23ef6:	2181      	movs	r1, #129	; 0x81
   23ef8:	f004 fe2b 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   23efc:	4817      	ldr	r0, [pc, #92]	; (23f5c <z_thread_timeout+0x98>)
   23efe:	f7fe fa4b 	bl	22398 <z_spin_lock_set_owner>
		if (!killed) {
   23f02:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23f06:	f013 0f28 	tst.w	r3, #40	; 0x28
   23f0a:	d110      	bne.n	23f2e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   23f0c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   23f10:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   23f14:	b113      	cbz	r3, 23f1c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   23f16:	4628      	mov	r0, r5
   23f18:	f7ff fd72 	bl	23a00 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23f1c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   23f20:	f023 0314 	bic.w	r3, r3, #20
   23f24:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   23f28:	4628      	mov	r0, r5
   23f2a:	f7ff fedd 	bl	23ce8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23f2e:	480b      	ldr	r0, [pc, #44]	; (23f5c <z_thread_timeout+0x98>)
   23f30:	f7fe fa22 	bl	22378 <z_spin_unlock_valid>
   23f34:	b968      	cbnz	r0, 23f52 <z_thread_timeout+0x8e>
   23f36:	4a0a      	ldr	r2, [pc, #40]	; (23f60 <z_thread_timeout+0x9c>)
   23f38:	490d      	ldr	r1, [pc, #52]	; (23f70 <z_thread_timeout+0xac>)
   23f3a:	480b      	ldr	r0, [pc, #44]	; (23f68 <z_thread_timeout+0xa4>)
   23f3c:	23ac      	movs	r3, #172	; 0xac
   23f3e:	f004 fc17 	bl	28770 <printk>
   23f42:	4906      	ldr	r1, [pc, #24]	; (23f5c <z_thread_timeout+0x98>)
   23f44:	480b      	ldr	r0, [pc, #44]	; (23f74 <z_thread_timeout+0xb0>)
   23f46:	f004 fc13 	bl	28770 <printk>
   23f4a:	4805      	ldr	r0, [pc, #20]	; (23f60 <z_thread_timeout+0x9c>)
   23f4c:	21ac      	movs	r1, #172	; 0xac
   23f4e:	f004 fe00 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   23f52:	f386 8811 	msr	BASEPRI, r6
   23f56:	f3bf 8f6f 	isb	sy
}
   23f5a:	bd70      	pop	{r4, r5, r6, pc}
   23f5c:	20002d3c 	.word	0x20002d3c
   23f60:	0002ebfd 	.word	0x0002ebfd
   23f64:	0002ec4f 	.word	0x0002ec4f
   23f68:	0002e915 	.word	0x0002e915
   23f6c:	0002ec64 	.word	0x0002ec64
   23f70:	0002ec23 	.word	0x0002ec23
   23f74:	0002ec3a 	.word	0x0002ec3a

00023f78 <unready_thread>:
{
   23f78:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   23f7a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   23f7e:	7b43      	ldrb	r3, [r0, #13]
   23f80:	2a00      	cmp	r2, #0
{
   23f82:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   23f84:	da06      	bge.n	23f94 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23f8a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   23f8c:	4601      	mov	r1, r0
   23f8e:	4806      	ldr	r0, [pc, #24]	; (23fa8 <unready_thread+0x30>)
   23f90:	f7ff fd14 	bl	239bc <z_priq_dumb_remove>
	update_cache(thread == _current);
   23f94:	4b05      	ldr	r3, [pc, #20]	; (23fac <unready_thread+0x34>)
   23f96:	6898      	ldr	r0, [r3, #8]
   23f98:	1b03      	subs	r3, r0, r4
   23f9a:	4258      	negs	r0, r3
}
   23f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   23fa0:	4158      	adcs	r0, r3
   23fa2:	f7ff bd9b 	b.w	23adc <update_cache>
   23fa6:	bf00      	nop
   23fa8:	20002d1c 	.word	0x20002d1c
   23fac:	20002cfc 	.word	0x20002cfc

00023fb0 <add_to_waitq_locked>:
{
   23fb0:	b538      	push	{r3, r4, r5, lr}
   23fb2:	4604      	mov	r4, r0
   23fb4:	460d      	mov	r5, r1
	unready_thread(thread);
   23fb6:	f7ff ffdf 	bl	23f78 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   23fba:	7b63      	ldrb	r3, [r4, #13]
   23fbc:	f043 0302 	orr.w	r3, r3, #2
   23fc0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23fc2:	b31d      	cbz	r5, 2400c <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23fc4:	4b17      	ldr	r3, [pc, #92]	; (24024 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   23fc6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   23fc8:	429c      	cmp	r4, r3
   23fca:	d109      	bne.n	23fe0 <add_to_waitq_locked+0x30>
   23fcc:	4916      	ldr	r1, [pc, #88]	; (24028 <add_to_waitq_locked+0x78>)
   23fce:	4817      	ldr	r0, [pc, #92]	; (2402c <add_to_waitq_locked+0x7c>)
   23fd0:	4a17      	ldr	r2, [pc, #92]	; (24030 <add_to_waitq_locked+0x80>)
   23fd2:	23ba      	movs	r3, #186	; 0xba
   23fd4:	f004 fbcc 	bl	28770 <printk>
   23fd8:	4815      	ldr	r0, [pc, #84]	; (24030 <add_to_waitq_locked+0x80>)
   23fda:	21ba      	movs	r1, #186	; 0xba
   23fdc:	f004 fdb9 	bl	28b52 <assert_post_action>
	return list->head == list;
   23fe0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fe2:	429d      	cmp	r5, r3
   23fe4:	bf08      	it	eq
   23fe6:	2300      	moveq	r3, #0
   23fe8:	2b00      	cmp	r3, #0
   23fea:	bf38      	it	cc
   23fec:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23fee:	b19b      	cbz	r3, 24018 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   23ff0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   23ff4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   23ff8:	4291      	cmp	r1, r2
   23ffa:	d008      	beq.n	2400e <add_to_waitq_locked+0x5e>
		return b2 - b1;
   23ffc:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   23ffe:	2a00      	cmp	r2, #0
   24000:	dd05      	ble.n	2400e <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   24002:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24004:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24008:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2400a:	605c      	str	r4, [r3, #4]
}
   2400c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2400e:	686a      	ldr	r2, [r5, #4]
   24010:	4293      	cmp	r3, r2
   24012:	d001      	beq.n	24018 <add_to_waitq_locked+0x68>
   24014:	681b      	ldr	r3, [r3, #0]
   24016:	e7ea      	b.n	23fee <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   24018:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2401a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2401e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24020:	606c      	str	r4, [r5, #4]
   24022:	e7f3      	b.n	2400c <add_to_waitq_locked+0x5c>
   24024:	20002178 	.word	0x20002178
   24028:	0003278e 	.word	0x0003278e
   2402c:	0002e915 	.word	0x0002e915
   24030:	0003276c 	.word	0x0003276c

00024034 <pend>:
{
   24034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24038:	4604      	mov	r4, r0
   2403a:	460d      	mov	r5, r1
   2403c:	4616      	mov	r6, r2
   2403e:	461f      	mov	r7, r3
	__asm__ volatile(
   24040:	f04f 0340 	mov.w	r3, #64	; 0x40
   24044:	f3ef 8811 	mrs	r8, BASEPRI
   24048:	f383 8812 	msr	BASEPRI_MAX, r3
   2404c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24050:	481f      	ldr	r0, [pc, #124]	; (240d0 <pend+0x9c>)
   24052:	f7fe f983 	bl	2235c <z_spin_lock_valid>
   24056:	b968      	cbnz	r0, 24074 <pend+0x40>
   24058:	4a1e      	ldr	r2, [pc, #120]	; (240d4 <pend+0xa0>)
   2405a:	491f      	ldr	r1, [pc, #124]	; (240d8 <pend+0xa4>)
   2405c:	481f      	ldr	r0, [pc, #124]	; (240dc <pend+0xa8>)
   2405e:	2381      	movs	r3, #129	; 0x81
   24060:	f004 fb86 	bl	28770 <printk>
   24064:	491a      	ldr	r1, [pc, #104]	; (240d0 <pend+0x9c>)
   24066:	481e      	ldr	r0, [pc, #120]	; (240e0 <pend+0xac>)
   24068:	f004 fb82 	bl	28770 <printk>
   2406c:	4819      	ldr	r0, [pc, #100]	; (240d4 <pend+0xa0>)
   2406e:	2181      	movs	r1, #129	; 0x81
   24070:	f004 fd6f 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   24074:	4816      	ldr	r0, [pc, #88]	; (240d0 <pend+0x9c>)
   24076:	f7fe f98f 	bl	22398 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2407a:	4620      	mov	r0, r4
   2407c:	4629      	mov	r1, r5
   2407e:	f7ff ff97 	bl	23fb0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24082:	4813      	ldr	r0, [pc, #76]	; (240d0 <pend+0x9c>)
   24084:	f7fe f978 	bl	22378 <z_spin_unlock_valid>
   24088:	b968      	cbnz	r0, 240a6 <pend+0x72>
   2408a:	4a12      	ldr	r2, [pc, #72]	; (240d4 <pend+0xa0>)
   2408c:	4915      	ldr	r1, [pc, #84]	; (240e4 <pend+0xb0>)
   2408e:	4813      	ldr	r0, [pc, #76]	; (240dc <pend+0xa8>)
   24090:	23ac      	movs	r3, #172	; 0xac
   24092:	f004 fb6d 	bl	28770 <printk>
   24096:	490e      	ldr	r1, [pc, #56]	; (240d0 <pend+0x9c>)
   24098:	4813      	ldr	r0, [pc, #76]	; (240e8 <pend+0xb4>)
   2409a:	f004 fb69 	bl	28770 <printk>
   2409e:	480d      	ldr	r0, [pc, #52]	; (240d4 <pend+0xa0>)
   240a0:	21ac      	movs	r1, #172	; 0xac
   240a2:	f004 fd56 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   240a6:	f388 8811 	msr	BASEPRI, r8
   240aa:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   240ae:	1c7b      	adds	r3, r7, #1
   240b0:	bf08      	it	eq
   240b2:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   240b6:	d008      	beq.n	240ca <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   240b8:	4632      	mov	r2, r6
   240ba:	463b      	mov	r3, r7
   240bc:	f104 0018 	add.w	r0, r4, #24
   240c0:	490a      	ldr	r1, [pc, #40]	; (240ec <pend+0xb8>)
}
   240c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   240c6:	f000 bd95 	b.w	24bf4 <z_add_timeout>
   240ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   240ce:	bf00      	nop
   240d0:	20002d3c 	.word	0x20002d3c
   240d4:	0002ebfd 	.word	0x0002ebfd
   240d8:	0002ec4f 	.word	0x0002ec4f
   240dc:	0002e915 	.word	0x0002e915
   240e0:	0002ec64 	.word	0x0002ec64
   240e4:	0002ec23 	.word	0x0002ec23
   240e8:	0002ec3a 	.word	0x0002ec3a
   240ec:	00023ec5 	.word	0x00023ec5

000240f0 <z_pend_curr>:
{
   240f0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   240f2:	4b11      	ldr	r3, [pc, #68]	; (24138 <z_pend_curr+0x48>)
{
   240f4:	4604      	mov	r4, r0
	pending_current = _current;
   240f6:	6898      	ldr	r0, [r3, #8]
   240f8:	4b10      	ldr	r3, [pc, #64]	; (2413c <z_pend_curr+0x4c>)
{
   240fa:	460d      	mov	r5, r1
	pending_current = _current;
   240fc:	6018      	str	r0, [r3, #0]
{
   240fe:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   24100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   24104:	f7ff ff96 	bl	24034 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24108:	4620      	mov	r0, r4
   2410a:	f7fe f935 	bl	22378 <z_spin_unlock_valid>
   2410e:	b968      	cbnz	r0, 2412c <z_pend_curr+0x3c>
   24110:	4a0b      	ldr	r2, [pc, #44]	; (24140 <z_pend_curr+0x50>)
   24112:	490c      	ldr	r1, [pc, #48]	; (24144 <z_pend_curr+0x54>)
   24114:	480c      	ldr	r0, [pc, #48]	; (24148 <z_pend_curr+0x58>)
   24116:	23c3      	movs	r3, #195	; 0xc3
   24118:	f004 fb2a 	bl	28770 <printk>
   2411c:	480b      	ldr	r0, [pc, #44]	; (2414c <z_pend_curr+0x5c>)
   2411e:	4621      	mov	r1, r4
   24120:	f004 fb26 	bl	28770 <printk>
   24124:	4806      	ldr	r0, [pc, #24]	; (24140 <z_pend_curr+0x50>)
   24126:	21c3      	movs	r1, #195	; 0xc3
   24128:	f004 fd13 	bl	28b52 <assert_post_action>
   2412c:	4628      	mov	r0, r5
}
   2412e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24132:	f7f0 ba3f 	b.w	145b4 <arch_swap>
   24136:	bf00      	nop
   24138:	20002cfc 	.word	0x20002cfc
   2413c:	20002d38 	.word	0x20002d38
   24140:	0002ebfd 	.word	0x0002ebfd
   24144:	0002ec23 	.word	0x0002ec23
   24148:	0002e915 	.word	0x0002e915
   2414c:	0002ec3a 	.word	0x0002ec3a

00024150 <z_set_prio>:
{
   24150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24152:	4604      	mov	r4, r0
   24154:	460e      	mov	r6, r1
	__asm__ volatile(
   24156:	f04f 0340 	mov.w	r3, #64	; 0x40
   2415a:	f3ef 8711 	mrs	r7, BASEPRI
   2415e:	f383 8812 	msr	BASEPRI_MAX, r3
   24162:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24166:	483c      	ldr	r0, [pc, #240]	; (24258 <z_set_prio+0x108>)
   24168:	f7fe f8f8 	bl	2235c <z_spin_lock_valid>
   2416c:	b968      	cbnz	r0, 2418a <z_set_prio+0x3a>
   2416e:	4a3b      	ldr	r2, [pc, #236]	; (2425c <z_set_prio+0x10c>)
   24170:	493b      	ldr	r1, [pc, #236]	; (24260 <z_set_prio+0x110>)
   24172:	483c      	ldr	r0, [pc, #240]	; (24264 <z_set_prio+0x114>)
   24174:	2381      	movs	r3, #129	; 0x81
   24176:	f004 fafb 	bl	28770 <printk>
   2417a:	4937      	ldr	r1, [pc, #220]	; (24258 <z_set_prio+0x108>)
   2417c:	483a      	ldr	r0, [pc, #232]	; (24268 <z_set_prio+0x118>)
   2417e:	f004 faf7 	bl	28770 <printk>
   24182:	4836      	ldr	r0, [pc, #216]	; (2425c <z_set_prio+0x10c>)
   24184:	2181      	movs	r1, #129	; 0x81
   24186:	f004 fce4 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2418a:	4833      	ldr	r0, [pc, #204]	; (24258 <z_set_prio+0x108>)
   2418c:	f7fe f904 	bl	22398 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24190:	7b63      	ldrb	r3, [r4, #13]
   24192:	06da      	lsls	r2, r3, #27
   24194:	b276      	sxtb	r6, r6
   24196:	d15c      	bne.n	24252 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   24198:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   2419a:	2d00      	cmp	r5, #0
   2419c:	d159      	bne.n	24252 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2419e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   241a2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   241a4:	4831      	ldr	r0, [pc, #196]	; (2426c <z_set_prio+0x11c>)
   241a6:	4621      	mov	r1, r4
   241a8:	f7ff fc08 	bl	239bc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   241ac:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   241ae:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   241b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   241b4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   241b6:	4b2e      	ldr	r3, [pc, #184]	; (24270 <z_set_prio+0x120>)
   241b8:	429c      	cmp	r4, r3
   241ba:	d109      	bne.n	241d0 <z_set_prio+0x80>
   241bc:	492d      	ldr	r1, [pc, #180]	; (24274 <z_set_prio+0x124>)
   241be:	4829      	ldr	r0, [pc, #164]	; (24264 <z_set_prio+0x114>)
   241c0:	4a2d      	ldr	r2, [pc, #180]	; (24278 <z_set_prio+0x128>)
   241c2:	23ba      	movs	r3, #186	; 0xba
   241c4:	f004 fad4 	bl	28770 <printk>
   241c8:	482b      	ldr	r0, [pc, #172]	; (24278 <z_set_prio+0x128>)
   241ca:	21ba      	movs	r1, #186	; 0xba
   241cc:	f004 fcc1 	bl	28b52 <assert_post_action>
	return list->head == list;
   241d0:	492a      	ldr	r1, [pc, #168]	; (2427c <z_set_prio+0x12c>)
   241d2:	460b      	mov	r3, r1
   241d4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241d8:	4298      	cmp	r0, r3
   241da:	bf18      	it	ne
   241dc:	4605      	movne	r5, r0
   241de:	2d00      	cmp	r5, #0
   241e0:	461a      	mov	r2, r3
   241e2:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   241e4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   241e6:	bf38      	it	cc
   241e8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   241ea:	b36b      	cbz	r3, 24248 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   241ec:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   241f0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   241f4:	4286      	cmp	r6, r0
   241f6:	d023      	beq.n	24240 <z_set_prio+0xf0>
		return b2 - b1;
   241f8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   241fa:	2800      	cmp	r0, #0
   241fc:	dd20      	ble.n	24240 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   241fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24200:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24204:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24206:	605c      	str	r4, [r3, #4]
			update_cache(1);
   24208:	2001      	movs	r0, #1
   2420a:	f7ff fc67 	bl	23adc <update_cache>
   2420e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24210:	4811      	ldr	r0, [pc, #68]	; (24258 <z_set_prio+0x108>)
   24212:	f7fe f8b1 	bl	22378 <z_spin_unlock_valid>
   24216:	b968      	cbnz	r0, 24234 <z_set_prio+0xe4>
   24218:	4a10      	ldr	r2, [pc, #64]	; (2425c <z_set_prio+0x10c>)
   2421a:	4919      	ldr	r1, [pc, #100]	; (24280 <z_set_prio+0x130>)
   2421c:	4811      	ldr	r0, [pc, #68]	; (24264 <z_set_prio+0x114>)
   2421e:	23ac      	movs	r3, #172	; 0xac
   24220:	f004 faa6 	bl	28770 <printk>
   24224:	490c      	ldr	r1, [pc, #48]	; (24258 <z_set_prio+0x108>)
   24226:	4817      	ldr	r0, [pc, #92]	; (24284 <z_set_prio+0x134>)
   24228:	f004 faa2 	bl	28770 <printk>
   2422c:	480b      	ldr	r0, [pc, #44]	; (2425c <z_set_prio+0x10c>)
   2422e:	21ac      	movs	r1, #172	; 0xac
   24230:	f004 fc8f 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24234:	f387 8811 	msr	BASEPRI, r7
   24238:	f3bf 8f6f 	isb	sy
}
   2423c:	4620      	mov	r0, r4
   2423e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   24240:	42ab      	cmp	r3, r5
   24242:	d001      	beq.n	24248 <z_set_prio+0xf8>
   24244:	681b      	ldr	r3, [r3, #0]
   24246:	e7d0      	b.n	241ea <z_set_prio+0x9a>
	node->prev = tail;
   24248:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2424c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2424e:	624c      	str	r4, [r1, #36]	; 0x24
}
   24250:	e7da      	b.n	24208 <z_set_prio+0xb8>
			thread->base.prio = prio;
   24252:	73a6      	strb	r6, [r4, #14]
   24254:	2400      	movs	r4, #0
   24256:	e7db      	b.n	24210 <z_set_prio+0xc0>
   24258:	20002d3c 	.word	0x20002d3c
   2425c:	0002ebfd 	.word	0x0002ebfd
   24260:	0002ec4f 	.word	0x0002ec4f
   24264:	0002e915 	.word	0x0002e915
   24268:	0002ec64 	.word	0x0002ec64
   2426c:	20002d1c 	.word	0x20002d1c
   24270:	20002178 	.word	0x20002178
   24274:	0003278e 	.word	0x0003278e
   24278:	0003276c 	.word	0x0003276c
   2427c:	20002cfc 	.word	0x20002cfc
   24280:	0002ec23 	.word	0x0002ec23
   24284:	0002ec3a 	.word	0x0002ec3a

00024288 <z_impl_k_thread_suspend>:
{
   24288:	b570      	push	{r4, r5, r6, lr}
   2428a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   2428c:	3018      	adds	r0, #24
   2428e:	f000 fd85 	bl	24d9c <z_abort_timeout>
	__asm__ volatile(
   24292:	f04f 0340 	mov.w	r3, #64	; 0x40
   24296:	f3ef 8611 	mrs	r6, BASEPRI
   2429a:	f383 8812 	msr	BASEPRI_MAX, r3
   2429e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242a2:	4825      	ldr	r0, [pc, #148]	; (24338 <z_impl_k_thread_suspend+0xb0>)
   242a4:	f7fe f85a 	bl	2235c <z_spin_lock_valid>
   242a8:	b968      	cbnz	r0, 242c6 <z_impl_k_thread_suspend+0x3e>
   242aa:	4a24      	ldr	r2, [pc, #144]	; (2433c <z_impl_k_thread_suspend+0xb4>)
   242ac:	4924      	ldr	r1, [pc, #144]	; (24340 <z_impl_k_thread_suspend+0xb8>)
   242ae:	4825      	ldr	r0, [pc, #148]	; (24344 <z_impl_k_thread_suspend+0xbc>)
   242b0:	2381      	movs	r3, #129	; 0x81
   242b2:	f004 fa5d 	bl	28770 <printk>
   242b6:	4920      	ldr	r1, [pc, #128]	; (24338 <z_impl_k_thread_suspend+0xb0>)
   242b8:	4823      	ldr	r0, [pc, #140]	; (24348 <z_impl_k_thread_suspend+0xc0>)
   242ba:	f004 fa59 	bl	28770 <printk>
   242be:	481f      	ldr	r0, [pc, #124]	; (2433c <z_impl_k_thread_suspend+0xb4>)
   242c0:	2181      	movs	r1, #129	; 0x81
   242c2:	f004 fc46 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   242c6:	481c      	ldr	r0, [pc, #112]	; (24338 <z_impl_k_thread_suspend+0xb0>)
   242c8:	f7fe f866 	bl	22398 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   242cc:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   242d0:	7b63      	ldrb	r3, [r4, #13]
   242d2:	2a00      	cmp	r2, #0
   242d4:	da06      	bge.n	242e4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   242d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   242da:	481c      	ldr	r0, [pc, #112]	; (2434c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   242dc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   242de:	4621      	mov	r1, r4
   242e0:	f7ff fb6c 	bl	239bc <z_priq_dumb_remove>
		update_cache(thread == _current);
   242e4:	4d1a      	ldr	r5, [pc, #104]	; (24350 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   242e6:	7b63      	ldrb	r3, [r4, #13]
   242e8:	68a8      	ldr	r0, [r5, #8]
   242ea:	f043 0310 	orr.w	r3, r3, #16
   242ee:	7363      	strb	r3, [r4, #13]
   242f0:	1b03      	subs	r3, r0, r4
   242f2:	4258      	negs	r0, r3
   242f4:	4158      	adcs	r0, r3
   242f6:	f7ff fbf1 	bl	23adc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   242fa:	480f      	ldr	r0, [pc, #60]	; (24338 <z_impl_k_thread_suspend+0xb0>)
   242fc:	f7fe f83c 	bl	22378 <z_spin_unlock_valid>
   24300:	b968      	cbnz	r0, 2431e <z_impl_k_thread_suspend+0x96>
   24302:	4a0e      	ldr	r2, [pc, #56]	; (2433c <z_impl_k_thread_suspend+0xb4>)
   24304:	4913      	ldr	r1, [pc, #76]	; (24354 <z_impl_k_thread_suspend+0xcc>)
   24306:	480f      	ldr	r0, [pc, #60]	; (24344 <z_impl_k_thread_suspend+0xbc>)
   24308:	23ac      	movs	r3, #172	; 0xac
   2430a:	f004 fa31 	bl	28770 <printk>
   2430e:	490a      	ldr	r1, [pc, #40]	; (24338 <z_impl_k_thread_suspend+0xb0>)
   24310:	4811      	ldr	r0, [pc, #68]	; (24358 <z_impl_k_thread_suspend+0xd0>)
   24312:	f004 fa2d 	bl	28770 <printk>
   24316:	4809      	ldr	r0, [pc, #36]	; (2433c <z_impl_k_thread_suspend+0xb4>)
   24318:	21ac      	movs	r1, #172	; 0xac
   2431a:	f004 fc1a 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2431e:	f386 8811 	msr	BASEPRI, r6
   24322:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   24326:	68ab      	ldr	r3, [r5, #8]
   24328:	42a3      	cmp	r3, r4
   2432a:	d103      	bne.n	24334 <z_impl_k_thread_suspend+0xac>
}
   2432c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24330:	f009 b85c 	b.w	2d3ec <z_reschedule_unlocked>
}
   24334:	bd70      	pop	{r4, r5, r6, pc}
   24336:	bf00      	nop
   24338:	20002d3c 	.word	0x20002d3c
   2433c:	0002ebfd 	.word	0x0002ebfd
   24340:	0002ec4f 	.word	0x0002ec4f
   24344:	0002e915 	.word	0x0002e915
   24348:	0002ec64 	.word	0x0002ec64
   2434c:	20002d1c 	.word	0x20002d1c
   24350:	20002cfc 	.word	0x20002cfc
   24354:	0002ec23 	.word	0x0002ec23
   24358:	0002ec3a 	.word	0x0002ec3a

0002435c <k_sched_unlock>:
{
   2435c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2435e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24362:	f3ef 8511 	mrs	r5, BASEPRI
   24366:	f383 8812 	msr	BASEPRI_MAX, r3
   2436a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2436e:	482d      	ldr	r0, [pc, #180]	; (24424 <k_sched_unlock+0xc8>)
   24370:	f7fd fff4 	bl	2235c <z_spin_lock_valid>
   24374:	b968      	cbnz	r0, 24392 <k_sched_unlock+0x36>
   24376:	4a2c      	ldr	r2, [pc, #176]	; (24428 <k_sched_unlock+0xcc>)
   24378:	492c      	ldr	r1, [pc, #176]	; (2442c <k_sched_unlock+0xd0>)
   2437a:	482d      	ldr	r0, [pc, #180]	; (24430 <k_sched_unlock+0xd4>)
   2437c:	2381      	movs	r3, #129	; 0x81
   2437e:	f004 f9f7 	bl	28770 <printk>
   24382:	4928      	ldr	r1, [pc, #160]	; (24424 <k_sched_unlock+0xc8>)
   24384:	482b      	ldr	r0, [pc, #172]	; (24434 <k_sched_unlock+0xd8>)
   24386:	f004 f9f3 	bl	28770 <printk>
   2438a:	4827      	ldr	r0, [pc, #156]	; (24428 <k_sched_unlock+0xcc>)
   2438c:	2181      	movs	r1, #129	; 0x81
   2438e:	f004 fbe0 	bl	28b52 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   24392:	4c29      	ldr	r4, [pc, #164]	; (24438 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   24394:	4823      	ldr	r0, [pc, #140]	; (24424 <k_sched_unlock+0xc8>)
   24396:	f7fd ffff 	bl	22398 <z_spin_lock_set_owner>
   2439a:	68a2      	ldr	r2, [r4, #8]
   2439c:	7bd2      	ldrb	r2, [r2, #15]
   2439e:	b972      	cbnz	r2, 243be <k_sched_unlock+0x62>
   243a0:	4926      	ldr	r1, [pc, #152]	; (2443c <k_sched_unlock+0xe0>)
   243a2:	4a27      	ldr	r2, [pc, #156]	; (24440 <k_sched_unlock+0xe4>)
   243a4:	4822      	ldr	r0, [pc, #136]	; (24430 <k_sched_unlock+0xd4>)
   243a6:	f240 3385 	movw	r3, #901	; 0x385
   243aa:	f004 f9e1 	bl	28770 <printk>
   243ae:	4825      	ldr	r0, [pc, #148]	; (24444 <k_sched_unlock+0xe8>)
   243b0:	f004 f9de 	bl	28770 <printk>
   243b4:	4822      	ldr	r0, [pc, #136]	; (24440 <k_sched_unlock+0xe4>)
   243b6:	f240 3185 	movw	r1, #901	; 0x385
   243ba:	f004 fbca 	bl	28b52 <assert_post_action>
   243be:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   243c2:	b173      	cbz	r3, 243e2 <k_sched_unlock+0x86>
   243c4:	4920      	ldr	r1, [pc, #128]	; (24448 <k_sched_unlock+0xec>)
   243c6:	4a1e      	ldr	r2, [pc, #120]	; (24440 <k_sched_unlock+0xe4>)
   243c8:	4819      	ldr	r0, [pc, #100]	; (24430 <k_sched_unlock+0xd4>)
   243ca:	f240 3386 	movw	r3, #902	; 0x386
   243ce:	f004 f9cf 	bl	28770 <printk>
   243d2:	481c      	ldr	r0, [pc, #112]	; (24444 <k_sched_unlock+0xe8>)
   243d4:	f004 f9cc 	bl	28770 <printk>
   243d8:	4819      	ldr	r0, [pc, #100]	; (24440 <k_sched_unlock+0xe4>)
   243da:	f240 3186 	movw	r1, #902	; 0x386
   243de:	f004 fbb8 	bl	28b52 <assert_post_action>
		++_current->base.sched_locked;
   243e2:	68a2      	ldr	r2, [r4, #8]
   243e4:	7bd3      	ldrb	r3, [r2, #15]
   243e6:	3301      	adds	r3, #1
		update_cache(0);
   243e8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   243ea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   243ec:	f7ff fb76 	bl	23adc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   243f0:	480c      	ldr	r0, [pc, #48]	; (24424 <k_sched_unlock+0xc8>)
   243f2:	f7fd ffc1 	bl	22378 <z_spin_unlock_valid>
   243f6:	b968      	cbnz	r0, 24414 <k_sched_unlock+0xb8>
   243f8:	4a0b      	ldr	r2, [pc, #44]	; (24428 <k_sched_unlock+0xcc>)
   243fa:	4914      	ldr	r1, [pc, #80]	; (2444c <k_sched_unlock+0xf0>)
   243fc:	480c      	ldr	r0, [pc, #48]	; (24430 <k_sched_unlock+0xd4>)
   243fe:	23ac      	movs	r3, #172	; 0xac
   24400:	f004 f9b6 	bl	28770 <printk>
   24404:	4907      	ldr	r1, [pc, #28]	; (24424 <k_sched_unlock+0xc8>)
   24406:	4812      	ldr	r0, [pc, #72]	; (24450 <k_sched_unlock+0xf4>)
   24408:	f004 f9b2 	bl	28770 <printk>
   2440c:	4806      	ldr	r0, [pc, #24]	; (24428 <k_sched_unlock+0xcc>)
   2440e:	21ac      	movs	r1, #172	; 0xac
   24410:	f004 fb9f 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24414:	f385 8811 	msr	BASEPRI, r5
   24418:	f3bf 8f6f 	isb	sy
}
   2441c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   24420:	f008 bfe4 	b.w	2d3ec <z_reschedule_unlocked>
   24424:	20002d3c 	.word	0x20002d3c
   24428:	0002ebfd 	.word	0x0002ebfd
   2442c:	0002ec4f 	.word	0x0002ec4f
   24430:	0002e915 	.word	0x0002e915
   24434:	0002ec64 	.word	0x0002ec64
   24438:	20002cfc 	.word	0x20002cfc
   2443c:	000327ed 	.word	0x000327ed
   24440:	0003276c 	.word	0x0003276c
   24444:	00031821 	.word	0x00031821
   24448:	000324a4 	.word	0x000324a4
   2444c:	0002ec23 	.word	0x0002ec23
   24450:	0002ec3a 	.word	0x0002ec3a

00024454 <z_unpend1_no_timeout>:
{
   24454:	b538      	push	{r3, r4, r5, lr}
   24456:	4604      	mov	r4, r0
	__asm__ volatile(
   24458:	f04f 0340 	mov.w	r3, #64	; 0x40
   2445c:	f3ef 8511 	mrs	r5, BASEPRI
   24460:	f383 8812 	msr	BASEPRI_MAX, r3
   24464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24468:	4819      	ldr	r0, [pc, #100]	; (244d0 <z_unpend1_no_timeout+0x7c>)
   2446a:	f7fd ff77 	bl	2235c <z_spin_lock_valid>
   2446e:	b968      	cbnz	r0, 2448c <z_unpend1_no_timeout+0x38>
   24470:	4a18      	ldr	r2, [pc, #96]	; (244d4 <z_unpend1_no_timeout+0x80>)
   24472:	4919      	ldr	r1, [pc, #100]	; (244d8 <z_unpend1_no_timeout+0x84>)
   24474:	4819      	ldr	r0, [pc, #100]	; (244dc <z_unpend1_no_timeout+0x88>)
   24476:	2381      	movs	r3, #129	; 0x81
   24478:	f004 f97a 	bl	28770 <printk>
   2447c:	4914      	ldr	r1, [pc, #80]	; (244d0 <z_unpend1_no_timeout+0x7c>)
   2447e:	4818      	ldr	r0, [pc, #96]	; (244e0 <z_unpend1_no_timeout+0x8c>)
   24480:	f004 f976 	bl	28770 <printk>
   24484:	4813      	ldr	r0, [pc, #76]	; (244d4 <z_unpend1_no_timeout+0x80>)
   24486:	2181      	movs	r1, #129	; 0x81
   24488:	f004 fb63 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2448c:	4810      	ldr	r0, [pc, #64]	; (244d0 <z_unpend1_no_timeout+0x7c>)
   2448e:	f7fd ff83 	bl	22398 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   24492:	4620      	mov	r0, r4
   24494:	f008 ffb4 	bl	2d400 <z_priq_dumb_best>
		if (thread != NULL) {
   24498:	4604      	mov	r4, r0
   2449a:	b108      	cbz	r0, 244a0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2449c:	f7ff fab0 	bl	23a00 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   244a0:	480b      	ldr	r0, [pc, #44]	; (244d0 <z_unpend1_no_timeout+0x7c>)
   244a2:	f7fd ff69 	bl	22378 <z_spin_unlock_valid>
   244a6:	b968      	cbnz	r0, 244c4 <z_unpend1_no_timeout+0x70>
   244a8:	4a0a      	ldr	r2, [pc, #40]	; (244d4 <z_unpend1_no_timeout+0x80>)
   244aa:	490e      	ldr	r1, [pc, #56]	; (244e4 <z_unpend1_no_timeout+0x90>)
   244ac:	480b      	ldr	r0, [pc, #44]	; (244dc <z_unpend1_no_timeout+0x88>)
   244ae:	23ac      	movs	r3, #172	; 0xac
   244b0:	f004 f95e 	bl	28770 <printk>
   244b4:	4906      	ldr	r1, [pc, #24]	; (244d0 <z_unpend1_no_timeout+0x7c>)
   244b6:	480c      	ldr	r0, [pc, #48]	; (244e8 <z_unpend1_no_timeout+0x94>)
   244b8:	f004 f95a 	bl	28770 <printk>
   244bc:	4805      	ldr	r0, [pc, #20]	; (244d4 <z_unpend1_no_timeout+0x80>)
   244be:	21ac      	movs	r1, #172	; 0xac
   244c0:	f004 fb47 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   244c4:	f385 8811 	msr	BASEPRI, r5
   244c8:	f3bf 8f6f 	isb	sy
}
   244cc:	4620      	mov	r0, r4
   244ce:	bd38      	pop	{r3, r4, r5, pc}
   244d0:	20002d3c 	.word	0x20002d3c
   244d4:	0002ebfd 	.word	0x0002ebfd
   244d8:	0002ec4f 	.word	0x0002ec4f
   244dc:	0002e915 	.word	0x0002e915
   244e0:	0002ec64 	.word	0x0002ec64
   244e4:	0002ec23 	.word	0x0002ec23
   244e8:	0002ec3a 	.word	0x0002ec3a

000244ec <z_unpend_first_thread>:
{
   244ec:	b538      	push	{r3, r4, r5, lr}
   244ee:	4604      	mov	r4, r0
	__asm__ volatile(
   244f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   244f4:	f3ef 8511 	mrs	r5, BASEPRI
   244f8:	f383 8812 	msr	BASEPRI_MAX, r3
   244fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24500:	481b      	ldr	r0, [pc, #108]	; (24570 <z_unpend_first_thread+0x84>)
   24502:	f7fd ff2b 	bl	2235c <z_spin_lock_valid>
   24506:	b968      	cbnz	r0, 24524 <z_unpend_first_thread+0x38>
   24508:	4a1a      	ldr	r2, [pc, #104]	; (24574 <z_unpend_first_thread+0x88>)
   2450a:	491b      	ldr	r1, [pc, #108]	; (24578 <z_unpend_first_thread+0x8c>)
   2450c:	481b      	ldr	r0, [pc, #108]	; (2457c <z_unpend_first_thread+0x90>)
   2450e:	2381      	movs	r3, #129	; 0x81
   24510:	f004 f92e 	bl	28770 <printk>
   24514:	4916      	ldr	r1, [pc, #88]	; (24570 <z_unpend_first_thread+0x84>)
   24516:	481a      	ldr	r0, [pc, #104]	; (24580 <z_unpend_first_thread+0x94>)
   24518:	f004 f92a 	bl	28770 <printk>
   2451c:	4815      	ldr	r0, [pc, #84]	; (24574 <z_unpend_first_thread+0x88>)
   2451e:	2181      	movs	r1, #129	; 0x81
   24520:	f004 fb17 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   24524:	4812      	ldr	r0, [pc, #72]	; (24570 <z_unpend_first_thread+0x84>)
   24526:	f7fd ff37 	bl	22398 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2452a:	4620      	mov	r0, r4
   2452c:	f008 ff68 	bl	2d400 <z_priq_dumb_best>
		if (thread != NULL) {
   24530:	4604      	mov	r4, r0
   24532:	b128      	cbz	r0, 24540 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   24534:	f7ff fa64 	bl	23a00 <unpend_thread_no_timeout>
   24538:	f104 0018 	add.w	r0, r4, #24
   2453c:	f000 fc2e 	bl	24d9c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24540:	480b      	ldr	r0, [pc, #44]	; (24570 <z_unpend_first_thread+0x84>)
   24542:	f7fd ff19 	bl	22378 <z_spin_unlock_valid>
   24546:	b968      	cbnz	r0, 24564 <z_unpend_first_thread+0x78>
   24548:	4a0a      	ldr	r2, [pc, #40]	; (24574 <z_unpend_first_thread+0x88>)
   2454a:	490e      	ldr	r1, [pc, #56]	; (24584 <z_unpend_first_thread+0x98>)
   2454c:	480b      	ldr	r0, [pc, #44]	; (2457c <z_unpend_first_thread+0x90>)
   2454e:	23ac      	movs	r3, #172	; 0xac
   24550:	f004 f90e 	bl	28770 <printk>
   24554:	4906      	ldr	r1, [pc, #24]	; (24570 <z_unpend_first_thread+0x84>)
   24556:	480c      	ldr	r0, [pc, #48]	; (24588 <z_unpend_first_thread+0x9c>)
   24558:	f004 f90a 	bl	28770 <printk>
   2455c:	4805      	ldr	r0, [pc, #20]	; (24574 <z_unpend_first_thread+0x88>)
   2455e:	21ac      	movs	r1, #172	; 0xac
   24560:	f004 faf7 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24564:	f385 8811 	msr	BASEPRI, r5
   24568:	f3bf 8f6f 	isb	sy
}
   2456c:	4620      	mov	r0, r4
   2456e:	bd38      	pop	{r3, r4, r5, pc}
   24570:	20002d3c 	.word	0x20002d3c
   24574:	0002ebfd 	.word	0x0002ebfd
   24578:	0002ec4f 	.word	0x0002ec4f
   2457c:	0002e915 	.word	0x0002e915
   24580:	0002ec64 	.word	0x0002ec64
   24584:	0002ec23 	.word	0x0002ec23
   24588:	0002ec3a 	.word	0x0002ec3a

0002458c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2458c:	4b04      	ldr	r3, [pc, #16]	; (245a0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2458e:	2100      	movs	r1, #0
   24590:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   24594:	e9c3 2208 	strd	r2, r2, [r3, #32]
   24598:	4608      	mov	r0, r1
   2459a:	f7ff b8a9 	b.w	236f0 <k_sched_time_slice_set>
   2459e:	bf00      	nop
   245a0:	20002cfc 	.word	0x20002cfc

000245a4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   245a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245a6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   245aa:	b173      	cbz	r3, 245ca <z_impl_k_yield+0x26>
   245ac:	4941      	ldr	r1, [pc, #260]	; (246b4 <z_impl_k_yield+0x110>)
   245ae:	4a42      	ldr	r2, [pc, #264]	; (246b8 <z_impl_k_yield+0x114>)
   245b0:	4842      	ldr	r0, [pc, #264]	; (246bc <z_impl_k_yield+0x118>)
   245b2:	f240 43dc 	movw	r3, #1244	; 0x4dc
   245b6:	f004 f8db 	bl	28770 <printk>
   245ba:	4841      	ldr	r0, [pc, #260]	; (246c0 <z_impl_k_yield+0x11c>)
   245bc:	f004 f8d8 	bl	28770 <printk>
   245c0:	483d      	ldr	r0, [pc, #244]	; (246b8 <z_impl_k_yield+0x114>)
   245c2:	f240 41dc 	movw	r1, #1244	; 0x4dc
   245c6:	f004 fac4 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   245ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   245ce:	f3ef 8611 	mrs	r6, BASEPRI
   245d2:	f383 8812 	msr	BASEPRI_MAX, r3
   245d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245da:	483a      	ldr	r0, [pc, #232]	; (246c4 <z_impl_k_yield+0x120>)
   245dc:	f7fd febe 	bl	2235c <z_spin_lock_valid>
   245e0:	b968      	cbnz	r0, 245fe <z_impl_k_yield+0x5a>
   245e2:	4a39      	ldr	r2, [pc, #228]	; (246c8 <z_impl_k_yield+0x124>)
   245e4:	4939      	ldr	r1, [pc, #228]	; (246cc <z_impl_k_yield+0x128>)
   245e6:	4835      	ldr	r0, [pc, #212]	; (246bc <z_impl_k_yield+0x118>)
   245e8:	2381      	movs	r3, #129	; 0x81
   245ea:	f004 f8c1 	bl	28770 <printk>
   245ee:	4935      	ldr	r1, [pc, #212]	; (246c4 <z_impl_k_yield+0x120>)
   245f0:	4837      	ldr	r0, [pc, #220]	; (246d0 <z_impl_k_yield+0x12c>)
   245f2:	f004 f8bd 	bl	28770 <printk>
   245f6:	4834      	ldr	r0, [pc, #208]	; (246c8 <z_impl_k_yield+0x124>)
   245f8:	2181      	movs	r1, #129	; 0x81
   245fa:	f004 faaa 	bl	28b52 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   245fe:	4d35      	ldr	r5, [pc, #212]	; (246d4 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   24600:	4830      	ldr	r0, [pc, #192]	; (246c4 <z_impl_k_yield+0x120>)
   24602:	f7fd fec9 	bl	22398 <z_spin_lock_set_owner>
   24606:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24608:	7b4b      	ldrb	r3, [r1, #13]
   2460a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2460e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   24610:	f105 0020 	add.w	r0, r5, #32
   24614:	f7ff f9d2 	bl	239bc <z_priq_dumb_remove>
	}
	queue_thread(_current);
   24618:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2461a:	7b63      	ldrb	r3, [r4, #13]
   2461c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24620:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24622:	4b2d      	ldr	r3, [pc, #180]	; (246d8 <z_impl_k_yield+0x134>)
   24624:	429c      	cmp	r4, r3
   24626:	d109      	bne.n	2463c <z_impl_k_yield+0x98>
   24628:	492c      	ldr	r1, [pc, #176]	; (246dc <z_impl_k_yield+0x138>)
   2462a:	4824      	ldr	r0, [pc, #144]	; (246bc <z_impl_k_yield+0x118>)
   2462c:	4a22      	ldr	r2, [pc, #136]	; (246b8 <z_impl_k_yield+0x114>)
   2462e:	23ba      	movs	r3, #186	; 0xba
   24630:	f004 f89e 	bl	28770 <printk>
   24634:	4820      	ldr	r0, [pc, #128]	; (246b8 <z_impl_k_yield+0x114>)
   24636:	21ba      	movs	r1, #186	; 0xba
   24638:	f004 fa8b 	bl	28b52 <assert_post_action>
	return list->head == list;
   2463c:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2463e:	4828      	ldr	r0, [pc, #160]	; (246e0 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24640:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24642:	4283      	cmp	r3, r0
   24644:	bf08      	it	eq
   24646:	2300      	moveq	r3, #0
   24648:	2b00      	cmp	r3, #0
   2464a:	bf38      	it	cc
   2464c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2464e:	b35b      	cbz	r3, 246a8 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   24650:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24654:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   24658:	4297      	cmp	r7, r2
   2465a:	d021      	beq.n	246a0 <z_impl_k_yield+0xfc>
		return b2 - b1;
   2465c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   2465e:	2a00      	cmp	r2, #0
   24660:	dd1e      	ble.n	246a0 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   24662:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24664:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24668:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2466a:	605c      	str	r4, [r3, #4]
	update_cache(1);
   2466c:	2001      	movs	r0, #1
   2466e:	f7ff fa35 	bl	23adc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24672:	4814      	ldr	r0, [pc, #80]	; (246c4 <z_impl_k_yield+0x120>)
   24674:	f7fd fe80 	bl	22378 <z_spin_unlock_valid>
   24678:	b968      	cbnz	r0, 24696 <z_impl_k_yield+0xf2>
   2467a:	4a13      	ldr	r2, [pc, #76]	; (246c8 <z_impl_k_yield+0x124>)
   2467c:	4919      	ldr	r1, [pc, #100]	; (246e4 <z_impl_k_yield+0x140>)
   2467e:	480f      	ldr	r0, [pc, #60]	; (246bc <z_impl_k_yield+0x118>)
   24680:	23c3      	movs	r3, #195	; 0xc3
   24682:	f004 f875 	bl	28770 <printk>
   24686:	490f      	ldr	r1, [pc, #60]	; (246c4 <z_impl_k_yield+0x120>)
   24688:	4817      	ldr	r0, [pc, #92]	; (246e8 <z_impl_k_yield+0x144>)
   2468a:	f004 f871 	bl	28770 <printk>
   2468e:	480e      	ldr	r0, [pc, #56]	; (246c8 <z_impl_k_yield+0x124>)
   24690:	21c3      	movs	r1, #195	; 0xc3
   24692:	f004 fa5e 	bl	28b52 <assert_post_action>
   24696:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   24698:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2469c:	f7ef bf8a 	b.w	145b4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   246a0:	428b      	cmp	r3, r1
   246a2:	d001      	beq.n	246a8 <z_impl_k_yield+0x104>
   246a4:	681b      	ldr	r3, [r3, #0]
   246a6:	e7d2      	b.n	2464e <z_impl_k_yield+0xaa>
	node->prev = tail;
   246a8:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   246ac:	600c      	str	r4, [r1, #0]
	list->tail = node;
   246ae:	626c      	str	r4, [r5, #36]	; 0x24
}
   246b0:	e7dc      	b.n	2466c <z_impl_k_yield+0xc8>
   246b2:	bf00      	nop
   246b4:	000324a4 	.word	0x000324a4
   246b8:	0003276c 	.word	0x0003276c
   246bc:	0002e915 	.word	0x0002e915
   246c0:	00031821 	.word	0x00031821
   246c4:	20002d3c 	.word	0x20002d3c
   246c8:	0002ebfd 	.word	0x0002ebfd
   246cc:	0002ec4f 	.word	0x0002ec4f
   246d0:	0002ec64 	.word	0x0002ec64
   246d4:	20002cfc 	.word	0x20002cfc
   246d8:	20002178 	.word	0x20002178
   246dc:	0003278e 	.word	0x0003278e
   246e0:	20002d1c 	.word	0x20002d1c
   246e4:	0002ec23 	.word	0x0002ec23
   246e8:	0002ec3a 	.word	0x0002ec3a

000246ec <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   246ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   246f0:	4604      	mov	r4, r0
   246f2:	460d      	mov	r5, r1
   246f4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   246f8:	b173      	cbz	r3, 24718 <z_tick_sleep+0x2c>
   246fa:	4945      	ldr	r1, [pc, #276]	; (24810 <z_tick_sleep+0x124>)
   246fc:	4a45      	ldr	r2, [pc, #276]	; (24814 <z_tick_sleep+0x128>)
   246fe:	4846      	ldr	r0, [pc, #280]	; (24818 <z_tick_sleep+0x12c>)
   24700:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   24704:	f004 f834 	bl	28770 <printk>
   24708:	4844      	ldr	r0, [pc, #272]	; (2481c <z_tick_sleep+0x130>)
   2470a:	f004 f831 	bl	28770 <printk>
   2470e:	4841      	ldr	r0, [pc, #260]	; (24814 <z_tick_sleep+0x128>)
   24710:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   24714:	f004 fa1d 	bl	28b52 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   24718:	ea54 0305 	orrs.w	r3, r4, r5
   2471c:	d104      	bne.n	24728 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   2471e:	f7ff ff41 	bl	245a4 <z_impl_k_yield>
		k_yield();
		return 0;
   24722:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   24724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   24728:	f06f 0301 	mvn.w	r3, #1
   2472c:	1b1e      	subs	r6, r3, r4
   2472e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24732:	eb63 0705 	sbc.w	r7, r3, r5
   24736:	2e01      	cmp	r6, #1
   24738:	f177 0300 	sbcs.w	r3, r7, #0
   2473c:	da64      	bge.n	24808 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2473e:	f008 fe79 	bl	2d434 <sys_clock_tick_get_32>
   24742:	1906      	adds	r6, r0, r4
   24744:	f04f 0340 	mov.w	r3, #64	; 0x40
   24748:	f3ef 8811 	mrs	r8, BASEPRI
   2474c:	f383 8812 	msr	BASEPRI_MAX, r3
   24750:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24754:	4832      	ldr	r0, [pc, #200]	; (24820 <z_tick_sleep+0x134>)
   24756:	f7fd fe01 	bl	2235c <z_spin_lock_valid>
   2475a:	b968      	cbnz	r0, 24778 <z_tick_sleep+0x8c>
   2475c:	4a31      	ldr	r2, [pc, #196]	; (24824 <z_tick_sleep+0x138>)
   2475e:	4932      	ldr	r1, [pc, #200]	; (24828 <z_tick_sleep+0x13c>)
   24760:	482d      	ldr	r0, [pc, #180]	; (24818 <z_tick_sleep+0x12c>)
   24762:	2381      	movs	r3, #129	; 0x81
   24764:	f004 f804 	bl	28770 <printk>
   24768:	492d      	ldr	r1, [pc, #180]	; (24820 <z_tick_sleep+0x134>)
   2476a:	4830      	ldr	r0, [pc, #192]	; (2482c <z_tick_sleep+0x140>)
   2476c:	f004 f800 	bl	28770 <printk>
   24770:	482c      	ldr	r0, [pc, #176]	; (24824 <z_tick_sleep+0x138>)
   24772:	2181      	movs	r1, #129	; 0x81
   24774:	f004 f9ed 	bl	28b52 <assert_post_action>
	pending_current = _current;
   24778:	4f2d      	ldr	r7, [pc, #180]	; (24830 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   2477a:	4829      	ldr	r0, [pc, #164]	; (24820 <z_tick_sleep+0x134>)
   2477c:	f7fd fe0c 	bl	22398 <z_spin_lock_set_owner>
   24780:	4b2c      	ldr	r3, [pc, #176]	; (24834 <z_tick_sleep+0x148>)
   24782:	68b8      	ldr	r0, [r7, #8]
   24784:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   24786:	f7ff fbf7 	bl	23f78 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2478a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2478c:	492a      	ldr	r1, [pc, #168]	; (24838 <z_tick_sleep+0x14c>)
   2478e:	4622      	mov	r2, r4
   24790:	462b      	mov	r3, r5
   24792:	3018      	adds	r0, #24
   24794:	f000 fa2e 	bl	24bf4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   24798:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2479a:	4821      	ldr	r0, [pc, #132]	; (24820 <z_tick_sleep+0x134>)
   2479c:	7b53      	ldrb	r3, [r2, #13]
   2479e:	f043 0310 	orr.w	r3, r3, #16
   247a2:	7353      	strb	r3, [r2, #13]
   247a4:	f7fd fde8 	bl	22378 <z_spin_unlock_valid>
   247a8:	b968      	cbnz	r0, 247c6 <z_tick_sleep+0xda>
   247aa:	4a1e      	ldr	r2, [pc, #120]	; (24824 <z_tick_sleep+0x138>)
   247ac:	4923      	ldr	r1, [pc, #140]	; (2483c <z_tick_sleep+0x150>)
   247ae:	481a      	ldr	r0, [pc, #104]	; (24818 <z_tick_sleep+0x12c>)
   247b0:	23c3      	movs	r3, #195	; 0xc3
   247b2:	f003 ffdd 	bl	28770 <printk>
   247b6:	491a      	ldr	r1, [pc, #104]	; (24820 <z_tick_sleep+0x134>)
   247b8:	4821      	ldr	r0, [pc, #132]	; (24840 <z_tick_sleep+0x154>)
   247ba:	f003 ffd9 	bl	28770 <printk>
   247be:	4819      	ldr	r0, [pc, #100]	; (24824 <z_tick_sleep+0x138>)
   247c0:	21c3      	movs	r1, #195	; 0xc3
   247c2:	f004 f9c6 	bl	28b52 <assert_post_action>
   247c6:	4640      	mov	r0, r8
   247c8:	f7ef fef4 	bl	145b4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   247cc:	68bb      	ldr	r3, [r7, #8]
   247ce:	7b5b      	ldrb	r3, [r3, #13]
   247d0:	06db      	lsls	r3, r3, #27
   247d2:	d50e      	bpl.n	247f2 <z_tick_sleep+0x106>
   247d4:	491b      	ldr	r1, [pc, #108]	; (24844 <z_tick_sleep+0x158>)
   247d6:	4a0f      	ldr	r2, [pc, #60]	; (24814 <z_tick_sleep+0x128>)
   247d8:	480f      	ldr	r0, [pc, #60]	; (24818 <z_tick_sleep+0x12c>)
   247da:	f240 5319 	movw	r3, #1305	; 0x519
   247de:	f003 ffc7 	bl	28770 <printk>
   247e2:	480e      	ldr	r0, [pc, #56]	; (2481c <z_tick_sleep+0x130>)
   247e4:	f003 ffc4 	bl	28770 <printk>
   247e8:	480a      	ldr	r0, [pc, #40]	; (24814 <z_tick_sleep+0x128>)
   247ea:	f240 5119 	movw	r1, #1305	; 0x519
   247ee:	f004 f9b0 	bl	28b52 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   247f2:	f008 fe1f 	bl	2d434 <sys_clock_tick_get_32>
   247f6:	1a30      	subs	r0, r6, r0
   247f8:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   247fc:	2801      	cmp	r0, #1
   247fe:	f171 0300 	sbcs.w	r3, r1, #0
   24802:	bfb8      	it	lt
   24804:	2000      	movlt	r0, #0
   24806:	e78d      	b.n	24724 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   24808:	f06f 0601 	mvn.w	r6, #1
   2480c:	1b36      	subs	r6, r6, r4
   2480e:	e799      	b.n	24744 <z_tick_sleep+0x58>
   24810:	000324a4 	.word	0x000324a4
   24814:	0003276c 	.word	0x0003276c
   24818:	0002e915 	.word	0x0002e915
   2481c:	00031821 	.word	0x00031821
   24820:	20002d3c 	.word	0x20002d3c
   24824:	0002ebfd 	.word	0x0002ebfd
   24828:	0002ec4f 	.word	0x0002ec4f
   2482c:	0002ec64 	.word	0x0002ec64
   24830:	20002cfc 	.word	0x20002cfc
   24834:	20002d38 	.word	0x20002d38
   24838:	00023ec5 	.word	0x00023ec5
   2483c:	0002ec23 	.word	0x0002ec23
   24840:	0002ec3a 	.word	0x0002ec3a
   24844:	0003281e 	.word	0x0003281e

00024848 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   24848:	b538      	push	{r3, r4, r5, lr}
   2484a:	4604      	mov	r4, r0
   2484c:	460d      	mov	r5, r1
   2484e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   24852:	b173      	cbz	r3, 24872 <z_impl_k_sleep+0x2a>
   24854:	4913      	ldr	r1, [pc, #76]	; (248a4 <z_impl_k_sleep+0x5c>)
   24856:	4a14      	ldr	r2, [pc, #80]	; (248a8 <z_impl_k_sleep+0x60>)
   24858:	4814      	ldr	r0, [pc, #80]	; (248ac <z_impl_k_sleep+0x64>)
   2485a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   2485e:	f003 ff87 	bl	28770 <printk>
   24862:	4813      	ldr	r0, [pc, #76]	; (248b0 <z_impl_k_sleep+0x68>)
   24864:	f003 ff84 	bl	28770 <printk>
   24868:	480f      	ldr	r0, [pc, #60]	; (248a8 <z_impl_k_sleep+0x60>)
   2486a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   2486e:	f004 f970 	bl	28b52 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24872:	1c6b      	adds	r3, r5, #1
   24874:	bf08      	it	eq
   24876:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   2487a:	d106      	bne.n	2488a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   2487c:	4b0d      	ldr	r3, [pc, #52]	; (248b4 <z_impl_k_sleep+0x6c>)
   2487e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   24880:	f7ff fd02 	bl	24288 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   24884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   24888:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   2488a:	4620      	mov	r0, r4
   2488c:	4629      	mov	r1, r5
   2488e:	f7ff ff2d 	bl	246ec <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   24892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   24896:	fb80 3403 	smull	r3, r4, r0, r3
   2489a:	0bd8      	lsrs	r0, r3, #15
   2489c:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   248a0:	e7f2      	b.n	24888 <z_impl_k_sleep+0x40>
   248a2:	bf00      	nop
   248a4:	000324a4 	.word	0x000324a4
   248a8:	0003276c 	.word	0x0003276c
   248ac:	0002e915 	.word	0x0002e915
   248b0:	00031821 	.word	0x00031821
   248b4:	20002cfc 	.word	0x20002cfc

000248b8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   248b8:	4b01      	ldr	r3, [pc, #4]	; (248c0 <z_impl_z_current_get+0x8>)
   248ba:	6898      	ldr	r0, [r3, #8]
   248bc:	4770      	bx	lr
   248be:	bf00      	nop
   248c0:	20002cfc 	.word	0x20002cfc

000248c4 <z_impl_k_is_preempt_thread>:
   248c4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   248c8:	b93b      	cbnz	r3, 248da <z_impl_k_is_preempt_thread+0x16>
   248ca:	4b05      	ldr	r3, [pc, #20]	; (248e0 <z_impl_k_is_preempt_thread+0x1c>)
   248cc:	689b      	ldr	r3, [r3, #8]
   248ce:	89d8      	ldrh	r0, [r3, #14]
   248d0:	287f      	cmp	r0, #127	; 0x7f
   248d2:	bf8c      	ite	hi
   248d4:	2000      	movhi	r0, #0
   248d6:	2001      	movls	r0, #1
   248d8:	4770      	bx	lr
   248da:	2000      	movs	r0, #0
}
   248dc:	4770      	bx	lr
   248de:	bf00      	nop
   248e0:	20002cfc 	.word	0x20002cfc

000248e4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   248e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248e8:	4604      	mov	r4, r0
   248ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   248ee:	f3ef 8611 	mrs	r6, BASEPRI
   248f2:	f383 8812 	msr	BASEPRI_MAX, r3
   248f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   248fa:	4848      	ldr	r0, [pc, #288]	; (24a1c <z_thread_abort+0x138>)
   248fc:	f7fd fd2e 	bl	2235c <z_spin_lock_valid>
   24900:	b968      	cbnz	r0, 2491e <z_thread_abort+0x3a>
   24902:	4a47      	ldr	r2, [pc, #284]	; (24a20 <z_thread_abort+0x13c>)
   24904:	4947      	ldr	r1, [pc, #284]	; (24a24 <z_thread_abort+0x140>)
   24906:	4848      	ldr	r0, [pc, #288]	; (24a28 <z_thread_abort+0x144>)
   24908:	2381      	movs	r3, #129	; 0x81
   2490a:	f003 ff31 	bl	28770 <printk>
   2490e:	4943      	ldr	r1, [pc, #268]	; (24a1c <z_thread_abort+0x138>)
   24910:	4846      	ldr	r0, [pc, #280]	; (24a2c <z_thread_abort+0x148>)
   24912:	f003 ff2d 	bl	28770 <printk>
   24916:	4842      	ldr	r0, [pc, #264]	; (24a20 <z_thread_abort+0x13c>)
   24918:	2181      	movs	r1, #129	; 0x81
   2491a:	f004 f91a 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2491e:	483f      	ldr	r0, [pc, #252]	; (24a1c <z_thread_abort+0x138>)
   24920:	f7fd fd3a 	bl	22398 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   24924:	7b63      	ldrb	r3, [r4, #13]
   24926:	071a      	lsls	r2, r3, #28
   24928:	d517      	bpl.n	2495a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2492a:	483c      	ldr	r0, [pc, #240]	; (24a1c <z_thread_abort+0x138>)
   2492c:	f7fd fd24 	bl	22378 <z_spin_unlock_valid>
   24930:	b968      	cbnz	r0, 2494e <z_thread_abort+0x6a>
   24932:	4a3b      	ldr	r2, [pc, #236]	; (24a20 <z_thread_abort+0x13c>)
   24934:	493e      	ldr	r1, [pc, #248]	; (24a30 <z_thread_abort+0x14c>)
   24936:	483c      	ldr	r0, [pc, #240]	; (24a28 <z_thread_abort+0x144>)
   24938:	23ac      	movs	r3, #172	; 0xac
   2493a:	f003 ff19 	bl	28770 <printk>
   2493e:	4937      	ldr	r1, [pc, #220]	; (24a1c <z_thread_abort+0x138>)
   24940:	483c      	ldr	r0, [pc, #240]	; (24a34 <z_thread_abort+0x150>)
   24942:	f003 ff15 	bl	28770 <printk>
   24946:	4836      	ldr	r0, [pc, #216]	; (24a20 <z_thread_abort+0x13c>)
   24948:	21ac      	movs	r1, #172	; 0xac
   2494a:	f004 f902 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2494e:	f386 8811 	msr	BASEPRI, r6
   24952:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2495a:	f023 0220 	bic.w	r2, r3, #32
   2495e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   24962:	09d2      	lsrs	r2, r2, #7
   24964:	d142      	bne.n	249ec <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24966:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   24968:	68a3      	ldr	r3, [r4, #8]
   2496a:	b113      	cbz	r3, 24972 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   2496c:	4620      	mov	r0, r4
   2496e:	f7ff f847 	bl	23a00 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   24972:	f104 0018 	add.w	r0, r4, #24
   24976:	f000 fa11 	bl	24d9c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2497a:	f104 0758 	add.w	r7, r4, #88	; 0x58
   2497e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   24982:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24984:	42bd      	cmp	r5, r7
   24986:	d001      	beq.n	2498c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24988:	2d00      	cmp	r5, #0
   2498a:	d139      	bne.n	24a00 <z_thread_abort+0x11c>
		update_cache(1);
   2498c:	2001      	movs	r0, #1
   2498e:	f7ff f8a5 	bl	23adc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   24992:	4b29      	ldr	r3, [pc, #164]	; (24a38 <z_thread_abort+0x154>)
   24994:	689b      	ldr	r3, [r3, #8]
   24996:	42a3      	cmp	r3, r4
   24998:	d1c7      	bne.n	2492a <z_thread_abort+0x46>
   2499a:	f3ef 8305 	mrs	r3, IPSR
   2499e:	2b00      	cmp	r3, #0
   249a0:	d1c3      	bne.n	2492a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   249a2:	481e      	ldr	r0, [pc, #120]	; (24a1c <z_thread_abort+0x138>)
   249a4:	f7fd fce8 	bl	22378 <z_spin_unlock_valid>
   249a8:	b968      	cbnz	r0, 249c6 <z_thread_abort+0xe2>
   249aa:	4a1d      	ldr	r2, [pc, #116]	; (24a20 <z_thread_abort+0x13c>)
   249ac:	4920      	ldr	r1, [pc, #128]	; (24a30 <z_thread_abort+0x14c>)
   249ae:	481e      	ldr	r0, [pc, #120]	; (24a28 <z_thread_abort+0x144>)
   249b0:	23c3      	movs	r3, #195	; 0xc3
   249b2:	f003 fedd 	bl	28770 <printk>
   249b6:	4919      	ldr	r1, [pc, #100]	; (24a1c <z_thread_abort+0x138>)
   249b8:	481e      	ldr	r0, [pc, #120]	; (24a34 <z_thread_abort+0x150>)
   249ba:	f003 fed9 	bl	28770 <printk>
   249be:	4818      	ldr	r0, [pc, #96]	; (24a20 <z_thread_abort+0x13c>)
   249c0:	21c3      	movs	r1, #195	; 0xc3
   249c2:	f004 f8c6 	bl	28b52 <assert_post_action>
   249c6:	4630      	mov	r0, r6
   249c8:	f7ef fdf4 	bl	145b4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   249cc:	4a1b      	ldr	r2, [pc, #108]	; (24a3c <z_thread_abort+0x158>)
   249ce:	491c      	ldr	r1, [pc, #112]	; (24a40 <z_thread_abort+0x15c>)
   249d0:	4815      	ldr	r0, [pc, #84]	; (24a28 <z_thread_abort+0x144>)
   249d2:	f240 634b 	movw	r3, #1611	; 0x64b
   249d6:	f003 fecb 	bl	28770 <printk>
   249da:	481a      	ldr	r0, [pc, #104]	; (24a44 <z_thread_abort+0x160>)
   249dc:	f003 fec8 	bl	28770 <printk>
   249e0:	4816      	ldr	r0, [pc, #88]	; (24a3c <z_thread_abort+0x158>)
   249e2:	f240 614b 	movw	r1, #1611	; 0x64b
   249e6:	f004 f8b4 	bl	28b52 <assert_post_action>
   249ea:	e79e      	b.n	2492a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   249ec:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   249f0:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   249f4:	4814      	ldr	r0, [pc, #80]	; (24a48 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   249f6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   249f8:	4621      	mov	r1, r4
   249fa:	f7fe ffdf 	bl	239bc <z_priq_dumb_remove>
}
   249fe:	e7b3      	b.n	24968 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   24a00:	4628      	mov	r0, r5
   24a02:	f7fe fffd 	bl	23a00 <unpend_thread_no_timeout>
   24a06:	f105 0018 	add.w	r0, r5, #24
   24a0a:	f000 f9c7 	bl	24d9c <z_abort_timeout>
   24a0e:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   24a12:	4628      	mov	r0, r5
   24a14:	f7ff f968 	bl	23ce8 <ready_thread>
   24a18:	e7b3      	b.n	24982 <z_thread_abort+0x9e>
   24a1a:	bf00      	nop
   24a1c:	20002d3c 	.word	0x20002d3c
   24a20:	0002ebfd 	.word	0x0002ebfd
   24a24:	0002ec4f 	.word	0x0002ec4f
   24a28:	0002e915 	.word	0x0002e915
   24a2c:	0002ec64 	.word	0x0002ec64
   24a30:	0002ec23 	.word	0x0002ec23
   24a34:	0002ec3a 	.word	0x0002ec3a
   24a38:	20002cfc 	.word	0x20002cfc
   24a3c:	0003276c 	.word	0x0003276c
   24a40:	00032bb3 	.word	0x00032bb3
   24a44:	0003285e 	.word	0x0003285e
   24a48:	20002d1c 	.word	0x20002d1c

00024a4c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   24a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a4e:	4604      	mov	r4, r0
   24a50:	460e      	mov	r6, r1
   24a52:	4615      	mov	r5, r2
	__asm__ volatile(
   24a54:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a58:	f3ef 8711 	mrs	r7, BASEPRI
   24a5c:	f383 8812 	msr	BASEPRI_MAX, r3
   24a60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a64:	481e      	ldr	r0, [pc, #120]	; (24ae0 <z_sched_wake+0x94>)
   24a66:	f7fd fc79 	bl	2235c <z_spin_lock_valid>
   24a6a:	b968      	cbnz	r0, 24a88 <z_sched_wake+0x3c>
   24a6c:	4a1d      	ldr	r2, [pc, #116]	; (24ae4 <z_sched_wake+0x98>)
   24a6e:	491e      	ldr	r1, [pc, #120]	; (24ae8 <z_sched_wake+0x9c>)
   24a70:	481e      	ldr	r0, [pc, #120]	; (24aec <z_sched_wake+0xa0>)
   24a72:	2381      	movs	r3, #129	; 0x81
   24a74:	f003 fe7c 	bl	28770 <printk>
   24a78:	4919      	ldr	r1, [pc, #100]	; (24ae0 <z_sched_wake+0x94>)
   24a7a:	481d      	ldr	r0, [pc, #116]	; (24af0 <z_sched_wake+0xa4>)
   24a7c:	f003 fe78 	bl	28770 <printk>
   24a80:	4818      	ldr	r0, [pc, #96]	; (24ae4 <z_sched_wake+0x98>)
   24a82:	2181      	movs	r1, #129	; 0x81
   24a84:	f004 f865 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   24a88:	4815      	ldr	r0, [pc, #84]	; (24ae0 <z_sched_wake+0x94>)
   24a8a:	f7fd fc85 	bl	22398 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   24a8e:	4620      	mov	r0, r4
   24a90:	f008 fcb6 	bl	2d400 <z_priq_dumb_best>

		if (thread != NULL) {
   24a94:	4604      	mov	r4, r0
   24a96:	b158      	cbz	r0, 24ab0 <z_sched_wake+0x64>
   24a98:	67c6      	str	r6, [r0, #124]	; 0x7c
   24a9a:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   24a9c:	f7fe ffb0 	bl	23a00 <unpend_thread_no_timeout>
   24aa0:	f104 0018 	add.w	r0, r4, #24
   24aa4:	f000 f97a 	bl	24d9c <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   24aa8:	4620      	mov	r0, r4
   24aaa:	f7ff f91d 	bl	23ce8 <ready_thread>
			ret = true;
   24aae:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ab0:	480b      	ldr	r0, [pc, #44]	; (24ae0 <z_sched_wake+0x94>)
   24ab2:	f7fd fc61 	bl	22378 <z_spin_unlock_valid>
   24ab6:	b968      	cbnz	r0, 24ad4 <z_sched_wake+0x88>
   24ab8:	4a0a      	ldr	r2, [pc, #40]	; (24ae4 <z_sched_wake+0x98>)
   24aba:	490e      	ldr	r1, [pc, #56]	; (24af4 <z_sched_wake+0xa8>)
   24abc:	480b      	ldr	r0, [pc, #44]	; (24aec <z_sched_wake+0xa0>)
   24abe:	23ac      	movs	r3, #172	; 0xac
   24ac0:	f003 fe56 	bl	28770 <printk>
   24ac4:	4906      	ldr	r1, [pc, #24]	; (24ae0 <z_sched_wake+0x94>)
   24ac6:	480c      	ldr	r0, [pc, #48]	; (24af8 <z_sched_wake+0xac>)
   24ac8:	f003 fe52 	bl	28770 <printk>
   24acc:	4805      	ldr	r0, [pc, #20]	; (24ae4 <z_sched_wake+0x98>)
   24ace:	21ac      	movs	r1, #172	; 0xac
   24ad0:	f004 f83f 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24ad4:	f387 8811 	msr	BASEPRI, r7
   24ad8:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   24adc:	4620      	mov	r0, r4
   24ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24ae0:	20002d3c 	.word	0x20002d3c
   24ae4:	0002ebfd 	.word	0x0002ebfd
   24ae8:	0002ec4f 	.word	0x0002ec4f
   24aec:	0002e915 	.word	0x0002e915
   24af0:	0002ec64 	.word	0x0002ec64
   24af4:	0002ec23 	.word	0x0002ec23
   24af8:	0002ec3a 	.word	0x0002ec3a

00024afc <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   24afc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24afe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   24b02:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24b04:	e9cd 6700 	strd	r6, r7, [sp]
   24b08:	f7ff faf2 	bl	240f0 <z_pend_curr>

	if (data != NULL) {
   24b0c:	b11c      	cbz	r4, 24b16 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   24b0e:	4b03      	ldr	r3, [pc, #12]	; (24b1c <z_sched_wait+0x20>)
   24b10:	689b      	ldr	r3, [r3, #8]
   24b12:	695b      	ldr	r3, [r3, #20]
   24b14:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   24b16:	b002      	add	sp, #8
   24b18:	bdd0      	pop	{r4, r6, r7, pc}
   24b1a:	bf00      	nop
   24b1c:	20002cfc 	.word	0x20002cfc

00024b20 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   24b20:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   24b22:	4806      	ldr	r0, [pc, #24]	; (24b3c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   24b24:	4a06      	ldr	r2, [pc, #24]	; (24b40 <z_data_copy+0x20>)
   24b26:	4907      	ldr	r1, [pc, #28]	; (24b44 <z_data_copy+0x24>)
   24b28:	1a12      	subs	r2, r2, r0
   24b2a:	f005 ffb6 	bl	2aa9a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   24b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   24b32:	4a05      	ldr	r2, [pc, #20]	; (24b48 <z_data_copy+0x28>)
   24b34:	4905      	ldr	r1, [pc, #20]	; (24b4c <z_data_copy+0x2c>)
   24b36:	4806      	ldr	r0, [pc, #24]	; (24b50 <z_data_copy+0x30>)
   24b38:	f005 bfaf 	b.w	2aa9a <memcpy>
   24b3c:	20000000 	.word	0x20000000
   24b40:	20000ae0 	.word	0x20000ae0
   24b44:	00032c18 	.word	0x00032c18
   24b48:	00000000 	.word	0x00000000
   24b4c:	00032c18 	.word	0x00032c18
   24b50:	20000000 	.word	0x20000000

00024b54 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24b54:	4b03      	ldr	r3, [pc, #12]	; (24b64 <elapsed+0x10>)
   24b56:	681b      	ldr	r3, [r3, #0]
   24b58:	b90b      	cbnz	r3, 24b5e <elapsed+0xa>
   24b5a:	f7fb b833 	b.w	1fbc4 <sys_clock_elapsed>
}
   24b5e:	2000      	movs	r0, #0
   24b60:	4770      	bx	lr
   24b62:	bf00      	nop
   24b64:	20002d48 	.word	0x20002d48

00024b68 <next_timeout>:

static int32_t next_timeout(void)
{
   24b68:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   24b6a:	4b13      	ldr	r3, [pc, #76]	; (24bb8 <next_timeout+0x50>)
   24b6c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b6e:	429c      	cmp	r4, r3
   24b70:	bf08      	it	eq
   24b72:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   24b74:	f7ff ffee 	bl	24b54 <elapsed>
   24b78:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   24b7a:	b1bc      	cbz	r4, 24bac <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   24b7c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   24b80:	1b40      	subs	r0, r0, r5
   24b82:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   24b86:	2801      	cmp	r0, #1
   24b88:	f171 0300 	sbcs.w	r3, r1, #0
   24b8c:	db11      	blt.n	24bb2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   24b8e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   24b92:	2300      	movs	r3, #0
   24b94:	4282      	cmp	r2, r0
   24b96:	eb73 0401 	sbcs.w	r4, r3, r1
   24b9a:	da00      	bge.n	24b9e <next_timeout+0x36>
   24b9c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   24b9e:	4b07      	ldr	r3, [pc, #28]	; (24bbc <next_timeout+0x54>)
   24ba0:	691b      	ldr	r3, [r3, #16]
   24ba2:	b113      	cbz	r3, 24baa <next_timeout+0x42>
   24ba4:	4298      	cmp	r0, r3
   24ba6:	bfa8      	it	ge
   24ba8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   24baa:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   24bac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24bb0:	e7f5      	b.n	24b9e <next_timeout+0x36>
   24bb2:	2000      	movs	r0, #0
   24bb4:	e7f3      	b.n	24b9e <next_timeout+0x36>
   24bb6:	bf00      	nop
   24bb8:	20000640 	.word	0x20000640
   24bbc:	20002cfc 	.word	0x20002cfc

00024bc0 <remove_timeout>:
{
   24bc0:	b530      	push	{r4, r5, lr}
   24bc2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24bc4:	b168      	cbz	r0, 24be2 <remove_timeout+0x22>
   24bc6:	4a0a      	ldr	r2, [pc, #40]	; (24bf0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   24bc8:	6852      	ldr	r2, [r2, #4]
   24bca:	4290      	cmp	r0, r2
   24bcc:	d009      	beq.n	24be2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   24bce:	b143      	cbz	r3, 24be2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   24bd0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24bd4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24bd8:	1912      	adds	r2, r2, r4
   24bda:	eb45 0101 	adc.w	r1, r5, r1
   24bde:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   24be2:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   24be4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24be6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24be8:	2300      	movs	r3, #0
	node->prev = NULL;
   24bea:	e9c0 3300 	strd	r3, r3, [r0]
}
   24bee:	bd30      	pop	{r4, r5, pc}
   24bf0:	20000640 	.word	0x20000640

00024bf4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   24bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bf8:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24bfa:	1c6b      	adds	r3, r5, #1
   24bfc:	bf08      	it	eq
   24bfe:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   24c02:	4682      	mov	sl, r0
   24c04:	468b      	mov	fp, r1
   24c06:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24c08:	f000 80aa 	beq.w	24d60 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   24c0c:	6803      	ldr	r3, [r0, #0]
   24c0e:	b163      	cbz	r3, 24c2a <z_add_timeout+0x36>
   24c10:	4955      	ldr	r1, [pc, #340]	; (24d68 <z_add_timeout+0x174>)
   24c12:	4a56      	ldr	r2, [pc, #344]	; (24d6c <z_add_timeout+0x178>)
   24c14:	4856      	ldr	r0, [pc, #344]	; (24d70 <z_add_timeout+0x17c>)
   24c16:	235d      	movs	r3, #93	; 0x5d
   24c18:	f003 fdaa 	bl	28770 <printk>
   24c1c:	4855      	ldr	r0, [pc, #340]	; (24d74 <z_add_timeout+0x180>)
   24c1e:	f003 fda7 	bl	28770 <printk>
   24c22:	4852      	ldr	r0, [pc, #328]	; (24d6c <z_add_timeout+0x178>)
   24c24:	215d      	movs	r1, #93	; 0x5d
   24c26:	f003 ff94 	bl	28b52 <assert_post_action>
	to->fn = fn;
   24c2a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   24c2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c32:	f3ef 8b11 	mrs	fp, BASEPRI
   24c36:	f383 8812 	msr	BASEPRI_MAX, r3
   24c3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c3e:	484e      	ldr	r0, [pc, #312]	; (24d78 <z_add_timeout+0x184>)
   24c40:	f7fd fb8c 	bl	2235c <z_spin_lock_valid>
   24c44:	b968      	cbnz	r0, 24c62 <z_add_timeout+0x6e>
   24c46:	4a4d      	ldr	r2, [pc, #308]	; (24d7c <z_add_timeout+0x188>)
   24c48:	494d      	ldr	r1, [pc, #308]	; (24d80 <z_add_timeout+0x18c>)
   24c4a:	4849      	ldr	r0, [pc, #292]	; (24d70 <z_add_timeout+0x17c>)
   24c4c:	2381      	movs	r3, #129	; 0x81
   24c4e:	f003 fd8f 	bl	28770 <printk>
   24c52:	4949      	ldr	r1, [pc, #292]	; (24d78 <z_add_timeout+0x184>)
   24c54:	484b      	ldr	r0, [pc, #300]	; (24d84 <z_add_timeout+0x190>)
   24c56:	f003 fd8b 	bl	28770 <printk>
   24c5a:	4848      	ldr	r0, [pc, #288]	; (24d7c <z_add_timeout+0x188>)
   24c5c:	2181      	movs	r1, #129	; 0x81
   24c5e:	f003 ff78 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   24c62:	4845      	ldr	r0, [pc, #276]	; (24d78 <z_add_timeout+0x184>)
   24c64:	f7fd fb98 	bl	22398 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   24c68:	f06f 0301 	mvn.w	r3, #1
   24c6c:	ebb3 0804 	subs.w	r8, r3, r4
   24c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24c74:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24c78:	f1b8 0f00 	cmp.w	r8, #0
   24c7c:	f179 0100 	sbcs.w	r1, r9, #0
   24c80:	db1c      	blt.n	24cbc <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24c82:	4841      	ldr	r0, [pc, #260]	; (24d88 <z_add_timeout+0x194>)
   24c84:	e9d0 1000 	ldrd	r1, r0, [r0]
   24c88:	1a5b      	subs	r3, r3, r1
   24c8a:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   24c8e:	1b1e      	subs	r6, r3, r4
   24c90:	eb62 0705 	sbc.w	r7, r2, r5
   24c94:	2e01      	cmp	r6, #1
   24c96:	f177 0300 	sbcs.w	r3, r7, #0
   24c9a:	bfbc      	itt	lt
   24c9c:	2601      	movlt	r6, #1
   24c9e:	2700      	movlt	r7, #0
   24ca0:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   24ca4:	4a39      	ldr	r2, [pc, #228]	; (24d8c <z_add_timeout+0x198>)
   24ca6:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24caa:	4293      	cmp	r3, r2
   24cac:	d11d      	bne.n	24cea <z_add_timeout+0xf6>
	node->prev = tail;
   24cae:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   24cb2:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   24cb6:	f8c2 a004 	str.w	sl, [r2, #4]
}
   24cba:	e02c      	b.n	24d16 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   24cbc:	f7ff ff4a 	bl	24b54 <elapsed>
   24cc0:	1c63      	adds	r3, r4, #1
   24cc2:	9300      	str	r3, [sp, #0]
   24cc4:	f145 0300 	adc.w	r3, r5, #0
   24cc8:	9301      	str	r3, [sp, #4]
   24cca:	e9dd 2300 	ldrd	r2, r3, [sp]
   24cce:	1812      	adds	r2, r2, r0
   24cd0:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   24cd4:	e9ca 2304 	strd	r2, r3, [sl, #16]
   24cd8:	e7e4      	b.n	24ca4 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   24cda:	1be0      	subs	r0, r4, r7
   24cdc:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   24ce0:	42b3      	cmp	r3, r6
   24ce2:	e9ca 0104 	strd	r0, r1, [sl, #16]
   24ce6:	d0e2      	beq.n	24cae <z_add_timeout+0xba>
   24ce8:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   24cea:	2b00      	cmp	r3, #0
   24cec:	d0df      	beq.n	24cae <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   24cee:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   24cf2:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   24cf6:	42bc      	cmp	r4, r7
   24cf8:	eb75 0108 	sbcs.w	r1, r5, r8
   24cfc:	daed      	bge.n	24cda <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   24cfe:	1b38      	subs	r0, r7, r4
   24d00:	eb68 0105 	sbc.w	r1, r8, r5
   24d04:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   24d08:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   24d0a:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   24d0e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   24d12:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   24d16:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24d18:	4293      	cmp	r3, r2
   24d1a:	d00b      	beq.n	24d34 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   24d1c:	459a      	cmp	sl, r3
   24d1e:	d109      	bne.n	24d34 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   24d20:	f7ff ff22 	bl	24b68 <next_timeout>

			if (next_time == 0 ||
   24d24:	b118      	cbz	r0, 24d2e <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   24d26:	4b1a      	ldr	r3, [pc, #104]	; (24d90 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   24d28:	691b      	ldr	r3, [r3, #16]
   24d2a:	4283      	cmp	r3, r0
   24d2c:	d002      	beq.n	24d34 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   24d2e:	2100      	movs	r1, #0
   24d30:	f7fa ff18 	bl	1fb64 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d34:	4810      	ldr	r0, [pc, #64]	; (24d78 <z_add_timeout+0x184>)
   24d36:	f7fd fb1f 	bl	22378 <z_spin_unlock_valid>
   24d3a:	b968      	cbnz	r0, 24d58 <z_add_timeout+0x164>
   24d3c:	4a0f      	ldr	r2, [pc, #60]	; (24d7c <z_add_timeout+0x188>)
   24d3e:	4915      	ldr	r1, [pc, #84]	; (24d94 <z_add_timeout+0x1a0>)
   24d40:	480b      	ldr	r0, [pc, #44]	; (24d70 <z_add_timeout+0x17c>)
   24d42:	23ac      	movs	r3, #172	; 0xac
   24d44:	f003 fd14 	bl	28770 <printk>
   24d48:	490b      	ldr	r1, [pc, #44]	; (24d78 <z_add_timeout+0x184>)
   24d4a:	4813      	ldr	r0, [pc, #76]	; (24d98 <z_add_timeout+0x1a4>)
   24d4c:	f003 fd10 	bl	28770 <printk>
   24d50:	480a      	ldr	r0, [pc, #40]	; (24d7c <z_add_timeout+0x188>)
   24d52:	21ac      	movs	r1, #172	; 0xac
   24d54:	f003 fefd 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24d58:	f38b 8811 	msr	BASEPRI, fp
   24d5c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   24d60:	b003      	add	sp, #12
   24d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d66:	bf00      	nop
   24d68:	000328a4 	.word	0x000328a4
   24d6c:	00032880 	.word	0x00032880
   24d70:	0002e915 	.word	0x0002e915
   24d74:	00031821 	.word	0x00031821
   24d78:	20002d4c 	.word	0x20002d4c
   24d7c:	0002ebfd 	.word	0x0002ebfd
   24d80:	0002ec4f 	.word	0x0002ec4f
   24d84:	0002ec64 	.word	0x0002ec64
   24d88:	20002318 	.word	0x20002318
   24d8c:	20000640 	.word	0x20000640
   24d90:	20002cfc 	.word	0x20002cfc
   24d94:	0002ec23 	.word	0x0002ec23
   24d98:	0002ec3a 	.word	0x0002ec3a

00024d9c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   24d9c:	b538      	push	{r3, r4, r5, lr}
   24d9e:	4604      	mov	r4, r0
	__asm__ volatile(
   24da0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24da4:	f3ef 8511 	mrs	r5, BASEPRI
   24da8:	f383 8812 	msr	BASEPRI_MAX, r3
   24dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24db0:	481a      	ldr	r0, [pc, #104]	; (24e1c <z_abort_timeout+0x80>)
   24db2:	f7fd fad3 	bl	2235c <z_spin_lock_valid>
   24db6:	b968      	cbnz	r0, 24dd4 <z_abort_timeout+0x38>
   24db8:	4a19      	ldr	r2, [pc, #100]	; (24e20 <z_abort_timeout+0x84>)
   24dba:	491a      	ldr	r1, [pc, #104]	; (24e24 <z_abort_timeout+0x88>)
   24dbc:	481a      	ldr	r0, [pc, #104]	; (24e28 <z_abort_timeout+0x8c>)
   24dbe:	2381      	movs	r3, #129	; 0x81
   24dc0:	f003 fcd6 	bl	28770 <printk>
   24dc4:	4915      	ldr	r1, [pc, #84]	; (24e1c <z_abort_timeout+0x80>)
   24dc6:	4819      	ldr	r0, [pc, #100]	; (24e2c <z_abort_timeout+0x90>)
   24dc8:	f003 fcd2 	bl	28770 <printk>
   24dcc:	4814      	ldr	r0, [pc, #80]	; (24e20 <z_abort_timeout+0x84>)
   24dce:	2181      	movs	r1, #129	; 0x81
   24dd0:	f003 febf 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   24dd4:	4811      	ldr	r0, [pc, #68]	; (24e1c <z_abort_timeout+0x80>)
   24dd6:	f7fd fadf 	bl	22398 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   24dda:	6823      	ldr	r3, [r4, #0]
   24ddc:	b1db      	cbz	r3, 24e16 <z_abort_timeout+0x7a>
			remove_timeout(to);
   24dde:	4620      	mov	r0, r4
   24de0:	f7ff feee 	bl	24bc0 <remove_timeout>
			ret = 0;
   24de4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24de6:	480d      	ldr	r0, [pc, #52]	; (24e1c <z_abort_timeout+0x80>)
   24de8:	f7fd fac6 	bl	22378 <z_spin_unlock_valid>
   24dec:	b968      	cbnz	r0, 24e0a <z_abort_timeout+0x6e>
   24dee:	4a0c      	ldr	r2, [pc, #48]	; (24e20 <z_abort_timeout+0x84>)
   24df0:	490f      	ldr	r1, [pc, #60]	; (24e30 <z_abort_timeout+0x94>)
   24df2:	480d      	ldr	r0, [pc, #52]	; (24e28 <z_abort_timeout+0x8c>)
   24df4:	23ac      	movs	r3, #172	; 0xac
   24df6:	f003 fcbb 	bl	28770 <printk>
   24dfa:	4908      	ldr	r1, [pc, #32]	; (24e1c <z_abort_timeout+0x80>)
   24dfc:	480d      	ldr	r0, [pc, #52]	; (24e34 <z_abort_timeout+0x98>)
   24dfe:	f003 fcb7 	bl	28770 <printk>
   24e02:	4807      	ldr	r0, [pc, #28]	; (24e20 <z_abort_timeout+0x84>)
   24e04:	21ac      	movs	r1, #172	; 0xac
   24e06:	f003 fea4 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24e0a:	f385 8811 	msr	BASEPRI, r5
   24e0e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   24e12:	4620      	mov	r0, r4
   24e14:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   24e16:	f06f 0415 	mvn.w	r4, #21
   24e1a:	e7e4      	b.n	24de6 <z_abort_timeout+0x4a>
   24e1c:	20002d4c 	.word	0x20002d4c
   24e20:	0002ebfd 	.word	0x0002ebfd
   24e24:	0002ec4f 	.word	0x0002ec4f
   24e28:	0002e915 	.word	0x0002e915
   24e2c:	0002ec64 	.word	0x0002ec64
   24e30:	0002ec23 	.word	0x0002ec23
   24e34:	0002ec3a 	.word	0x0002ec3a

00024e38 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   24e38:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24e3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e3e:	f3ef 8511 	mrs	r5, BASEPRI
   24e42:	f383 8812 	msr	BASEPRI_MAX, r3
   24e46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e4a:	4818      	ldr	r0, [pc, #96]	; (24eac <z_get_next_timeout_expiry+0x74>)
   24e4c:	f7fd fa86 	bl	2235c <z_spin_lock_valid>
   24e50:	b968      	cbnz	r0, 24e6e <z_get_next_timeout_expiry+0x36>
   24e52:	4a17      	ldr	r2, [pc, #92]	; (24eb0 <z_get_next_timeout_expiry+0x78>)
   24e54:	4917      	ldr	r1, [pc, #92]	; (24eb4 <z_get_next_timeout_expiry+0x7c>)
   24e56:	4818      	ldr	r0, [pc, #96]	; (24eb8 <z_get_next_timeout_expiry+0x80>)
   24e58:	2381      	movs	r3, #129	; 0x81
   24e5a:	f003 fc89 	bl	28770 <printk>
   24e5e:	4913      	ldr	r1, [pc, #76]	; (24eac <z_get_next_timeout_expiry+0x74>)
   24e60:	4816      	ldr	r0, [pc, #88]	; (24ebc <z_get_next_timeout_expiry+0x84>)
   24e62:	f003 fc85 	bl	28770 <printk>
   24e66:	4812      	ldr	r0, [pc, #72]	; (24eb0 <z_get_next_timeout_expiry+0x78>)
   24e68:	2181      	movs	r1, #129	; 0x81
   24e6a:	f003 fe72 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   24e6e:	480f      	ldr	r0, [pc, #60]	; (24eac <z_get_next_timeout_expiry+0x74>)
   24e70:	f7fd fa92 	bl	22398 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   24e74:	f7ff fe78 	bl	24b68 <next_timeout>
   24e78:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e7a:	480c      	ldr	r0, [pc, #48]	; (24eac <z_get_next_timeout_expiry+0x74>)
   24e7c:	f7fd fa7c 	bl	22378 <z_spin_unlock_valid>
   24e80:	b968      	cbnz	r0, 24e9e <z_get_next_timeout_expiry+0x66>
   24e82:	4a0b      	ldr	r2, [pc, #44]	; (24eb0 <z_get_next_timeout_expiry+0x78>)
   24e84:	490e      	ldr	r1, [pc, #56]	; (24ec0 <z_get_next_timeout_expiry+0x88>)
   24e86:	480c      	ldr	r0, [pc, #48]	; (24eb8 <z_get_next_timeout_expiry+0x80>)
   24e88:	23ac      	movs	r3, #172	; 0xac
   24e8a:	f003 fc71 	bl	28770 <printk>
   24e8e:	4907      	ldr	r1, [pc, #28]	; (24eac <z_get_next_timeout_expiry+0x74>)
   24e90:	480c      	ldr	r0, [pc, #48]	; (24ec4 <z_get_next_timeout_expiry+0x8c>)
   24e92:	f003 fc6d 	bl	28770 <printk>
   24e96:	4806      	ldr	r0, [pc, #24]	; (24eb0 <z_get_next_timeout_expiry+0x78>)
   24e98:	21ac      	movs	r1, #172	; 0xac
   24e9a:	f003 fe5a 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24e9e:	f385 8811 	msr	BASEPRI, r5
   24ea2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   24ea6:	4620      	mov	r0, r4
   24ea8:	bd38      	pop	{r3, r4, r5, pc}
   24eaa:	bf00      	nop
   24eac:	20002d4c 	.word	0x20002d4c
   24eb0:	0002ebfd 	.word	0x0002ebfd
   24eb4:	0002ec4f 	.word	0x0002ec4f
   24eb8:	0002e915 	.word	0x0002e915
   24ebc:	0002ec64 	.word	0x0002ec64
   24ec0:	0002ec23 	.word	0x0002ec23
   24ec4:	0002ec3a 	.word	0x0002ec3a

00024ec8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   24ec8:	b570      	push	{r4, r5, r6, lr}
   24eca:	4604      	mov	r4, r0
   24ecc:	460d      	mov	r5, r1
	__asm__ volatile(
   24ece:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ed2:	f3ef 8611 	mrs	r6, BASEPRI
   24ed6:	f383 8812 	msr	BASEPRI_MAX, r3
   24eda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ede:	481b      	ldr	r0, [pc, #108]	; (24f4c <z_set_timeout_expiry+0x84>)
   24ee0:	f7fd fa3c 	bl	2235c <z_spin_lock_valid>
   24ee4:	b968      	cbnz	r0, 24f02 <z_set_timeout_expiry+0x3a>
   24ee6:	4a1a      	ldr	r2, [pc, #104]	; (24f50 <z_set_timeout_expiry+0x88>)
   24ee8:	491a      	ldr	r1, [pc, #104]	; (24f54 <z_set_timeout_expiry+0x8c>)
   24eea:	481b      	ldr	r0, [pc, #108]	; (24f58 <z_set_timeout_expiry+0x90>)
   24eec:	2381      	movs	r3, #129	; 0x81
   24eee:	f003 fc3f 	bl	28770 <printk>
   24ef2:	4916      	ldr	r1, [pc, #88]	; (24f4c <z_set_timeout_expiry+0x84>)
   24ef4:	4819      	ldr	r0, [pc, #100]	; (24f5c <z_set_timeout_expiry+0x94>)
   24ef6:	f003 fc3b 	bl	28770 <printk>
   24efa:	4815      	ldr	r0, [pc, #84]	; (24f50 <z_set_timeout_expiry+0x88>)
   24efc:	2181      	movs	r1, #129	; 0x81
   24efe:	f003 fe28 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   24f02:	4812      	ldr	r0, [pc, #72]	; (24f4c <z_set_timeout_expiry+0x84>)
   24f04:	f7fd fa48 	bl	22398 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   24f08:	f7ff fe2e 	bl	24b68 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24f0c:	2801      	cmp	r0, #1
   24f0e:	dd05      	ble.n	24f1c <z_set_timeout_expiry+0x54>
   24f10:	42a0      	cmp	r0, r4
   24f12:	db03      	blt.n	24f1c <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24f14:	4629      	mov	r1, r5
   24f16:	4620      	mov	r0, r4
   24f18:	f7fa fe24 	bl	1fb64 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f1c:	480b      	ldr	r0, [pc, #44]	; (24f4c <z_set_timeout_expiry+0x84>)
   24f1e:	f7fd fa2b 	bl	22378 <z_spin_unlock_valid>
   24f22:	b968      	cbnz	r0, 24f40 <z_set_timeout_expiry+0x78>
   24f24:	4a0a      	ldr	r2, [pc, #40]	; (24f50 <z_set_timeout_expiry+0x88>)
   24f26:	490e      	ldr	r1, [pc, #56]	; (24f60 <z_set_timeout_expiry+0x98>)
   24f28:	480b      	ldr	r0, [pc, #44]	; (24f58 <z_set_timeout_expiry+0x90>)
   24f2a:	23ac      	movs	r3, #172	; 0xac
   24f2c:	f003 fc20 	bl	28770 <printk>
   24f30:	4906      	ldr	r1, [pc, #24]	; (24f4c <z_set_timeout_expiry+0x84>)
   24f32:	480c      	ldr	r0, [pc, #48]	; (24f64 <z_set_timeout_expiry+0x9c>)
   24f34:	f003 fc1c 	bl	28770 <printk>
   24f38:	4805      	ldr	r0, [pc, #20]	; (24f50 <z_set_timeout_expiry+0x88>)
   24f3a:	21ac      	movs	r1, #172	; 0xac
   24f3c:	f003 fe09 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   24f40:	f386 8811 	msr	BASEPRI, r6
   24f44:	f3bf 8f6f 	isb	sy
		}
	}
}
   24f48:	bd70      	pop	{r4, r5, r6, pc}
   24f4a:	bf00      	nop
   24f4c:	20002d4c 	.word	0x20002d4c
   24f50:	0002ebfd 	.word	0x0002ebfd
   24f54:	0002ec4f 	.word	0x0002ec4f
   24f58:	0002e915 	.word	0x0002e915
   24f5c:	0002ec64 	.word	0x0002ec64
   24f60:	0002ec23 	.word	0x0002ec23
   24f64:	0002ec3a 	.word	0x0002ec3a

00024f68 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   24f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f6c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24f6e:	f7fe fe43 	bl	23bf8 <z_time_slice>
	__asm__ volatile(
   24f72:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f76:	f3ef 8711 	mrs	r7, BASEPRI
   24f7a:	f383 8812 	msr	BASEPRI_MAX, r3
   24f7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24f82:	4855      	ldr	r0, [pc, #340]	; (250d8 <sys_clock_announce+0x170>)
   24f84:	f7fd f9ea 	bl	2235c <z_spin_lock_valid>
   24f88:	b968      	cbnz	r0, 24fa6 <sys_clock_announce+0x3e>
   24f8a:	4a54      	ldr	r2, [pc, #336]	; (250dc <sys_clock_announce+0x174>)
   24f8c:	4954      	ldr	r1, [pc, #336]	; (250e0 <sys_clock_announce+0x178>)
   24f8e:	4855      	ldr	r0, [pc, #340]	; (250e4 <sys_clock_announce+0x17c>)
   24f90:	2381      	movs	r3, #129	; 0x81
   24f92:	f003 fbed 	bl	28770 <printk>
   24f96:	4950      	ldr	r1, [pc, #320]	; (250d8 <sys_clock_announce+0x170>)
   24f98:	4853      	ldr	r0, [pc, #332]	; (250e8 <sys_clock_announce+0x180>)
   24f9a:	f003 fbe9 	bl	28770 <printk>
   24f9e:	484f      	ldr	r0, [pc, #316]	; (250dc <sys_clock_announce+0x174>)
   24fa0:	2181      	movs	r1, #129	; 0x81
   24fa2:	f003 fdd6 	bl	28b52 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   24fa6:	4d51      	ldr	r5, [pc, #324]	; (250ec <sys_clock_announce+0x184>)
   24fa8:	4e51      	ldr	r6, [pc, #324]	; (250f0 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   24faa:	484b      	ldr	r0, [pc, #300]	; (250d8 <sys_clock_announce+0x170>)
	return list->head == list;
   24fac:	f8df a14c 	ldr.w	sl, [pc, #332]	; 250fc <sys_clock_announce+0x194>
   24fb0:	f7fd f9f2 	bl	22398 <z_spin_lock_set_owner>
   24fb4:	46b3      	mov	fp, r6
   24fb6:	602c      	str	r4, [r5, #0]
   24fb8:	e9d6 2300 	ldrd	r2, r3, [r6]
   24fbc:	f8d5 c000 	ldr.w	ip, [r5]
   24fc0:	f8da 4000 	ldr.w	r4, [sl]
   24fc4:	e9cd 2300 	strd	r2, r3, [sp]
   24fc8:	4662      	mov	r2, ip
   24fca:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24fcc:	4554      	cmp	r4, sl
   24fce:	46e0      	mov	r8, ip
   24fd0:	4699      	mov	r9, r3
   24fd2:	d00c      	beq.n	24fee <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24fd4:	b15c      	cbz	r4, 24fee <sys_clock_announce+0x86>
   24fd6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   24fda:	458c      	cmp	ip, r1
   24fdc:	eb79 0302 	sbcs.w	r3, r9, r2
   24fe0:	da2e      	bge.n	25040 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24fe2:	ebb1 000c 	subs.w	r0, r1, ip
   24fe6:	eb62 0109 	sbc.w	r1, r2, r9
   24fea:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   24fee:	9a00      	ldr	r2, [sp, #0]
   24ff0:	9901      	ldr	r1, [sp, #4]
   24ff2:	eb18 0202 	adds.w	r2, r8, r2
   24ff6:	464b      	mov	r3, r9
   24ff8:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   24ffc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   24ffe:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   25002:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   25004:	f7ff fdb0 	bl	24b68 <next_timeout>
   25008:	4621      	mov	r1, r4
   2500a:	f7fa fdab 	bl	1fb64 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2500e:	4832      	ldr	r0, [pc, #200]	; (250d8 <sys_clock_announce+0x170>)
   25010:	f7fd f9b2 	bl	22378 <z_spin_unlock_valid>
   25014:	b968      	cbnz	r0, 25032 <sys_clock_announce+0xca>
   25016:	4a31      	ldr	r2, [pc, #196]	; (250dc <sys_clock_announce+0x174>)
   25018:	4936      	ldr	r1, [pc, #216]	; (250f4 <sys_clock_announce+0x18c>)
   2501a:	4832      	ldr	r0, [pc, #200]	; (250e4 <sys_clock_announce+0x17c>)
   2501c:	23ac      	movs	r3, #172	; 0xac
   2501e:	f003 fba7 	bl	28770 <printk>
   25022:	492d      	ldr	r1, [pc, #180]	; (250d8 <sys_clock_announce+0x170>)
   25024:	4834      	ldr	r0, [pc, #208]	; (250f8 <sys_clock_announce+0x190>)
   25026:	f003 fba3 	bl	28770 <printk>
   2502a:	482c      	ldr	r0, [pc, #176]	; (250dc <sys_clock_announce+0x174>)
   2502c:	21ac      	movs	r1, #172	; 0xac
   2502e:	f003 fd90 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   25032:	f387 8811 	msr	BASEPRI, r7
   25036:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2503a:	b003      	add	sp, #12
   2503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   25040:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   25044:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   25048:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   2504c:	f04f 0200 	mov.w	r2, #0
   25050:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   25054:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   25058:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   2505a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   2505e:	4620      	mov	r0, r4
		curr_tick += dt;
   25060:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   25064:	f7ff fdac 	bl	24bc0 <remove_timeout>
   25068:	481b      	ldr	r0, [pc, #108]	; (250d8 <sys_clock_announce+0x170>)
   2506a:	f7fd f985 	bl	22378 <z_spin_unlock_valid>
   2506e:	b968      	cbnz	r0, 2508c <sys_clock_announce+0x124>
   25070:	4a1a      	ldr	r2, [pc, #104]	; (250dc <sys_clock_announce+0x174>)
   25072:	4920      	ldr	r1, [pc, #128]	; (250f4 <sys_clock_announce+0x18c>)
   25074:	481b      	ldr	r0, [pc, #108]	; (250e4 <sys_clock_announce+0x17c>)
   25076:	23ac      	movs	r3, #172	; 0xac
   25078:	f003 fb7a 	bl	28770 <printk>
   2507c:	4916      	ldr	r1, [pc, #88]	; (250d8 <sys_clock_announce+0x170>)
   2507e:	481e      	ldr	r0, [pc, #120]	; (250f8 <sys_clock_announce+0x190>)
   25080:	f003 fb76 	bl	28770 <printk>
   25084:	4815      	ldr	r0, [pc, #84]	; (250dc <sys_clock_announce+0x174>)
   25086:	21ac      	movs	r1, #172	; 0xac
   25088:	f003 fd63 	bl	28b52 <assert_post_action>
   2508c:	f387 8811 	msr	BASEPRI, r7
   25090:	f3bf 8f6f 	isb	sy
		t->fn(t);
   25094:	68a3      	ldr	r3, [r4, #8]
   25096:	4620      	mov	r0, r4
   25098:	4798      	blx	r3
	__asm__ volatile(
   2509a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2509e:	f3ef 8711 	mrs	r7, BASEPRI
   250a2:	f383 8812 	msr	BASEPRI_MAX, r3
   250a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   250aa:	480b      	ldr	r0, [pc, #44]	; (250d8 <sys_clock_announce+0x170>)
   250ac:	f7fd f956 	bl	2235c <z_spin_lock_valid>
   250b0:	b968      	cbnz	r0, 250ce <sys_clock_announce+0x166>
   250b2:	4a0a      	ldr	r2, [pc, #40]	; (250dc <sys_clock_announce+0x174>)
   250b4:	490a      	ldr	r1, [pc, #40]	; (250e0 <sys_clock_announce+0x178>)
   250b6:	480b      	ldr	r0, [pc, #44]	; (250e4 <sys_clock_announce+0x17c>)
   250b8:	2381      	movs	r3, #129	; 0x81
   250ba:	f003 fb59 	bl	28770 <printk>
   250be:	4906      	ldr	r1, [pc, #24]	; (250d8 <sys_clock_announce+0x170>)
   250c0:	4809      	ldr	r0, [pc, #36]	; (250e8 <sys_clock_announce+0x180>)
   250c2:	f003 fb55 	bl	28770 <printk>
   250c6:	4805      	ldr	r0, [pc, #20]	; (250dc <sys_clock_announce+0x174>)
   250c8:	2181      	movs	r1, #129	; 0x81
   250ca:	f003 fd42 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   250ce:	4802      	ldr	r0, [pc, #8]	; (250d8 <sys_clock_announce+0x170>)
   250d0:	f7fd f962 	bl	22398 <z_spin_lock_set_owner>
	return k;
   250d4:	e770      	b.n	24fb8 <sys_clock_announce+0x50>
   250d6:	bf00      	nop
   250d8:	20002d4c 	.word	0x20002d4c
   250dc:	0002ebfd 	.word	0x0002ebfd
   250e0:	0002ec4f 	.word	0x0002ec4f
   250e4:	0002e915 	.word	0x0002e915
   250e8:	0002ec64 	.word	0x0002ec64
   250ec:	20002d48 	.word	0x20002d48
   250f0:	20002318 	.word	0x20002318
   250f4:	0002ec23 	.word	0x0002ec23
   250f8:	0002ec3a 	.word	0x0002ec3a
   250fc:	20000640 	.word	0x20000640

00025100 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   25100:	b570      	push	{r4, r5, r6, lr}
   25102:	f04f 0340 	mov.w	r3, #64	; 0x40
   25106:	f3ef 8611 	mrs	r6, BASEPRI
   2510a:	f383 8812 	msr	BASEPRI_MAX, r3
   2510e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25112:	481b      	ldr	r0, [pc, #108]	; (25180 <sys_clock_tick_get+0x80>)
   25114:	f7fd f922 	bl	2235c <z_spin_lock_valid>
   25118:	b968      	cbnz	r0, 25136 <sys_clock_tick_get+0x36>
   2511a:	4a1a      	ldr	r2, [pc, #104]	; (25184 <sys_clock_tick_get+0x84>)
   2511c:	491a      	ldr	r1, [pc, #104]	; (25188 <sys_clock_tick_get+0x88>)
   2511e:	481b      	ldr	r0, [pc, #108]	; (2518c <sys_clock_tick_get+0x8c>)
   25120:	2381      	movs	r3, #129	; 0x81
   25122:	f003 fb25 	bl	28770 <printk>
   25126:	4916      	ldr	r1, [pc, #88]	; (25180 <sys_clock_tick_get+0x80>)
   25128:	4819      	ldr	r0, [pc, #100]	; (25190 <sys_clock_tick_get+0x90>)
   2512a:	f003 fb21 	bl	28770 <printk>
   2512e:	4815      	ldr	r0, [pc, #84]	; (25184 <sys_clock_tick_get+0x84>)
   25130:	2181      	movs	r1, #129	; 0x81
   25132:	f003 fd0e 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   25136:	4812      	ldr	r0, [pc, #72]	; (25180 <sys_clock_tick_get+0x80>)
   25138:	f7fd f92e 	bl	22398 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   2513c:	f7fa fd42 	bl	1fbc4 <sys_clock_elapsed>
   25140:	4b14      	ldr	r3, [pc, #80]	; (25194 <sys_clock_tick_get+0x94>)
   25142:	e9d3 4500 	ldrd	r4, r5, [r3]
   25146:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25148:	480d      	ldr	r0, [pc, #52]	; (25180 <sys_clock_tick_get+0x80>)
   2514a:	f145 0500 	adc.w	r5, r5, #0
   2514e:	f7fd f913 	bl	22378 <z_spin_unlock_valid>
   25152:	b968      	cbnz	r0, 25170 <sys_clock_tick_get+0x70>
   25154:	4a0b      	ldr	r2, [pc, #44]	; (25184 <sys_clock_tick_get+0x84>)
   25156:	4910      	ldr	r1, [pc, #64]	; (25198 <sys_clock_tick_get+0x98>)
   25158:	480c      	ldr	r0, [pc, #48]	; (2518c <sys_clock_tick_get+0x8c>)
   2515a:	23ac      	movs	r3, #172	; 0xac
   2515c:	f003 fb08 	bl	28770 <printk>
   25160:	4907      	ldr	r1, [pc, #28]	; (25180 <sys_clock_tick_get+0x80>)
   25162:	480e      	ldr	r0, [pc, #56]	; (2519c <sys_clock_tick_get+0x9c>)
   25164:	f003 fb04 	bl	28770 <printk>
   25168:	4806      	ldr	r0, [pc, #24]	; (25184 <sys_clock_tick_get+0x84>)
   2516a:	21ac      	movs	r1, #172	; 0xac
   2516c:	f003 fcf1 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   25170:	f386 8811 	msr	BASEPRI, r6
   25174:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25178:	4620      	mov	r0, r4
   2517a:	4629      	mov	r1, r5
   2517c:	bd70      	pop	{r4, r5, r6, pc}
   2517e:	bf00      	nop
   25180:	20002d4c 	.word	0x20002d4c
   25184:	0002ebfd 	.word	0x0002ebfd
   25188:	0002ec4f 	.word	0x0002ec4f
   2518c:	0002e915 	.word	0x0002e915
   25190:	0002ec64 	.word	0x0002ec64
   25194:	20002318 	.word	0x20002318
   25198:	0002ec23 	.word	0x0002ec23
   2519c:	0002ec3a 	.word	0x0002ec3a

000251a0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   251a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251a2:	4604      	mov	r4, r0
	__asm__ volatile(
   251a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   251a8:	f3ef 8511 	mrs	r5, BASEPRI
   251ac:	f383 8812 	msr	BASEPRI_MAX, r3
   251b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251b4:	484c      	ldr	r0, [pc, #304]	; (252e8 <z_timer_expiration_handler+0x148>)
   251b6:	f7fd f8d1 	bl	2235c <z_spin_lock_valid>
   251ba:	b968      	cbnz	r0, 251d8 <z_timer_expiration_handler+0x38>
   251bc:	4a4b      	ldr	r2, [pc, #300]	; (252ec <z_timer_expiration_handler+0x14c>)
   251be:	494c      	ldr	r1, [pc, #304]	; (252f0 <z_timer_expiration_handler+0x150>)
   251c0:	484c      	ldr	r0, [pc, #304]	; (252f4 <z_timer_expiration_handler+0x154>)
   251c2:	2381      	movs	r3, #129	; 0x81
   251c4:	f003 fad4 	bl	28770 <printk>
   251c8:	4947      	ldr	r1, [pc, #284]	; (252e8 <z_timer_expiration_handler+0x148>)
   251ca:	484b      	ldr	r0, [pc, #300]	; (252f8 <z_timer_expiration_handler+0x158>)
   251cc:	f003 fad0 	bl	28770 <printk>
   251d0:	4846      	ldr	r0, [pc, #280]	; (252ec <z_timer_expiration_handler+0x14c>)
   251d2:	2181      	movs	r1, #129	; 0x81
   251d4:	f003 fcbd 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   251d8:	4843      	ldr	r0, [pc, #268]	; (252e8 <z_timer_expiration_handler+0x148>)
   251da:	f7fd f8dd 	bl	22398 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   251de:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   251e2:	1c56      	adds	r6, r2, #1
   251e4:	f143 0700 	adc.w	r7, r3, #0
   251e8:	2f00      	cmp	r7, #0
   251ea:	bf08      	it	eq
   251ec:	2e02      	cmpeq	r6, #2
   251ee:	d303      	bcc.n	251f8 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   251f0:	4942      	ldr	r1, [pc, #264]	; (252fc <z_timer_expiration_handler+0x15c>)
   251f2:	4620      	mov	r0, r4
   251f4:	f7ff fcfe 	bl	24bf4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   251f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   251fa:	3301      	adds	r3, #1
   251fc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   251fe:	6a23      	ldr	r3, [r4, #32]
   25200:	2b00      	cmp	r3, #0
   25202:	d035      	beq.n	25270 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25204:	4838      	ldr	r0, [pc, #224]	; (252e8 <z_timer_expiration_handler+0x148>)
   25206:	f7fd f8b7 	bl	22378 <z_spin_unlock_valid>
   2520a:	b968      	cbnz	r0, 25228 <z_timer_expiration_handler+0x88>
   2520c:	4a37      	ldr	r2, [pc, #220]	; (252ec <z_timer_expiration_handler+0x14c>)
   2520e:	493c      	ldr	r1, [pc, #240]	; (25300 <z_timer_expiration_handler+0x160>)
   25210:	4838      	ldr	r0, [pc, #224]	; (252f4 <z_timer_expiration_handler+0x154>)
   25212:	23ac      	movs	r3, #172	; 0xac
   25214:	f003 faac 	bl	28770 <printk>
   25218:	4933      	ldr	r1, [pc, #204]	; (252e8 <z_timer_expiration_handler+0x148>)
   2521a:	483a      	ldr	r0, [pc, #232]	; (25304 <z_timer_expiration_handler+0x164>)
   2521c:	f003 faa8 	bl	28770 <printk>
   25220:	4832      	ldr	r0, [pc, #200]	; (252ec <z_timer_expiration_handler+0x14c>)
   25222:	21ac      	movs	r1, #172	; 0xac
   25224:	f003 fc95 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   25228:	f385 8811 	msr	BASEPRI, r5
   2522c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   25230:	6a23      	ldr	r3, [r4, #32]
   25232:	4620      	mov	r0, r4
   25234:	4798      	blx	r3
	__asm__ volatile(
   25236:	f04f 0340 	mov.w	r3, #64	; 0x40
   2523a:	f3ef 8511 	mrs	r5, BASEPRI
   2523e:	f383 8812 	msr	BASEPRI_MAX, r3
   25242:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25246:	4828      	ldr	r0, [pc, #160]	; (252e8 <z_timer_expiration_handler+0x148>)
   25248:	f7fd f888 	bl	2235c <z_spin_lock_valid>
   2524c:	b968      	cbnz	r0, 2526a <z_timer_expiration_handler+0xca>
   2524e:	4a27      	ldr	r2, [pc, #156]	; (252ec <z_timer_expiration_handler+0x14c>)
   25250:	4927      	ldr	r1, [pc, #156]	; (252f0 <z_timer_expiration_handler+0x150>)
   25252:	4828      	ldr	r0, [pc, #160]	; (252f4 <z_timer_expiration_handler+0x154>)
   25254:	2381      	movs	r3, #129	; 0x81
   25256:	f003 fa8b 	bl	28770 <printk>
   2525a:	4923      	ldr	r1, [pc, #140]	; (252e8 <z_timer_expiration_handler+0x148>)
   2525c:	4826      	ldr	r0, [pc, #152]	; (252f8 <z_timer_expiration_handler+0x158>)
   2525e:	f003 fa87 	bl	28770 <printk>
   25262:	4822      	ldr	r0, [pc, #136]	; (252ec <z_timer_expiration_handler+0x14c>)
   25264:	2181      	movs	r1, #129	; 0x81
   25266:	f003 fc74 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   2526a:	481f      	ldr	r0, [pc, #124]	; (252e8 <z_timer_expiration_handler+0x148>)
   2526c:	f7fd f894 	bl	22398 <z_spin_lock_set_owner>
	return list->head == list;
   25270:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25274:	42a6      	cmp	r6, r4
   25276:	d000      	beq.n	2527a <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   25278:	b9b6      	cbnz	r6, 252a8 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2527a:	481b      	ldr	r0, [pc, #108]	; (252e8 <z_timer_expiration_handler+0x148>)
   2527c:	f7fd f87c 	bl	22378 <z_spin_unlock_valid>
   25280:	b968      	cbnz	r0, 2529e <z_timer_expiration_handler+0xfe>
   25282:	4a1a      	ldr	r2, [pc, #104]	; (252ec <z_timer_expiration_handler+0x14c>)
   25284:	491e      	ldr	r1, [pc, #120]	; (25300 <z_timer_expiration_handler+0x160>)
   25286:	481b      	ldr	r0, [pc, #108]	; (252f4 <z_timer_expiration_handler+0x154>)
   25288:	23ac      	movs	r3, #172	; 0xac
   2528a:	f003 fa71 	bl	28770 <printk>
   2528e:	4916      	ldr	r1, [pc, #88]	; (252e8 <z_timer_expiration_handler+0x148>)
   25290:	481c      	ldr	r0, [pc, #112]	; (25304 <z_timer_expiration_handler+0x164>)
   25292:	f003 fa6d 	bl	28770 <printk>
   25296:	4815      	ldr	r0, [pc, #84]	; (252ec <z_timer_expiration_handler+0x14c>)
   25298:	21ac      	movs	r1, #172	; 0xac
   2529a:	f003 fc5a 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2529e:	f385 8811 	msr	BASEPRI, r5
   252a2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   252a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   252a8:	4630      	mov	r0, r6
   252aa:	f7fe fa87 	bl	237bc <z_unpend_thread_no_timeout>
   252ae:	2300      	movs	r3, #0
   252b0:	480d      	ldr	r0, [pc, #52]	; (252e8 <z_timer_expiration_handler+0x148>)
   252b2:	67f3      	str	r3, [r6, #124]	; 0x7c
   252b4:	f7fd f860 	bl	22378 <z_spin_unlock_valid>
   252b8:	b968      	cbnz	r0, 252d6 <z_timer_expiration_handler+0x136>
   252ba:	4a0c      	ldr	r2, [pc, #48]	; (252ec <z_timer_expiration_handler+0x14c>)
   252bc:	4910      	ldr	r1, [pc, #64]	; (25300 <z_timer_expiration_handler+0x160>)
   252be:	480d      	ldr	r0, [pc, #52]	; (252f4 <z_timer_expiration_handler+0x154>)
   252c0:	23ac      	movs	r3, #172	; 0xac
   252c2:	f003 fa55 	bl	28770 <printk>
   252c6:	4908      	ldr	r1, [pc, #32]	; (252e8 <z_timer_expiration_handler+0x148>)
   252c8:	480e      	ldr	r0, [pc, #56]	; (25304 <z_timer_expiration_handler+0x164>)
   252ca:	f003 fa51 	bl	28770 <printk>
   252ce:	4807      	ldr	r0, [pc, #28]	; (252ec <z_timer_expiration_handler+0x14c>)
   252d0:	21ac      	movs	r1, #172	; 0xac
   252d2:	f003 fc3e 	bl	28b52 <assert_post_action>
   252d6:	f385 8811 	msr	BASEPRI, r5
   252da:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   252de:	4630      	mov	r0, r6
}
   252e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   252e4:	f7fe bd52 	b.w	23d8c <z_ready_thread>
   252e8:	20002d50 	.word	0x20002d50
   252ec:	0002ebfd 	.word	0x0002ebfd
   252f0:	0002ec4f 	.word	0x0002ec4f
   252f4:	0002e915 	.word	0x0002e915
   252f8:	0002ec64 	.word	0x0002ec64
   252fc:	000251a1 	.word	0x000251a1
   25300:	0002ec23 	.word	0x0002ec23
   25304:	0002ec3a 	.word	0x0002ec3a

00025308 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   25308:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   2530c:	4619      	mov	r1, r3
   2530e:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   25310:	1c4c      	adds	r4, r1, #1
{
   25312:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   25314:	bf08      	it	eq
   25316:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2531a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   2531e:	4680      	mov	r8, r0
   25320:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   25322:	d04c      	beq.n	253be <z_impl_k_timer_start+0xb6>
   25324:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   25326:	1c6b      	adds	r3, r5, #1
   25328:	bf08      	it	eq
   2532a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2532e:	4614      	mov	r4, r2
   25330:	d019      	beq.n	25366 <z_impl_k_timer_start+0x5e>
   25332:	ea54 0305 	orrs.w	r3, r4, r5
   25336:	d016      	beq.n	25366 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   25338:	f06f 0301 	mvn.w	r3, #1
   2533c:	ebb3 0a02 	subs.w	sl, r3, r2
   25340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25344:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   25348:	f1ba 0f00 	cmp.w	sl, #0
   2534c:	f17b 0300 	sbcs.w	r3, fp, #0
   25350:	da09      	bge.n	25366 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   25352:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   25356:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   2535a:	2c01      	cmp	r4, #1
   2535c:	f175 0300 	sbcs.w	r3, r5, #0
   25360:	bfbc      	itt	lt
   25362:	2401      	movlt	r4, #1
   25364:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25366:	f06f 0301 	mvn.w	r3, #1
   2536a:	1a1b      	subs	r3, r3, r0
   2536c:	9300      	str	r3, [sp, #0]
   2536e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25372:	eb63 0301 	sbc.w	r3, r3, r1
   25376:	9301      	str	r3, [sp, #4]
   25378:	e9dd 2300 	ldrd	r2, r3, [sp]
   2537c:	2a00      	cmp	r2, #0
   2537e:	f173 0300 	sbcs.w	r3, r3, #0
   25382:	da0c      	bge.n	2539e <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   25384:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   25388:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   2538c:	f1b8 0f00 	cmp.w	r8, #0
   25390:	f179 0300 	sbcs.w	r3, r9, #0
   25394:	bfbc      	itt	lt
   25396:	f04f 0800 	movlt.w	r8, #0
   2539a:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   2539e:	4630      	mov	r0, r6
   253a0:	f7ff fcfc 	bl	24d9c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   253a4:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   253a6:	4907      	ldr	r1, [pc, #28]	; (253c4 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   253a8:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   253aa:	4642      	mov	r2, r8
   253ac:	464b      	mov	r3, r9
   253ae:	4630      	mov	r0, r6
	timer->period = period;
   253b0:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   253b4:	b002      	add	sp, #8
   253b6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   253ba:	f7ff bc1b 	b.w	24bf4 <z_add_timeout>
}
   253be:	b002      	add	sp, #8
   253c0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   253c4:	000251a1 	.word	0x000251a1

000253c8 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   253c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   253cc:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   253ce:	4d53      	ldr	r5, [pc, #332]	; (2551c <clear_event_registrations+0x154>)
   253d0:	f8df 918c 	ldr.w	r9, [pc, #396]	; 25560 <clear_event_registrations+0x198>
   253d4:	4e52      	ldr	r6, [pc, #328]	; (25520 <clear_event_registrations+0x158>)
{
   253d6:	4680      	mov	r8, r0
   253d8:	4617      	mov	r7, r2
	while (num_events--) {
   253da:	fb04 0401 	mla	r4, r4, r1, r0
   253de:	45a0      	cmp	r8, r4
   253e0:	d101      	bne.n	253e6 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   253e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   253e6:	2300      	movs	r3, #0
   253e8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   253ec:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   253f0:	f003 031f 	and.w	r3, r3, #31
   253f4:	2b08      	cmp	r3, #8
   253f6:	d84f      	bhi.n	25498 <clear_event_registrations+0xd0>
   253f8:	e8df f003 	tbb	[pc, r3]
   253fc:	4e05305b 	.word	0x4e05305b
   25400:	4e4e4e21 	.word	0x4e4e4e21
   25404:	3f          	.byte	0x3f
   25405:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25406:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2540a:	b963      	cbnz	r3, 25426 <clear_event_registrations+0x5e>
   2540c:	4945      	ldr	r1, [pc, #276]	; (25524 <clear_event_registrations+0x15c>)
   2540e:	23a9      	movs	r3, #169	; 0xa9
   25410:	462a      	mov	r2, r5
   25412:	4630      	mov	r0, r6
   25414:	f003 f9ac 	bl	28770 <printk>
   25418:	4843      	ldr	r0, [pc, #268]	; (25528 <clear_event_registrations+0x160>)
   2541a:	f003 f9a9 	bl	28770 <printk>
   2541e:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   25420:	4628      	mov	r0, r5
   25422:	f003 fb96 	bl	28b52 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   25426:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2542a:	2b00      	cmp	r3, #0
   2542c:	d041      	beq.n	254b2 <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   2542e:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   25432:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25434:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25436:	2300      	movs	r3, #0
	node->prev = NULL;
   25438:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   2543c:	e039      	b.n	254b2 <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2543e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25442:	2b00      	cmp	r3, #0
   25444:	d1ef      	bne.n	25426 <clear_event_registrations+0x5e>
   25446:	4939      	ldr	r1, [pc, #228]	; (2552c <clear_event_registrations+0x164>)
   25448:	23ad      	movs	r3, #173	; 0xad
   2544a:	462a      	mov	r2, r5
   2544c:	4630      	mov	r0, r6
   2544e:	f003 f98f 	bl	28770 <printk>
   25452:	4837      	ldr	r0, [pc, #220]	; (25530 <clear_event_registrations+0x168>)
   25454:	f003 f98c 	bl	28770 <printk>
   25458:	21ad      	movs	r1, #173	; 0xad
   2545a:	e7e1      	b.n	25420 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2545c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25460:	2b00      	cmp	r3, #0
   25462:	d1e0      	bne.n	25426 <clear_event_registrations+0x5e>
   25464:	4933      	ldr	r1, [pc, #204]	; (25534 <clear_event_registrations+0x16c>)
   25466:	23b1      	movs	r3, #177	; 0xb1
   25468:	462a      	mov	r2, r5
   2546a:	4630      	mov	r0, r6
   2546c:	f003 f980 	bl	28770 <printk>
   25470:	4831      	ldr	r0, [pc, #196]	; (25538 <clear_event_registrations+0x170>)
   25472:	f003 f97d 	bl	28770 <printk>
   25476:	21b1      	movs	r1, #177	; 0xb1
   25478:	e7d2      	b.n	25420 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2547a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2547e:	2b00      	cmp	r3, #0
   25480:	d1d1      	bne.n	25426 <clear_event_registrations+0x5e>
   25482:	492e      	ldr	r1, [pc, #184]	; (2553c <clear_event_registrations+0x174>)
   25484:	23b5      	movs	r3, #181	; 0xb5
   25486:	462a      	mov	r2, r5
   25488:	4630      	mov	r0, r6
   2548a:	f003 f971 	bl	28770 <printk>
   2548e:	482c      	ldr	r0, [pc, #176]	; (25540 <clear_event_registrations+0x178>)
   25490:	f003 f96e 	bl	28770 <printk>
   25494:	21b5      	movs	r1, #181	; 0xb5
   25496:	e7c3      	b.n	25420 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   25498:	4649      	mov	r1, r9
   2549a:	23bc      	movs	r3, #188	; 0xbc
   2549c:	462a      	mov	r2, r5
   2549e:	4630      	mov	r0, r6
   254a0:	f003 f966 	bl	28770 <printk>
   254a4:	4827      	ldr	r0, [pc, #156]	; (25544 <clear_event_registrations+0x17c>)
   254a6:	f003 f963 	bl	28770 <printk>
   254aa:	21bc      	movs	r1, #188	; 0xbc
   254ac:	4628      	mov	r0, r5
   254ae:	f003 fb50 	bl	28b52 <assert_post_action>
   254b2:	4825      	ldr	r0, [pc, #148]	; (25548 <clear_event_registrations+0x180>)
   254b4:	f7fc ff60 	bl	22378 <z_spin_unlock_valid>
   254b8:	b968      	cbnz	r0, 254d6 <clear_event_registrations+0x10e>
   254ba:	4a24      	ldr	r2, [pc, #144]	; (2554c <clear_event_registrations+0x184>)
   254bc:	4924      	ldr	r1, [pc, #144]	; (25550 <clear_event_registrations+0x188>)
   254be:	23ac      	movs	r3, #172	; 0xac
   254c0:	4630      	mov	r0, r6
   254c2:	f003 f955 	bl	28770 <printk>
   254c6:	4920      	ldr	r1, [pc, #128]	; (25548 <clear_event_registrations+0x180>)
   254c8:	4822      	ldr	r0, [pc, #136]	; (25554 <clear_event_registrations+0x18c>)
   254ca:	f003 f951 	bl	28770 <printk>
   254ce:	481f      	ldr	r0, [pc, #124]	; (2554c <clear_event_registrations+0x184>)
   254d0:	21ac      	movs	r1, #172	; 0xac
   254d2:	f003 fb3e 	bl	28b52 <assert_post_action>
   254d6:	f387 8811 	msr	BASEPRI, r7
   254da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   254de:	f04f 0340 	mov.w	r3, #64	; 0x40
   254e2:	f3ef 8711 	mrs	r7, BASEPRI
   254e6:	f383 8812 	msr	BASEPRI_MAX, r3
   254ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254ee:	4816      	ldr	r0, [pc, #88]	; (25548 <clear_event_registrations+0x180>)
   254f0:	f7fc ff34 	bl	2235c <z_spin_lock_valid>
   254f4:	b968      	cbnz	r0, 25512 <clear_event_registrations+0x14a>
   254f6:	4a15      	ldr	r2, [pc, #84]	; (2554c <clear_event_registrations+0x184>)
   254f8:	4917      	ldr	r1, [pc, #92]	; (25558 <clear_event_registrations+0x190>)
   254fa:	2381      	movs	r3, #129	; 0x81
   254fc:	4630      	mov	r0, r6
   254fe:	f003 f937 	bl	28770 <printk>
   25502:	4911      	ldr	r1, [pc, #68]	; (25548 <clear_event_registrations+0x180>)
   25504:	4815      	ldr	r0, [pc, #84]	; (2555c <clear_event_registrations+0x194>)
   25506:	f003 f933 	bl	28770 <printk>
   2550a:	4810      	ldr	r0, [pc, #64]	; (2554c <clear_event_registrations+0x184>)
   2550c:	2181      	movs	r1, #129	; 0x81
   2550e:	f003 fb20 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   25512:	480d      	ldr	r0, [pc, #52]	; (25548 <clear_event_registrations+0x180>)
   25514:	f7fc ff40 	bl	22398 <z_spin_lock_set_owner>
	return k;
   25518:	3c14      	subs	r4, #20
   2551a:	e760      	b.n	253de <clear_event_registrations+0x16>
   2551c:	000328c4 	.word	0x000328c4
   25520:	0002e915 	.word	0x0002e915
   25524:	000328e5 	.word	0x000328e5
   25528:	000328ff 	.word	0x000328ff
   2552c:	00032914 	.word	0x00032914
   25530:	00032930 	.word	0x00032930
   25534:	00032941 	.word	0x00032941
   25538:	0003295e 	.word	0x0003295e
   2553c:	00032975 	.word	0x00032975
   25540:	00032990 	.word	0x00032990
   25544:	000329a9 	.word	0x000329a9
   25548:	20002d54 	.word	0x20002d54
   2554c:	0002ebfd 	.word	0x0002ebfd
   25550:	0002ec23 	.word	0x0002ec23
   25554:	0002ec3a 	.word	0x0002ec3a
   25558:	0002ec4f 	.word	0x0002ec4f
   2555c:	0002ec64 	.word	0x0002ec64
   25560:	00032bb3 	.word	0x00032bb3

00025564 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   25564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   25568:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2556a:	4e7c      	ldr	r6, [pc, #496]	; (2575c <register_events+0x1f8>)
   2556c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 257a0 <register_events+0x23c>
   25570:	f8df a230 	ldr.w	sl, [pc, #560]	; 257a4 <register_events+0x240>
{
   25574:	9100      	str	r1, [sp, #0]
   25576:	4615      	mov	r5, r2
   25578:	9301      	str	r3, [sp, #4]
   2557a:	4604      	mov	r4, r0
	int events_registered = 0;
   2557c:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   2557e:	9b00      	ldr	r3, [sp, #0]
   25580:	429f      	cmp	r7, r3
   25582:	db03      	blt.n	2558c <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   25584:	4648      	mov	r0, r9
   25586:	b003      	add	sp, #12
   25588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2558c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25590:	f3ef 8b11 	mrs	fp, BASEPRI
   25594:	f383 8812 	msr	BASEPRI_MAX, r3
   25598:	f3bf 8f6f 	isb	sy
   2559c:	4630      	mov	r0, r6
   2559e:	f7fc fedd 	bl	2235c <z_spin_lock_valid>
   255a2:	b968      	cbnz	r0, 255c0 <register_events+0x5c>
   255a4:	486e      	ldr	r0, [pc, #440]	; (25760 <register_events+0x1fc>)
   255a6:	2381      	movs	r3, #129	; 0x81
   255a8:	4642      	mov	r2, r8
   255aa:	4651      	mov	r1, sl
   255ac:	f003 f8e0 	bl	28770 <printk>
   255b0:	486c      	ldr	r0, [pc, #432]	; (25764 <register_events+0x200>)
   255b2:	4631      	mov	r1, r6
   255b4:	f003 f8dc 	bl	28770 <printk>
   255b8:	2181      	movs	r1, #129	; 0x81
   255ba:	4640      	mov	r0, r8
   255bc:	f003 fac9 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   255c0:	4630      	mov	r0, r6
   255c2:	f7fc fee9 	bl	22398 <z_spin_lock_set_owner>
	switch (event->type) {
   255c6:	7b63      	ldrb	r3, [r4, #13]
   255c8:	f003 031f 	and.w	r3, r3, #31
   255cc:	2b08      	cmp	r3, #8
   255ce:	d84f      	bhi.n	25670 <register_events+0x10c>
   255d0:	e8df f003 	tbb	[pc, r3]
   255d4:	4e054230 	.word	0x4e054230
   255d8:	4e4e4e2c 	.word	0x4e4e4e2c
   255dc:	48          	.byte	0x48
   255dd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   255de:	6923      	ldr	r3, [r4, #16]
   255e0:	689b      	ldr	r3, [r3, #8]
   255e2:	b33b      	cbz	r3, 25634 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   255e4:	2302      	movs	r3, #2
	event->state |= state;
   255e6:	68e2      	ldr	r2, [r4, #12]
   255e8:	f3c2 3045 	ubfx	r0, r2, #13, #6
   255ec:	4303      	orrs	r3, r0
	event->poller = NULL;
   255ee:	2100      	movs	r1, #0
	event->state |= state;
   255f0:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   255f4:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   255f6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   255f8:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   255fa:	4630      	mov	r0, r6
   255fc:	f7fc febc 	bl	22378 <z_spin_unlock_valid>
   25600:	b968      	cbnz	r0, 2561e <register_events+0xba>
   25602:	4959      	ldr	r1, [pc, #356]	; (25768 <register_events+0x204>)
   25604:	4856      	ldr	r0, [pc, #344]	; (25760 <register_events+0x1fc>)
   25606:	23ac      	movs	r3, #172	; 0xac
   25608:	4642      	mov	r2, r8
   2560a:	f003 f8b1 	bl	28770 <printk>
   2560e:	4857      	ldr	r0, [pc, #348]	; (2576c <register_events+0x208>)
   25610:	4631      	mov	r1, r6
   25612:	f003 f8ad 	bl	28770 <printk>
   25616:	21ac      	movs	r1, #172	; 0xac
   25618:	4640      	mov	r0, r8
   2561a:	f003 fa9a 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   2561e:	f38b 8811 	msr	BASEPRI, fp
   25622:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   25626:	3701      	adds	r7, #1
   25628:	3414      	adds	r4, #20
   2562a:	e7a8      	b.n	2557e <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   2562c:	6923      	ldr	r3, [r4, #16]
   2562e:	681b      	ldr	r3, [r3, #0]
   25630:	2b00      	cmp	r3, #0
   25632:	d12e      	bne.n	25692 <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   25634:	9b01      	ldr	r3, [sp, #4]
   25636:	2b00      	cmp	r3, #0
   25638:	d1df      	bne.n	255fa <register_events+0x96>
   2563a:	782b      	ldrb	r3, [r5, #0]
   2563c:	2b00      	cmp	r3, #0
   2563e:	d0dc      	beq.n	255fa <register_events+0x96>
	switch (event->type) {
   25640:	7b63      	ldrb	r3, [r4, #13]
   25642:	f003 031f 	and.w	r3, r3, #31
   25646:	2b08      	cmp	r3, #8
   25648:	d879      	bhi.n	2573e <register_events+0x1da>
   2564a:	e8df f003 	tbb	[pc, r3]
   2564e:	5139      	.short	0x5139
   25650:	783d7824 	.word	0x783d7824
   25654:	7878      	.short	0x7878
   25656:	64          	.byte	0x64
   25657:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   25658:	6923      	ldr	r3, [r4, #16]
   2565a:	689b      	ldr	r3, [r3, #8]
   2565c:	2b00      	cmp	r3, #0
   2565e:	d0e9      	beq.n	25634 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   25660:	2301      	movs	r3, #1
   25662:	e7c0      	b.n	255e6 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   25664:	6923      	ldr	r3, [r4, #16]
   25666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25668:	2b00      	cmp	r3, #0
   2566a:	d0e3      	beq.n	25634 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2566c:	2310      	movs	r3, #16
   2566e:	e7ba      	b.n	255e6 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   25670:	4a3f      	ldr	r2, [pc, #252]	; (25770 <register_events+0x20c>)
   25672:	4940      	ldr	r1, [pc, #256]	; (25774 <register_events+0x210>)
   25674:	483a      	ldr	r0, [pc, #232]	; (25760 <register_events+0x1fc>)
   25676:	235c      	movs	r3, #92	; 0x5c
   25678:	f003 f87a 	bl	28770 <printk>
   2567c:	7b61      	ldrb	r1, [r4, #13]
   2567e:	483e      	ldr	r0, [pc, #248]	; (25778 <register_events+0x214>)
   25680:	f001 011f 	and.w	r1, r1, #31
   25684:	f003 f874 	bl	28770 <printk>
   25688:	4839      	ldr	r0, [pc, #228]	; (25770 <register_events+0x20c>)
   2568a:	215c      	movs	r1, #92	; 0x5c
   2568c:	f003 fa61 	bl	28b52 <assert_post_action>
		break;
   25690:	e7d0      	b.n	25634 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   25692:	2304      	movs	r3, #4
   25694:	e7a7      	b.n	255e6 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   25696:	6923      	ldr	r3, [r4, #16]
   25698:	b963      	cbnz	r3, 256b4 <register_events+0x150>
   2569a:	4938      	ldr	r1, [pc, #224]	; (2577c <register_events+0x218>)
   2569c:	4a34      	ldr	r2, [pc, #208]	; (25770 <register_events+0x20c>)
   2569e:	4830      	ldr	r0, [pc, #192]	; (25760 <register_events+0x1fc>)
   256a0:	2386      	movs	r3, #134	; 0x86
   256a2:	f003 f865 	bl	28770 <printk>
   256a6:	4836      	ldr	r0, [pc, #216]	; (25780 <register_events+0x21c>)
   256a8:	f003 f862 	bl	28770 <printk>
   256ac:	4830      	ldr	r0, [pc, #192]	; (25770 <register_events+0x20c>)
   256ae:	2186      	movs	r1, #134	; 0x86
   256b0:	f003 fa4f 	bl	28b52 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   256b4:	6920      	ldr	r0, [r4, #16]
   256b6:	462a      	mov	r2, r5
   256b8:	4621      	mov	r1, r4
   256ba:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   256bc:	f007 ff14 	bl	2d4e8 <add_event>
	event->poller = poller;
   256c0:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   256c2:	f109 0901 	add.w	r9, r9, #1
   256c6:	e798      	b.n	255fa <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   256c8:	6923      	ldr	r3, [r4, #16]
   256ca:	b963      	cbnz	r3, 256e6 <register_events+0x182>
   256cc:	492d      	ldr	r1, [pc, #180]	; (25784 <register_events+0x220>)
   256ce:	4a28      	ldr	r2, [pc, #160]	; (25770 <register_events+0x20c>)
   256d0:	4823      	ldr	r0, [pc, #140]	; (25760 <register_events+0x1fc>)
   256d2:	238a      	movs	r3, #138	; 0x8a
   256d4:	f003 f84c 	bl	28770 <printk>
   256d8:	482b      	ldr	r0, [pc, #172]	; (25788 <register_events+0x224>)
   256da:	f003 f849 	bl	28770 <printk>
   256de:	4824      	ldr	r0, [pc, #144]	; (25770 <register_events+0x20c>)
   256e0:	218a      	movs	r1, #138	; 0x8a
   256e2:	f003 fa36 	bl	28b52 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   256e6:	6920      	ldr	r0, [r4, #16]
   256e8:	462a      	mov	r2, r5
   256ea:	4621      	mov	r1, r4
   256ec:	3014      	adds	r0, #20
   256ee:	e7e5      	b.n	256bc <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   256f0:	6923      	ldr	r3, [r4, #16]
   256f2:	b963      	cbnz	r3, 2570e <register_events+0x1aa>
   256f4:	4925      	ldr	r1, [pc, #148]	; (2578c <register_events+0x228>)
   256f6:	4a1e      	ldr	r2, [pc, #120]	; (25770 <register_events+0x20c>)
   256f8:	4819      	ldr	r0, [pc, #100]	; (25760 <register_events+0x1fc>)
   256fa:	238e      	movs	r3, #142	; 0x8e
   256fc:	f003 f838 	bl	28770 <printk>
   25700:	4823      	ldr	r0, [pc, #140]	; (25790 <register_events+0x22c>)
   25702:	f003 f835 	bl	28770 <printk>
   25706:	481a      	ldr	r0, [pc, #104]	; (25770 <register_events+0x20c>)
   25708:	218e      	movs	r1, #142	; 0x8e
   2570a:	f003 fa22 	bl	28b52 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   2570e:	6920      	ldr	r0, [r4, #16]
   25710:	462a      	mov	r2, r5
   25712:	4621      	mov	r1, r4
   25714:	e7d2      	b.n	256bc <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   25716:	6923      	ldr	r3, [r4, #16]
   25718:	b963      	cbnz	r3, 25734 <register_events+0x1d0>
   2571a:	491e      	ldr	r1, [pc, #120]	; (25794 <register_events+0x230>)
   2571c:	4a14      	ldr	r2, [pc, #80]	; (25770 <register_events+0x20c>)
   2571e:	4810      	ldr	r0, [pc, #64]	; (25760 <register_events+0x1fc>)
   25720:	2392      	movs	r3, #146	; 0x92
   25722:	f003 f825 	bl	28770 <printk>
   25726:	481c      	ldr	r0, [pc, #112]	; (25798 <register_events+0x234>)
   25728:	f003 f822 	bl	28770 <printk>
   2572c:	4810      	ldr	r0, [pc, #64]	; (25770 <register_events+0x20c>)
   2572e:	2192      	movs	r1, #146	; 0x92
   25730:	f003 fa0f 	bl	28b52 <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   25734:	6920      	ldr	r0, [r4, #16]
   25736:	462a      	mov	r2, r5
   25738:	4621      	mov	r1, r4
   2573a:	3028      	adds	r0, #40	; 0x28
   2573c:	e7be      	b.n	256bc <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   2573e:	4a0c      	ldr	r2, [pc, #48]	; (25770 <register_events+0x20c>)
   25740:	490c      	ldr	r1, [pc, #48]	; (25774 <register_events+0x210>)
   25742:	4807      	ldr	r0, [pc, #28]	; (25760 <register_events+0x1fc>)
   25744:	2399      	movs	r3, #153	; 0x99
   25746:	f003 f813 	bl	28770 <printk>
   2574a:	4814      	ldr	r0, [pc, #80]	; (2579c <register_events+0x238>)
   2574c:	f003 f810 	bl	28770 <printk>
   25750:	4807      	ldr	r0, [pc, #28]	; (25770 <register_events+0x20c>)
   25752:	2199      	movs	r1, #153	; 0x99
   25754:	f003 f9fd 	bl	28b52 <assert_post_action>
		break;
   25758:	e7b2      	b.n	256c0 <register_events+0x15c>
   2575a:	bf00      	nop
   2575c:	20002d54 	.word	0x20002d54
   25760:	0002e915 	.word	0x0002e915
   25764:	0002ec64 	.word	0x0002ec64
   25768:	0002ec23 	.word	0x0002ec23
   2576c:	0002ec3a 	.word	0x0002ec3a
   25770:	000328c4 	.word	0x000328c4
   25774:	00032bb3 	.word	0x00032bb3
   25778:	000329bf 	.word	0x000329bf
   2577c:	000328e5 	.word	0x000328e5
   25780:	000328ff 	.word	0x000328ff
   25784:	00032914 	.word	0x00032914
   25788:	00032930 	.word	0x00032930
   2578c:	00032941 	.word	0x00032941
   25790:	0003295e 	.word	0x0003295e
   25794:	00032975 	.word	0x00032975
   25798:	00032990 	.word	0x00032990
   2579c:	000329a9 	.word	0x000329a9
   257a0:	0002ebfd 	.word	0x0002ebfd
   257a4:	0002ec4f 	.word	0x0002ec4f

000257a8 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   257a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   257ac:	6884      	ldr	r4, [r0, #8]
{
   257ae:	4605      	mov	r5, r0
   257b0:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   257b2:	b1d4      	cbz	r4, 257ea <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   257b4:	7863      	ldrb	r3, [r4, #1]
   257b6:	2b01      	cmp	r3, #1
   257b8:	d14b      	bne.n	25852 <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   257ba:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
   257be:	d10e      	bne.n	257de <signal_poll_event+0x36>
   257c0:	4a30      	ldr	r2, [pc, #192]	; (25884 <signal_poll_event+0xdc>)
   257c2:	4931      	ldr	r1, [pc, #196]	; (25888 <signal_poll_event+0xe0>)
   257c4:	4831      	ldr	r0, [pc, #196]	; (2588c <signal_poll_event+0xe4>)
   257c6:	23f9      	movs	r3, #249	; 0xf9
   257c8:	f002 ffd2 	bl	28770 <printk>
   257cc:	4830      	ldr	r0, [pc, #192]	; (25890 <signal_poll_event+0xe8>)
   257ce:	f002 ffcf 	bl	28770 <printk>
   257d2:	482c      	ldr	r0, [pc, #176]	; (25884 <signal_poll_event+0xdc>)
   257d4:	21f9      	movs	r1, #249	; 0xf9
   257d6:	f003 f9bc 	bl	28b52 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   257da:	7b7b      	ldrb	r3, [r7, #13]
   257dc:	deff      	udf	#255	; 0xff
   257de:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   257e2:	f013 0302 	ands.w	r3, r3, #2
   257e6:	d10a      	bne.n	257fe <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   257e8:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   257ea:	68eb      	ldr	r3, [r5, #12]
   257ec:	f3c3 3145 	ubfx	r1, r3, #13, #6
   257f0:	430e      	orrs	r6, r1
	event->poller = NULL;
   257f2:	2000      	movs	r0, #0
	event->state |= state;
   257f4:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   257f8:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   257fa:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   257fc:	e00d      	b.n	2581a <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   257fe:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   25802:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   25806:	f06f 0001 	mvn.w	r0, #1
   2580a:	428b      	cmp	r3, r1
   2580c:	bf08      	it	eq
   2580e:	4282      	cmpeq	r2, r0
   25810:	d105      	bne.n	2581e <signal_poll_event+0x76>
		poller->is_polling = false;
   25812:	2300      	movs	r3, #0
   25814:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   25816:	f06f 000a 	mvn.w	r0, #10
}
   2581a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   2581e:	4638      	mov	r0, r7
   25820:	f7fe f910 	bl	23a44 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25824:	2e08      	cmp	r6, #8
   25826:	bf0c      	ite	eq
   25828:	f06f 0303 	mvneq.w	r3, #3
   2582c:	2300      	movne	r3, #0
   2582e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25830:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   25834:	06db      	lsls	r3, r3, #27
   25836:	d104      	bne.n	25842 <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   25838:	f854 8c48 	ldr.w	r8, [r4, #-72]
   2583c:	f1b8 0f00 	cmp.w	r8, #0
   25840:	d001      	beq.n	25846 <signal_poll_event+0x9e>
		poller->is_polling = false;
   25842:	2300      	movs	r3, #0
   25844:	e7d0      	b.n	257e8 <signal_poll_event+0x40>
	z_ready_thread(thread);
   25846:	4638      	mov	r0, r7
   25848:	f7fe faa0 	bl	23d8c <z_ready_thread>
		poller->is_polling = false;
   2584c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   25850:	e7cb      	b.n	257ea <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   25852:	2b02      	cmp	r3, #2
   25854:	d1f5      	bne.n	25842 <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   25856:	7823      	ldrb	r3, [r4, #0]
   25858:	2b00      	cmp	r3, #0
   2585a:	d0c6      	beq.n	257ea <signal_poll_event+0x42>
   2585c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   25860:	b177      	cbz	r7, 25880 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   25862:	f1a4 0914 	sub.w	r9, r4, #20
   25866:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   2586a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2586e:	f7ff fa95 	bl	24d9c <z_abort_timeout>
		twork->poll_result = 0;
   25872:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   25876:	4649      	mov	r1, r9
   25878:	4638      	mov	r0, r7
   2587a:	f7fd fc29 	bl	230d0 <k_work_submit_to_queue>
   2587e:	e7e5      	b.n	2584c <signal_poll_event+0xa4>
		poller->is_polling = false;
   25880:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   25882:	e7b2      	b.n	257ea <signal_poll_event+0x42>
   25884:	000328c4 	.word	0x000328c4
   25888:	000329dc 	.word	0x000329dc
   2588c:	0002e915 	.word	0x0002e915
   25890:	000329f2 	.word	0x000329f2

00025894 <k_poll_event_init>:
{
   25894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25896:	4605      	mov	r5, r0
   25898:	460f      	mov	r7, r1
   2589a:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2589c:	4614      	mov	r4, r2
   2589e:	b162      	cbz	r2, 258ba <k_poll_event_init+0x26>
   258a0:	491b      	ldr	r1, [pc, #108]	; (25910 <k_poll_event_init+0x7c>)
   258a2:	4a1c      	ldr	r2, [pc, #112]	; (25914 <k_poll_event_init+0x80>)
   258a4:	481c      	ldr	r0, [pc, #112]	; (25918 <k_poll_event_init+0x84>)
   258a6:	232d      	movs	r3, #45	; 0x2d
   258a8:	f002 ff62 	bl	28770 <printk>
   258ac:	481b      	ldr	r0, [pc, #108]	; (2591c <k_poll_event_init+0x88>)
   258ae:	f002 ff5f 	bl	28770 <printk>
   258b2:	4818      	ldr	r0, [pc, #96]	; (25914 <k_poll_event_init+0x80>)
   258b4:	212d      	movs	r1, #45	; 0x2d
   258b6:	f003 f94c 	bl	28b52 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   258ba:	2f1f      	cmp	r7, #31
   258bc:	d90c      	bls.n	258d8 <k_poll_event_init+0x44>
   258be:	4918      	ldr	r1, [pc, #96]	; (25920 <k_poll_event_init+0x8c>)
   258c0:	4a14      	ldr	r2, [pc, #80]	; (25914 <k_poll_event_init+0x80>)
   258c2:	4815      	ldr	r0, [pc, #84]	; (25918 <k_poll_event_init+0x84>)
   258c4:	232f      	movs	r3, #47	; 0x2f
   258c6:	f002 ff53 	bl	28770 <printk>
   258ca:	4816      	ldr	r0, [pc, #88]	; (25924 <k_poll_event_init+0x90>)
   258cc:	f002 ff50 	bl	28770 <printk>
   258d0:	4810      	ldr	r0, [pc, #64]	; (25914 <k_poll_event_init+0x80>)
   258d2:	212f      	movs	r1, #47	; 0x2f
   258d4:	f003 f93d 	bl	28b52 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   258d8:	b966      	cbnz	r6, 258f4 <k_poll_event_init+0x60>
   258da:	4913      	ldr	r1, [pc, #76]	; (25928 <k_poll_event_init+0x94>)
   258dc:	4a0d      	ldr	r2, [pc, #52]	; (25914 <k_poll_event_init+0x80>)
   258de:	480e      	ldr	r0, [pc, #56]	; (25918 <k_poll_event_init+0x84>)
   258e0:	2330      	movs	r3, #48	; 0x30
   258e2:	f002 ff45 	bl	28770 <printk>
   258e6:	4811      	ldr	r0, [pc, #68]	; (2592c <k_poll_event_init+0x98>)
   258e8:	f002 ff42 	bl	28770 <printk>
   258ec:	4809      	ldr	r0, [pc, #36]	; (25914 <k_poll_event_init+0x80>)
   258ee:	2130      	movs	r1, #48	; 0x30
   258f0:	f003 f92f 	bl	28b52 <assert_post_action>
	event->poller = NULL;
   258f4:	2300      	movs	r3, #0
	event->type = type;
   258f6:	04e4      	lsls	r4, r4, #19
   258f8:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   258fa:	60ab      	str	r3, [r5, #8]
	event->type = type;
   258fc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   25900:	7b2b      	ldrb	r3, [r5, #12]
   25902:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   25906:	433c      	orrs	r4, r7
   25908:	431c      	orrs	r4, r3
	event->obj = obj;
   2590a:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   2590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25910:	00032a11 	.word	0x00032a11
   25914:	000328c4 	.word	0x000328c4
   25918:	0002e915 	.word	0x0002e915
   2591c:	00032a31 	.word	0x00032a31
   25920:	00032a57 	.word	0x00032a57
   25924:	00032a7b 	.word	0x00032a7b
   25928:	00032a8b 	.word	0x00032a8b
   2592c:	00032a9e 	.word	0x00032a9e

00025930 <z_impl_k_poll>:
{
   25930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25934:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   25936:	4b75      	ldr	r3, [pc, #468]	; (25b0c <z_impl_k_poll+0x1dc>)
   25938:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   2593a:	2301      	movs	r3, #1
{
   2593c:	4604      	mov	r4, r0
   2593e:	4688      	mov	r8, r1
   25940:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   25942:	f105 0960 	add.w	r9, r5, #96	; 0x60
	poller->is_polling = true;
   25946:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   2594a:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
   2594e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   25952:	b173      	cbz	r3, 25972 <z_impl_k_poll+0x42>
   25954:	496e      	ldr	r1, [pc, #440]	; (25b10 <z_impl_k_poll+0x1e0>)
   25956:	4a6f      	ldr	r2, [pc, #444]	; (25b14 <z_impl_k_poll+0x1e4>)
   25958:	486f      	ldr	r0, [pc, #444]	; (25b18 <z_impl_k_poll+0x1e8>)
   2595a:	f44f 738d 	mov.w	r3, #282	; 0x11a
   2595e:	f002 ff07 	bl	28770 <printk>
   25962:	486e      	ldr	r0, [pc, #440]	; (25b1c <z_impl_k_poll+0x1ec>)
   25964:	f002 ff04 	bl	28770 <printk>
   25968:	486a      	ldr	r0, [pc, #424]	; (25b14 <z_impl_k_poll+0x1e4>)
   2596a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2596e:	f003 f8f0 	bl	28b52 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   25972:	b974      	cbnz	r4, 25992 <z_impl_k_poll+0x62>
   25974:	496a      	ldr	r1, [pc, #424]	; (25b20 <z_impl_k_poll+0x1f0>)
   25976:	4a67      	ldr	r2, [pc, #412]	; (25b14 <z_impl_k_poll+0x1e4>)
   25978:	4867      	ldr	r0, [pc, #412]	; (25b18 <z_impl_k_poll+0x1e8>)
   2597a:	f240 131b 	movw	r3, #283	; 0x11b
   2597e:	f002 fef7 	bl	28770 <printk>
   25982:	4868      	ldr	r0, [pc, #416]	; (25b24 <z_impl_k_poll+0x1f4>)
   25984:	f002 fef4 	bl	28770 <printk>
   25988:	4862      	ldr	r0, [pc, #392]	; (25b14 <z_impl_k_poll+0x1e4>)
   2598a:	f240 111b 	movw	r1, #283	; 0x11b
   2598e:	f003 f8e0 	bl	28b52 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   25992:	f1b8 0f00 	cmp.w	r8, #0
   25996:	da0e      	bge.n	259b6 <z_impl_k_poll+0x86>
   25998:	4963      	ldr	r1, [pc, #396]	; (25b28 <z_impl_k_poll+0x1f8>)
   2599a:	4a5e      	ldr	r2, [pc, #376]	; (25b14 <z_impl_k_poll+0x1e4>)
   2599c:	485e      	ldr	r0, [pc, #376]	; (25b18 <z_impl_k_poll+0x1e8>)
   2599e:	f44f 738e 	mov.w	r3, #284	; 0x11c
   259a2:	f002 fee5 	bl	28770 <printk>
   259a6:	4861      	ldr	r0, [pc, #388]	; (25b2c <z_impl_k_poll+0x1fc>)
   259a8:	f002 fee2 	bl	28770 <printk>
   259ac:	4859      	ldr	r0, [pc, #356]	; (25b14 <z_impl_k_poll+0x1e4>)
   259ae:	f44f 718e 	mov.w	r1, #284	; 0x11c
   259b2:	f003 f8ce 	bl	28b52 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   259b6:	ea56 0307 	orrs.w	r3, r6, r7
   259ba:	bf0c      	ite	eq
   259bc:	2301      	moveq	r3, #1
   259be:	2300      	movne	r3, #0
   259c0:	4641      	mov	r1, r8
   259c2:	464a      	mov	r2, r9
   259c4:	4620      	mov	r0, r4
   259c6:	f7ff fdcd 	bl	25564 <register_events>
   259ca:	4680      	mov	r8, r0
	__asm__ volatile(
   259cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   259d0:	f3ef 8911 	mrs	r9, BASEPRI
   259d4:	f383 8812 	msr	BASEPRI_MAX, r3
   259d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259dc:	4854      	ldr	r0, [pc, #336]	; (25b30 <z_impl_k_poll+0x200>)
   259de:	f7fc fcbd 	bl	2235c <z_spin_lock_valid>
   259e2:	b968      	cbnz	r0, 25a00 <z_impl_k_poll+0xd0>
   259e4:	4a53      	ldr	r2, [pc, #332]	; (25b34 <z_impl_k_poll+0x204>)
   259e6:	4954      	ldr	r1, [pc, #336]	; (25b38 <z_impl_k_poll+0x208>)
   259e8:	484b      	ldr	r0, [pc, #300]	; (25b18 <z_impl_k_poll+0x1e8>)
   259ea:	2381      	movs	r3, #129	; 0x81
   259ec:	f002 fec0 	bl	28770 <printk>
   259f0:	494f      	ldr	r1, [pc, #316]	; (25b30 <z_impl_k_poll+0x200>)
   259f2:	4852      	ldr	r0, [pc, #328]	; (25b3c <z_impl_k_poll+0x20c>)
   259f4:	f002 febc 	bl	28770 <printk>
   259f8:	484e      	ldr	r0, [pc, #312]	; (25b34 <z_impl_k_poll+0x204>)
   259fa:	2181      	movs	r1, #129	; 0x81
   259fc:	f003 f8a9 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   25a00:	484b      	ldr	r0, [pc, #300]	; (25b30 <z_impl_k_poll+0x200>)
   25a02:	f7fc fcc9 	bl	22398 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   25a06:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   25a0a:	b9fb      	cbnz	r3, 25a4c <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   25a0c:	4620      	mov	r0, r4
   25a0e:	464a      	mov	r2, r9
   25a10:	4641      	mov	r1, r8
   25a12:	f7ff fcd9 	bl	253c8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a16:	4846      	ldr	r0, [pc, #280]	; (25b30 <z_impl_k_poll+0x200>)
   25a18:	f7fc fcae 	bl	22378 <z_spin_unlock_valid>
   25a1c:	b968      	cbnz	r0, 25a3a <z_impl_k_poll+0x10a>
   25a1e:	4a45      	ldr	r2, [pc, #276]	; (25b34 <z_impl_k_poll+0x204>)
   25a20:	4947      	ldr	r1, [pc, #284]	; (25b40 <z_impl_k_poll+0x210>)
   25a22:	483d      	ldr	r0, [pc, #244]	; (25b18 <z_impl_k_poll+0x1e8>)
   25a24:	23ac      	movs	r3, #172	; 0xac
   25a26:	f002 fea3 	bl	28770 <printk>
   25a2a:	4941      	ldr	r1, [pc, #260]	; (25b30 <z_impl_k_poll+0x200>)
   25a2c:	4845      	ldr	r0, [pc, #276]	; (25b44 <z_impl_k_poll+0x214>)
   25a2e:	f002 fe9f 	bl	28770 <printk>
   25a32:	4840      	ldr	r0, [pc, #256]	; (25b34 <z_impl_k_poll+0x204>)
   25a34:	21ac      	movs	r1, #172	; 0xac
   25a36:	f003 f88c 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   25a3a:	f389 8811 	msr	BASEPRI, r9
   25a3e:	f3bf 8f6f 	isb	sy
		return 0;
   25a42:	2500      	movs	r5, #0
}
   25a44:	4628      	mov	r0, r5
   25a46:	b003      	add	sp, #12
   25a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   25a4c:	2300      	movs	r3, #0
   25a4e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25a52:	ea56 0307 	orrs.w	r3, r6, r7
   25a56:	d118      	bne.n	25a8a <z_impl_k_poll+0x15a>
   25a58:	4835      	ldr	r0, [pc, #212]	; (25b30 <z_impl_k_poll+0x200>)
   25a5a:	f7fc fc8d 	bl	22378 <z_spin_unlock_valid>
   25a5e:	b968      	cbnz	r0, 25a7c <z_impl_k_poll+0x14c>
   25a60:	4a34      	ldr	r2, [pc, #208]	; (25b34 <z_impl_k_poll+0x204>)
   25a62:	4937      	ldr	r1, [pc, #220]	; (25b40 <z_impl_k_poll+0x210>)
   25a64:	482c      	ldr	r0, [pc, #176]	; (25b18 <z_impl_k_poll+0x1e8>)
   25a66:	23ac      	movs	r3, #172	; 0xac
   25a68:	f002 fe82 	bl	28770 <printk>
   25a6c:	4930      	ldr	r1, [pc, #192]	; (25b30 <z_impl_k_poll+0x200>)
   25a6e:	4835      	ldr	r0, [pc, #212]	; (25b44 <z_impl_k_poll+0x214>)
   25a70:	f002 fe7e 	bl	28770 <printk>
   25a74:	482f      	ldr	r0, [pc, #188]	; (25b34 <z_impl_k_poll+0x204>)
   25a76:	21ac      	movs	r1, #172	; 0xac
   25a78:	f003 f86b 	bl	28b52 <assert_post_action>
   25a7c:	f389 8811 	msr	BASEPRI, r9
   25a80:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   25a84:	f06f 050a 	mvn.w	r5, #10
   25a88:	e7dc      	b.n	25a44 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25a8a:	e9cd 6700 	strd	r6, r7, [sp]
   25a8e:	4a2e      	ldr	r2, [pc, #184]	; (25b48 <z_impl_k_poll+0x218>)
   25a90:	4827      	ldr	r0, [pc, #156]	; (25b30 <z_impl_k_poll+0x200>)
   25a92:	4649      	mov	r1, r9
   25a94:	f7fe fb2c 	bl	240f0 <z_pend_curr>
   25a98:	4605      	mov	r5, r0
	__asm__ volatile(
   25a9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25a9e:	f3ef 8611 	mrs	r6, BASEPRI
   25aa2:	f383 8812 	msr	BASEPRI_MAX, r3
   25aa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25aaa:	4821      	ldr	r0, [pc, #132]	; (25b30 <z_impl_k_poll+0x200>)
   25aac:	f7fc fc56 	bl	2235c <z_spin_lock_valid>
   25ab0:	b968      	cbnz	r0, 25ace <z_impl_k_poll+0x19e>
   25ab2:	4a20      	ldr	r2, [pc, #128]	; (25b34 <z_impl_k_poll+0x204>)
   25ab4:	4920      	ldr	r1, [pc, #128]	; (25b38 <z_impl_k_poll+0x208>)
   25ab6:	4818      	ldr	r0, [pc, #96]	; (25b18 <z_impl_k_poll+0x1e8>)
   25ab8:	2381      	movs	r3, #129	; 0x81
   25aba:	f002 fe59 	bl	28770 <printk>
   25abe:	491c      	ldr	r1, [pc, #112]	; (25b30 <z_impl_k_poll+0x200>)
   25ac0:	481e      	ldr	r0, [pc, #120]	; (25b3c <z_impl_k_poll+0x20c>)
   25ac2:	f002 fe55 	bl	28770 <printk>
   25ac6:	481b      	ldr	r0, [pc, #108]	; (25b34 <z_impl_k_poll+0x204>)
   25ac8:	2181      	movs	r1, #129	; 0x81
   25aca:	f003 f842 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   25ace:	4818      	ldr	r0, [pc, #96]	; (25b30 <z_impl_k_poll+0x200>)
   25ad0:	f7fc fc62 	bl	22398 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   25ad4:	4620      	mov	r0, r4
   25ad6:	4632      	mov	r2, r6
   25ad8:	4641      	mov	r1, r8
   25ada:	f7ff fc75 	bl	253c8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ade:	4814      	ldr	r0, [pc, #80]	; (25b30 <z_impl_k_poll+0x200>)
   25ae0:	f7fc fc4a 	bl	22378 <z_spin_unlock_valid>
   25ae4:	b968      	cbnz	r0, 25b02 <z_impl_k_poll+0x1d2>
   25ae6:	4a13      	ldr	r2, [pc, #76]	; (25b34 <z_impl_k_poll+0x204>)
   25ae8:	4915      	ldr	r1, [pc, #84]	; (25b40 <z_impl_k_poll+0x210>)
   25aea:	480b      	ldr	r0, [pc, #44]	; (25b18 <z_impl_k_poll+0x1e8>)
   25aec:	23ac      	movs	r3, #172	; 0xac
   25aee:	f002 fe3f 	bl	28770 <printk>
   25af2:	490f      	ldr	r1, [pc, #60]	; (25b30 <z_impl_k_poll+0x200>)
   25af4:	4813      	ldr	r0, [pc, #76]	; (25b44 <z_impl_k_poll+0x214>)
   25af6:	f002 fe3b 	bl	28770 <printk>
   25afa:	480e      	ldr	r0, [pc, #56]	; (25b34 <z_impl_k_poll+0x204>)
   25afc:	21ac      	movs	r1, #172	; 0xac
   25afe:	f003 f828 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   25b02:	f386 8811 	msr	BASEPRI, r6
   25b06:	f3bf 8f6f 	isb	sy
	return swap_rc;
   25b0a:	e79b      	b.n	25a44 <z_impl_k_poll+0x114>
   25b0c:	20002cfc 	.word	0x20002cfc
   25b10:	000324a4 	.word	0x000324a4
   25b14:	000328c4 	.word	0x000328c4
   25b18:	0002e915 	.word	0x0002e915
   25b1c:	00031821 	.word	0x00031821
   25b20:	00032ab8 	.word	0x00032ab8
   25b24:	00032ace 	.word	0x00032ace
   25b28:	00032add 	.word	0x00032add
   25b2c:	00032aed 	.word	0x00032aed
   25b30:	20002d54 	.word	0x20002d54
   25b34:	0002ebfd 	.word	0x0002ebfd
   25b38:	0002ec4f 	.word	0x0002ec4f
   25b3c:	0002ec64 	.word	0x0002ec64
   25b40:	0002ec23 	.word	0x0002ec23
   25b44:	0002ec3a 	.word	0x0002ec3a
   25b48:	20000648 	.word	0x20000648

00025b4c <z_impl_k_poll_signal_raise>:
{
   25b4c:	b570      	push	{r4, r5, r6, lr}
   25b4e:	4604      	mov	r4, r0
   25b50:	460d      	mov	r5, r1
	__asm__ volatile(
   25b52:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b56:	f3ef 8611 	mrs	r6, BASEPRI
   25b5a:	f383 8812 	msr	BASEPRI_MAX, r3
   25b5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b62:	4821      	ldr	r0, [pc, #132]	; (25be8 <z_impl_k_poll_signal_raise+0x9c>)
   25b64:	f7fc fbfa 	bl	2235c <z_spin_lock_valid>
   25b68:	b968      	cbnz	r0, 25b86 <z_impl_k_poll_signal_raise+0x3a>
   25b6a:	4a20      	ldr	r2, [pc, #128]	; (25bec <z_impl_k_poll_signal_raise+0xa0>)
   25b6c:	4920      	ldr	r1, [pc, #128]	; (25bf0 <z_impl_k_poll_signal_raise+0xa4>)
   25b6e:	4821      	ldr	r0, [pc, #132]	; (25bf4 <z_impl_k_poll_signal_raise+0xa8>)
   25b70:	2381      	movs	r3, #129	; 0x81
   25b72:	f002 fdfd 	bl	28770 <printk>
   25b76:	491c      	ldr	r1, [pc, #112]	; (25be8 <z_impl_k_poll_signal_raise+0x9c>)
   25b78:	481f      	ldr	r0, [pc, #124]	; (25bf8 <z_impl_k_poll_signal_raise+0xac>)
   25b7a:	f002 fdf9 	bl	28770 <printk>
   25b7e:	481b      	ldr	r0, [pc, #108]	; (25bec <z_impl_k_poll_signal_raise+0xa0>)
   25b80:	2181      	movs	r1, #129	; 0x81
   25b82:	f002 ffe6 	bl	28b52 <assert_post_action>
	z_spin_lock_set_owner(l);
   25b86:	4818      	ldr	r0, [pc, #96]	; (25be8 <z_impl_k_poll_signal_raise+0x9c>)
   25b88:	f7fc fc06 	bl	22398 <z_spin_lock_set_owner>
	return list->head == list;
   25b8c:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   25b8e:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   25b90:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25b92:	4284      	cmp	r4, r0
   25b94:	60a1      	str	r1, [r4, #8]
   25b96:	d117      	bne.n	25bc8 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b98:	4813      	ldr	r0, [pc, #76]	; (25be8 <z_impl_k_poll_signal_raise+0x9c>)
   25b9a:	f7fc fbed 	bl	22378 <z_spin_unlock_valid>
   25b9e:	b968      	cbnz	r0, 25bbc <z_impl_k_poll_signal_raise+0x70>
   25ba0:	4a12      	ldr	r2, [pc, #72]	; (25bec <z_impl_k_poll_signal_raise+0xa0>)
   25ba2:	4916      	ldr	r1, [pc, #88]	; (25bfc <z_impl_k_poll_signal_raise+0xb0>)
   25ba4:	4813      	ldr	r0, [pc, #76]	; (25bf4 <z_impl_k_poll_signal_raise+0xa8>)
   25ba6:	23ac      	movs	r3, #172	; 0xac
   25ba8:	f002 fde2 	bl	28770 <printk>
   25bac:	490e      	ldr	r1, [pc, #56]	; (25be8 <z_impl_k_poll_signal_raise+0x9c>)
   25bae:	4814      	ldr	r0, [pc, #80]	; (25c00 <z_impl_k_poll_signal_raise+0xb4>)
   25bb0:	f002 fdde 	bl	28770 <printk>
   25bb4:	480d      	ldr	r0, [pc, #52]	; (25bec <z_impl_k_poll_signal_raise+0xa0>)
   25bb6:	21ac      	movs	r1, #172	; 0xac
   25bb8:	f002 ffcb 	bl	28b52 <assert_post_action>
	__asm__ volatile(
   25bbc:	f386 8811 	msr	BASEPRI, r6
   25bc0:	f3bf 8f6f 	isb	sy
		return 0;
   25bc4:	2400      	movs	r4, #0
   25bc6:	e00d      	b.n	25be4 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   25bc8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25bcc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25bce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25bd0:	2300      	movs	r3, #0
	node->prev = NULL;
   25bd2:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25bd6:	f7ff fde7 	bl	257a8 <signal_poll_event>
	z_reschedule(&lock, key);
   25bda:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25bdc:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   25bde:	4802      	ldr	r0, [pc, #8]	; (25be8 <z_impl_k_poll_signal_raise+0x9c>)
   25be0:	f7fd fe34 	bl	2384c <z_reschedule>
}
   25be4:	4620      	mov	r0, r4
   25be6:	bd70      	pop	{r4, r5, r6, pc}
   25be8:	20002d54 	.word	0x20002d54
   25bec:	0002ebfd 	.word	0x0002ebfd
   25bf0:	0002ec4f 	.word	0x0002ec4f
   25bf4:	0002e915 	.word	0x0002e915
   25bf8:	0002ec64 	.word	0x0002ec64
   25bfc:	0002ec23 	.word	0x0002ec23
   25c00:	0002ec3a 	.word	0x0002ec3a

00025c04 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25c04:	2304      	movs	r3, #4
   25c06:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   25c08:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   25c0c:	4606      	mov	r6, r0
   25c0e:	460d      	mov	r5, r1
   25c10:	d20a      	bcs.n	25c28 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   25c12:	f04f 0800 	mov.w	r8, #0
   25c16:	f04f 0900 	mov.w	r9, #0
   25c1a:	e9cd 8900 	strd	r8, r9, [sp]
   25c1e:	4319      	orrs	r1, r3
   25c20:	f7fc f84c 	bl	21cbc <k_heap_aligned_alloc>
	if (mem == NULL) {
   25c24:	4604      	mov	r4, r0
   25c26:	b920      	cbnz	r0, 25c32 <z_heap_aligned_alloc+0x2e>
		return NULL;
   25c28:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   25c2a:	4620      	mov	r0, r4
   25c2c:	b002      	add	sp, #8
   25c2e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   25c32:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   25c36:	2d00      	cmp	r5, #0
   25c38:	d0f7      	beq.n	25c2a <z_heap_aligned_alloc+0x26>
   25c3a:	1e6b      	subs	r3, r5, #1
   25c3c:	421c      	tst	r4, r3
   25c3e:	d0f4      	beq.n	25c2a <z_heap_aligned_alloc+0x26>
   25c40:	2325      	movs	r3, #37	; 0x25
   25c42:	4a07      	ldr	r2, [pc, #28]	; (25c60 <z_heap_aligned_alloc+0x5c>)
   25c44:	4907      	ldr	r1, [pc, #28]	; (25c64 <z_heap_aligned_alloc+0x60>)
   25c46:	4808      	ldr	r0, [pc, #32]	; (25c68 <z_heap_aligned_alloc+0x64>)
   25c48:	f002 fd92 	bl	28770 <printk>
   25c4c:	4621      	mov	r1, r4
   25c4e:	4807      	ldr	r0, [pc, #28]	; (25c6c <z_heap_aligned_alloc+0x68>)
   25c50:	462a      	mov	r2, r5
   25c52:	f002 fd8d 	bl	28770 <printk>
   25c56:	4802      	ldr	r0, [pc, #8]	; (25c60 <z_heap_aligned_alloc+0x5c>)
   25c58:	2125      	movs	r1, #37	; 0x25
   25c5a:	f002 ff7a 	bl	28b52 <assert_post_action>
   25c5e:	e7e4      	b.n	25c2a <z_heap_aligned_alloc+0x26>
   25c60:	00032afa 	.word	0x00032afa
   25c64:	00032b1e 	.word	0x00032b1e
   25c68:	0002e915 	.word	0x0002e915
   25c6c:	00032b50 	.word	0x00032b50

00025c70 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   25c70:	2803      	cmp	r0, #3
{
   25c72:	b538      	push	{r3, r4, r5, lr}
   25c74:	4604      	mov	r4, r0
   25c76:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   25c78:	d901      	bls.n	25c7e <k_aligned_alloc+0xe>
   25c7a:	0783      	lsls	r3, r0, #30
   25c7c:	d00c      	beq.n	25c98 <k_aligned_alloc+0x28>
   25c7e:	4912      	ldr	r1, [pc, #72]	; (25cc8 <k_aligned_alloc+0x58>)
   25c80:	4a12      	ldr	r2, [pc, #72]	; (25ccc <k_aligned_alloc+0x5c>)
   25c82:	4813      	ldr	r0, [pc, #76]	; (25cd0 <k_aligned_alloc+0x60>)
   25c84:	2342      	movs	r3, #66	; 0x42
   25c86:	f002 fd73 	bl	28770 <printk>
   25c8a:	4812      	ldr	r0, [pc, #72]	; (25cd4 <k_aligned_alloc+0x64>)
   25c8c:	f002 fd70 	bl	28770 <printk>
   25c90:	480e      	ldr	r0, [pc, #56]	; (25ccc <k_aligned_alloc+0x5c>)
   25c92:	2142      	movs	r1, #66	; 0x42
   25c94:	f002 ff5d 	bl	28b52 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   25c98:	1e63      	subs	r3, r4, #1
   25c9a:	4223      	tst	r3, r4
   25c9c:	d00c      	beq.n	25cb8 <k_aligned_alloc+0x48>
   25c9e:	490e      	ldr	r1, [pc, #56]	; (25cd8 <k_aligned_alloc+0x68>)
   25ca0:	4a0a      	ldr	r2, [pc, #40]	; (25ccc <k_aligned_alloc+0x5c>)
   25ca2:	480b      	ldr	r0, [pc, #44]	; (25cd0 <k_aligned_alloc+0x60>)
   25ca4:	2346      	movs	r3, #70	; 0x46
   25ca6:	f002 fd63 	bl	28770 <printk>
   25caa:	480c      	ldr	r0, [pc, #48]	; (25cdc <k_aligned_alloc+0x6c>)
   25cac:	f002 fd60 	bl	28770 <printk>
   25cb0:	4806      	ldr	r0, [pc, #24]	; (25ccc <k_aligned_alloc+0x5c>)
   25cb2:	2146      	movs	r1, #70	; 0x46
   25cb4:	f002 ff4d 	bl	28b52 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   25cb8:	462a      	mov	r2, r5
   25cba:	4621      	mov	r1, r4
   25cbc:	4808      	ldr	r0, [pc, #32]	; (25ce0 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   25cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   25cc2:	f7ff bf9f 	b.w	25c04 <z_heap_aligned_alloc>
   25cc6:	bf00      	nop
   25cc8:	00032b78 	.word	0x00032b78
   25ccc:	00032afa 	.word	0x00032afa
   25cd0:	0002e915 	.word	0x0002e915
   25cd4:	00032bb5 	.word	0x00032bb5
   25cd8:	0002ed48 	.word	0x0002ed48
   25cdc:	0002ed63 	.word	0x0002ed63
   25ce0:	20000820 	.word	0x20000820

00025ce4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   25ce4:	b538      	push	{r3, r4, r5, lr}
   25ce6:	4604      	mov	r4, r0
   25ce8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   25cea:	f007 fac9 	bl	2d280 <k_is_in_isr>
   25cee:	b950      	cbnz	r0, 25d06 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   25cf0:	4b06      	ldr	r3, [pc, #24]	; (25d0c <z_thread_aligned_alloc+0x28>)
   25cf2:	689b      	ldr	r3, [r3, #8]
   25cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   25cf6:	b143      	cbz	r3, 25d0a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   25cf8:	462a      	mov	r2, r5
   25cfa:	4621      	mov	r1, r4
   25cfc:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   25cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   25d02:	f7ff bf7f 	b.w	25c04 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   25d06:	4b02      	ldr	r3, [pc, #8]	; (25d10 <z_thread_aligned_alloc+0x2c>)
   25d08:	e7f6      	b.n	25cf8 <z_thread_aligned_alloc+0x14>
}
   25d0a:	bd38      	pop	{r3, r4, r5, pc}
   25d0c:	20002cfc 	.word	0x20002cfc
   25d10:	20000820 	.word	0x20000820

00025d14 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   25d14:	4a02      	ldr	r2, [pc, #8]	; (25d20 <boot_banner+0xc>)
   25d16:	4903      	ldr	r1, [pc, #12]	; (25d24 <boot_banner+0x10>)
   25d18:	4803      	ldr	r0, [pc, #12]	; (25d28 <boot_banner+0x14>)
   25d1a:	f002 bd29 	b.w	28770 <printk>
   25d1e:	bf00      	nop
   25d20:	00031823 	.word	0x00031823
   25d24:	00032be2 	.word	0x00032be2
   25d28:	00032bf1 	.word	0x00032bf1

00025d2c <nrf_cc3xx_platform_init>:
   25d2c:	b510      	push	{r4, lr}
   25d2e:	4c0c      	ldr	r4, [pc, #48]	; (25d60 <nrf_cc3xx_platform_init+0x34>)
   25d30:	6823      	ldr	r3, [r4, #0]
   25d32:	b113      	cbz	r3, 25d3a <nrf_cc3xx_platform_init+0xe>
   25d34:	4b0b      	ldr	r3, [pc, #44]	; (25d64 <nrf_cc3xx_platform_init+0x38>)
   25d36:	681b      	ldr	r3, [r3, #0]
   25d38:	b92b      	cbnz	r3, 25d46 <nrf_cc3xx_platform_init+0x1a>
   25d3a:	f000 fe73 	bl	26a24 <CC_LibInit>
   25d3e:	b930      	cbnz	r0, 25d4e <nrf_cc3xx_platform_init+0x22>
   25d40:	4b08      	ldr	r3, [pc, #32]	; (25d64 <nrf_cc3xx_platform_init+0x38>)
   25d42:	2201      	movs	r2, #1
   25d44:	601a      	str	r2, [r3, #0]
   25d46:	2301      	movs	r3, #1
   25d48:	6023      	str	r3, [r4, #0]
   25d4a:	2000      	movs	r0, #0
   25d4c:	bd10      	pop	{r4, pc}
   25d4e:	3801      	subs	r0, #1
   25d50:	2806      	cmp	r0, #6
   25d52:	d901      	bls.n	25d58 <nrf_cc3xx_platform_init+0x2c>
   25d54:	4804      	ldr	r0, [pc, #16]	; (25d68 <nrf_cc3xx_platform_init+0x3c>)
   25d56:	bd10      	pop	{r4, pc}
   25d58:	4b04      	ldr	r3, [pc, #16]	; (25d6c <nrf_cc3xx_platform_init+0x40>)
   25d5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   25d5e:	bd10      	pop	{r4, pc}
   25d60:	20002d58 	.word	0x20002d58
   25d64:	20002d5c 	.word	0x20002d5c
   25d68:	ffff8ffe 	.word	0xffff8ffe
   25d6c:	0002e368 	.word	0x0002e368

00025d70 <nrf_cc3xx_platform_abort>:
   25d70:	f3bf 8f4f 	dsb	sy
   25d74:	4905      	ldr	r1, [pc, #20]	; (25d8c <nrf_cc3xx_platform_abort+0x1c>)
   25d76:	4b06      	ldr	r3, [pc, #24]	; (25d90 <nrf_cc3xx_platform_abort+0x20>)
   25d78:	68ca      	ldr	r2, [r1, #12]
   25d7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   25d7e:	4313      	orrs	r3, r2
   25d80:	60cb      	str	r3, [r1, #12]
   25d82:	f3bf 8f4f 	dsb	sy
   25d86:	bf00      	nop
   25d88:	e7fd      	b.n	25d86 <nrf_cc3xx_platform_abort+0x16>
   25d8a:	bf00      	nop
   25d8c:	e000ed00 	.word	0xe000ed00
   25d90:	05fa0004 	.word	0x05fa0004

00025d94 <CC_PalAbort>:
   25d94:	b4f0      	push	{r4, r5, r6, r7}
   25d96:	4f09      	ldr	r7, [pc, #36]	; (25dbc <CC_PalAbort+0x28>)
   25d98:	4e09      	ldr	r6, [pc, #36]	; (25dc0 <CC_PalAbort+0x2c>)
   25d9a:	4c0a      	ldr	r4, [pc, #40]	; (25dc4 <CC_PalAbort+0x30>)
   25d9c:	4a0a      	ldr	r2, [pc, #40]	; (25dc8 <CC_PalAbort+0x34>)
   25d9e:	4d0b      	ldr	r5, [pc, #44]	; (25dcc <CC_PalAbort+0x38>)
   25da0:	490b      	ldr	r1, [pc, #44]	; (25dd0 <CC_PalAbort+0x3c>)
   25da2:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   25da6:	603b      	str	r3, [r7, #0]
   25da8:	6852      	ldr	r2, [r2, #4]
   25daa:	6033      	str	r3, [r6, #0]
   25dac:	6023      	str	r3, [r4, #0]
   25dae:	2400      	movs	r4, #0
   25db0:	602b      	str	r3, [r5, #0]
   25db2:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   25db6:	bcf0      	pop	{r4, r5, r6, r7}
   25db8:	4710      	bx	r2
   25dba:	bf00      	nop
   25dbc:	5002b400 	.word	0x5002b400
   25dc0:	5002b404 	.word	0x5002b404
   25dc4:	5002b408 	.word	0x5002b408
   25dc8:	20000650 	.word	0x20000650
   25dcc:	5002b40c 	.word	0x5002b40c
   25dd0:	5002a000 	.word	0x5002a000

00025dd4 <nrf_cc3xx_platform_set_abort>:
   25dd4:	e9d0 1200 	ldrd	r1, r2, [r0]
   25dd8:	4b01      	ldr	r3, [pc, #4]	; (25de0 <nrf_cc3xx_platform_set_abort+0xc>)
   25dda:	e9c3 1200 	strd	r1, r2, [r3]
   25dde:	4770      	bx	lr
   25de0:	20000650 	.word	0x20000650

00025de4 <nrf_cc3xx_platform_ctr_drbg_init>:
   25de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25de8:	4c15      	ldr	r4, [pc, #84]	; (25e40 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   25dea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 25e48 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   25dee:	2800      	cmp	r0, #0
   25df0:	bf18      	it	ne
   25df2:	4604      	movne	r4, r0
   25df4:	b083      	sub	sp, #12
   25df6:	6820      	ldr	r0, [r4, #0]
   25df8:	4540      	cmp	r0, r8
   25dfa:	d01d      	beq.n	25e38 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   25dfc:	460d      	mov	r5, r1
   25dfe:	4620      	mov	r0, r4
   25e00:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   25e04:	f104 0904 	add.w	r9, r4, #4
   25e08:	4616      	mov	r6, r2
   25e0a:	f504 778c 	add.w	r7, r4, #280	; 0x118
   25e0e:	f000 f8d3 	bl	25fb8 <mbedtls_platform_zeroize>
   25e12:	4648      	mov	r0, r9
   25e14:	f000 fcf2 	bl	267fc <cc_mbedtls_entropy_init>
   25e18:	4638      	mov	r0, r7
   25e1a:	f000 fb1f 	bl	2645c <cc_mbedtls_ctr_drbg_init>
   25e1e:	4909      	ldr	r1, [pc, #36]	; (25e44 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   25e20:	9600      	str	r6, [sp, #0]
   25e22:	464a      	mov	r2, r9
   25e24:	4638      	mov	r0, r7
   25e26:	462b      	mov	r3, r5
   25e28:	f000 fb2e 	bl	26488 <cc_mbedtls_ctr_drbg_seed>
   25e2c:	b908      	cbnz	r0, 25e32 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   25e2e:	f8c4 8000 	str.w	r8, [r4]
   25e32:	b003      	add	sp, #12
   25e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25e38:	2000      	movs	r0, #0
   25e3a:	b003      	add	sp, #12
   25e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25e40:	200042c0 	.word	0x200042c0
   25e44:	00026879 	.word	0x00026879
   25e48:	5ac9bca5 	.word	0x5ac9bca5

00025e4c <nrf_cc3xx_platform_ctr_drbg_get>:
   25e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e4e:	4c0d      	ldr	r4, [pc, #52]	; (25e84 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   25e50:	4e0d      	ldr	r6, [pc, #52]	; (25e88 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   25e52:	2800      	cmp	r0, #0
   25e54:	bf08      	it	eq
   25e56:	4620      	moveq	r0, r4
   25e58:	b083      	sub	sp, #12
   25e5a:	6807      	ldr	r7, [r0, #0]
   25e5c:	42b7      	cmp	r7, r6
   25e5e:	d10e      	bne.n	25e7e <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   25e60:	2600      	movs	r6, #0
   25e62:	461d      	mov	r5, r3
   25e64:	f500 708c 	add.w	r0, r0, #280	; 0x118
   25e68:	9600      	str	r6, [sp, #0]
   25e6a:	4633      	mov	r3, r6
   25e6c:	4614      	mov	r4, r2
   25e6e:	f000 fb57 	bl	26520 <cc_mbedtls_ctr_drbg_random_with_add>
   25e72:	2800      	cmp	r0, #0
   25e74:	bf18      	it	ne
   25e76:	4634      	movne	r4, r6
   25e78:	602c      	str	r4, [r5, #0]
   25e7a:	b003      	add	sp, #12
   25e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25e7e:	4803      	ldr	r0, [pc, #12]	; (25e8c <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   25e80:	e7fb      	b.n	25e7a <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   25e82:	bf00      	nop
   25e84:	200042c0 	.word	0x200042c0
   25e88:	5ac9bca5 	.word	0x5ac9bca5
   25e8c:	ffff8fe8 	.word	0xffff8fe8

00025e90 <mutex_free>:
   25e90:	b510      	push	{r4, lr}
   25e92:	4604      	mov	r4, r0
   25e94:	b130      	cbz	r0, 25ea4 <mutex_free+0x14>
   25e96:	6863      	ldr	r3, [r4, #4]
   25e98:	06db      	lsls	r3, r3, #27
   25e9a:	d502      	bpl.n	25ea2 <mutex_free+0x12>
   25e9c:	2300      	movs	r3, #0
   25e9e:	6023      	str	r3, [r4, #0]
   25ea0:	6063      	str	r3, [r4, #4]
   25ea2:	bd10      	pop	{r4, pc}
   25ea4:	4b02      	ldr	r3, [pc, #8]	; (25eb0 <mutex_free+0x20>)
   25ea6:	4803      	ldr	r0, [pc, #12]	; (25eb4 <mutex_free+0x24>)
   25ea8:	685b      	ldr	r3, [r3, #4]
   25eaa:	4798      	blx	r3
   25eac:	e7f3      	b.n	25e96 <mutex_free+0x6>
   25eae:	bf00      	nop
   25eb0:	20000650 	.word	0x20000650
   25eb4:	0002e384 	.word	0x0002e384

00025eb8 <mutex_unlock>:
   25eb8:	b168      	cbz	r0, 25ed6 <mutex_unlock+0x1e>
   25eba:	6843      	ldr	r3, [r0, #4]
   25ebc:	b13b      	cbz	r3, 25ece <mutex_unlock+0x16>
   25ebe:	06db      	lsls	r3, r3, #27
   25ec0:	d507      	bpl.n	25ed2 <mutex_unlock+0x1a>
   25ec2:	f3bf 8f5f 	dmb	sy
   25ec6:	2300      	movs	r3, #0
   25ec8:	6003      	str	r3, [r0, #0]
   25eca:	4618      	mov	r0, r3
   25ecc:	4770      	bx	lr
   25ece:	4803      	ldr	r0, [pc, #12]	; (25edc <mutex_unlock+0x24>)
   25ed0:	4770      	bx	lr
   25ed2:	4803      	ldr	r0, [pc, #12]	; (25ee0 <mutex_unlock+0x28>)
   25ed4:	4770      	bx	lr
   25ed6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25eda:	4770      	bx	lr
   25edc:	ffff8fea 	.word	0xffff8fea
   25ee0:	ffff8fe9 	.word	0xffff8fe9

00025ee4 <mutex_init>:
   25ee4:	b510      	push	{r4, lr}
   25ee6:	4604      	mov	r4, r0
   25ee8:	b120      	cbz	r0, 25ef4 <mutex_init+0x10>
   25eea:	2200      	movs	r2, #0
   25eec:	2311      	movs	r3, #17
   25eee:	6022      	str	r2, [r4, #0]
   25ef0:	6063      	str	r3, [r4, #4]
   25ef2:	bd10      	pop	{r4, pc}
   25ef4:	4801      	ldr	r0, [pc, #4]	; (25efc <mutex_init+0x18>)
   25ef6:	f7ff ff4d 	bl	25d94 <CC_PalAbort>
   25efa:	e7f6      	b.n	25eea <mutex_init+0x6>
   25efc:	0002e3ac 	.word	0x0002e3ac

00025f00 <mutex_lock>:
   25f00:	b1c0      	cbz	r0, 25f34 <mutex_lock+0x34>
   25f02:	6843      	ldr	r3, [r0, #4]
   25f04:	b1a3      	cbz	r3, 25f30 <mutex_lock+0x30>
   25f06:	06db      	lsls	r3, r3, #27
   25f08:	d510      	bpl.n	25f2c <mutex_lock+0x2c>
   25f0a:	2201      	movs	r2, #1
   25f0c:	f3bf 8f5b 	dmb	ish
   25f10:	e850 3f00 	ldrex	r3, [r0]
   25f14:	e840 2100 	strex	r1, r2, [r0]
   25f18:	2900      	cmp	r1, #0
   25f1a:	d1f9      	bne.n	25f10 <mutex_lock+0x10>
   25f1c:	f3bf 8f5b 	dmb	ish
   25f20:	2b01      	cmp	r3, #1
   25f22:	d0f3      	beq.n	25f0c <mutex_lock+0xc>
   25f24:	f3bf 8f5f 	dmb	sy
   25f28:	2000      	movs	r0, #0
   25f2a:	4770      	bx	lr
   25f2c:	4803      	ldr	r0, [pc, #12]	; (25f3c <mutex_lock+0x3c>)
   25f2e:	4770      	bx	lr
   25f30:	4803      	ldr	r0, [pc, #12]	; (25f40 <mutex_lock+0x40>)
   25f32:	4770      	bx	lr
   25f34:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   25f38:	4770      	bx	lr
   25f3a:	bf00      	nop
   25f3c:	ffff8fe9 	.word	0xffff8fe9
   25f40:	ffff8fea 	.word	0xffff8fea

00025f44 <nrf_cc3xx_platform_set_mutexes>:
   25f44:	b570      	push	{r4, r5, r6, lr}
   25f46:	e9d0 2300 	ldrd	r2, r3, [r0]
   25f4a:	4c13      	ldr	r4, [pc, #76]	; (25f98 <nrf_cc3xx_platform_set_mutexes+0x54>)
   25f4c:	4d13      	ldr	r5, [pc, #76]	; (25f9c <nrf_cc3xx_platform_set_mutexes+0x58>)
   25f4e:	e9c4 2300 	strd	r2, r3, [r4]
   25f52:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   25f56:	e9c4 6302 	strd	r6, r3, [r4, #8]
   25f5a:	4b11      	ldr	r3, [pc, #68]	; (25fa0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   25f5c:	6808      	ldr	r0, [r1, #0]
   25f5e:	6018      	str	r0, [r3, #0]
   25f60:	6848      	ldr	r0, [r1, #4]
   25f62:	6058      	str	r0, [r3, #4]
   25f64:	6888      	ldr	r0, [r1, #8]
   25f66:	6098      	str	r0, [r3, #8]
   25f68:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   25f6c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   25f70:	60de      	str	r6, [r3, #12]
   25f72:	6118      	str	r0, [r3, #16]
   25f74:	06cb      	lsls	r3, r1, #27
   25f76:	d50d      	bpl.n	25f94 <nrf_cc3xx_platform_set_mutexes+0x50>
   25f78:	2300      	movs	r3, #0
   25f7a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   25f7e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   25f82:	f505 7088 	add.w	r0, r5, #272	; 0x110
   25f86:	4790      	blx	r2
   25f88:	6823      	ldr	r3, [r4, #0]
   25f8a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   25f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25f92:	4718      	bx	r3
   25f94:	bd70      	pop	{r4, r5, r6, pc}
   25f96:	bf00      	nop
   25f98:	20000660 	.word	0x20000660
   25f9c:	200042c0 	.word	0x200042c0
   25fa0:	20000670 	.word	0x20000670

00025fa4 <mbedtls_zeroize_internal>:
   25fa4:	b138      	cbz	r0, 25fb6 <mbedtls_zeroize_internal+0x12>
   25fa6:	b131      	cbz	r1, 25fb6 <mbedtls_zeroize_internal+0x12>
   25fa8:	4401      	add	r1, r0
   25faa:	2200      	movs	r2, #0
   25fac:	4603      	mov	r3, r0
   25fae:	3001      	adds	r0, #1
   25fb0:	4281      	cmp	r1, r0
   25fb2:	701a      	strb	r2, [r3, #0]
   25fb4:	d1fa      	bne.n	25fac <mbedtls_zeroize_internal+0x8>
   25fb6:	4770      	bx	lr

00025fb8 <mbedtls_platform_zeroize>:
   25fb8:	b138      	cbz	r0, 25fca <mbedtls_platform_zeroize+0x12>
   25fba:	b131      	cbz	r1, 25fca <mbedtls_platform_zeroize+0x12>
   25fbc:	4401      	add	r1, r0
   25fbe:	2200      	movs	r2, #0
   25fc0:	4603      	mov	r3, r0
   25fc2:	3001      	adds	r0, #1
   25fc4:	4288      	cmp	r0, r1
   25fc6:	701a      	strb	r2, [r3, #0]
   25fc8:	d1fa      	bne.n	25fc0 <mbedtls_platform_zeroize+0x8>
   25fca:	4770      	bx	lr

00025fcc <block_cipher_df>:
   25fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25fd0:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   25fd4:	b0b1      	sub	sp, #196	; 0xc4
   25fd6:	f200 812e 	bhi.w	26236 <block_cipher_df+0x26a>
   25fda:	f8df 926c 	ldr.w	r9, [pc, #620]	; 26248 <block_cipher_df+0x27c>
   25fde:	4614      	mov	r4, r2
   25fe0:	460d      	mov	r5, r1
   25fe2:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   25fe6:	2100      	movs	r1, #0
   25fe8:	4682      	mov	sl, r0
   25fea:	4648      	mov	r0, r9
   25fec:	f004 fd60 	bl	2aab0 <memset>
   25ff0:	a813      	add	r0, sp, #76	; 0x4c
   25ff2:	f001 f9e5 	bl	273c0 <cc_mbedtls_aes_init>
   25ff6:	2600      	movs	r6, #0
   25ff8:	4629      	mov	r1, r5
   25ffa:	2320      	movs	r3, #32
   25ffc:	ba65      	rev16	r5, r4
   25ffe:	4622      	mov	r2, r4
   26000:	f109 0018 	add.w	r0, r9, #24
   26004:	f8a9 5012 	strh.w	r5, [r9, #18]
   26008:	f889 3017 	strb.w	r3, [r9, #23]
   2600c:	f8a9 6010 	strh.w	r6, [r9, #16]
   26010:	f004 fd43 	bl	2aa9a <memcpy>
   26014:	eb09 0304 	add.w	r3, r9, r4
   26018:	2280      	movs	r2, #128	; 0x80
   2601a:	4d88      	ldr	r5, [pc, #544]	; (2623c <block_cipher_df+0x270>)
   2601c:	761a      	strb	r2, [r3, #24]
   2601e:	4b88      	ldr	r3, [pc, #544]	; (26240 <block_cipher_df+0x274>)
   26020:	9503      	str	r5, [sp, #12]
   26022:	9304      	str	r3, [sp, #16]
   26024:	a813      	add	r0, sp, #76	; 0x4c
   26026:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   2602a:	a903      	add	r1, sp, #12
   2602c:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   26030:	e9cd 5305 	strd	r5, r3, [sp, #20]
   26034:	f001 f9da 	bl	273ec <cc_mbedtls_aes_setkey_enc>
   26038:	4680      	mov	r8, r0
   2603a:	2800      	cmp	r0, #0
   2603c:	f040 80da 	bne.w	261f4 <block_cipher_df+0x228>
   26040:	f104 0319 	add.w	r3, r4, #25
   26044:	9301      	str	r3, [sp, #4]
   26046:	af07      	add	r7, sp, #28
   26048:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   2604c:	2210      	movs	r2, #16
   2604e:	2100      	movs	r1, #0
   26050:	4638      	mov	r0, r7
   26052:	f004 fd2d 	bl	2aab0 <memset>
   26056:	4c7b      	ldr	r4, [pc, #492]	; (26244 <block_cipher_df+0x278>)
   26058:	9d01      	ldr	r5, [sp, #4]
   2605a:	f89d 601d 	ldrb.w	r6, [sp, #29]
   2605e:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   26062:	f89d e01c 	ldrb.w	lr, [sp, #28]
   26066:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   2606a:	f89d c01f 	ldrb.w	ip, [sp, #31]
   2606e:	f89d 001e 	ldrb.w	r0, [sp, #30]
   26072:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   26076:	404e      	eors	r6, r1
   26078:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   2607c:	f88d 601d 	strb.w	r6, [sp, #29]
   26080:	ea8e 0303 	eor.w	r3, lr, r3
   26084:	4050      	eors	r0, r2
   26086:	ea8c 0101 	eor.w	r1, ip, r1
   2608a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   2608e:	f88d 301c 	strb.w	r3, [sp, #28]
   26092:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   26096:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   2609a:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   2609e:	f88d 001e 	strb.w	r0, [sp, #30]
   260a2:	f88d 101f 	strb.w	r1, [sp, #31]
   260a6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   260aa:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   260ae:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   260b2:	405a      	eors	r2, r3
   260b4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   260b8:	f88d 2020 	strb.w	r2, [sp, #32]
   260bc:	ea8c 0606 	eor.w	r6, ip, r6
   260c0:	4048      	eors	r0, r1
   260c2:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   260c6:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   260ca:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   260ce:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   260d2:	ea8e 0303 	eor.w	r3, lr, r3
   260d6:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   260da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   260de:	ea8c 0101 	eor.w	r1, ip, r1
   260e2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   260e6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   260ea:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   260ee:	ea82 020c 	eor.w	r2, r2, ip
   260f2:	4073      	eors	r3, r6
   260f4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   260f8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   260fc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   26100:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   26104:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   26108:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   2610c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   26110:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   26114:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   26118:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   2611c:	ea8e 0202 	eor.w	r2, lr, r2
   26120:	4041      	eors	r1, r0
   26122:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   26126:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   2612a:	4073      	eors	r3, r6
   2612c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   26130:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   26134:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   26138:	ea8c 0000 	eor.w	r0, ip, r0
   2613c:	4056      	eors	r6, r2
   2613e:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   26142:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   26146:	463b      	mov	r3, r7
   26148:	463a      	mov	r2, r7
   2614a:	2101      	movs	r1, #1
   2614c:	a813      	add	r0, sp, #76	; 0x4c
   2614e:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   26152:	f001 f965 	bl	27420 <cc_mbedtls_aes_crypt_ecb>
   26156:	2d10      	cmp	r5, #16
   26158:	bf94      	ite	ls
   2615a:	1b6d      	subls	r5, r5, r5
   2615c:	3d10      	subhi	r5, #16
   2615e:	2800      	cmp	r0, #0
   26160:	d167      	bne.n	26232 <block_cipher_df+0x266>
   26162:	3410      	adds	r4, #16
   26164:	2d00      	cmp	r5, #0
   26166:	f47f af78 	bne.w	2605a <block_cipher_df+0x8e>
   2616a:	eb0b 0008 	add.w	r0, fp, r8
   2616e:	2210      	movs	r2, #16
   26170:	4639      	mov	r1, r7
   26172:	f004 fc92 	bl	2aa9a <memcpy>
   26176:	f899 3003 	ldrb.w	r3, [r9, #3]
   2617a:	f108 0810 	add.w	r8, r8, #16
   2617e:	3301      	adds	r3, #1
   26180:	f1b8 0f20 	cmp.w	r8, #32
   26184:	f889 3003 	strb.w	r3, [r9, #3]
   26188:	f47f af60 	bne.w	2604c <block_cipher_df+0x80>
   2618c:	2280      	movs	r2, #128	; 0x80
   2618e:	4659      	mov	r1, fp
   26190:	a813      	add	r0, sp, #76	; 0x4c
   26192:	f001 f92b 	bl	273ec <cc_mbedtls_aes_setkey_enc>
   26196:	4680      	mov	r8, r0
   26198:	bb78      	cbnz	r0, 261fa <block_cipher_df+0x22e>
   2619a:	f10a 0520 	add.w	r5, sl, #32
   2619e:	4654      	mov	r4, sl
   261a0:	ab0f      	add	r3, sp, #60	; 0x3c
   261a2:	461a      	mov	r2, r3
   261a4:	2101      	movs	r1, #1
   261a6:	a813      	add	r0, sp, #76	; 0x4c
   261a8:	f001 f93a 	bl	27420 <cc_mbedtls_aes_crypt_ecb>
   261ac:	2210      	movs	r2, #16
   261ae:	4680      	mov	r8, r0
   261b0:	a90f      	add	r1, sp, #60	; 0x3c
   261b2:	4620      	mov	r0, r4
   261b4:	4414      	add	r4, r2
   261b6:	f1b8 0f00 	cmp.w	r8, #0
   261ba:	d11e      	bne.n	261fa <block_cipher_df+0x22e>
   261bc:	f004 fc6d 	bl	2aa9a <memcpy>
   261c0:	42ac      	cmp	r4, r5
   261c2:	d1ed      	bne.n	261a0 <block_cipher_df+0x1d4>
   261c4:	a813      	add	r0, sp, #76	; 0x4c
   261c6:	f001 f90b 	bl	273e0 <cc_mbedtls_aes_free>
   261ca:	481f      	ldr	r0, [pc, #124]	; (26248 <block_cipher_df+0x27c>)
   261cc:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   261d0:	f7ff fef2 	bl	25fb8 <mbedtls_platform_zeroize>
   261d4:	4658      	mov	r0, fp
   261d6:	2120      	movs	r1, #32
   261d8:	f7ff feee 	bl	25fb8 <mbedtls_platform_zeroize>
   261dc:	a803      	add	r0, sp, #12
   261de:	2110      	movs	r1, #16
   261e0:	f7ff feea 	bl	25fb8 <mbedtls_platform_zeroize>
   261e4:	4638      	mov	r0, r7
   261e6:	2110      	movs	r1, #16
   261e8:	f7ff fee6 	bl	25fb8 <mbedtls_platform_zeroize>
   261ec:	4640      	mov	r0, r8
   261ee:	b031      	add	sp, #196	; 0xc4
   261f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261f4:	af07      	add	r7, sp, #28
   261f6:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   261fa:	a813      	add	r0, sp, #76	; 0x4c
   261fc:	f001 f8f0 	bl	273e0 <cc_mbedtls_aes_free>
   26200:	4811      	ldr	r0, [pc, #68]	; (26248 <block_cipher_df+0x27c>)
   26202:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   26206:	f7ff fed7 	bl	25fb8 <mbedtls_platform_zeroize>
   2620a:	4658      	mov	r0, fp
   2620c:	2120      	movs	r1, #32
   2620e:	f7ff fed3 	bl	25fb8 <mbedtls_platform_zeroize>
   26212:	a803      	add	r0, sp, #12
   26214:	2110      	movs	r1, #16
   26216:	f7ff fecf 	bl	25fb8 <mbedtls_platform_zeroize>
   2621a:	4638      	mov	r0, r7
   2621c:	2110      	movs	r1, #16
   2621e:	f7ff fecb 	bl	25fb8 <mbedtls_platform_zeroize>
   26222:	4650      	mov	r0, sl
   26224:	2120      	movs	r1, #32
   26226:	f7ff fec7 	bl	25fb8 <mbedtls_platform_zeroize>
   2622a:	4640      	mov	r0, r8
   2622c:	b031      	add	sp, #196	; 0xc4
   2622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26232:	4680      	mov	r8, r0
   26234:	e7e1      	b.n	261fa <block_cipher_df+0x22e>
   26236:	f06f 0837 	mvn.w	r8, #55	; 0x37
   2623a:	e7f6      	b.n	2622a <block_cipher_df+0x25e>
   2623c:	03020100 	.word	0x03020100
   26240:	07060504 	.word	0x07060504
   26244:	20002d80 	.word	0x20002d80
   26248:	20002d70 	.word	0x20002d70

0002624c <ctr_drbg_update_internal>:
   2624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26250:	b088      	sub	sp, #32
   26252:	4604      	mov	r4, r0
   26254:	2220      	movs	r2, #32
   26256:	460d      	mov	r5, r1
   26258:	4668      	mov	r0, sp
   2625a:	2100      	movs	r1, #0
   2625c:	eb04 0802 	add.w	r8, r4, r2
   26260:	f004 fc26 	bl	2aab0 <memset>
   26264:	466e      	mov	r6, sp
   26266:	7be2      	ldrb	r2, [r4, #15]
   26268:	3201      	adds	r2, #1
   2626a:	b2d2      	uxtb	r2, r2
   2626c:	73e2      	strb	r2, [r4, #15]
   2626e:	2a00      	cmp	r2, #0
   26270:	d14d      	bne.n	2630e <ctr_drbg_update_internal+0xc2>
   26272:	7ba2      	ldrb	r2, [r4, #14]
   26274:	3201      	adds	r2, #1
   26276:	b2d2      	uxtb	r2, r2
   26278:	73a2      	strb	r2, [r4, #14]
   2627a:	2a00      	cmp	r2, #0
   2627c:	d147      	bne.n	2630e <ctr_drbg_update_internal+0xc2>
   2627e:	7b63      	ldrb	r3, [r4, #13]
   26280:	3301      	adds	r3, #1
   26282:	b2db      	uxtb	r3, r3
   26284:	7363      	strb	r3, [r4, #13]
   26286:	2b00      	cmp	r3, #0
   26288:	d141      	bne.n	2630e <ctr_drbg_update_internal+0xc2>
   2628a:	7b23      	ldrb	r3, [r4, #12]
   2628c:	3301      	adds	r3, #1
   2628e:	b2db      	uxtb	r3, r3
   26290:	7323      	strb	r3, [r4, #12]
   26292:	2b00      	cmp	r3, #0
   26294:	d13b      	bne.n	2630e <ctr_drbg_update_internal+0xc2>
   26296:	7ae3      	ldrb	r3, [r4, #11]
   26298:	3301      	adds	r3, #1
   2629a:	b2db      	uxtb	r3, r3
   2629c:	72e3      	strb	r3, [r4, #11]
   2629e:	2b00      	cmp	r3, #0
   262a0:	d135      	bne.n	2630e <ctr_drbg_update_internal+0xc2>
   262a2:	7aa3      	ldrb	r3, [r4, #10]
   262a4:	3301      	adds	r3, #1
   262a6:	b2db      	uxtb	r3, r3
   262a8:	72a3      	strb	r3, [r4, #10]
   262aa:	2b00      	cmp	r3, #0
   262ac:	d12f      	bne.n	2630e <ctr_drbg_update_internal+0xc2>
   262ae:	7a63      	ldrb	r3, [r4, #9]
   262b0:	3301      	adds	r3, #1
   262b2:	b2db      	uxtb	r3, r3
   262b4:	7263      	strb	r3, [r4, #9]
   262b6:	bb53      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262b8:	7a23      	ldrb	r3, [r4, #8]
   262ba:	3301      	adds	r3, #1
   262bc:	b2db      	uxtb	r3, r3
   262be:	7223      	strb	r3, [r4, #8]
   262c0:	bb2b      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262c2:	79e3      	ldrb	r3, [r4, #7]
   262c4:	3301      	adds	r3, #1
   262c6:	b2db      	uxtb	r3, r3
   262c8:	71e3      	strb	r3, [r4, #7]
   262ca:	bb03      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262cc:	79a3      	ldrb	r3, [r4, #6]
   262ce:	3301      	adds	r3, #1
   262d0:	b2db      	uxtb	r3, r3
   262d2:	71a3      	strb	r3, [r4, #6]
   262d4:	b9db      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262d6:	7963      	ldrb	r3, [r4, #5]
   262d8:	3301      	adds	r3, #1
   262da:	b2db      	uxtb	r3, r3
   262dc:	7163      	strb	r3, [r4, #5]
   262de:	b9b3      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262e0:	7923      	ldrb	r3, [r4, #4]
   262e2:	3301      	adds	r3, #1
   262e4:	b2db      	uxtb	r3, r3
   262e6:	7123      	strb	r3, [r4, #4]
   262e8:	b98b      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262ea:	78e3      	ldrb	r3, [r4, #3]
   262ec:	3301      	adds	r3, #1
   262ee:	b2db      	uxtb	r3, r3
   262f0:	70e3      	strb	r3, [r4, #3]
   262f2:	b963      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262f4:	78a3      	ldrb	r3, [r4, #2]
   262f6:	3301      	adds	r3, #1
   262f8:	b2db      	uxtb	r3, r3
   262fa:	70a3      	strb	r3, [r4, #2]
   262fc:	b93b      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   262fe:	7863      	ldrb	r3, [r4, #1]
   26300:	3301      	adds	r3, #1
   26302:	b2db      	uxtb	r3, r3
   26304:	7063      	strb	r3, [r4, #1]
   26306:	b913      	cbnz	r3, 2630e <ctr_drbg_update_internal+0xc2>
   26308:	7823      	ldrb	r3, [r4, #0]
   2630a:	3301      	adds	r3, #1
   2630c:	7023      	strb	r3, [r4, #0]
   2630e:	4633      	mov	r3, r6
   26310:	4622      	mov	r2, r4
   26312:	2101      	movs	r1, #1
   26314:	4640      	mov	r0, r8
   26316:	f001 f883 	bl	27420 <cc_mbedtls_aes_crypt_ecb>
   2631a:	4607      	mov	r7, r0
   2631c:	2800      	cmp	r0, #0
   2631e:	d12b      	bne.n	26378 <ctr_drbg_update_internal+0x12c>
   26320:	3610      	adds	r6, #16
   26322:	ab08      	add	r3, sp, #32
   26324:	429e      	cmp	r6, r3
   26326:	d19e      	bne.n	26266 <ctr_drbg_update_internal+0x1a>
   26328:	9e01      	ldr	r6, [sp, #4]
   2632a:	686a      	ldr	r2, [r5, #4]
   2632c:	9f00      	ldr	r7, [sp, #0]
   2632e:	6829      	ldr	r1, [r5, #0]
   26330:	68ab      	ldr	r3, [r5, #8]
   26332:	4072      	eors	r2, r6
   26334:	9e02      	ldr	r6, [sp, #8]
   26336:	9201      	str	r2, [sp, #4]
   26338:	4079      	eors	r1, r7
   2633a:	4073      	eors	r3, r6
   2633c:	9100      	str	r1, [sp, #0]
   2633e:	9e03      	ldr	r6, [sp, #12]
   26340:	68e9      	ldr	r1, [r5, #12]
   26342:	692a      	ldr	r2, [r5, #16]
   26344:	9302      	str	r3, [sp, #8]
   26346:	4071      	eors	r1, r6
   26348:	9e04      	ldr	r6, [sp, #16]
   2634a:	696b      	ldr	r3, [r5, #20]
   2634c:	9103      	str	r1, [sp, #12]
   2634e:	4056      	eors	r6, r2
   26350:	9a05      	ldr	r2, [sp, #20]
   26352:	9604      	str	r6, [sp, #16]
   26354:	ea83 0102 	eor.w	r1, r3, r2
   26358:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   2635c:	9d06      	ldr	r5, [sp, #24]
   2635e:	9105      	str	r1, [sp, #20]
   26360:	4055      	eors	r5, r2
   26362:	9a07      	ldr	r2, [sp, #28]
   26364:	4640      	mov	r0, r8
   26366:	4053      	eors	r3, r2
   26368:	4669      	mov	r1, sp
   2636a:	2280      	movs	r2, #128	; 0x80
   2636c:	e9cd 5306 	strd	r5, r3, [sp, #24]
   26370:	f001 f83c 	bl	273ec <cc_mbedtls_aes_setkey_enc>
   26374:	4607      	mov	r7, r0
   26376:	b138      	cbz	r0, 26388 <ctr_drbg_update_internal+0x13c>
   26378:	4668      	mov	r0, sp
   2637a:	2120      	movs	r1, #32
   2637c:	f7ff fe1c 	bl	25fb8 <mbedtls_platform_zeroize>
   26380:	4638      	mov	r0, r7
   26382:	b008      	add	sp, #32
   26384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26388:	2210      	movs	r2, #16
   2638a:	4620      	mov	r0, r4
   2638c:	eb0d 0102 	add.w	r1, sp, r2
   26390:	f004 fb83 	bl	2aa9a <memcpy>
   26394:	e7f0      	b.n	26378 <ctr_drbg_update_internal+0x12c>
   26396:	bf00      	nop

00026398 <mbedtls_ctr_drbg_reseed_internal>:
   26398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2639c:	4604      	mov	r4, r0
   2639e:	6980      	ldr	r0, [r0, #24]
   263a0:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   263a4:	d852      	bhi.n	2644c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   263a6:	461d      	mov	r5, r3
   263a8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   263ac:	42ab      	cmp	r3, r5
   263ae:	d34d      	bcc.n	2644c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   263b0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   263b4:	1a18      	subs	r0, r3, r0
   263b6:	4290      	cmp	r0, r2
   263b8:	4616      	mov	r6, r2
   263ba:	d347      	bcc.n	2644c <mbedtls_ctr_drbg_reseed_internal+0xb4>
   263bc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 26458 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   263c0:	f44f 72c0 	mov.w	r2, #384	; 0x180
   263c4:	460f      	mov	r7, r1
   263c6:	4648      	mov	r0, r9
   263c8:	2100      	movs	r1, #0
   263ca:	f004 fb71 	bl	2aab0 <memset>
   263ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   263d2:	69a2      	ldr	r2, [r4, #24]
   263d4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   263d8:	4649      	mov	r1, r9
   263da:	4798      	blx	r3
   263dc:	2800      	cmp	r0, #0
   263de:	d138      	bne.n	26452 <mbedtls_ctr_drbg_reseed_internal+0xba>
   263e0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   263e4:	b13d      	cbz	r5, 263f6 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   263e6:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   263ea:	462a      	mov	r2, r5
   263ec:	eb09 0108 	add.w	r1, r9, r8
   263f0:	4798      	blx	r3
   263f2:	bb70      	cbnz	r0, 26452 <mbedtls_ctr_drbg_reseed_internal+0xba>
   263f4:	44a8      	add	r8, r5
   263f6:	b107      	cbz	r7, 263fa <mbedtls_ctr_drbg_reseed_internal+0x62>
   263f8:	b9c6      	cbnz	r6, 2642c <mbedtls_ctr_drbg_reseed_internal+0x94>
   263fa:	4917      	ldr	r1, [pc, #92]	; (26458 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   263fc:	4642      	mov	r2, r8
   263fe:	4608      	mov	r0, r1
   26400:	f7ff fde4 	bl	25fcc <block_cipher_df>
   26404:	4605      	mov	r5, r0
   26406:	b138      	cbz	r0, 26418 <mbedtls_ctr_drbg_reseed_internal+0x80>
   26408:	4813      	ldr	r0, [pc, #76]	; (26458 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2640a:	f44f 71c0 	mov.w	r1, #384	; 0x180
   2640e:	f7ff fdd3 	bl	25fb8 <mbedtls_platform_zeroize>
   26412:	4628      	mov	r0, r5
   26414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26418:	490f      	ldr	r1, [pc, #60]	; (26458 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2641a:	4620      	mov	r0, r4
   2641c:	f7ff ff16 	bl	2624c <ctr_drbg_update_internal>
   26420:	4605      	mov	r5, r0
   26422:	2800      	cmp	r0, #0
   26424:	d1f0      	bne.n	26408 <mbedtls_ctr_drbg_reseed_internal+0x70>
   26426:	2301      	movs	r3, #1
   26428:	6123      	str	r3, [r4, #16]
   2642a:	e7ed      	b.n	26408 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2642c:	4639      	mov	r1, r7
   2642e:	eb09 0008 	add.w	r0, r9, r8
   26432:	4632      	mov	r2, r6
   26434:	f004 fb31 	bl	2aa9a <memcpy>
   26438:	4907      	ldr	r1, [pc, #28]	; (26458 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   2643a:	44b0      	add	r8, r6
   2643c:	4642      	mov	r2, r8
   2643e:	4608      	mov	r0, r1
   26440:	f7ff fdc4 	bl	25fcc <block_cipher_df>
   26444:	4605      	mov	r5, r0
   26446:	2800      	cmp	r0, #0
   26448:	d1de      	bne.n	26408 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2644a:	e7e5      	b.n	26418 <mbedtls_ctr_drbg_reseed_internal+0x80>
   2644c:	f06f 0537 	mvn.w	r5, #55	; 0x37
   26450:	e7df      	b.n	26412 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   26452:	f06f 0533 	mvn.w	r5, #51	; 0x33
   26456:	e7dc      	b.n	26412 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   26458:	20002f10 	.word	0x20002f10

0002645c <cc_mbedtls_ctr_drbg_init>:
   2645c:	b510      	push	{r4, lr}
   2645e:	22a4      	movs	r2, #164	; 0xa4
   26460:	4604      	mov	r4, r0
   26462:	2100      	movs	r1, #0
   26464:	f004 fb24 	bl	2aab0 <memset>
   26468:	4b06      	ldr	r3, [pc, #24]	; (26484 <cc_mbedtls_ctr_drbg_init+0x28>)
   2646a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2646e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   26472:	6121      	str	r1, [r4, #16]
   26474:	61e2      	str	r2, [r4, #28]
   26476:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   2647a:	681b      	ldr	r3, [r3, #0]
   2647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26480:	4718      	bx	r3
   26482:	bf00      	nop
   26484:	200006b4 	.word	0x200006b4

00026488 <cc_mbedtls_ctr_drbg_seed>:
   26488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2648c:	b085      	sub	sp, #20
   2648e:	4605      	mov	r5, r0
   26490:	460f      	mov	r7, r1
   26492:	4616      	mov	r6, r2
   26494:	4668      	mov	r0, sp
   26496:	2210      	movs	r2, #16
   26498:	2100      	movs	r1, #0
   2649a:	4699      	mov	r9, r3
   2649c:	f004 fb08 	bl	2aab0 <memset>
   264a0:	4b1d      	ldr	r3, [pc, #116]	; (26518 <cc_mbedtls_ctr_drbg_seed+0x90>)
   264a2:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   264a6:	681b      	ldr	r3, [r3, #0]
   264a8:	4640      	mov	r0, r8
   264aa:	4798      	blx	r3
   264ac:	b120      	cbz	r0, 264b8 <cc_mbedtls_ctr_drbg_seed+0x30>
   264ae:	4604      	mov	r4, r0
   264b0:	4620      	mov	r0, r4
   264b2:	b005      	add	sp, #20
   264b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   264b8:	f105 0420 	add.w	r4, r5, #32
   264bc:	4620      	mov	r0, r4
   264be:	f000 ff7f 	bl	273c0 <cc_mbedtls_aes_init>
   264c2:	69aa      	ldr	r2, [r5, #24]
   264c4:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   264c8:	692e      	ldr	r6, [r5, #16]
   264ca:	b9e2      	cbnz	r2, 26506 <cc_mbedtls_ctr_drbg_seed+0x7e>
   264cc:	2220      	movs	r2, #32
   264ce:	2e00      	cmp	r6, #0
   264d0:	61aa      	str	r2, [r5, #24]
   264d2:	db1f      	blt.n	26514 <cc_mbedtls_ctr_drbg_seed+0x8c>
   264d4:	4620      	mov	r0, r4
   264d6:	4669      	mov	r1, sp
   264d8:	2280      	movs	r2, #128	; 0x80
   264da:	f000 ff87 	bl	273ec <cc_mbedtls_aes_setkey_enc>
   264de:	4604      	mov	r4, r0
   264e0:	b930      	cbnz	r0, 264f0 <cc_mbedtls_ctr_drbg_seed+0x68>
   264e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   264e4:	4633      	mov	r3, r6
   264e6:	4649      	mov	r1, r9
   264e8:	4628      	mov	r0, r5
   264ea:	f7ff ff55 	bl	26398 <mbedtls_ctr_drbg_reseed_internal>
   264ee:	4604      	mov	r4, r0
   264f0:	4b0a      	ldr	r3, [pc, #40]	; (2651c <cc_mbedtls_ctr_drbg_seed+0x94>)
   264f2:	4640      	mov	r0, r8
   264f4:	681b      	ldr	r3, [r3, #0]
   264f6:	4798      	blx	r3
   264f8:	2800      	cmp	r0, #0
   264fa:	bf18      	it	ne
   264fc:	4604      	movne	r4, r0
   264fe:	4620      	mov	r0, r4
   26500:	b005      	add	sp, #20
   26502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26506:	2e00      	cmp	r6, #0
   26508:	dae4      	bge.n	264d4 <cc_mbedtls_ctr_drbg_seed+0x4c>
   2650a:	2a17      	cmp	r2, #23
   2650c:	d802      	bhi.n	26514 <cc_mbedtls_ctr_drbg_seed+0x8c>
   2650e:	1c53      	adds	r3, r2, #1
   26510:	085e      	lsrs	r6, r3, #1
   26512:	e7df      	b.n	264d4 <cc_mbedtls_ctr_drbg_seed+0x4c>
   26514:	2600      	movs	r6, #0
   26516:	e7dd      	b.n	264d4 <cc_mbedtls_ctr_drbg_seed+0x4c>
   26518:	200006b8 	.word	0x200006b8
   2651c:	200006bc 	.word	0x200006bc

00026520 <cc_mbedtls_ctr_drbg_random_with_add>:
   26520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26524:	b08d      	sub	sp, #52	; 0x34
   26526:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2652a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   2652e:	f200 80e4 	bhi.w	266fa <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   26532:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   26536:	f200 80dd 	bhi.w	266f4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   2653a:	4604      	mov	r4, r0
   2653c:	4615      	mov	r5, r2
   2653e:	460e      	mov	r6, r1
   26540:	2220      	movs	r2, #32
   26542:	2100      	movs	r1, #0
   26544:	a804      	add	r0, sp, #16
   26546:	461f      	mov	r7, r3
   26548:	f004 fab2 	bl	2aab0 <memset>
   2654c:	4b6c      	ldr	r3, [pc, #432]	; (26700 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   2654e:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   26552:	681b      	ldr	r3, [r3, #0]
   26554:	4648      	mov	r0, r9
   26556:	4798      	blx	r3
   26558:	4683      	mov	fp, r0
   2655a:	2800      	cmp	r0, #0
   2655c:	f040 8093 	bne.w	26686 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   26560:	6922      	ldr	r2, [r4, #16]
   26562:	69e3      	ldr	r3, [r4, #28]
   26564:	429a      	cmp	r2, r3
   26566:	f300 8092 	bgt.w	2668e <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   2656a:	6963      	ldr	r3, [r4, #20]
   2656c:	2b00      	cmp	r3, #0
   2656e:	f040 808e 	bne.w	2668e <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   26572:	f1b8 0f00 	cmp.w	r8, #0
   26576:	f040 80a9 	bne.w	266cc <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   2657a:	f8df a188 	ldr.w	sl, [pc, #392]	; 26704 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   2657e:	466f      	mov	r7, sp
   26580:	2d00      	cmp	r5, #0
   26582:	f000 8098 	beq.w	266b6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   26586:	f104 0820 	add.w	r8, r4, #32
   2658a:	466f      	mov	r7, sp
   2658c:	e00e      	b.n	265ac <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   2658e:	2d10      	cmp	r5, #16
   26590:	46ab      	mov	fp, r5
   26592:	bf28      	it	cs
   26594:	f04f 0b10 	movcs.w	fp, #16
   26598:	4630      	mov	r0, r6
   2659a:	465a      	mov	r2, fp
   2659c:	4639      	mov	r1, r7
   2659e:	f004 fa7c 	bl	2aa9a <memcpy>
   265a2:	ebb5 050b 	subs.w	r5, r5, fp
   265a6:	445e      	add	r6, fp
   265a8:	f000 8085 	beq.w	266b6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   265ac:	7be3      	ldrb	r3, [r4, #15]
   265ae:	3301      	adds	r3, #1
   265b0:	b2db      	uxtb	r3, r3
   265b2:	73e3      	strb	r3, [r4, #15]
   265b4:	2b00      	cmp	r3, #0
   265b6:	d14d      	bne.n	26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   265b8:	7ba3      	ldrb	r3, [r4, #14]
   265ba:	3301      	adds	r3, #1
   265bc:	b2db      	uxtb	r3, r3
   265be:	73a3      	strb	r3, [r4, #14]
   265c0:	2b00      	cmp	r3, #0
   265c2:	d147      	bne.n	26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   265c4:	7b63      	ldrb	r3, [r4, #13]
   265c6:	3301      	adds	r3, #1
   265c8:	b2db      	uxtb	r3, r3
   265ca:	7363      	strb	r3, [r4, #13]
   265cc:	2b00      	cmp	r3, #0
   265ce:	d141      	bne.n	26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   265d0:	7b23      	ldrb	r3, [r4, #12]
   265d2:	3301      	adds	r3, #1
   265d4:	b2db      	uxtb	r3, r3
   265d6:	7323      	strb	r3, [r4, #12]
   265d8:	2b00      	cmp	r3, #0
   265da:	d13b      	bne.n	26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   265dc:	7ae3      	ldrb	r3, [r4, #11]
   265de:	3301      	adds	r3, #1
   265e0:	b2db      	uxtb	r3, r3
   265e2:	72e3      	strb	r3, [r4, #11]
   265e4:	2b00      	cmp	r3, #0
   265e6:	d135      	bne.n	26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   265e8:	7aa3      	ldrb	r3, [r4, #10]
   265ea:	3301      	adds	r3, #1
   265ec:	b2db      	uxtb	r3, r3
   265ee:	72a3      	strb	r3, [r4, #10]
   265f0:	2b00      	cmp	r3, #0
   265f2:	d12f      	bne.n	26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   265f4:	7a63      	ldrb	r3, [r4, #9]
   265f6:	3301      	adds	r3, #1
   265f8:	b2db      	uxtb	r3, r3
   265fa:	7263      	strb	r3, [r4, #9]
   265fc:	bb53      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   265fe:	7a23      	ldrb	r3, [r4, #8]
   26600:	3301      	adds	r3, #1
   26602:	b2db      	uxtb	r3, r3
   26604:	7223      	strb	r3, [r4, #8]
   26606:	bb2b      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26608:	79e3      	ldrb	r3, [r4, #7]
   2660a:	3301      	adds	r3, #1
   2660c:	b2db      	uxtb	r3, r3
   2660e:	71e3      	strb	r3, [r4, #7]
   26610:	bb03      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26612:	79a3      	ldrb	r3, [r4, #6]
   26614:	3301      	adds	r3, #1
   26616:	b2db      	uxtb	r3, r3
   26618:	71a3      	strb	r3, [r4, #6]
   2661a:	b9db      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2661c:	7963      	ldrb	r3, [r4, #5]
   2661e:	3301      	adds	r3, #1
   26620:	b2db      	uxtb	r3, r3
   26622:	7163      	strb	r3, [r4, #5]
   26624:	b9b3      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26626:	7923      	ldrb	r3, [r4, #4]
   26628:	3301      	adds	r3, #1
   2662a:	b2db      	uxtb	r3, r3
   2662c:	7123      	strb	r3, [r4, #4]
   2662e:	b98b      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26630:	78e3      	ldrb	r3, [r4, #3]
   26632:	3301      	adds	r3, #1
   26634:	b2db      	uxtb	r3, r3
   26636:	70e3      	strb	r3, [r4, #3]
   26638:	b963      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2663a:	78a3      	ldrb	r3, [r4, #2]
   2663c:	3301      	adds	r3, #1
   2663e:	b2db      	uxtb	r3, r3
   26640:	70a3      	strb	r3, [r4, #2]
   26642:	b93b      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   26644:	7863      	ldrb	r3, [r4, #1]
   26646:	3301      	adds	r3, #1
   26648:	b2db      	uxtb	r3, r3
   2664a:	7063      	strb	r3, [r4, #1]
   2664c:	b913      	cbnz	r3, 26654 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   2664e:	7823      	ldrb	r3, [r4, #0]
   26650:	3301      	adds	r3, #1
   26652:	7023      	strb	r3, [r4, #0]
   26654:	463b      	mov	r3, r7
   26656:	4622      	mov	r2, r4
   26658:	2101      	movs	r1, #1
   2665a:	4640      	mov	r0, r8
   2665c:	f000 fee0 	bl	27420 <cc_mbedtls_aes_crypt_ecb>
   26660:	4683      	mov	fp, r0
   26662:	2800      	cmp	r0, #0
   26664:	d093      	beq.n	2658e <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   26666:	f8da 3000 	ldr.w	r3, [sl]
   2666a:	4648      	mov	r0, r9
   2666c:	4798      	blx	r3
   2666e:	2120      	movs	r1, #32
   26670:	4603      	mov	r3, r0
   26672:	a804      	add	r0, sp, #16
   26674:	2b00      	cmp	r3, #0
   26676:	bf18      	it	ne
   26678:	469b      	movne	fp, r3
   2667a:	f7ff fc9d 	bl	25fb8 <mbedtls_platform_zeroize>
   2667e:	4638      	mov	r0, r7
   26680:	2110      	movs	r1, #16
   26682:	f7ff fc99 	bl	25fb8 <mbedtls_platform_zeroize>
   26686:	4658      	mov	r0, fp
   26688:	b00d      	add	sp, #52	; 0x34
   2668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2668e:	4642      	mov	r2, r8
   26690:	4639      	mov	r1, r7
   26692:	2300      	movs	r3, #0
   26694:	4620      	mov	r0, r4
   26696:	f7ff fe7f 	bl	26398 <mbedtls_ctr_drbg_reseed_internal>
   2669a:	f8df a068 	ldr.w	sl, [pc, #104]	; 26704 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   2669e:	2800      	cmp	r0, #0
   266a0:	f43f af6d 	beq.w	2657e <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   266a4:	f8da 3000 	ldr.w	r3, [sl]
   266a8:	4648      	mov	r0, r9
   266aa:	4798      	blx	r3
   266ac:	4683      	mov	fp, r0
   266ae:	2800      	cmp	r0, #0
   266b0:	f43f af65 	beq.w	2657e <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   266b4:	e7e7      	b.n	26686 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   266b6:	a904      	add	r1, sp, #16
   266b8:	4620      	mov	r0, r4
   266ba:	f7ff fdc7 	bl	2624c <ctr_drbg_update_internal>
   266be:	4683      	mov	fp, r0
   266c0:	2800      	cmp	r0, #0
   266c2:	d1d0      	bne.n	26666 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   266c4:	6923      	ldr	r3, [r4, #16]
   266c6:	3301      	adds	r3, #1
   266c8:	6123      	str	r3, [r4, #16]
   266ca:	e7cc      	b.n	26666 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   266cc:	4642      	mov	r2, r8
   266ce:	4639      	mov	r1, r7
   266d0:	a804      	add	r0, sp, #16
   266d2:	f7ff fc7b 	bl	25fcc <block_cipher_df>
   266d6:	4683      	mov	fp, r0
   266d8:	b118      	cbz	r0, 266e2 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   266da:	f8df a028 	ldr.w	sl, [pc, #40]	; 26704 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   266de:	466f      	mov	r7, sp
   266e0:	e7c1      	b.n	26666 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   266e2:	a904      	add	r1, sp, #16
   266e4:	4620      	mov	r0, r4
   266e6:	f7ff fdb1 	bl	2624c <ctr_drbg_update_internal>
   266ea:	4683      	mov	fp, r0
   266ec:	2800      	cmp	r0, #0
   266ee:	f43f af44 	beq.w	2657a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   266f2:	e7f2      	b.n	266da <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   266f4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   266f8:	e7c5      	b.n	26686 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   266fa:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   266fe:	e7c2      	b.n	26686 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   26700:	200006b8 	.word	0x200006b8
   26704:	200006bc 	.word	0x200006bc

00026708 <entropy_update>:
   26708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2670c:	2b20      	cmp	r3, #32
   2670e:	b08b      	sub	sp, #44	; 0x2c
   26710:	461d      	mov	r5, r3
   26712:	4606      	mov	r6, r0
   26714:	4689      	mov	r9, r1
   26716:	4690      	mov	r8, r2
   26718:	d826      	bhi.n	26768 <entropy_update+0x60>
   2671a:	b2db      	uxtb	r3, r3
   2671c:	af02      	add	r7, sp, #8
   2671e:	6831      	ldr	r1, [r6, #0]
   26720:	f88d 9004 	strb.w	r9, [sp, #4]
   26724:	f88d 3005 	strb.w	r3, [sp, #5]
   26728:	f106 0904 	add.w	r9, r6, #4
   2672c:	b921      	cbnz	r1, 26738 <entropy_update+0x30>
   2672e:	4648      	mov	r0, r9
   26730:	f000 feba 	bl	274a8 <cc_mbedtls_sha256_starts>
   26734:	4604      	mov	r4, r0
   26736:	b940      	cbnz	r0, 2674a <entropy_update+0x42>
   26738:	2301      	movs	r3, #1
   2673a:	6033      	str	r3, [r6, #0]
   2673c:	2202      	movs	r2, #2
   2673e:	a901      	add	r1, sp, #4
   26740:	4648      	mov	r0, r9
   26742:	f000 fec5 	bl	274d0 <cc_mbedtls_sha256_update>
   26746:	4604      	mov	r4, r0
   26748:	b138      	cbz	r0, 2675a <entropy_update+0x52>
   2674a:	4638      	mov	r0, r7
   2674c:	2120      	movs	r1, #32
   2674e:	f7ff fc33 	bl	25fb8 <mbedtls_platform_zeroize>
   26752:	4620      	mov	r0, r4
   26754:	b00b      	add	sp, #44	; 0x2c
   26756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2675a:	462a      	mov	r2, r5
   2675c:	4641      	mov	r1, r8
   2675e:	4648      	mov	r0, r9
   26760:	f000 feb6 	bl	274d0 <cc_mbedtls_sha256_update>
   26764:	4604      	mov	r4, r0
   26766:	e7f0      	b.n	2674a <entropy_update+0x42>
   26768:	af02      	add	r7, sp, #8
   2676a:	4619      	mov	r1, r3
   2676c:	4610      	mov	r0, r2
   2676e:	2300      	movs	r3, #0
   26770:	463a      	mov	r2, r7
   26772:	f000 ffad 	bl	276d0 <cc_mbedtls_sha256>
   26776:	4604      	mov	r4, r0
   26778:	2800      	cmp	r0, #0
   2677a:	d1e6      	bne.n	2674a <entropy_update+0x42>
   2677c:	2320      	movs	r3, #32
   2677e:	461d      	mov	r5, r3
   26780:	46b8      	mov	r8, r7
   26782:	e7cc      	b.n	2671e <entropy_update+0x16>

00026784 <entropy_gather_internal.part.0>:
   26784:	b5f0      	push	{r4, r5, r6, r7, lr}
   26786:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2678a:	b0a7      	sub	sp, #156	; 0x9c
   2678c:	2b00      	cmp	r3, #0
   2678e:	bfd8      	it	le
   26790:	ae02      	addle	r6, sp, #8
   26792:	dd2c      	ble.n	267ee <entropy_gather_internal.part.0+0x6a>
   26794:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   26798:	4605      	mov	r5, r0
   2679a:	2300      	movs	r3, #0
   2679c:	ae02      	add	r6, sp, #8
   2679e:	9301      	str	r3, [sp, #4]
   267a0:	f1a4 0701 	sub.w	r7, r4, #1
   267a4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   267a8:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   267ac:	4631      	mov	r1, r6
   267ae:	ab01      	add	r3, sp, #4
   267b0:	2290      	movs	r2, #144	; 0x90
   267b2:	47a0      	blx	r4
   267b4:	fab7 f787 	clz	r7, r7
   267b8:	097f      	lsrs	r7, r7, #5
   267ba:	4604      	mov	r4, r0
   267bc:	b910      	cbnz	r0, 267c4 <entropy_gather_internal.part.0+0x40>
   267be:	9b01      	ldr	r3, [sp, #4]
   267c0:	b93b      	cbnz	r3, 267d2 <entropy_gather_internal.part.0+0x4e>
   267c2:	b1a7      	cbz	r7, 267ee <entropy_gather_internal.part.0+0x6a>
   267c4:	4630      	mov	r0, r6
   267c6:	2190      	movs	r1, #144	; 0x90
   267c8:	f7ff fbf6 	bl	25fb8 <mbedtls_platform_zeroize>
   267cc:	4620      	mov	r0, r4
   267ce:	b027      	add	sp, #156	; 0x9c
   267d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   267d2:	4601      	mov	r1, r0
   267d4:	4632      	mov	r2, r6
   267d6:	4628      	mov	r0, r5
   267d8:	f7ff ff96 	bl	26708 <entropy_update>
   267dc:	b950      	cbnz	r0, 267f4 <entropy_gather_internal.part.0+0x70>
   267de:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   267e2:	9a01      	ldr	r2, [sp, #4]
   267e4:	4413      	add	r3, r2
   267e6:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   267ea:	2f00      	cmp	r7, #0
   267ec:	d1ea      	bne.n	267c4 <entropy_gather_internal.part.0+0x40>
   267ee:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   267f2:	e7e7      	b.n	267c4 <entropy_gather_internal.part.0+0x40>
   267f4:	4604      	mov	r4, r0
   267f6:	4620      	mov	r0, r4
   267f8:	b027      	add	sp, #156	; 0x9c
   267fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000267fc <cc_mbedtls_entropy_init>:
   267fc:	b570      	push	{r4, r5, r6, lr}
   267fe:	2500      	movs	r5, #0
   26800:	4604      	mov	r4, r0
   26802:	4629      	mov	r1, r5
   26804:	2214      	movs	r2, #20
   26806:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   2680a:	30f8      	adds	r0, #248	; 0xf8
   2680c:	f004 f950 	bl	2aab0 <memset>
   26810:	4b15      	ldr	r3, [pc, #84]	; (26868 <cc_mbedtls_entropy_init+0x6c>)
   26812:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   26816:	681b      	ldr	r3, [r3, #0]
   26818:	4630      	mov	r0, r6
   2681a:	4798      	blx	r3
   2681c:	4620      	mov	r0, r4
   2681e:	f840 5b04 	str.w	r5, [r0], #4
   26822:	f000 fe27 	bl	27474 <cc_mbedtls_sha256_init>
   26826:	4b11      	ldr	r3, [pc, #68]	; (2686c <cc_mbedtls_entropy_init+0x70>)
   26828:	4630      	mov	r0, r6
   2682a:	681b      	ldr	r3, [r3, #0]
   2682c:	4798      	blx	r3
   2682e:	b9c8      	cbnz	r0, 26864 <cc_mbedtls_entropy_init+0x68>
   26830:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   26834:	42ab      	cmp	r3, r5
   26836:	dc0f      	bgt.n	26858 <cc_mbedtls_entropy_init+0x5c>
   26838:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2683c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   26840:	490b      	ldr	r1, [pc, #44]	; (26870 <cc_mbedtls_entropy_init+0x74>)
   26842:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   26846:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   2684a:	3301      	adds	r3, #1
   2684c:	2020      	movs	r0, #32
   2684e:	2101      	movs	r1, #1
   26850:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   26854:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   26858:	4b06      	ldr	r3, [pc, #24]	; (26874 <cc_mbedtls_entropy_init+0x78>)
   2685a:	4630      	mov	r0, r6
   2685c:	681b      	ldr	r3, [r3, #0]
   2685e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26862:	4718      	bx	r3
   26864:	bd70      	pop	{r4, r5, r6, pc}
   26866:	bf00      	nop
   26868:	200006b4 	.word	0x200006b4
   2686c:	200006b8 	.word	0x200006b8
   26870:	000272c5 	.word	0x000272c5
   26874:	200006bc 	.word	0x200006bc

00026878 <cc_mbedtls_entropy_func>:
   26878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2687c:	2a20      	cmp	r2, #32
   2687e:	b088      	sub	sp, #32
   26880:	d876      	bhi.n	26970 <cc_mbedtls_entropy_func+0xf8>
   26882:	4b3d      	ldr	r3, [pc, #244]	; (26978 <cc_mbedtls_entropy_func+0x100>)
   26884:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   26888:	681b      	ldr	r3, [r3, #0]
   2688a:	4604      	mov	r4, r0
   2688c:	4648      	mov	r0, r9
   2688e:	4617      	mov	r7, r2
   26890:	4688      	mov	r8, r1
   26892:	4798      	blx	r3
   26894:	4605      	mov	r5, r0
   26896:	bba0      	cbnz	r0, 26902 <cc_mbedtls_entropy_func+0x8a>
   26898:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   2689c:	f240 1601 	movw	r6, #257	; 0x101
   268a0:	e001      	b.n	268a6 <cc_mbedtls_entropy_func+0x2e>
   268a2:	3e01      	subs	r6, #1
   268a4:	d060      	beq.n	26968 <cc_mbedtls_entropy_func+0xf0>
   268a6:	4620      	mov	r0, r4
   268a8:	b37b      	cbz	r3, 2690a <cc_mbedtls_entropy_func+0x92>
   268aa:	f7ff ff6b 	bl	26784 <entropy_gather_internal.part.0>
   268ae:	4605      	mov	r5, r0
   268b0:	bb68      	cbnz	r0, 2690e <cc_mbedtls_entropy_func+0x96>
   268b2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   268b6:	2b00      	cmp	r3, #0
   268b8:	ddf3      	ble.n	268a2 <cc_mbedtls_entropy_func+0x2a>
   268ba:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   268be:	4290      	cmp	r0, r2
   268c0:	d3ef      	bcc.n	268a2 <cc_mbedtls_entropy_func+0x2a>
   268c2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   268c6:	2a01      	cmp	r2, #1
   268c8:	d1eb      	bne.n	268a2 <cc_mbedtls_entropy_func+0x2a>
   268ca:	281f      	cmp	r0, #31
   268cc:	d9e9      	bls.n	268a2 <cc_mbedtls_entropy_func+0x2a>
   268ce:	466e      	mov	r6, sp
   268d0:	4629      	mov	r1, r5
   268d2:	2220      	movs	r2, #32
   268d4:	4630      	mov	r0, r6
   268d6:	f104 0a04 	add.w	sl, r4, #4
   268da:	f004 f8e9 	bl	2aab0 <memset>
   268de:	4631      	mov	r1, r6
   268e0:	4650      	mov	r0, sl
   268e2:	f000 fe1f 	bl	27524 <cc_mbedtls_sha256_finish>
   268e6:	4605      	mov	r5, r0
   268e8:	b198      	cbz	r0, 26912 <cc_mbedtls_entropy_func+0x9a>
   268ea:	4630      	mov	r0, r6
   268ec:	2120      	movs	r1, #32
   268ee:	f7ff fb63 	bl	25fb8 <mbedtls_platform_zeroize>
   268f2:	4b22      	ldr	r3, [pc, #136]	; (2697c <cc_mbedtls_entropy_func+0x104>)
   268f4:	4648      	mov	r0, r9
   268f6:	681b      	ldr	r3, [r3, #0]
   268f8:	4798      	blx	r3
   268fa:	2800      	cmp	r0, #0
   268fc:	bf18      	it	ne
   268fe:	f06f 051d 	mvnne.w	r5, #29
   26902:	4628      	mov	r0, r5
   26904:	b008      	add	sp, #32
   26906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2690a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   2690e:	466e      	mov	r6, sp
   26910:	e7eb      	b.n	268ea <cc_mbedtls_entropy_func+0x72>
   26912:	4650      	mov	r0, sl
   26914:	f000 fdc2 	bl	2749c <cc_mbedtls_sha256_free>
   26918:	4650      	mov	r0, sl
   2691a:	f000 fdab 	bl	27474 <cc_mbedtls_sha256_init>
   2691e:	4629      	mov	r1, r5
   26920:	4650      	mov	r0, sl
   26922:	f000 fdc1 	bl	274a8 <cc_mbedtls_sha256_starts>
   26926:	4605      	mov	r5, r0
   26928:	2800      	cmp	r0, #0
   2692a:	d1de      	bne.n	268ea <cc_mbedtls_entropy_func+0x72>
   2692c:	4650      	mov	r0, sl
   2692e:	2220      	movs	r2, #32
   26930:	4631      	mov	r1, r6
   26932:	f000 fdcd 	bl	274d0 <cc_mbedtls_sha256_update>
   26936:	4605      	mov	r5, r0
   26938:	2800      	cmp	r0, #0
   2693a:	d1d6      	bne.n	268ea <cc_mbedtls_entropy_func+0x72>
   2693c:	4603      	mov	r3, r0
   2693e:	4632      	mov	r2, r6
   26940:	2120      	movs	r1, #32
   26942:	4630      	mov	r0, r6
   26944:	f000 fec4 	bl	276d0 <cc_mbedtls_sha256>
   26948:	4605      	mov	r5, r0
   2694a:	2800      	cmp	r0, #0
   2694c:	d1cd      	bne.n	268ea <cc_mbedtls_entropy_func+0x72>
   2694e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   26952:	2b00      	cmp	r3, #0
   26954:	bfc4      	itt	gt
   26956:	2300      	movgt	r3, #0
   26958:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   2695c:	463a      	mov	r2, r7
   2695e:	4640      	mov	r0, r8
   26960:	4631      	mov	r1, r6
   26962:	f004 f89a 	bl	2aa9a <memcpy>
   26966:	e7c0      	b.n	268ea <cc_mbedtls_entropy_func+0x72>
   26968:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   2696c:	466e      	mov	r6, sp
   2696e:	e7bc      	b.n	268ea <cc_mbedtls_entropy_func+0x72>
   26970:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   26974:	e7c5      	b.n	26902 <cc_mbedtls_entropy_func+0x8a>
   26976:	bf00      	nop
   26978:	200006b8 	.word	0x200006b8
   2697c:	200006bc 	.word	0x200006bc

00026980 <RndStartupTest.constprop.0>:
   26980:	b530      	push	{r4, r5, lr}
   26982:	b0c3      	sub	sp, #268	; 0x10c
   26984:	22dc      	movs	r2, #220	; 0xdc
   26986:	2100      	movs	r1, #0
   26988:	a80b      	add	r0, sp, #44	; 0x2c
   2698a:	f004 f891 	bl	2aab0 <memset>
   2698e:	2228      	movs	r2, #40	; 0x28
   26990:	2100      	movs	r1, #0
   26992:	a801      	add	r0, sp, #4
   26994:	f004 f88c 	bl	2aab0 <memset>
   26998:	a801      	add	r0, sp, #4
   2699a:	f000 fec1 	bl	27720 <RNG_PLAT_SetUserRngParameters>
   2699e:	4604      	mov	r4, r0
   269a0:	b110      	cbz	r0, 269a8 <RndStartupTest.constprop.0+0x28>
   269a2:	4620      	mov	r0, r4
   269a4:	b043      	add	sp, #268	; 0x10c
   269a6:	bd30      	pop	{r4, r5, pc}
   269a8:	4d18      	ldr	r5, [pc, #96]	; (26a0c <RndStartupTest.constprop.0+0x8c>)
   269aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   269ae:	6828      	ldr	r0, [r5, #0]
   269b0:	f000 f93c 	bl	26c2c <CC_PalMutexLock>
   269b4:	4604      	mov	r4, r0
   269b6:	b9c0      	cbnz	r0, 269ea <RndStartupTest.constprop.0+0x6a>
   269b8:	2000      	movs	r0, #0
   269ba:	f000 f967 	bl	26c8c <CC_PalPowerSaveModeSelect>
   269be:	bb00      	cbnz	r0, 26a02 <RndStartupTest.constprop.0+0x82>
   269c0:	4a13      	ldr	r2, [pc, #76]	; (26a10 <RndStartupTest.constprop.0+0x90>)
   269c2:	a901      	add	r1, sp, #4
   269c4:	a80b      	add	r0, sp, #44	; 0x2c
   269c6:	f000 fc6f 	bl	272a8 <LLF_RND_RunTrngStartupTest>
   269ca:	4604      	mov	r4, r0
   269cc:	2001      	movs	r0, #1
   269ce:	f000 f95d 	bl	26c8c <CC_PalPowerSaveModeSelect>
   269d2:	b990      	cbnz	r0, 269fa <RndStartupTest.constprop.0+0x7a>
   269d4:	6828      	ldr	r0, [r5, #0]
   269d6:	f000 f931 	bl	26c3c <CC_PalMutexUnlock>
   269da:	2800      	cmp	r0, #0
   269dc:	d0e1      	beq.n	269a2 <RndStartupTest.constprop.0+0x22>
   269de:	480d      	ldr	r0, [pc, #52]	; (26a14 <RndStartupTest.constprop.0+0x94>)
   269e0:	f7ff f9d8 	bl	25d94 <CC_PalAbort>
   269e4:	4620      	mov	r0, r4
   269e6:	b043      	add	sp, #268	; 0x10c
   269e8:	bd30      	pop	{r4, r5, pc}
   269ea:	480b      	ldr	r0, [pc, #44]	; (26a18 <RndStartupTest.constprop.0+0x98>)
   269ec:	f7ff f9d2 	bl	25d94 <CC_PalAbort>
   269f0:	2c01      	cmp	r4, #1
   269f2:	bf08      	it	eq
   269f4:	2405      	moveq	r4, #5
   269f6:	d0ed      	beq.n	269d4 <RndStartupTest.constprop.0+0x54>
   269f8:	e7de      	b.n	269b8 <RndStartupTest.constprop.0+0x38>
   269fa:	4808      	ldr	r0, [pc, #32]	; (26a1c <RndStartupTest.constprop.0+0x9c>)
   269fc:	f7ff f9ca 	bl	25d94 <CC_PalAbort>
   26a00:	e7e8      	b.n	269d4 <RndStartupTest.constprop.0+0x54>
   26a02:	4807      	ldr	r0, [pc, #28]	; (26a20 <RndStartupTest.constprop.0+0xa0>)
   26a04:	f7ff f9c6 	bl	25d94 <CC_PalAbort>
   26a08:	e7da      	b.n	269c0 <RndStartupTest.constprop.0+0x40>
   26a0a:	bf00      	nop
   26a0c:	200006b0 	.word	0x200006b0
   26a10:	200030f8 	.word	0x200030f8
   26a14:	0002e428 	.word	0x0002e428
   26a18:	0002e3d0 	.word	0x0002e3d0
   26a1c:	0002e408 	.word	0x0002e408
   26a20:	0002e3e8 	.word	0x0002e3e8

00026a24 <CC_LibInit>:
   26a24:	b510      	push	{r4, lr}
   26a26:	b082      	sub	sp, #8
   26a28:	f000 f854 	bl	26ad4 <CC_HalInit>
   26a2c:	b128      	cbz	r0, 26a3a <CC_LibInit+0x16>
   26a2e:	f000 f8a3 	bl	26b78 <CC_PalTerminate>
   26a32:	2403      	movs	r4, #3
   26a34:	4620      	mov	r0, r4
   26a36:	b002      	add	sp, #8
   26a38:	bd10      	pop	{r4, pc}
   26a3a:	f000 f86f 	bl	26b1c <CC_PalInit>
   26a3e:	b9d0      	cbnz	r0, 26a76 <CC_LibInit+0x52>
   26a40:	f000 f924 	bl	26c8c <CC_PalPowerSaveModeSelect>
   26a44:	b9d8      	cbnz	r0, 26a7e <CC_LibInit+0x5a>
   26a46:	4b1e      	ldr	r3, [pc, #120]	; (26ac0 <CC_LibInit+0x9c>)
   26a48:	681b      	ldr	r3, [r3, #0]
   26a4a:	0e1b      	lsrs	r3, r3, #24
   26a4c:	2bf0      	cmp	r3, #240	; 0xf0
   26a4e:	d10a      	bne.n	26a66 <CC_LibInit+0x42>
   26a50:	4a1c      	ldr	r2, [pc, #112]	; (26ac4 <CC_LibInit+0xa0>)
   26a52:	4b1d      	ldr	r3, [pc, #116]	; (26ac8 <CC_LibInit+0xa4>)
   26a54:	6812      	ldr	r2, [r2, #0]
   26a56:	429a      	cmp	r2, r3
   26a58:	d029      	beq.n	26aae <CC_LibInit+0x8a>
   26a5a:	f000 f83d 	bl	26ad8 <CC_HalTerminate>
   26a5e:	2407      	movs	r4, #7
   26a60:	f000 f88a 	bl	26b78 <CC_PalTerminate>
   26a64:	e7e6      	b.n	26a34 <CC_LibInit+0x10>
   26a66:	f000 f837 	bl	26ad8 <CC_HalTerminate>
   26a6a:	f000 f885 	bl	26b78 <CC_PalTerminate>
   26a6e:	2406      	movs	r4, #6
   26a70:	4620      	mov	r0, r4
   26a72:	b002      	add	sp, #8
   26a74:	bd10      	pop	{r4, pc}
   26a76:	2404      	movs	r4, #4
   26a78:	4620      	mov	r0, r4
   26a7a:	b002      	add	sp, #8
   26a7c:	bd10      	pop	{r4, pc}
   26a7e:	f000 f82b 	bl	26ad8 <CC_HalTerminate>
   26a82:	f000 f879 	bl	26b78 <CC_PalTerminate>
   26a86:	f7ff ff7b 	bl	26980 <RndStartupTest.constprop.0>
   26a8a:	4604      	mov	r4, r0
   26a8c:	b958      	cbnz	r0, 26aa6 <CC_LibInit+0x82>
   26a8e:	4602      	mov	r2, r0
   26a90:	4601      	mov	r1, r0
   26a92:	f7ff f9a7 	bl	25de4 <nrf_cc3xx_platform_ctr_drbg_init>
   26a96:	b930      	cbnz	r0, 26aa6 <CC_LibInit+0x82>
   26a98:	490c      	ldr	r1, [pc, #48]	; (26acc <CC_LibInit+0xa8>)
   26a9a:	ab01      	add	r3, sp, #4
   26a9c:	2268      	movs	r2, #104	; 0x68
   26a9e:	f7ff f9d5 	bl	25e4c <nrf_cc3xx_platform_ctr_drbg_get>
   26aa2:	2800      	cmp	r0, #0
   26aa4:	d0c6      	beq.n	26a34 <CC_LibInit+0x10>
   26aa6:	2405      	movs	r4, #5
   26aa8:	4620      	mov	r0, r4
   26aaa:	b002      	add	sp, #8
   26aac:	bd10      	pop	{r4, pc}
   26aae:	2001      	movs	r0, #1
   26ab0:	f000 f8ec 	bl	26c8c <CC_PalPowerSaveModeSelect>
   26ab4:	2800      	cmp	r0, #0
   26ab6:	d1e2      	bne.n	26a7e <CC_LibInit+0x5a>
   26ab8:	4b05      	ldr	r3, [pc, #20]	; (26ad0 <CC_LibInit+0xac>)
   26aba:	6018      	str	r0, [r3, #0]
   26abc:	e7e3      	b.n	26a86 <CC_LibInit+0x62>
   26abe:	bf00      	nop
   26ac0:	5002b928 	.word	0x5002b928
   26ac4:	5002ba24 	.word	0x5002ba24
   26ac8:	20e00000 	.word	0x20e00000
   26acc:	20003090 	.word	0x20003090
   26ad0:	5002ba0c 	.word	0x5002ba0c

00026ad4 <CC_HalInit>:
   26ad4:	2000      	movs	r0, #0
   26ad6:	4770      	bx	lr

00026ad8 <CC_HalTerminate>:
   26ad8:	2000      	movs	r0, #0
   26ada:	4770      	bx	lr

00026adc <CC_HalClearInterruptBit>:
   26adc:	0543      	lsls	r3, r0, #21
   26ade:	d503      	bpl.n	26ae8 <CC_HalClearInterruptBit+0xc>
   26ae0:	4b03      	ldr	r3, [pc, #12]	; (26af0 <CC_HalClearInterruptBit+0x14>)
   26ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26ae6:	601a      	str	r2, [r3, #0]
   26ae8:	4b02      	ldr	r3, [pc, #8]	; (26af4 <CC_HalClearInterruptBit+0x18>)
   26aea:	6018      	str	r0, [r3, #0]
   26aec:	4770      	bx	lr
   26aee:	bf00      	nop
   26af0:	5002b108 	.word	0x5002b108
   26af4:	5002ba08 	.word	0x5002ba08

00026af8 <CC_HalMaskInterrupt>:
   26af8:	4b01      	ldr	r3, [pc, #4]	; (26b00 <CC_HalMaskInterrupt+0x8>)
   26afa:	6018      	str	r0, [r3, #0]
   26afc:	4770      	bx	lr
   26afe:	bf00      	nop
   26b00:	5002ba04 	.word	0x5002ba04

00026b04 <CC_HalWaitInterrupt>:
   26b04:	b108      	cbz	r0, 26b0a <CC_HalWaitInterrupt+0x6>
   26b06:	f000 b86f 	b.w	26be8 <CC_PalWaitInterrupt>
   26b0a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   26b0e:	4770      	bx	lr

00026b10 <CC_HalWaitInterruptRND>:
   26b10:	b108      	cbz	r0, 26b16 <CC_HalWaitInterruptRND+0x6>
   26b12:	f000 b84f 	b.w	26bb4 <CC_PalWaitInterruptRND>
   26b16:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   26b1a:	4770      	bx	lr

00026b1c <CC_PalInit>:
   26b1c:	b510      	push	{r4, lr}
   26b1e:	4811      	ldr	r0, [pc, #68]	; (26b64 <CC_PalInit+0x48>)
   26b20:	f000 f870 	bl	26c04 <CC_PalMutexCreate>
   26b24:	b100      	cbz	r0, 26b28 <CC_PalInit+0xc>
   26b26:	bd10      	pop	{r4, pc}
   26b28:	480f      	ldr	r0, [pc, #60]	; (26b68 <CC_PalInit+0x4c>)
   26b2a:	f000 f86b 	bl	26c04 <CC_PalMutexCreate>
   26b2e:	2800      	cmp	r0, #0
   26b30:	d1f9      	bne.n	26b26 <CC_PalInit+0xa>
   26b32:	4c0e      	ldr	r4, [pc, #56]	; (26b6c <CC_PalInit+0x50>)
   26b34:	4620      	mov	r0, r4
   26b36:	f000 f865 	bl	26c04 <CC_PalMutexCreate>
   26b3a:	2800      	cmp	r0, #0
   26b3c:	d1f3      	bne.n	26b26 <CC_PalInit+0xa>
   26b3e:	4b0c      	ldr	r3, [pc, #48]	; (26b70 <CC_PalInit+0x54>)
   26b40:	480c      	ldr	r0, [pc, #48]	; (26b74 <CC_PalInit+0x58>)
   26b42:	601c      	str	r4, [r3, #0]
   26b44:	f000 f85e 	bl	26c04 <CC_PalMutexCreate>
   26b48:	4601      	mov	r1, r0
   26b4a:	2800      	cmp	r0, #0
   26b4c:	d1eb      	bne.n	26b26 <CC_PalInit+0xa>
   26b4e:	f000 f82d 	bl	26bac <CC_PalDmaInit>
   26b52:	4604      	mov	r4, r0
   26b54:	b108      	cbz	r0, 26b5a <CC_PalInit+0x3e>
   26b56:	4620      	mov	r0, r4
   26b58:	bd10      	pop	{r4, pc}
   26b5a:	f000 f879 	bl	26c50 <CC_PalPowerSaveModeInit>
   26b5e:	4620      	mov	r0, r4
   26b60:	e7fa      	b.n	26b58 <CC_PalInit+0x3c>
   26b62:	bf00      	nop
   26b64:	200006ac 	.word	0x200006ac
   26b68:	200006a0 	.word	0x200006a0
   26b6c:	200006a8 	.word	0x200006a8
   26b70:	200006b0 	.word	0x200006b0
   26b74:	200006a4 	.word	0x200006a4

00026b78 <CC_PalTerminate>:
   26b78:	b508      	push	{r3, lr}
   26b7a:	4808      	ldr	r0, [pc, #32]	; (26b9c <CC_PalTerminate+0x24>)
   26b7c:	f000 f84c 	bl	26c18 <CC_PalMutexDestroy>
   26b80:	4807      	ldr	r0, [pc, #28]	; (26ba0 <CC_PalTerminate+0x28>)
   26b82:	f000 f849 	bl	26c18 <CC_PalMutexDestroy>
   26b86:	4807      	ldr	r0, [pc, #28]	; (26ba4 <CC_PalTerminate+0x2c>)
   26b88:	f000 f846 	bl	26c18 <CC_PalMutexDestroy>
   26b8c:	4806      	ldr	r0, [pc, #24]	; (26ba8 <CC_PalTerminate+0x30>)
   26b8e:	f000 f843 	bl	26c18 <CC_PalMutexDestroy>
   26b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26b96:	f000 b80b 	b.w	26bb0 <CC_PalDmaTerminate>
   26b9a:	bf00      	nop
   26b9c:	200006ac 	.word	0x200006ac
   26ba0:	200006a0 	.word	0x200006a0
   26ba4:	200006a8 	.word	0x200006a8
   26ba8:	200006a4 	.word	0x200006a4

00026bac <CC_PalDmaInit>:
   26bac:	2000      	movs	r0, #0
   26bae:	4770      	bx	lr

00026bb0 <CC_PalDmaTerminate>:
   26bb0:	4770      	bx	lr
   26bb2:	bf00      	nop

00026bb4 <CC_PalWaitInterruptRND>:
   26bb4:	b410      	push	{r4}
   26bb6:	4c08      	ldr	r4, [pc, #32]	; (26bd8 <CC_PalWaitInterruptRND+0x24>)
   26bb8:	4602      	mov	r2, r0
   26bba:	6823      	ldr	r3, [r4, #0]
   26bbc:	4213      	tst	r3, r2
   26bbe:	d0fc      	beq.n	26bba <CC_PalWaitInterruptRND+0x6>
   26bc0:	b121      	cbz	r1, 26bcc <CC_PalWaitInterruptRND+0x18>
   26bc2:	4b06      	ldr	r3, [pc, #24]	; (26bdc <CC_PalWaitInterruptRND+0x28>)
   26bc4:	4806      	ldr	r0, [pc, #24]	; (26be0 <CC_PalWaitInterruptRND+0x2c>)
   26bc6:	681b      	ldr	r3, [r3, #0]
   26bc8:	600b      	str	r3, [r1, #0]
   26bca:	6003      	str	r3, [r0, #0]
   26bcc:	4b05      	ldr	r3, [pc, #20]	; (26be4 <CC_PalWaitInterruptRND+0x30>)
   26bce:	601a      	str	r2, [r3, #0]
   26bd0:	2000      	movs	r0, #0
   26bd2:	bc10      	pop	{r4}
   26bd4:	4770      	bx	lr
   26bd6:	bf00      	nop
   26bd8:	5002ba00 	.word	0x5002ba00
   26bdc:	5002b104 	.word	0x5002b104
   26be0:	5002b108 	.word	0x5002b108
   26be4:	5002ba08 	.word	0x5002ba08

00026be8 <CC_PalWaitInterrupt>:
   26be8:	4904      	ldr	r1, [pc, #16]	; (26bfc <CC_PalWaitInterrupt+0x14>)
   26bea:	4602      	mov	r2, r0
   26bec:	680b      	ldr	r3, [r1, #0]
   26bee:	421a      	tst	r2, r3
   26bf0:	d0fc      	beq.n	26bec <CC_PalWaitInterrupt+0x4>
   26bf2:	4b03      	ldr	r3, [pc, #12]	; (26c00 <CC_PalWaitInterrupt+0x18>)
   26bf4:	2000      	movs	r0, #0
   26bf6:	601a      	str	r2, [r3, #0]
   26bf8:	4770      	bx	lr
   26bfa:	bf00      	nop
   26bfc:	5002ba00 	.word	0x5002ba00
   26c00:	5002ba08 	.word	0x5002ba08

00026c04 <CC_PalMutexCreate>:
   26c04:	b508      	push	{r3, lr}
   26c06:	4b03      	ldr	r3, [pc, #12]	; (26c14 <CC_PalMutexCreate+0x10>)
   26c08:	6802      	ldr	r2, [r0, #0]
   26c0a:	681b      	ldr	r3, [r3, #0]
   26c0c:	6810      	ldr	r0, [r2, #0]
   26c0e:	4798      	blx	r3
   26c10:	2000      	movs	r0, #0
   26c12:	bd08      	pop	{r3, pc}
   26c14:	20000660 	.word	0x20000660

00026c18 <CC_PalMutexDestroy>:
   26c18:	b508      	push	{r3, lr}
   26c1a:	4b03      	ldr	r3, [pc, #12]	; (26c28 <CC_PalMutexDestroy+0x10>)
   26c1c:	6802      	ldr	r2, [r0, #0]
   26c1e:	685b      	ldr	r3, [r3, #4]
   26c20:	6810      	ldr	r0, [r2, #0]
   26c22:	4798      	blx	r3
   26c24:	2000      	movs	r0, #0
   26c26:	bd08      	pop	{r3, pc}
   26c28:	20000660 	.word	0x20000660

00026c2c <CC_PalMutexLock>:
   26c2c:	4b02      	ldr	r3, [pc, #8]	; (26c38 <CC_PalMutexLock+0xc>)
   26c2e:	6802      	ldr	r2, [r0, #0]
   26c30:	689b      	ldr	r3, [r3, #8]
   26c32:	6810      	ldr	r0, [r2, #0]
   26c34:	4718      	bx	r3
   26c36:	bf00      	nop
   26c38:	20000660 	.word	0x20000660

00026c3c <CC_PalMutexUnlock>:
   26c3c:	b508      	push	{r3, lr}
   26c3e:	4b03      	ldr	r3, [pc, #12]	; (26c4c <CC_PalMutexUnlock+0x10>)
   26c40:	6802      	ldr	r2, [r0, #0]
   26c42:	68db      	ldr	r3, [r3, #12]
   26c44:	6810      	ldr	r0, [r2, #0]
   26c46:	4798      	blx	r3
   26c48:	2000      	movs	r0, #0
   26c4a:	bd08      	pop	{r3, pc}
   26c4c:	20000660 	.word	0x20000660

00026c50 <CC_PalPowerSaveModeInit>:
   26c50:	b570      	push	{r4, r5, r6, lr}
   26c52:	4c09      	ldr	r4, [pc, #36]	; (26c78 <CC_PalPowerSaveModeInit+0x28>)
   26c54:	4d09      	ldr	r5, [pc, #36]	; (26c7c <CC_PalPowerSaveModeInit+0x2c>)
   26c56:	6920      	ldr	r0, [r4, #16]
   26c58:	68ab      	ldr	r3, [r5, #8]
   26c5a:	4798      	blx	r3
   26c5c:	b118      	cbz	r0, 26c66 <CC_PalPowerSaveModeInit+0x16>
   26c5e:	4b08      	ldr	r3, [pc, #32]	; (26c80 <CC_PalPowerSaveModeInit+0x30>)
   26c60:	4808      	ldr	r0, [pc, #32]	; (26c84 <CC_PalPowerSaveModeInit+0x34>)
   26c62:	685b      	ldr	r3, [r3, #4]
   26c64:	4798      	blx	r3
   26c66:	4a08      	ldr	r2, [pc, #32]	; (26c88 <CC_PalPowerSaveModeInit+0x38>)
   26c68:	68eb      	ldr	r3, [r5, #12]
   26c6a:	6920      	ldr	r0, [r4, #16]
   26c6c:	2100      	movs	r1, #0
   26c6e:	6011      	str	r1, [r2, #0]
   26c70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26c74:	4718      	bx	r3
   26c76:	bf00      	nop
   26c78:	20000670 	.word	0x20000670
   26c7c:	20000660 	.word	0x20000660
   26c80:	20000650 	.word	0x20000650
   26c84:	0002e440 	.word	0x0002e440
   26c88:	20003318 	.word	0x20003318

00026c8c <CC_PalPowerSaveModeSelect>:
   26c8c:	b570      	push	{r4, r5, r6, lr}
   26c8e:	4d1a      	ldr	r5, [pc, #104]	; (26cf8 <CC_PalPowerSaveModeSelect+0x6c>)
   26c90:	4e1a      	ldr	r6, [pc, #104]	; (26cfc <CC_PalPowerSaveModeSelect+0x70>)
   26c92:	4604      	mov	r4, r0
   26c94:	68b2      	ldr	r2, [r6, #8]
   26c96:	6928      	ldr	r0, [r5, #16]
   26c98:	4790      	blx	r2
   26c9a:	b9f0      	cbnz	r0, 26cda <CC_PalPowerSaveModeSelect+0x4e>
   26c9c:	b15c      	cbz	r4, 26cb6 <CC_PalPowerSaveModeSelect+0x2a>
   26c9e:	4c18      	ldr	r4, [pc, #96]	; (26d00 <CC_PalPowerSaveModeSelect+0x74>)
   26ca0:	6823      	ldr	r3, [r4, #0]
   26ca2:	b1ab      	cbz	r3, 26cd0 <CC_PalPowerSaveModeSelect+0x44>
   26ca4:	2b01      	cmp	r3, #1
   26ca6:	d01a      	beq.n	26cde <CC_PalPowerSaveModeSelect+0x52>
   26ca8:	3b01      	subs	r3, #1
   26caa:	6023      	str	r3, [r4, #0]
   26cac:	6928      	ldr	r0, [r5, #16]
   26cae:	68f3      	ldr	r3, [r6, #12]
   26cb0:	4798      	blx	r3
   26cb2:	2000      	movs	r0, #0
   26cb4:	bd70      	pop	{r4, r5, r6, pc}
   26cb6:	4c12      	ldr	r4, [pc, #72]	; (26d00 <CC_PalPowerSaveModeSelect+0x74>)
   26cb8:	6821      	ldr	r1, [r4, #0]
   26cba:	b939      	cbnz	r1, 26ccc <CC_PalPowerSaveModeSelect+0x40>
   26cbc:	4b11      	ldr	r3, [pc, #68]	; (26d04 <CC_PalPowerSaveModeSelect+0x78>)
   26cbe:	4a12      	ldr	r2, [pc, #72]	; (26d08 <CC_PalPowerSaveModeSelect+0x7c>)
   26cc0:	2001      	movs	r0, #1
   26cc2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   26cc6:	6813      	ldr	r3, [r2, #0]
   26cc8:	2b00      	cmp	r3, #0
   26cca:	d1fc      	bne.n	26cc6 <CC_PalPowerSaveModeSelect+0x3a>
   26ccc:	3101      	adds	r1, #1
   26cce:	6021      	str	r1, [r4, #0]
   26cd0:	68f3      	ldr	r3, [r6, #12]
   26cd2:	6928      	ldr	r0, [r5, #16]
   26cd4:	4798      	blx	r3
   26cd6:	2000      	movs	r0, #0
   26cd8:	bd70      	pop	{r4, r5, r6, pc}
   26cda:	480c      	ldr	r0, [pc, #48]	; (26d0c <CC_PalPowerSaveModeSelect+0x80>)
   26cdc:	bd70      	pop	{r4, r5, r6, pc}
   26cde:	4a0a      	ldr	r2, [pc, #40]	; (26d08 <CC_PalPowerSaveModeSelect+0x7c>)
   26ce0:	6813      	ldr	r3, [r2, #0]
   26ce2:	2b00      	cmp	r3, #0
   26ce4:	d1fc      	bne.n	26ce0 <CC_PalPowerSaveModeSelect+0x54>
   26ce6:	4a07      	ldr	r2, [pc, #28]	; (26d04 <CC_PalPowerSaveModeSelect+0x78>)
   26ce8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   26cec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   26cf0:	f7ff ff02 	bl	26af8 <CC_HalMaskInterrupt>
   26cf4:	6823      	ldr	r3, [r4, #0]
   26cf6:	e7d7      	b.n	26ca8 <CC_PalPowerSaveModeSelect+0x1c>
   26cf8:	20000670 	.word	0x20000670
   26cfc:	20000660 	.word	0x20000660
   26d00:	20003318 	.word	0x20003318
   26d04:	5002a000 	.word	0x5002a000
   26d08:	5002b910 	.word	0x5002b910
   26d0c:	ffff8fe9 	.word	0xffff8fe9

00026d10 <mutex_init>:
   26d10:	4b01      	ldr	r3, [pc, #4]	; (26d18 <mutex_init+0x8>)
   26d12:	681b      	ldr	r3, [r3, #0]
   26d14:	4718      	bx	r3
   26d16:	bf00      	nop
   26d18:	20000660 	.word	0x20000660

00026d1c <mutex_lock>:
   26d1c:	4b01      	ldr	r3, [pc, #4]	; (26d24 <mutex_lock+0x8>)
   26d1e:	689b      	ldr	r3, [r3, #8]
   26d20:	4718      	bx	r3
   26d22:	bf00      	nop
   26d24:	20000660 	.word	0x20000660

00026d28 <mutex_unlock>:
   26d28:	4b01      	ldr	r3, [pc, #4]	; (26d30 <mutex_unlock+0x8>)
   26d2a:	68db      	ldr	r3, [r3, #12]
   26d2c:	4718      	bx	r3
   26d2e:	bf00      	nop
   26d30:	20000660 	.word	0x20000660

00026d34 <startTrngHW>:
   26d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26d38:	2800      	cmp	r0, #0
   26d3a:	d07b      	beq.n	26e34 <startTrngHW+0x100>
   26d3c:	460c      	mov	r4, r1
   26d3e:	2900      	cmp	r1, #0
   26d40:	d078      	beq.n	26e34 <startTrngHW+0x100>
   26d42:	461d      	mov	r5, r3
   26d44:	2b00      	cmp	r3, #0
   26d46:	d075      	beq.n	26e34 <startTrngHW+0x100>
   26d48:	4606      	mov	r6, r0
   26d4a:	b122      	cbz	r2, 26d56 <startTrngHW+0x22>
   26d4c:	2201      	movs	r2, #1
   26d4e:	2300      	movs	r3, #0
   26d50:	602a      	str	r2, [r5, #0]
   26d52:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   26d56:	682b      	ldr	r3, [r5, #0]
   26d58:	2b00      	cmp	r3, #0
   26d5a:	d067      	beq.n	26e2c <startTrngHW+0xf8>
   26d5c:	4629      	mov	r1, r5
   26d5e:	4620      	mov	r0, r4
   26d60:	f000 fda4 	bl	278ac <LLF_RND_GetFastestRosc>
   26d64:	4607      	mov	r7, r0
   26d66:	2800      	cmp	r0, #0
   26d68:	d161      	bne.n	26e2e <startTrngHW+0xfa>
   26d6a:	6828      	ldr	r0, [r5, #0]
   26d6c:	4621      	mov	r1, r4
   26d6e:	f000 fd7f 	bl	27870 <LLF_RND_GetRoscSampleCnt>
   26d72:	4607      	mov	r7, r0
   26d74:	2800      	cmp	r0, #0
   26d76:	d15a      	bne.n	26e2e <startTrngHW+0xfa>
   26d78:	682b      	ldr	r3, [r5, #0]
   26d7a:	2b08      	cmp	r3, #8
   26d7c:	d069      	beq.n	26e52 <startTrngHW+0x11e>
   26d7e:	2b04      	cmp	r3, #4
   26d80:	d06a      	beq.n	26e58 <startTrngHW+0x124>
   26d82:	f1a3 0802 	sub.w	r8, r3, #2
   26d86:	fab8 f888 	clz	r8, r8
   26d8a:	ea4f 1858 	mov.w	r8, r8, lsr #5
   26d8e:	4b34      	ldr	r3, [pc, #208]	; (26e60 <startTrngHW+0x12c>)
   26d90:	4934      	ldr	r1, [pc, #208]	; (26e64 <startTrngHW+0x130>)
   26d92:	4a35      	ldr	r2, [pc, #212]	; (26e68 <startTrngHW+0x134>)
   26d94:	2001      	movs	r0, #1
   26d96:	6018      	str	r0, [r3, #0]
   26d98:	469c      	mov	ip, r3
   26d9a:	6008      	str	r0, [r1, #0]
   26d9c:	f8cc 0000 	str.w	r0, [ip]
   26da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26da2:	6013      	str	r3, [r2, #0]
   26da4:	6811      	ldr	r1, [r2, #0]
   26da6:	428b      	cmp	r3, r1
   26da8:	d1f8      	bne.n	26d9c <startTrngHW+0x68>
   26daa:	4b30      	ldr	r3, [pc, #192]	; (26e6c <startTrngHW+0x138>)
   26dac:	f04f 0900 	mov.w	r9, #0
   26db0:	f8c3 9000 	str.w	r9, [r3]
   26db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26db8:	f7ff fe90 	bl	26adc <CC_HalClearInterruptBit>
   26dbc:	4b2c      	ldr	r3, [pc, #176]	; (26e70 <startTrngHW+0x13c>)
   26dbe:	f06f 021b 	mvn.w	r2, #27
   26dc2:	601a      	str	r2, [r3, #0]
   26dc4:	4648      	mov	r0, r9
   26dc6:	f7ff fe97 	bl	26af8 <CC_HalMaskInterrupt>
   26dca:	4a2a      	ldr	r2, [pc, #168]	; (26e74 <startTrngHW+0x140>)
   26dcc:	4b2a      	ldr	r3, [pc, #168]	; (26e78 <startTrngHW+0x144>)
   26dce:	f8c2 8000 	str.w	r8, [r2]
   26dd2:	6818      	ldr	r0, [r3, #0]
   26dd4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   26dd8:	f7ff fe8e 	bl	26af8 <CC_HalMaskInterrupt>
   26ddc:	4b27      	ldr	r3, [pc, #156]	; (26e7c <startTrngHW+0x148>)
   26dde:	220a      	movs	r2, #10
   26de0:	601a      	str	r2, [r3, #0]
   26de2:	9908      	ldr	r1, [sp, #32]
   26de4:	6923      	ldr	r3, [r4, #16]
   26de6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   26de8:	2901      	cmp	r1, #1
   26dea:	d027      	beq.n	26e3c <startTrngHW+0x108>
   26dec:	4924      	ldr	r1, [pc, #144]	; (26e80 <startTrngHW+0x14c>)
   26dee:	fba1 1303 	umull	r1, r3, r1, r3
   26df2:	091b      	lsrs	r3, r3, #4
   26df4:	fb03 f302 	mul.w	r3, r3, r2
   26df8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26dfc:	4921      	ldr	r1, [pc, #132]	; (26e84 <startTrngHW+0x150>)
   26dfe:	4a1b      	ldr	r2, [pc, #108]	; (26e6c <startTrngHW+0x138>)
   26e00:	03db      	lsls	r3, r3, #15
   26e02:	099b      	lsrs	r3, r3, #6
   26e04:	600b      	str	r3, [r1, #0]
   26e06:	2301      	movs	r3, #1
   26e08:	6013      	str	r3, [r2, #0]
   26e0a:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   26e0e:	682a      	ldr	r2, [r5, #0]
   26e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   26e14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   26e18:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   26e1c:	682a      	ldr	r2, [r5, #0]
   26e1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26e22:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   26e26:	4638      	mov	r0, r7
   26e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26e2c:	4f16      	ldr	r7, [pc, #88]	; (26e88 <startTrngHW+0x154>)
   26e2e:	4638      	mov	r0, r7
   26e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26e34:	4f15      	ldr	r7, [pc, #84]	; (26e8c <startTrngHW+0x158>)
   26e36:	4638      	mov	r0, r7
   26e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26e3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26e40:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   26e44:	3101      	adds	r1, #1
   26e46:	d002      	beq.n	26e4e <startTrngHW+0x11a>
   26e48:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   26e4c:	e7ce      	b.n	26dec <startTrngHW+0xb8>
   26e4e:	2316      	movs	r3, #22
   26e50:	e7d0      	b.n	26df4 <startTrngHW+0xc0>
   26e52:	f04f 0803 	mov.w	r8, #3
   26e56:	e79a      	b.n	26d8e <startTrngHW+0x5a>
   26e58:	f04f 0802 	mov.w	r8, #2
   26e5c:	e797      	b.n	26d8e <startTrngHW+0x5a>
   26e5e:	bf00      	nop
   26e60:	5002b1c4 	.word	0x5002b1c4
   26e64:	5002b140 	.word	0x5002b140
   26e68:	5002b130 	.word	0x5002b130
   26e6c:	5002b12c 	.word	0x5002b12c
   26e70:	5002b100 	.word	0x5002b100
   26e74:	5002b10c 	.word	0x5002b10c
   26e78:	5002ba04 	.word	0x5002ba04
   26e7c:	5002b138 	.word	0x5002b138
   26e80:	aaaaaaab 	.word	0xaaaaaaab
   26e84:	5002b1d8 	.word	0x5002b1d8
   26e88:	00f10c31 	.word	0x00f10c31
   26e8c:	00f10c35 	.word	0x00f10c35

00026e90 <LLF_RND_RepetitionCounterTest.part.0>:
   26e90:	b4f0      	push	{r4, r5, r6, r7}
   26e92:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   26e96:	2400      	movs	r4, #0
   26e98:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   26e9c:	4626      	mov	r6, r4
   26e9e:	4627      	mov	r7, r4
   26ea0:	e006      	b.n	26eb0 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   26ea2:	429f      	cmp	r7, r3
   26ea4:	d016      	beq.n	26ed4 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   26ea6:	2601      	movs	r6, #1
   26ea8:	4565      	cmp	r5, ip
   26eaa:	d819      	bhi.n	26ee0 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   26eac:	462c      	mov	r4, r5
   26eae:	461f      	mov	r7, r3
   26eb0:	0963      	lsrs	r3, r4, #5
   26eb2:	f004 011f 	and.w	r1, r4, #31
   26eb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   26eba:	291f      	cmp	r1, #31
   26ebc:	fa23 f301 	lsr.w	r3, r3, r1
   26ec0:	f104 0501 	add.w	r5, r4, #1
   26ec4:	bf18      	it	ne
   26ec6:	f003 0301 	andne.w	r3, r3, #1
   26eca:	2c00      	cmp	r4, #0
   26ecc:	d1e9      	bne.n	26ea2 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   26ece:	2601      	movs	r6, #1
   26ed0:	4635      	mov	r5, r6
   26ed2:	e7eb      	b.n	26eac <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   26ed4:	3601      	adds	r6, #1
   26ed6:	4296      	cmp	r6, r2
   26ed8:	d1e6      	bne.n	26ea8 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   26eda:	4803      	ldr	r0, [pc, #12]	; (26ee8 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   26edc:	bcf0      	pop	{r4, r5, r6, r7}
   26ede:	4770      	bx	lr
   26ee0:	2000      	movs	r0, #0
   26ee2:	bcf0      	pop	{r4, r5, r6, r7}
   26ee4:	4770      	bx	lr
   26ee6:	bf00      	nop
   26ee8:	00f10c36 	.word	0x00f10c36

00026eec <LLF_RND_AdaptiveProportionTest>:
   26eec:	2800      	cmp	r0, #0
   26eee:	d061      	beq.n	26fb4 <LLF_RND_AdaptiveProportionTest+0xc8>
   26ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ef4:	1e4c      	subs	r4, r1, #1
   26ef6:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   26efa:	d227      	bcs.n	26f4c <LLF_RND_AdaptiveProportionTest+0x60>
   26efc:	b333      	cbz	r3, 26f4c <LLF_RND_AdaptiveProportionTest+0x60>
   26efe:	b32a      	cbz	r2, 26f4c <LLF_RND_AdaptiveProportionTest+0x60>
   26f00:	00cd      	lsls	r5, r1, #3
   26f02:	2b01      	cmp	r3, #1
   26f04:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
   26f08:	d030      	beq.n	26f6c <LLF_RND_AdaptiveProportionTest+0x80>
   26f0a:	2100      	movs	r1, #0
   26f0c:	468c      	mov	ip, r1
   26f0e:	460f      	mov	r7, r1
   26f10:	460e      	mov	r6, r1
   26f12:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   26f16:	094c      	lsrs	r4, r1, #5
   26f18:	f001 051f 	and.w	r5, r1, #31
   26f1c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   26f20:	2d1f      	cmp	r5, #31
   26f22:	fa24 f405 	lsr.w	r4, r4, r5
   26f26:	bf18      	it	ne
   26f28:	f004 0401 	andne.w	r4, r4, #1
   26f2c:	b921      	cbnz	r1, 26f38 <LLF_RND_AdaptiveProportionTest+0x4c>
   26f2e:	2601      	movs	r6, #1
   26f30:	46b4      	mov	ip, r6
   26f32:	4631      	mov	r1, r6
   26f34:	4627      	mov	r7, r4
   26f36:	e7ee      	b.n	26f16 <LLF_RND_AdaptiveProportionTest+0x2a>
   26f38:	42b3      	cmp	r3, r6
   26f3a:	d013      	beq.n	26f64 <LLF_RND_AdaptiveProportionTest+0x78>
   26f3c:	42a7      	cmp	r7, r4
   26f3e:	d101      	bne.n	26f44 <LLF_RND_AdaptiveProportionTest+0x58>
   26f40:	f10c 0c01 	add.w	ip, ip, #1
   26f44:	4546      	cmp	r6, r8
   26f46:	d104      	bne.n	26f52 <LLF_RND_AdaptiveProportionTest+0x66>
   26f48:	4562      	cmp	r2, ip
   26f4a:	d202      	bcs.n	26f52 <LLF_RND_AdaptiveProportionTest+0x66>
   26f4c:	481a      	ldr	r0, [pc, #104]	; (26fb8 <LLF_RND_AdaptiveProportionTest+0xcc>)
   26f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f52:	463c      	mov	r4, r7
   26f54:	3101      	adds	r1, #1
   26f56:	458e      	cmp	lr, r1
   26f58:	f106 0601 	add.w	r6, r6, #1
   26f5c:	d2ea      	bcs.n	26f34 <LLF_RND_AdaptiveProportionTest+0x48>
   26f5e:	2000      	movs	r0, #0
   26f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26f64:	2600      	movs	r6, #0
   26f66:	f04f 0c01 	mov.w	ip, #1
   26f6a:	e7f3      	b.n	26f54 <LLF_RND_AdaptiveProportionTest+0x68>
   26f6c:	2600      	movs	r6, #0
   26f6e:	46b4      	mov	ip, r6
   26f70:	4637      	mov	r7, r6
   26f72:	4634      	mov	r4, r6
   26f74:	0961      	lsrs	r1, r4, #5
   26f76:	f004 031f 	and.w	r3, r4, #31
   26f7a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   26f7e:	2b1f      	cmp	r3, #31
   26f80:	fa21 f103 	lsr.w	r1, r1, r3
   26f84:	bf18      	it	ne
   26f86:	f001 0101 	andne.w	r1, r1, #1
   26f8a:	b13c      	cbz	r4, 26f9c <LLF_RND_AdaptiveProportionTest+0xb0>
   26f8c:	b95f      	cbnz	r7, 26fa6 <LLF_RND_AdaptiveProportionTest+0xba>
   26f8e:	458c      	cmp	ip, r1
   26f90:	d001      	beq.n	26f96 <LLF_RND_AdaptiveProportionTest+0xaa>
   26f92:	4661      	mov	r1, ip
   26f94:	e008      	b.n	26fa8 <LLF_RND_AdaptiveProportionTest+0xbc>
   26f96:	3601      	adds	r6, #1
   26f98:	4661      	mov	r1, ip
   26f9a:	e005      	b.n	26fa8 <LLF_RND_AdaptiveProportionTest+0xbc>
   26f9c:	2601      	movs	r6, #1
   26f9e:	4634      	mov	r4, r6
   26fa0:	468c      	mov	ip, r1
   26fa2:	2701      	movs	r7, #1
   26fa4:	e7e6      	b.n	26f74 <LLF_RND_AdaptiveProportionTest+0x88>
   26fa6:	463e      	mov	r6, r7
   26fa8:	42b2      	cmp	r2, r6
   26faa:	d3cf      	bcc.n	26f4c <LLF_RND_AdaptiveProportionTest+0x60>
   26fac:	3401      	adds	r4, #1
   26fae:	42ac      	cmp	r4, r5
   26fb0:	d1f6      	bne.n	26fa0 <LLF_RND_AdaptiveProportionTest+0xb4>
   26fb2:	e7d4      	b.n	26f5e <LLF_RND_AdaptiveProportionTest+0x72>
   26fb4:	4800      	ldr	r0, [pc, #0]	; (26fb8 <LLF_RND_AdaptiveProportionTest+0xcc>)
   26fb6:	4770      	bx	lr
   26fb8:	00f10c37 	.word	0x00f10c37

00026fbc <getTrngSource>:
   26fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fc0:	b08d      	sub	sp, #52	; 0x34
   26fc2:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   26fc6:	4607      	mov	r7, r0
   26fc8:	460c      	mov	r4, r1
   26fca:	2d00      	cmp	r5, #0
   26fcc:	d14d      	bne.n	2706a <getTrngSource+0xae>
   26fce:	f8d1 a010 	ldr.w	sl, [r1, #16]
   26fd2:	601e      	str	r6, [r3, #0]
   26fd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   26fd6:	2100      	movs	r1, #0
   26fd8:	6019      	str	r1, [r3, #0]
   26fda:	2a00      	cmp	r2, #0
   26fdc:	f000 8120 	beq.w	27220 <getTrngSource+0x264>
   26fe0:	4a9b      	ldr	r2, [pc, #620]	; (27250 <getTrngSource+0x294>)
   26fe2:	4b9c      	ldr	r3, [pc, #624]	; (27254 <getTrngSource+0x298>)
   26fe4:	6811      	ldr	r1, [r2, #0]
   26fe6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   26fe8:	681b      	ldr	r3, [r3, #0]
   26fea:	429a      	cmp	r2, r3
   26fec:	d148      	bne.n	27080 <getTrngSource+0xc4>
   26fee:	290a      	cmp	r1, #10
   26ff0:	d146      	bne.n	27080 <getTrngSource+0xc4>
   26ff2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   26ff6:	9304      	str	r3, [sp, #16]
   26ff8:	4b97      	ldr	r3, [pc, #604]	; (27258 <getTrngSource+0x29c>)
   26ffa:	fba3 230a 	umull	r2, r3, r3, sl
   26ffe:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   27002:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   27006:	f106 0208 	add.w	r2, r6, #8
   2700a:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   2700e:	2304      	movs	r3, #4
   27010:	9203      	str	r2, [sp, #12]
   27012:	9302      	str	r3, [sp, #8]
   27014:	46b8      	mov	r8, r7
   27016:	9b16      	ldr	r3, [sp, #88]	; 0x58
   27018:	f8c3 a000 	str.w	sl, [r3]
   2701c:	f1ba 0f00 	cmp.w	sl, #0
   27020:	f000 80c4 	beq.w	271ac <getTrngSource+0x1f0>
   27024:	9e03      	ldr	r6, [sp, #12]
   27026:	4655      	mov	r5, sl
   27028:	f04f 0900 	mov.w	r9, #0
   2702c:	f000 fc4e 	bl	278cc <LLF_RND_TurnOffTrng>
   27030:	2300      	movs	r3, #0
   27032:	9305      	str	r3, [sp, #20]
   27034:	f1b8 0f00 	cmp.w	r8, #0
   27038:	f000 80e6 	beq.w	27208 <getTrngSource+0x24c>
   2703c:	2c00      	cmp	r4, #0
   2703e:	f000 80e3 	beq.w	27208 <getTrngSource+0x24c>
   27042:	9b04      	ldr	r3, [sp, #16]
   27044:	2b00      	cmp	r3, #0
   27046:	f000 80dd 	beq.w	27204 <getTrngSource+0x248>
   2704a:	a904      	add	r1, sp, #16
   2704c:	4620      	mov	r0, r4
   2704e:	f000 fc2d 	bl	278ac <LLF_RND_GetFastestRosc>
   27052:	b1b8      	cbz	r0, 27084 <getTrngSource+0xc8>
   27054:	4b81      	ldr	r3, [pc, #516]	; (2725c <getTrngSource+0x2a0>)
   27056:	4298      	cmp	r0, r3
   27058:	f040 80a8 	bne.w	271ac <getTrngSource+0x1f0>
   2705c:	9002      	str	r0, [sp, #8]
   2705e:	f000 fc35 	bl	278cc <LLF_RND_TurnOffTrng>
   27062:	9802      	ldr	r0, [sp, #8]
   27064:	b00d      	add	sp, #52	; 0x34
   27066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2706a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2706e:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   27072:	3001      	adds	r0, #1
   27074:	bf14      	ite	ne
   27076:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   2707a:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   2707e:	e7a8      	b.n	26fd2 <getTrngSource+0x16>
   27080:	4877      	ldr	r0, [pc, #476]	; (27260 <getTrngSource+0x2a4>)
   27082:	e7eb      	b.n	2705c <getTrngSource+0xa0>
   27084:	9804      	ldr	r0, [sp, #16]
   27086:	4621      	mov	r1, r4
   27088:	f000 fbf2 	bl	27870 <LLF_RND_GetRoscSampleCnt>
   2708c:	2800      	cmp	r0, #0
   2708e:	d1e1      	bne.n	27054 <getTrngSource+0x98>
   27090:	9f04      	ldr	r7, [sp, #16]
   27092:	2f08      	cmp	r7, #8
   27094:	f000 80ba 	beq.w	2720c <getTrngSource+0x250>
   27098:	2f04      	cmp	r7, #4
   2709a:	f000 80b9 	beq.w	27210 <getTrngSource+0x254>
   2709e:	f1a7 0702 	sub.w	r7, r7, #2
   270a2:	fab7 f787 	clz	r7, r7
   270a6:	097f      	lsrs	r7, r7, #5
   270a8:	496e      	ldr	r1, [pc, #440]	; (27264 <getTrngSource+0x2a8>)
   270aa:	2301      	movs	r3, #1
   270ac:	600b      	str	r3, [r1, #0]
   270ae:	f841 3c84 	str.w	r3, [r1, #-132]
   270b2:	4619      	mov	r1, r3
   270b4:	4b6b      	ldr	r3, [pc, #428]	; (27264 <getTrngSource+0x2a8>)
   270b6:	4867      	ldr	r0, [pc, #412]	; (27254 <getTrngSource+0x298>)
   270b8:	6019      	str	r1, [r3, #0]
   270ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   270bc:	6003      	str	r3, [r0, #0]
   270be:	6800      	ldr	r0, [r0, #0]
   270c0:	4283      	cmp	r3, r0
   270c2:	d1f7      	bne.n	270b4 <getTrngSource+0xf8>
   270c4:	4a68      	ldr	r2, [pc, #416]	; (27268 <getTrngSource+0x2ac>)
   270c6:	2300      	movs	r3, #0
   270c8:	6013      	str	r3, [r2, #0]
   270ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   270ce:	f7ff fd05 	bl	26adc <CC_HalClearInterruptBit>
   270d2:	2300      	movs	r3, #0
   270d4:	4618      	mov	r0, r3
   270d6:	4b65      	ldr	r3, [pc, #404]	; (2726c <getTrngSource+0x2b0>)
   270d8:	f06f 011b 	mvn.w	r1, #27
   270dc:	6019      	str	r1, [r3, #0]
   270de:	f7ff fd0b 	bl	26af8 <CC_HalMaskInterrupt>
   270e2:	4963      	ldr	r1, [pc, #396]	; (27270 <getTrngSource+0x2b4>)
   270e4:	4b63      	ldr	r3, [pc, #396]	; (27274 <getTrngSource+0x2b8>)
   270e6:	600f      	str	r7, [r1, #0]
   270e8:	6818      	ldr	r0, [r3, #0]
   270ea:	4f5b      	ldr	r7, [pc, #364]	; (27258 <getTrngSource+0x29c>)
   270ec:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   270f0:	f7ff fd02 	bl	26af8 <CC_HalMaskInterrupt>
   270f4:	4b56      	ldr	r3, [pc, #344]	; (27250 <getTrngSource+0x294>)
   270f6:	4860      	ldr	r0, [pc, #384]	; (27278 <getTrngSource+0x2bc>)
   270f8:	210a      	movs	r1, #10
   270fa:	6019      	str	r1, [r3, #0]
   270fc:	6921      	ldr	r1, [r4, #16]
   270fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27100:	fba7 c101 	umull	ip, r1, r7, r1
   27104:	0909      	lsrs	r1, r1, #4
   27106:	fb03 f301 	mul.w	r3, r3, r1
   2710a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2710e:	03db      	lsls	r3, r3, #15
   27110:	099b      	lsrs	r3, r3, #6
   27112:	6003      	str	r3, [r0, #0]
   27114:	4b54      	ldr	r3, [pc, #336]	; (27268 <getTrngSource+0x2ac>)
   27116:	2201      	movs	r2, #1
   27118:	601a      	str	r2, [r3, #0]
   2711a:	9904      	ldr	r1, [sp, #16]
   2711c:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   27120:	020b      	lsls	r3, r1, #8
   27122:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   27126:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2712a:	4313      	orrs	r3, r2
   2712c:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   27130:	a805      	add	r0, sp, #20
   27132:	f000 fb8d 	bl	27850 <LLF_RND_WaitRngInterrupt>
   27136:	9b05      	ldr	r3, [sp, #20]
   27138:	f003 031a 	and.w	r3, r3, #26
   2713c:	4303      	orrs	r3, r0
   2713e:	d135      	bne.n	271ac <getTrngSource+0x1f0>
   27140:	4a4e      	ldr	r2, [pc, #312]	; (2727c <getTrngSource+0x2c0>)
   27142:	4b4f      	ldr	r3, [pc, #316]	; (27280 <getTrngSource+0x2c4>)
   27144:	6812      	ldr	r2, [r2, #0]
   27146:	9206      	str	r2, [sp, #24]
   27148:	681a      	ldr	r2, [r3, #0]
   2714a:	9207      	str	r2, [sp, #28]
   2714c:	685a      	ldr	r2, [r3, #4]
   2714e:	9208      	str	r2, [sp, #32]
   27150:	689a      	ldr	r2, [r3, #8]
   27152:	9209      	str	r2, [sp, #36]	; 0x24
   27154:	68da      	ldr	r2, [r3, #12]
   27156:	920a      	str	r2, [sp, #40]	; 0x28
   27158:	3310      	adds	r3, #16
   2715a:	fba7 2705 	umull	r2, r7, r7, r5
   2715e:	681b      	ldr	r3, [r3, #0]
   27160:	930b      	str	r3, [sp, #44]	; 0x2c
   27162:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   27166:	d102      	bne.n	2716e <getTrngSource+0x1b2>
   27168:	f1bb 0f00 	cmp.w	fp, #0
   2716c:	d141      	bne.n	271f2 <getTrngSource+0x236>
   2716e:	2218      	movs	r2, #24
   27170:	4630      	mov	r0, r6
   27172:	eb0d 0102 	add.w	r1, sp, r2
   27176:	f000 fb0f 	bl	27798 <CC_PalMemCopyPlat>
   2717a:	3d18      	subs	r5, #24
   2717c:	3618      	adds	r6, #24
   2717e:	f109 0901 	add.w	r9, r9, #1
   27182:	2d00      	cmp	r5, #0
   27184:	f47f af52 	bne.w	2702c <getTrngSource+0x70>
   27188:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   2718c:	d85d      	bhi.n	2724a <getTrngSource+0x28e>
   2718e:	9d03      	ldr	r5, [sp, #12]
   27190:	6962      	ldr	r2, [r4, #20]
   27192:	4651      	mov	r1, sl
   27194:	4628      	mov	r0, r5
   27196:	f7ff fe7b 	bl	26e90 <LLF_RND_RepetitionCounterTest.part.0>
   2719a:	2800      	cmp	r0, #0
   2719c:	d04b      	beq.n	27236 <getTrngSource+0x27a>
   2719e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   271a0:	2300      	movs	r3, #0
   271a2:	6013      	str	r3, [r2, #0]
   271a4:	4b2d      	ldr	r3, [pc, #180]	; (2725c <getTrngSource+0x2a0>)
   271a6:	4298      	cmp	r0, r3
   271a8:	f43f af58 	beq.w	2705c <getTrngSource+0xa0>
   271ac:	9d04      	ldr	r5, [sp, #16]
   271ae:	2d08      	cmp	r5, #8
   271b0:	d034      	beq.n	2721c <getTrngSource+0x260>
   271b2:	2200      	movs	r2, #0
   271b4:	ab04      	add	r3, sp, #16
   271b6:	006d      	lsls	r5, r5, #1
   271b8:	9200      	str	r2, [sp, #0]
   271ba:	4621      	mov	r1, r4
   271bc:	4640      	mov	r0, r8
   271be:	9504      	str	r5, [sp, #16]
   271c0:	f7ff fdb8 	bl	26d34 <startTrngHW>
   271c4:	4b2f      	ldr	r3, [pc, #188]	; (27284 <getTrngSource+0x2c8>)
   271c6:	4298      	cmp	r0, r3
   271c8:	d024      	beq.n	27214 <getTrngSource+0x258>
   271ca:	2800      	cmp	r0, #0
   271cc:	f47f af46 	bne.w	2705c <getTrngSource+0xa0>
   271d0:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   271d4:	0a13      	lsrs	r3, r2, #8
   271d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   271da:	4313      	orrs	r3, r2
   271dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   271e0:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   271e4:	9b02      	ldr	r3, [sp, #8]
   271e6:	3b01      	subs	r3, #1
   271e8:	9302      	str	r3, [sp, #8]
   271ea:	f47f af14 	bne.w	27016 <getTrngSource+0x5a>
   271ee:	2000      	movs	r0, #0
   271f0:	e734      	b.n	2705c <getTrngSource+0xa0>
   271f2:	4630      	mov	r0, r6
   271f4:	465a      	mov	r2, fp
   271f6:	a906      	add	r1, sp, #24
   271f8:	f000 face 	bl	27798 <CC_PalMemCopyPlat>
   271fc:	eba5 050b 	sub.w	r5, r5, fp
   27200:	445e      	add	r6, fp
   27202:	e7bc      	b.n	2717e <getTrngSource+0x1c2>
   27204:	481f      	ldr	r0, [pc, #124]	; (27284 <getTrngSource+0x2c8>)
   27206:	e725      	b.n	27054 <getTrngSource+0x98>
   27208:	481f      	ldr	r0, [pc, #124]	; (27288 <getTrngSource+0x2cc>)
   2720a:	e723      	b.n	27054 <getTrngSource+0x98>
   2720c:	2703      	movs	r7, #3
   2720e:	e74b      	b.n	270a8 <getTrngSource+0xec>
   27210:	2702      	movs	r7, #2
   27212:	e749      	b.n	270a8 <getTrngSource+0xec>
   27214:	6a23      	ldr	r3, [r4, #32]
   27216:	2b00      	cmp	r3, #0
   27218:	f43f af20 	beq.w	2705c <getTrngSource+0xa0>
   2721c:	481b      	ldr	r0, [pc, #108]	; (2728c <getTrngSource+0x2d0>)
   2721e:	e71d      	b.n	2705c <getTrngSource+0xa0>
   27220:	9500      	str	r5, [sp, #0]
   27222:	ab04      	add	r3, sp, #16
   27224:	2201      	movs	r2, #1
   27226:	4621      	mov	r1, r4
   27228:	4638      	mov	r0, r7
   2722a:	f7ff fd83 	bl	26d34 <startTrngHW>
   2722e:	2800      	cmp	r0, #0
   27230:	f43f aee2 	beq.w	26ff8 <getTrngSource+0x3c>
   27234:	e712      	b.n	2705c <getTrngSource+0xa0>
   27236:	69a2      	ldr	r2, [r4, #24]
   27238:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2723c:	4651      	mov	r1, sl
   2723e:	4628      	mov	r0, r5
   27240:	f7ff fe54 	bl	26eec <LLF_RND_AdaptiveProportionTest>
   27244:	2800      	cmp	r0, #0
   27246:	d1aa      	bne.n	2719e <getTrngSource+0x1e2>
   27248:	e7d1      	b.n	271ee <getTrngSource+0x232>
   2724a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2724c:	601d      	str	r5, [r3, #0]
   2724e:	e7ad      	b.n	271ac <getTrngSource+0x1f0>
   27250:	5002b138 	.word	0x5002b138
   27254:	5002b130 	.word	0x5002b130
   27258:	aaaaaaab 	.word	0xaaaaaaab
   2725c:	00f10c02 	.word	0x00f10c02
   27260:	00f10c30 	.word	0x00f10c30
   27264:	5002b1c4 	.word	0x5002b1c4
   27268:	5002b12c 	.word	0x5002b12c
   2726c:	5002b100 	.word	0x5002b100
   27270:	5002b10c 	.word	0x5002b10c
   27274:	5002ba04 	.word	0x5002ba04
   27278:	5002b1d8 	.word	0x5002b1d8
   2727c:	5002b114 	.word	0x5002b114
   27280:	5002b118 	.word	0x5002b118
   27284:	00f10c31 	.word	0x00f10c31
   27288:	00f10c35 	.word	0x00f10c35
   2728c:	00f10c32 	.word	0x00f10c32

00027290 <LLF_RND_GetTrngSource>:
   27290:	b430      	push	{r4, r5}
   27292:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   27296:	9d04      	ldr	r5, [sp, #16]
   27298:	9402      	str	r4, [sp, #8]
   2729a:	2400      	movs	r4, #0
   2729c:	e9cd 5403 	strd	r5, r4, [sp, #12]
   272a0:	bc30      	pop	{r4, r5}
   272a2:	f7ff be8b 	b.w	26fbc <getTrngSource>
   272a6:	bf00      	nop

000272a8 <LLF_RND_RunTrngStartupTest>:
   272a8:	b510      	push	{r4, lr}
   272aa:	b086      	sub	sp, #24
   272ac:	ab05      	add	r3, sp, #20
   272ae:	2401      	movs	r4, #1
   272b0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   272b4:	9300      	str	r3, [sp, #0]
   272b6:	2200      	movs	r2, #0
   272b8:	ab04      	add	r3, sp, #16
   272ba:	f7ff fe7f 	bl	26fbc <getTrngSource>
   272be:	b006      	add	sp, #24
   272c0:	bd10      	pop	{r4, pc}
   272c2:	bf00      	nop

000272c4 <mbedtls_hardware_poll>:
   272c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   272c6:	b089      	sub	sp, #36	; 0x24
   272c8:	9205      	str	r2, [sp, #20]
   272ca:	2900      	cmp	r1, #0
   272cc:	d064      	beq.n	27398 <mbedtls_hardware_poll+0xd4>
   272ce:	461c      	mov	r4, r3
   272d0:	2b00      	cmp	r3, #0
   272d2:	d061      	beq.n	27398 <mbedtls_hardware_poll+0xd4>
   272d4:	4615      	mov	r5, r2
   272d6:	2a00      	cmp	r2, #0
   272d8:	d05e      	beq.n	27398 <mbedtls_hardware_poll+0xd4>
   272da:	4f31      	ldr	r7, [pc, #196]	; (273a0 <mbedtls_hardware_poll+0xdc>)
   272dc:	460e      	mov	r6, r1
   272de:	6838      	ldr	r0, [r7, #0]
   272e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   272e4:	f7ff fca2 	bl	26c2c <CC_PalMutexLock>
   272e8:	2800      	cmp	r0, #0
   272ea:	d14b      	bne.n	27384 <mbedtls_hardware_poll+0xc0>
   272ec:	2000      	movs	r0, #0
   272ee:	f7ff fccd 	bl	26c8c <CC_PalPowerSaveModeSelect>
   272f2:	2800      	cmp	r0, #0
   272f4:	d142      	bne.n	2737c <mbedtls_hardware_poll+0xb8>
   272f6:	482b      	ldr	r0, [pc, #172]	; (273a4 <mbedtls_hardware_poll+0xe0>)
   272f8:	f000 fa12 	bl	27720 <RNG_PLAT_SetUserRngParameters>
   272fc:	b1d8      	cbz	r0, 27336 <mbedtls_hardware_poll+0x72>
   272fe:	2001      	movs	r0, #1
   27300:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   27304:	f7ff fcc2 	bl	26c8c <CC_PalPowerSaveModeSelect>
   27308:	2800      	cmp	r0, #0
   2730a:	d133      	bne.n	27374 <mbedtls_hardware_poll+0xb0>
   2730c:	4826      	ldr	r0, [pc, #152]	; (273a8 <mbedtls_hardware_poll+0xe4>)
   2730e:	f44f 7108 	mov.w	r1, #544	; 0x220
   27312:	f7fe fe47 	bl	25fa4 <mbedtls_zeroize_internal>
   27316:	4825      	ldr	r0, [pc, #148]	; (273ac <mbedtls_hardware_poll+0xe8>)
   27318:	21dc      	movs	r1, #220	; 0xdc
   2731a:	f7fe fe43 	bl	25fa4 <mbedtls_zeroize_internal>
   2731e:	4821      	ldr	r0, [pc, #132]	; (273a4 <mbedtls_hardware_poll+0xe0>)
   27320:	2128      	movs	r1, #40	; 0x28
   27322:	f7fe fe3f 	bl	25fa4 <mbedtls_zeroize_internal>
   27326:	6838      	ldr	r0, [r7, #0]
   27328:	f7ff fc88 	bl	26c3c <CC_PalMutexUnlock>
   2732c:	2800      	cmp	r0, #0
   2732e:	d12d      	bne.n	2738c <mbedtls_hardware_poll+0xc8>
   27330:	4630      	mov	r0, r6
   27332:	b009      	add	sp, #36	; 0x24
   27334:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27336:	491c      	ldr	r1, [pc, #112]	; (273a8 <mbedtls_hardware_poll+0xe4>)
   27338:	9003      	str	r0, [sp, #12]
   2733a:	ab07      	add	r3, sp, #28
   2733c:	4602      	mov	r2, r0
   2733e:	9102      	str	r1, [sp, #8]
   27340:	9300      	str	r3, [sp, #0]
   27342:	4918      	ldr	r1, [pc, #96]	; (273a4 <mbedtls_hardware_poll+0xe0>)
   27344:	4819      	ldr	r0, [pc, #100]	; (273ac <mbedtls_hardware_poll+0xe8>)
   27346:	9401      	str	r4, [sp, #4]
   27348:	ab05      	add	r3, sp, #20
   2734a:	f7ff ffa1 	bl	27290 <LLF_RND_GetTrngSource>
   2734e:	4603      	mov	r3, r0
   27350:	2800      	cmp	r0, #0
   27352:	d1d4      	bne.n	272fe <mbedtls_hardware_poll+0x3a>
   27354:	6822      	ldr	r2, [r4, #0]
   27356:	42aa      	cmp	r2, r5
   27358:	d3d1      	bcc.n	272fe <mbedtls_hardware_poll+0x3a>
   2735a:	9907      	ldr	r1, [sp, #28]
   2735c:	4630      	mov	r0, r6
   2735e:	3108      	adds	r1, #8
   27360:	462a      	mov	r2, r5
   27362:	461e      	mov	r6, r3
   27364:	f000 fa18 	bl	27798 <CC_PalMemCopyPlat>
   27368:	6025      	str	r5, [r4, #0]
   2736a:	2001      	movs	r0, #1
   2736c:	f7ff fc8e 	bl	26c8c <CC_PalPowerSaveModeSelect>
   27370:	2800      	cmp	r0, #0
   27372:	d0cb      	beq.n	2730c <mbedtls_hardware_poll+0x48>
   27374:	480e      	ldr	r0, [pc, #56]	; (273b0 <mbedtls_hardware_poll+0xec>)
   27376:	f7fe fd0d 	bl	25d94 <CC_PalAbort>
   2737a:	e7c7      	b.n	2730c <mbedtls_hardware_poll+0x48>
   2737c:	480d      	ldr	r0, [pc, #52]	; (273b4 <mbedtls_hardware_poll+0xf0>)
   2737e:	f7fe fd09 	bl	25d94 <CC_PalAbort>
   27382:	e7b8      	b.n	272f6 <mbedtls_hardware_poll+0x32>
   27384:	480c      	ldr	r0, [pc, #48]	; (273b8 <mbedtls_hardware_poll+0xf4>)
   27386:	f7fe fd05 	bl	25d94 <CC_PalAbort>
   2738a:	e7af      	b.n	272ec <mbedtls_hardware_poll+0x28>
   2738c:	480b      	ldr	r0, [pc, #44]	; (273bc <mbedtls_hardware_poll+0xf8>)
   2738e:	f7fe fd01 	bl	25d94 <CC_PalAbort>
   27392:	4630      	mov	r0, r6
   27394:	b009      	add	sp, #36	; 0x24
   27396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27398:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2739c:	e7c8      	b.n	27330 <mbedtls_hardware_poll+0x6c>
   2739e:	bf00      	nop
   273a0:	200006b0 	.word	0x200006b0
   273a4:	20003618 	.word	0x20003618
   273a8:	200033f8 	.word	0x200033f8
   273ac:	2000331c 	.word	0x2000331c
   273b0:	0002e408 	.word	0x0002e408
   273b4:	0002e3e8 	.word	0x0002e3e8
   273b8:	0002e3d0 	.word	0x0002e3d0
   273bc:	0002e460 	.word	0x0002e460

000273c0 <cc_mbedtls_aes_init>:
   273c0:	b510      	push	{r4, lr}
   273c2:	4604      	mov	r4, r0
   273c4:	b130      	cbz	r0, 273d4 <cc_mbedtls_aes_init+0x14>
   273c6:	2200      	movs	r2, #0
   273c8:	2301      	movs	r3, #1
   273ca:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   273ce:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   273d2:	bd10      	pop	{r4, pc}
   273d4:	4801      	ldr	r0, [pc, #4]	; (273dc <cc_mbedtls_aes_init+0x1c>)
   273d6:	f7fe fcdd 	bl	25d94 <CC_PalAbort>
   273da:	e7f4      	b.n	273c6 <cc_mbedtls_aes_init+0x6>
   273dc:	0002e478 	.word	0x0002e478

000273e0 <cc_mbedtls_aes_free>:
   273e0:	b118      	cbz	r0, 273ea <cc_mbedtls_aes_free+0xa>
   273e2:	2274      	movs	r2, #116	; 0x74
   273e4:	2100      	movs	r1, #0
   273e6:	f000 b9d9 	b.w	2779c <CC_PalMemSetPlat>
   273ea:	4770      	bx	lr

000273ec <cc_mbedtls_aes_setkey_enc>:
   273ec:	b190      	cbz	r0, 27414 <cc_mbedtls_aes_setkey_enc+0x28>
   273ee:	b1a1      	cbz	r1, 2741a <cc_mbedtls_aes_setkey_enc+0x2e>
   273f0:	b510      	push	{r4, lr}
   273f2:	2a80      	cmp	r2, #128	; 0x80
   273f4:	f04f 0400 	mov.w	r4, #0
   273f8:	6384      	str	r4, [r0, #56]	; 0x38
   273fa:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   273fe:	d106      	bne.n	2740e <cc_mbedtls_aes_setkey_enc+0x22>
   27400:	6304      	str	r4, [r0, #48]	; 0x30
   27402:	2210      	movs	r2, #16
   27404:	3010      	adds	r0, #16
   27406:	f000 f9c7 	bl	27798 <CC_PalMemCopyPlat>
   2740a:	4620      	mov	r0, r4
   2740c:	bd10      	pop	{r4, pc}
   2740e:	f06f 001f 	mvn.w	r0, #31
   27412:	bd10      	pop	{r4, pc}
   27414:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27418:	4770      	bx	lr
   2741a:	f06f 001f 	mvn.w	r0, #31
   2741e:	4770      	bx	lr

00027420 <cc_mbedtls_aes_crypt_ecb>:
   27420:	b320      	cbz	r0, 2746c <cc_mbedtls_aes_crypt_ecb+0x4c>
   27422:	b31a      	cbz	r2, 2746c <cc_mbedtls_aes_crypt_ecb+0x4c>
   27424:	b313      	cbz	r3, 2746c <cc_mbedtls_aes_crypt_ecb+0x4c>
   27426:	2901      	cmp	r1, #1
   27428:	d820      	bhi.n	2746c <cc_mbedtls_aes_crypt_ecb+0x4c>
   2742a:	b570      	push	{r4, r5, r6, lr}
   2742c:	4604      	mov	r4, r0
   2742e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   27430:	b086      	sub	sp, #24
   27432:	d016      	beq.n	27462 <cc_mbedtls_aes_crypt_ecb+0x42>
   27434:	2901      	cmp	r1, #1
   27436:	d116      	bne.n	27466 <cc_mbedtls_aes_crypt_ecb+0x46>
   27438:	2100      	movs	r1, #0
   2743a:	2510      	movs	r5, #16
   2743c:	ae04      	add	r6, sp, #16
   2743e:	6361      	str	r1, [r4, #52]	; 0x34
   27440:	4610      	mov	r0, r2
   27442:	e9cd 5600 	strd	r5, r6, [sp]
   27446:	aa02      	add	r2, sp, #8
   27448:	4629      	mov	r1, r5
   2744a:	f000 fa4d 	bl	278e8 <SetDataBuffersInfo>
   2744e:	b950      	cbnz	r0, 27466 <cc_mbedtls_aes_crypt_ecb+0x46>
   27450:	462b      	mov	r3, r5
   27452:	4632      	mov	r2, r6
   27454:	a902      	add	r1, sp, #8
   27456:	4620      	mov	r0, r4
   27458:	f000 fcda 	bl	27e10 <ProcessAesDrv>
   2745c:	b918      	cbnz	r0, 27466 <cc_mbedtls_aes_crypt_ecb+0x46>
   2745e:	b006      	add	sp, #24
   27460:	bd70      	pop	{r4, r5, r6, pc}
   27462:	2900      	cmp	r1, #0
   27464:	d0e8      	beq.n	27438 <cc_mbedtls_aes_crypt_ecb+0x18>
   27466:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2746a:	e7f8      	b.n	2745e <cc_mbedtls_aes_crypt_ecb+0x3e>
   2746c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   27470:	4770      	bx	lr
   27472:	bf00      	nop

00027474 <cc_mbedtls_sha256_init>:
   27474:	b510      	push	{r4, lr}
   27476:	4604      	mov	r4, r0
   27478:	b128      	cbz	r0, 27486 <cc_mbedtls_sha256_init+0x12>
   2747a:	4620      	mov	r0, r4
   2747c:	21f0      	movs	r1, #240	; 0xf0
   2747e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27482:	f000 b98d 	b.w	277a0 <CC_PalMemSetZeroPlat>
   27486:	4804      	ldr	r0, [pc, #16]	; (27498 <cc_mbedtls_sha256_init+0x24>)
   27488:	f7fe fc84 	bl	25d94 <CC_PalAbort>
   2748c:	4620      	mov	r0, r4
   2748e:	21f0      	movs	r1, #240	; 0xf0
   27490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27494:	f000 b984 	b.w	277a0 <CC_PalMemSetZeroPlat>
   27498:	0002e48c 	.word	0x0002e48c

0002749c <cc_mbedtls_sha256_free>:
   2749c:	b110      	cbz	r0, 274a4 <cc_mbedtls_sha256_free+0x8>
   2749e:	21f0      	movs	r1, #240	; 0xf0
   274a0:	f7fe bd80 	b.w	25fa4 <mbedtls_zeroize_internal>
   274a4:	4770      	bx	lr
   274a6:	bf00      	nop

000274a8 <cc_mbedtls_sha256_starts>:
   274a8:	b508      	push	{r3, lr}
   274aa:	b161      	cbz	r1, 274c6 <cc_mbedtls_sha256_starts+0x1e>
   274ac:	2901      	cmp	r1, #1
   274ae:	d107      	bne.n	274c0 <cc_mbedtls_sha256_starts+0x18>
   274b0:	2102      	movs	r1, #2
   274b2:	f000 f85b 	bl	2756c <mbedtls_sha_starts_internal>
   274b6:	2800      	cmp	r0, #0
   274b8:	bf18      	it	ne
   274ba:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   274be:	bd08      	pop	{r3, pc}
   274c0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   274c4:	bd08      	pop	{r3, pc}
   274c6:	2101      	movs	r1, #1
   274c8:	f000 f850 	bl	2756c <mbedtls_sha_starts_internal>
   274cc:	e7f3      	b.n	274b6 <cc_mbedtls_sha256_starts+0xe>
   274ce:	bf00      	nop

000274d0 <cc_mbedtls_sha256_update>:
   274d0:	b570      	push	{r4, r5, r6, lr}
   274d2:	188e      	adds	r6, r1, r2
   274d4:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   274d8:	b0a0      	sub	sp, #128	; 0x80
   274da:	460b      	mov	r3, r1
   274dc:	4614      	mov	r4, r2
   274de:	4605      	mov	r5, r0
   274e0:	d801      	bhi.n	274e6 <cc_mbedtls_sha256_update+0x16>
   274e2:	2a80      	cmp	r2, #128	; 0x80
   274e4:	d90c      	bls.n	27500 <cc_mbedtls_sha256_update+0x30>
   274e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   274ea:	d917      	bls.n	2751c <cc_mbedtls_sha256_update+0x4c>
   274ec:	4622      	mov	r2, r4
   274ee:	4619      	mov	r1, r3
   274f0:	4628      	mov	r0, r5
   274f2:	f000 f87d 	bl	275f0 <mbedtls_sha_update_internal>
   274f6:	4604      	mov	r4, r0
   274f8:	b984      	cbnz	r4, 2751c <cc_mbedtls_sha256_update+0x4c>
   274fa:	4620      	mov	r0, r4
   274fc:	b020      	add	sp, #128	; 0x80
   274fe:	bd70      	pop	{r4, r5, r6, pc}
   27500:	4668      	mov	r0, sp
   27502:	f000 f949 	bl	27798 <CC_PalMemCopyPlat>
   27506:	4622      	mov	r2, r4
   27508:	4669      	mov	r1, sp
   2750a:	4628      	mov	r0, r5
   2750c:	f000 f870 	bl	275f0 <mbedtls_sha_update_internal>
   27510:	2180      	movs	r1, #128	; 0x80
   27512:	4604      	mov	r4, r0
   27514:	4668      	mov	r0, sp
   27516:	f000 f943 	bl	277a0 <CC_PalMemSetZeroPlat>
   2751a:	e7ed      	b.n	274f8 <cc_mbedtls_sha256_update+0x28>
   2751c:	f06f 0436 	mvn.w	r4, #54	; 0x36
   27520:	e7eb      	b.n	274fa <cc_mbedtls_sha256_update+0x2a>
   27522:	bf00      	nop

00027524 <cc_mbedtls_sha256_finish>:
   27524:	b570      	push	{r4, r5, r6, lr}
   27526:	b1e8      	cbz	r0, 27564 <cc_mbedtls_sha256_finish+0x40>
   27528:	460e      	mov	r6, r1
   2752a:	b1d9      	cbz	r1, 27564 <cc_mbedtls_sha256_finish+0x40>
   2752c:	4604      	mov	r4, r0
   2752e:	f000 f831 	bl	27594 <mbedtls_sha_finish_internal>
   27532:	4605      	mov	r5, r0
   27534:	b9b0      	cbnz	r0, 27564 <cc_mbedtls_sha256_finish+0x40>
   27536:	6823      	ldr	r3, [r4, #0]
   27538:	2b01      	cmp	r3, #1
   2753a:	d00b      	beq.n	27554 <cc_mbedtls_sha256_finish+0x30>
   2753c:	2b02      	cmp	r3, #2
   2753e:	d001      	beq.n	27544 <cc_mbedtls_sha256_finish+0x20>
   27540:	4628      	mov	r0, r5
   27542:	bd70      	pop	{r4, r5, r6, pc}
   27544:	f104 0108 	add.w	r1, r4, #8
   27548:	4630      	mov	r0, r6
   2754a:	221c      	movs	r2, #28
   2754c:	f000 f924 	bl	27798 <CC_PalMemCopyPlat>
   27550:	4628      	mov	r0, r5
   27552:	bd70      	pop	{r4, r5, r6, pc}
   27554:	f104 0108 	add.w	r1, r4, #8
   27558:	4630      	mov	r0, r6
   2755a:	2220      	movs	r2, #32
   2755c:	f000 f91c 	bl	27798 <CC_PalMemCopyPlat>
   27560:	4628      	mov	r0, r5
   27562:	bd70      	pop	{r4, r5, r6, pc}
   27564:	f06f 0536 	mvn.w	r5, #54	; 0x36
   27568:	e7ea      	b.n	27540 <cc_mbedtls_sha256_finish+0x1c>
   2756a:	bf00      	nop

0002756c <mbedtls_sha_starts_internal>:
   2756c:	b178      	cbz	r0, 2758e <mbedtls_sha_starts_internal+0x22>
   2756e:	b538      	push	{r3, r4, r5, lr}
   27570:	4604      	mov	r4, r0
   27572:	460d      	mov	r5, r1
   27574:	21f0      	movs	r1, #240	; 0xf0
   27576:	f000 f913 	bl	277a0 <CC_PalMemSetZeroPlat>
   2757a:	2340      	movs	r3, #64	; 0x40
   2757c:	6025      	str	r5, [r4, #0]
   2757e:	65e3      	str	r3, [r4, #92]	; 0x5c
   27580:	4620      	mov	r0, r4
   27582:	f000 f9e5 	bl	27950 <InitHashDrv>
   27586:	3800      	subs	r0, #0
   27588:	bf18      	it	ne
   2758a:	2001      	movne	r0, #1
   2758c:	bd38      	pop	{r3, r4, r5, pc}
   2758e:	2001      	movs	r0, #1
   27590:	4770      	bx	lr
   27592:	bf00      	nop

00027594 <mbedtls_sha_finish_internal>:
   27594:	b570      	push	{r4, r5, r6, lr}
   27596:	6e05      	ldr	r5, [r0, #96]	; 0x60
   27598:	b0a4      	sub	sp, #144	; 0x90
   2759a:	4604      	mov	r4, r0
   2759c:	ae04      	add	r6, sp, #16
   2759e:	b9e5      	cbnz	r5, 275da <mbedtls_sha_finish_internal+0x46>
   275a0:	2201      	movs	r2, #1
   275a2:	2300      	movs	r3, #0
   275a4:	6062      	str	r2, [r4, #4]
   275a6:	4630      	mov	r0, r6
   275a8:	e9cd 3300 	strd	r3, r3, [sp]
   275ac:	aa02      	add	r2, sp, #8
   275ae:	4629      	mov	r1, r5
   275b0:	f000 f99a 	bl	278e8 <SetDataBuffersInfo>
   275b4:	b110      	cbz	r0, 275bc <mbedtls_sha_finish_internal+0x28>
   275b6:	2001      	movs	r0, #1
   275b8:	b024      	add	sp, #144	; 0x90
   275ba:	bd70      	pop	{r4, r5, r6, pc}
   275bc:	462a      	mov	r2, r5
   275be:	a902      	add	r1, sp, #8
   275c0:	4620      	mov	r0, r4
   275c2:	f000 f9ef 	bl	279a4 <ProcessHashDrv>
   275c6:	2800      	cmp	r0, #0
   275c8:	d1f5      	bne.n	275b6 <mbedtls_sha_finish_internal+0x22>
   275ca:	4620      	mov	r0, r4
   275cc:	f000 fb18 	bl	27c00 <FinishHashDrv>
   275d0:	2800      	cmp	r0, #0
   275d2:	d1f0      	bne.n	275b6 <mbedtls_sha_finish_internal+0x22>
   275d4:	6620      	str	r0, [r4, #96]	; 0x60
   275d6:	b024      	add	sp, #144	; 0x90
   275d8:	bd70      	pop	{r4, r5, r6, pc}
   275da:	2d80      	cmp	r5, #128	; 0x80
   275dc:	462a      	mov	r2, r5
   275de:	4630      	mov	r0, r6
   275e0:	bf28      	it	cs
   275e2:	2280      	movcs	r2, #128	; 0x80
   275e4:	f104 0164 	add.w	r1, r4, #100	; 0x64
   275e8:	f000 f8d6 	bl	27798 <CC_PalMemCopyPlat>
   275ec:	6e25      	ldr	r5, [r4, #96]	; 0x60
   275ee:	e7d7      	b.n	275a0 <mbedtls_sha_finish_internal+0xc>

000275f0 <mbedtls_sha_update_internal>:
   275f0:	2800      	cmp	r0, #0
   275f2:	d054      	beq.n	2769e <mbedtls_sha_update_internal+0xae>
   275f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   275f6:	4614      	mov	r4, r2
   275f8:	b0a5      	sub	sp, #148	; 0x94
   275fa:	b1b2      	cbz	r2, 2762a <mbedtls_sha_update_internal+0x3a>
   275fc:	460e      	mov	r6, r1
   275fe:	b351      	cbz	r1, 27656 <mbedtls_sha_update_internal+0x66>
   27600:	4605      	mov	r5, r0
   27602:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   27606:	1a1a      	subs	r2, r3, r0
   27608:	fbb2 f7f3 	udiv	r7, r2, r3
   2760c:	fb03 2717 	mls	r7, r3, r7, r2
   27610:	42a7      	cmp	r7, r4
   27612:	bf28      	it	cs
   27614:	4627      	movcs	r7, r4
   27616:	2f00      	cmp	r7, #0
   27618:	d143      	bne.n	276a2 <mbedtls_sha_update_internal+0xb2>
   2761a:	4283      	cmp	r3, r0
   2761c:	d008      	beq.n	27630 <mbedtls_sha_update_internal+0x40>
   2761e:	fbb4 f7f3 	udiv	r7, r4, r3
   27622:	fb03 f707 	mul.w	r7, r3, r7
   27626:	b9cf      	cbnz	r7, 2765c <mbedtls_sha_update_internal+0x6c>
   27628:	bb6c      	cbnz	r4, 27686 <mbedtls_sha_update_internal+0x96>
   2762a:	2000      	movs	r0, #0
   2762c:	b025      	add	sp, #148	; 0x94
   2762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27630:	2b80      	cmp	r3, #128	; 0x80
   27632:	bf28      	it	cs
   27634:	2380      	movcs	r3, #128	; 0x80
   27636:	461a      	mov	r2, r3
   27638:	f105 0164 	add.w	r1, r5, #100	; 0x64
   2763c:	a804      	add	r0, sp, #16
   2763e:	f000 f8ab 	bl	27798 <CC_PalMemCopyPlat>
   27642:	2300      	movs	r3, #0
   27644:	e9cd 3300 	strd	r3, r3, [sp]
   27648:	a804      	add	r0, sp, #16
   2764a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   2764c:	aa02      	add	r2, sp, #8
   2764e:	f000 f94b 	bl	278e8 <SetDataBuffersInfo>
   27652:	2800      	cmp	r0, #0
   27654:	d032      	beq.n	276bc <mbedtls_sha_update_internal+0xcc>
   27656:	2001      	movs	r0, #1
   27658:	b025      	add	sp, #148	; 0x94
   2765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2765c:	2300      	movs	r3, #0
   2765e:	e9cd 3300 	strd	r3, r3, [sp]
   27662:	aa02      	add	r2, sp, #8
   27664:	4639      	mov	r1, r7
   27666:	4630      	mov	r0, r6
   27668:	f000 f93e 	bl	278e8 <SetDataBuffersInfo>
   2766c:	2800      	cmp	r0, #0
   2766e:	d1f2      	bne.n	27656 <mbedtls_sha_update_internal+0x66>
   27670:	a902      	add	r1, sp, #8
   27672:	463a      	mov	r2, r7
   27674:	4628      	mov	r0, r5
   27676:	f000 f995 	bl	279a4 <ProcessHashDrv>
   2767a:	2800      	cmp	r0, #0
   2767c:	d1eb      	bne.n	27656 <mbedtls_sha_update_internal+0x66>
   2767e:	1be4      	subs	r4, r4, r7
   27680:	443e      	add	r6, r7
   27682:	2c00      	cmp	r4, #0
   27684:	d0d1      	beq.n	2762a <mbedtls_sha_update_internal+0x3a>
   27686:	6e28      	ldr	r0, [r5, #96]	; 0x60
   27688:	3019      	adds	r0, #25
   2768a:	4622      	mov	r2, r4
   2768c:	4631      	mov	r1, r6
   2768e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   27692:	f000 f881 	bl	27798 <CC_PalMemCopyPlat>
   27696:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   27698:	4422      	add	r2, r4
   2769a:	662a      	str	r2, [r5, #96]	; 0x60
   2769c:	e7c5      	b.n	2762a <mbedtls_sha_update_internal+0x3a>
   2769e:	2001      	movs	r0, #1
   276a0:	4770      	bx	lr
   276a2:	f105 0364 	add.w	r3, r5, #100	; 0x64
   276a6:	4418      	add	r0, r3
   276a8:	463a      	mov	r2, r7
   276aa:	f000 f875 	bl	27798 <CC_PalMemCopyPlat>
   276ae:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   276b2:	4438      	add	r0, r7
   276b4:	443e      	add	r6, r7
   276b6:	1be4      	subs	r4, r4, r7
   276b8:	6628      	str	r0, [r5, #96]	; 0x60
   276ba:	e7ae      	b.n	2761a <mbedtls_sha_update_internal+0x2a>
   276bc:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   276be:	a902      	add	r1, sp, #8
   276c0:	4628      	mov	r0, r5
   276c2:	f000 f96f 	bl	279a4 <ProcessHashDrv>
   276c6:	2800      	cmp	r0, #0
   276c8:	d1c5      	bne.n	27656 <mbedtls_sha_update_internal+0x66>
   276ca:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   276cc:	6628      	str	r0, [r5, #96]	; 0x60
   276ce:	e7a6      	b.n	2761e <mbedtls_sha_update_internal+0x2e>

000276d0 <cc_mbedtls_sha256>:
   276d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276d2:	461c      	mov	r4, r3
   276d4:	4605      	mov	r5, r0
   276d6:	4811      	ldr	r0, [pc, #68]	; (2771c <cc_mbedtls_sha256+0x4c>)
   276d8:	460e      	mov	r6, r1
   276da:	4617      	mov	r7, r2
   276dc:	f7ff feca 	bl	27474 <cc_mbedtls_sha256_init>
   276e0:	4621      	mov	r1, r4
   276e2:	480e      	ldr	r0, [pc, #56]	; (2771c <cc_mbedtls_sha256+0x4c>)
   276e4:	f7ff fee0 	bl	274a8 <cc_mbedtls_sha256_starts>
   276e8:	4604      	mov	r4, r0
   276ea:	b120      	cbz	r0, 276f6 <cc_mbedtls_sha256+0x26>
   276ec:	480b      	ldr	r0, [pc, #44]	; (2771c <cc_mbedtls_sha256+0x4c>)
   276ee:	f7ff fed5 	bl	2749c <cc_mbedtls_sha256_free>
   276f2:	4620      	mov	r0, r4
   276f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   276f6:	4809      	ldr	r0, [pc, #36]	; (2771c <cc_mbedtls_sha256+0x4c>)
   276f8:	4632      	mov	r2, r6
   276fa:	4629      	mov	r1, r5
   276fc:	f7ff fee8 	bl	274d0 <cc_mbedtls_sha256_update>
   27700:	4604      	mov	r4, r0
   27702:	2800      	cmp	r0, #0
   27704:	d1f2      	bne.n	276ec <cc_mbedtls_sha256+0x1c>
   27706:	4639      	mov	r1, r7
   27708:	4804      	ldr	r0, [pc, #16]	; (2771c <cc_mbedtls_sha256+0x4c>)
   2770a:	f7ff ff0b 	bl	27524 <cc_mbedtls_sha256_finish>
   2770e:	4604      	mov	r4, r0
   27710:	4802      	ldr	r0, [pc, #8]	; (2771c <cc_mbedtls_sha256+0x4c>)
   27712:	f7ff fec3 	bl	2749c <cc_mbedtls_sha256_free>
   27716:	4620      	mov	r0, r4
   27718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2771a:	bf00      	nop
   2771c:	20003640 	.word	0x20003640

00027720 <RNG_PLAT_SetUserRngParameters>:
   27720:	b530      	push	{r4, r5, lr}
   27722:	b083      	sub	sp, #12
   27724:	231c      	movs	r3, #28
   27726:	a901      	add	r1, sp, #4
   27728:	4604      	mov	r4, r0
   2772a:	9301      	str	r3, [sp, #4]
   2772c:	f000 f83c 	bl	277a8 <CC_PalTrngParamGet>
   27730:	4605      	mov	r5, r0
   27732:	b938      	cbnz	r0, 27744 <RNG_PLAT_SetUserRngParameters+0x24>
   27734:	9b01      	ldr	r3, [sp, #4]
   27736:	2b1c      	cmp	r3, #28
   27738:	d007      	beq.n	2774a <RNG_PLAT_SetUserRngParameters+0x2a>
   2773a:	4d15      	ldr	r5, [pc, #84]	; (27790 <RNG_PLAT_SetUserRngParameters+0x70>)
   2773c:	4620      	mov	r0, r4
   2773e:	211c      	movs	r1, #28
   27740:	f000 f82e 	bl	277a0 <CC_PalMemSetZeroPlat>
   27744:	4628      	mov	r0, r5
   27746:	b003      	add	sp, #12
   27748:	bd30      	pop	{r4, r5, pc}
   2774a:	e9d4 3200 	ldrd	r3, r2, [r4]
   2774e:	2101      	movs	r1, #1
   27750:	3b00      	subs	r3, #0
   27752:	bf18      	it	ne
   27754:	2301      	movne	r3, #1
   27756:	61e1      	str	r1, [r4, #28]
   27758:	b10a      	cbz	r2, 2775e <RNG_PLAT_SetUserRngParameters+0x3e>
   2775a:	f043 0302 	orr.w	r3, r3, #2
   2775e:	68a2      	ldr	r2, [r4, #8]
   27760:	b932      	cbnz	r2, 27770 <RNG_PLAT_SetUserRngParameters+0x50>
   27762:	68e2      	ldr	r2, [r4, #12]
   27764:	b942      	cbnz	r2, 27778 <RNG_PLAT_SetUserRngParameters+0x58>
   27766:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2776a:	b97b      	cbnz	r3, 2778c <RNG_PLAT_SetUserRngParameters+0x6c>
   2776c:	4d09      	ldr	r5, [pc, #36]	; (27794 <RNG_PLAT_SetUserRngParameters+0x74>)
   2776e:	e7e5      	b.n	2773c <RNG_PLAT_SetUserRngParameters+0x1c>
   27770:	68e2      	ldr	r2, [r4, #12]
   27772:	f043 0304 	orr.w	r3, r3, #4
   27776:	b13a      	cbz	r2, 27788 <RNG_PLAT_SetUserRngParameters+0x68>
   27778:	f043 0308 	orr.w	r3, r3, #8
   2777c:	2200      	movs	r2, #0
   2777e:	4628      	mov	r0, r5
   27780:	e9c4 3208 	strd	r3, r2, [r4, #32]
   27784:	b003      	add	sp, #12
   27786:	bd30      	pop	{r4, r5, pc}
   27788:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2778c:	4615      	mov	r5, r2
   2778e:	e7d9      	b.n	27744 <RNG_PLAT_SetUserRngParameters+0x24>
   27790:	00f00c37 	.word	0x00f00c37
   27794:	00f00c0e 	.word	0x00f00c0e

00027798 <CC_PalMemCopyPlat>:
   27798:	f003 b968 	b.w	2aa6c <memmove>

0002779c <CC_PalMemSetPlat>:
   2779c:	f003 b988 	b.w	2aab0 <memset>

000277a0 <CC_PalMemSetZeroPlat>:
   277a0:	460a      	mov	r2, r1
   277a2:	2100      	movs	r1, #0
   277a4:	f003 b984 	b.w	2aab0 <memset>

000277a8 <CC_PalTrngParamGet>:
   277a8:	b118      	cbz	r0, 277b2 <CC_PalTrngParamGet+0xa>
   277aa:	b111      	cbz	r1, 277b2 <CC_PalTrngParamGet+0xa>
   277ac:	680b      	ldr	r3, [r1, #0]
   277ae:	2b1c      	cmp	r3, #28
   277b0:	d001      	beq.n	277b6 <CC_PalTrngParamGet+0xe>
   277b2:	2001      	movs	r0, #1
   277b4:	4770      	bx	lr
   277b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   277ba:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   277be:	3201      	adds	r2, #1
   277c0:	bf14      	ite	ne
   277c2:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   277c6:	f241 225c 	movweq	r2, #4700	; 0x125c
   277ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   277ce:	6002      	str	r2, [r0, #0]
   277d0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   277d4:	3201      	adds	r2, #1
   277d6:	bf14      	ite	ne
   277d8:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   277dc:	f641 1264 	movweq	r2, #6500	; 0x1964
   277e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   277e4:	6042      	str	r2, [r0, #4]
   277e6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   277ea:	3201      	adds	r2, #1
   277ec:	bf14      	ite	ne
   277ee:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   277f2:	f640 62d8 	movweq	r2, #3800	; 0xed8
   277f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   277fa:	6082      	str	r2, [r0, #8]
   277fc:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   27800:	3201      	adds	r2, #1
   27802:	bf14      	ite	ne
   27804:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   27808:	f241 3288 	movweq	r2, #5000	; 0x1388
   2780c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27810:	60c2      	str	r2, [r0, #12]
   27812:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   27816:	3201      	adds	r2, #1
   27818:	bf14      	ite	ne
   2781a:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2781e:	2290      	moveq	r2, #144	; 0x90
   27820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27824:	6102      	str	r2, [r0, #16]
   27826:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   2782a:	3201      	adds	r2, #1
   2782c:	bf14      	ite	ne
   2782e:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   27832:	2251      	moveq	r2, #81	; 0x51
   27834:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27838:	6142      	str	r2, [r0, #20]
   2783a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2783e:	3201      	adds	r2, #1
   27840:	bf14      	ite	ne
   27842:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   27846:	f240 3337 	movweq	r3, #823	; 0x337
   2784a:	6183      	str	r3, [r0, #24]
   2784c:	2000      	movs	r0, #0
   2784e:	4770      	bx	lr

00027850 <LLF_RND_WaitRngInterrupt>:
   27850:	b508      	push	{r3, lr}
   27852:	4601      	mov	r1, r0
   27854:	f44f 6080 	mov.w	r0, #1024	; 0x400
   27858:	f7ff f95a 	bl	26b10 <CC_HalWaitInterruptRND>
   2785c:	4902      	ldr	r1, [pc, #8]	; (27868 <LLF_RND_WaitRngInterrupt+0x18>)
   2785e:	4a03      	ldr	r2, [pc, #12]	; (2786c <LLF_RND_WaitRngInterrupt+0x1c>)
   27860:	2300      	movs	r3, #0
   27862:	600b      	str	r3, [r1, #0]
   27864:	6013      	str	r3, [r2, #0]
   27866:	bd08      	pop	{r3, pc}
   27868:	5002b1c8 	.word	0x5002b1c8
   2786c:	5002b12c 	.word	0x5002b12c

00027870 <LLF_RND_GetRoscSampleCnt>:
   27870:	3801      	subs	r0, #1
   27872:	2807      	cmp	r0, #7
   27874:	d805      	bhi.n	27882 <LLF_RND_GetRoscSampleCnt+0x12>
   27876:	e8df f000 	tbb	[pc, r0]
   2787a:	0e0a      	.short	0x0e0a
   2787c:	04041204 	.word	0x04041204
   27880:	0604      	.short	0x0604
   27882:	4809      	ldr	r0, [pc, #36]	; (278a8 <LLF_RND_GetRoscSampleCnt+0x38>)
   27884:	4770      	bx	lr
   27886:	68cb      	ldr	r3, [r1, #12]
   27888:	624b      	str	r3, [r1, #36]	; 0x24
   2788a:	2000      	movs	r0, #0
   2788c:	4770      	bx	lr
   2788e:	680b      	ldr	r3, [r1, #0]
   27890:	624b      	str	r3, [r1, #36]	; 0x24
   27892:	2000      	movs	r0, #0
   27894:	4770      	bx	lr
   27896:	684b      	ldr	r3, [r1, #4]
   27898:	624b      	str	r3, [r1, #36]	; 0x24
   2789a:	2000      	movs	r0, #0
   2789c:	4770      	bx	lr
   2789e:	688b      	ldr	r3, [r1, #8]
   278a0:	624b      	str	r3, [r1, #36]	; 0x24
   278a2:	2000      	movs	r0, #0
   278a4:	4770      	bx	lr
   278a6:	bf00      	nop
   278a8:	00f10c31 	.word	0x00f10c31

000278ac <LLF_RND_GetFastestRosc>:
   278ac:	680b      	ldr	r3, [r1, #0]
   278ae:	e002      	b.n	278b6 <LLF_RND_GetFastestRosc+0xa>
   278b0:	2b08      	cmp	r3, #8
   278b2:	600b      	str	r3, [r1, #0]
   278b4:	d806      	bhi.n	278c4 <LLF_RND_GetFastestRosc+0x18>
   278b6:	6a02      	ldr	r2, [r0, #32]
   278b8:	4213      	tst	r3, r2
   278ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
   278be:	d0f7      	beq.n	278b0 <LLF_RND_GetFastestRosc+0x4>
   278c0:	2000      	movs	r0, #0
   278c2:	4770      	bx	lr
   278c4:	4800      	ldr	r0, [pc, #0]	; (278c8 <LLF_RND_GetFastestRosc+0x1c>)
   278c6:	4770      	bx	lr
   278c8:	00f10c31 	.word	0x00f10c31

000278cc <LLF_RND_TurnOffTrng>:
   278cc:	4904      	ldr	r1, [pc, #16]	; (278e0 <LLF_RND_TurnOffTrng+0x14>)
   278ce:	4a05      	ldr	r2, [pc, #20]	; (278e4 <LLF_RND_TurnOffTrng+0x18>)
   278d0:	2300      	movs	r3, #0
   278d2:	600b      	str	r3, [r1, #0]
   278d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   278d8:	6013      	str	r3, [r2, #0]
   278da:	f7ff b8ff 	b.w	26adc <CC_HalClearInterruptBit>
   278de:	bf00      	nop
   278e0:	5002b12c 	.word	0x5002b12c
   278e4:	5002b1c4 	.word	0x5002b1c4

000278e8 <SetDataBuffersInfo>:
   278e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   278ea:	b083      	sub	sp, #12
   278ec:	2400      	movs	r4, #0
   278ee:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   278f2:	f88d 4007 	strb.w	r4, [sp, #7]
   278f6:	d325      	bcc.n	27944 <SetDataBuffersInfo+0x5c>
   278f8:	460c      	mov	r4, r1
   278fa:	4404      	add	r4, r0
   278fc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   27900:	4605      	mov	r5, r0
   27902:	d81f      	bhi.n	27944 <SetDataBuffersInfo+0x5c>
   27904:	4617      	mov	r7, r2
   27906:	461e      	mov	r6, r3
   27908:	2201      	movs	r2, #1
   2790a:	f10d 0307 	add.w	r3, sp, #7
   2790e:	f000 fe7f 	bl	28610 <CC_PalDataBufferAttrGet>
   27912:	4604      	mov	r4, r0
   27914:	b9b0      	cbnz	r0, 27944 <SetDataBuffersInfo+0x5c>
   27916:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27918:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2791c:	603d      	str	r5, [r7, #0]
   2791e:	713b      	strb	r3, [r7, #4]
   27920:	b192      	cbz	r2, 27948 <SetDataBuffersInfo+0x60>
   27922:	b14e      	cbz	r6, 27938 <SetDataBuffersInfo+0x50>
   27924:	4602      	mov	r2, r0
   27926:	9908      	ldr	r1, [sp, #32]
   27928:	f10d 0307 	add.w	r3, sp, #7
   2792c:	4630      	mov	r0, r6
   2792e:	f000 fe6f 	bl	28610 <CC_PalDataBufferAttrGet>
   27932:	b938      	cbnz	r0, 27944 <SetDataBuffersInfo+0x5c>
   27934:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27938:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2793a:	4620      	mov	r0, r4
   2793c:	6016      	str	r6, [r2, #0]
   2793e:	7113      	strb	r3, [r2, #4]
   27940:	b003      	add	sp, #12
   27942:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27944:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   27948:	4620      	mov	r0, r4
   2794a:	b003      	add	sp, #12
   2794c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2794e:	bf00      	nop

00027950 <InitHashDrv>:
   27950:	b1e8      	cbz	r0, 2798e <InitHashDrv+0x3e>
   27952:	b510      	push	{r4, lr}
   27954:	6804      	ldr	r4, [r0, #0]
   27956:	2c01      	cmp	r4, #1
   27958:	d004      	beq.n	27964 <InitHashDrv+0x14>
   2795a:	2c02      	cmp	r4, #2
   2795c:	d010      	beq.n	27980 <InitHashDrv+0x30>
   2795e:	b144      	cbz	r4, 27972 <InitHashDrv+0x22>
   27960:	480c      	ldr	r0, [pc, #48]	; (27994 <InitHashDrv+0x44>)
   27962:	bd10      	pop	{r4, pc}
   27964:	490c      	ldr	r1, [pc, #48]	; (27998 <InitHashDrv+0x48>)
   27966:	2220      	movs	r2, #32
   27968:	3008      	adds	r0, #8
   2796a:	f7ff ff15 	bl	27798 <CC_PalMemCopyPlat>
   2796e:	2000      	movs	r0, #0
   27970:	bd10      	pop	{r4, pc}
   27972:	490a      	ldr	r1, [pc, #40]	; (2799c <InitHashDrv+0x4c>)
   27974:	2214      	movs	r2, #20
   27976:	3008      	adds	r0, #8
   27978:	f7ff ff0e 	bl	27798 <CC_PalMemCopyPlat>
   2797c:	4620      	mov	r0, r4
   2797e:	bd10      	pop	{r4, pc}
   27980:	4907      	ldr	r1, [pc, #28]	; (279a0 <InitHashDrv+0x50>)
   27982:	2220      	movs	r2, #32
   27984:	3008      	adds	r0, #8
   27986:	f7ff ff07 	bl	27798 <CC_PalMemCopyPlat>
   2798a:	2000      	movs	r0, #0
   2798c:	bd10      	pop	{r4, pc}
   2798e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   27992:	4770      	bx	lr
   27994:	00f30001 	.word	0x00f30001
   27998:	0002e4d0 	.word	0x0002e4d0
   2799c:	0002e49c 	.word	0x0002e49c
   279a0:	0002e4b0 	.word	0x0002e4b0

000279a4 <ProcessHashDrv>:
   279a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279a8:	2900      	cmp	r1, #0
   279aa:	f000 80ef 	beq.w	27b8c <ProcessHashDrv+0x1e8>
   279ae:	4604      	mov	r4, r0
   279b0:	2800      	cmp	r0, #0
   279b2:	f000 80ef 	beq.w	27b94 <ProcessHashDrv+0x1f0>
   279b6:	6803      	ldr	r3, [r0, #0]
   279b8:	4617      	mov	r7, r2
   279ba:	460e      	mov	r6, r1
   279bc:	2b00      	cmp	r3, #0
   279be:	f000 80b9 	beq.w	27b34 <ProcessHashDrv+0x190>
   279c2:	3b01      	subs	r3, #1
   279c4:	2b01      	cmp	r3, #1
   279c6:	f200 80cd 	bhi.w	27b64 <ProcessHashDrv+0x1c0>
   279ca:	4874      	ldr	r0, [pc, #464]	; (27b9c <ProcessHashDrv+0x1f8>)
   279cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   279d0:	f04f 0802 	mov.w	r8, #2
   279d4:	f7ff f92a 	bl	26c2c <CC_PalMutexLock>
   279d8:	2800      	cmp	r0, #0
   279da:	f040 80b5 	bne.w	27b48 <ProcessHashDrv+0x1a4>
   279de:	2000      	movs	r0, #0
   279e0:	f7ff f954 	bl	26c8c <CC_PalPowerSaveModeSelect>
   279e4:	4605      	mov	r5, r0
   279e6:	2800      	cmp	r0, #0
   279e8:	f040 80b8 	bne.w	27b5c <ProcessHashDrv+0x1b8>
   279ec:	4a6c      	ldr	r2, [pc, #432]	; (27ba0 <ProcessHashDrv+0x1fc>)
   279ee:	6813      	ldr	r3, [r2, #0]
   279f0:	2b00      	cmp	r3, #0
   279f2:	d1fc      	bne.n	279ee <ProcessHashDrv+0x4a>
   279f4:	486b      	ldr	r0, [pc, #428]	; (27ba4 <ProcessHashDrv+0x200>)
   279f6:	6803      	ldr	r3, [r0, #0]
   279f8:	2b00      	cmp	r3, #0
   279fa:	d1fc      	bne.n	279f6 <ProcessHashDrv+0x52>
   279fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27a00:	f7ff f86c 	bl	26adc <CC_HalClearInterruptBit>
   27a04:	4b68      	ldr	r3, [pc, #416]	; (27ba8 <ProcessHashDrv+0x204>)
   27a06:	6818      	ldr	r0, [r3, #0]
   27a08:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   27a0c:	f7ff f874 	bl	26af8 <CC_HalMaskInterrupt>
   27a10:	4866      	ldr	r0, [pc, #408]	; (27bac <ProcessHashDrv+0x208>)
   27a12:	4a67      	ldr	r2, [pc, #412]	; (27bb0 <ProcessHashDrv+0x20c>)
   27a14:	4967      	ldr	r1, [pc, #412]	; (27bb4 <ProcessHashDrv+0x210>)
   27a16:	2301      	movs	r3, #1
   27a18:	6003      	str	r3, [r0, #0]
   27a1a:	2007      	movs	r0, #7
   27a1c:	6010      	str	r0, [r2, #0]
   27a1e:	600b      	str	r3, [r1, #0]
   27a20:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   27a24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27a26:	6013      	str	r3, [r2, #0]
   27a28:	4b63      	ldr	r3, [pc, #396]	; (27bb8 <ProcessHashDrv+0x214>)
   27a2a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   27a2c:	6051      	str	r1, [r2, #4]
   27a2e:	f8c3 8000 	str.w	r8, [r3]
   27a32:	6823      	ldr	r3, [r4, #0]
   27a34:	b15b      	cbz	r3, 27a4e <ProcessHashDrv+0xaa>
   27a36:	3b01      	subs	r3, #1
   27a38:	2b01      	cmp	r3, #1
   27a3a:	d817      	bhi.n	27a6c <ProcessHashDrv+0xc8>
   27a3c:	4b5f      	ldr	r3, [pc, #380]	; (27bbc <ProcessHashDrv+0x218>)
   27a3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   27a40:	601a      	str	r2, [r3, #0]
   27a42:	6a22      	ldr	r2, [r4, #32]
   27a44:	f843 2c04 	str.w	r2, [r3, #-4]
   27a48:	69e2      	ldr	r2, [r4, #28]
   27a4a:	f843 2c08 	str.w	r2, [r3, #-8]
   27a4e:	4b5c      	ldr	r3, [pc, #368]	; (27bc0 <ProcessHashDrv+0x21c>)
   27a50:	69a2      	ldr	r2, [r4, #24]
   27a52:	601a      	str	r2, [r3, #0]
   27a54:	6962      	ldr	r2, [r4, #20]
   27a56:	f843 2c04 	str.w	r2, [r3, #-4]
   27a5a:	6922      	ldr	r2, [r4, #16]
   27a5c:	f843 2c08 	str.w	r2, [r3, #-8]
   27a60:	68e2      	ldr	r2, [r4, #12]
   27a62:	f843 2c0c 	str.w	r2, [r3, #-12]
   27a66:	68a2      	ldr	r2, [r4, #8]
   27a68:	f843 2c10 	str.w	r2, [r3, #-16]
   27a6c:	4a55      	ldr	r2, [pc, #340]	; (27bc4 <ProcessHashDrv+0x220>)
   27a6e:	6813      	ldr	r3, [r2, #0]
   27a70:	2b00      	cmp	r3, #0
   27a72:	d1fc      	bne.n	27a6e <ProcessHashDrv+0xca>
   27a74:	2f00      	cmp	r7, #0
   27a76:	d059      	beq.n	27b2c <ProcessHashDrv+0x188>
   27a78:	6863      	ldr	r3, [r4, #4]
   27a7a:	2b01      	cmp	r3, #1
   27a7c:	bf04      	itt	eq
   27a7e:	4a52      	ldreq	r2, [pc, #328]	; (27bc8 <ProcessHashDrv+0x224>)
   27a80:	6013      	streq	r3, [r2, #0]
   27a82:	4a52      	ldr	r2, [pc, #328]	; (27bcc <ProcessHashDrv+0x228>)
   27a84:	4b52      	ldr	r3, [pc, #328]	; (27bd0 <ProcessHashDrv+0x22c>)
   27a86:	6831      	ldr	r1, [r6, #0]
   27a88:	6011      	str	r1, [r2, #0]
   27a8a:	2040      	movs	r0, #64	; 0x40
   27a8c:	601f      	str	r7, [r3, #0]
   27a8e:	f7ff f839 	bl	26b04 <CC_HalWaitInterrupt>
   27a92:	4605      	mov	r5, r0
   27a94:	4a4b      	ldr	r2, [pc, #300]	; (27bc4 <ProcessHashDrv+0x220>)
   27a96:	6813      	ldr	r3, [r2, #0]
   27a98:	2b00      	cmp	r3, #0
   27a9a:	d1fc      	bne.n	27a96 <ProcessHashDrv+0xf2>
   27a9c:	4a41      	ldr	r2, [pc, #260]	; (27ba4 <ProcessHashDrv+0x200>)
   27a9e:	6813      	ldr	r3, [r2, #0]
   27aa0:	2b00      	cmp	r3, #0
   27aa2:	d1fc      	bne.n	27a9e <ProcessHashDrv+0xfa>
   27aa4:	6823      	ldr	r3, [r4, #0]
   27aa6:	b15b      	cbz	r3, 27ac0 <ProcessHashDrv+0x11c>
   27aa8:	3b01      	subs	r3, #1
   27aaa:	2b01      	cmp	r3, #1
   27aac:	d817      	bhi.n	27ade <ProcessHashDrv+0x13a>
   27aae:	4a43      	ldr	r2, [pc, #268]	; (27bbc <ProcessHashDrv+0x218>)
   27ab0:	4b48      	ldr	r3, [pc, #288]	; (27bd4 <ProcessHashDrv+0x230>)
   27ab2:	6812      	ldr	r2, [r2, #0]
   27ab4:	6262      	str	r2, [r4, #36]	; 0x24
   27ab6:	681a      	ldr	r2, [r3, #0]
   27ab8:	6222      	str	r2, [r4, #32]
   27aba:	3b04      	subs	r3, #4
   27abc:	681b      	ldr	r3, [r3, #0]
   27abe:	61e3      	str	r3, [r4, #28]
   27ac0:	4a3f      	ldr	r2, [pc, #252]	; (27bc0 <ProcessHashDrv+0x21c>)
   27ac2:	4b45      	ldr	r3, [pc, #276]	; (27bd8 <ProcessHashDrv+0x234>)
   27ac4:	6812      	ldr	r2, [r2, #0]
   27ac6:	61a2      	str	r2, [r4, #24]
   27ac8:	681a      	ldr	r2, [r3, #0]
   27aca:	6162      	str	r2, [r4, #20]
   27acc:	f853 2c04 	ldr.w	r2, [r3, #-4]
   27ad0:	6122      	str	r2, [r4, #16]
   27ad2:	f853 2c08 	ldr.w	r2, [r3, #-8]
   27ad6:	60e2      	str	r2, [r4, #12]
   27ad8:	3b0c      	subs	r3, #12
   27ada:	681b      	ldr	r3, [r3, #0]
   27adc:	60a3      	str	r3, [r4, #8]
   27ade:	4b3f      	ldr	r3, [pc, #252]	; (27bdc <ProcessHashDrv+0x238>)
   27ae0:	4a3f      	ldr	r2, [pc, #252]	; (27be0 <ProcessHashDrv+0x23c>)
   27ae2:	681b      	ldr	r3, [r3, #0]
   27ae4:	64a3      	str	r3, [r4, #72]	; 0x48
   27ae6:	6812      	ldr	r2, [r2, #0]
   27ae8:	4b32      	ldr	r3, [pc, #200]	; (27bb4 <ProcessHashDrv+0x210>)
   27aea:	64e2      	str	r2, [r4, #76]	; 0x4c
   27aec:	4836      	ldr	r0, [pc, #216]	; (27bc8 <ProcessHashDrv+0x224>)
   27aee:	493d      	ldr	r1, [pc, #244]	; (27be4 <ProcessHashDrv+0x240>)
   27af0:	2201      	movs	r2, #1
   27af2:	601a      	str	r2, [r3, #0]
   27af4:	2300      	movs	r3, #0
   27af6:	4a33      	ldr	r2, [pc, #204]	; (27bc4 <ProcessHashDrv+0x220>)
   27af8:	6003      	str	r3, [r0, #0]
   27afa:	600b      	str	r3, [r1, #0]
   27afc:	6813      	ldr	r3, [r2, #0]
   27afe:	2b00      	cmp	r3, #0
   27b00:	d1fc      	bne.n	27afc <ProcessHashDrv+0x158>
   27b02:	4a2a      	ldr	r2, [pc, #168]	; (27bac <ProcessHashDrv+0x208>)
   27b04:	6013      	str	r3, [r2, #0]
   27b06:	2d00      	cmp	r5, #0
   27b08:	d13a      	bne.n	27b80 <ProcessHashDrv+0x1dc>
   27b0a:	4b27      	ldr	r3, [pc, #156]	; (27ba8 <ProcessHashDrv+0x204>)
   27b0c:	6818      	ldr	r0, [r3, #0]
   27b0e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   27b12:	f7fe fff1 	bl	26af8 <CC_HalMaskInterrupt>
   27b16:	2001      	movs	r0, #1
   27b18:	f7ff f8b8 	bl	26c8c <CC_PalPowerSaveModeSelect>
   27b1c:	bb60      	cbnz	r0, 27b78 <ProcessHashDrv+0x1d4>
   27b1e:	481f      	ldr	r0, [pc, #124]	; (27b9c <ProcessHashDrv+0x1f8>)
   27b20:	f7ff f88c 	bl	26c3c <CC_PalMutexUnlock>
   27b24:	bb10      	cbnz	r0, 27b6c <ProcessHashDrv+0x1c8>
   27b26:	4628      	mov	r0, r5
   27b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27b2c:	4b2d      	ldr	r3, [pc, #180]	; (27be4 <ProcessHashDrv+0x240>)
   27b2e:	2204      	movs	r2, #4
   27b30:	601a      	str	r2, [r3, #0]
   27b32:	e7af      	b.n	27a94 <ProcessHashDrv+0xf0>
   27b34:	4819      	ldr	r0, [pc, #100]	; (27b9c <ProcessHashDrv+0x1f8>)
   27b36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27b3a:	f04f 0801 	mov.w	r8, #1
   27b3e:	f7ff f875 	bl	26c2c <CC_PalMutexLock>
   27b42:	2800      	cmp	r0, #0
   27b44:	f43f af4b 	beq.w	279de <ProcessHashDrv+0x3a>
   27b48:	4827      	ldr	r0, [pc, #156]	; (27be8 <ProcessHashDrv+0x244>)
   27b4a:	f7fe f923 	bl	25d94 <CC_PalAbort>
   27b4e:	2000      	movs	r0, #0
   27b50:	f7ff f89c 	bl	26c8c <CC_PalPowerSaveModeSelect>
   27b54:	4605      	mov	r5, r0
   27b56:	2800      	cmp	r0, #0
   27b58:	f43f af48 	beq.w	279ec <ProcessHashDrv+0x48>
   27b5c:	4823      	ldr	r0, [pc, #140]	; (27bec <ProcessHashDrv+0x248>)
   27b5e:	f7fe f919 	bl	25d94 <CC_PalAbort>
   27b62:	e743      	b.n	279ec <ProcessHashDrv+0x48>
   27b64:	4d22      	ldr	r5, [pc, #136]	; (27bf0 <ProcessHashDrv+0x24c>)
   27b66:	4628      	mov	r0, r5
   27b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27b6c:	4821      	ldr	r0, [pc, #132]	; (27bf4 <ProcessHashDrv+0x250>)
   27b6e:	f7fe f911 	bl	25d94 <CC_PalAbort>
   27b72:	4628      	mov	r0, r5
   27b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27b78:	481f      	ldr	r0, [pc, #124]	; (27bf8 <ProcessHashDrv+0x254>)
   27b7a:	f7fe f90b 	bl	25d94 <CC_PalAbort>
   27b7e:	e7ce      	b.n	27b1e <ProcessHashDrv+0x17a>
   27b80:	f104 0008 	add.w	r0, r4, #8
   27b84:	2110      	movs	r1, #16
   27b86:	f7ff fe0b 	bl	277a0 <CC_PalMemSetZeroPlat>
   27b8a:	e7be      	b.n	27b0a <ProcessHashDrv+0x166>
   27b8c:	4d1b      	ldr	r5, [pc, #108]	; (27bfc <ProcessHashDrv+0x258>)
   27b8e:	4628      	mov	r0, r5
   27b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27b94:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   27b98:	e7c5      	b.n	27b26 <ProcessHashDrv+0x182>
   27b9a:	bf00      	nop
   27b9c:	200006ac 	.word	0x200006ac
   27ba0:	5002b91c 	.word	0x5002b91c
   27ba4:	5002bc20 	.word	0x5002bc20
   27ba8:	5002ba04 	.word	0x5002ba04
   27bac:	5002b818 	.word	0x5002b818
   27bb0:	5002b900 	.word	0x5002b900
   27bb4:	5002b7c4 	.word	0x5002b7c4
   27bb8:	5002b7c0 	.word	0x5002b7c0
   27bbc:	5002b65c 	.word	0x5002b65c
   27bc0:	5002b650 	.word	0x5002b650
   27bc4:	5002b910 	.word	0x5002b910
   27bc8:	5002b684 	.word	0x5002b684
   27bcc:	5002bc28 	.word	0x5002bc28
   27bd0:	5002bc2c 	.word	0x5002bc2c
   27bd4:	5002b658 	.word	0x5002b658
   27bd8:	5002b64c 	.word	0x5002b64c
   27bdc:	5002b7cc 	.word	0x5002b7cc
   27be0:	5002b7d0 	.word	0x5002b7d0
   27be4:	5002b7c8 	.word	0x5002b7c8
   27be8:	0002e3d0 	.word	0x0002e3d0
   27bec:	0002e3e8 	.word	0x0002e3e8
   27bf0:	00f30001 	.word	0x00f30001
   27bf4:	0002e428 	.word	0x0002e428
   27bf8:	0002e408 	.word	0x0002e408
   27bfc:	00f30003 	.word	0x00f30003

00027c00 <FinishHashDrv>:
   27c00:	2800      	cmp	r0, #0
   27c02:	d03b      	beq.n	27c7c <FinishHashDrv+0x7c>
   27c04:	b4f0      	push	{r4, r5, r6, r7}
   27c06:	b082      	sub	sp, #8
   27c08:	6a43      	ldr	r3, [r0, #36]	; 0x24
   27c0a:	9301      	str	r3, [sp, #4]
   27c0c:	6883      	ldr	r3, [r0, #8]
   27c0e:	fa93 fc83 	rev.w	ip, r3
   27c12:	9b01      	ldr	r3, [sp, #4]
   27c14:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   27c18:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   27c1c:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   27c20:	ba1b      	rev	r3, r3
   27c22:	6243      	str	r3, [r0, #36]	; 0x24
   27c24:	6c43      	ldr	r3, [r0, #68]	; 0x44
   27c26:	9301      	str	r3, [sp, #4]
   27c28:	ba09      	rev	r1, r1
   27c2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   27c2c:	61c1      	str	r1, [r0, #28]
   27c2e:	ba12      	rev	r2, r2
   27c30:	6202      	str	r2, [r0, #32]
   27c32:	ba3f      	rev	r7, r7
   27c34:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   27c38:	ba36      	rev	r6, r6
   27c3a:	ba2d      	rev	r5, r5
   27c3c:	ba24      	rev	r4, r4
   27c3e:	e9c0 c702 	strd	ip, r7, [r0, #8]
   27c42:	e9c0 6504 	strd	r6, r5, [r0, #16]
   27c46:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   27c48:	6b06      	ldr	r6, [r0, #48]	; 0x30
   27c4a:	6b45      	ldr	r5, [r0, #52]	; 0x34
   27c4c:	6184      	str	r4, [r0, #24]
   27c4e:	fa93 fc83 	rev.w	ip, r3
   27c52:	6b84      	ldr	r4, [r0, #56]	; 0x38
   27c54:	9b01      	ldr	r3, [sp, #4]
   27c56:	ba3f      	rev	r7, r7
   27c58:	ba36      	rev	r6, r6
   27c5a:	ba2d      	rev	r5, r5
   27c5c:	ba24      	rev	r4, r4
   27c5e:	ba09      	rev	r1, r1
   27c60:	ba12      	rev	r2, r2
   27c62:	ba1b      	rev	r3, r3
   27c64:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   27c68:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   27c6c:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   27c70:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   27c74:	2000      	movs	r0, #0
   27c76:	b002      	add	sp, #8
   27c78:	bcf0      	pop	{r4, r5, r6, r7}
   27c7a:	4770      	bx	lr
   27c7c:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   27c80:	4770      	bx	lr
   27c82:	bf00      	nop

00027c84 <LoadAesKey>:
   27c84:	2800      	cmp	r0, #0
   27c86:	d03b      	beq.n	27d00 <LoadAesKey+0x7c>
   27c88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   27c8c:	2b00      	cmp	r3, #0
   27c8e:	d02c      	beq.n	27cea <LoadAesKey+0x66>
   27c90:	2b03      	cmp	r3, #3
   27c92:	b510      	push	{r4, lr}
   27c94:	d00f      	beq.n	27cb6 <LoadAesKey+0x32>
   27c96:	481c      	ldr	r0, [pc, #112]	; (27d08 <LoadAesKey+0x84>)
   27c98:	4c1c      	ldr	r4, [pc, #112]	; (27d0c <LoadAesKey+0x88>)
   27c9a:	6822      	ldr	r2, [r4, #0]
   27c9c:	4b1c      	ldr	r3, [pc, #112]	; (27d10 <LoadAesKey+0x8c>)
   27c9e:	6812      	ldr	r2, [r2, #0]
   27ca0:	601a      	str	r2, [r3, #0]
   27ca2:	6822      	ldr	r2, [r4, #0]
   27ca4:	6852      	ldr	r2, [r2, #4]
   27ca6:	605a      	str	r2, [r3, #4]
   27ca8:	6822      	ldr	r2, [r4, #0]
   27caa:	6892      	ldr	r2, [r2, #8]
   27cac:	609a      	str	r2, [r3, #8]
   27cae:	6822      	ldr	r2, [r4, #0]
   27cb0:	68d2      	ldr	r2, [r2, #12]
   27cb2:	60da      	str	r2, [r3, #12]
   27cb4:	bd10      	pop	{r4, pc}
   27cb6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   27cb8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   27cba:	4c14      	ldr	r4, [pc, #80]	; (27d0c <LoadAesKey+0x88>)
   27cbc:	f000 fba4 	bl	28408 <kmu_validate_kdr_slot_and_size>
   27cc0:	2800      	cmp	r0, #0
   27cc2:	d1ea      	bne.n	27c9a <LoadAesKey+0x16>
   27cc4:	6821      	ldr	r1, [r4, #0]
   27cc6:	4a12      	ldr	r2, [pc, #72]	; (27d10 <LoadAesKey+0x8c>)
   27cc8:	6809      	ldr	r1, [r1, #0]
   27cca:	6011      	str	r1, [r2, #0]
   27ccc:	6821      	ldr	r1, [r4, #0]
   27cce:	4b11      	ldr	r3, [pc, #68]	; (27d14 <LoadAesKey+0x90>)
   27cd0:	6849      	ldr	r1, [r1, #4]
   27cd2:	6019      	str	r1, [r3, #0]
   27cd4:	6821      	ldr	r1, [r4, #0]
   27cd6:	6889      	ldr	r1, [r1, #8]
   27cd8:	6091      	str	r1, [r2, #8]
   27cda:	6822      	ldr	r2, [r4, #0]
   27cdc:	68d2      	ldr	r2, [r2, #12]
   27cde:	609a      	str	r2, [r3, #8]
   27ce0:	f000 fb9e 	bl	28420 <kmu_use_kdr_key>
   27ce4:	2800      	cmp	r0, #0
   27ce6:	d1d8      	bne.n	27c9a <LoadAesKey+0x16>
   27ce8:	bd10      	pop	{r4, pc}
   27cea:	4a09      	ldr	r2, [pc, #36]	; (27d10 <LoadAesKey+0x8c>)
   27cec:	6901      	ldr	r1, [r0, #16]
   27cee:	6011      	str	r1, [r2, #0]
   27cf0:	6941      	ldr	r1, [r0, #20]
   27cf2:	6051      	str	r1, [r2, #4]
   27cf4:	6981      	ldr	r1, [r0, #24]
   27cf6:	6091      	str	r1, [r2, #8]
   27cf8:	69c1      	ldr	r1, [r0, #28]
   27cfa:	60d1      	str	r1, [r2, #12]
   27cfc:	4618      	mov	r0, r3
   27cfe:	4770      	bx	lr
   27d00:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   27d04:	4770      	bx	lr
   27d06:	bf00      	nop
   27d08:	00f10009 	.word	0x00f10009
   27d0c:	2000069c 	.word	0x2000069c
   27d10:	5002b400 	.word	0x5002b400
   27d14:	5002b404 	.word	0x5002b404

00027d18 <InitAes.part.0>:
   27d18:	4a32      	ldr	r2, [pc, #200]	; (27de4 <InitAes.part.0+0xcc>)
   27d1a:	b510      	push	{r4, lr}
   27d1c:	4604      	mov	r4, r0
   27d1e:	6813      	ldr	r3, [r2, #0]
   27d20:	2b00      	cmp	r3, #0
   27d22:	d1fc      	bne.n	27d1e <InitAes.part.0+0x6>
   27d24:	4a30      	ldr	r2, [pc, #192]	; (27de8 <InitAes.part.0+0xd0>)
   27d26:	6813      	ldr	r3, [r2, #0]
   27d28:	2b00      	cmp	r3, #0
   27d2a:	d1fc      	bne.n	27d26 <InitAes.part.0+0xe>
   27d2c:	4a2f      	ldr	r2, [pc, #188]	; (27dec <InitAes.part.0+0xd4>)
   27d2e:	6813      	ldr	r3, [r2, #0]
   27d30:	2b00      	cmp	r3, #0
   27d32:	d1fc      	bne.n	27d2e <InitAes.part.0+0x16>
   27d34:	4a2e      	ldr	r2, [pc, #184]	; (27df0 <InitAes.part.0+0xd8>)
   27d36:	6813      	ldr	r3, [r2, #0]
   27d38:	2b00      	cmp	r3, #0
   27d3a:	d1fc      	bne.n	27d36 <InitAes.part.0+0x1e>
   27d3c:	4a2d      	ldr	r2, [pc, #180]	; (27df4 <InitAes.part.0+0xdc>)
   27d3e:	6813      	ldr	r3, [r2, #0]
   27d40:	2b00      	cmp	r3, #0
   27d42:	d1fc      	bne.n	27d3e <InitAes.part.0+0x26>
   27d44:	4a2c      	ldr	r2, [pc, #176]	; (27df8 <InitAes.part.0+0xe0>)
   27d46:	6813      	ldr	r3, [r2, #0]
   27d48:	2b00      	cmp	r3, #0
   27d4a:	d1fc      	bne.n	27d46 <InitAes.part.0+0x2e>
   27d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27d50:	f7fe fec4 	bl	26adc <CC_HalClearInterruptBit>
   27d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27d56:	f023 0304 	bic.w	r3, r3, #4
   27d5a:	2b03      	cmp	r3, #3
   27d5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27d5e:	d036      	beq.n	27dce <InitAes.part.0+0xb6>
   27d60:	2b01      	cmp	r3, #1
   27d62:	4b26      	ldr	r3, [pc, #152]	; (27dfc <InitAes.part.0+0xe4>)
   27d64:	6818      	ldr	r0, [r3, #0]
   27d66:	bf0c      	ite	eq
   27d68:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   27d6c:	f020 0020 	bicne.w	r0, r0, #32
   27d70:	f7fe fec2 	bl	26af8 <CC_HalMaskInterrupt>
   27d74:	4b22      	ldr	r3, [pc, #136]	; (27e00 <InitAes.part.0+0xe8>)
   27d76:	4a1b      	ldr	r2, [pc, #108]	; (27de4 <InitAes.part.0+0xcc>)
   27d78:	2101      	movs	r1, #1
   27d7a:	6019      	str	r1, [r3, #0]
   27d7c:	6813      	ldr	r3, [r2, #0]
   27d7e:	2b00      	cmp	r3, #0
   27d80:	d1fc      	bne.n	27d7c <InitAes.part.0+0x64>
   27d82:	4a19      	ldr	r2, [pc, #100]	; (27de8 <InitAes.part.0+0xd0>)
   27d84:	6813      	ldr	r3, [r2, #0]
   27d86:	2b00      	cmp	r3, #0
   27d88:	d1fc      	bne.n	27d84 <InitAes.part.0+0x6c>
   27d8a:	491e      	ldr	r1, [pc, #120]	; (27e04 <InitAes.part.0+0xec>)
   27d8c:	4a15      	ldr	r2, [pc, #84]	; (27de4 <InitAes.part.0+0xcc>)
   27d8e:	600b      	str	r3, [r1, #0]
   27d90:	6813      	ldr	r3, [r2, #0]
   27d92:	2b00      	cmp	r3, #0
   27d94:	d1fc      	bne.n	27d90 <InitAes.part.0+0x78>
   27d96:	4a14      	ldr	r2, [pc, #80]	; (27de8 <InitAes.part.0+0xd0>)
   27d98:	6813      	ldr	r3, [r2, #0]
   27d9a:	2b00      	cmp	r3, #0
   27d9c:	d1fc      	bne.n	27d98 <InitAes.part.0+0x80>
   27d9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   27da0:	f022 0104 	bic.w	r1, r2, #4
   27da4:	2903      	cmp	r1, #3
   27da6:	bf18      	it	ne
   27da8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   27daa:	4917      	ldr	r1, [pc, #92]	; (27e08 <InitAes.part.0+0xf0>)
   27dac:	ea4f 0282 	mov.w	r2, r2, lsl #2
   27db0:	bf18      	it	ne
   27db2:	f003 0301 	andne.w	r3, r3, #1
   27db6:	f002 021c 	and.w	r2, r2, #28
   27dba:	4313      	orrs	r3, r2
   27dbc:	600b      	str	r3, [r1, #0]
   27dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27dc0:	2b07      	cmp	r3, #7
   27dc2:	d102      	bne.n	27dca <InitAes.part.0+0xb2>
   27dc4:	4b11      	ldr	r3, [pc, #68]	; (27e0c <InitAes.part.0+0xf4>)
   27dc6:	2201      	movs	r2, #1
   27dc8:	601a      	str	r2, [r3, #0]
   27dca:	2000      	movs	r0, #0
   27dcc:	bd10      	pop	{r4, pc}
   27dce:	2b01      	cmp	r3, #1
   27dd0:	4b0a      	ldr	r3, [pc, #40]	; (27dfc <InitAes.part.0+0xe4>)
   27dd2:	6818      	ldr	r0, [r3, #0]
   27dd4:	bf0c      	ite	eq
   27dd6:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   27dda:	f020 0010 	bicne.w	r0, r0, #16
   27dde:	f7fe fe8b 	bl	26af8 <CC_HalMaskInterrupt>
   27de2:	e7c7      	b.n	27d74 <InitAes.part.0+0x5c>
   27de4:	5002b910 	.word	0x5002b910
   27de8:	5002b470 	.word	0x5002b470
   27dec:	5002bd20 	.word	0x5002bd20
   27df0:	5002bc20 	.word	0x5002bc20
   27df4:	5002bd38 	.word	0x5002bd38
   27df8:	5002bc38 	.word	0x5002bc38
   27dfc:	5002ba04 	.word	0x5002ba04
   27e00:	5002b900 	.word	0x5002b900
   27e04:	5002b4bc 	.word	0x5002b4bc
   27e08:	5002b4c0 	.word	0x5002b4c0
   27e0c:	5002b47c 	.word	0x5002b47c

00027e10 <ProcessAesDrv>:
   27e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e14:	b087      	sub	sp, #28
   27e16:	2900      	cmp	r1, #0
   27e18:	f000 80a5 	beq.w	27f66 <ProcessAesDrv+0x156>
   27e1c:	4616      	mov	r6, r2
   27e1e:	2a00      	cmp	r2, #0
   27e20:	f000 80a1 	beq.w	27f66 <ProcessAesDrv+0x156>
   27e24:	4604      	mov	r4, r0
   27e26:	2800      	cmp	r0, #0
   27e28:	f000 813f 	beq.w	280aa <ProcessAesDrv+0x29a>
   27e2c:	461f      	mov	r7, r3
   27e2e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   27e30:	460d      	mov	r5, r1
   27e32:	2b00      	cmp	r3, #0
   27e34:	d150      	bne.n	27ed8 <ProcessAesDrv+0xc8>
   27e36:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   27e3a:	d252      	bcs.n	27ee2 <ProcessAesDrv+0xd2>
   27e3c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   27e40:	2b04      	cmp	r3, #4
   27e42:	f000 8109 	beq.w	28058 <ProcessAesDrv+0x248>
   27e46:	f04f 0800 	mov.w	r8, #0
   27e4a:	48aa      	ldr	r0, [pc, #680]	; (280f4 <ProcessAesDrv+0x2e4>)
   27e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27e50:	f7fe feec 	bl	26c2c <CC_PalMutexLock>
   27e54:	2800      	cmp	r0, #0
   27e56:	f040 80de 	bne.w	28016 <ProcessAesDrv+0x206>
   27e5a:	2000      	movs	r0, #0
   27e5c:	f7fe ff16 	bl	26c8c <CC_PalPowerSaveModeSelect>
   27e60:	2800      	cmp	r0, #0
   27e62:	f040 80e1 	bne.w	28028 <ProcessAesDrv+0x218>
   27e66:	4ba4      	ldr	r3, [pc, #656]	; (280f8 <ProcessAesDrv+0x2e8>)
   27e68:	4aa4      	ldr	r2, [pc, #656]	; (280fc <ProcessAesDrv+0x2ec>)
   27e6a:	2101      	movs	r1, #1
   27e6c:	6019      	str	r1, [r3, #0]
   27e6e:	6813      	ldr	r3, [r2, #0]
   27e70:	2b00      	cmp	r3, #0
   27e72:	d1fc      	bne.n	27e6e <ProcessAesDrv+0x5e>
   27e74:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27e76:	2b03      	cmp	r3, #3
   27e78:	dc39      	bgt.n	27eee <ProcessAesDrv+0xde>
   27e7a:	2b00      	cmp	r3, #0
   27e7c:	da3a      	bge.n	27ef4 <ProcessAesDrv+0xe4>
   27e7e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 28148 <ProcessAesDrv+0x338>
   27e82:	4a9e      	ldr	r2, [pc, #632]	; (280fc <ProcessAesDrv+0x2ec>)
   27e84:	6813      	ldr	r3, [r2, #0]
   27e86:	2b00      	cmp	r3, #0
   27e88:	d1fc      	bne.n	27e84 <ProcessAesDrv+0x74>
   27e8a:	f1b8 0f00 	cmp.w	r8, #0
   27e8e:	f040 80da 	bne.w	28046 <ProcessAesDrv+0x236>
   27e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27e94:	f023 0304 	bic.w	r3, r3, #4
   27e98:	2b03      	cmp	r3, #3
   27e9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27e9c:	d058      	beq.n	27f50 <ProcessAesDrv+0x140>
   27e9e:	2b01      	cmp	r3, #1
   27ea0:	4b97      	ldr	r3, [pc, #604]	; (28100 <ProcessAesDrv+0x2f0>)
   27ea2:	6818      	ldr	r0, [r3, #0]
   27ea4:	bf0c      	ite	eq
   27ea6:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   27eaa:	f040 0020 	orrne.w	r0, r0, #32
   27eae:	f7fe fe23 	bl	26af8 <CC_HalMaskInterrupt>
   27eb2:	4b91      	ldr	r3, [pc, #580]	; (280f8 <ProcessAesDrv+0x2e8>)
   27eb4:	2200      	movs	r2, #0
   27eb6:	601a      	str	r2, [r3, #0]
   27eb8:	2001      	movs	r0, #1
   27eba:	f7fe fee7 	bl	26c8c <CC_PalPowerSaveModeSelect>
   27ebe:	2800      	cmp	r0, #0
   27ec0:	f040 80bd 	bne.w	2803e <ProcessAesDrv+0x22e>
   27ec4:	488b      	ldr	r0, [pc, #556]	; (280f4 <ProcessAesDrv+0x2e4>)
   27ec6:	f7fe feb9 	bl	26c3c <CC_PalMutexUnlock>
   27eca:	2800      	cmp	r0, #0
   27ecc:	f040 80b0 	bne.w	28030 <ProcessAesDrv+0x220>
   27ed0:	4648      	mov	r0, r9
   27ed2:	b007      	add	sp, #28
   27ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ed8:	2b01      	cmp	r3, #1
   27eda:	d1af      	bne.n	27e3c <ProcessAesDrv+0x2c>
   27edc:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   27ee0:	d3ac      	bcc.n	27e3c <ProcessAesDrv+0x2c>
   27ee2:	f8df 9268 	ldr.w	r9, [pc, #616]	; 2814c <ProcessAesDrv+0x33c>
   27ee6:	4648      	mov	r0, r9
   27ee8:	b007      	add	sp, #28
   27eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27eee:	3b06      	subs	r3, #6
   27ef0:	2b01      	cmp	r3, #1
   27ef2:	d8c4      	bhi.n	27e7e <ProcessAesDrv+0x6e>
   27ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27ef6:	2b01      	cmp	r3, #1
   27ef8:	f200 80d4 	bhi.w	280a4 <ProcessAesDrv+0x294>
   27efc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27efe:	2b01      	cmp	r3, #1
   27f00:	d837      	bhi.n	27f72 <ProcessAesDrv+0x162>
   27f02:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27f04:	2b01      	cmp	r3, #1
   27f06:	f200 8131 	bhi.w	2816c <ProcessAesDrv+0x35c>
   27f0a:	4620      	mov	r0, r4
   27f0c:	f7ff ff04 	bl	27d18 <InitAes.part.0>
   27f10:	4681      	mov	r9, r0
   27f12:	2800      	cmp	r0, #0
   27f14:	d1b5      	bne.n	27e82 <ProcessAesDrv+0x72>
   27f16:	4620      	mov	r0, r4
   27f18:	f7ff feb4 	bl	27c84 <LoadAesKey>
   27f1c:	4681      	mov	r9, r0
   27f1e:	2800      	cmp	r0, #0
   27f20:	d1af      	bne.n	27e82 <ProcessAesDrv+0x72>
   27f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27f24:	2b07      	cmp	r3, #7
   27f26:	d8aa      	bhi.n	27e7e <ProcessAesDrv+0x6e>
   27f28:	a201      	add	r2, pc, #4	; (adr r2, 27f30 <ProcessAesDrv+0x120>)
   27f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27f2e:	bf00      	nop
   27f30:	00027f8d 	.word	0x00027f8d
   27f34:	00027f79 	.word	0x00027f79
   27f38:	000280e9 	.word	0x000280e9
   27f3c:	00027f79 	.word	0x00027f79
   27f40:	00027e7f 	.word	0x00027e7f
   27f44:	00027e7f 	.word	0x00027e7f
   27f48:	000280e9 	.word	0x000280e9
   27f4c:	00027f79 	.word	0x00027f79
   27f50:	2b01      	cmp	r3, #1
   27f52:	4b6b      	ldr	r3, [pc, #428]	; (28100 <ProcessAesDrv+0x2f0>)
   27f54:	6818      	ldr	r0, [r3, #0]
   27f56:	bf0c      	ite	eq
   27f58:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   27f5c:	f040 0010 	orrne.w	r0, r0, #16
   27f60:	f7fe fdca 	bl	26af8 <CC_HalMaskInterrupt>
   27f64:	e7a5      	b.n	27eb2 <ProcessAesDrv+0xa2>
   27f66:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 28150 <ProcessAesDrv+0x340>
   27f6a:	4648      	mov	r0, r9
   27f6c:	b007      	add	sp, #28
   27f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f72:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 28154 <ProcessAesDrv+0x344>
   27f76:	e784      	b.n	27e82 <ProcessAesDrv+0x72>
   27f78:	4b62      	ldr	r3, [pc, #392]	; (28104 <ProcessAesDrv+0x2f4>)
   27f7a:	6822      	ldr	r2, [r4, #0]
   27f7c:	601a      	str	r2, [r3, #0]
   27f7e:	6862      	ldr	r2, [r4, #4]
   27f80:	605a      	str	r2, [r3, #4]
   27f82:	68a2      	ldr	r2, [r4, #8]
   27f84:	609a      	str	r2, [r3, #8]
   27f86:	68e2      	ldr	r2, [r4, #12]
   27f88:	60da      	str	r2, [r3, #12]
   27f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27f8c:	682a      	ldr	r2, [r5, #0]
   27f8e:	f023 0304 	bic.w	r3, r3, #4
   27f92:	2b03      	cmp	r3, #3
   27f94:	d009      	beq.n	27faa <ProcessAesDrv+0x19a>
   27f96:	6e21      	ldr	r1, [r4, #96]	; 0x60
   27f98:	6833      	ldr	r3, [r6, #0]
   27f9a:	2901      	cmp	r1, #1
   27f9c:	bf07      	ittee	eq
   27f9e:	485a      	ldreq	r0, [pc, #360]	; (28108 <ProcessAesDrv+0x2f8>)
   27fa0:	495a      	ldreq	r1, [pc, #360]	; (2810c <ProcessAesDrv+0x2fc>)
   27fa2:	485b      	ldrne	r0, [pc, #364]	; (28110 <ProcessAesDrv+0x300>)
   27fa4:	495b      	ldrne	r1, [pc, #364]	; (28114 <ProcessAesDrv+0x304>)
   27fa6:	6003      	str	r3, [r0, #0]
   27fa8:	600f      	str	r7, [r1, #0]
   27faa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   27fac:	2b01      	cmp	r3, #1
   27fae:	bf0b      	itete	eq
   27fb0:	4b59      	ldreq	r3, [pc, #356]	; (28118 <ProcessAesDrv+0x308>)
   27fb2:	4b5a      	ldrne	r3, [pc, #360]	; (2811c <ProcessAesDrv+0x30c>)
   27fb4:	495a      	ldreq	r1, [pc, #360]	; (28120 <ProcessAesDrv+0x310>)
   27fb6:	495b      	ldrne	r1, [pc, #364]	; (28124 <ProcessAesDrv+0x314>)
   27fb8:	600a      	str	r2, [r1, #0]
   27fba:	601f      	str	r7, [r3, #0]
   27fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27fbe:	f023 0304 	bic.w	r3, r3, #4
   27fc2:	2b03      	cmp	r3, #3
   27fc4:	d074      	beq.n	280b0 <ProcessAesDrv+0x2a0>
   27fc6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   27fc8:	2b01      	cmp	r3, #1
   27fca:	bf0c      	ite	eq
   27fcc:	2080      	moveq	r0, #128	; 0x80
   27fce:	2020      	movne	r0, #32
   27fd0:	f7fe fd98 	bl	26b04 <CC_HalWaitInterrupt>
   27fd4:	4681      	mov	r9, r0
   27fd6:	2800      	cmp	r0, #0
   27fd8:	f47f af53 	bne.w	27e82 <ProcessAesDrv+0x72>
   27fdc:	4b47      	ldr	r3, [pc, #284]	; (280fc <ProcessAesDrv+0x2ec>)
   27fde:	681a      	ldr	r2, [r3, #0]
   27fe0:	2a00      	cmp	r2, #0
   27fe2:	d1fc      	bne.n	27fde <ProcessAesDrv+0x1ce>
   27fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27fe6:	3b01      	subs	r3, #1
   27fe8:	4691      	mov	r9, r2
   27fea:	2b06      	cmp	r3, #6
   27fec:	d810      	bhi.n	28010 <ProcessAesDrv+0x200>
   27fee:	e8df f003 	tbb	[pc, r3]
   27ff2:	7d04      	.short	0x7d04
   27ff4:	7d0f0f04 	.word	0x7d0f0f04
   27ff8:	04          	.byte	0x04
   27ff9:	00          	.byte	0x00
   27ffa:	4a42      	ldr	r2, [pc, #264]	; (28104 <ProcessAesDrv+0x2f4>)
   27ffc:	4b4a      	ldr	r3, [pc, #296]	; (28128 <ProcessAesDrv+0x318>)
   27ffe:	6812      	ldr	r2, [r2, #0]
   28000:	6022      	str	r2, [r4, #0]
   28002:	681a      	ldr	r2, [r3, #0]
   28004:	6062      	str	r2, [r4, #4]
   28006:	685a      	ldr	r2, [r3, #4]
   28008:	60a2      	str	r2, [r4, #8]
   2800a:	3308      	adds	r3, #8
   2800c:	681b      	ldr	r3, [r3, #0]
   2800e:	60e3      	str	r3, [r4, #12]
   28010:	2301      	movs	r3, #1
   28012:	65a3      	str	r3, [r4, #88]	; 0x58
   28014:	e735      	b.n	27e82 <ProcessAesDrv+0x72>
   28016:	4845      	ldr	r0, [pc, #276]	; (2812c <ProcessAesDrv+0x31c>)
   28018:	f7fd febc 	bl	25d94 <CC_PalAbort>
   2801c:	2000      	movs	r0, #0
   2801e:	f7fe fe35 	bl	26c8c <CC_PalPowerSaveModeSelect>
   28022:	2800      	cmp	r0, #0
   28024:	f43f af1f 	beq.w	27e66 <ProcessAesDrv+0x56>
   28028:	4841      	ldr	r0, [pc, #260]	; (28130 <ProcessAesDrv+0x320>)
   2802a:	f7fd feb3 	bl	25d94 <CC_PalAbort>
   2802e:	e71a      	b.n	27e66 <ProcessAesDrv+0x56>
   28030:	4840      	ldr	r0, [pc, #256]	; (28134 <ProcessAesDrv+0x324>)
   28032:	f7fd feaf 	bl	25d94 <CC_PalAbort>
   28036:	4648      	mov	r0, r9
   28038:	b007      	add	sp, #28
   2803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2803e:	483e      	ldr	r0, [pc, #248]	; (28138 <ProcessAesDrv+0x328>)
   28040:	f7fd fea8 	bl	25d94 <CC_PalAbort>
   28044:	e73e      	b.n	27ec4 <ProcessAesDrv+0xb4>
   28046:	2304      	movs	r3, #4
   28048:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2804c:	2120      	movs	r1, #32
   2804e:	f104 0010 	add.w	r0, r4, #16
   28052:	f7ff fba5 	bl	277a0 <CC_PalMemSetZeroPlat>
   28056:	e71c      	b.n	27e92 <ProcessAesDrv+0x82>
   28058:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2805a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2805c:	f000 f9c8 	bl	283f0 <kmu_validate_slot_and_size>
   28060:	b9e8      	cbnz	r0, 2809e <ProcessAesDrv+0x28e>
   28062:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 28158 <ProcessAesDrv+0x348>
   28066:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 2815c <ProcessAesDrv+0x34c>
   2806a:	f8d8 3000 	ldr.w	r3, [r8]
   2806e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 28160 <ProcessAesDrv+0x350>
   28072:	681b      	ldr	r3, [r3, #0]
   28074:	f8cb 3000 	str.w	r3, [fp]
   28078:	f8d8 3000 	ldr.w	r3, [r8]
   2807c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 28164 <ProcessAesDrv+0x354>
   28080:	685b      	ldr	r3, [r3, #4]
   28082:	f8ca 3000 	str.w	r3, [sl]
   28086:	f8d8 3000 	ldr.w	r3, [r8]
   2808a:	4a2c      	ldr	r2, [pc, #176]	; (2813c <ProcessAesDrv+0x32c>)
   2808c:	689b      	ldr	r3, [r3, #8]
   2808e:	f8c9 3000 	str.w	r3, [r9]
   28092:	f8d8 3000 	ldr.w	r3, [r8]
   28096:	68db      	ldr	r3, [r3, #12]
   28098:	6013      	str	r3, [r2, #0]
   2809a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2809c:	b171      	cbz	r1, 280bc <ProcessAesDrv+0x2ac>
   2809e:	f04f 0801 	mov.w	r8, #1
   280a2:	e6d2      	b.n	27e4a <ProcessAesDrv+0x3a>
   280a4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 28168 <ProcessAesDrv+0x358>
   280a8:	e6eb      	b.n	27e82 <ProcessAesDrv+0x72>
   280aa:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   280ae:	e70f      	b.n	27ed0 <ProcessAesDrv+0xc0>
   280b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   280b2:	2b01      	cmp	r3, #1
   280b4:	bf0c      	ite	eq
   280b6:	2040      	moveq	r0, #64	; 0x40
   280b8:	2010      	movne	r0, #16
   280ba:	e789      	b.n	27fd0 <ProcessAesDrv+0x1c0>
   280bc:	f104 0310 	add.w	r3, r4, #16
   280c0:	4618      	mov	r0, r3
   280c2:	9305      	str	r3, [sp, #20]
   280c4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   280c8:	e9cd 3200 	strd	r3, r2, [sp]
   280cc:	9002      	str	r0, [sp, #8]
   280ce:	2010      	movs	r0, #16
   280d0:	9003      	str	r0, [sp, #12]
   280d2:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   280d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   280d8:	f000 f9ae 	bl	28438 <kmu_derive_cmac>
   280dc:	2800      	cmp	r0, #0
   280de:	d148      	bne.n	28172 <ProcessAesDrv+0x362>
   280e0:	2300      	movs	r3, #0
   280e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   280e6:	e7da      	b.n	2809e <ProcessAesDrv+0x28e>
   280e8:	4b15      	ldr	r3, [pc, #84]	; (28140 <ProcessAesDrv+0x330>)
   280ea:	e746      	b.n	27f7a <ProcessAesDrv+0x16a>
   280ec:	4a14      	ldr	r2, [pc, #80]	; (28140 <ProcessAesDrv+0x330>)
   280ee:	4b15      	ldr	r3, [pc, #84]	; (28144 <ProcessAesDrv+0x334>)
   280f0:	e785      	b.n	27ffe <ProcessAesDrv+0x1ee>
   280f2:	bf00      	nop
   280f4:	200006ac 	.word	0x200006ac
   280f8:	5002b810 	.word	0x5002b810
   280fc:	5002b910 	.word	0x5002b910
   28100:	5002ba04 	.word	0x5002ba04
   28104:	5002b440 	.word	0x5002b440
   28108:	5002bd28 	.word	0x5002bd28
   2810c:	5002bd2c 	.word	0x5002bd2c
   28110:	5002bd30 	.word	0x5002bd30
   28114:	5002bd34 	.word	0x5002bd34
   28118:	5002bc2c 	.word	0x5002bc2c
   2811c:	5002bc34 	.word	0x5002bc34
   28120:	5002bc28 	.word	0x5002bc28
   28124:	5002bc30 	.word	0x5002bc30
   28128:	5002b444 	.word	0x5002b444
   2812c:	0002e3d0 	.word	0x0002e3d0
   28130:	0002e3e8 	.word	0x0002e3e8
   28134:	0002e428 	.word	0x0002e428
   28138:	0002e408 	.word	0x0002e408
   2813c:	5002b40c 	.word	0x5002b40c
   28140:	5002b460 	.word	0x5002b460
   28144:	5002b464 	.word	0x5002b464
   28148:	00f10001 	.word	0x00f10001
   2814c:	00f10005 	.word	0x00f10005
   28150:	00f1000b 	.word	0x00f1000b
   28154:	00f10003 	.word	0x00f10003
   28158:	2000069c 	.word	0x2000069c
   2815c:	5002b400 	.word	0x5002b400
   28160:	5002b404 	.word	0x5002b404
   28164:	5002b408 	.word	0x5002b408
   28168:	00f10002 	.word	0x00f10002
   2816c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 281a8 <ProcessAesDrv+0x398>
   28170:	e687      	b.n	27e82 <ProcessAesDrv+0x72>
   28172:	f8d8 3000 	ldr.w	r3, [r8]
   28176:	4a0b      	ldr	r2, [pc, #44]	; (281a4 <ProcessAesDrv+0x394>)
   28178:	681b      	ldr	r3, [r3, #0]
   2817a:	f8cb 3000 	str.w	r3, [fp]
   2817e:	f8d8 3000 	ldr.w	r3, [r8]
   28182:	685b      	ldr	r3, [r3, #4]
   28184:	f8ca 3000 	str.w	r3, [sl]
   28188:	f8d8 3000 	ldr.w	r3, [r8]
   2818c:	689b      	ldr	r3, [r3, #8]
   2818e:	f8c9 3000 	str.w	r3, [r9]
   28192:	f8d8 3000 	ldr.w	r3, [r8]
   28196:	68db      	ldr	r3, [r3, #12]
   28198:	6013      	str	r3, [r2, #0]
   2819a:	9805      	ldr	r0, [sp, #20]
   2819c:	2110      	movs	r1, #16
   2819e:	f7ff faff 	bl	277a0 <CC_PalMemSetZeroPlat>
   281a2:	e79d      	b.n	280e0 <ProcessAesDrv+0x2d0>
   281a4:	5002b40c 	.word	0x5002b40c
   281a8:	00f10004 	.word	0x00f10004

000281ac <FinishAesDrv>:
   281ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   281b0:	b301      	cbz	r1, 281f4 <FinishAesDrv+0x48>
   281b2:	b1fa      	cbz	r2, 281f4 <FinishAesDrv+0x48>
   281b4:	4604      	mov	r4, r0
   281b6:	2800      	cmp	r0, #0
   281b8:	d07a      	beq.n	282b0 <FinishAesDrv+0x104>
   281ba:	461d      	mov	r5, r3
   281bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   281be:	2b07      	cmp	r3, #7
   281c0:	460e      	mov	r6, r1
   281c2:	d01b      	beq.n	281fc <FinishAesDrv+0x50>
   281c4:	b95d      	cbnz	r5, 281de <FinishAesDrv+0x32>
   281c6:	2b03      	cmp	r3, #3
   281c8:	d110      	bne.n	281ec <FinishAesDrv+0x40>
   281ca:	6d83      	ldr	r3, [r0, #88]	; 0x58
   281cc:	b973      	cbnz	r3, 281ec <FinishAesDrv+0x40>
   281ce:	f100 0364 	add.w	r3, r0, #100	; 0x64
   281d2:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   281d6:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   281da:	600b      	str	r3, [r1, #0]
   281dc:	2510      	movs	r5, #16
   281de:	462b      	mov	r3, r5
   281e0:	4631      	mov	r1, r6
   281e2:	4620      	mov	r0, r4
   281e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   281e8:	f7ff be12 	b.w	27e10 <ProcessAesDrv>
   281ec:	462f      	mov	r7, r5
   281ee:	4638      	mov	r0, r7
   281f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281f4:	4f66      	ldr	r7, [pc, #408]	; (28390 <FinishAesDrv+0x1e4>)
   281f6:	4638      	mov	r0, r7
   281f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281fc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   281fe:	2b00      	cmp	r3, #0
   28200:	d159      	bne.n	282b6 <FinishAesDrv+0x10a>
   28202:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   28206:	d25b      	bcs.n	282c0 <FinishAesDrv+0x114>
   28208:	b915      	cbnz	r5, 28210 <FinishAesDrv+0x64>
   2820a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2820c:	2b00      	cmp	r3, #0
   2820e:	d157      	bne.n	282c0 <FinishAesDrv+0x114>
   28210:	4860      	ldr	r0, [pc, #384]	; (28394 <FinishAesDrv+0x1e8>)
   28212:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28216:	f7fe fd09 	bl	26c2c <CC_PalMutexLock>
   2821a:	2800      	cmp	r0, #0
   2821c:	f040 8097 	bne.w	2834e <FinishAesDrv+0x1a2>
   28220:	2000      	movs	r0, #0
   28222:	f7fe fd33 	bl	26c8c <CC_PalPowerSaveModeSelect>
   28226:	2800      	cmp	r0, #0
   28228:	f040 808d 	bne.w	28346 <FinishAesDrv+0x19a>
   2822c:	4b5a      	ldr	r3, [pc, #360]	; (28398 <FinishAesDrv+0x1ec>)
   2822e:	4a5b      	ldr	r2, [pc, #364]	; (2839c <FinishAesDrv+0x1f0>)
   28230:	2101      	movs	r1, #1
   28232:	6019      	str	r1, [r3, #0]
   28234:	6813      	ldr	r3, [r2, #0]
   28236:	2b00      	cmp	r3, #0
   28238:	d1fc      	bne.n	28234 <FinishAesDrv+0x88>
   2823a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2823c:	2b03      	cmp	r3, #3
   2823e:	dd20      	ble.n	28282 <FinishAesDrv+0xd6>
   28240:	3b06      	subs	r3, #6
   28242:	2b01      	cmp	r3, #1
   28244:	d81f      	bhi.n	28286 <FinishAesDrv+0xda>
   28246:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   28248:	2b01      	cmp	r3, #1
   2824a:	d83b      	bhi.n	282c4 <FinishAesDrv+0x118>
   2824c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2824e:	2b01      	cmp	r3, #1
   28250:	f200 8085 	bhi.w	2835e <FinishAesDrv+0x1b2>
   28254:	6e23      	ldr	r3, [r4, #96]	; 0x60
   28256:	2b01      	cmp	r3, #1
   28258:	f200 8083 	bhi.w	28362 <FinishAesDrv+0x1b6>
   2825c:	4620      	mov	r0, r4
   2825e:	f7ff fd5b 	bl	27d18 <InitAes.part.0>
   28262:	4607      	mov	r7, r0
   28264:	b980      	cbnz	r0, 28288 <FinishAesDrv+0xdc>
   28266:	4620      	mov	r0, r4
   28268:	f7ff fd0c 	bl	27c84 <LoadAesKey>
   2826c:	4607      	mov	r7, r0
   2826e:	b958      	cbnz	r0, 28288 <FinishAesDrv+0xdc>
   28270:	6b63      	ldr	r3, [r4, #52]	; 0x34
   28272:	2b07      	cmp	r3, #7
   28274:	d807      	bhi.n	28286 <FinishAesDrv+0xda>
   28276:	e8df f003 	tbb	[pc, r3]
   2827a:	2730      	.short	0x2730
   2827c:	06062755 	.word	0x06062755
   28280:	2755      	.short	0x2755
   28282:	2b00      	cmp	r3, #0
   28284:	dadf      	bge.n	28246 <FinishAesDrv+0x9a>
   28286:	4f46      	ldr	r7, [pc, #280]	; (283a0 <FinishAesDrv+0x1f4>)
   28288:	4a44      	ldr	r2, [pc, #272]	; (2839c <FinishAesDrv+0x1f0>)
   2828a:	6813      	ldr	r3, [r2, #0]
   2828c:	2b00      	cmp	r3, #0
   2828e:	d1fc      	bne.n	2828a <FinishAesDrv+0xde>
   28290:	4a41      	ldr	r2, [pc, #260]	; (28398 <FinishAesDrv+0x1ec>)
   28292:	2001      	movs	r0, #1
   28294:	6013      	str	r3, [r2, #0]
   28296:	f7fe fcf9 	bl	26c8c <CC_PalPowerSaveModeSelect>
   2829a:	2800      	cmp	r0, #0
   2829c:	d15b      	bne.n	28356 <FinishAesDrv+0x1aa>
   2829e:	483d      	ldr	r0, [pc, #244]	; (28394 <FinishAesDrv+0x1e8>)
   282a0:	f7fe fccc 	bl	26c3c <CC_PalMutexUnlock>
   282a4:	2800      	cmp	r0, #0
   282a6:	d0a2      	beq.n	281ee <FinishAesDrv+0x42>
   282a8:	483e      	ldr	r0, [pc, #248]	; (283a4 <FinishAesDrv+0x1f8>)
   282aa:	f7fd fd73 	bl	25d94 <CC_PalAbort>
   282ae:	e79e      	b.n	281ee <FinishAesDrv+0x42>
   282b0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   282b4:	e79b      	b.n	281ee <FinishAesDrv+0x42>
   282b6:	2b01      	cmp	r3, #1
   282b8:	d1a6      	bne.n	28208 <FinishAesDrv+0x5c>
   282ba:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   282be:	d3a3      	bcc.n	28208 <FinishAesDrv+0x5c>
   282c0:	4f39      	ldr	r7, [pc, #228]	; (283a8 <FinishAesDrv+0x1fc>)
   282c2:	e794      	b.n	281ee <FinishAesDrv+0x42>
   282c4:	4f39      	ldr	r7, [pc, #228]	; (283ac <FinishAesDrv+0x200>)
   282c6:	e7df      	b.n	28288 <FinishAesDrv+0xdc>
   282c8:	4b39      	ldr	r3, [pc, #228]	; (283b0 <FinishAesDrv+0x204>)
   282ca:	6822      	ldr	r2, [r4, #0]
   282cc:	601a      	str	r2, [r3, #0]
   282ce:	6862      	ldr	r2, [r4, #4]
   282d0:	605a      	str	r2, [r3, #4]
   282d2:	68a2      	ldr	r2, [r4, #8]
   282d4:	609a      	str	r2, [r3, #8]
   282d6:	68e2      	ldr	r2, [r4, #12]
   282d8:	60da      	str	r2, [r3, #12]
   282da:	4936      	ldr	r1, [pc, #216]	; (283b4 <FinishAesDrv+0x208>)
   282dc:	4a36      	ldr	r2, [pc, #216]	; (283b8 <FinishAesDrv+0x20c>)
   282de:	2301      	movs	r3, #1
   282e0:	600b      	str	r3, [r1, #0]
   282e2:	6015      	str	r5, [r2, #0]
   282e4:	2d00      	cmp	r5, #0
   282e6:	d13e      	bne.n	28366 <FinishAesDrv+0x1ba>
   282e8:	6da2      	ldr	r2, [r4, #88]	; 0x58
   282ea:	b90a      	cbnz	r2, 282f0 <FinishAesDrv+0x144>
   282ec:	4a33      	ldr	r2, [pc, #204]	; (283bc <FinishAesDrv+0x210>)
   282ee:	6013      	str	r3, [r2, #0]
   282f0:	4b2a      	ldr	r3, [pc, #168]	; (2839c <FinishAesDrv+0x1f0>)
   282f2:	681f      	ldr	r7, [r3, #0]
   282f4:	2f00      	cmp	r7, #0
   282f6:	d1fc      	bne.n	282f2 <FinishAesDrv+0x146>
   282f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   282fa:	3b01      	subs	r3, #1
   282fc:	2b06      	cmp	r3, #6
   282fe:	d8c3      	bhi.n	28288 <FinishAesDrv+0xdc>
   28300:	a201      	add	r2, pc, #4	; (adr r2, 28308 <FinishAesDrv+0x15c>)
   28302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28306:	bf00      	nop
   28308:	00028329 	.word	0x00028329
   2830c:	00028341 	.word	0x00028341
   28310:	00028329 	.word	0x00028329
   28314:	00028289 	.word	0x00028289
   28318:	00028289 	.word	0x00028289
   2831c:	00028341 	.word	0x00028341
   28320:	00028329 	.word	0x00028329
   28324:	4b26      	ldr	r3, [pc, #152]	; (283c0 <FinishAesDrv+0x214>)
   28326:	e7d0      	b.n	282ca <FinishAesDrv+0x11e>
   28328:	4a21      	ldr	r2, [pc, #132]	; (283b0 <FinishAesDrv+0x204>)
   2832a:	4b26      	ldr	r3, [pc, #152]	; (283c4 <FinishAesDrv+0x218>)
   2832c:	6812      	ldr	r2, [r2, #0]
   2832e:	6022      	str	r2, [r4, #0]
   28330:	681a      	ldr	r2, [r3, #0]
   28332:	6062      	str	r2, [r4, #4]
   28334:	685a      	ldr	r2, [r3, #4]
   28336:	60a2      	str	r2, [r4, #8]
   28338:	3308      	adds	r3, #8
   2833a:	681b      	ldr	r3, [r3, #0]
   2833c:	60e3      	str	r3, [r4, #12]
   2833e:	e7a3      	b.n	28288 <FinishAesDrv+0xdc>
   28340:	4a1f      	ldr	r2, [pc, #124]	; (283c0 <FinishAesDrv+0x214>)
   28342:	4b21      	ldr	r3, [pc, #132]	; (283c8 <FinishAesDrv+0x21c>)
   28344:	e7f2      	b.n	2832c <FinishAesDrv+0x180>
   28346:	4821      	ldr	r0, [pc, #132]	; (283cc <FinishAesDrv+0x220>)
   28348:	f7fd fd24 	bl	25d94 <CC_PalAbort>
   2834c:	e76e      	b.n	2822c <FinishAesDrv+0x80>
   2834e:	4820      	ldr	r0, [pc, #128]	; (283d0 <FinishAesDrv+0x224>)
   28350:	f7fd fd20 	bl	25d94 <CC_PalAbort>
   28354:	e764      	b.n	28220 <FinishAesDrv+0x74>
   28356:	481f      	ldr	r0, [pc, #124]	; (283d4 <FinishAesDrv+0x228>)
   28358:	f7fd fd1c 	bl	25d94 <CC_PalAbort>
   2835c:	e79f      	b.n	2829e <FinishAesDrv+0xf2>
   2835e:	4f1e      	ldr	r7, [pc, #120]	; (283d8 <FinishAesDrv+0x22c>)
   28360:	e792      	b.n	28288 <FinishAesDrv+0xdc>
   28362:	4f1e      	ldr	r7, [pc, #120]	; (283dc <FinishAesDrv+0x230>)
   28364:	e790      	b.n	28288 <FinishAesDrv+0xdc>
   28366:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   28368:	6833      	ldr	r3, [r6, #0]
   2836a:	2a01      	cmp	r2, #1
   2836c:	d00a      	beq.n	28384 <FinishAesDrv+0x1d8>
   2836e:	491c      	ldr	r1, [pc, #112]	; (283e0 <FinishAesDrv+0x234>)
   28370:	4a1c      	ldr	r2, [pc, #112]	; (283e4 <FinishAesDrv+0x238>)
   28372:	600b      	str	r3, [r1, #0]
   28374:	2010      	movs	r0, #16
   28376:	6015      	str	r5, [r2, #0]
   28378:	f7fe fbc4 	bl	26b04 <CC_HalWaitInterrupt>
   2837c:	4607      	mov	r7, r0
   2837e:	2800      	cmp	r0, #0
   28380:	d0b6      	beq.n	282f0 <FinishAesDrv+0x144>
   28382:	e781      	b.n	28288 <FinishAesDrv+0xdc>
   28384:	4918      	ldr	r1, [pc, #96]	; (283e8 <FinishAesDrv+0x23c>)
   28386:	4a19      	ldr	r2, [pc, #100]	; (283ec <FinishAesDrv+0x240>)
   28388:	600b      	str	r3, [r1, #0]
   2838a:	2040      	movs	r0, #64	; 0x40
   2838c:	6015      	str	r5, [r2, #0]
   2838e:	e7f3      	b.n	28378 <FinishAesDrv+0x1cc>
   28390:	00f1000b 	.word	0x00f1000b
   28394:	200006ac 	.word	0x200006ac
   28398:	5002b810 	.word	0x5002b810
   2839c:	5002b910 	.word	0x5002b910
   283a0:	00f10001 	.word	0x00f10001
   283a4:	0002e428 	.word	0x0002e428
   283a8:	00f10005 	.word	0x00f10005
   283ac:	00f10002 	.word	0x00f10002
   283b0:	5002b440 	.word	0x5002b440
   283b4:	5002b47c 	.word	0x5002b47c
   283b8:	5002b4bc 	.word	0x5002b4bc
   283bc:	5002b524 	.word	0x5002b524
   283c0:	5002b460 	.word	0x5002b460
   283c4:	5002b444 	.word	0x5002b444
   283c8:	5002b464 	.word	0x5002b464
   283cc:	0002e3e8 	.word	0x0002e3e8
   283d0:	0002e3d0 	.word	0x0002e3d0
   283d4:	0002e408 	.word	0x0002e408
   283d8:	00f10003 	.word	0x00f10003
   283dc:	00f10004 	.word	0x00f10004
   283e0:	5002bc30 	.word	0x5002bc30
   283e4:	5002bc34 	.word	0x5002bc34
   283e8:	5002bc28 	.word	0x5002bc28
   283ec:	5002bc2c 	.word	0x5002bc2c

000283f0 <kmu_validate_slot_and_size>:
   283f0:	b921      	cbnz	r1, 283fc <kmu_validate_slot_and_size+0xc>
   283f2:	4b03      	ldr	r3, [pc, #12]	; (28400 <kmu_validate_slot_and_size+0x10>)
   283f4:	2800      	cmp	r0, #0
   283f6:	bf18      	it	ne
   283f8:	4618      	movne	r0, r3
   283fa:	4770      	bx	lr
   283fc:	4801      	ldr	r0, [pc, #4]	; (28404 <kmu_validate_slot_and_size+0x14>)
   283fe:	4770      	bx	lr
   28400:	00f70001 	.word	0x00f70001
   28404:	00f70003 	.word	0x00f70003

00028408 <kmu_validate_kdr_slot_and_size>:
   28408:	b921      	cbnz	r1, 28414 <kmu_validate_kdr_slot_and_size+0xc>
   2840a:	4b03      	ldr	r3, [pc, #12]	; (28418 <kmu_validate_kdr_slot_and_size+0x10>)
   2840c:	2800      	cmp	r0, #0
   2840e:	bf18      	it	ne
   28410:	4618      	movne	r0, r3
   28412:	4770      	bx	lr
   28414:	4801      	ldr	r0, [pc, #4]	; (2841c <kmu_validate_kdr_slot_and_size+0x14>)
   28416:	4770      	bx	lr
   28418:	00f70001 	.word	0x00f70001
   2841c:	00f70003 	.word	0x00f70003

00028420 <kmu_use_kdr_key>:
   28420:	4903      	ldr	r1, [pc, #12]	; (28430 <kmu_use_kdr_key+0x10>)
   28422:	4b04      	ldr	r3, [pc, #16]	; (28434 <kmu_use_kdr_key+0x14>)
   28424:	2000      	movs	r0, #0
   28426:	2201      	movs	r2, #1
   28428:	6008      	str	r0, [r1, #0]
   2842a:	601a      	str	r2, [r3, #0]
   2842c:	4770      	bx	lr
   2842e:	bf00      	nop
   28430:	5002ba38 	.word	0x5002ba38
   28434:	5002b478 	.word	0x5002b478

00028438 <kmu_derive_cmac>:
   28438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2843c:	b0cd      	sub	sp, #308	; 0x134
   2843e:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   28442:	460f      	mov	r7, r1
   28444:	2100      	movs	r1, #0
   28446:	460c      	mov	r4, r1
   28448:	4681      	mov	r9, r0
   2844a:	4616      	mov	r6, r2
   2844c:	a80e      	add	r0, sp, #56	; 0x38
   2844e:	2274      	movs	r2, #116	; 0x74
   28450:	469b      	mov	fp, r3
   28452:	f002 fb2d 	bl	2aab0 <memset>
   28456:	4621      	mov	r1, r4
   28458:	2280      	movs	r2, #128	; 0x80
   2845a:	a82c      	add	r0, sp, #176	; 0xb0
   2845c:	942b      	str	r4, [sp, #172]	; 0xac
   2845e:	f002 fb27 	bl	2aab0 <memset>
   28462:	2384      	movs	r3, #132	; 0x84
   28464:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   28468:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2846c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   28470:	9305      	str	r3, [sp, #20]
   28472:	d860      	bhi.n	28536 <kmu_derive_cmac+0xfe>
   28474:	ab05      	add	r3, sp, #20
   28476:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   2847a:	9301      	str	r3, [sp, #4]
   2847c:	9502      	str	r5, [sp, #8]
   2847e:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   28482:	4659      	mov	r1, fp
   28484:	4630      	mov	r0, r6
   28486:	f8cd a000 	str.w	sl, [sp]
   2848a:	f000 f865 	bl	28558 <UtilCmacBuildDataForDerivation>
   2848e:	2800      	cmp	r0, #0
   28490:	d14c      	bne.n	2852c <kmu_derive_cmac+0xf4>
   28492:	2303      	movs	r3, #3
   28494:	f88d 3013 	strb.w	r3, [sp, #19]
   28498:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2849c:	901c      	str	r0, [sp, #112]	; 0x70
   2849e:	2200      	movs	r2, #0
   284a0:	2110      	movs	r1, #16
   284a2:	a80e      	add	r0, sp, #56	; 0x38
   284a4:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   284a8:	2607      	movs	r6, #7
   284aa:	2301      	movs	r3, #1
   284ac:	2401      	movs	r4, #1
   284ae:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   284b2:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   284b6:	971a      	str	r7, [sp, #104]	; 0x68
   284b8:	961b      	str	r6, [sp, #108]	; 0x6c
   284ba:	9426      	str	r4, [sp, #152]	; 0x98
   284bc:	f10d 0920 	add.w	r9, sp, #32
   284c0:	f7ff f96e 	bl	277a0 <CC_PalMemSetZeroPlat>
   284c4:	2110      	movs	r1, #16
   284c6:	e9cd 1900 	strd	r1, r9, [sp]
   284ca:	ab0a      	add	r3, sp, #40	; 0x28
   284cc:	9905      	ldr	r1, [sp, #20]
   284ce:	4650      	mov	r0, sl
   284d0:	aa06      	add	r2, sp, #24
   284d2:	f7ff fa09 	bl	278e8 <SetDataBuffersInfo>
   284d6:	4607      	mov	r7, r0
   284d8:	b150      	cbz	r0, 284f0 <kmu_derive_cmac+0xb8>
   284da:	e01e      	b.n	2851a <kmu_derive_cmac+0xe2>
   284dc:	f7ff f95c 	bl	27798 <CC_PalMemCopyPlat>
   284e0:	2110      	movs	r1, #16
   284e2:	a80e      	add	r0, sp, #56	; 0x38
   284e4:	f7ff f95c 	bl	277a0 <CC_PalMemSetZeroPlat>
   284e8:	3401      	adds	r4, #1
   284ea:	1bad      	subs	r5, r5, r6
   284ec:	b2e4      	uxtb	r4, r4
   284ee:	d027      	beq.n	28540 <kmu_derive_cmac+0x108>
   284f0:	9b05      	ldr	r3, [sp, #20]
   284f2:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   284f6:	2d10      	cmp	r5, #16
   284f8:	464a      	mov	r2, r9
   284fa:	a906      	add	r1, sp, #24
   284fc:	a80e      	add	r0, sp, #56	; 0x38
   284fe:	462e      	mov	r6, r5
   28500:	bf28      	it	cs
   28502:	2610      	movcs	r6, #16
   28504:	f7ff fe52 	bl	281ac <FinishAesDrv>
   28508:	4603      	mov	r3, r0
   2850a:	4632      	mov	r2, r6
   2850c:	eb08 0007 	add.w	r0, r8, r7
   28510:	a90e      	add	r1, sp, #56	; 0x38
   28512:	4437      	add	r7, r6
   28514:	2b00      	cmp	r3, #0
   28516:	d0e1      	beq.n	284dc <kmu_derive_cmac+0xa4>
   28518:	461f      	mov	r7, r3
   2851a:	a80e      	add	r0, sp, #56	; 0x38
   2851c:	2274      	movs	r2, #116	; 0x74
   2851e:	2100      	movs	r1, #0
   28520:	f7ff f93c 	bl	2779c <CC_PalMemSetPlat>
   28524:	4638      	mov	r0, r7
   28526:	b04d      	add	sp, #308	; 0x134
   28528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2852c:	4f08      	ldr	r7, [pc, #32]	; (28550 <kmu_derive_cmac+0x118>)
   2852e:	4638      	mov	r0, r7
   28530:	b04d      	add	sp, #308	; 0x134
   28532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28536:	4f07      	ldr	r7, [pc, #28]	; (28554 <kmu_derive_cmac+0x11c>)
   28538:	4638      	mov	r0, r7
   2853a:	b04d      	add	sp, #308	; 0x134
   2853c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28540:	a80e      	add	r0, sp, #56	; 0x38
   28542:	2274      	movs	r2, #116	; 0x74
   28544:	2100      	movs	r1, #0
   28546:	462f      	mov	r7, r5
   28548:	f7ff f928 	bl	2779c <CC_PalMemSetPlat>
   2854c:	e7ea      	b.n	28524 <kmu_derive_cmac+0xec>
   2854e:	bf00      	nop
   28550:	00f1000e 	.word	0x00f1000e
   28554:	00f1000f 	.word	0x00f1000f

00028558 <UtilCmacBuildDataForDerivation>:
   28558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2855c:	b082      	sub	sp, #8
   2855e:	2600      	movs	r6, #0
   28560:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   28562:	9601      	str	r6, [sp, #4]
   28564:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   28568:	d83c      	bhi.n	285e4 <UtilCmacBuildDataForDerivation+0x8c>
   2856a:	00ee      	lsls	r6, r5, #3
   2856c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   28570:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
   28574:	461f      	mov	r7, r3
   28576:	bf34      	ite	cc
   28578:	2303      	movcc	r3, #3
   2857a:	2304      	movcs	r3, #4
   2857c:	2d3f      	cmp	r5, #63	; 0x3f
   2857e:	460c      	mov	r4, r1
   28580:	9300      	str	r3, [sp, #0]
   28582:	d82f      	bhi.n	285e4 <UtilCmacBuildDataForDerivation+0x8c>
   28584:	b370      	cbz	r0, 285e4 <UtilCmacBuildDataForDerivation+0x8c>
   28586:	4690      	mov	r8, r2
   28588:	b117      	cbz	r7, 28590 <UtilCmacBuildDataForDerivation+0x38>
   2858a:	b35a      	cbz	r2, 285e4 <UtilCmacBuildDataForDerivation+0x8c>
   2858c:	2f40      	cmp	r7, #64	; 0x40
   2858e:	d829      	bhi.n	285e4 <UtilCmacBuildDataForDerivation+0x8c>
   28590:	9a08      	ldr	r2, [sp, #32]
   28592:	b33a      	cbz	r2, 285e4 <UtilCmacBuildDataForDerivation+0x8c>
   28594:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28596:	6811      	ldr	r1, [r2, #0]
   28598:	b321      	cbz	r1, 285e4 <UtilCmacBuildDataForDerivation+0x8c>
   2859a:	19e2      	adds	r2, r4, r7
   2859c:	4413      	add	r3, r2
   2859e:	4299      	cmp	r1, r3
   285a0:	d320      	bcc.n	285e4 <UtilCmacBuildDataForDerivation+0x8c>
   285a2:	9b08      	ldr	r3, [sp, #32]
   285a4:	4622      	mov	r2, r4
   285a6:	4601      	mov	r1, r0
   285a8:	1c58      	adds	r0, r3, #1
   285aa:	f7ff f8f5 	bl	27798 <CC_PalMemCopyPlat>
   285ae:	9b08      	ldr	r3, [sp, #32]
   285b0:	4423      	add	r3, r4
   285b2:	2200      	movs	r2, #0
   285b4:	3402      	adds	r4, #2
   285b6:	705a      	strb	r2, [r3, #1]
   285b8:	bb07      	cbnz	r7, 285fc <UtilCmacBuildDataForDerivation+0xa4>
   285ba:	2eff      	cmp	r6, #255	; 0xff
   285bc:	9600      	str	r6, [sp, #0]
   285be:	d915      	bls.n	285ec <UtilCmacBuildDataForDerivation+0x94>
   285c0:	9b08      	ldr	r3, [sp, #32]
   285c2:	0235      	lsls	r5, r6, #8
   285c4:	b2ad      	uxth	r5, r5
   285c6:	1918      	adds	r0, r3, r4
   285c8:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   285cc:	2202      	movs	r2, #2
   285ce:	a901      	add	r1, sp, #4
   285d0:	9501      	str	r5, [sp, #4]
   285d2:	f7ff f8e1 	bl	27798 <CC_PalMemCopyPlat>
   285d6:	3402      	adds	r4, #2
   285d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   285da:	2000      	movs	r0, #0
   285dc:	601c      	str	r4, [r3, #0]
   285de:	b002      	add	sp, #8
   285e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   285e4:	4809      	ldr	r0, [pc, #36]	; (2860c <UtilCmacBuildDataForDerivation+0xb4>)
   285e6:	b002      	add	sp, #8
   285e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   285ec:	9b08      	ldr	r3, [sp, #32]
   285ee:	2201      	movs	r2, #1
   285f0:	1918      	adds	r0, r3, r4
   285f2:	4669      	mov	r1, sp
   285f4:	f7ff f8d0 	bl	27798 <CC_PalMemCopyPlat>
   285f8:	3401      	adds	r4, #1
   285fa:	e7ed      	b.n	285d8 <UtilCmacBuildDataForDerivation+0x80>
   285fc:	9b08      	ldr	r3, [sp, #32]
   285fe:	4641      	mov	r1, r8
   28600:	1918      	adds	r0, r3, r4
   28602:	463a      	mov	r2, r7
   28604:	f7ff f8c8 	bl	27798 <CC_PalMemCopyPlat>
   28608:	443c      	add	r4, r7
   2860a:	e7d6      	b.n	285ba <UtilCmacBuildDataForDerivation+0x62>
   2860c:	80000006 	.word	0x80000006

00028610 <CC_PalDataBufferAttrGet>:
   28610:	2000      	movs	r0, #0
   28612:	7018      	strb	r0, [r3, #0]
   28614:	4770      	bx	lr
   28616:	bf00      	nop

00028618 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   28618:	4770      	bx	lr

0002861a <uart_tx.constprop.0>:
#endif

extern int z_impl_uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   2861a:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   2861c:	6883      	ldr	r3, [r0, #8]
   2861e:	685c      	ldr	r4, [r3, #4]
   28620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28624:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
}
   28626:	bc10      	pop	{r4}
   28628:	4760      	bx	ip

0002862a <error>:
{
   2862a:	b508      	push	{r3, lr}
	return z_impl_k_sleep(timeout);
   2862c:	2100      	movs	r1, #0
   2862e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   28632:	f7fc f909 	bl	24848 <z_impl_k_sleep>
	while (true) {
   28636:	e7f9      	b.n	2862c <error+0x2>

00028638 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   28638:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2863a:	f04f 0c0a 	mov.w	ip, #10
{
   2863e:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   28640:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   28642:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   28644:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   28646:	b111      	cbz	r1, 2864e <u8_to_dec+0x16>
   28648:	3e01      	subs	r6, #1
   2864a:	d101      	bne.n	28650 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   2864c:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   2864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   28650:	42a2      	cmp	r2, r4
		digit = value / divisor;
   28652:	fbb2 f7f4 	udiv	r7, r2, r4
   28656:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   28658:	d202      	bcs.n	28660 <u8_to_dec+0x28>
   2865a:	2c01      	cmp	r4, #1
   2865c:	d000      	beq.n	28660 <u8_to_dec+0x28>
   2865e:	b130      	cbz	r0, 2866e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   28660:	3330      	adds	r3, #48	; 0x30
   28662:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   28666:	3901      	subs	r1, #1
			num_digits++;
   28668:	1c43      	adds	r3, r0, #1
			buflen--;
   2866a:	b2c9      	uxtb	r1, r1
			num_digits++;
   2866c:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   2866e:	fb04 2217 	mls	r2, r4, r7, r2
   28672:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   28674:	fbb4 f4fc 	udiv	r4, r4, ip
   28678:	e7e5      	b.n	28646 <u8_to_dec+0xe>

0002867a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2867a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2867e:	b2db      	uxtb	r3, r3
   28680:	2b09      	cmp	r3, #9
   28682:	d802      	bhi.n	2868a <char2hex+0x10>
		*x = c - '0';
   28684:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   28686:	2000      	movs	r0, #0
   28688:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2868a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2868e:	2b05      	cmp	r3, #5
   28690:	d802      	bhi.n	28698 <char2hex+0x1e>
		*x = c - 'a' + 10;
   28692:	3857      	subs	r0, #87	; 0x57
   28694:	7008      	strb	r0, [r1, #0]
   28696:	e7f6      	b.n	28686 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   28698:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2869c:	2b05      	cmp	r3, #5
   2869e:	d801      	bhi.n	286a4 <char2hex+0x2a>
		*x = c - 'A' + 10;
   286a0:	3837      	subs	r0, #55	; 0x37
   286a2:	e7f7      	b.n	28694 <char2hex+0x1a>
		return -EINVAL;
   286a4:	f06f 0015 	mvn.w	r0, #21
}
   286a8:	4770      	bx	lr

000286aa <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   286aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   286ac:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   286ae:	f001 0001 	and.w	r0, r1, #1
   286b2:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   286b6:	429d      	cmp	r5, r3
   286b8:	ea4f 0651 	mov.w	r6, r1, lsr #1
   286bc:	d903      	bls.n	286c6 <hex2bin+0x1c>
		return 0;
   286be:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   286c0:	4628      	mov	r0, r5
   286c2:	b003      	add	sp, #12
   286c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   286c6:	b158      	cbz	r0, 286e0 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   286c8:	7820      	ldrb	r0, [r4, #0]
   286ca:	f10d 0107 	add.w	r1, sp, #7
   286ce:	f7ff ffd4 	bl	2867a <char2hex>
   286d2:	2800      	cmp	r0, #0
   286d4:	dbf3      	blt.n	286be <hex2bin+0x14>
		buf[0] = dec;
   286d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   286da:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   286de:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   286e0:	3401      	adds	r4, #1
   286e2:	4416      	add	r6, r2
   286e4:	42b2      	cmp	r2, r6
   286e6:	d0eb      	beq.n	286c0 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   286e8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   286ec:	f10d 0107 	add.w	r1, sp, #7
   286f0:	f7ff ffc3 	bl	2867a <char2hex>
   286f4:	2800      	cmp	r0, #0
   286f6:	dbe2      	blt.n	286be <hex2bin+0x14>
		buf[i] = dec << 4;
   286f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   286fc:	011b      	lsls	r3, r3, #4
   286fe:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   28700:	f814 0b02 	ldrb.w	r0, [r4], #2
   28704:	f10d 0107 	add.w	r1, sp, #7
   28708:	f7ff ffb7 	bl	2867a <char2hex>
   2870c:	2800      	cmp	r0, #0
   2870e:	dbd6      	blt.n	286be <hex2bin+0x14>
		buf[i] += dec;
   28710:	7813      	ldrb	r3, [r2, #0]
   28712:	f89d 1007 	ldrb.w	r1, [sp, #7]
   28716:	440b      	add	r3, r1
   28718:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2871c:	e7e2      	b.n	286e4 <hex2bin+0x3a>

0002871e <sys_notify_validate>:
	if (notify == NULL) {
   2871e:	4603      	mov	r3, r0
   28720:	b140      	cbz	r0, 28734 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   28722:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   28724:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   28728:	2a02      	cmp	r2, #2
   2872a:	d006      	beq.n	2873a <sys_notify_validate+0x1c>
   2872c:	2a03      	cmp	r2, #3
   2872e:	d004      	beq.n	2873a <sys_notify_validate+0x1c>
   28730:	2a01      	cmp	r2, #1
   28732:	d005      	beq.n	28740 <sys_notify_validate+0x22>
		return -EINVAL;
   28734:	f06f 0015 	mvn.w	r0, #21
}
   28738:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2873a:	681a      	ldr	r2, [r3, #0]
   2873c:	2a00      	cmp	r2, #0
   2873e:	d0f9      	beq.n	28734 <sys_notify_validate+0x16>
		notify->result = 0;
   28740:	2000      	movs	r0, #0
   28742:	6098      	str	r0, [r3, #8]
   28744:	4770      	bx	lr

00028746 <arch_printk_char_out>:
}
   28746:	2000      	movs	r0, #0
   28748:	4770      	bx	lr

0002874a <str_out>:
{
   2874a:	b530      	push	{r4, r5, lr}
   2874c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2874e:	680c      	ldr	r4, [r1, #0]
   28750:	1c55      	adds	r5, r2, #1
   28752:	b114      	cbz	r4, 2875a <str_out+0x10>
   28754:	684b      	ldr	r3, [r1, #4]
   28756:	4293      	cmp	r3, r2
   28758:	dc01      	bgt.n	2875e <str_out+0x14>
		ctx->count++;
   2875a:	608d      	str	r5, [r1, #8]
}
   2875c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2875e:	3b01      	subs	r3, #1
   28760:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   28762:	bf08      	it	eq
   28764:	2200      	moveq	r2, #0
   28766:	608d      	str	r5, [r1, #8]
   28768:	bf0c      	ite	eq
   2876a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2876c:	54a0      	strbne	r0, [r4, r2]
   2876e:	e7f5      	b.n	2875c <str_out+0x12>

00028770 <printk>:
{
   28770:	b40f      	push	{r0, r1, r2, r3}
   28772:	b507      	push	{r0, r1, r2, lr}
   28774:	a904      	add	r1, sp, #16
   28776:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2877a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2877c:	f7e8 fcb2 	bl	110e4 <vprintk>
}
   28780:	b003      	add	sp, #12
   28782:	f85d eb04 	ldr.w	lr, [sp], #4
   28786:	b004      	add	sp, #16
   28788:	4770      	bx	lr

0002878a <snprintk>:
{
   2878a:	b40c      	push	{r2, r3}
   2878c:	b507      	push	{r0, r1, r2, lr}
   2878e:	ab04      	add	r3, sp, #16
   28790:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   28794:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   28796:	f7e8 fcb3 	bl	11100 <vsnprintk>
}
   2879a:	b003      	add	sp, #12
   2879c:	f85d eb04 	ldr.w	lr, [sp], #4
   287a0:	b002      	add	sp, #8
   287a2:	4770      	bx	lr

000287a4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   287a4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   287a6:	f013 0307 	ands.w	r3, r3, #7
   287aa:	d105      	bne.n	287b8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   287ac:	6803      	ldr	r3, [r0, #0]
   287ae:	2b00      	cmp	r3, #0
		evt = EVT_START;
   287b0:	bf0c      	ite	eq
   287b2:	2000      	moveq	r0, #0
   287b4:	2003      	movne	r0, #3
   287b6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   287b8:	2b02      	cmp	r3, #2
   287ba:	d105      	bne.n	287c8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   287bc:	8bc3      	ldrh	r3, [r0, #30]
   287be:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   287c0:	bf14      	ite	ne
   287c2:	2000      	movne	r0, #0
   287c4:	2004      	moveq	r0, #4
   287c6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   287c8:	2b01      	cmp	r3, #1
   287ca:	d105      	bne.n	287d8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   287cc:	6803      	ldr	r3, [r0, #0]
   287ce:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   287d0:	bf0c      	ite	eq
   287d2:	2000      	moveq	r0, #0
   287d4:	2005      	movne	r0, #5
   287d6:	4770      	bx	lr
	int evt = EVT_NOP;
   287d8:	2000      	movs	r0, #0
}
   287da:	4770      	bx	lr

000287dc <notify_one>:
{
   287dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287e0:	460d      	mov	r5, r1
   287e2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   287e4:	4619      	mov	r1, r3
   287e6:	1d28      	adds	r0, r5, #4
{
   287e8:	4690      	mov	r8, r2
   287ea:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   287ec:	f7e8 fc3c 	bl	11068 <sys_notify_finalize>
	if (cb) {
   287f0:	4604      	mov	r4, r0
   287f2:	b138      	cbz	r0, 28804 <notify_one+0x28>
		cb(mgr, cli, state, res);
   287f4:	4633      	mov	r3, r6
   287f6:	4642      	mov	r2, r8
   287f8:	4629      	mov	r1, r5
   287fa:	4638      	mov	r0, r7
   287fc:	46a4      	mov	ip, r4
}
   287fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   28802:	4760      	bx	ip
}
   28804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028808 <validate_args>:
{
   28808:	b510      	push	{r4, lr}
   2880a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2880c:	b140      	cbz	r0, 28820 <validate_args+0x18>
   2880e:	b139      	cbz	r1, 28820 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   28810:	1d08      	adds	r0, r1, #4
   28812:	f7ff ff84 	bl	2871e <sys_notify_validate>
	if ((rv == 0)
   28816:	b928      	cbnz	r0, 28824 <validate_args+0x1c>
	    && ((cli->notify.flags
   28818:	68a3      	ldr	r3, [r4, #8]
   2881a:	f033 0303 	bics.w	r3, r3, #3
   2881e:	d001      	beq.n	28824 <validate_args+0x1c>
		rv = -EINVAL;
   28820:	f06f 0015 	mvn.w	r0, #21
}
   28824:	bd10      	pop	{r4, pc}

00028826 <onoff_manager_init>:
{
   28826:	b538      	push	{r3, r4, r5, lr}
   28828:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2882a:	4605      	mov	r5, r0
   2882c:	b158      	cbz	r0, 28846 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2882e:	b151      	cbz	r1, 28846 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   28830:	680b      	ldr	r3, [r1, #0]
   28832:	b143      	cbz	r3, 28846 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   28834:	684b      	ldr	r3, [r1, #4]
   28836:	b133      	cbz	r3, 28846 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   28838:	2220      	movs	r2, #32
   2883a:	2100      	movs	r1, #0
   2883c:	f002 f938 	bl	2aab0 <memset>
   28840:	612c      	str	r4, [r5, #16]
	return 0;
   28842:	2000      	movs	r0, #0
}
   28844:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28846:	f06f 0015 	mvn.w	r0, #21
   2884a:	e7fb      	b.n	28844 <onoff_manager_init+0x1e>

0002884c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2884c:	4604      	mov	r4, r0
   2884e:	b508      	push	{r3, lr}
   28850:	4608      	mov	r0, r1
   28852:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   28854:	461a      	mov	r2, r3
   28856:	47a0      	blx	r4
	return z_impl_z_current_get();
   28858:	f7fc f82e 	bl	248b8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2885c:	f7ec fa92 	bl	14d84 <z_impl_k_thread_abort>

00028860 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   28860:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   28864:	8840      	ldrh	r0, [r0, #2]
}
   28866:	0840      	lsrs	r0, r0, #1
   28868:	4770      	bx	lr

0002886a <free_list_add>:
{
   2886a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2886c:	4603      	mov	r3, r0
   2886e:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   28870:	f7ff fff6 	bl	28860 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   28874:	fab0 f080 	clz	r0, r0
   28878:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2887c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   28880:	00ca      	lsls	r2, r1, #3
   28882:	f8dc 6010 	ldr.w	r6, [ip, #16]
   28886:	1d17      	adds	r7, r2, #4
   28888:	b28d      	uxth	r5, r1
   2888a:	3206      	adds	r2, #6
   2888c:	b956      	cbnz	r6, 288a4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2888e:	2101      	movs	r1, #1
   28890:	fa01 f000 	lsl.w	r0, r1, r0
   28894:	68d9      	ldr	r1, [r3, #12]
   28896:	4301      	orrs	r1, r0
   28898:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2889a:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2889e:	53dd      	strh	r5, [r3, r7]
   288a0:	529d      	strh	r5, [r3, r2]
}
   288a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   288a4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   288a6:	3104      	adds	r1, #4
   288a8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   288aa:	53d8      	strh	r0, [r3, r7]
   288ac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   288b0:	529e      	strh	r6, [r3, r2]
   288b2:	80c5      	strh	r5, [r0, #6]
   288b4:	525d      	strh	r5, [r3, r1]
   288b6:	e7f4      	b.n	288a2 <free_list_add+0x38>

000288b8 <free_list_remove_bidx>:
{
   288b8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   288ba:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   288be:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   288c0:	4299      	cmp	r1, r3
   288c2:	f102 0104 	add.w	r1, r2, #4
   288c6:	d10a      	bne.n	288de <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   288c8:	2301      	movs	r3, #1
   288ca:	fa03 f202 	lsl.w	r2, r3, r2
   288ce:	68c3      	ldr	r3, [r0, #12]
   288d0:	ea23 0302 	bic.w	r3, r3, r2
   288d4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   288d6:	2300      	movs	r3, #0
   288d8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   288dc:	bd10      	pop	{r4, pc}
   288de:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   288e0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   288e4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   288e8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   288ec:	80cb      	strh	r3, [r1, #6]
   288ee:	8082      	strh	r2, [r0, #4]
}
   288f0:	e7f4      	b.n	288dc <free_list_remove_bidx+0x24>

000288f2 <free_list_remove>:
{
   288f2:	b510      	push	{r4, lr}
   288f4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   288f6:	f7ff ffb3 	bl	28860 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   288fa:	fab0 f280 	clz	r2, r0
}
   288fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   28902:	f1c2 021f 	rsb	r2, r2, #31
   28906:	4618      	mov	r0, r3
   28908:	f7ff bfd6 	b.w	288b8 <free_list_remove_bidx>

0002890c <alloc_chunk>:
{
   2890c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28910:	fab1 f581 	clz	r5, r1
   28914:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   28918:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   2891c:	4603      	mov	r3, r0
	if (b->next) {
   2891e:	693a      	ldr	r2, [r7, #16]
{
   28920:	460e      	mov	r6, r1
	if (b->next) {
   28922:	b1ca      	cbz	r2, 28958 <alloc_chunk+0x4c>
   28924:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   28928:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2892a:	4618      	mov	r0, r3
   2892c:	4621      	mov	r1, r4
   2892e:	f7ff ff97 	bl	28860 <chunk_size>
   28932:	42b0      	cmp	r0, r6
   28934:	d307      	bcc.n	28946 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   28936:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   28938:	4621      	mov	r1, r4
   2893a:	4618      	mov	r0, r3
   2893c:	f7ff ffbc 	bl	288b8 <free_list_remove_bidx>
}
   28940:	4620      	mov	r0, r4
   28942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   28946:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2894a:	f1b8 0801 	subs.w	r8, r8, #1
   2894e:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   28950:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   28952:	d001      	beq.n	28958 <alloc_chunk+0x4c>
   28954:	428a      	cmp	r2, r1
   28956:	d1e7      	bne.n	28928 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   28958:	68d9      	ldr	r1, [r3, #12]
   2895a:	f1c5 0520 	rsb	r5, r5, #32
   2895e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   28962:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   28964:	400c      	ands	r4, r1
   28966:	d0eb      	beq.n	28940 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   28968:	fa94 f2a4 	rbit	r2, r4
   2896c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   28970:	1d11      	adds	r1, r2, #4
   28972:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   28976:	e7df      	b.n	28938 <alloc_chunk+0x2c>

00028978 <merge_chunks>:
{
   28978:	b538      	push	{r3, r4, r5, lr}
   2897a:	4603      	mov	r3, r0
   2897c:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2897e:	f7ff ff6f 	bl	28860 <chunk_size>
   28982:	4611      	mov	r1, r2
   28984:	4604      	mov	r4, r0
   28986:	4618      	mov	r0, r3
   28988:	f7ff ff6a 	bl	28860 <chunk_size>
   2898c:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   2898e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28992:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   28994:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   28996:	4618      	mov	r0, r3
   28998:	4611      	mov	r1, r2
   2899a:	f7ff ff61 	bl	28860 <chunk_size>
	void *cmem = &buf[c];
   2899e:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   289a0:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   289a4:	bd38      	pop	{r3, r4, r5, pc}

000289a6 <split_chunks>:
{
   289a6:	b538      	push	{r3, r4, r5, lr}
   289a8:	4603      	mov	r3, r0
   289aa:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   289ac:	f7ff ff58 	bl	28860 <chunk_size>
	chunksz_t lsz = rc - lc;
   289b0:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   289b2:	1aa5      	subs	r5, r4, r2
   289b4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   289b8:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   289ba:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   289bc:	8060      	strh	r0, [r4, #2]
   289be:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   289c2:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   289c4:	8044      	strh	r4, [r0, #2]
   289c6:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   289ca:	4618      	mov	r0, r3
   289cc:	4611      	mov	r1, r2
   289ce:	f7ff ff47 	bl	28860 <chunk_size>
	void *cmem = &buf[c];
   289d2:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   289d4:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   289d8:	bd38      	pop	{r3, r4, r5, pc}

000289da <free_chunk>:
{
   289da:	b538      	push	{r3, r4, r5, lr}
   289dc:	4605      	mov	r5, r0
   289de:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   289e0:	f7ff ff3e 	bl	28860 <chunk_size>
   289e4:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   289e6:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   289ea:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   289ec:	07da      	lsls	r2, r3, #31
   289ee:	d40a      	bmi.n	28a06 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   289f0:	4628      	mov	r0, r5
   289f2:	f7ff ff7e 	bl	288f2 <free_list_remove>
	return c + chunk_size(h, c);
   289f6:	4621      	mov	r1, r4
   289f8:	4628      	mov	r0, r5
   289fa:	f7ff ff31 	bl	28860 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   289fe:	1822      	adds	r2, r4, r0
   28a00:	4628      	mov	r0, r5
   28a02:	f7ff ffb9 	bl	28978 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   28a06:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   28a0a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   28a0c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   28a10:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   28a12:	07db      	lsls	r3, r3, #31
   28a14:	d40c      	bmi.n	28a30 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   28a16:	4628      	mov	r0, r5
   28a18:	f7ff ff6b 	bl	288f2 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   28a1c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   28a20:	4622      	mov	r2, r4
   28a22:	1a61      	subs	r1, r4, r1
   28a24:	4628      	mov	r0, r5
   28a26:	f7ff ffa7 	bl	28978 <merge_chunks>
   28a2a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   28a2e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   28a30:	4621      	mov	r1, r4
   28a32:	4628      	mov	r0, r5
}
   28a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   28a38:	f7ff bf17 	b.w	2886a <free_list_add>

00028a3c <sys_heap_alloc>:
{
   28a3c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   28a3e:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   28a40:	b909      	cbnz	r1, 28a46 <sys_heap_alloc+0xa>
		return NULL;
   28a42:	2000      	movs	r0, #0
}
   28a44:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   28a46:	68ab      	ldr	r3, [r5, #8]
   28a48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   28a4c:	d9f9      	bls.n	28a42 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   28a4e:	310b      	adds	r1, #11
   28a50:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   28a52:	4621      	mov	r1, r4
   28a54:	4628      	mov	r0, r5
   28a56:	f7ff ff59 	bl	2890c <alloc_chunk>
	if (c == 0U) {
   28a5a:	4606      	mov	r6, r0
   28a5c:	2800      	cmp	r0, #0
   28a5e:	d0f0      	beq.n	28a42 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   28a60:	4601      	mov	r1, r0
   28a62:	4628      	mov	r0, r5
   28a64:	f7ff fefc 	bl	28860 <chunk_size>
   28a68:	42a0      	cmp	r0, r4
   28a6a:	d908      	bls.n	28a7e <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   28a6c:	4434      	add	r4, r6
   28a6e:	4628      	mov	r0, r5
   28a70:	4622      	mov	r2, r4
   28a72:	f7ff ff98 	bl	289a6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   28a76:	4621      	mov	r1, r4
   28a78:	4628      	mov	r0, r5
   28a7a:	f7ff fef6 	bl	2886a <free_list_add>
	void *cmem = &buf[c];
   28a7e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   28a82:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   28a84:	8853      	ldrh	r3, [r2, #2]
   28a86:	f043 0301 	orr.w	r3, r3, #1
   28a8a:	8053      	strh	r3, [r2, #2]
   28a8c:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   28a8e:	e7d9      	b.n	28a44 <sys_heap_alloc+0x8>

00028a90 <encode_uint>:
{
   28a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a94:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   28a96:	78d3      	ldrb	r3, [r2, #3]
{
   28a98:	4614      	mov	r4, r2
	switch (specifier) {
   28a9a:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28a9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   28aa0:	4606      	mov	r6, r0
   28aa2:	460f      	mov	r7, r1
   28aa4:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   28aa6:	d02d      	beq.n	28b04 <encode_uint+0x74>
   28aa8:	d828      	bhi.n	28afc <encode_uint+0x6c>
		return 16;
   28aaa:	2b58      	cmp	r3, #88	; 0x58
   28aac:	bf14      	ite	ne
   28aae:	250a      	movne	r5, #10
   28ab0:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   28ab2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   28ab6:	46aa      	mov	sl, r5
   28ab8:	f04f 0b00 	mov.w	fp, #0
   28abc:	4652      	mov	r2, sl
   28abe:	465b      	mov	r3, fp
   28ac0:	4630      	mov	r0, r6
   28ac2:	4639      	mov	r1, r7
   28ac4:	f7d7 fb1c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28ac8:	2a09      	cmp	r2, #9
   28aca:	b2d3      	uxtb	r3, r2
   28acc:	d81f      	bhi.n	28b0e <encode_uint+0x7e>
   28ace:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   28ad0:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28ad2:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   28ad4:	bf08      	it	eq
   28ad6:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28ad8:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   28adc:	d301      	bcc.n	28ae2 <encode_uint+0x52>
   28ade:	45c8      	cmp	r8, r9
   28ae0:	d812      	bhi.n	28b08 <encode_uint+0x78>
	if (conv->flag_hash) {
   28ae2:	7823      	ldrb	r3, [r4, #0]
   28ae4:	069b      	lsls	r3, r3, #26
   28ae6:	d505      	bpl.n	28af4 <encode_uint+0x64>
		if (radix == 8) {
   28ae8:	2d08      	cmp	r5, #8
   28aea:	d116      	bne.n	28b1a <encode_uint+0x8a>
			conv->altform_0 = true;
   28aec:	78a3      	ldrb	r3, [r4, #2]
   28aee:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   28af2:	70a3      	strb	r3, [r4, #2]
}
   28af4:	4640      	mov	r0, r8
   28af6:	b003      	add	sp, #12
   28af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   28afc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   28b00:	2b70      	cmp	r3, #112	; 0x70
   28b02:	e7d3      	b.n	28aac <encode_uint+0x1c>
	switch (specifier) {
   28b04:	2508      	movs	r5, #8
   28b06:	e7d4      	b.n	28ab2 <encode_uint+0x22>
		value /= radix;
   28b08:	4606      	mov	r6, r0
   28b0a:	460f      	mov	r7, r1
   28b0c:	e7d6      	b.n	28abc <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   28b0e:	9a01      	ldr	r2, [sp, #4]
   28b10:	2a19      	cmp	r2, #25
   28b12:	bf94      	ite	ls
   28b14:	3337      	addls	r3, #55	; 0x37
   28b16:	3357      	addhi	r3, #87	; 0x57
   28b18:	e7da      	b.n	28ad0 <encode_uint+0x40>
		} else if (radix == 16) {
   28b1a:	2d10      	cmp	r5, #16
   28b1c:	d1ea      	bne.n	28af4 <encode_uint+0x64>
			conv->altform_0c = true;
   28b1e:	78a3      	ldrb	r3, [r4, #2]
   28b20:	f043 0310 	orr.w	r3, r3, #16
   28b24:	e7e5      	b.n	28af2 <encode_uint+0x62>

00028b26 <outs>:
{
   28b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b2a:	4607      	mov	r7, r0
   28b2c:	4688      	mov	r8, r1
   28b2e:	4615      	mov	r5, r2
   28b30:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28b32:	4614      	mov	r4, r2
   28b34:	42b4      	cmp	r4, r6
   28b36:	eba4 0005 	sub.w	r0, r4, r5
   28b3a:	d302      	bcc.n	28b42 <outs+0x1c>
   28b3c:	b93e      	cbnz	r6, 28b4e <outs+0x28>
   28b3e:	7823      	ldrb	r3, [r4, #0]
   28b40:	b12b      	cbz	r3, 28b4e <outs+0x28>
		int rc = out((int)*sp++, ctx);
   28b42:	f814 0b01 	ldrb.w	r0, [r4], #1
   28b46:	4641      	mov	r1, r8
   28b48:	47b8      	blx	r7
		if (rc < 0) {
   28b4a:	2800      	cmp	r0, #0
   28b4c:	daf2      	bge.n	28b34 <outs+0xe>
}
   28b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028b52 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   28b52:	4040      	eors	r0, r0
   28b54:	f380 8811 	msr	BASEPRI, r0
   28b58:	f04f 0004 	mov.w	r0, #4
   28b5c:	df02      	svc	2
}
   28b5e:	4770      	bx	lr

00028b60 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_DEV, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   28b60:	4770      	bx	lr

00028b62 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   28b62:	2300      	movs	r3, #0
	list->head = NULL;
   28b64:	e9c0 3300 	strd	r3, r3, [r0]
}
   28b68:	4770      	bx	lr

00028b6a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   28b6a:	6803      	ldr	r3, [r0, #0]
   28b6c:	b923      	cbnz	r3, 28b78 <log_list_add_tail+0xe>
		list->head = msg;
   28b6e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   28b70:	2300      	movs	r3, #0
	list->tail = msg;
   28b72:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   28b74:	600b      	str	r3, [r1, #0]
}
   28b76:	4770      	bx	lr
		list->tail->next = msg;
   28b78:	6843      	ldr	r3, [r0, #4]
   28b7a:	6019      	str	r1, [r3, #0]
   28b7c:	e7f8      	b.n	28b70 <log_list_add_tail+0x6>

00028b7e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   28b7e:	6800      	ldr	r0, [r0, #0]
   28b80:	4770      	bx	lr

00028b82 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   28b82:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   28b84:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   28b86:	b108      	cbz	r0, 28b8c <log_list_head_get+0xa>
		list->head = list->head->next;
   28b88:	6802      	ldr	r2, [r0, #0]
   28b8a:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   28b8c:	4770      	bx	lr

00028b8e <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   28b8e:	6843      	ldr	r3, [r0, #4]
}
   28b90:	7958      	ldrb	r0, [r3, #5]
   28b92:	4770      	bx	lr

00028b94 <z_log_msg_std_alloc>:
{
   28b94:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   28b96:	f7e9 fe1f 	bl	127d8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   28b9a:	b118      	cbz	r0, 28ba4 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   28b9c:	2301      	movs	r3, #1
   28b9e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   28ba0:	2300      	movs	r3, #0
   28ba2:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   28ba4:	bd08      	pop	{r3, pc}

00028ba6 <default_get_timestamp>:
   28ba6:	f004 ba3c 	b.w	2d022 <sys_clock_cycle_get_32>

00028baa <dummy_timestamp>:
   28baa:	2000      	movs	r0, #0
   28bac:	4770      	bx	lr

00028bae <log_0>:
{
   28bae:	b538      	push	{r3, r4, r5, lr}
   28bb0:	4605      	mov	r5, r0
   28bb2:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   28bb4:	f7ff ffee 	bl	28b94 <z_log_msg_std_alloc>

	if (msg != NULL) {
   28bb8:	b128      	cbz	r0, 28bc6 <log_0+0x18>
		msg->str = str;
   28bba:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   28bbc:	4621      	mov	r1, r4
}
   28bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   28bc2:	f7e9 bcd7 	b.w	12574 <msg_finalize>
}
   28bc6:	bd38      	pop	{r3, r4, r5, pc}

00028bc8 <log_1>:
{
   28bc8:	b570      	push	{r4, r5, r6, lr}
   28bca:	4606      	mov	r6, r0
   28bcc:	460d      	mov	r5, r1
   28bce:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   28bd0:	f7ff ffe0 	bl	28b94 <z_log_msg_std_alloc>

	if (msg != NULL) {
   28bd4:	b158      	cbz	r0, 28bee <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   28bd6:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   28bd8:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   28bda:	2101      	movs	r1, #1
   28bdc:	f361 1207 	bfi	r2, r1, #4, #4
   28be0:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   28be2:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   28be4:	4621      	mov	r1, r4
}
   28be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   28bea:	f7e9 bcc3 	b.w	12574 <msg_finalize>
}
   28bee:	bd70      	pop	{r4, r5, r6, pc}

00028bf0 <log_2>:
{
   28bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28bf4:	4680      	mov	r8, r0
   28bf6:	460f      	mov	r7, r1
   28bf8:	4616      	mov	r6, r2
   28bfa:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   28bfc:	f7ff ffca 	bl	28b94 <z_log_msg_std_alloc>

	if (msg != NULL) {
   28c00:	b168      	cbz	r0, 28c1e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   28c02:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   28c04:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   28c08:	2202      	movs	r2, #2
   28c0a:	f362 1307 	bfi	r3, r2, #4, #4
   28c0e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   28c10:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   28c14:	4629      	mov	r1, r5
}
   28c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   28c1a:	f7e9 bcab 	b.w	12574 <msg_finalize>
}
   28c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028c22 <log_3>:
{
   28c22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28c26:	4680      	mov	r8, r0
   28c28:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   28c2c:	460f      	mov	r7, r1
   28c2e:	4616      	mov	r6, r2
   28c30:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   28c32:	f7ff ffaf 	bl	28b94 <z_log_msg_std_alloc>

	if (msg != NULL) {
   28c36:	b170      	cbz	r0, 28c56 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   28c38:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   28c3a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   28c3e:	2203      	movs	r2, #3
   28c40:	f362 1307 	bfi	r3, r2, #4, #4
   28c44:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   28c46:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   28c4a:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   28c4c:	4649      	mov	r1, r9
}
   28c4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   28c52:	f7e9 bc8f 	b.w	12574 <msg_finalize>
}
   28c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028c5a <log_n>:
{
   28c5a:	b510      	push	{r4, lr}
   28c5c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   28c5e:	f7e9 fe0d 	bl	1287c <log_msg_create_n>
		if (msg == NULL) {
   28c62:	b120      	cbz	r0, 28c6e <log_n+0x14>
		msg_finalize(msg, src_level);
   28c64:	4621      	mov	r1, r4
}
   28c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   28c6a:	f7e9 bc83 	b.w	12574 <msg_finalize>
}
   28c6e:	bd10      	pop	{r4, pc}

00028c70 <log_hexdump>:
{
   28c70:	b510      	push	{r4, lr}
   28c72:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   28c74:	f000 f8a3 	bl	28dbe <log_msg_hexdump_create>
		if (msg == NULL) {
   28c78:	b120      	cbz	r0, 28c84 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   28c7a:	4621      	mov	r1, r4
}
   28c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   28c80:	f7e9 bc78 	b.w	12574 <msg_finalize>
}
   28c84:	bd10      	pop	{r4, pc}

00028c86 <z_log_get_tag>:
}
   28c86:	2000      	movs	r0, #0
   28c88:	4770      	bx	lr

00028c8a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   28c8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28c8e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   28c90:	8903      	ldrh	r3, [r0, #8]
{
   28c92:	f89d 7020 	ldrb.w	r7, [sp, #32]
   28c96:	460e      	mov	r6, r1
   28c98:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   28c9a:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   28c9e:	42a2      	cmp	r2, r4
   28ca0:	d803      	bhi.n	28caa <log_msg_hexdump_data_op+0x20>
		*length = 0;
   28ca2:	2300      	movs	r3, #0
   28ca4:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   28ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   28caa:	680b      	ldr	r3, [r1, #0]
   28cac:	4423      	add	r3, r4
   28cae:	4293      	cmp	r3, r2
		*length = available_len - offset;
   28cb0:	bf84      	itt	hi
   28cb2:	1b13      	subhi	r3, r2, r4
   28cb4:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   28cb6:	2a0c      	cmp	r2, #12
	req_len = *length;
   28cb8:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   28cbc:	d92a      	bls.n	28d14 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   28cbe:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   28cc0:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   28cc4:	d82d      	bhi.n	28d22 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   28cc6:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   28cc8:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   28cca:	454a      	cmp	r2, r9
   28ccc:	bf28      	it	cs
   28cce:	464a      	movcs	r2, r9
   28cd0:	4615      	mov	r5, r2
		if (put_op) {
   28cd2:	4420      	add	r0, r4
   28cd4:	b317      	cbz	r7, 28d1c <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   28cd6:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   28cd8:	f001 fedf 	bl	2aa9a <memcpy>
		req_len -= cpy_len;
   28cdc:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   28ce0:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   28ce2:	f1b9 0f00 	cmp.w	r9, #0
   28ce6:	d0de      	beq.n	28ca6 <log_msg_hexdump_data_op+0x1c>
   28ce8:	f1b8 0f00 	cmp.w	r8, #0
   28cec:	d0db      	beq.n	28ca6 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   28cee:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   28cf2:	454d      	cmp	r5, r9
   28cf4:	bf28      	it	cs
   28cf6:	464d      	movcs	r5, r9
		if (put_op) {
   28cf8:	1d20      	adds	r0, r4, #4
   28cfa:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
   28cfc:	462a      	mov	r2, r5
		if (put_op) {
   28cfe:	b1bf      	cbz	r7, 28d30 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   28d00:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   28d02:	f001 feca 	bl	2aa9a <memcpy>
		req_len -= cpy_len;
   28d06:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   28d0a:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   28d0e:	442e      	add	r6, r5
		offset = 0;
   28d10:	2400      	movs	r4, #0
   28d12:	e7e6      	b.n	28ce2 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   28d14:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   28d16:	f04f 0800 	mov.w	r8, #0
   28d1a:	e7d6      	b.n	28cca <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   28d1c:	4601      	mov	r1, r0
   28d1e:	4630      	mov	r0, r6
   28d20:	e7da      	b.n	28cd8 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   28d22:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   28d24:	2c1b      	cmp	r4, #27
   28d26:	d9dc      	bls.n	28ce2 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   28d28:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   28d2c:	3c1c      	subs	r4, #28
   28d2e:	e7f9      	b.n	28d24 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   28d30:	4601      	mov	r1, r0
   28d32:	4630      	mov	r0, r6
   28d34:	e7e5      	b.n	28d02 <log_msg_hexdump_data_op+0x78>

00028d36 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   28d36:	3004      	adds	r0, #4
   28d38:	f3bf 8f5b 	dmb	ish
   28d3c:	e850 3f00 	ldrex	r3, [r0]
   28d40:	3301      	adds	r3, #1
   28d42:	e840 3200 	strex	r2, r3, [r0]
   28d46:	2a00      	cmp	r2, #0
   28d48:	d1f8      	bne.n	28d3c <log_msg_get+0x6>
   28d4a:	f3bf 8f5b 	dmb	ish
}
   28d4e:	4770      	bx	lr

00028d50 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   28d50:	7a40      	ldrb	r0, [r0, #9]
}
   28d52:	0900      	lsrs	r0, r0, #4
   28d54:	4770      	bx	lr

00028d56 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   28d56:	7a43      	ldrb	r3, [r0, #9]
   28d58:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   28d5c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   28d60:	d216      	bcs.n	28d90 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   28d62:	2a03      	cmp	r2, #3
   28d64:	d803      	bhi.n	28d6e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   28d66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   28d6a:	6948      	ldr	r0, [r1, #20]
   28d6c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   28d6e:	2901      	cmp	r1, #1
   28d70:	d803      	bhi.n	28d7a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   28d72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   28d76:	6988      	ldr	r0, [r1, #24]
   28d78:	4770      	bx	lr
	cont = msg->payload.ext.next;
   28d7a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   28d7c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   28d7e:	2906      	cmp	r1, #6
   28d80:	d803      	bhi.n	28d8a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   28d82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   28d86:	6848      	ldr	r0, [r1, #4]
   28d88:	4770      	bx	lr
		cont = cont->next;
   28d8a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   28d8c:	3907      	subs	r1, #7
		cont = cont->next;
   28d8e:	e7f6      	b.n	28d7e <log_msg_arg_get+0x28>
		return 0;
   28d90:	2000      	movs	r0, #0
}
   28d92:	4770      	bx	lr

00028d94 <log_msg_put>:
{
   28d94:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   28d96:	1d02      	adds	r2, r0, #4
   28d98:	f3bf 8f5b 	dmb	ish
   28d9c:	e852 1f00 	ldrex	r1, [r2]
   28da0:	3901      	subs	r1, #1
   28da2:	e842 1c00 	strex	ip, r1, [r2]
   28da6:	f1bc 0f00 	cmp.w	ip, #0
   28daa:	d1f7      	bne.n	28d9c <log_msg_put+0x8>
   28dac:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   28db0:	685b      	ldr	r3, [r3, #4]
   28db2:	b90b      	cbnz	r3, 28db8 <log_msg_put+0x24>
		msg_free(msg);
   28db4:	f7e9 bd24 	b.w	12800 <msg_free>
}
   28db8:	4770      	bx	lr

00028dba <log_msg_str_get>:
}
   28dba:	6900      	ldr	r0, [r0, #16]
   28dbc:	4770      	bx	lr

00028dbe <log_msg_hexdump_create>:
{
   28dbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   28dc2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   28dc6:	4295      	cmp	r5, r2
{
   28dc8:	4680      	mov	r8, r0
   28dca:	460e      	mov	r6, r1
   28dcc:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   28dce:	bf28      	it	cs
   28dd0:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   28dd2:	f7e9 fd01 	bl	127d8 <log_msg_chunk_alloc>
	if (msg == NULL) {
   28dd6:	4604      	mov	r4, r0
   28dd8:	b380      	cbz	r0, 28e3c <log_msg_hexdump_create+0x7e>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   28dda:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   28ddc:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   28de0:	2301      	movs	r3, #1
   28de2:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   28de4:	00ab      	lsls	r3, r5, #2
   28de6:	f043 0301 	orr.w	r3, r3, #1
   28dea:	f002 0202 	and.w	r2, r2, #2
   28dee:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   28df0:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   28df2:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   28df4:	f100 0814 	add.w	r8, r0, #20
   28df8:	d917      	bls.n	28e2a <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   28dfa:	2208      	movs	r2, #8
   28dfc:	4631      	mov	r1, r6
   28dfe:	3018      	adds	r0, #24
   28e00:	f001 fe4b 	bl	2aa9a <memcpy>
		msg->hdr.params.generic.ext = 1;
   28e04:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   28e06:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   28e08:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   28e0c:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   28e0e:	7222      	strb	r2, [r4, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   28e10:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   28e12:	3d08      	subs	r5, #8
	while (length > 0) {
   28e14:	4699      	mov	r9, r3
   28e16:	b18d      	cbz	r5, 28e3c <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   28e18:	f7e9 fcde 	bl	127d8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   28e1c:	4607      	mov	r7, r0
   28e1e:	b980      	cbnz	r0, 28e42 <log_msg_hexdump_create+0x84>
			msg_free(msg);
   28e20:	4620      	mov	r0, r4
   28e22:	f7e9 fced 	bl	12800 <msg_free>
			return NULL;
   28e26:	463c      	mov	r4, r7
   28e28:	e008      	b.n	28e3c <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   28e2a:	462a      	mov	r2, r5
   28e2c:	4631      	mov	r1, r6
   28e2e:	4640      	mov	r0, r8
   28e30:	f001 fe33 	bl	2aa9a <memcpy>
		msg->hdr.params.generic.ext = 0;
   28e34:	7a23      	ldrb	r3, [r4, #8]
   28e36:	f36f 0341 	bfc	r3, #1, #1
   28e3a:	7223      	strb	r3, [r4, #8]
}
   28e3c:	4620      	mov	r0, r4
   28e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   28e42:	2d1c      	cmp	r5, #28
   28e44:	462f      	mov	r7, r5
   28e46:	bf28      	it	cs
   28e48:	271c      	movcs	r7, #28
		*prev_cont = cont;
   28e4a:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   28e4e:	4631      	mov	r1, r6
		cont->next = NULL;
   28e50:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   28e54:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   28e56:	463a      	mov	r2, r7
   28e58:	3004      	adds	r0, #4
   28e5a:	f001 fe1e 	bl	2aa9a <memcpy>
		data += chunk_length;
   28e5e:	443e      	add	r6, r7
		length -= chunk_length;
   28e60:	1bed      	subs	r5, r5, r7
   28e62:	e7d8      	b.n	28e16 <log_msg_hexdump_create+0x58>

00028e64 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   28e64:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   28e66:	2400      	movs	r4, #0
   28e68:	9400      	str	r4, [sp, #0]
   28e6a:	f7ff ff0e 	bl	28c8a <log_msg_hexdump_data_op>
}
   28e6e:	b002      	add	sp, #8
   28e70:	bd10      	pop	{r4, pc}

00028e72 <buffer_write>:
{
   28e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e74:	4606      	mov	r6, r0
   28e76:	460d      	mov	r5, r1
   28e78:	4614      	mov	r4, r2
   28e7a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   28e7c:	4621      	mov	r1, r4
   28e7e:	4628      	mov	r0, r5
   28e80:	463a      	mov	r2, r7
   28e82:	47b0      	blx	r6
	} while (len != 0);
   28e84:	1a24      	subs	r4, r4, r0
		buf += processed;
   28e86:	4405      	add	r5, r0
	} while (len != 0);
   28e88:	d1f8      	bne.n	28e7c <buffer_write+0xa>
}
   28e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028e8c <std_print>:
{
   28e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28e90:	b08e      	sub	sp, #56	; 0x38
   28e92:	af0e      	add	r7, sp, #56	; 0x38
   28e94:	4680      	mov	r8, r0
   28e96:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   28e98:	f7ff ff8f 	bl	28dba <log_msg_str_get>
   28e9c:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   28e9e:	4640      	mov	r0, r8
   28ea0:	f7ff ff56 	bl	28d50 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   28ea4:	0083      	lsls	r3, r0, #2
   28ea6:	3307      	adds	r3, #7
   28ea8:	f023 0307 	bic.w	r3, r3, #7
   28eac:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   28eb0:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   28eb2:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   28eb4:	f04f 0900 	mov.w	r9, #0
   28eb8:	45d1      	cmp	r9, sl
   28eba:	d116      	bne.n	28eea <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   28ebc:	4640      	mov	r0, r8
   28ebe:	f7ff ff47 	bl	28d50 <log_msg_nargs_get>
   28ec2:	280f      	cmp	r0, #15
   28ec4:	d81e      	bhi.n	28f04 <std_print+0x78>
   28ec6:	e8df f010 	tbh	[pc, r0, lsl #1]
   28eca:	0019      	.short	0x0019
   28ecc:	00260020 	.word	0x00260020
   28ed0:	0036002d 	.word	0x0036002d
   28ed4:	004e0041 	.word	0x004e0041
   28ed8:	006e005d 	.word	0x006e005d
   28edc:	00960081 	.word	0x00960081
   28ee0:	00c600ad 	.word	0x00c600ad
   28ee4:	00fe00e1 	.word	0x00fe00e1
   28ee8:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   28eea:	4649      	mov	r1, r9
   28eec:	4640      	mov	r0, r8
   28eee:	f7ff ff32 	bl	28d56 <log_msg_arg_get>
   28ef2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   28ef6:	f109 0901 	add.w	r9, r9, #1
   28efa:	e7dd      	b.n	28eb8 <std_print+0x2c>
		print_formatted(output, str);
   28efc:	4631      	mov	r1, r6
   28efe:	4628      	mov	r0, r5
   28f00:	f7e9 fd24 	bl	1294c <print_formatted>
}
   28f04:	46bd      	mov	sp, r7
   28f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   28f0a:	6822      	ldr	r2, [r4, #0]
   28f0c:	4631      	mov	r1, r6
   28f0e:	4628      	mov	r0, r5
   28f10:	f7e9 fd1c 	bl	1294c <print_formatted>
		break;
   28f14:	e7f6      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   28f16:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f1a:	4631      	mov	r1, r6
   28f1c:	4628      	mov	r0, r5
   28f1e:	f7e9 fd15 	bl	1294c <print_formatted>
		break;
   28f22:	e7ef      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   28f24:	68a3      	ldr	r3, [r4, #8]
   28f26:	9300      	str	r3, [sp, #0]
   28f28:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f2c:	4631      	mov	r1, r6
   28f2e:	4628      	mov	r0, r5
   28f30:	f7e9 fd0c 	bl	1294c <print_formatted>
		break;
   28f34:	e7e6      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   28f36:	68e3      	ldr	r3, [r4, #12]
   28f38:	9301      	str	r3, [sp, #4]
   28f3a:	68a3      	ldr	r3, [r4, #8]
   28f3c:	9300      	str	r3, [sp, #0]
   28f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f42:	4631      	mov	r1, r6
   28f44:	4628      	mov	r0, r5
   28f46:	f7e9 fd01 	bl	1294c <print_formatted>
		break;
   28f4a:	e7db      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   28f4c:	6923      	ldr	r3, [r4, #16]
   28f4e:	9302      	str	r3, [sp, #8]
   28f50:	68e3      	ldr	r3, [r4, #12]
   28f52:	9301      	str	r3, [sp, #4]
   28f54:	68a3      	ldr	r3, [r4, #8]
   28f56:	9300      	str	r3, [sp, #0]
   28f58:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f5c:	4631      	mov	r1, r6
   28f5e:	4628      	mov	r0, r5
   28f60:	f7e9 fcf4 	bl	1294c <print_formatted>
		break;
   28f64:	e7ce      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   28f66:	6963      	ldr	r3, [r4, #20]
   28f68:	9303      	str	r3, [sp, #12]
   28f6a:	6923      	ldr	r3, [r4, #16]
   28f6c:	9302      	str	r3, [sp, #8]
   28f6e:	68e3      	ldr	r3, [r4, #12]
   28f70:	9301      	str	r3, [sp, #4]
   28f72:	68a3      	ldr	r3, [r4, #8]
   28f74:	9300      	str	r3, [sp, #0]
   28f76:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f7a:	4631      	mov	r1, r6
   28f7c:	4628      	mov	r0, r5
   28f7e:	f7e9 fce5 	bl	1294c <print_formatted>
		break;
   28f82:	e7bf      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   28f84:	69a3      	ldr	r3, [r4, #24]
   28f86:	9304      	str	r3, [sp, #16]
   28f88:	6963      	ldr	r3, [r4, #20]
   28f8a:	9303      	str	r3, [sp, #12]
   28f8c:	6923      	ldr	r3, [r4, #16]
   28f8e:	9302      	str	r3, [sp, #8]
   28f90:	68e3      	ldr	r3, [r4, #12]
   28f92:	9301      	str	r3, [sp, #4]
   28f94:	68a3      	ldr	r3, [r4, #8]
   28f96:	9300      	str	r3, [sp, #0]
   28f98:	e9d4 2300 	ldrd	r2, r3, [r4]
   28f9c:	4631      	mov	r1, r6
   28f9e:	4628      	mov	r0, r5
   28fa0:	f7e9 fcd4 	bl	1294c <print_formatted>
		break;
   28fa4:	e7ae      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   28fa6:	69e3      	ldr	r3, [r4, #28]
   28fa8:	9305      	str	r3, [sp, #20]
   28faa:	69a3      	ldr	r3, [r4, #24]
   28fac:	9304      	str	r3, [sp, #16]
   28fae:	6963      	ldr	r3, [r4, #20]
   28fb0:	9303      	str	r3, [sp, #12]
   28fb2:	6923      	ldr	r3, [r4, #16]
   28fb4:	9302      	str	r3, [sp, #8]
   28fb6:	68e3      	ldr	r3, [r4, #12]
   28fb8:	9301      	str	r3, [sp, #4]
   28fba:	68a3      	ldr	r3, [r4, #8]
   28fbc:	9300      	str	r3, [sp, #0]
   28fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
   28fc2:	4631      	mov	r1, r6
   28fc4:	4628      	mov	r0, r5
   28fc6:	f7e9 fcc1 	bl	1294c <print_formatted>
		break;
   28fca:	e79b      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   28fcc:	6a23      	ldr	r3, [r4, #32]
   28fce:	9306      	str	r3, [sp, #24]
   28fd0:	69e3      	ldr	r3, [r4, #28]
   28fd2:	9305      	str	r3, [sp, #20]
   28fd4:	69a3      	ldr	r3, [r4, #24]
   28fd6:	9304      	str	r3, [sp, #16]
   28fd8:	6963      	ldr	r3, [r4, #20]
   28fda:	9303      	str	r3, [sp, #12]
   28fdc:	6923      	ldr	r3, [r4, #16]
   28fde:	9302      	str	r3, [sp, #8]
   28fe0:	68e3      	ldr	r3, [r4, #12]
   28fe2:	9301      	str	r3, [sp, #4]
   28fe4:	68a3      	ldr	r3, [r4, #8]
   28fe6:	9300      	str	r3, [sp, #0]
   28fe8:	e9d4 2300 	ldrd	r2, r3, [r4]
   28fec:	4631      	mov	r1, r6
   28fee:	4628      	mov	r0, r5
   28ff0:	f7e9 fcac 	bl	1294c <print_formatted>
		break;
   28ff4:	e786      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   28ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28ff8:	9307      	str	r3, [sp, #28]
   28ffa:	6a23      	ldr	r3, [r4, #32]
   28ffc:	9306      	str	r3, [sp, #24]
   28ffe:	69e3      	ldr	r3, [r4, #28]
   29000:	9305      	str	r3, [sp, #20]
   29002:	69a3      	ldr	r3, [r4, #24]
   29004:	9304      	str	r3, [sp, #16]
   29006:	6963      	ldr	r3, [r4, #20]
   29008:	9303      	str	r3, [sp, #12]
   2900a:	6923      	ldr	r3, [r4, #16]
   2900c:	9302      	str	r3, [sp, #8]
   2900e:	68e3      	ldr	r3, [r4, #12]
   29010:	9301      	str	r3, [sp, #4]
   29012:	68a3      	ldr	r3, [r4, #8]
   29014:	9300      	str	r3, [sp, #0]
   29016:	e9d4 2300 	ldrd	r2, r3, [r4]
   2901a:	4631      	mov	r1, r6
   2901c:	4628      	mov	r0, r5
   2901e:	f7e9 fc95 	bl	1294c <print_formatted>
		break;
   29022:	e76f      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29024:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29026:	9308      	str	r3, [sp, #32]
   29028:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2902a:	9307      	str	r3, [sp, #28]
   2902c:	6a23      	ldr	r3, [r4, #32]
   2902e:	9306      	str	r3, [sp, #24]
   29030:	69e3      	ldr	r3, [r4, #28]
   29032:	9305      	str	r3, [sp, #20]
   29034:	69a3      	ldr	r3, [r4, #24]
   29036:	9304      	str	r3, [sp, #16]
   29038:	6963      	ldr	r3, [r4, #20]
   2903a:	9303      	str	r3, [sp, #12]
   2903c:	6923      	ldr	r3, [r4, #16]
   2903e:	9302      	str	r3, [sp, #8]
   29040:	68e3      	ldr	r3, [r4, #12]
   29042:	9301      	str	r3, [sp, #4]
   29044:	68a3      	ldr	r3, [r4, #8]
   29046:	9300      	str	r3, [sp, #0]
   29048:	e9d4 2300 	ldrd	r2, r3, [r4]
   2904c:	4631      	mov	r1, r6
   2904e:	4628      	mov	r0, r5
   29050:	f7e9 fc7c 	bl	1294c <print_formatted>
		break;
   29054:	e756      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29056:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29058:	9309      	str	r3, [sp, #36]	; 0x24
   2905a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2905c:	9308      	str	r3, [sp, #32]
   2905e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29060:	9307      	str	r3, [sp, #28]
   29062:	6a23      	ldr	r3, [r4, #32]
   29064:	9306      	str	r3, [sp, #24]
   29066:	69e3      	ldr	r3, [r4, #28]
   29068:	9305      	str	r3, [sp, #20]
   2906a:	69a3      	ldr	r3, [r4, #24]
   2906c:	9304      	str	r3, [sp, #16]
   2906e:	6963      	ldr	r3, [r4, #20]
   29070:	9303      	str	r3, [sp, #12]
   29072:	6923      	ldr	r3, [r4, #16]
   29074:	9302      	str	r3, [sp, #8]
   29076:	68e3      	ldr	r3, [r4, #12]
   29078:	9301      	str	r3, [sp, #4]
   2907a:	68a3      	ldr	r3, [r4, #8]
   2907c:	9300      	str	r3, [sp, #0]
   2907e:	e9d4 2300 	ldrd	r2, r3, [r4]
   29082:	4631      	mov	r1, r6
   29084:	4628      	mov	r0, r5
   29086:	f7e9 fc61 	bl	1294c <print_formatted>
		break;
   2908a:	e73b      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2908c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2908e:	930a      	str	r3, [sp, #40]	; 0x28
   29090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29092:	9309      	str	r3, [sp, #36]	; 0x24
   29094:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29096:	9308      	str	r3, [sp, #32]
   29098:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2909a:	9307      	str	r3, [sp, #28]
   2909c:	6a23      	ldr	r3, [r4, #32]
   2909e:	9306      	str	r3, [sp, #24]
   290a0:	69e3      	ldr	r3, [r4, #28]
   290a2:	9305      	str	r3, [sp, #20]
   290a4:	69a3      	ldr	r3, [r4, #24]
   290a6:	9304      	str	r3, [sp, #16]
   290a8:	6963      	ldr	r3, [r4, #20]
   290aa:	9303      	str	r3, [sp, #12]
   290ac:	6923      	ldr	r3, [r4, #16]
   290ae:	9302      	str	r3, [sp, #8]
   290b0:	68e3      	ldr	r3, [r4, #12]
   290b2:	9301      	str	r3, [sp, #4]
   290b4:	68a3      	ldr	r3, [r4, #8]
   290b6:	9300      	str	r3, [sp, #0]
   290b8:	e9d4 2300 	ldrd	r2, r3, [r4]
   290bc:	4631      	mov	r1, r6
   290be:	4628      	mov	r0, r5
   290c0:	f7e9 fc44 	bl	1294c <print_formatted>
		break;
   290c4:	e71e      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   290c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   290c8:	930b      	str	r3, [sp, #44]	; 0x2c
   290ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   290cc:	930a      	str	r3, [sp, #40]	; 0x28
   290ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   290d0:	9309      	str	r3, [sp, #36]	; 0x24
   290d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   290d4:	9308      	str	r3, [sp, #32]
   290d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   290d8:	9307      	str	r3, [sp, #28]
   290da:	6a23      	ldr	r3, [r4, #32]
   290dc:	9306      	str	r3, [sp, #24]
   290de:	69e3      	ldr	r3, [r4, #28]
   290e0:	9305      	str	r3, [sp, #20]
   290e2:	69a3      	ldr	r3, [r4, #24]
   290e4:	9304      	str	r3, [sp, #16]
   290e6:	6963      	ldr	r3, [r4, #20]
   290e8:	9303      	str	r3, [sp, #12]
   290ea:	6923      	ldr	r3, [r4, #16]
   290ec:	9302      	str	r3, [sp, #8]
   290ee:	68e3      	ldr	r3, [r4, #12]
   290f0:	9301      	str	r3, [sp, #4]
   290f2:	68a3      	ldr	r3, [r4, #8]
   290f4:	9300      	str	r3, [sp, #0]
   290f6:	e9d4 2300 	ldrd	r2, r3, [r4]
   290fa:	4631      	mov	r1, r6
   290fc:	4628      	mov	r0, r5
   290fe:	f7e9 fc25 	bl	1294c <print_formatted>
		break;
   29102:	e6ff      	b.n	28f04 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29104:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29106:	930c      	str	r3, [sp, #48]	; 0x30
   29108:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2910a:	930b      	str	r3, [sp, #44]	; 0x2c
   2910c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2910e:	930a      	str	r3, [sp, #40]	; 0x28
   29110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29112:	9309      	str	r3, [sp, #36]	; 0x24
   29114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29116:	9308      	str	r3, [sp, #32]
   29118:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2911a:	9307      	str	r3, [sp, #28]
   2911c:	6a23      	ldr	r3, [r4, #32]
   2911e:	9306      	str	r3, [sp, #24]
   29120:	69e3      	ldr	r3, [r4, #28]
   29122:	9305      	str	r3, [sp, #20]
   29124:	69a3      	ldr	r3, [r4, #24]
   29126:	9304      	str	r3, [sp, #16]
   29128:	6963      	ldr	r3, [r4, #20]
   2912a:	9303      	str	r3, [sp, #12]
   2912c:	6923      	ldr	r3, [r4, #16]
   2912e:	9302      	str	r3, [sp, #8]
   29130:	68e3      	ldr	r3, [r4, #12]
   29132:	9301      	str	r3, [sp, #4]
   29134:	68a3      	ldr	r3, [r4, #8]
   29136:	9300      	str	r3, [sp, #0]
   29138:	e9d4 2300 	ldrd	r2, r3, [r4]
   2913c:	4631      	mov	r1, r6
   2913e:	4628      	mov	r0, r5
   29140:	f7e9 fc04 	bl	1294c <print_formatted>
}
   29144:	e6de      	b.n	28f04 <std_print+0x78>

00029146 <log_output_flush>:
		     output->control_block->offset,
   29146:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   29148:	6881      	ldr	r1, [r0, #8]
{
   2914a:	b510      	push	{r4, lr}
   2914c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2914e:	e9d2 2300 	ldrd	r2, r3, [r2]
   29152:	6800      	ldr	r0, [r0, #0]
   29154:	f7ff fe8d 	bl	28e72 <buffer_write>
	output->control_block->offset = 0;
   29158:	6863      	ldr	r3, [r4, #4]
   2915a:	2200      	movs	r2, #0
   2915c:	601a      	str	r2, [r3, #0]
}
   2915e:	bd10      	pop	{r4, pc}

00029160 <z_impl_flash_write>:
{
   29160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct flash_driver_api *api =
   29164:	6886      	ldr	r6, [r0, #8]
{
   29166:	4699      	mov	r9, r3
	if (api->write_protection != NULL) {
   29168:	68f3      	ldr	r3, [r6, #12]
{
   2916a:	4605      	mov	r5, r0
   2916c:	460f      	mov	r7, r1
   2916e:	4690      	mov	r8, r2
	if (api->write_protection != NULL) {
   29170:	b95b      	cbnz	r3, 2918a <z_impl_flash_write+0x2a>
	rc = api->write(dev, offset, data, len);
   29172:	6874      	ldr	r4, [r6, #4]
   29174:	464b      	mov	r3, r9
   29176:	4642      	mov	r2, r8
   29178:	4639      	mov	r1, r7
   2917a:	4628      	mov	r0, r5
   2917c:	47a0      	blx	r4
	if (api->write_protection != NULL) {
   2917e:	68f3      	ldr	r3, [r6, #12]
	rc = api->write(dev, offset, data, len);
   29180:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   29182:	b943      	cbnz	r3, 29196 <z_impl_flash_write+0x36>
}
   29184:	4620      	mov	r0, r4
   29186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
   2918a:	2100      	movs	r1, #0
   2918c:	4798      	blx	r3
		if (rc) {
   2918e:	4604      	mov	r4, r0
   29190:	2800      	cmp	r0, #0
   29192:	d0ee      	beq.n	29172 <z_impl_flash_write+0x12>
   29194:	e7f6      	b.n	29184 <z_impl_flash_write+0x24>
		(void) api->write_protection(dev, true);
   29196:	2101      	movs	r1, #1
   29198:	4628      	mov	r0, r5
   2919a:	4798      	blx	r3
   2919c:	e7f2      	b.n	29184 <z_impl_flash_write+0x24>

0002919e <nvs_flash_rd>:
{
   2919e:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   291a0:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   291a2:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   291a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   291a6:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   291a8:	fa16 f181 	uxtah	r1, r6, r1
   291ac:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   291b0:	6884      	ldr	r4, [r0, #8]
   291b2:	6824      	ldr	r4, [r4, #0]
   291b4:	46a4      	mov	ip, r4
}
   291b6:	bc70      	pop	{r4, r5, r6}
   291b8:	4760      	bx	ip

000291ba <nvs_flash_block_cmp>:
{
   291ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   291be:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   291c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   291c2:	681d      	ldr	r5, [r3, #0]
   291c4:	426d      	negs	r5, r5
{
   291c6:	b089      	sub	sp, #36	; 0x24
   291c8:	4681      	mov	r9, r0
   291ca:	460e      	mov	r6, r1
   291cc:	4617      	mov	r7, r2
	block_size =
   291ce:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   291d2:	b91c      	cbnz	r4, 291dc <nvs_flash_block_cmp+0x22>
	return 0;
   291d4:	4620      	mov	r0, r4
}
   291d6:	b009      	add	sp, #36	; 0x24
   291d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   291dc:	42ac      	cmp	r4, r5
   291de:	46a0      	mov	r8, r4
   291e0:	bf28      	it	cs
   291e2:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   291e4:	4643      	mov	r3, r8
   291e6:	466a      	mov	r2, sp
   291e8:	4631      	mov	r1, r6
   291ea:	4648      	mov	r0, r9
   291ec:	f7ff ffd7 	bl	2919e <nvs_flash_rd>
		if (rc) {
   291f0:	2800      	cmp	r0, #0
   291f2:	d1f0      	bne.n	291d6 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   291f4:	4642      	mov	r2, r8
   291f6:	4669      	mov	r1, sp
   291f8:	4638      	mov	r0, r7
   291fa:	f001 fc27 	bl	2aa4c <memcmp>
		if (rc) {
   291fe:	b920      	cbnz	r0, 2920a <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   29200:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   29204:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   29206:	4447      	add	r7, r8
   29208:	e7e3      	b.n	291d2 <nvs_flash_block_cmp+0x18>
			return 1;
   2920a:	2001      	movs	r0, #1
   2920c:	e7e3      	b.n	291d6 <nvs_flash_block_cmp+0x1c>

0002920e <nvs_flash_cmp_const>:
{
   2920e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29212:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   29214:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   29216:	681d      	ldr	r5, [r3, #0]
   29218:	426d      	negs	r5, r5
{
   2921a:	b088      	sub	sp, #32
	block_size =
   2921c:	f005 0520 	and.w	r5, r5, #32
{
   29220:	4607      	mov	r7, r0
   29222:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   29224:	4668      	mov	r0, sp
{
   29226:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   29228:	462a      	mov	r2, r5
   2922a:	f001 fc41 	bl	2aab0 <memset>
	while (len) {
   2922e:	b91c      	cbnz	r4, 29238 <nvs_flash_cmp_const+0x2a>
	return 0;
   29230:	4620      	mov	r0, r4
}
   29232:	b008      	add	sp, #32
   29234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   29238:	42ac      	cmp	r4, r5
   2923a:	46a0      	mov	r8, r4
   2923c:	bf28      	it	cs
   2923e:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   29240:	4643      	mov	r3, r8
   29242:	466a      	mov	r2, sp
   29244:	4631      	mov	r1, r6
   29246:	4638      	mov	r0, r7
   29248:	f7ff ffb7 	bl	291ba <nvs_flash_block_cmp>
		if (rc) {
   2924c:	2800      	cmp	r0, #0
   2924e:	d1f0      	bne.n	29232 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   29250:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   29254:	4446      	add	r6, r8
   29256:	e7ea      	b.n	2922e <nvs_flash_cmp_const+0x20>

00029258 <nvs_flash_erase_sector>:
{
   29258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2925c:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
   29260:	6806      	ldr	r6, [r0, #0]
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   29262:	6a87      	ldr	r7, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   29264:	ea4f 4811 	mov.w	r8, r1, lsr #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   29268:	0c09      	lsrs	r1, r1, #16
{
   2926a:	4605      	mov	r5, r0
	addr &= ADDR_SECT_MASK;
   2926c:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   29270:	fb0a 6601 	mla	r6, sl, r1, r6
	const struct flash_driver_api *api =
   29274:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   29278:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2927c:	b9b3      	cbnz	r3, 292ac <nvs_flash_erase_sector+0x54>
	rc = api->erase(dev, offset, size);
   2927e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   29282:	4652      	mov	r2, sl
   29284:	4631      	mov	r1, r6
   29286:	4638      	mov	r0, r7
   29288:	4798      	blx	r3
	if (api->write_protection != NULL) {
   2928a:	f8d9 300c 	ldr.w	r3, [r9, #12]
	rc = api->erase(dev, offset, size);
   2928e:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
   29290:	b9ab      	cbnz	r3, 292be <nvs_flash_erase_sector+0x66>
	if (rc) {
   29292:	b98c      	cbnz	r4, 292b8 <nvs_flash_erase_sector+0x60>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   29294:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   29296:	89ab      	ldrh	r3, [r5, #12]
   29298:	7912      	ldrb	r2, [r2, #4]
   2929a:	4641      	mov	r1, r8
   2929c:	4628      	mov	r0, r5
   2929e:	f7ff ffb6 	bl	2920e <nvs_flash_cmp_const>
		rc = -ENXIO;
   292a2:	1e04      	subs	r4, r0, #0
   292a4:	bf18      	it	ne
   292a6:	f06f 0405 	mvnne.w	r4, #5
   292aa:	e005      	b.n	292b8 <nvs_flash_erase_sector+0x60>
		rc = api->write_protection(dev, false);
   292ac:	2100      	movs	r1, #0
   292ae:	4638      	mov	r0, r7
   292b0:	4798      	blx	r3
		if (rc) {
   292b2:	4604      	mov	r4, r0
   292b4:	2800      	cmp	r0, #0
   292b6:	d0e2      	beq.n	2927e <nvs_flash_erase_sector+0x26>
}
   292b8:	4620      	mov	r0, r4
   292ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		(void) api->write_protection(dev, true);
   292be:	2101      	movs	r1, #1
   292c0:	4638      	mov	r0, r7
   292c2:	4798      	blx	r3
   292c4:	e7e5      	b.n	29292 <nvs_flash_erase_sector+0x3a>

000292c6 <nvs_ate_crc8_update>:
{
   292c6:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   292c8:	4601      	mov	r1, r0
{
   292ca:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   292cc:	2207      	movs	r2, #7
   292ce:	20ff      	movs	r0, #255	; 0xff
   292d0:	f7e7 feb2 	bl	11038 <crc8_ccitt>
	entry->crc8 = crc8;
   292d4:	71e0      	strb	r0, [r4, #7]
}
   292d6:	bd10      	pop	{r4, pc}

000292d8 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   292d8:	7800      	ldrb	r0, [r0, #0]
   292da:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   292dc:	bf81      	itttt	hi
   292de:	1809      	addhi	r1, r1, r0
   292e0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   292e4:	4240      	neghi	r0, r0
   292e6:	4001      	andhi	r1, r0
}
   292e8:	4608      	mov	r0, r1
   292ea:	4770      	bx	lr

000292ec <nvs_ate_valid>:
{
   292ec:	b570      	push	{r4, r5, r6, lr}
   292ee:	460c      	mov	r4, r1
   292f0:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   292f2:	2108      	movs	r1, #8
   292f4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   292f6:	f7ff ffef 	bl	292d8 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   292fa:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   292fc:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   292fe:	4621      	mov	r1, r4
   29300:	20ff      	movs	r0, #255	; 0xff
   29302:	f7e7 fe99 	bl	11038 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   29306:	79e3      	ldrb	r3, [r4, #7]
   29308:	4283      	cmp	r3, r0
   2930a:	d107      	bne.n	2931c <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2930c:	89a8      	ldrh	r0, [r5, #12]
   2930e:	8863      	ldrh	r3, [r4, #2]
   29310:	1b80      	subs	r0, r0, r6
	if ((nvs_ate_crc8_check(entry)) ||
   29312:	4283      	cmp	r3, r0
   29314:	bf2c      	ite	cs
   29316:	2000      	movcs	r0, #0
   29318:	2001      	movcc	r0, #1
}
   2931a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2931c:	2000      	movs	r0, #0
   2931e:	e7fc      	b.n	2931a <nvs_ate_valid+0x2e>

00029320 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   29320:	680b      	ldr	r3, [r1, #0]
   29322:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   29326:	0c1a      	lsrs	r2, r3, #16
   29328:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2932c:	bf08      	it	eq
   2932e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   29332:	600b      	str	r3, [r1, #0]
}
   29334:	4770      	bx	lr

00029336 <nvs_close_ate_valid>:
{
   29336:	b538      	push	{r3, r4, r5, lr}
   29338:	4605      	mov	r5, r0
   2933a:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2933c:	f7ff ffd6 	bl	292ec <nvs_ate_valid>
   29340:	b1a0      	cbz	r0, 2936c <nvs_close_ate_valid+0x36>
   29342:	88a0      	ldrh	r0, [r4, #4]
   29344:	b998      	cbnz	r0, 2936e <nvs_close_ate_valid+0x38>
   29346:	8822      	ldrh	r2, [r4, #0]
   29348:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2934c:	429a      	cmp	r2, r3
   2934e:	d10d      	bne.n	2936c <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   29350:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   29352:	2108      	movs	r1, #8
   29354:	f7ff ffc0 	bl	292d8 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   29358:	8862      	ldrh	r2, [r4, #2]
   2935a:	89ab      	ldrh	r3, [r5, #12]
   2935c:	1a9b      	subs	r3, r3, r2
   2935e:	fbb3 f2f0 	udiv	r2, r3, r0
   29362:	fb02 3010 	mls	r0, r2, r0, r3
   29366:	fab0 f080 	clz	r0, r0
   2936a:	0940      	lsrs	r0, r0, #5
}
   2936c:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2936e:	2000      	movs	r0, #0
   29370:	e7fc      	b.n	2936c <nvs_close_ate_valid+0x36>

00029372 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   29372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   29376:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   29378:	4605      	mov	r5, r0
	offset += addr & ADDR_OFFS_MASK;
   2937a:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2937c:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2937e:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   29380:	fa10 f181 	uxtah	r1, r0, r1
   29384:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   29388:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2938a:	681e      	ldr	r6, [r3, #0]
   2938c:	4276      	negs	r6, r6
	if (blen > 0) {
   2938e:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   29390:	b088      	sub	sp, #32
   29392:	4690      	mov	r8, r2
	if (blen > 0) {
   29394:	d008      	beq.n	293a8 <nvs_flash_al_wrt.part.0+0x36>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   29396:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return z_impl_flash_write(dev, offset, data, len);
   29398:	4633      	mov	r3, r6
   2939a:	4639      	mov	r1, r7
   2939c:	f7ff fee0 	bl	29160 <z_impl_flash_write>
		if (rc) {
   293a0:	b9b8      	cbnz	r0, 293d2 <nvs_flash_al_wrt.part.0+0x60>
		len -= blen;
   293a2:	1ba4      	subs	r4, r4, r6
		offset += blen;
   293a4:	4437      	add	r7, r6
		data8 += blen;
   293a6:	44b0      	add	r8, r6
	if (len) {
   293a8:	b1b4      	cbz	r4, 293d8 <nvs_flash_al_wrt.part.0+0x66>
		memcpy(buf, data8, len);
   293aa:	4622      	mov	r2, r4
   293ac:	4641      	mov	r1, r8
   293ae:	4668      	mov	r0, sp
   293b0:	f001 fb73 	bl	2aa9a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   293b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   293b6:	681a      	ldr	r2, [r3, #0]
   293b8:	7919      	ldrb	r1, [r3, #4]
   293ba:	1b12      	subs	r2, r2, r4
   293bc:	eb0d 0004 	add.w	r0, sp, r4
   293c0:	f001 fb76 	bl	2aab0 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   293c4:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   293c8:	681b      	ldr	r3, [r3, #0]
   293ca:	466a      	mov	r2, sp
   293cc:	4639      	mov	r1, r7
   293ce:	f7ff fec7 	bl	29160 <z_impl_flash_write>
}
   293d2:	b008      	add	sp, #32
   293d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
end:
   293d8:	4620      	mov	r0, r4
   293da:	e7fa      	b.n	293d2 <nvs_flash_al_wrt.part.0+0x60>

000293dc <nvs_flash_ate_wrt>:
{
   293dc:	b510      	push	{r4, lr}
   293de:	460a      	mov	r2, r1
	if (!len) {
   293e0:	2308      	movs	r3, #8
   293e2:	6841      	ldr	r1, [r0, #4]
{
   293e4:	4604      	mov	r4, r0
   293e6:	f7ff ffc4 	bl	29372 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   293ea:	2108      	movs	r1, #8
   293ec:	4603      	mov	r3, r0
   293ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   293f0:	f7ff ff72 	bl	292d8 <nvs_al_size.isra.0>
   293f4:	6862      	ldr	r2, [r4, #4]
   293f6:	1a12      	subs	r2, r2, r0
   293f8:	6062      	str	r2, [r4, #4]
}
   293fa:	4618      	mov	r0, r3
   293fc:	bd10      	pop	{r4, pc}

000293fe <nvs_add_gc_done_ate>:
{
   293fe:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   29400:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29404:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   29408:	2300      	movs	r3, #0
{
   2940a:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2940c:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   29410:	6883      	ldr	r3, [r0, #8]
   29412:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   29416:	4668      	mov	r0, sp
   29418:	f7ff ff55 	bl	292c6 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2941c:	4669      	mov	r1, sp
   2941e:	4620      	mov	r0, r4
   29420:	f7ff ffdc 	bl	293dc <nvs_flash_ate_wrt>
}
   29424:	b002      	add	sp, #8
   29426:	bd10      	pop	{r4, pc}

00029428 <nvs_prev_ate>:
{
   29428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2942a:	4605      	mov	r5, r0
   2942c:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2942e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   29430:	2108      	movs	r1, #8
   29432:	f7ff ff51 	bl	292d8 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   29436:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   29438:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2943a:	2308      	movs	r3, #8
   2943c:	4628      	mov	r0, r5
   2943e:	f7ff feae 	bl	2919e <nvs_flash_rd>
	if (rc) {
   29442:	4604      	mov	r4, r0
   29444:	2800      	cmp	r0, #0
   29446:	d138      	bne.n	294ba <nvs_prev_ate+0x92>
	*addr += ate_size;
   29448:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2944a:	89a8      	ldrh	r0, [r5, #12]
	*addr += ate_size;
   2944c:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2944e:	b29a      	uxth	r2, r3
   29450:	1bc7      	subs	r7, r0, r7
   29452:	42ba      	cmp	r2, r7
	*addr += ate_size;
   29454:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   29456:	d130      	bne.n	294ba <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   29458:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2945a:	bf03      	ittte	eq
   2945c:	89e9      	ldrheq	r1, [r5, #14]
   2945e:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   29462:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   29466:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2946a:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2946c:	2308      	movs	r3, #8
   2946e:	466a      	mov	r2, sp
   29470:	4628      	mov	r0, r5
   29472:	f7ff fe94 	bl	2919e <nvs_flash_rd>
	if (rc) {
   29476:	4604      	mov	r4, r0
   29478:	b9f8      	cbnz	r0, 294ba <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2947a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2947c:	466a      	mov	r2, sp
   2947e:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   29480:	4603      	mov	r3, r0
		if (data8[i] != value) {
   29482:	f812 0b01 	ldrb.w	r0, [r2], #1
   29486:	4281      	cmp	r1, r0
   29488:	d10c      	bne.n	294a4 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2948a:	3301      	adds	r3, #1
   2948c:	2b08      	cmp	r3, #8
   2948e:	d1f8      	bne.n	29482 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   29490:	686b      	ldr	r3, [r5, #4]
   29492:	e005      	b.n	294a0 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   29494:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   29496:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2949a:	0c1b      	lsrs	r3, r3, #16
   2949c:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2949e:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   294a0:	6033      	str	r3, [r6, #0]
		return 0;
   294a2:	e00a      	b.n	294ba <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   294a4:	4669      	mov	r1, sp
   294a6:	4628      	mov	r0, r5
   294a8:	f7ff ff45 	bl	29336 <nvs_close_ate_valid>
   294ac:	2800      	cmp	r0, #0
   294ae:	d1f1      	bne.n	29494 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   294b0:	4631      	mov	r1, r6
   294b2:	4628      	mov	r0, r5
   294b4:	f7e9 fd18 	bl	12ee8 <nvs_recover_last_ate>
   294b8:	4604      	mov	r4, r0
}
   294ba:	4620      	mov	r0, r4
   294bc:	b003      	add	sp, #12
   294be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000294c0 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   294c0:	2300      	movs	r3, #0
   294c2:	461a      	mov	r2, r3
   294c4:	f7e9 bff0 	b.w	134a8 <nvs_write>

000294c8 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   294c8:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   294ca:	2400      	movs	r4, #0
   294cc:	9400      	str	r4, [sp, #0]
   294ce:	f7ea f8cd 	bl	1366c <nvs_read_hist>
	return rc;
}
   294d2:	b002      	add	sp, #8
   294d4:	bd10      	pop	{r4, pc}

000294d6 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   294d6:	4770      	bx	lr

000294d8 <get_sectors_cb>:
{
   294d8:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   294da:	6802      	ldr	r2, [r0, #0]
   294dc:	684c      	ldr	r4, [r1, #4]
   294de:	42a2      	cmp	r2, r4
   294e0:	d316      	bcc.n	29510 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   294e2:	688b      	ldr	r3, [r1, #8]
   294e4:	4423      	add	r3, r4
   294e6:	429a      	cmp	r2, r3
   294e8:	d206      	bcs.n	294f8 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   294ea:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   294ee:	42ab      	cmp	r3, r5
   294f0:	d304      	bcc.n	294fc <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   294f2:	f06f 030b 	mvn.w	r3, #11
   294f6:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   294f8:	2000      	movs	r0, #0
   294fa:	e00a      	b.n	29512 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   294fc:	68cd      	ldr	r5, [r1, #12]
   294fe:	1b12      	subs	r2, r2, r4
   29500:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   29504:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   29508:	6842      	ldr	r2, [r0, #4]
   2950a:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   2950c:	3301      	adds	r3, #1
   2950e:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   29510:	2001      	movs	r0, #1
}
   29512:	bd70      	pop	{r4, r5, r6, pc}

00029514 <settings_load>:
	return settings_load_subtree(NULL);
   29514:	2000      	movs	r0, #0
   29516:	f7ea b99d 	b.w	13854 <settings_load_subtree>

0002951a <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2951a:	2200      	movs	r2, #0
   2951c:	4611      	mov	r1, r2
   2951e:	f7ea b95f 	b.w	137e0 <settings_save_one>

00029522 <settings_name_steq>:
{
   29522:	4603      	mov	r3, r0
   29524:	b530      	push	{r4, r5, lr}
   29526:	4608      	mov	r0, r1
	if (next) {
   29528:	b10a      	cbz	r2, 2952e <settings_name_steq+0xc>
		*next = NULL;
   2952a:	2100      	movs	r1, #0
   2952c:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2952e:	b163      	cbz	r3, 2954a <settings_name_steq+0x28>
   29530:	b190      	cbz	r0, 29558 <settings_name_steq+0x36>
   29532:	1e41      	subs	r1, r0, #1
   29534:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   29536:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   2953a:	4604      	mov	r4, r0
   2953c:	f810 3b01 	ldrb.w	r3, [r0], #1
   29540:	b15d      	cbz	r5, 2955a <settings_name_steq+0x38>
   29542:	429d      	cmp	r5, r3
   29544:	d101      	bne.n	2954a <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   29546:	2d3d      	cmp	r5, #61	; 0x3d
   29548:	d1f5      	bne.n	29536 <settings_name_steq+0x14>
	return 0;
   2954a:	2000      	movs	r0, #0
   2954c:	e004      	b.n	29558 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2954e:	2b3d      	cmp	r3, #61	; 0x3d
   29550:	d008      	beq.n	29564 <settings_name_steq+0x42>
   29552:	fab3 f083 	clz	r0, r3
   29556:	0940      	lsrs	r0, r0, #5
}
   29558:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2955a:	2b2f      	cmp	r3, #47	; 0x2f
   2955c:	d1f7      	bne.n	2954e <settings_name_steq+0x2c>
		if (next) {
   2955e:	b10a      	cbz	r2, 29564 <settings_name_steq+0x42>
			*next = name + 1;
   29560:	3401      	adds	r4, #1
   29562:	6014      	str	r4, [r2, #0]
		return 1;
   29564:	2001      	movs	r0, #1
   29566:	e7f7      	b.n	29558 <settings_name_steq+0x36>

00029568 <settings_name_next>:
{
   29568:	b530      	push	{r4, r5, lr}
   2956a:	4603      	mov	r3, r0
	if (next) {
   2956c:	b109      	cbz	r1, 29572 <settings_name_next+0xa>
		*next = NULL;
   2956e:	2200      	movs	r2, #0
   29570:	600a      	str	r2, [r1, #0]
	if (!name) {
   29572:	b16b      	cbz	r3, 29590 <settings_name_next+0x28>
   29574:	461a      	mov	r2, r3
   29576:	4614      	mov	r4, r2
   29578:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2957a:	f812 5b01 	ldrb.w	r5, [r2], #1
   2957e:	b135      	cbz	r5, 2958e <settings_name_next+0x26>
   29580:	2d3d      	cmp	r5, #61	; 0x3d
   29582:	d004      	beq.n	2958e <settings_name_next+0x26>
   29584:	2d2f      	cmp	r5, #47	; 0x2f
   29586:	d1f6      	bne.n	29576 <settings_name_next+0xe>
		if (next) {
   29588:	b109      	cbz	r1, 2958e <settings_name_next+0x26>
			*next = name + 1;
   2958a:	3401      	adds	r4, #1
   2958c:	600c      	str	r4, [r1, #0]
}
   2958e:	bd30      	pop	{r4, r5, pc}
		return 0;
   29590:	4618      	mov	r0, r3
   29592:	e7fc      	b.n	2958e <settings_name_next+0x26>

00029594 <settings_nvs_read_fn>:
{
   29594:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   29596:	4613      	mov	r3, r2
{
   29598:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2959a:	460a      	mov	r2, r1
   2959c:	8881      	ldrh	r1, [r0, #4]
   2959e:	6800      	ldr	r0, [r0, #0]
   295a0:	f7ff ff92 	bl	294c8 <nvs_read>
}
   295a4:	42a0      	cmp	r0, r4
   295a6:	bfa8      	it	ge
   295a8:	4620      	movge	r0, r4
   295aa:	bd10      	pop	{r4, pc}

000295ac <settings_nvs_save>:
{
   295ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295b0:	b097      	sub	sp, #92	; 0x5c
   295b2:	4604      	mov	r4, r0
   295b4:	9201      	str	r2, [sp, #4]
   295b6:	469b      	mov	fp, r3
	if (!name) {
   295b8:	4689      	mov	r9, r1
   295ba:	2900      	cmp	r1, #0
   295bc:	d069      	beq.n	29692 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   295be:	b1da      	cbz	r2, 295f8 <settings_nvs_save+0x4c>
   295c0:	fabb f78b 	clz	r7, fp
   295c4:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   295c6:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   295c8:	3501      	adds	r5, #1
   295ca:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   295cc:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   295ce:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   295d2:	1e6e      	subs	r6, r5, #1
   295d4:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   295d6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   295da:	d02e      	beq.n	2963a <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   295dc:	234a      	movs	r3, #74	; 0x4a
   295de:	aa03      	add	r2, sp, #12
   295e0:	4631      	mov	r1, r6
   295e2:	4650      	mov	r0, sl
   295e4:	f7ff ff70 	bl	294c8 <nvs_read>
		if (rc < 0) {
   295e8:	2800      	cmp	r0, #0
   295ea:	da07      	bge.n	295fc <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   295ec:	f110 0f02 	cmn.w	r0, #2
   295f0:	bf08      	it	eq
   295f2:	46b0      	moveq	r8, r6
   295f4:	4635      	mov	r5, r6
   295f6:	e7ec      	b.n	295d2 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   295f8:	2701      	movs	r7, #1
   295fa:	e7e4      	b.n	295c6 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   295fc:	ab16      	add	r3, sp, #88	; 0x58
   295fe:	4418      	add	r0, r3
   29600:	2300      	movs	r3, #0
   29602:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   29606:	a903      	add	r1, sp, #12
   29608:	4648      	mov	r0, r9
   2960a:	f001 f9fb 	bl	2aa04 <strcmp>
   2960e:	2800      	cmp	r0, #0
   29610:	d1f0      	bne.n	295f4 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   29612:	2f00      	cmp	r7, #0
   29614:	d03b      	beq.n	2968e <settings_nvs_save+0xe2>
   29616:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   29618:	42b3      	cmp	r3, r6
   2961a:	d142      	bne.n	296a2 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   2961c:	4622      	mov	r2, r4
   2961e:	1e73      	subs	r3, r6, #1
   29620:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   29624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29628:	2302      	movs	r3, #2
   2962a:	4650      	mov	r0, sl
   2962c:	f7e9 ff3c 	bl	134a8 <nvs_write>
			if (rc < 0) {
   29630:	2800      	cmp	r0, #0
   29632:	da36      	bge.n	296a2 <settings_nvs_save+0xf6>
}
   29634:	b017      	add	sp, #92	; 0x5c
   29636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2963a:	bb6f      	cbnz	r7, 29698 <settings_nvs_save+0xec>
	write_name = true;
   2963c:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2963e:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   29642:	d02b      	beq.n	2969c <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   29644:	f104 0508 	add.w	r5, r4, #8
   29648:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2964c:	9a01      	ldr	r2, [sp, #4]
   2964e:	465b      	mov	r3, fp
   29650:	b289      	uxth	r1, r1
   29652:	4628      	mov	r0, r5
   29654:	f7e9 ff28 	bl	134a8 <nvs_write>
	if (rc < 0) {
   29658:	2800      	cmp	r0, #0
   2965a:	dbeb      	blt.n	29634 <settings_nvs_save+0x88>
	if (write_name) {
   2965c:	b157      	cbz	r7, 29674 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2965e:	4648      	mov	r0, r9
   29660:	f001 f9c0 	bl	2a9e4 <strlen>
   29664:	464a      	mov	r2, r9
   29666:	4603      	mov	r3, r0
   29668:	4641      	mov	r1, r8
   2966a:	4628      	mov	r0, r5
   2966c:	f7e9 ff1c 	bl	134a8 <nvs_write>
		if (rc < 0) {
   29670:	2800      	cmp	r0, #0
   29672:	dbdf      	blt.n	29634 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   29674:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   29676:	4543      	cmp	r3, r8
   29678:	d220      	bcs.n	296bc <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   2967a:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2967c:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2967e:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   29682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29686:	4628      	mov	r0, r5
   29688:	f7e9 ff0e 	bl	134a8 <nvs_write>
   2968c:	e016      	b.n	296bc <settings_nvs_save+0x110>
   2968e:	46b0      	mov	r8, r6
   29690:	e7d5      	b.n	2963e <settings_nvs_save+0x92>
		return -EINVAL;
   29692:	f06f 0015 	mvn.w	r0, #21
   29696:	e7cd      	b.n	29634 <settings_nvs_save+0x88>
		return 0;
   29698:	2000      	movs	r0, #0
   2969a:	e7cb      	b.n	29634 <settings_nvs_save+0x88>
		return -ENOMEM;
   2969c:	f06f 000b 	mvn.w	r0, #11
   296a0:	e7c8      	b.n	29634 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   296a2:	4631      	mov	r1, r6
   296a4:	4650      	mov	r0, sl
   296a6:	f7ff ff0b 	bl	294c0 <nvs_delete>
			if (rc >= 0) {
   296aa:	2800      	cmp	r0, #0
   296ac:	dbc2      	blt.n	29634 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   296ae:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   296b2:	313f      	adds	r1, #63	; 0x3f
   296b4:	b289      	uxth	r1, r1
   296b6:	4650      	mov	r0, sl
   296b8:	f7ff ff02 	bl	294c0 <nvs_delete>
	if (rc < 0) {
   296bc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   296c0:	e7b8      	b.n	29634 <settings_nvs_save+0x88>

000296c2 <settings_nvs_backend_init>:
{
   296c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   296c4:	f100 0608 	add.w	r6, r0, #8
   296c8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   296ca:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   296cc:	4630      	mov	r0, r6
   296ce:	f7e9 fd0d 	bl	130ec <nvs_init>
	if (rc) {
   296d2:	4605      	mov	r5, r0
   296d4:	b970      	cbnz	r0, 296f4 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   296d6:	2302      	movs	r3, #2
   296d8:	f10d 0206 	add.w	r2, sp, #6
   296dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   296e0:	4630      	mov	r0, r6
   296e2:	f7ff fef1 	bl	294c8 <nvs_read>
	if (rc < 0) {
   296e6:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   296e8:	bfac      	ite	ge
   296ea:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   296ee:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   296f2:	8723      	strh	r3, [r4, #56]	; 0x38
}
   296f4:	4628      	mov	r0, r5
   296f6:	b002      	add	sp, #8
   296f8:	bd70      	pop	{r4, r5, r6, pc}

000296fa <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   296fa:	2200      	movs	r2, #0
   296fc:	e9c0 2200 	strd	r2, r2, [r0]
   29700:	6082      	str	r2, [r0, #8]
}
   29702:	4770      	bx	lr

00029704 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   29704:	b538      	push	{r3, r4, r5, lr}
   29706:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   29708:	42ab      	cmp	r3, r5
{
   2970a:	4611      	mov	r1, r2
   2970c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2970e:	d804      	bhi.n	2971a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   29710:	461a      	mov	r2, r3
   29712:	f001 f9c2 	bl	2aa9a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   29716:	4620      	mov	r0, r4
   29718:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2971a:	2400      	movs	r4, #0
   2971c:	e7fb      	b.n	29716 <_copy+0x12>

0002971e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2971e:	f001 b9c7 	b.w	2aab0 <memset>

00029722 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   29722:	09c3      	lsrs	r3, r0, #7
   29724:	005a      	lsls	r2, r3, #1
   29726:	4413      	add	r3, r2
   29728:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2972c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   29730:	b2c0      	uxtb	r0, r0
   29732:	4770      	bx	lr

00029734 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   29734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29738:	4606      	mov	r6, r0
   2973a:	b0a9      	sub	sp, #164	; 0xa4
   2973c:	4688      	mov	r8, r1
   2973e:	4614      	mov	r4, r2
   29740:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   29742:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   29746:	f7ea fbeb 	bl	13f20 <uECC_get_rng>
		if (!rng_function ||
   2974a:	4603      	mov	r3, r0
   2974c:	2800      	cmp	r0, #0
   2974e:	d03e      	beq.n	297ce <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   29750:	2140      	movs	r1, #64	; 0x40
   29752:	a808      	add	r0, sp, #32
   29754:	4798      	blx	r3
		if (!rng_function ||
   29756:	b3d0      	cbz	r0, 297ce <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   29758:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2975c:	f112 031f 	adds.w	r3, r2, #31
   29760:	bf48      	it	mi
   29762:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   29766:	466d      	mov	r5, sp
   29768:	464a      	mov	r2, r9
   2976a:	a908      	add	r1, sp, #32
   2976c:	4628      	mov	r0, r5
   2976e:	f343 1347 	sbfx	r3, r3, #5, #8
   29772:	f000 fa03 	bl	29b7c <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   29776:	4622      	mov	r2, r4
   29778:	4629      	mov	r1, r5
   2977a:	a818      	add	r0, sp, #96	; 0x60
   2977c:	f000 fe19 	bl	2a3b2 <EccPoint_compute_public_key>
   29780:	b318      	cbz	r0, 297ca <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   29782:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   29786:	1dd9      	adds	r1, r3, #7
   29788:	bf48      	it	mi
   2978a:	f103 010e 	addmi.w	r1, r3, #14
   2978e:	462a      	mov	r2, r5
   29790:	4640      	mov	r0, r8
   29792:	10c9      	asrs	r1, r1, #3
   29794:	f000 fe35 	bl	2a402 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   29798:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2979c:	aa18      	add	r2, sp, #96	; 0x60
   2979e:	4630      	mov	r0, r6
   297a0:	f000 fe2f 	bl	2a402 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   297a4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   297a8:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   297ac:	ab18      	add	r3, sp, #96	; 0x60
   297ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   297b2:	1870      	adds	r0, r6, r1
   297b4:	f000 fe25 	bl	2a402 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   297b8:	2220      	movs	r2, #32
   297ba:	2100      	movs	r1, #0
   297bc:	4628      	mov	r0, r5
   297be:	f001 f977 	bl	2aab0 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   297c2:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   297c4:	b029      	add	sp, #164	; 0xa4
   297c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   297ca:	3f01      	subs	r7, #1
   297cc:	d1bb      	bne.n	29746 <uECC_make_key+0x12>
        		return 0;
   297ce:	2000      	movs	r0, #0
   297d0:	e7f8      	b.n	297c4 <uECC_make_key+0x90>

000297d2 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   297d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   297d6:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   297d8:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   297dc:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   297e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   297e4:	b0a4      	sub	sp, #144	; 0x90
   297e6:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   297e8:	1dda      	adds	r2, r3, #7
   297ea:	bf48      	it	mi
   297ec:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   297f0:	ad04      	add	r5, sp, #16
{
   297f2:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   297f4:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   297f6:	4628      	mov	r0, r5
   297f8:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   297fa:	9502      	str	r5, [sp, #8]
   297fc:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   297fe:	f000 fe14 	bl	2a42a <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   29802:	463a      	mov	r2, r7
   29804:	4649      	mov	r1, r9
   29806:	a814      	add	r0, sp, #80	; 0x50
   29808:	f000 fe0f 	bl	2a42a <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2980c:	ab14      	add	r3, sp, #80	; 0x50
   2980e:	eb09 0107 	add.w	r1, r9, r7
   29812:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   29816:	463a      	mov	r2, r7
   29818:	f000 fe07 	bl	2a42a <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2981c:	4623      	mov	r3, r4
   2981e:	4632      	mov	r2, r6
   29820:	4629      	mov	r1, r5
   29822:	4628      	mov	r0, r5
   29824:	f000 fd99 	bl	2a35a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   29828:	fab0 f080 	clz	r0, r0
   2982c:	9401      	str	r4, [sp, #4]
   2982e:	ab24      	add	r3, sp, #144	; 0x90
   29830:	0940      	lsrs	r0, r0, #5
   29832:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   29836:	8863      	ldrh	r3, [r4, #2]
   29838:	3301      	adds	r3, #1
   2983a:	b21b      	sxth	r3, r3
   2983c:	9300      	str	r3, [sp, #0]
   2983e:	a914      	add	r1, sp, #80	; 0x50
   29840:	2300      	movs	r3, #0
   29842:	f850 2c88 	ldr.w	r2, [r0, #-136]
   29846:	4608      	mov	r0, r1
   29848:	f000 fcb8 	bl	2a1bc <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2984c:	aa14      	add	r2, sp, #80	; 0x50
   2984e:	4639      	mov	r1, r7
   29850:	4640      	mov	r0, r8
   29852:	f000 fdd6 	bl	2a402 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   29856:	4621      	mov	r1, r4
   29858:	a814      	add	r0, sp, #80	; 0x50
   2985a:	f000 fc24 	bl	2a0a6 <EccPoint_isZero>
   2985e:	af02      	add	r7, sp, #8
   29860:	4604      	mov	r4, r0
   29862:	2208      	movs	r2, #8
   29864:	2100      	movs	r1, #0
   29866:	4638      	mov	r0, r7
   29868:	f001 f922 	bl	2aab0 <memset>
   2986c:	2220      	movs	r2, #32
   2986e:	2100      	movs	r1, #0
   29870:	4630      	mov	r0, r6
   29872:	f001 f91d 	bl	2aab0 <memset>
   29876:	2220      	movs	r2, #32
   29878:	2100      	movs	r1, #0
   2987a:	4628      	mov	r0, r5
   2987c:	f001 f918 	bl	2aab0 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   29880:	fab4 f084 	clz	r0, r4
   29884:	0940      	lsrs	r0, r0, #5
   29886:	b024      	add	sp, #144	; 0x90
   29888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002988c <uECC_vli_add>:
{
   2988c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   2988e:	2400      	movs	r4, #0
{
   29890:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   29892:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   29894:	b265      	sxtb	r5, r4
   29896:	42ab      	cmp	r3, r5
   29898:	dc00      	bgt.n	2989c <uECC_vli_add+0x10>
}
   2989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   2989c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   298a0:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   298a4:	443d      	add	r5, r7
   298a6:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   298a8:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   298aa:	bf8c      	ite	hi
   298ac:	2701      	movhi	r7, #1
   298ae:	2700      	movls	r7, #0
		result[i] = sum;
   298b0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   298b4:	bf18      	it	ne
   298b6:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   298b8:	3401      	adds	r4, #1
   298ba:	e7eb      	b.n	29894 <uECC_vli_add+0x8>

000298bc <uECC_vli_rshift1>:
	vli += num_words;
   298bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   298c0:	2300      	movs	r3, #0
	while (vli-- > end) {
   298c2:	4288      	cmp	r0, r1
   298c4:	d300      	bcc.n	298c8 <uECC_vli_rshift1+0xc>
}
   298c6:	4770      	bx	lr
		uECC_word_t temp = *vli;
   298c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   298cc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   298d0:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   298d2:	07d3      	lsls	r3, r2, #31
   298d4:	e7f5      	b.n	298c2 <uECC_vli_rshift1+0x6>

000298d6 <vli_modInv_update>:
	if (!EVEN(uv)) {
   298d6:	6803      	ldr	r3, [r0, #0]
{
   298d8:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   298da:	f013 0601 	ands.w	r6, r3, #1
{
   298de:	4605      	mov	r5, r0
   298e0:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   298e2:	d005      	beq.n	298f0 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   298e4:	4613      	mov	r3, r2
   298e6:	460a      	mov	r2, r1
   298e8:	4601      	mov	r1, r0
   298ea:	f7ff ffcf 	bl	2988c <uECC_vli_add>
   298ee:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   298f0:	4621      	mov	r1, r4
   298f2:	4628      	mov	r0, r5
   298f4:	f7ff ffe2 	bl	298bc <uECC_vli_rshift1>
	if (carry) {
   298f8:	b146      	cbz	r6, 2990c <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   298fa:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   298fe:	3a01      	subs	r2, #1
   29900:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   29904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   29908:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   2990c:	bd70      	pop	{r4, r5, r6, pc}

0002990e <uECC_vli_mult>:
{
   2990e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   29912:	2500      	movs	r5, #0
{
   29914:	b087      	sub	sp, #28
   29916:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   2991a:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   2991c:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   2991e:	fa4f f885 	sxtb.w	r8, r5
   29922:	4543      	cmp	r3, r8
   29924:	dc16      	bgt.n	29954 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   29926:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2992a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   2992e:	9502      	str	r5, [sp, #8]
   29930:	f04f 0a00 	mov.w	sl, #0
   29934:	9e02      	ldr	r6, [sp, #8]
   29936:	fa53 fe8a 	uxtab	lr, r3, sl
   2993a:	fa4f fe8e 	sxtb.w	lr, lr
   2993e:	45b6      	cmp	lr, r6
   29940:	fa5f f58a 	uxtb.w	r5, sl
   29944:	db2d      	blt.n	299a2 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   29946:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2994a:	f840 2c04 	str.w	r2, [r0, #-4]
}
   2994e:	b007      	add	sp, #28
   29950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29954:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   29956:	f04f 0c00 	mov.w	ip, #0
   2995a:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   2995e:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   29960:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   29964:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   29966:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2996a:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   2996e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   29972:	fba7 ab06 	umull	sl, fp, r7, r6
   29976:	eb1a 0601 	adds.w	r6, sl, r1
   2997a:	f10c 0c01 	add.w	ip, ip, #1
   2997e:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   29982:	fa4f fa8c 	sxtb.w	sl, ip
   29986:	bf2c      	ite	cs
   29988:	2201      	movcs	r2, #1
   2998a:	2200      	movcc	r2, #0
   2998c:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   2998e:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   29990:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   29992:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   29994:	dde4      	ble.n	29960 <uECC_vli_mult+0x52>
		result[k] = r0;
   29996:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   2999a:	463a      	mov	r2, r7
   2999c:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   2999e:	4674      	mov	r4, lr
   299a0:	e7bd      	b.n	2991e <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   299a2:	3501      	adds	r5, #1
   299a4:	9900      	ldr	r1, [sp, #0]
   299a6:	9e01      	ldr	r6, [sp, #4]
   299a8:	fa4f fc85 	sxtb.w	ip, r5
   299ac:	ebae 0b0c 	sub.w	fp, lr, ip
   299b0:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   299b4:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   299b8:	4621      	mov	r1, r4
   299ba:	2400      	movs	r4, #0
   299bc:	459c      	cmp	ip, r3
   299be:	db05      	blt.n	299cc <uECC_vli_mult+0xbe>
		result[k] = r0;
   299c0:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   299c4:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   299c8:	460a      	mov	r2, r1
   299ca:	e7b3      	b.n	29934 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   299cc:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   299d0:	f855 7b04 	ldr.w	r7, [r5], #4
   299d4:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   299d8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   299dc:	fba7 6706 	umull	r6, r7, r7, r6
   299e0:	eb16 0801 	adds.w	r8, r6, r1
   299e4:	eb57 0902 	adcs.w	r9, r7, r2
   299e8:	bf2c      	ite	cs
   299ea:	2201      	movcs	r2, #1
   299ec:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   299ee:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   299f2:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   299f4:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   299f6:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   299f8:	fa4f fc8c 	sxtb.w	ip, ip
   299fc:	e7de      	b.n	299bc <uECC_vli_mult+0xae>

000299fe <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   299fe:	2300      	movs	r3, #0
{
   29a00:	b510      	push	{r4, lr}
		 vli[i] = 0;
   29a02:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   29a04:	b25a      	sxtb	r2, r3
   29a06:	4291      	cmp	r1, r2
   29a08:	dc00      	bgt.n	29a0c <uECC_vli_clear+0xe>
}
   29a0a:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   29a0c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   29a10:	3301      	adds	r3, #1
   29a12:	e7f7      	b.n	29a04 <uECC_vli_clear+0x6>

00029a14 <uECC_vli_isZero>:
{
   29a14:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   29a16:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   29a18:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   29a1a:	b25c      	sxtb	r4, r3
   29a1c:	42a1      	cmp	r1, r4
   29a1e:	dc03      	bgt.n	29a28 <uECC_vli_isZero+0x14>
}
   29a20:	fab2 f082 	clz	r0, r2
   29a24:	0940      	lsrs	r0, r0, #5
   29a26:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   29a28:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   29a2c:	3301      	adds	r3, #1
   29a2e:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   29a30:	e7f3      	b.n	29a1a <uECC_vli_isZero+0x6>

00029a32 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   29a32:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   29a34:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   29a36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   29a3a:	f001 011f 	and.w	r1, r1, #31
   29a3e:	fa03 f101 	lsl.w	r1, r3, r1
}
   29a42:	4008      	ands	r0, r1
   29a44:	4770      	bx	lr

00029a46 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   29a46:	3901      	subs	r1, #1
   29a48:	b24b      	sxtb	r3, r1
{
   29a4a:	4602      	mov	r2, r0
   29a4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   29a50:	2b00      	cmp	r3, #0
   29a52:	da03      	bge.n	29a5c <uECC_vli_numBits+0x16>
	return (i + 1);
   29a54:	3301      	adds	r3, #1
   29a56:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   29a58:	b938      	cbnz	r0, 29a6a <uECC_vli_numBits+0x24>
   29a5a:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   29a5c:	f851 0904 	ldr.w	r0, [r1], #-4
   29a60:	2800      	cmp	r0, #0
   29a62:	d1f7      	bne.n	29a54 <uECC_vli_numBits+0xe>
   29a64:	3b01      	subs	r3, #1
   29a66:	b25b      	sxtb	r3, r3
   29a68:	e7f2      	b.n	29a50 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   29a6a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   29a6e:	3b01      	subs	r3, #1
   29a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   29a74:	2300      	movs	r3, #0
   29a76:	b922      	cbnz	r2, 29a82 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   29a78:	3801      	subs	r0, #1
   29a7a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   29a7e:	b200      	sxth	r0, r0
}
   29a80:	4770      	bx	lr
		digit >>= 1;
   29a82:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   29a84:	3301      	adds	r3, #1
   29a86:	e7f6      	b.n	29a76 <uECC_vli_numBits+0x30>

00029a88 <uECC_vli_set>:
{
   29a88:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   29a8a:	2300      	movs	r3, #0
   29a8c:	b25c      	sxtb	r4, r3
   29a8e:	42a2      	cmp	r2, r4
   29a90:	dc00      	bgt.n	29a94 <uECC_vli_set+0xc>
}
   29a92:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   29a94:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   29a98:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   29a9c:	3301      	adds	r3, #1
   29a9e:	e7f5      	b.n	29a8c <uECC_vli_set+0x4>

00029aa0 <uECC_vli_cmp_unsafe>:
{
   29aa0:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   29aa2:	3a01      	subs	r2, #1
   29aa4:	b253      	sxtb	r3, r2
   29aa6:	009a      	lsls	r2, r3, #2
   29aa8:	2b00      	cmp	r3, #0
   29aaa:	da01      	bge.n	29ab0 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   29aac:	2000      	movs	r0, #0
}
   29aae:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   29ab0:	5885      	ldr	r5, [r0, r2]
   29ab2:	588c      	ldr	r4, [r1, r2]
   29ab4:	42a5      	cmp	r5, r4
   29ab6:	d805      	bhi.n	29ac4 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   29ab8:	f1a2 0204 	sub.w	r2, r2, #4
   29abc:	d304      	bcc.n	29ac8 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   29abe:	3b01      	subs	r3, #1
   29ac0:	b25b      	sxtb	r3, r3
   29ac2:	e7f1      	b.n	29aa8 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   29ac4:	2001      	movs	r0, #1
   29ac6:	e7f2      	b.n	29aae <uECC_vli_cmp_unsafe+0xe>
			return -1;
   29ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29acc:	e7ef      	b.n	29aae <uECC_vli_cmp_unsafe+0xe>

00029ace <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   29ace:	3a01      	subs	r2, #1
   29ad0:	b253      	sxtb	r3, r2
{
   29ad2:	b570      	push	{r4, r5, r6, lr}
   29ad4:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   29ad6:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   29ad8:	2b00      	cmp	r3, #0
   29ada:	da03      	bge.n	29ae4 <uECC_vli_equal+0x16>
}
   29adc:	1e20      	subs	r0, r4, #0
   29ade:	bf18      	it	ne
   29ae0:	2001      	movne	r0, #1
   29ae2:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   29ae4:	5885      	ldr	r5, [r0, r2]
   29ae6:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   29ae8:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   29aea:	4075      	eors	r5, r6
   29aec:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   29aee:	b25b      	sxtb	r3, r3
   29af0:	3a04      	subs	r2, #4
   29af2:	e7f1      	b.n	29ad8 <uECC_vli_equal+0xa>

00029af4 <uECC_vli_sub>:
{
   29af4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   29af6:	2400      	movs	r4, #0
{
   29af8:	4606      	mov	r6, r0
   29afa:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   29afc:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   29afe:	b265      	sxtb	r5, r4
   29b00:	45ac      	cmp	ip, r5
   29b02:	dc00      	bgt.n	29b06 <uECC_vli_sub+0x12>
}
   29b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   29b06:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   29b0a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   29b0e:	1a3d      	subs	r5, r7, r0
   29b10:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   29b12:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   29b14:	bf34      	ite	cc
   29b16:	2701      	movcc	r7, #1
   29b18:	2700      	movcs	r7, #0
		result[i] = diff;
   29b1a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   29b1e:	bf18      	it	ne
   29b20:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   29b22:	3401      	adds	r4, #1
   29b24:	e7eb      	b.n	29afe <uECC_vli_sub+0xa>

00029b26 <uECC_vli_modAdd>:
{
   29b26:	b570      	push	{r4, r5, r6, lr}
   29b28:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   29b2c:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   29b2e:	4633      	mov	r3, r6
{
   29b30:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   29b32:	f7ff feab 	bl	2988c <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   29b36:	b930      	cbnz	r0, 29b46 <uECC_vli_modAdd+0x20>
   29b38:	4632      	mov	r2, r6
   29b3a:	4621      	mov	r1, r4
   29b3c:	4628      	mov	r0, r5
   29b3e:	f7ff ffaf 	bl	29aa0 <uECC_vli_cmp_unsafe>
   29b42:	2801      	cmp	r0, #1
   29b44:	d007      	beq.n	29b56 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   29b46:	4633      	mov	r3, r6
   29b48:	462a      	mov	r2, r5
   29b4a:	4621      	mov	r1, r4
   29b4c:	4620      	mov	r0, r4
}
   29b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   29b52:	f7ff bfcf 	b.w	29af4 <uECC_vli_sub>
}
   29b56:	bd70      	pop	{r4, r5, r6, pc}

00029b58 <uECC_vli_modSub>:
{
   29b58:	b570      	push	{r4, r5, r6, lr}
   29b5a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   29b5e:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   29b60:	4633      	mov	r3, r6
{
   29b62:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   29b64:	f7ff ffc6 	bl	29af4 <uECC_vli_sub>
	if (l_borrow) {
   29b68:	b138      	cbz	r0, 29b7a <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   29b6a:	4633      	mov	r3, r6
   29b6c:	462a      	mov	r2, r5
   29b6e:	4621      	mov	r1, r4
   29b70:	4620      	mov	r0, r4
}
   29b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   29b76:	f7ff be89 	b.w	2988c <uECC_vli_add>
}
   29b7a:	bd70      	pop	{r4, r5, r6, pc}

00029b7c <uECC_vli_mmod>:
{
   29b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b80:	b0a5      	sub	sp, #148	; 0x94
   29b82:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   29b84:	ab14      	add	r3, sp, #80	; 0x50
   29b86:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   29b8a:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   29b8c:	4629      	mov	r1, r5
   29b8e:	4610      	mov	r0, r2
{
   29b90:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   29b92:	f7ff ff58 	bl	29a46 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   29b96:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   29b9a:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   29b9c:	2c00      	cmp	r4, #0
   29b9e:	4621      	mov	r1, r4
   29ba0:	bfb8      	it	lt
   29ba2:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29ba6:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   29ba8:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29bac:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   29bb0:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29bb2:	f004 071f 	and.w	r7, r4, #31
   29bb6:	bf58      	it	pl
   29bb8:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   29bba:	f7ff ff20 	bl	299fe <uECC_vli_clear>
	if (bit_shift > 0) {
   29bbe:	2f00      	cmp	r7, #0
   29bc0:	b208      	sxth	r0, r1
   29bc2:	dd2b      	ble.n	29c1c <uECC_vli_mmod+0xa0>
   29bc4:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   29bc6:	2200      	movs	r2, #0
   29bc8:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   29bcc:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   29bd0:	4613      	mov	r3, r2
   29bd2:	429d      	cmp	r5, r3
   29bd4:	d817      	bhi.n	29c06 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   29bd6:	006b      	lsls	r3, r5, #1
   29bd8:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29bda:	ab04      	add	r3, sp, #16
   29bdc:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29be0:	1e6f      	subs	r7, r5, #1
   29be2:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29be4:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29be6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   29bea:	2c00      	cmp	r4, #0
   29bec:	da54      	bge.n	29c98 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   29bee:	ab24      	add	r3, sp, #144	; 0x90
   29bf0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   29bf4:	462a      	mov	r2, r5
   29bf6:	f856 1c88 	ldr.w	r1, [r6, #-136]
   29bfa:	4640      	mov	r0, r8
   29bfc:	f7ff ff44 	bl	29a88 <uECC_vli_set>
}
   29c00:	b025      	add	sp, #148	; 0x94
   29c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   29c06:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   29c0a:	fa0c f007 	lsl.w	r0, ip, r7
   29c0e:	4302      	orrs	r2, r0
   29c10:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   29c14:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   29c16:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   29c1a:	e7da      	b.n	29bd2 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   29c1c:	ab04      	add	r3, sp, #16
   29c1e:	462a      	mov	r2, r5
   29c20:	4631      	mov	r1, r6
   29c22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   29c26:	f7ff ff2f 	bl	29a88 <uECC_vli_set>
   29c2a:	e7d4      	b.n	29bd6 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   29c2c:	fa0f fe82 	sxth.w	lr, r2
   29c30:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   29c34:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   29c38:	ab24      	add	r3, sp, #144	; 0x90
   29c3a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   29c3e:	3001      	adds	r0, #1
   29c40:	f852 3c80 	ldr.w	r3, [r2, #-128]
   29c44:	440b      	add	r3, r1
   29c46:	ebbb 0303 	subs.w	r3, fp, r3
   29c4a:	bf34      	ite	cc
   29c4c:	2201      	movcc	r2, #1
   29c4e:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   29c50:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   29c52:	bf18      	it	ne
   29c54:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   29c56:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   29c5a:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   29c5e:	9b01      	ldr	r3, [sp, #4]
   29c60:	b242      	sxtb	r2, r0
   29c62:	429a      	cmp	r2, r3
   29c64:	dbe2      	blt.n	29c2c <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   29c66:	1a73      	subs	r3, r6, r1
   29c68:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   29c6a:	4629      	mov	r1, r5
   29c6c:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   29c6e:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   29c70:	f7ff fe24 	bl	298bc <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29c74:	ab24      	add	r3, sp, #144	; 0x90
   29c76:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29c7a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29c7c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   29c80:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29c84:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29c86:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   29c8a:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29c8c:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   29c90:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29c92:	f7ff fe13 	bl	298bc <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   29c96:	e7a8      	b.n	29bea <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   29c98:	ab24      	add	r3, sp, #144	; 0x90
   29c9a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   29c9c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   29ca0:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   29ca2:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   29ca6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   29caa:	e7d8      	b.n	29c5e <uECC_vli_mmod+0xe2>

00029cac <uECC_vli_modMult_fast>:
{
   29cac:	b530      	push	{r4, r5, lr}
   29cae:	461c      	mov	r4, r3
   29cb0:	b091      	sub	sp, #68	; 0x44
   29cb2:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   29cb4:	f993 3000 	ldrsb.w	r3, [r3]
   29cb8:	4668      	mov	r0, sp
   29cba:	f7ff fe28 	bl	2990e <uECC_vli_mult>
	curve->mmod_fast(result, product);
   29cbe:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   29cc2:	4669      	mov	r1, sp
   29cc4:	4628      	mov	r0, r5
   29cc6:	4798      	blx	r3
}
   29cc8:	b011      	add	sp, #68	; 0x44
   29cca:	bd30      	pop	{r4, r5, pc}

00029ccc <uECC_vli_modSquare_fast>:
{
   29ccc:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   29cce:	460a      	mov	r2, r1
   29cd0:	f7ff bfec 	b.w	29cac <uECC_vli_modMult_fast>

00029cd4 <double_jacobian_default>:
{
   29cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   29cd8:	f993 6000 	ldrsb.w	r6, [r3]
{
   29cdc:	b092      	sub	sp, #72	; 0x48
   29cde:	4604      	mov	r4, r0
   29ce0:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   29ce2:	4610      	mov	r0, r2
   29ce4:	4631      	mov	r1, r6
{
   29ce6:	4615      	mov	r5, r2
   29ce8:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   29cea:	f7ff fe93 	bl	29a14 <uECC_vli_isZero>
   29cee:	2800      	cmp	r0, #0
   29cf0:	f040 8091 	bne.w	29e16 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   29cf4:	463a      	mov	r2, r7
   29cf6:	4649      	mov	r1, r9
   29cf8:	a802      	add	r0, sp, #8
   29cfa:	f7ff ffe7 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   29cfe:	463b      	mov	r3, r7
   29d00:	aa02      	add	r2, sp, #8
   29d02:	4621      	mov	r1, r4
   29d04:	a80a      	add	r0, sp, #40	; 0x28
   29d06:	f7ff ffd1 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   29d0a:	a902      	add	r1, sp, #8
   29d0c:	4608      	mov	r0, r1
   29d0e:	463a      	mov	r2, r7
   29d10:	f7ff ffdc 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   29d14:	463b      	mov	r3, r7
   29d16:	462a      	mov	r2, r5
   29d18:	4649      	mov	r1, r9
   29d1a:	4648      	mov	r0, r9
   29d1c:	f7ff ffc6 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   29d20:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   29d24:	463a      	mov	r2, r7
   29d26:	4629      	mov	r1, r5
   29d28:	4628      	mov	r0, r5
   29d2a:	f7ff ffcf 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   29d2e:	4643      	mov	r3, r8
   29d30:	462a      	mov	r2, r5
   29d32:	4621      	mov	r1, r4
   29d34:	4620      	mov	r0, r4
   29d36:	9600      	str	r6, [sp, #0]
   29d38:	f7ff fef5 	bl	29b26 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   29d3c:	4643      	mov	r3, r8
   29d3e:	462a      	mov	r2, r5
   29d40:	4629      	mov	r1, r5
   29d42:	4628      	mov	r0, r5
   29d44:	9600      	str	r6, [sp, #0]
   29d46:	f7ff feee 	bl	29b26 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   29d4a:	4643      	mov	r3, r8
   29d4c:	462a      	mov	r2, r5
   29d4e:	4621      	mov	r1, r4
   29d50:	4628      	mov	r0, r5
   29d52:	9600      	str	r6, [sp, #0]
   29d54:	f7ff ff00 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   29d58:	463b      	mov	r3, r7
   29d5a:	462a      	mov	r2, r5
   29d5c:	4621      	mov	r1, r4
   29d5e:	4620      	mov	r0, r4
   29d60:	f7ff ffa4 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   29d64:	4643      	mov	r3, r8
   29d66:	4622      	mov	r2, r4
   29d68:	4621      	mov	r1, r4
   29d6a:	4628      	mov	r0, r5
   29d6c:	9600      	str	r6, [sp, #0]
   29d6e:	f7ff feda 	bl	29b26 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   29d72:	4643      	mov	r3, r8
   29d74:	9600      	str	r6, [sp, #0]
   29d76:	462a      	mov	r2, r5
   29d78:	4621      	mov	r1, r4
   29d7a:	4620      	mov	r0, r4
   29d7c:	f7ff fed3 	bl	29b26 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   29d80:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   29d82:	07db      	lsls	r3, r3, #31
   29d84:	d54a      	bpl.n	29e1c <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   29d86:	4633      	mov	r3, r6
   29d88:	4642      	mov	r2, r8
   29d8a:	4621      	mov	r1, r4
   29d8c:	4620      	mov	r0, r4
   29d8e:	f7ff fd7d 	bl	2988c <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   29d92:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   29d94:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   29d96:	4620      	mov	r0, r4
   29d98:	f7ff fd90 	bl	298bc <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   29d9c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   29da0:	3b01      	subs	r3, #1
   29da2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   29da6:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   29daa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   29dae:	463a      	mov	r2, r7
   29db0:	4621      	mov	r1, r4
   29db2:	4628      	mov	r0, r5
   29db4:	f7ff ff8a 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   29db8:	4643      	mov	r3, r8
   29dba:	aa0a      	add	r2, sp, #40	; 0x28
   29dbc:	4629      	mov	r1, r5
   29dbe:	4628      	mov	r0, r5
   29dc0:	9600      	str	r6, [sp, #0]
   29dc2:	f7ff fec9 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   29dc6:	4643      	mov	r3, r8
   29dc8:	aa0a      	add	r2, sp, #40	; 0x28
   29dca:	4629      	mov	r1, r5
   29dcc:	4628      	mov	r0, r5
   29dce:	9600      	str	r6, [sp, #0]
   29dd0:	f7ff fec2 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   29dd4:	a90a      	add	r1, sp, #40	; 0x28
   29dd6:	4608      	mov	r0, r1
   29dd8:	4643      	mov	r3, r8
   29dda:	462a      	mov	r2, r5
   29ddc:	9600      	str	r6, [sp, #0]
   29dde:	f7ff febb 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   29de2:	463b      	mov	r3, r7
   29de4:	aa0a      	add	r2, sp, #40	; 0x28
   29de6:	4621      	mov	r1, r4
   29de8:	4620      	mov	r0, r4
   29dea:	f7ff ff5f 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   29dee:	aa02      	add	r2, sp, #8
   29df0:	4643      	mov	r3, r8
   29df2:	4610      	mov	r0, r2
   29df4:	4621      	mov	r1, r4
   29df6:	9600      	str	r6, [sp, #0]
   29df8:	f7ff feae 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   29dfc:	4632      	mov	r2, r6
   29dfe:	4629      	mov	r1, r5
   29e00:	4620      	mov	r0, r4
   29e02:	f7ff fe41 	bl	29a88 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   29e06:	4649      	mov	r1, r9
   29e08:	4628      	mov	r0, r5
   29e0a:	f7ff fe3d 	bl	29a88 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   29e0e:	a902      	add	r1, sp, #8
   29e10:	4648      	mov	r0, r9
   29e12:	f7ff fe39 	bl	29a88 <uECC_vli_set>
}
   29e16:	b012      	add	sp, #72	; 0x48
   29e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   29e1c:	4631      	mov	r1, r6
   29e1e:	4620      	mov	r0, r4
   29e20:	f7ff fd4c 	bl	298bc <uECC_vli_rshift1>
   29e24:	e7c3      	b.n	29dae <double_jacobian_default+0xda>

00029e26 <x_side_default>:
{
   29e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e2a:	4615      	mov	r5, r2
   29e2c:	b08a      	sub	sp, #40	; 0x28
   29e2e:	4604      	mov	r4, r0
   29e30:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   29e32:	221c      	movs	r2, #28
   29e34:	2100      	movs	r1, #0
   29e36:	a803      	add	r0, sp, #12
   29e38:	f000 fe3a 	bl	2aab0 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   29e3c:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   29e3e:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   29e42:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   29e44:	462a      	mov	r2, r5
   29e46:	4631      	mov	r1, r6
   29e48:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   29e4a:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   29e4c:	f7ff ff3e 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   29e50:	463b      	mov	r3, r7
   29e52:	aa02      	add	r2, sp, #8
   29e54:	4621      	mov	r1, r4
   29e56:	4620      	mov	r0, r4
   29e58:	f8cd 8000 	str.w	r8, [sp]
   29e5c:	f7ff fe7c 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   29e60:	462b      	mov	r3, r5
   29e62:	4632      	mov	r2, r6
   29e64:	4621      	mov	r1, r4
   29e66:	4620      	mov	r0, r4
   29e68:	f7ff ff20 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   29e6c:	f8cd 8000 	str.w	r8, [sp]
   29e70:	463b      	mov	r3, r7
   29e72:	f105 0284 	add.w	r2, r5, #132	; 0x84
   29e76:	4621      	mov	r1, r4
   29e78:	4620      	mov	r0, r4
   29e7a:	f7ff fe54 	bl	29b26 <uECC_vli_modAdd>
}
   29e7e:	b00a      	add	sp, #40	; 0x28
   29e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029e84 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   29e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29e88:	b09a      	sub	sp, #104	; 0x68
   29e8a:	4616      	mov	r6, r2
   29e8c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   29e90:	4644      	mov	r4, r8
{
   29e92:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   29e94:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29e98:	9500      	str	r5, [sp, #0]
{
   29e9a:	4607      	mov	r7, r0
   29e9c:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29e9e:	4623      	mov	r3, r4
   29ea0:	4602      	mov	r2, r0
   29ea2:	4631      	mov	r1, r6
   29ea4:	a802      	add	r0, sp, #8
   29ea6:	f7ff fe57 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   29eaa:	a902      	add	r1, sp, #8
   29eac:	4642      	mov	r2, r8
   29eae:	4608      	mov	r0, r1
   29eb0:	f7ff ff0c 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   29eb4:	4643      	mov	r3, r8
   29eb6:	aa02      	add	r2, sp, #8
   29eb8:	4639      	mov	r1, r7
   29eba:	4638      	mov	r0, r7
   29ebc:	f7ff fef6 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   29ec0:	4643      	mov	r3, r8
   29ec2:	aa02      	add	r2, sp, #8
   29ec4:	4631      	mov	r1, r6
   29ec6:	4630      	mov	r0, r6
   29ec8:	f7ff fef0 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   29ecc:	4623      	mov	r3, r4
   29ece:	4652      	mov	r2, sl
   29ed0:	4649      	mov	r1, r9
   29ed2:	a802      	add	r0, sp, #8
   29ed4:	9500      	str	r5, [sp, #0]
   29ed6:	f7ff fe26 	bl	29b26 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   29eda:	4623      	mov	r3, r4
   29edc:	4652      	mov	r2, sl
   29ede:	4649      	mov	r1, r9
   29ee0:	4648      	mov	r0, r9
   29ee2:	9500      	str	r5, [sp, #0]
   29ee4:	f7ff fe38 	bl	29b58 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   29ee8:	4623      	mov	r3, r4
   29eea:	463a      	mov	r2, r7
   29eec:	4631      	mov	r1, r6
   29eee:	a80a      	add	r0, sp, #40	; 0x28
   29ef0:	9500      	str	r5, [sp, #0]
   29ef2:	f7ff fe31 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   29ef6:	4643      	mov	r3, r8
   29ef8:	aa0a      	add	r2, sp, #40	; 0x28
   29efa:	4651      	mov	r1, sl
   29efc:	4650      	mov	r0, sl
   29efe:	f7ff fed5 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   29f02:	4623      	mov	r3, r4
   29f04:	4632      	mov	r2, r6
   29f06:	4639      	mov	r1, r7
   29f08:	a80a      	add	r0, sp, #40	; 0x28
   29f0a:	9500      	str	r5, [sp, #0]
   29f0c:	f7ff fe0b 	bl	29b26 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   29f10:	4642      	mov	r2, r8
   29f12:	4649      	mov	r1, r9
   29f14:	4630      	mov	r0, r6
   29f16:	f7ff fed9 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   29f1a:	4623      	mov	r3, r4
   29f1c:	aa0a      	add	r2, sp, #40	; 0x28
   29f1e:	4631      	mov	r1, r6
   29f20:	4630      	mov	r0, r6
   29f22:	9500      	str	r5, [sp, #0]
   29f24:	f7ff fe18 	bl	29b58 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   29f28:	4623      	mov	r3, r4
   29f2a:	4632      	mov	r2, r6
   29f2c:	4639      	mov	r1, r7
   29f2e:	a812      	add	r0, sp, #72	; 0x48
   29f30:	9500      	str	r5, [sp, #0]
   29f32:	f7ff fe11 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   29f36:	4643      	mov	r3, r8
   29f38:	aa12      	add	r2, sp, #72	; 0x48
   29f3a:	4649      	mov	r1, r9
   29f3c:	4648      	mov	r0, r9
   29f3e:	f7ff feb5 	bl	29cac <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   29f42:	4623      	mov	r3, r4
   29f44:	4652      	mov	r2, sl
   29f46:	4649      	mov	r1, r9
   29f48:	4648      	mov	r0, r9
   29f4a:	9500      	str	r5, [sp, #0]
   29f4c:	f7ff fe04 	bl	29b58 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   29f50:	4642      	mov	r2, r8
   29f52:	a902      	add	r1, sp, #8
   29f54:	a812      	add	r0, sp, #72	; 0x48
   29f56:	f7ff feb9 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   29f5a:	a912      	add	r1, sp, #72	; 0x48
   29f5c:	4623      	mov	r3, r4
   29f5e:	aa0a      	add	r2, sp, #40	; 0x28
   29f60:	4608      	mov	r0, r1
   29f62:	9500      	str	r5, [sp, #0]
   29f64:	f7ff fdf8 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   29f68:	4623      	mov	r3, r4
   29f6a:	463a      	mov	r2, r7
   29f6c:	a912      	add	r1, sp, #72	; 0x48
   29f6e:	a80a      	add	r0, sp, #40	; 0x28
   29f70:	9500      	str	r5, [sp, #0]
   29f72:	f7ff fdf1 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   29f76:	a90a      	add	r1, sp, #40	; 0x28
   29f78:	4643      	mov	r3, r8
   29f7a:	aa02      	add	r2, sp, #8
   29f7c:	4608      	mov	r0, r1
   29f7e:	f7ff fe95 	bl	29cac <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   29f82:	4623      	mov	r3, r4
   29f84:	4652      	mov	r2, sl
   29f86:	a90a      	add	r1, sp, #40	; 0x28
   29f88:	4650      	mov	r0, sl
   29f8a:	9500      	str	r5, [sp, #0]
   29f8c:	f7ff fde4 	bl	29b58 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   29f90:	462a      	mov	r2, r5
   29f92:	a912      	add	r1, sp, #72	; 0x48
   29f94:	4638      	mov	r0, r7
   29f96:	f7ff fd77 	bl	29a88 <uECC_vli_set>
}
   29f9a:	b01a      	add	sp, #104	; 0x68
   29f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029fa0 <uECC_vli_modInv>:
{
   29fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   29fa2:	460f      	mov	r7, r1
   29fa4:	b0a1      	sub	sp, #132	; 0x84
   29fa6:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   29fa8:	4619      	mov	r1, r3
   29faa:	4638      	mov	r0, r7
{
   29fac:	4615      	mov	r5, r2
   29fae:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   29fb0:	f7ff fd30 	bl	29a14 <uECC_vli_isZero>
   29fb4:	b120      	cbz	r0, 29fc0 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   29fb6:	4630      	mov	r0, r6
   29fb8:	f7ff fd21 	bl	299fe <uECC_vli_clear>
}
   29fbc:	b021      	add	sp, #132	; 0x84
   29fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   29fc0:	4622      	mov	r2, r4
   29fc2:	4639      	mov	r1, r7
   29fc4:	4668      	mov	r0, sp
   29fc6:	f7ff fd5f 	bl	29a88 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   29fca:	4629      	mov	r1, r5
   29fcc:	a808      	add	r0, sp, #32
   29fce:	f7ff fd5b 	bl	29a88 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   29fd2:	a810      	add	r0, sp, #64	; 0x40
   29fd4:	4621      	mov	r1, r4
   29fd6:	f7ff fd12 	bl	299fe <uECC_vli_clear>
	u[0] = 1;
   29fda:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   29fdc:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   29fde:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   29fe0:	f7ff fd0d 	bl	299fe <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   29fe4:	4622      	mov	r2, r4
   29fe6:	a908      	add	r1, sp, #32
   29fe8:	4668      	mov	r0, sp
   29fea:	f7ff fd59 	bl	29aa0 <uECC_vli_cmp_unsafe>
   29fee:	b928      	cbnz	r0, 29ffc <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   29ff0:	4622      	mov	r2, r4
   29ff2:	a910      	add	r1, sp, #64	; 0x40
   29ff4:	4630      	mov	r0, r6
   29ff6:	f7ff fd47 	bl	29a88 <uECC_vli_set>
   29ffa:	e7df      	b.n	29fbc <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   29ffc:	9b00      	ldr	r3, [sp, #0]
   29ffe:	07da      	lsls	r2, r3, #31
   2a000:	d409      	bmi.n	2a016 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   2a002:	4621      	mov	r1, r4
   2a004:	4668      	mov	r0, sp
   2a006:	f7ff fc59 	bl	298bc <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2a00a:	4622      	mov	r2, r4
   2a00c:	4629      	mov	r1, r5
   2a00e:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2a010:	f7ff fc61 	bl	298d6 <vli_modInv_update>
   2a014:	e7e6      	b.n	29fe4 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   2a016:	9b08      	ldr	r3, [sp, #32]
   2a018:	07db      	lsls	r3, r3, #31
   2a01a:	d407      	bmi.n	2a02c <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   2a01c:	4621      	mov	r1, r4
   2a01e:	a808      	add	r0, sp, #32
   2a020:	f7ff fc4c 	bl	298bc <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2a024:	4622      	mov	r2, r4
   2a026:	4629      	mov	r1, r5
   2a028:	a818      	add	r0, sp, #96	; 0x60
   2a02a:	e7f1      	b.n	2a010 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   2a02c:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   2a02e:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   2a030:	dd1c      	ble.n	2a06c <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   2a032:	aa08      	add	r2, sp, #32
   2a034:	4669      	mov	r1, sp
   2a036:	4668      	mov	r0, sp
   2a038:	f7ff fd5c 	bl	29af4 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2a03c:	4621      	mov	r1, r4
   2a03e:	4668      	mov	r0, sp
   2a040:	f7ff fc3c 	bl	298bc <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2a044:	4622      	mov	r2, r4
   2a046:	a918      	add	r1, sp, #96	; 0x60
   2a048:	a810      	add	r0, sp, #64	; 0x40
   2a04a:	f7ff fd29 	bl	29aa0 <uECC_vli_cmp_unsafe>
   2a04e:	2800      	cmp	r0, #0
   2a050:	da05      	bge.n	2a05e <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   2a052:	a910      	add	r1, sp, #64	; 0x40
   2a054:	4623      	mov	r3, r4
   2a056:	462a      	mov	r2, r5
   2a058:	4608      	mov	r0, r1
   2a05a:	f7ff fc17 	bl	2988c <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2a05e:	a910      	add	r1, sp, #64	; 0x40
   2a060:	4623      	mov	r3, r4
   2a062:	aa18      	add	r2, sp, #96	; 0x60
   2a064:	4608      	mov	r0, r1
   2a066:	f7ff fd45 	bl	29af4 <uECC_vli_sub>
   2a06a:	e7ce      	b.n	2a00a <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   2a06c:	a908      	add	r1, sp, #32
   2a06e:	466a      	mov	r2, sp
   2a070:	4608      	mov	r0, r1
   2a072:	f7ff fd3f 	bl	29af4 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2a076:	4621      	mov	r1, r4
   2a078:	a808      	add	r0, sp, #32
   2a07a:	f7ff fc1f 	bl	298bc <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2a07e:	4622      	mov	r2, r4
   2a080:	a910      	add	r1, sp, #64	; 0x40
   2a082:	a818      	add	r0, sp, #96	; 0x60
   2a084:	f7ff fd0c 	bl	29aa0 <uECC_vli_cmp_unsafe>
   2a088:	2800      	cmp	r0, #0
   2a08a:	da05      	bge.n	2a098 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2a08c:	a918      	add	r1, sp, #96	; 0x60
   2a08e:	4623      	mov	r3, r4
   2a090:	462a      	mov	r2, r5
   2a092:	4608      	mov	r0, r1
   2a094:	f7ff fbfa 	bl	2988c <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2a098:	a918      	add	r1, sp, #96	; 0x60
   2a09a:	4623      	mov	r3, r4
   2a09c:	aa10      	add	r2, sp, #64	; 0x40
   2a09e:	4608      	mov	r0, r1
   2a0a0:	f7ff fd28 	bl	29af4 <uECC_vli_sub>
   2a0a4:	e7be      	b.n	2a024 <uECC_vli_modInv+0x84>

0002a0a6 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2a0a6:	7809      	ldrb	r1, [r1, #0]
   2a0a8:	0049      	lsls	r1, r1, #1
   2a0aa:	b249      	sxtb	r1, r1
   2a0ac:	f7ff bcb2 	b.w	29a14 <uECC_vli_isZero>

0002a0b0 <apply_z>:
{
   2a0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a0b2:	4615      	mov	r5, r2
   2a0b4:	b089      	sub	sp, #36	; 0x24
   2a0b6:	461c      	mov	r4, r3
   2a0b8:	4607      	mov	r7, r0
   2a0ba:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2a0bc:	461a      	mov	r2, r3
   2a0be:	4629      	mov	r1, r5
   2a0c0:	4668      	mov	r0, sp
   2a0c2:	f7ff fe03 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2a0c6:	4623      	mov	r3, r4
   2a0c8:	466a      	mov	r2, sp
   2a0ca:	4639      	mov	r1, r7
   2a0cc:	4638      	mov	r0, r7
   2a0ce:	f7ff fded 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2a0d2:	4623      	mov	r3, r4
   2a0d4:	462a      	mov	r2, r5
   2a0d6:	4669      	mov	r1, sp
   2a0d8:	4668      	mov	r0, sp
   2a0da:	f7ff fde7 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2a0de:	4623      	mov	r3, r4
   2a0e0:	466a      	mov	r2, sp
   2a0e2:	4631      	mov	r1, r6
   2a0e4:	4630      	mov	r0, r6
   2a0e6:	f7ff fde1 	bl	29cac <uECC_vli_modMult_fast>
}
   2a0ea:	b009      	add	sp, #36	; 0x24
   2a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a0ee <XYcZ_add>:
{
   2a0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a0f2:	b08a      	sub	sp, #40	; 0x28
   2a0f4:	4614      	mov	r4, r2
   2a0f6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2a0fa:	4655      	mov	r5, sl
{
   2a0fc:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2a0fe:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2a102:	9600      	str	r6, [sp, #0]
{
   2a104:	4680      	mov	r8, r0
   2a106:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2a108:	462b      	mov	r3, r5
   2a10a:	4602      	mov	r2, r0
   2a10c:	4621      	mov	r1, r4
   2a10e:	a802      	add	r0, sp, #8
   2a110:	f7ff fd22 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2a114:	a902      	add	r1, sp, #8
   2a116:	4652      	mov	r2, sl
   2a118:	4608      	mov	r0, r1
   2a11a:	f7ff fdd7 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2a11e:	4653      	mov	r3, sl
   2a120:	aa02      	add	r2, sp, #8
   2a122:	4641      	mov	r1, r8
   2a124:	4640      	mov	r0, r8
   2a126:	f7ff fdc1 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2a12a:	4653      	mov	r3, sl
   2a12c:	aa02      	add	r2, sp, #8
   2a12e:	4621      	mov	r1, r4
   2a130:	4620      	mov	r0, r4
   2a132:	f7ff fdbb 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2a136:	462b      	mov	r3, r5
   2a138:	464a      	mov	r2, r9
   2a13a:	4639      	mov	r1, r7
   2a13c:	4638      	mov	r0, r7
   2a13e:	9600      	str	r6, [sp, #0]
   2a140:	f7ff fd0a 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2a144:	4652      	mov	r2, sl
   2a146:	4639      	mov	r1, r7
   2a148:	a802      	add	r0, sp, #8
   2a14a:	f7ff fdbf 	bl	29ccc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2a14e:	a902      	add	r1, sp, #8
   2a150:	462b      	mov	r3, r5
   2a152:	4642      	mov	r2, r8
   2a154:	4608      	mov	r0, r1
   2a156:	9600      	str	r6, [sp, #0]
   2a158:	f7ff fcfe 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2a15c:	a902      	add	r1, sp, #8
   2a15e:	462b      	mov	r3, r5
   2a160:	4622      	mov	r2, r4
   2a162:	4608      	mov	r0, r1
   2a164:	9600      	str	r6, [sp, #0]
   2a166:	f7ff fcf7 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2a16a:	462b      	mov	r3, r5
   2a16c:	4642      	mov	r2, r8
   2a16e:	4621      	mov	r1, r4
   2a170:	4620      	mov	r0, r4
   2a172:	9600      	str	r6, [sp, #0]
   2a174:	f7ff fcf0 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2a178:	4653      	mov	r3, sl
   2a17a:	4622      	mov	r2, r4
   2a17c:	4649      	mov	r1, r9
   2a17e:	4648      	mov	r0, r9
   2a180:	f7ff fd94 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2a184:	462b      	mov	r3, r5
   2a186:	aa02      	add	r2, sp, #8
   2a188:	4641      	mov	r1, r8
   2a18a:	4620      	mov	r0, r4
   2a18c:	9600      	str	r6, [sp, #0]
   2a18e:	f7ff fce3 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2a192:	4653      	mov	r3, sl
   2a194:	4622      	mov	r2, r4
   2a196:	4639      	mov	r1, r7
   2a198:	4638      	mov	r0, r7
   2a19a:	f7ff fd87 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2a19e:	462b      	mov	r3, r5
   2a1a0:	464a      	mov	r2, r9
   2a1a2:	4639      	mov	r1, r7
   2a1a4:	4638      	mov	r0, r7
   2a1a6:	9600      	str	r6, [sp, #0]
   2a1a8:	f7ff fcd6 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2a1ac:	4632      	mov	r2, r6
   2a1ae:	a902      	add	r1, sp, #8
   2a1b0:	4620      	mov	r0, r4
   2a1b2:	f7ff fc69 	bl	29a88 <uECC_vli_set>
}
   2a1b6:	b00a      	add	sp, #40	; 0x28
   2a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a1bc <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a1c0:	b0b1      	sub	sp, #196	; 0xc4
   2a1c2:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2a1c6:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2a1c8:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2a1cc:	a818      	add	r0, sp, #96	; 0x60
{
   2a1ce:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2a1d0:	463a      	mov	r2, r7
{
   2a1d2:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   2a1d4:	f7ff fc58 	bl	29a88 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2a1d8:	00bb      	lsls	r3, r7, #2
   2a1da:	9305      	str	r3, [sp, #20]
   2a1dc:	9b04      	ldr	r3, [sp, #16]
   2a1de:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   2a1e2:	4619      	mov	r1, r3
   2a1e4:	a828      	add	r0, sp, #160	; 0xa0
   2a1e6:	9302      	str	r3, [sp, #8]
   2a1e8:	f7ff fc4e 	bl	29a88 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   2a1ec:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   2a1f0:	2e00      	cmp	r6, #0
   2a1f2:	f000 8088 	beq.w	2a306 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   2a1f6:	462a      	mov	r2, r5
   2a1f8:	4631      	mov	r1, r6
   2a1fa:	a808      	add	r0, sp, #32
   2a1fc:	f7ff fc44 	bl	29a88 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2a200:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2a204:	462a      	mov	r2, r5
   2a206:	a918      	add	r1, sp, #96	; 0x60
   2a208:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   2a20a:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   2a20e:	f7ff fc3b 	bl	29a88 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2a212:	a928      	add	r1, sp, #160	; 0xa0
   2a214:	4648      	mov	r0, r9
   2a216:	f7ff fc37 	bl	29a88 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2a21a:	4623      	mov	r3, r4
   2a21c:	aa08      	add	r2, sp, #32
   2a21e:	a928      	add	r1, sp, #160	; 0xa0
   2a220:	a818      	add	r0, sp, #96	; 0x60
   2a222:	f7ff ff45 	bl	2a0b0 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2a226:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2a22a:	4623      	mov	r3, r4
   2a22c:	aa08      	add	r2, sp, #32
   2a22e:	a928      	add	r1, sp, #160	; 0xa0
   2a230:	a818      	add	r0, sp, #96	; 0x60
   2a232:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2a234:	4623      	mov	r3, r4
   2a236:	aa08      	add	r2, sp, #32
   2a238:	4649      	mov	r1, r9
   2a23a:	4640      	mov	r0, r8
   2a23c:	f7ff ff38 	bl	2a0b0 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2a240:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2a244:	3d02      	subs	r5, #2
   2a246:	b22d      	sxth	r5, r5
   2a248:	2d00      	cmp	r5, #0
   2a24a:	dc63      	bgt.n	2a314 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2a24c:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2a250:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2a252:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2a256:	ab10      	add	r3, sp, #64	; 0x40
   2a258:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   2a25c:	43ed      	mvns	r5, r5
   2a25e:	ab20      	add	r3, sp, #128	; 0x80
   2a260:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2a264:	f005 0501 	and.w	r5, r5, #1
   2a268:	ab10      	add	r3, sp, #64	; 0x40
   2a26a:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2a26e:	ab20      	add	r3, sp, #128	; 0x80
   2a270:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2a274:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2a278:	462b      	mov	r3, r5
   2a27a:	464a      	mov	r2, r9
   2a27c:	4631      	mov	r1, r6
   2a27e:	4640      	mov	r0, r8
   2a280:	f7ff fe00 	bl	29e84 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2a284:	4653      	mov	r3, sl
   2a286:	aa10      	add	r2, sp, #64	; 0x40
   2a288:	a918      	add	r1, sp, #96	; 0x60
   2a28a:	a808      	add	r0, sp, #32
   2a28c:	9700      	str	r7, [sp, #0]
   2a28e:	f7ff fc63 	bl	29b58 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2a292:	a908      	add	r1, sp, #32
   2a294:	4623      	mov	r3, r4
   2a296:	4632      	mov	r2, r6
   2a298:	4608      	mov	r0, r1
   2a29a:	f7ff fd07 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2a29e:	a908      	add	r1, sp, #32
   2a2a0:	9a04      	ldr	r2, [sp, #16]
   2a2a2:	4623      	mov	r3, r4
   2a2a4:	4608      	mov	r0, r1
   2a2a6:	f7ff fd01 	bl	29cac <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2a2aa:	a908      	add	r1, sp, #32
   2a2ac:	463b      	mov	r3, r7
   2a2ae:	4652      	mov	r2, sl
   2a2b0:	4608      	mov	r0, r1
   2a2b2:	f7ff fe75 	bl	29fa0 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2a2b6:	a908      	add	r1, sp, #32
   2a2b8:	9a02      	ldr	r2, [sp, #8]
   2a2ba:	4623      	mov	r3, r4
   2a2bc:	4608      	mov	r0, r1
   2a2be:	f7ff fcf5 	bl	29cac <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2a2c2:	a908      	add	r1, sp, #32
   2a2c4:	4623      	mov	r3, r4
   2a2c6:	4642      	mov	r2, r8
   2a2c8:	4608      	mov	r0, r1
   2a2ca:	f7ff fcef 	bl	29cac <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2a2ce:	9400      	str	r4, [sp, #0]
   2a2d0:	4633      	mov	r3, r6
   2a2d2:	4642      	mov	r2, r8
   2a2d4:	4629      	mov	r1, r5
   2a2d6:	4648      	mov	r0, r9
   2a2d8:	f7ff ff09 	bl	2a0ee <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2a2dc:	4623      	mov	r3, r4
   2a2de:	aa08      	add	r2, sp, #32
   2a2e0:	a920      	add	r1, sp, #128	; 0x80
   2a2e2:	a810      	add	r0, sp, #64	; 0x40
   2a2e4:	f7ff fee4 	bl	2a0b0 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2a2e8:	9803      	ldr	r0, [sp, #12]
   2a2ea:	463a      	mov	r2, r7
   2a2ec:	a910      	add	r1, sp, #64	; 0x40
   2a2ee:	f7ff fbcb 	bl	29a88 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2a2f2:	9b03      	ldr	r3, [sp, #12]
   2a2f4:	9c05      	ldr	r4, [sp, #20]
   2a2f6:	4423      	add	r3, r4
   2a2f8:	a920      	add	r1, sp, #128	; 0x80
   2a2fa:	4618      	mov	r0, r3
   2a2fc:	f7ff fbc4 	bl	29a88 <uECC_vli_set>
}
   2a300:	b031      	add	sp, #196	; 0xc4
   2a302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2a306:	4629      	mov	r1, r5
   2a308:	a808      	add	r0, sp, #32
   2a30a:	f7ff fb78 	bl	299fe <uECC_vli_clear>
		z[0] = 1;
   2a30e:	2301      	movs	r3, #1
   2a310:	9308      	str	r3, [sp, #32]
   2a312:	e775      	b.n	2a200 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2a314:	4629      	mov	r1, r5
   2a316:	4650      	mov	r0, sl
   2a318:	f7ff fb8b 	bl	29a32 <uECC_vli_testBit>
   2a31c:	fab0 f680 	clz	r6, r0
   2a320:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2a322:	f1c6 0101 	rsb	r1, r6, #1
   2a326:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   2a32a:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   2a32e:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   2a332:	4633      	mov	r3, r6
   2a334:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   2a338:	465a      	mov	r2, fp
   2a33a:	9400      	str	r4, [sp, #0]
   2a33c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2a340:	f7ff fda0 	bl	29e84 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2a344:	9907      	ldr	r1, [sp, #28]
   2a346:	9806      	ldr	r0, [sp, #24]
   2a348:	9400      	str	r4, [sp, #0]
   2a34a:	460b      	mov	r3, r1
   2a34c:	4602      	mov	r2, r0
   2a34e:	4631      	mov	r1, r6
   2a350:	4658      	mov	r0, fp
   2a352:	f7ff fecc 	bl	2a0ee <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2a356:	3d01      	subs	r5, #1
   2a358:	e775      	b.n	2a246 <EccPoint_mult+0x8a>

0002a35a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2a35a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2a35e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   2a362:	f119 081f 	adds.w	r8, r9, #31
{
   2a366:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2a368:	bf48      	it	mi
   2a36a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2a36e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2a370:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2a374:	3524      	adds	r5, #36	; 0x24
   2a376:	4601      	mov	r1, r0
{
   2a378:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2a37a:	4643      	mov	r3, r8
   2a37c:	462a      	mov	r2, r5
   2a37e:	4630      	mov	r0, r6
   2a380:	f7ff fa84 	bl	2988c <uECC_vli_add>
   2a384:	4604      	mov	r4, r0
   2a386:	b990      	cbnz	r0, 2a3ae <regularize_k+0x54>
   2a388:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   2a38c:	da06      	bge.n	2a39c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2a38e:	4649      	mov	r1, r9
   2a390:	4630      	mov	r0, r6
   2a392:	f7ff fb4e 	bl	29a32 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2a396:	1e04      	subs	r4, r0, #0
   2a398:	bf18      	it	ne
   2a39a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2a39c:	4643      	mov	r3, r8
   2a39e:	462a      	mov	r2, r5
   2a3a0:	4631      	mov	r1, r6
   2a3a2:	4638      	mov	r0, r7
   2a3a4:	f7ff fa72 	bl	2988c <uECC_vli_add>

	return carry;
}
   2a3a8:	4620      	mov	r0, r4
   2a3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2a3ae:	2401      	movs	r4, #1
   2a3b0:	e7f4      	b.n	2a39c <regularize_k+0x42>

0002a3b2 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2a3b2:	b530      	push	{r4, r5, lr}
   2a3b4:	4614      	mov	r4, r2
   2a3b6:	b095      	sub	sp, #84	; 0x54
   2a3b8:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2a3ba:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2a3bc:	4623      	mov	r3, r4
{
   2a3be:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2a3c0:	a904      	add	r1, sp, #16
   2a3c2:	9102      	str	r1, [sp, #8]
   2a3c4:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2a3c6:	f7ff ffc8 	bl	2a35a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2a3ca:	fab0 f380 	clz	r3, r0
   2a3ce:	095b      	lsrs	r3, r3, #5
   2a3d0:	aa14      	add	r2, sp, #80	; 0x50
   2a3d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2a3d6:	8863      	ldrh	r3, [r4, #2]
   2a3d8:	9401      	str	r4, [sp, #4]
   2a3da:	3301      	adds	r3, #1
   2a3dc:	b21b      	sxth	r3, r3
   2a3de:	9300      	str	r3, [sp, #0]
   2a3e0:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2a3e4:	2300      	movs	r3, #0
   2a3e6:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2a3ea:	4628      	mov	r0, r5
   2a3ec:	f7ff fee6 	bl	2a1bc <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2a3f0:	4621      	mov	r1, r4
   2a3f2:	4628      	mov	r0, r5
   2a3f4:	f7ff fe57 	bl	2a0a6 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2a3f8:	fab0 f080 	clz	r0, r0
   2a3fc:	0940      	lsrs	r0, r0, #5
   2a3fe:	b015      	add	sp, #84	; 0x54
   2a400:	bd30      	pop	{r4, r5, pc}

0002a402 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2a402:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2a404:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2a406:	1e4f      	subs	r7, r1, #1
   2a408:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2a40a:	428c      	cmp	r4, r1
   2a40c:	f105 0501 	add.w	r5, r5, #1
   2a410:	db00      	blt.n	2a414 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   2a412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2a414:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2a416:	f023 0603 	bic.w	r6, r3, #3
   2a41a:	f003 0303 	and.w	r3, r3, #3
   2a41e:	5996      	ldr	r6, [r2, r6]
   2a420:	00db      	lsls	r3, r3, #3
   2a422:	fa26 f303 	lsr.w	r3, r6, r3
   2a426:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2a428:	e7ee      	b.n	2a408 <uECC_vli_nativeToBytes+0x6>

0002a42a <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2a42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a42c:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2a42e:	1cd1      	adds	r1, r2, #3
   2a430:	bf48      	it	mi
   2a432:	1d91      	addmi	r1, r2, #6
   2a434:	f341 0187 	sbfx	r1, r1, #2, #8
{
   2a438:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2a43a:	f7ff fae0 	bl	299fe <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2a43e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2a440:	1e67      	subs	r7, r4, #1
   2a442:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2a444:	42a2      	cmp	r2, r4
   2a446:	f105 0501 	add.w	r5, r5, #1
   2a44a:	db00      	blt.n	2a44e <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2a44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2a44e:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2a450:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2a454:	5cb2      	ldrb	r2, [r6, r2]
   2a456:	f003 0303 	and.w	r3, r3, #3
   2a45a:	00db      	lsls	r3, r3, #3
   2a45c:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2a460:	5842      	ldr	r2, [r0, r1]
   2a462:	431a      	orrs	r2, r3
   2a464:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   2a466:	e7ec      	b.n	2a442 <uECC_vli_bytesToNative+0x18>

0002a468 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2a468:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a46a:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2a46c:	f991 6000 	ldrsb.w	r6, [r1]
{
   2a470:	4605      	mov	r5, r0
   2a472:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2a474:	f7ff fe17 	bl	2a0a6 <EccPoint_isZero>
   2a478:	bb28      	cbnz	r0, 2a4c6 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2a47a:	1d27      	adds	r7, r4, #4
   2a47c:	4632      	mov	r2, r6
   2a47e:	4629      	mov	r1, r5
   2a480:	4638      	mov	r0, r7
   2a482:	f7ff fb0d 	bl	29aa0 <uECC_vli_cmp_unsafe>
   2a486:	2801      	cmp	r0, #1
   2a488:	d120      	bne.n	2a4cc <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2a48a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2a48e:	4632      	mov	r2, r6
   2a490:	4638      	mov	r0, r7
   2a492:	f7ff fb05 	bl	29aa0 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2a496:	2801      	cmp	r0, #1
   2a498:	d118      	bne.n	2a4cc <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2a49a:	4622      	mov	r2, r4
   2a49c:	4668      	mov	r0, sp
   2a49e:	f7ff fc15 	bl	29ccc <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2a4a2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2a4a6:	4622      	mov	r2, r4
   2a4a8:	4629      	mov	r1, r5
   2a4aa:	a808      	add	r0, sp, #32
   2a4ac:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2a4ae:	4632      	mov	r2, r6
   2a4b0:	a908      	add	r1, sp, #32
   2a4b2:	4668      	mov	r0, sp
   2a4b4:	f7ff fb0b 	bl	29ace <uECC_vli_equal>
   2a4b8:	2800      	cmp	r0, #0
		return -3;
   2a4ba:	bf0c      	ite	eq
   2a4bc:	2000      	moveq	r0, #0
   2a4be:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   2a4c2:	b011      	add	sp, #68	; 0x44
   2a4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   2a4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a4ca:	e7fa      	b.n	2a4c2 <uECC_valid_point+0x5a>
		return -2;
   2a4cc:	f06f 0001 	mvn.w	r0, #1
   2a4d0:	e7f7      	b.n	2a4c2 <uECC_valid_point+0x5a>

0002a4d2 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2a4d2:	b570      	push	{r4, r5, r6, lr}
   2a4d4:	460c      	mov	r4, r1
   2a4d6:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2a4d8:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2a4da:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2a4de:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2a4e0:	4601      	mov	r1, r0
   2a4e2:	4668      	mov	r0, sp
   2a4e4:	f7ff ffa1 	bl	2a42a <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2a4e8:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2a4ec:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   2a4f0:	18a9      	adds	r1, r5, r2
   2a4f2:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2a4f6:	f7ff ff98 	bl	2a42a <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2a4fa:	2210      	movs	r2, #16
   2a4fc:	4631      	mov	r1, r6
   2a4fe:	4668      	mov	r0, sp
   2a500:	f7ff face 	bl	29aa0 <uECC_vli_cmp_unsafe>
   2a504:	b128      	cbz	r0, 2a512 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2a506:	4621      	mov	r1, r4
   2a508:	4668      	mov	r0, sp
   2a50a:	f7ff ffad 	bl	2a468 <uECC_valid_point>
}
   2a50e:	b010      	add	sp, #64	; 0x40
   2a510:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   2a512:	f06f 0003 	mvn.w	r0, #3
   2a516:	e7fa      	b.n	2a50e <uECC_valid_public_key+0x3c>

0002a518 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2a518:	78cb      	ldrb	r3, [r1, #3]
   2a51a:	7802      	ldrb	r2, [r0, #0]
   2a51c:	4053      	eors	r3, r2
   2a51e:	7003      	strb	r3, [r0, #0]
   2a520:	884b      	ldrh	r3, [r1, #2]
   2a522:	7842      	ldrb	r2, [r0, #1]
   2a524:	4053      	eors	r3, r2
   2a526:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2a528:	680a      	ldr	r2, [r1, #0]
   2a52a:	7883      	ldrb	r3, [r0, #2]
   2a52c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a530:	7083      	strb	r3, [r0, #2]
   2a532:	680a      	ldr	r2, [r1, #0]
   2a534:	78c3      	ldrb	r3, [r0, #3]
   2a536:	4053      	eors	r3, r2
   2a538:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2a53a:	79cb      	ldrb	r3, [r1, #7]
   2a53c:	7902      	ldrb	r2, [r0, #4]
   2a53e:	4053      	eors	r3, r2
   2a540:	7103      	strb	r3, [r0, #4]
   2a542:	88cb      	ldrh	r3, [r1, #6]
   2a544:	7942      	ldrb	r2, [r0, #5]
   2a546:	4053      	eors	r3, r2
   2a548:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2a54a:	684a      	ldr	r2, [r1, #4]
   2a54c:	7983      	ldrb	r3, [r0, #6]
   2a54e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a552:	7183      	strb	r3, [r0, #6]
   2a554:	684a      	ldr	r2, [r1, #4]
   2a556:	79c3      	ldrb	r3, [r0, #7]
   2a558:	4053      	eors	r3, r2
   2a55a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2a55c:	7acb      	ldrb	r3, [r1, #11]
   2a55e:	7a02      	ldrb	r2, [r0, #8]
   2a560:	4053      	eors	r3, r2
   2a562:	7203      	strb	r3, [r0, #8]
   2a564:	7a42      	ldrb	r2, [r0, #9]
   2a566:	894b      	ldrh	r3, [r1, #10]
   2a568:	4053      	eors	r3, r2
   2a56a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2a56c:	688a      	ldr	r2, [r1, #8]
   2a56e:	7a83      	ldrb	r3, [r0, #10]
   2a570:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a574:	7283      	strb	r3, [r0, #10]
   2a576:	688a      	ldr	r2, [r1, #8]
   2a578:	7ac3      	ldrb	r3, [r0, #11]
   2a57a:	4053      	eors	r3, r2
   2a57c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2a57e:	7bcb      	ldrb	r3, [r1, #15]
   2a580:	7b02      	ldrb	r2, [r0, #12]
   2a582:	4053      	eors	r3, r2
   2a584:	7303      	strb	r3, [r0, #12]
   2a586:	89cb      	ldrh	r3, [r1, #14]
   2a588:	7b42      	ldrb	r2, [r0, #13]
   2a58a:	4053      	eors	r3, r2
   2a58c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2a58e:	68ca      	ldr	r2, [r1, #12]
   2a590:	7b83      	ldrb	r3, [r0, #14]
   2a592:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a596:	7383      	strb	r3, [r0, #14]
   2a598:	68ca      	ldr	r2, [r1, #12]
   2a59a:	7bc3      	ldrb	r3, [r0, #15]
   2a59c:	4053      	eors	r3, r2
   2a59e:	73c3      	strb	r3, [r0, #15]
}
   2a5a0:	4770      	bx	lr

0002a5a2 <shift_rows>:
{
   2a5a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2a5a4:	7802      	ldrb	r2, [r0, #0]
   2a5a6:	f88d 2000 	strb.w	r2, [sp]
   2a5aa:	7942      	ldrb	r2, [r0, #5]
   2a5ac:	f88d 2001 	strb.w	r2, [sp, #1]
   2a5b0:	7a82      	ldrb	r2, [r0, #10]
   2a5b2:	f88d 2002 	strb.w	r2, [sp, #2]
   2a5b6:	7bc2      	ldrb	r2, [r0, #15]
   2a5b8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2a5bc:	7902      	ldrb	r2, [r0, #4]
   2a5be:	f88d 2004 	strb.w	r2, [sp, #4]
   2a5c2:	7a42      	ldrb	r2, [r0, #9]
   2a5c4:	f88d 2005 	strb.w	r2, [sp, #5]
   2a5c8:	7b82      	ldrb	r2, [r0, #14]
   2a5ca:	f88d 2006 	strb.w	r2, [sp, #6]
   2a5ce:	78c2      	ldrb	r2, [r0, #3]
   2a5d0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2a5d4:	7a02      	ldrb	r2, [r0, #8]
   2a5d6:	f88d 2008 	strb.w	r2, [sp, #8]
   2a5da:	7b42      	ldrb	r2, [r0, #13]
   2a5dc:	f88d 2009 	strb.w	r2, [sp, #9]
   2a5e0:	7882      	ldrb	r2, [r0, #2]
   2a5e2:	f88d 200a 	strb.w	r2, [sp, #10]
   2a5e6:	79c2      	ldrb	r2, [r0, #7]
   2a5e8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2a5ec:	7b02      	ldrb	r2, [r0, #12]
   2a5ee:	f88d 200c 	strb.w	r2, [sp, #12]
   2a5f2:	7842      	ldrb	r2, [r0, #1]
   2a5f4:	7ac3      	ldrb	r3, [r0, #11]
   2a5f6:	f88d 200d 	strb.w	r2, [sp, #13]
   2a5fa:	7982      	ldrb	r2, [r0, #6]
   2a5fc:	f88d 200e 	strb.w	r2, [sp, #14]
   2a600:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2a604:	2310      	movs	r3, #16
   2a606:	466a      	mov	r2, sp
   2a608:	4619      	mov	r1, r3
   2a60a:	f7ff f87b 	bl	29704 <_copy>
}
   2a60e:	b005      	add	sp, #20
   2a610:	f85d fb04 	ldr.w	pc, [sp], #4

0002a614 <mult_row_column>:
{
   2a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a616:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2a618:	7808      	ldrb	r0, [r1, #0]
{
   2a61a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2a61c:	f7ff f881 	bl	29722 <_double_byte>
   2a620:	4605      	mov	r5, r0
   2a622:	7860      	ldrb	r0, [r4, #1]
   2a624:	f7ff f87d 	bl	29722 <_double_byte>
   2a628:	78a2      	ldrb	r2, [r4, #2]
   2a62a:	7863      	ldrb	r3, [r4, #1]
   2a62c:	4053      	eors	r3, r2
   2a62e:	78e2      	ldrb	r2, [r4, #3]
   2a630:	4053      	eors	r3, r2
   2a632:	405d      	eors	r5, r3
   2a634:	4045      	eors	r5, r0
   2a636:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2a638:	7860      	ldrb	r0, [r4, #1]
   2a63a:	7827      	ldrb	r7, [r4, #0]
   2a63c:	f7ff f871 	bl	29722 <_double_byte>
   2a640:	4605      	mov	r5, r0
   2a642:	78a0      	ldrb	r0, [r4, #2]
   2a644:	f7ff f86d 	bl	29722 <_double_byte>
   2a648:	78a3      	ldrb	r3, [r4, #2]
   2a64a:	405f      	eors	r7, r3
   2a64c:	78e3      	ldrb	r3, [r4, #3]
   2a64e:	405f      	eors	r7, r3
   2a650:	407d      	eors	r5, r7
   2a652:	4045      	eors	r5, r0
   2a654:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2a656:	78a0      	ldrb	r0, [r4, #2]
   2a658:	7865      	ldrb	r5, [r4, #1]
   2a65a:	7827      	ldrb	r7, [r4, #0]
   2a65c:	f7ff f861 	bl	29722 <_double_byte>
   2a660:	406f      	eors	r7, r5
   2a662:	4605      	mov	r5, r0
   2a664:	78e0      	ldrb	r0, [r4, #3]
   2a666:	f7ff f85c 	bl	29722 <_double_byte>
   2a66a:	78e3      	ldrb	r3, [r4, #3]
   2a66c:	405f      	eors	r7, r3
   2a66e:	407d      	eors	r5, r7
   2a670:	4045      	eors	r5, r0
   2a672:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2a674:	7820      	ldrb	r0, [r4, #0]
   2a676:	f7ff f854 	bl	29722 <_double_byte>
   2a67a:	7863      	ldrb	r3, [r4, #1]
   2a67c:	7825      	ldrb	r5, [r4, #0]
   2a67e:	405d      	eors	r5, r3
   2a680:	78a3      	ldrb	r3, [r4, #2]
   2a682:	405d      	eors	r5, r3
   2a684:	4045      	eors	r5, r0
   2a686:	78e0      	ldrb	r0, [r4, #3]
   2a688:	f7ff f84b 	bl	29722 <_double_byte>
   2a68c:	b2ed      	uxtb	r5, r5
   2a68e:	4045      	eors	r5, r0
   2a690:	70f5      	strb	r5, [r6, #3]
}
   2a692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a694 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2a694:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a696:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2a698:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a69a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2a69e:	2b00      	cmp	r3, #0
   2a6a0:	bfb4      	ite	lt
   2a6a2:	2387      	movlt	r3, #135	; 0x87
   2a6a4:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2a6a6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2a6aa:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2a6ae:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2a6b0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2a6b4:	d002      	beq.n	2a6bc <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2a6b6:	7813      	ldrb	r3, [r2, #0]
   2a6b8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2a6ba:	e7f4      	b.n	2a6a6 <gf_double+0x12>
	}
}
   2a6bc:	bd10      	pop	{r4, pc}

0002a6be <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2a6be:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2a6c0:	b120      	cbz	r0, 2a6cc <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2a6c2:	2258      	movs	r2, #88	; 0x58
   2a6c4:	2100      	movs	r1, #0
   2a6c6:	f7ff f82a 	bl	2971e <_set>
   2a6ca:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2a6cc:	bd08      	pop	{r3, pc}

0002a6ce <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2a6ce:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a6d0:	4604      	mov	r4, r0
   2a6d2:	b188      	cbz	r0, 2a6f8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a6d4:	2210      	movs	r2, #16
   2a6d6:	2100      	movs	r1, #0
   2a6d8:	f7ff f821 	bl	2971e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2a6dc:	2210      	movs	r2, #16
   2a6de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a6e2:	2100      	movs	r1, #0
   2a6e4:	f7ff f81b 	bl	2971e <_set>
	s->leftover_offset = 0;
   2a6e8:	2300      	movs	r3, #0
   2a6ea:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2a6ec:	2200      	movs	r2, #0
   2a6ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a6f2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2a6f6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2a6f8:	bd10      	pop	{r4, pc}

0002a6fa <tc_cmac_setup>:
{
   2a6fa:	b570      	push	{r4, r5, r6, lr}
   2a6fc:	460d      	mov	r5, r1
   2a6fe:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2a700:	4604      	mov	r4, r0
   2a702:	b310      	cbz	r0, 2a74a <tc_cmac_setup+0x50>
   2a704:	b311      	cbz	r1, 2a74c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2a706:	2258      	movs	r2, #88	; 0x58
   2a708:	2100      	movs	r1, #0
   2a70a:	f7ff f808 	bl	2971e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2a70e:	4629      	mov	r1, r5
	s->sched = sched;
   2a710:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2a712:	4630      	mov	r0, r6
   2a714:	f7e9 fcda 	bl	140cc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a718:	2210      	movs	r2, #16
   2a71a:	2100      	movs	r1, #0
   2a71c:	4620      	mov	r0, r4
   2a71e:	f7fe fffe 	bl	2971e <_set>
	gf_double (s->K1, s->iv);
   2a722:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a726:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a728:	4621      	mov	r1, r4
   2a72a:	4620      	mov	r0, r4
   2a72c:	f7e9 fd20 	bl	14170 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2a730:	4621      	mov	r1, r4
   2a732:	4628      	mov	r0, r5
   2a734:	f7ff ffae 	bl	2a694 <gf_double>
	gf_double (s->K2, s->K1);
   2a738:	4629      	mov	r1, r5
   2a73a:	f104 0020 	add.w	r0, r4, #32
   2a73e:	f7ff ffa9 	bl	2a694 <gf_double>
	tc_cmac_init(s);
   2a742:	4620      	mov	r0, r4
   2a744:	f7ff ffc3 	bl	2a6ce <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2a748:	2001      	movs	r0, #1
}
   2a74a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2a74c:	4608      	mov	r0, r1
   2a74e:	e7fc      	b.n	2a74a <tc_cmac_setup+0x50>

0002a750 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a754:	460d      	mov	r5, r1
   2a756:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a758:	4604      	mov	r4, r0
   2a75a:	2800      	cmp	r0, #0
   2a75c:	d062      	beq.n	2a824 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2a75e:	b912      	cbnz	r2, 2a766 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2a760:	2001      	movs	r0, #1
}
   2a762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2a766:	2900      	cmp	r1, #0
   2a768:	d05c      	beq.n	2a824 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2a76a:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2a76e:	ea50 0301 	orrs.w	r3, r0, r1
   2a772:	d057      	beq.n	2a824 <tc_cmac_update+0xd4>
	s->countdown--;
   2a774:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   2a778:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2a77c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   2a780:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2a784:	f1b8 0f00 	cmp.w	r8, #0
   2a788:	d02a      	beq.n	2a7e0 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2a78a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2a78e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2a792:	42be      	cmp	r6, r7
   2a794:	4420      	add	r0, r4
   2a796:	d208      	bcs.n	2a7aa <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2a798:	462a      	mov	r2, r5
   2a79a:	4633      	mov	r3, r6
   2a79c:	4631      	mov	r1, r6
   2a79e:	f7fe ffb1 	bl	29704 <_copy>
			s->leftover_offset += data_length;
   2a7a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2a7a4:	4432      	add	r2, r6
   2a7a6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2a7a8:	e7da      	b.n	2a760 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2a7aa:	463b      	mov	r3, r7
   2a7ac:	462a      	mov	r2, r5
   2a7ae:	4639      	mov	r1, r7
   2a7b0:	f7fe ffa8 	bl	29704 <_copy>
		data_length -= remaining_space;
   2a7b4:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2a7b6:	2300      	movs	r3, #0
   2a7b8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2a7ba:	4446      	add	r6, r8
		data += remaining_space;
   2a7bc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a7be:	1e63      	subs	r3, r4, #1
   2a7c0:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2a7c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a7c8:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a7cc:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2a7ce:	ea82 0200 	eor.w	r2, r2, r0
   2a7d2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a7d4:	d1f6      	bne.n	2a7c4 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a7d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a7d8:	4621      	mov	r1, r4
   2a7da:	4620      	mov	r0, r4
   2a7dc:	f7e9 fcc8 	bl	14170 <tc_aes_encrypt>
   2a7e0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2a7e4:	2e10      	cmp	r6, #16
   2a7e6:	d80a      	bhi.n	2a7fe <tc_cmac_update+0xae>
	if (data_length > 0) {
   2a7e8:	2e00      	cmp	r6, #0
   2a7ea:	d0b9      	beq.n	2a760 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2a7ec:	4633      	mov	r3, r6
   2a7ee:	462a      	mov	r2, r5
   2a7f0:	4631      	mov	r1, r6
   2a7f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a7f6:	f7fe ff85 	bl	29704 <_copy>
		s->leftover_offset = data_length;
   2a7fa:	6466      	str	r6, [r4, #68]	; 0x44
   2a7fc:	e7b0      	b.n	2a760 <tc_cmac_update+0x10>
   2a7fe:	1e63      	subs	r3, r4, #1
   2a800:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2a802:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a806:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a80a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2a80c:	ea82 0200 	eor.w	r2, r2, r0
   2a810:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a812:	d1f6      	bne.n	2a802 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a814:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a816:	4621      	mov	r1, r4
   2a818:	4620      	mov	r0, r4
   2a81a:	f7e9 fca9 	bl	14170 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2a81e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2a820:	3e10      	subs	r6, #16
   2a822:	e7df      	b.n	2a7e4 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2a824:	2000      	movs	r0, #0
   2a826:	e79c      	b.n	2a762 <tc_cmac_update+0x12>

0002a828 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2a828:	b570      	push	{r4, r5, r6, lr}
   2a82a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2a82c:	4605      	mov	r5, r0
   2a82e:	b1e8      	cbz	r0, 2a86c <tc_cmac_final+0x44>
   2a830:	b369      	cbz	r1, 2a88e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2a832:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2a834:	2a10      	cmp	r2, #16
   2a836:	d11a      	bne.n	2a86e <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2a838:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a83a:	1e63      	subs	r3, r4, #1
   2a83c:	3901      	subs	r1, #1
   2a83e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a842:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a846:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2a84a:	4072      	eors	r2, r6
   2a84c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a850:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a852:	ea82 0206 	eor.w	r2, r2, r6
   2a856:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a858:	d1f3      	bne.n	2a842 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2a85a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a85c:	4621      	mov	r1, r4
   2a85e:	4628      	mov	r0, r5
   2a860:	f7e9 fc86 	bl	14170 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2a864:	4620      	mov	r0, r4
   2a866:	f7ff ff2a 	bl	2a6be <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2a86a:	2001      	movs	r0, #1
}
   2a86c:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2a86e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2a872:	2100      	movs	r1, #0
   2a874:	f1c2 0210 	rsb	r2, r2, #16
   2a878:	4420      	add	r0, r4
   2a87a:	f7fe ff50 	bl	2971e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2a87e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a880:	4423      	add	r3, r4
   2a882:	2280      	movs	r2, #128	; 0x80
   2a884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2a888:	f104 0120 	add.w	r1, r4, #32
   2a88c:	e7d5      	b.n	2a83a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2a88e:	4608      	mov	r0, r1
   2a890:	e7ec      	b.n	2a86c <tc_cmac_final+0x44>

0002a892 <abort_function>:
{
   2a892:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2a894:	2000      	movs	r0, #0
   2a896:	f7e7 fc2f 	bl	120f8 <sys_reboot>

0002a89a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2a89a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2a89c:	6800      	ldr	r0, [r0, #0]
   2a89e:	f7e9 bdb9 	b.w	14414 <z_arm_fatal_error>

0002a8a2 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2a8a2:	2100      	movs	r1, #0
   2a8a4:	2001      	movs	r0, #1
   2a8a6:	f7e9 bdb5 	b.w	14414 <z_arm_fatal_error>

0002a8aa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2a8aa:	b508      	push	{r3, lr}
	handler();
   2a8ac:	f7e9 fe62 	bl	14574 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2a8b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2a8b4:	f7e9 bf3e 	b.w	14734 <z_arm_exc_exit>

0002a8b8 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2a8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8bc:	4684      	mov	ip, r0
   2a8be:	460f      	mov	r7, r1
	register const char *s = nptr;
   2a8c0:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2a8c2:	462c      	mov	r4, r5
   2a8c4:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2a8c8:	2b20      	cmp	r3, #32
   2a8ca:	d035      	beq.n	2a938 <strtoul+0x80>
   2a8cc:	f1a3 0109 	sub.w	r1, r3, #9
   2a8d0:	2904      	cmp	r1, #4
   2a8d2:	d931      	bls.n	2a938 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   2a8d4:	2b2d      	cmp	r3, #45	; 0x2d
   2a8d6:	d131      	bne.n	2a93c <strtoul+0x84>
		neg = 1;
		c = *s++;
   2a8d8:	786b      	ldrb	r3, [r5, #1]
   2a8da:	1cac      	adds	r4, r5, #2
		neg = 1;
   2a8dc:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2a8e0:	2a00      	cmp	r2, #0
   2a8e2:	d05e      	beq.n	2a9a2 <strtoul+0xea>
   2a8e4:	2a10      	cmp	r2, #16
   2a8e6:	d109      	bne.n	2a8fc <strtoul+0x44>
   2a8e8:	2b30      	cmp	r3, #48	; 0x30
   2a8ea:	d107      	bne.n	2a8fc <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2a8ec:	7823      	ldrb	r3, [r4, #0]
   2a8ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a8f2:	2b58      	cmp	r3, #88	; 0x58
   2a8f4:	d150      	bne.n	2a998 <strtoul+0xe0>
		c = s[1];
   2a8f6:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   2a8f8:	2210      	movs	r2, #16
		s += 2;
   2a8fa:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2a8fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2a900:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2a902:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2a906:	fb02 f801 	mul.w	r8, r2, r1
   2a90a:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   2a90e:	4630      	mov	r0, r6
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2a910:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   2a914:	2d09      	cmp	r5, #9
   2a916:	d818      	bhi.n	2a94a <strtoul+0x92>
			c -= '0';
   2a918:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2a91a:	429a      	cmp	r2, r3
   2a91c:	dd25      	ble.n	2a96a <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2a91e:	2e00      	cmp	r6, #0
   2a920:	db20      	blt.n	2a964 <strtoul+0xac>
   2a922:	4288      	cmp	r0, r1
   2a924:	d81e      	bhi.n	2a964 <strtoul+0xac>
   2a926:	d101      	bne.n	2a92c <strtoul+0x74>
   2a928:	4543      	cmp	r3, r8
   2a92a:	dc1b      	bgt.n	2a964 <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2a92c:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2a930:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   2a932:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   2a936:	e7eb      	b.n	2a910 <strtoul+0x58>
{
   2a938:	4625      	mov	r5, r4
   2a93a:	e7c2      	b.n	2a8c2 <strtoul+0xa>
	} else if (c == '+') {
   2a93c:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2a93e:	bf04      	itt	eq
   2a940:	786b      	ldrbeq	r3, [r5, #1]
   2a942:	1cac      	addeq	r4, r5, #2
	register int neg = 0, any, cutlim;
   2a944:	f04f 0e00 	mov.w	lr, #0
   2a948:	e7ca      	b.n	2a8e0 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2a94a:	f043 0520 	orr.w	r5, r3, #32
   2a94e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2a950:	2d19      	cmp	r5, #25
   2a952:	d80a      	bhi.n	2a96a <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2a954:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   2a958:	2d1a      	cmp	r5, #26
   2a95a:	bf34      	ite	cc
   2a95c:	2537      	movcc	r5, #55	; 0x37
   2a95e:	2557      	movcs	r5, #87	; 0x57
   2a960:	1b5b      	subs	r3, r3, r5
   2a962:	e7da      	b.n	2a91a <strtoul+0x62>
			any = -1;
   2a964:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a968:	e7e3      	b.n	2a932 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   2a96a:	2e00      	cmp	r6, #0
   2a96c:	da08      	bge.n	2a980 <strtoul+0xc8>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2a96e:	f7f7 f837 	bl	219e0 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2a972:	2322      	movs	r3, #34	; 0x22
   2a974:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2a976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2a97a:	b947      	cbnz	r7, 2a98e <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2a97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2a980:	f1be 0f00 	cmp.w	lr, #0
   2a984:	d000      	beq.n	2a988 <strtoul+0xd0>
		acc = -acc;
   2a986:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2a988:	2f00      	cmp	r7, #0
   2a98a:	d0f7      	beq.n	2a97c <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   2a98c:	b10e      	cbz	r6, 2a992 <strtoul+0xda>
   2a98e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   2a992:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   2a996:	e7f1      	b.n	2a97c <strtoul+0xc4>
	if (base == 0) {
   2a998:	2330      	movs	r3, #48	; 0x30
   2a99a:	2a00      	cmp	r2, #0
   2a99c:	d1ae      	bne.n	2a8fc <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   2a99e:	2208      	movs	r2, #8
   2a9a0:	e7ac      	b.n	2a8fc <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   2a9a2:	2b30      	cmp	r3, #48	; 0x30
   2a9a4:	d0a2      	beq.n	2a8ec <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   2a9a6:	220a      	movs	r2, #10
   2a9a8:	e7a8      	b.n	2a8fc <strtoul+0x44>

0002a9aa <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2a9aa:	3901      	subs	r1, #1
   2a9ac:	4603      	mov	r3, r0
   2a9ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2a9b2:	b90a      	cbnz	r2, 2a9b8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2a9b4:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2a9b6:	4770      	bx	lr
		*d = *s;
   2a9b8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2a9bc:	e7f7      	b.n	2a9ae <strcpy+0x4>

0002a9be <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   2a9be:	b570      	push	{r4, r5, r6, lr}
   2a9c0:	3901      	subs	r1, #1
   2a9c2:	4605      	mov	r5, r0
   2a9c4:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2a9c6:	b142      	cbz	r2, 2a9da <strncpy+0x1c>
   2a9c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2a9cc:	1e56      	subs	r6, r2, #1
   2a9ce:	b92b      	cbnz	r3, 2a9dc <strncpy+0x1e>
   2a9d0:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   2a9d2:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   2a9d6:	42a2      	cmp	r2, r4
   2a9d8:	d1fb      	bne.n	2a9d2 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   2a9da:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   2a9dc:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2a9e0:	4632      	mov	r2, r6
   2a9e2:	e7ef      	b.n	2a9c4 <strncpy+0x6>

0002a9e4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2a9e4:	4603      	mov	r3, r0
	size_t n = 0;
   2a9e6:	2000      	movs	r0, #0

	while (*s != '\0') {
   2a9e8:	5c1a      	ldrb	r2, [r3, r0]
   2a9ea:	b902      	cbnz	r2, 2a9ee <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2a9ec:	4770      	bx	lr
		n++;
   2a9ee:	3001      	adds	r0, #1
   2a9f0:	e7fa      	b.n	2a9e8 <strlen+0x4>

0002a9f2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2a9f2:	4603      	mov	r3, r0
	size_t n = 0;
   2a9f4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2a9f6:	5c1a      	ldrb	r2, [r3, r0]
   2a9f8:	b10a      	cbz	r2, 2a9fe <strnlen+0xc>
   2a9fa:	4288      	cmp	r0, r1
   2a9fc:	d100      	bne.n	2aa00 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2a9fe:	4770      	bx	lr
		n++;
   2aa00:	3001      	adds	r0, #1
   2aa02:	e7f8      	b.n	2a9f6 <strnlen+0x4>

0002aa04 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2aa04:	1e43      	subs	r3, r0, #1
   2aa06:	3901      	subs	r1, #1
   2aa08:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2aa0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2aa10:	4282      	cmp	r2, r0
   2aa12:	d101      	bne.n	2aa18 <strcmp+0x14>
   2aa14:	2a00      	cmp	r2, #0
   2aa16:	d1f7      	bne.n	2aa08 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2aa18:	1a10      	subs	r0, r2, r0
   2aa1a:	4770      	bx	lr

0002aa1c <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2aa1c:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2aa1e:	2400      	movs	r4, #0
   2aa20:	42a2      	cmp	r2, r4
   2aa22:	d008      	beq.n	2aa36 <strncmp+0x1a>
   2aa24:	5d03      	ldrb	r3, [r0, r4]
   2aa26:	5d0d      	ldrb	r5, [r1, r4]
   2aa28:	42ab      	cmp	r3, r5
   2aa2a:	d102      	bne.n	2aa32 <strncmp+0x16>
   2aa2c:	3401      	adds	r4, #1
   2aa2e:	2b00      	cmp	r3, #0
   2aa30:	d1f6      	bne.n	2aa20 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2aa32:	1b58      	subs	r0, r3, r5
   2aa34:	e000      	b.n	2aa38 <strncmp+0x1c>
   2aa36:	2000      	movs	r0, #0
}
   2aa38:	bd30      	pop	{r4, r5, pc}

0002aa3a <strcat>:

	return start;
}

char *strcat(char *ZRESTRICT dest, const char *ZRESTRICT src)
{
   2aa3a:	b510      	push	{r4, lr}
   2aa3c:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   2aa3e:	f7ff ffd1 	bl	2a9e4 <strlen>
   2aa42:	4420      	add	r0, r4
   2aa44:	f7ff ffb1 	bl	2a9aa <strcpy>
	return dest;
}
   2aa48:	4620      	mov	r0, r4
   2aa4a:	bd10      	pop	{r4, pc}

0002aa4c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2aa4c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2aa4e:	b15a      	cbz	r2, 2aa68 <memcmp+0x1c>
   2aa50:	3901      	subs	r1, #1
   2aa52:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2aa54:	f810 2b01 	ldrb.w	r2, [r0], #1
   2aa58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2aa5c:	42a0      	cmp	r0, r4
   2aa5e:	d001      	beq.n	2aa64 <memcmp+0x18>
   2aa60:	429a      	cmp	r2, r3
   2aa62:	d0f7      	beq.n	2aa54 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2aa64:	1ad0      	subs	r0, r2, r3
}
   2aa66:	bd10      	pop	{r4, pc}
		return 0;
   2aa68:	4610      	mov	r0, r2
   2aa6a:	e7fc      	b.n	2aa66 <memcmp+0x1a>

0002aa6c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2aa6c:	1a43      	subs	r3, r0, r1
   2aa6e:	4293      	cmp	r3, r2
{
   2aa70:	b510      	push	{r4, lr}
   2aa72:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2aa76:	d308      	bcc.n	2aa8a <memmove+0x1e>
   2aa78:	3901      	subs	r1, #1
	char *dest = d;
   2aa7a:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2aa7c:	429a      	cmp	r2, r3
   2aa7e:	d00b      	beq.n	2aa98 <memmove+0x2c>
			*dest = *src;
   2aa80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2aa84:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2aa88:	e7f8      	b.n	2aa7c <memmove+0x10>
   2aa8a:	440a      	add	r2, r1
			dest[n] = src[n];
   2aa8c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2aa90:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2aa94:	428a      	cmp	r2, r1
   2aa96:	d1f9      	bne.n	2aa8c <memmove+0x20>
		}
	}

	return d;
}
   2aa98:	bd10      	pop	{r4, pc}

0002aa9a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2aa9a:	b510      	push	{r4, lr}
   2aa9c:	1e43      	subs	r3, r0, #1
   2aa9e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2aaa0:	4291      	cmp	r1, r2
   2aaa2:	d100      	bne.n	2aaa6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2aaa4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2aaa6:	f811 4b01 	ldrb.w	r4, [r1], #1
   2aaaa:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2aaae:	e7f7      	b.n	2aaa0 <memcpy+0x6>

0002aab0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2aab0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2aab2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2aab4:	4603      	mov	r3, r0
	while (n > 0) {
   2aab6:	4293      	cmp	r3, r2
   2aab8:	d100      	bne.n	2aabc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2aaba:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2aabc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2aac0:	e7f9      	b.n	2aab6 <memset+0x6>

0002aac2 <_stdout_hook_default>:
}
   2aac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aac6:	4770      	bx	lr

0002aac8 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2aac8:	684b      	ldr	r3, [r1, #4]
   2aaca:	2b01      	cmp	r3, #1
   2aacc:	dd07      	ble.n	2aade <sprintf_out+0x16>
		*(p->ptr) = c;
   2aace:	680b      	ldr	r3, [r1, #0]
   2aad0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2aad2:	680b      	ldr	r3, [r1, #0]
   2aad4:	3301      	adds	r3, #1
   2aad6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2aad8:	684b      	ldr	r3, [r1, #4]
   2aada:	3b01      	subs	r3, #1
   2aadc:	604b      	str	r3, [r1, #4]
}
   2aade:	2000      	movs	r0, #0
   2aae0:	4770      	bx	lr

0002aae2 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2aae2:	b084      	sub	sp, #16
   2aae4:	ab04      	add	r3, sp, #16
   2aae6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2aaea:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2aaee:	2b06      	cmp	r3, #6
   2aaf0:	d108      	bne.n	2ab04 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2aaf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2aaf6:	2201      	movs	r2, #1
   2aaf8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2aafc:	f3bf 8f4f 	dsb	sy
        __WFE();
   2ab00:	bf20      	wfe
    while (true)
   2ab02:	e7fd      	b.n	2ab00 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2ab04:	b004      	add	sp, #16
   2ab06:	4770      	bx	lr

0002ab08 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2ab08:	b084      	sub	sp, #16
   2ab0a:	ab04      	add	r3, sp, #16
   2ab0c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2ab10:	2300      	movs	r3, #0
   2ab12:	f383 8811 	msr	BASEPRI, r3
   2ab16:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2ab1a:	b004      	add	sp, #16
   2ab1c:	4770      	bx	lr

0002ab1e <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2ab1e:	b530      	push	{r4, r5, lr}
   2ab20:	b085      	sub	sp, #20
   2ab22:	4604      	mov	r4, r0
   2ab24:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2ab26:	4668      	mov	r0, sp
   2ab28:	2203      	movs	r2, #3
   2ab2a:	f7ff ffb6 	bl	2aa9a <memcpy>
	(void)memset(res + 3, 0, 13);
   2ab2e:	220d      	movs	r2, #13
   2ab30:	2100      	movs	r1, #0
   2ab32:	f10d 0003 	add.w	r0, sp, #3
   2ab36:	f7ff ffbb 	bl	2aab0 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2ab3a:	4620      	mov	r0, r4
   2ab3c:	466a      	mov	r2, sp
   2ab3e:	4669      	mov	r1, sp
   2ab40:	f002 fa73 	bl	2d02a <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2ab44:	4604      	mov	r4, r0
   2ab46:	b920      	cbnz	r0, 2ab52 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2ab48:	2203      	movs	r2, #3
   2ab4a:	4669      	mov	r1, sp
   2ab4c:	4628      	mov	r0, r5
   2ab4e:	f7ff ffa4 	bl	2aa9a <memcpy>

	return 0;
}
   2ab52:	4620      	mov	r0, r4
   2ab54:	b005      	add	sp, #20
   2ab56:	bd30      	pop	{r4, r5, pc}

0002ab58 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2ab58:	b513      	push	{r0, r1, r4, lr}
   2ab5a:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2ab5c:	aa01      	add	r2, sp, #4
   2ab5e:	3103      	adds	r1, #3
   2ab60:	f7ff ffdd 	bl	2ab1e <ah>
	if (err) {
   2ab64:	b948      	cbnz	r0, 2ab7a <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2ab66:	2203      	movs	r2, #3
   2ab68:	a901      	add	r1, sp, #4
   2ab6a:	4620      	mov	r0, r4
   2ab6c:	f7ff ff6e 	bl	2aa4c <memcmp>
   2ab70:	fab0 f080 	clz	r0, r0
   2ab74:	0940      	lsrs	r0, r0, #5
}
   2ab76:	b002      	add	sp, #8
   2ab78:	bd10      	pop	{r4, pc}
		return false;
   2ab7a:	2000      	movs	r0, #0
   2ab7c:	e7fb      	b.n	2ab76 <bt_rpa_irk_matches+0x1e>

0002ab7e <send_cmd_status>:
{
   2ab7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2ab82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2ab86:	4606      	mov	r6, r0
   2ab88:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2ab8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ab8e:	2100      	movs	r1, #0
   2ab90:	200f      	movs	r0, #15
   2ab92:	f7ea fec5 	bl	15920 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2ab96:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   2ab98:	f100 0808 	add.w	r8, r0, #8
   2ab9c:	4604      	mov	r4, r0
   2ab9e:	7507      	strb	r7, [r0, #20]
   2aba0:	2102      	movs	r1, #2
   2aba2:	4640      	mov	r0, r8
   2aba4:	f7f3 f8b4 	bl	1dd10 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2aba8:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   2abaa:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2abac:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   2abae:	7041      	strb	r1, [r0, #1]
   2abb0:	4640      	mov	r0, r8
   2abb2:	f7f3 f8ad 	bl	1dd10 <net_buf_simple_add>
	evt->ncmd = 1U;
   2abb6:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   2abb8:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   2abba:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   2abbc:	4620      	mov	r0, r4
}
   2abbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   2abc2:	f7ec b80d 	b.w	16be0 <bt_recv>

0002abc6 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   2abc6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   2abca:	f043 0306 	orr.w	r3, r3, #6
   2abce:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   2abd2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   2abd6:	f043 0304 	orr.w	r3, r3, #4
   2abda:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   2abde:	4770      	bx	lr

0002abe0 <default_CSPRNG>:
{
   2abe0:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   2abe2:	f7f5 fddd 	bl	207a0 <bt_rand>
}
   2abe6:	fab0 f080 	clz	r0, r0
   2abea:	0940      	lsrs	r0, r0, #5
   2abec:	bd08      	pop	{r3, pc}

0002abee <bt_settings_decode_key>:
{
   2abee:	b570      	push	{r4, r5, r6, lr}
   2abf0:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2abf2:	2100      	movs	r1, #0
{
   2abf4:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2abf6:	f7fe fcb7 	bl	29568 <settings_name_next>
   2abfa:	280d      	cmp	r0, #13
   2abfc:	d118      	bne.n	2ac30 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2abfe:	7b23      	ldrb	r3, [r4, #12]
   2ac00:	2b30      	cmp	r3, #48	; 0x30
   2ac02:	d111      	bne.n	2ac28 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   2ac04:	2300      	movs	r3, #0
   2ac06:	702b      	strb	r3, [r5, #0]
   2ac08:	f104 060c 	add.w	r6, r4, #12
   2ac0c:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2ac0e:	462a      	mov	r2, r5
   2ac10:	4620      	mov	r0, r4
   2ac12:	2301      	movs	r3, #1
   2ac14:	2102      	movs	r1, #2
   2ac16:	3402      	adds	r4, #2
   2ac18:	f7fd fd47 	bl	286aa <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2ac1c:	42b4      	cmp	r4, r6
   2ac1e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   2ac22:	d1f4      	bne.n	2ac0e <bt_settings_decode_key+0x20>
	return 0;
   2ac24:	2000      	movs	r0, #0
}
   2ac26:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   2ac28:	2b31      	cmp	r3, #49	; 0x31
   2ac2a:	d101      	bne.n	2ac30 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2ac2c:	2301      	movs	r3, #1
   2ac2e:	e7ea      	b.n	2ac06 <bt_settings_decode_key+0x18>
		return -EINVAL;
   2ac30:	f06f 0015 	mvn.w	r0, #21
   2ac34:	e7f7      	b.n	2ac26 <bt_settings_decode_key+0x38>

0002ac36 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2ac36:	b510      	push	{r4, lr}
   2ac38:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2ac3a:	7801      	ldrb	r1, [r0, #0]
   2ac3c:	7822      	ldrb	r2, [r4, #0]
   2ac3e:	428a      	cmp	r2, r1
{
   2ac40:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2ac42:	d00e      	beq.n	2ac62 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2ac44:	4669      	mov	r1, sp
   2ac46:	f7ea fde3 	bl	15810 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2ac4a:	a905      	add	r1, sp, #20
   2ac4c:	4620      	mov	r0, r4
   2ac4e:	f7ea fddf 	bl	15810 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2ac52:	2210      	movs	r2, #16
   2ac54:	f10d 0115 	add.w	r1, sp, #21
   2ac58:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2ac5c:	f7ff fef6 	bl	2aa4c <memcmp>
   2ac60:	e007      	b.n	2ac72 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2ac62:	2a01      	cmp	r2, #1
   2ac64:	d007      	beq.n	2ac76 <bt_uuid_cmp+0x40>
   2ac66:	2a02      	cmp	r2, #2
   2ac68:	d008      	beq.n	2ac7c <bt_uuid_cmp+0x46>
   2ac6a:	b95a      	cbnz	r2, 2ac84 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2ac6c:	8840      	ldrh	r0, [r0, #2]
   2ac6e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2ac70:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   2ac72:	b00a      	add	sp, #40	; 0x28
   2ac74:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2ac76:	6840      	ldr	r0, [r0, #4]
   2ac78:	6863      	ldr	r3, [r4, #4]
   2ac7a:	e7f9      	b.n	2ac70 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2ac7c:	2210      	movs	r2, #16
   2ac7e:	1c61      	adds	r1, r4, #1
   2ac80:	3001      	adds	r0, #1
   2ac82:	e7eb      	b.n	2ac5c <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2ac84:	f06f 0015 	mvn.w	r0, #21
   2ac88:	e7f3      	b.n	2ac72 <bt_uuid_cmp+0x3c>

0002ac8a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2ac8a:	2a04      	cmp	r2, #4
{
   2ac8c:	b538      	push	{r3, r4, r5, lr}
   2ac8e:	460c      	mov	r4, r1
	switch (data_len) {
   2ac90:	d00d      	beq.n	2acae <bt_uuid_create+0x24>
   2ac92:	2a10      	cmp	r2, #16
   2ac94:	d019      	beq.n	2acca <bt_uuid_create+0x40>
   2ac96:	2a02      	cmp	r2, #2
   2ac98:	f04f 0300 	mov.w	r3, #0
   2ac9c:	d11b      	bne.n	2acd6 <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2ac9e:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2aca0:	784a      	ldrb	r2, [r1, #1]
   2aca2:	780b      	ldrb	r3, [r1, #0]
   2aca4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2aca8:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2acaa:	2001      	movs	r0, #1
}
   2acac:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2acae:	2301      	movs	r3, #1
   2acb0:	7003      	strb	r3, [r0, #0]
   2acb2:	78a2      	ldrb	r2, [r4, #2]
   2acb4:	78c9      	ldrb	r1, [r1, #3]
   2acb6:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2acb8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2acbc:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2acbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   2acc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2acc6:	6042      	str	r2, [r0, #4]
		break;
   2acc8:	e7ef      	b.n	2acaa <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   2acca:	2302      	movs	r3, #2
   2accc:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2acd0:	f7ff fee3 	bl	2aa9a <memcpy>
		break;
   2acd4:	e7e9      	b.n	2acaa <bt_uuid_create+0x20>
	switch (data_len) {
   2acd6:	4618      	mov	r0, r3
   2acd8:	e7e8      	b.n	2acac <bt_uuid_create+0x22>

0002acda <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2acda:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2acdc:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2acde:	2106      	movs	r1, #6
{
   2ace0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2ace2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2ace6:	f7f5 fd5b 	bl	207a0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2acea:	b918      	cbnz	r0, 2acf4 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2acec:	79a3      	ldrb	r3, [r4, #6]
   2acee:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2acf2:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2acf4:	bd10      	pop	{r4, pc}

0002acf6 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2acf6:	280f      	cmp	r0, #15
   2acf8:	d806      	bhi.n	2ad08 <bt_hci_evt_get_flags+0x12>
   2acfa:	280d      	cmp	r0, #13
   2acfc:	d80b      	bhi.n	2ad16 <bt_hci_evt_get_flags+0x20>
   2acfe:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2ad00:	bf14      	ite	ne
   2ad02:	2002      	movne	r0, #2
   2ad04:	2003      	moveq	r0, #3
   2ad06:	4770      	bx	lr
	switch (evt) {
   2ad08:	2813      	cmp	r0, #19
   2ad0a:	d004      	beq.n	2ad16 <bt_hci_evt_get_flags+0x20>
   2ad0c:	281a      	cmp	r0, #26
   2ad0e:	bf14      	ite	ne
   2ad10:	2002      	movne	r0, #2
   2ad12:	2001      	moveq	r0, #1
   2ad14:	4770      	bx	lr
   2ad16:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2ad18:	4770      	bx	lr

0002ad1a <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2ad1a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2ad1e:	b193      	cbz	r3, 2ad46 <update_sec_level+0x2c>
   2ad20:	7b5a      	ldrb	r2, [r3, #13]
   2ad22:	07d1      	lsls	r1, r2, #31
   2ad24:	d50f      	bpl.n	2ad46 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2ad26:	06d2      	lsls	r2, r2, #27
   2ad28:	d50b      	bpl.n	2ad42 <update_sec_level+0x28>
   2ad2a:	7b1b      	ldrb	r3, [r3, #12]
   2ad2c:	2b10      	cmp	r3, #16
   2ad2e:	d108      	bne.n	2ad42 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2ad30:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2ad32:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2ad34:	7a82      	ldrb	r2, [r0, #10]
   2ad36:	7a40      	ldrb	r0, [r0, #9]
}
   2ad38:	4282      	cmp	r2, r0
   2ad3a:	bf8c      	ite	hi
   2ad3c:	2000      	movhi	r0, #0
   2ad3e:	2001      	movls	r0, #1
   2ad40:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2ad42:	2303      	movs	r3, #3
   2ad44:	e7f5      	b.n	2ad32 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2ad46:	2302      	movs	r3, #2
   2ad48:	e7f3      	b.n	2ad32 <update_sec_level+0x18>

0002ad4a <atomic_or>:
{
   2ad4a:	4603      	mov	r3, r0
}
   2ad4c:	f3bf 8f5b 	dmb	ish
   2ad50:	e853 0f00 	ldrex	r0, [r3]
   2ad54:	ea40 0201 	orr.w	r2, r0, r1
   2ad58:	e843 2c00 	strex	ip, r2, [r3]
   2ad5c:	f1bc 0f00 	cmp.w	ip, #0
   2ad60:	d1f6      	bne.n	2ad50 <atomic_or+0x6>
   2ad62:	f3bf 8f5b 	dmb	ish
   2ad66:	4770      	bx	lr

0002ad68 <sys_put_le64>:
	dst[1] = val >> 8;
   2ad68:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2ad6c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2ad6e:	0e00      	lsrs	r0, r0, #24
   2ad70:	7053      	strb	r3, [r2, #1]
   2ad72:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2ad74:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2ad76:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2ad7a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2ad7c:	7093      	strb	r3, [r2, #2]
   2ad7e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2ad80:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2ad82:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2ad84:	71d1      	strb	r1, [r2, #7]
}
   2ad86:	4770      	bx	lr

0002ad88 <bt_hci_disconnect>:
{
   2ad88:	b570      	push	{r4, r5, r6, lr}
   2ad8a:	4606      	mov	r6, r0
   2ad8c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2ad8e:	f240 4006 	movw	r0, #1030	; 0x406
   2ad92:	2103      	movs	r1, #3
   2ad94:	f7eb fac6 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   2ad98:	4604      	mov	r4, r0
   2ad9a:	b168      	cbz	r0, 2adb8 <bt_hci_disconnect+0x30>
   2ad9c:	2103      	movs	r1, #3
   2ad9e:	3008      	adds	r0, #8
   2ada0:	f7f2 ffb6 	bl	1dd10 <net_buf_simple_add>
	disconn->reason = reason;
   2ada4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2ada6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2ada8:	4621      	mov	r1, r4
   2adaa:	2200      	movs	r2, #0
}
   2adac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2adb0:	f240 4006 	movw	r0, #1030	; 0x406
   2adb4:	f7eb bc22 	b.w	165fc <bt_hci_cmd_send_sync>
}
   2adb8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2adbc:	bd70      	pop	{r4, r5, r6, pc}

0002adbe <bt_le_set_data_len>:
{
   2adbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2adc0:	4607      	mov	r7, r0
   2adc2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2adc4:	f242 0022 	movw	r0, #8226	; 0x2022
   2adc8:	2106      	movs	r1, #6
{
   2adca:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2adcc:	f7eb faaa 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   2add0:	4604      	mov	r4, r0
   2add2:	b170      	cbz	r0, 2adf2 <bt_le_set_data_len+0x34>
   2add4:	2106      	movs	r1, #6
   2add6:	3008      	adds	r0, #8
   2add8:	f7f2 ff9a 	bl	1dd10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2addc:	883b      	ldrh	r3, [r7, #0]
   2adde:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2ade0:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2ade2:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2ade4:	4621      	mov	r1, r4
   2ade6:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2adea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2adee:	f7eb bae1 	b.w	163b4 <bt_hci_cmd_send>
}
   2adf2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002adf8 <bt_le_set_phy>:
{
   2adf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2adfc:	4680      	mov	r8, r0
   2adfe:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2ae00:	f242 0032 	movw	r0, #8242	; 0x2032
   2ae04:	2107      	movs	r1, #7
{
   2ae06:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2ae0a:	4616      	mov	r6, r2
   2ae0c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2ae0e:	f7eb fa89 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   2ae12:	4604      	mov	r4, r0
   2ae14:	b190      	cbz	r0, 2ae3c <bt_le_set_phy+0x44>
   2ae16:	2107      	movs	r1, #7
   2ae18:	3008      	adds	r0, #8
   2ae1a:	f7f2 ff79 	bl	1dd10 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2ae1e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2ae22:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2ae24:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2ae26:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2ae28:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2ae2a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2ae2e:	4621      	mov	r1, r4
   2ae30:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2ae34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2ae38:	f7eb babc 	b.w	163b4 <bt_hci_cmd_send>
}
   2ae3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ae40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002ae44 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2ae44:	6880      	ldr	r0, [r0, #8]
   2ae46:	f7eb bd61 	b.w	1690c <bt_hci_le_enh_conn_complete>

0002ae4a <le_legacy_conn_complete>:
{
   2ae4a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2ae4c:	6881      	ldr	r1, [r0, #8]
{
   2ae4e:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   2ae50:	780b      	ldrb	r3, [r1, #0]
   2ae52:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2ae56:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2ae5a:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2ae5e:	78cb      	ldrb	r3, [r1, #3]
   2ae60:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2ae64:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2ae68:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2ae6c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2ae70:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2ae74:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2ae78:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2ae7c:	7c4b      	ldrb	r3, [r1, #17]
   2ae7e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   2ae82:	2207      	movs	r2, #7
   2ae84:	3104      	adds	r1, #4
   2ae86:	a803      	add	r0, sp, #12
   2ae88:	f7ff fe07 	bl	2aa9a <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2ae8c:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2ae8e:	4669      	mov	r1, sp
   2ae90:	2206      	movs	r2, #6
   2ae92:	f10d 0013 	add.w	r0, sp, #19
   2ae96:	9400      	str	r4, [sp, #0]
   2ae98:	f8ad 4004 	strh.w	r4, [sp, #4]
   2ae9c:	f7ff fdfd 	bl	2aa9a <memcpy>
   2aea0:	2206      	movs	r2, #6
   2aea2:	4669      	mov	r1, sp
   2aea4:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2aea8:	9400      	str	r4, [sp, #0]
   2aeaa:	f8ad 4004 	strh.w	r4, [sp, #4]
   2aeae:	f7ff fdf4 	bl	2aa9a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   2aeb2:	a802      	add	r0, sp, #8
   2aeb4:	f7eb fd2a 	bl	1690c <bt_hci_le_enh_conn_complete>
}
   2aeb8:	b00a      	add	sp, #40	; 0x28
   2aeba:	bd10      	pop	{r4, pc}

0002aebc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2aebc:	8802      	ldrh	r2, [r0, #0]
   2aebe:	8843      	ldrh	r3, [r0, #2]
   2aec0:	429a      	cmp	r2, r3
{
   2aec2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2aec4:	d818      	bhi.n	2aef8 <bt_le_conn_params_valid+0x3c>
   2aec6:	2a05      	cmp	r2, #5
   2aec8:	d916      	bls.n	2aef8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2aeca:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2aece:	d813      	bhi.n	2aef8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2aed0:	8884      	ldrh	r4, [r0, #4]
   2aed2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2aed6:	d20f      	bcs.n	2aef8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2aed8:	88c1      	ldrh	r1, [r0, #6]
   2aeda:	f1a1 020a 	sub.w	r2, r1, #10
   2aede:	b292      	uxth	r2, r2
   2aee0:	f640 4076 	movw	r0, #3190	; 0xc76
   2aee4:	4282      	cmp	r2, r0
   2aee6:	d807      	bhi.n	2aef8 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2aee8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2aeec:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2aef0:	bf34      	ite	cc
   2aef2:	2001      	movcc	r0, #1
   2aef4:	2000      	movcs	r0, #0
}
   2aef6:	bd10      	pop	{r4, pc}
		return false;
   2aef8:	2000      	movs	r0, #0
   2aefa:	e7fc      	b.n	2aef6 <bt_le_conn_params_valid+0x3a>

0002aefc <bt_send>:
		return bt_hci_ecc_send(buf);
   2aefc:	f7ea bae0 	b.w	154c0 <bt_hci_ecc_send>

0002af00 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2af00:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2af02:	f7f2 fabb 	bl	1d47c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2af06:	b118      	cbz	r0, 2af10 <bt_addr_le_is_bonded+0x10>
   2af08:	89c0      	ldrh	r0, [r0, #14]
   2af0a:	3800      	subs	r0, #0
   2af0c:	bf18      	it	ne
   2af0e:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2af10:	bd08      	pop	{r3, pc}

0002af12 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2af12:	2207      	movs	r2, #7
   2af14:	f7ff bdc1 	b.w	2aa9a <memcpy>

0002af18 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2af18:	f3bf 8f5b 	dmb	ish
   2af1c:	6800      	ldr	r0, [r0, #0]
   2af1e:	f3bf 8f5b 	dmb	ish
}
   2af22:	4770      	bx	lr

0002af24 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2af24:	f100 0310 	add.w	r3, r0, #16
   2af28:	f3bf 8f5b 	dmb	ish
   2af2c:	e853 2f00 	ldrex	r2, [r3]
   2af30:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   2af34:	e843 1c00 	strex	ip, r1, [r3]
   2af38:	f1bc 0f00 	cmp.w	ip, #0
   2af3c:	d1f6      	bne.n	2af2c <adv_unpause_enabled+0x8>
   2af3e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2af42:	0453      	lsls	r3, r2, #17
   2af44:	d502      	bpl.n	2af4c <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   2af46:	2101      	movs	r1, #1
   2af48:	f000 b97b 	b.w	2b242 <bt_le_adv_set_enable>
}
   2af4c:	4770      	bx	lr

0002af4e <addr_res_enable>:
{
   2af4e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2af50:	2101      	movs	r1, #1
{
   2af52:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2af54:	f242 002d 	movw	r0, #8237	; 0x202d
   2af58:	f7eb f9e4 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   2af5c:	4604      	mov	r4, r0
   2af5e:	b158      	cbz	r0, 2af78 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2af60:	4629      	mov	r1, r5
   2af62:	3008      	adds	r0, #8
   2af64:	f001 fd40 	bl	2c9e8 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2af68:	4621      	mov	r1, r4
   2af6a:	2200      	movs	r2, #0
}
   2af6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2af70:	f242 002d 	movw	r0, #8237	; 0x202d
   2af74:	f7eb bb42 	b.w	165fc <bt_hci_cmd_send_sync>
}
   2af78:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2af7c:	bd38      	pop	{r3, r4, r5, pc}

0002af7e <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   2af7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2af80:	4607      	mov	r7, r0
   2af82:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2af84:	f242 0027 	movw	r0, #8231	; 0x2027
   2af88:	2127      	movs	r1, #39	; 0x27
   2af8a:	f7eb f9cb 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   2af8e:	4604      	mov	r4, r0
   2af90:	b1d0      	cbz	r0, 2afc8 <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2af92:	2127      	movs	r1, #39	; 0x27
   2af94:	3008      	adds	r0, #8
   2af96:	f7f2 febb 	bl	1dd10 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2af9a:	4639      	mov	r1, r7
   2af9c:	4605      	mov	r5, r0
   2af9e:	f7ff ffb8 	bl	2af12 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   2afa2:	4631      	mov	r1, r6
   2afa4:	2210      	movs	r2, #16
   2afa6:	1de8      	adds	r0, r5, #7
   2afa8:	f7ff fd77 	bl	2aa9a <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   2afac:	2210      	movs	r2, #16
   2afae:	2100      	movs	r1, #0
   2afb0:	f105 0017 	add.w	r0, r5, #23
   2afb4:	f7ff fd7c 	bl	2aab0 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2afb8:	4621      	mov	r1, r4
   2afba:	2200      	movs	r2, #0
}
   2afbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2afc0:	f242 0027 	movw	r0, #8231	; 0x2027
   2afc4:	f7eb bb1a 	b.w	165fc <bt_hci_cmd_send_sync>
}
   2afc8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2afcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002afce <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2afce:	7a03      	ldrb	r3, [r0, #8]
   2afd0:	075b      	lsls	r3, r3, #29
   2afd2:	d504      	bpl.n	2afde <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2afd4:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   2afd8:	3001      	adds	r0, #1
   2afda:	f7ff bfd0 	b.w	2af7e <hci_id_add.isra.0>
}
   2afde:	4770      	bx	lr

0002afe0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2afe0:	f100 0210 	add.w	r2, r0, #16
{
   2afe4:	b508      	push	{r3, lr}
   2afe6:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2afe8:	4610      	mov	r0, r2
   2afea:	f7ff ff95 	bl	2af18 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2afee:	0641      	lsls	r1, r0, #25
   2aff0:	d511      	bpl.n	2b016 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2aff2:	f3bf 8f5b 	dmb	ish
   2aff6:	e852 1f00 	ldrex	r1, [r2]
   2affa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   2affe:	e842 1000 	strex	r0, r1, [r2]
   2b002:	2800      	cmp	r0, #0
   2b004:	d1f7      	bne.n	2aff6 <adv_pause_enabled+0x16>
   2b006:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   2b00a:	4618      	mov	r0, r3
   2b00c:	2100      	movs	r1, #0
}
   2b00e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   2b012:	f000 b916 	b.w	2b242 <bt_le_adv_set_enable>
}
   2b016:	bd08      	pop	{r3, pc}

0002b018 <bt_lookup_id_addr>:
{
   2b018:	b510      	push	{r4, lr}
   2b01a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2b01c:	f7f2 f9f4 	bl	1d408 <bt_keys_find_irk>
		if (keys) {
   2b020:	b100      	cbz	r0, 2b024 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2b022:	1c44      	adds	r4, r0, #1
}
   2b024:	4620      	mov	r0, r4
   2b026:	bd10      	pop	{r4, pc}

0002b028 <bt_id_set_adv_private_addr>:
{
   2b028:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2b02a:	2106      	movs	r1, #6
   2b02c:	4668      	mov	r0, sp
   2b02e:	f7f5 fbb7 	bl	207a0 <bt_rand>
	if (err) {
   2b032:	b940      	cbnz	r0, 2b046 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2b034:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   2b038:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2b03a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b03e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2b042:	f7eb fed5 	bl	16df0 <set_random_address>
}
   2b046:	b003      	add	sp, #12
   2b048:	f85d fb04 	ldr.w	pc, [sp], #4

0002b04c <bt_id_adv_random_addr_check>:
}
   2b04c:	2001      	movs	r0, #1
   2b04e:	4770      	bx	lr

0002b050 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2b050:	7a03      	ldrb	r3, [r0, #8]
   2b052:	07d9      	lsls	r1, r3, #31
   2b054:	d504      	bpl.n	2b060 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2b056:	f023 0301 	bic.w	r3, r3, #1
   2b05a:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2b05c:	f7eb bf50 	b.w	16f00 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2b060:	0799      	lsls	r1, r3, #30
   2b062:	d504      	bpl.n	2b06e <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2b064:	f023 0302 	bic.w	r3, r3, #2
   2b068:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2b06a:	f7ec b81d 	b.w	170a8 <bt_id_del>
}
   2b06e:	4770      	bx	lr

0002b070 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2b070:	2000      	movs	r0, #0
   2b072:	4770      	bx	lr

0002b074 <get_adv_channel_map>:
{
   2b074:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2b076:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2b07a:	bf0c      	ite	eq
   2b07c:	2007      	moveq	r0, #7
   2b07e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2b080:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2b082:	bf48      	it	mi
   2b084:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2b088:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2b08a:	bf48      	it	mi
   2b08c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2b090:	4770      	bx	lr

0002b092 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b092:	f3bf 8f5b 	dmb	ish
   2b096:	6800      	ldr	r0, [r0, #0]
   2b098:	f3bf 8f5b 	dmb	ish
}
   2b09c:	4770      	bx	lr

0002b09e <atomic_and>:
{
   2b09e:	4603      	mov	r3, r0
}
   2b0a0:	f3bf 8f5b 	dmb	ish
   2b0a4:	e853 0f00 	ldrex	r0, [r3]
   2b0a8:	ea00 0201 	and.w	r2, r0, r1
   2b0ac:	e843 2c00 	strex	ip, r2, [r3]
   2b0b0:	f1bc 0f00 	cmp.w	ip, #0
   2b0b4:	d1f6      	bne.n	2b0a4 <atomic_and+0x6>
   2b0b6:	f3bf 8f5b 	dmb	ish
   2b0ba:	4770      	bx	lr

0002b0bc <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b0bc:	2301      	movs	r3, #1
{
   2b0be:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2b0c0:	fa03 f101 	lsl.w	r1, r3, r1
{
   2b0c4:	4604      	mov	r4, r0
	if (val) {
   2b0c6:	b162      	cbz	r2, 2b0e2 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b0c8:	f3bf 8f5b 	dmb	ish
   2b0cc:	e854 3f00 	ldrex	r3, [r4]
   2b0d0:	430b      	orrs	r3, r1
   2b0d2:	e844 3200 	strex	r2, r3, [r4]
   2b0d6:	2a00      	cmp	r2, #0
   2b0d8:	d1f8      	bne.n	2b0cc <atomic_set_bit_to+0x10>
   2b0da:	f3bf 8f5b 	dmb	ish
	}
}
   2b0de:	bc10      	pop	{r4}
   2b0e0:	4770      	bx	lr
   2b0e2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b0e4:	43c9      	mvns	r1, r1
   2b0e6:	f7ff bfda 	b.w	2b09e <atomic_and>

0002b0ea <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2b0ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0ee:	b087      	sub	sp, #28
   2b0f0:	4605      	mov	r5, r0
   2b0f2:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2b0f6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2b0fa:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2b0fe:	460c      	mov	r4, r1
   2b100:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2b102:	2100      	movs	r1, #0
   2b104:	2210      	movs	r2, #16
   2b106:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2b108:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   2b10a:	f7ff fcd1 	bl	2aab0 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2b10e:	b186      	cbz	r6, 2b132 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2b110:	f7eb fe50 	bl	16db4 <bt_get_name>
   2b114:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2b116:	2c00      	cmp	r4, #0
   2b118:	d139      	bne.n	2b18e <le_adv_update.constprop.0+0xa4>
   2b11a:	2f00      	cmp	r7, #0
   2b11c:	d142      	bne.n	2b1a4 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2b11e:	4658      	mov	r0, fp
   2b120:	f7ff fc60 	bl	2a9e4 <strlen>
   2b124:	2309      	movs	r3, #9
   2b126:	f88d 3000 	strb.w	r3, [sp]
   2b12a:	f88d 0001 	strb.w	r0, [sp, #1]
   2b12e:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2b132:	2e01      	cmp	r6, #1
			d_len = 2;
   2b134:	bf0c      	ite	eq
   2b136:	2202      	moveq	r2, #2
		d_len = 1;
   2b138:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2b13a:	a902      	add	r1, sp, #8
   2b13c:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   2b140:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   2b144:	bf04      	itt	eq
   2b146:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   2b14a:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2b14c:	f7ec fa18 	bl	17580 <hci_set_ad>
		if (err) {
   2b150:	4604      	mov	r4, r0
   2b152:	b978      	cbnz	r0, 2b174 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   2b154:	f1ba 0f00 	cmp.w	sl, #0
   2b158:	d126      	bne.n	2b1a8 <le_adv_update.constprop.0+0xbe>
   2b15a:	3510      	adds	r5, #16
   2b15c:	f3bf 8f5b 	dmb	ish
   2b160:	e855 3f00 	ldrex	r3, [r5]
   2b164:	f043 0304 	orr.w	r3, r3, #4
   2b168:	e845 3200 	strex	r2, r3, [r5]
   2b16c:	2a00      	cmp	r2, #0
   2b16e:	d1f7      	bne.n	2b160 <le_adv_update.constprop.0+0x76>
   2b170:	f3bf 8f5b 	dmb	ish
}
   2b174:	4620      	mov	r0, r4
   2b176:	b007      	add	sp, #28
   2b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2b17c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2b180:	3a08      	subs	r2, #8
   2b182:	2a01      	cmp	r2, #1
   2b184:	d925      	bls.n	2b1d2 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2b186:	3301      	adds	r3, #1
   2b188:	4598      	cmp	r8, r3
   2b18a:	d1f7      	bne.n	2b17c <le_adv_update.constprop.0+0x92>
   2b18c:	e7c5      	b.n	2b11a <le_adv_update.constprop.0+0x30>
   2b18e:	2300      	movs	r3, #0
   2b190:	e7fa      	b.n	2b188 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2b192:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2b196:	3a08      	subs	r2, #8
   2b198:	2a01      	cmp	r2, #1
   2b19a:	d91a      	bls.n	2b1d2 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2b19c:	3301      	adds	r3, #1
   2b19e:	4599      	cmp	r9, r3
   2b1a0:	d1f7      	bne.n	2b192 <le_adv_update.constprop.0+0xa8>
   2b1a2:	e7bc      	b.n	2b11e <le_adv_update.constprop.0+0x34>
   2b1a4:	2300      	movs	r3, #0
   2b1a6:	e7fa      	b.n	2b19e <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   2b1a8:	2e02      	cmp	r6, #2
   2b1aa:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2b1ae:	bf08      	it	eq
   2b1b0:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2b1b2:	a902      	add	r1, sp, #8
			d_len = 2;
   2b1b4:	bf08      	it	eq
   2b1b6:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2b1b8:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2b1bc:	bf08      	it	eq
   2b1be:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2b1c2:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2b1c6:	f7ec f9db 	bl	17580 <hci_set_ad>
		if (err) {
   2b1ca:	2800      	cmp	r0, #0
   2b1cc:	d0c5      	beq.n	2b15a <le_adv_update.constprop.0+0x70>
   2b1ce:	4604      	mov	r4, r0
   2b1d0:	e7d0      	b.n	2b174 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   2b1d2:	f06f 0415 	mvn.w	r4, #21
   2b1d6:	e7cd      	b.n	2b174 <le_adv_update.constprop.0+0x8a>

0002b1d8 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2b1d8:	6843      	ldr	r3, [r0, #4]
   2b1da:	f013 0008 	ands.w	r0, r3, #8
   2b1de:	d00a      	beq.n	2b1f6 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2b1e0:	035a      	lsls	r2, r3, #13
   2b1e2:	d407      	bmi.n	2b1f4 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2b1e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   2b1e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   2b1ec:	bf0c      	ite	eq
   2b1ee:	2001      	moveq	r0, #1
   2b1f0:	2002      	movne	r0, #2
   2b1f2:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2b1f4:	2001      	movs	r0, #1
}
   2b1f6:	4770      	bx	lr

0002b1f8 <bt_le_adv_set_enable_legacy>:
{
   2b1f8:	b570      	push	{r4, r5, r6, lr}
   2b1fa:	4606      	mov	r6, r0
   2b1fc:	b086      	sub	sp, #24
   2b1fe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2b200:	f242 000a 	movw	r0, #8202	; 0x200a
   2b204:	2101      	movs	r1, #1
   2b206:	f7eb f88d 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   2b20a:	4604      	mov	r4, r0
   2b20c:	b1b0      	cbz	r0, 2b23c <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   2b20e:	3008      	adds	r0, #8
   2b210:	b195      	cbz	r5, 2b238 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   2b212:	2101      	movs	r1, #1
   2b214:	f001 fbe8 	bl	2c9e8 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2b218:	f106 0210 	add.w	r2, r6, #16
   2b21c:	a903      	add	r1, sp, #12
   2b21e:	4620      	mov	r0, r4
   2b220:	9500      	str	r5, [sp, #0]
   2b222:	2306      	movs	r3, #6
   2b224:	f7eb f86c 	bl	16300 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2b228:	2200      	movs	r2, #0
   2b22a:	4621      	mov	r1, r4
   2b22c:	f242 000a 	movw	r0, #8202	; 0x200a
   2b230:	f7eb f9e4 	bl	165fc <bt_hci_cmd_send_sync>
}
   2b234:	b006      	add	sp, #24
   2b236:	bd70      	pop	{r4, r5, r6, pc}
   2b238:	4629      	mov	r1, r5
   2b23a:	e7eb      	b.n	2b214 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2b23c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b240:	e7f8      	b.n	2b234 <bt_le_adv_set_enable_legacy+0x3c>

0002b242 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2b242:	f7ff bfd9 	b.w	2b1f8 <bt_le_adv_set_enable_legacy>

0002b246 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2b246:	3018      	adds	r0, #24
   2b248:	f7f8 b948 	b.w	234dc <k_work_cancel_delayable>

0002b24c <tx_notify>:
{
   2b24c:	b570      	push	{r4, r5, r6, lr}
   2b24e:	4604      	mov	r4, r0
	__asm__ volatile(
   2b250:	f04f 0240 	mov.w	r2, #64	; 0x40
   2b254:	f3ef 8311 	mrs	r3, BASEPRI
   2b258:	f382 8812 	msr	BASEPRI_MAX, r2
   2b25c:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2b260:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2b262:	b920      	cbnz	r0, 2b26e <tx_notify+0x22>
	__asm__ volatile(
   2b264:	f383 8811 	msr	BASEPRI, r3
   2b268:	f3bf 8f6f 	isb	sy
}
   2b26c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b26e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2b270:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2b272:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b274:	4288      	cmp	r0, r1
	list->tail = node;
   2b276:	bf08      	it	eq
   2b278:	6262      	streq	r2, [r4, #36]	; 0x24
   2b27a:	f383 8811 	msr	BASEPRI, r3
   2b27e:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2b282:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2b286:	f7ec fda5 	bl	17dd4 <tx_free>
		cb(conn, user_data);
   2b28a:	4631      	mov	r1, r6
   2b28c:	4620      	mov	r0, r4
   2b28e:	47a8      	blx	r5
	while (1) {
   2b290:	e7de      	b.n	2b250 <tx_notify+0x4>

0002b292 <tx_complete_work>:
	tx_notify(conn);
   2b292:	3828      	subs	r0, #40	; 0x28
   2b294:	f7ff bfda 	b.w	2b24c <tx_notify>

0002b298 <bt_conn_reset_rx_state>:
{
   2b298:	b510      	push	{r4, lr}
   2b29a:	4604      	mov	r4, r0
	if (!conn->rx) {
   2b29c:	6900      	ldr	r0, [r0, #16]
   2b29e:	b118      	cbz	r0, 2b2a8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2b2a0:	f7f2 fc06 	bl	1dab0 <net_buf_unref>
	conn->rx = NULL;
   2b2a4:	2300      	movs	r3, #0
   2b2a6:	6123      	str	r3, [r4, #16]
}
   2b2a8:	bd10      	pop	{r4, pc}

0002b2aa <bt_conn_ref>:
{
   2b2aa:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2b2ac:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b2b0:	f3bf 8f5b 	dmb	ish
   2b2b4:	6813      	ldr	r3, [r2, #0]
   2b2b6:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2b2ba:	b17b      	cbz	r3, 2b2dc <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2b2bc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2b2c0:	1c59      	adds	r1, r3, #1
   2b2c2:	e852 4f00 	ldrex	r4, [r2]
   2b2c6:	429c      	cmp	r4, r3
   2b2c8:	d104      	bne.n	2b2d4 <bt_conn_ref+0x2a>
   2b2ca:	e842 1c00 	strex	ip, r1, [r2]
   2b2ce:	f1bc 0f00 	cmp.w	ip, #0
   2b2d2:	d1f6      	bne.n	2b2c2 <bt_conn_ref+0x18>
   2b2d4:	f3bf 8f5b 	dmb	ish
   2b2d8:	d1ea      	bne.n	2b2b0 <bt_conn_ref+0x6>
}
   2b2da:	bd10      	pop	{r4, pc}
			return NULL;
   2b2dc:	4618      	mov	r0, r3
   2b2de:	e7fc      	b.n	2b2da <bt_conn_ref+0x30>

0002b2e0 <conn_lookup_handle>:
{
   2b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b2e4:	4607      	mov	r7, r0
   2b2e6:	460e      	mov	r6, r1
   2b2e8:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2b2ea:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2b2ec:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2b2f0:	42b4      	cmp	r4, r6
   2b2f2:	d103      	bne.n	2b2fc <conn_lookup_handle+0x1c>
	return NULL;
   2b2f4:	2300      	movs	r3, #0
}
   2b2f6:	4618      	mov	r0, r3
   2b2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2b2fc:	fb09 7004 	mla	r0, r9, r4, r7
   2b300:	f7ff ffd3 	bl	2b2aa <bt_conn_ref>
   2b304:	4603      	mov	r3, r0
		if (!conn) {
   2b306:	b158      	cbz	r0, 2b320 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2b308:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2b30a:	2d01      	cmp	r5, #1
   2b30c:	d002      	beq.n	2b314 <conn_lookup_handle+0x34>
   2b30e:	3d07      	subs	r5, #7
   2b310:	2d01      	cmp	r5, #1
   2b312:	d803      	bhi.n	2b31c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2b314:	881a      	ldrh	r2, [r3, #0]
   2b316:	4542      	cmp	r2, r8
   2b318:	d0ed      	beq.n	2b2f6 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2b31a:	4618      	mov	r0, r3
   2b31c:	f7ed f80c 	bl	18338 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2b320:	3401      	adds	r4, #1
   2b322:	e7e5      	b.n	2b2f0 <conn_lookup_handle+0x10>

0002b324 <bt_conn_connected>:
{
   2b324:	b510      	push	{r4, lr}
   2b326:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2b328:	f7ed fd5e 	bl	18de8 <bt_l2cap_connected>
	notify_connected(conn);
   2b32c:	4620      	mov	r0, r4
}
   2b32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2b332:	f7ec bd59 	b.w	17de8 <notify_connected>

0002b336 <bt_conn_disconnect>:
{
   2b336:	b538      	push	{r3, r4, r5, lr}
   2b338:	7b43      	ldrb	r3, [r0, #13]
   2b33a:	3b02      	subs	r3, #2
   2b33c:	4604      	mov	r4, r0
   2b33e:	2b06      	cmp	r3, #6
   2b340:	d805      	bhi.n	2b34e <bt_conn_disconnect+0x18>
   2b342:	e8df f003 	tbb	[pc, r3]
   2b346:	0408      	.short	0x0408
   2b348:	0e0c0404 	.word	0x0e0c0404
   2b34c:	0c          	.byte	0x0c
   2b34d:	00          	.byte	0x00
	switch (conn->state) {
   2b34e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2b352:	4628      	mov	r0, r5
   2b354:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   2b356:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b358:	2100      	movs	r1, #0
   2b35a:	f7ed f831 	bl	183c0 <bt_conn_set_state>
		return 0;
   2b35e:	2500      	movs	r5, #0
   2b360:	e7f7      	b.n	2b352 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   2b362:	8800      	ldrh	r0, [r0, #0]
   2b364:	f7ff fd10 	bl	2ad88 <bt_hci_disconnect>
	if (err) {
   2b368:	4605      	mov	r5, r0
   2b36a:	2800      	cmp	r0, #0
   2b36c:	d1f1      	bne.n	2b352 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   2b36e:	7b63      	ldrb	r3, [r4, #13]
   2b370:	2b07      	cmp	r3, #7
   2b372:	d1ee      	bne.n	2b352 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2b374:	2108      	movs	r1, #8
   2b376:	4620      	mov	r0, r4
   2b378:	f7ed f822 	bl	183c0 <bt_conn_set_state>
   2b37c:	e7e9      	b.n	2b352 <bt_conn_disconnect+0x1c>

0002b37e <bt_conn_set_security>:
{
   2b37e:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2b380:	7b43      	ldrb	r3, [r0, #13]
   2b382:	2b07      	cmp	r3, #7
{
   2b384:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2b386:	d128      	bne.n	2b3da <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2b388:	7a43      	ldrb	r3, [r0, #9]
   2b38a:	428b      	cmp	r3, r1
   2b38c:	d228      	bcs.n	2b3e0 <bt_conn_set_security+0x62>
   2b38e:	7a83      	ldrb	r3, [r0, #10]
   2b390:	428b      	cmp	r3, r1
   2b392:	d225      	bcs.n	2b3e0 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b394:	f3bf 8f5b 	dmb	ish
	if (val) {
   2b398:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2b39a:	f100 0304 	add.w	r3, r0, #4
   2b39e:	d513      	bpl.n	2b3c8 <bt_conn_set_security+0x4a>
   2b3a0:	e853 2f00 	ldrex	r2, [r3]
   2b3a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2b3a8:	e843 2000 	strex	r0, r2, [r3]
   2b3ac:	2800      	cmp	r0, #0
   2b3ae:	d1f7      	bne.n	2b3a0 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b3b0:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2b3b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2b3b8:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   2b3ba:	4620      	mov	r0, r4
   2b3bc:	f7f1 fab4 	bl	1c928 <bt_smp_start_security>
	if (err) {
   2b3c0:	b108      	cbz	r0, 2b3c6 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   2b3c2:	7a63      	ldrb	r3, [r4, #9]
   2b3c4:	72a3      	strb	r3, [r4, #10]
}
   2b3c6:	bd10      	pop	{r4, pc}
   2b3c8:	e853 2f00 	ldrex	r2, [r3]
   2b3cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2b3d0:	e843 2000 	strex	r0, r2, [r3]
   2b3d4:	2800      	cmp	r0, #0
   2b3d6:	d0eb      	beq.n	2b3b0 <bt_conn_set_security+0x32>
   2b3d8:	e7f6      	b.n	2b3c8 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   2b3da:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b3de:	e7f2      	b.n	2b3c6 <bt_conn_set_security+0x48>
		return 0;
   2b3e0:	2000      	movs	r0, #0
   2b3e2:	e7f0      	b.n	2b3c6 <bt_conn_set_security+0x48>

0002b3e4 <bt_conn_get_security>:
}
   2b3e4:	7a40      	ldrb	r0, [r0, #9]
   2b3e6:	4770      	bx	lr

0002b3e8 <bt_conn_is_peer_addr_le>:
{
   2b3e8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2b3ea:	7a03      	ldrb	r3, [r0, #8]
   2b3ec:	428b      	cmp	r3, r1
{
   2b3ee:	4604      	mov	r4, r0
   2b3f0:	4615      	mov	r5, r2
	if (id != conn->id) {
   2b3f2:	d115      	bne.n	2b420 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2b3f4:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2b3f8:	2207      	movs	r2, #7
   2b3fa:	4628      	mov	r0, r5
   2b3fc:	f7ff fb26 	bl	2aa4c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2b400:	b180      	cbz	r0, 2b424 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2b402:	78e3      	ldrb	r3, [r4, #3]
   2b404:	2207      	movs	r2, #7
   2b406:	b943      	cbnz	r3, 2b41a <bt_conn_is_peer_addr_le+0x32>
   2b408:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2b40c:	4628      	mov	r0, r5
   2b40e:	f7ff fb1d 	bl	2aa4c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2b412:	fab0 f080 	clz	r0, r0
   2b416:	0940      	lsrs	r0, r0, #5
}
   2b418:	bd38      	pop	{r3, r4, r5, pc}
   2b41a:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2b41e:	e7f5      	b.n	2b40c <bt_conn_is_peer_addr_le+0x24>
		return false;
   2b420:	2000      	movs	r0, #0
   2b422:	e7f9      	b.n	2b418 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2b424:	2001      	movs	r0, #1
   2b426:	e7f7      	b.n	2b418 <bt_conn_is_peer_addr_le+0x30>

0002b428 <bt_conn_get_dst>:
}
   2b428:	3090      	adds	r0, #144	; 0x90
   2b42a:	4770      	bx	lr

0002b42c <bt_conn_le_conn_update>:
{
   2b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b42e:	4607      	mov	r7, r0
   2b430:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2b432:	f242 0013 	movw	r0, #8211	; 0x2013
   2b436:	210e      	movs	r1, #14
   2b438:	f7ea ff74 	bl	16324 <bt_hci_cmd_create>
	if (!buf) {
   2b43c:	4606      	mov	r6, r0
   2b43e:	b1d0      	cbz	r0, 2b476 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2b440:	210e      	movs	r1, #14
   2b442:	3008      	adds	r0, #8
   2b444:	f7f2 fc64 	bl	1dd10 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2b448:	220e      	movs	r2, #14
   2b44a:	4604      	mov	r4, r0
   2b44c:	2100      	movs	r1, #0
   2b44e:	f7ff fb2f 	bl	2aab0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2b452:	883b      	ldrh	r3, [r7, #0]
   2b454:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2b456:	882b      	ldrh	r3, [r5, #0]
   2b458:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2b45a:	886b      	ldrh	r3, [r5, #2]
   2b45c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2b45e:	88ab      	ldrh	r3, [r5, #4]
   2b460:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2b462:	88eb      	ldrh	r3, [r5, #6]
   2b464:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b466:	4631      	mov	r1, r6
   2b468:	2200      	movs	r2, #0
}
   2b46a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b46e:	f242 0013 	movw	r0, #8211	; 0x2013
   2b472:	f7eb b8c3 	b.w	165fc <bt_hci_cmd_send_sync>
}
   2b476:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b47c <l2cap_connected>:
}
   2b47c:	4770      	bx	lr

0002b47e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2b47e:	3010      	adds	r0, #16
   2b480:	f7f8 b82c 	b.w	234dc <k_work_cancel_delayable>

0002b484 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b484:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2b486:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b488:	b17b      	cbz	r3, 2b4aa <bt_l2cap_chan_remove+0x26>
   2b48a:	3b08      	subs	r3, #8
   2b48c:	2200      	movs	r2, #0
   2b48e:	b163      	cbz	r3, 2b4aa <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2b490:	428b      	cmp	r3, r1
   2b492:	f103 0408 	add.w	r4, r3, #8
   2b496:	d10f      	bne.n	2b4b8 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2b498:	688b      	ldr	r3, [r1, #8]
   2b49a:	b93a      	cbnz	r2, 2b4ac <bt_l2cap_chan_remove+0x28>
   2b49c:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   2b49e:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2b4a0:	4294      	cmp	r4, r2
   2b4a2:	d100      	bne.n	2b4a6 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2b4a4:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   2b4a6:	2300      	movs	r3, #0
   2b4a8:	608b      	str	r3, [r1, #8]
}
   2b4aa:	bd10      	pop	{r4, pc}
   2b4ac:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b4ae:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2b4b0:	429c      	cmp	r4, r3
	list->tail = node;
   2b4b2:	bf08      	it	eq
   2b4b4:	6582      	streq	r2, [r0, #88]	; 0x58
}
   2b4b6:	e7f6      	b.n	2b4a6 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b4b8:	2c00      	cmp	r4, #0
   2b4ba:	d0f6      	beq.n	2b4aa <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b4bc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b4be:	2b00      	cmp	r3, #0
   2b4c0:	d0f3      	beq.n	2b4aa <bt_l2cap_chan_remove+0x26>
   2b4c2:	3b08      	subs	r3, #8
   2b4c4:	4622      	mov	r2, r4
   2b4c6:	e7e2      	b.n	2b48e <bt_l2cap_chan_remove+0xa>

0002b4c8 <bt_l2cap_chan_del>:
{
   2b4c8:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2b4ca:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2b4ce:	4604      	mov	r4, r0
	if (!chan->conn) {
   2b4d0:	b123      	cbz	r3, 2b4dc <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2b4d2:	686b      	ldr	r3, [r5, #4]
   2b4d4:	b103      	cbz	r3, 2b4d8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2b4d6:	4798      	blx	r3
	chan->conn = NULL;
   2b4d8:	2300      	movs	r3, #0
   2b4da:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2b4dc:	68e3      	ldr	r3, [r4, #12]
   2b4de:	b10b      	cbz	r3, 2b4e4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2b4e0:	4620      	mov	r0, r4
   2b4e2:	4798      	blx	r3
	if (ops->released) {
   2b4e4:	69eb      	ldr	r3, [r5, #28]
   2b4e6:	b11b      	cbz	r3, 2b4f0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2b4e8:	4620      	mov	r0, r4
}
   2b4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2b4ee:	4718      	bx	r3
}
   2b4f0:	bd70      	pop	{r4, r5, r6, pc}

0002b4f2 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b4f2:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2b4f4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b4f6:	b18b      	cbz	r3, 2b51c <bt_l2cap_disconnected+0x2a>
   2b4f8:	f1b3 0008 	subs.w	r0, r3, #8
   2b4fc:	d00e      	beq.n	2b51c <bt_l2cap_disconnected+0x2a>
   2b4fe:	681c      	ldr	r4, [r3, #0]
   2b500:	b104      	cbz	r4, 2b504 <bt_l2cap_disconnected+0x12>
   2b502:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2b504:	f7ff ffe0 	bl	2b4c8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b508:	b144      	cbz	r4, 2b51c <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b50a:	f114 0308 	adds.w	r3, r4, #8
   2b50e:	d002      	beq.n	2b516 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b510:	68a3      	ldr	r3, [r4, #8]
   2b512:	b103      	cbz	r3, 2b516 <bt_l2cap_disconnected+0x24>
   2b514:	3b08      	subs	r3, #8
{
   2b516:	4620      	mov	r0, r4
   2b518:	461c      	mov	r4, r3
   2b51a:	e7f3      	b.n	2b504 <bt_l2cap_disconnected+0x12>
}
   2b51c:	bd10      	pop	{r4, pc}

0002b51e <bt_l2cap_security_changed>:
{
   2b51e:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b520:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2b522:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b524:	b1a3      	cbz	r3, 2b550 <bt_l2cap_security_changed+0x32>
   2b526:	f1b3 0008 	subs.w	r0, r3, #8
   2b52a:	d011      	beq.n	2b550 <bt_l2cap_security_changed+0x32>
   2b52c:	681c      	ldr	r4, [r3, #0]
   2b52e:	b104      	cbz	r4, 2b532 <bt_l2cap_security_changed+0x14>
   2b530:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2b532:	6843      	ldr	r3, [r0, #4]
   2b534:	689b      	ldr	r3, [r3, #8]
   2b536:	b10b      	cbz	r3, 2b53c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2b538:	4629      	mov	r1, r5
   2b53a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b53c:	b144      	cbz	r4, 2b550 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b53e:	f114 0308 	adds.w	r3, r4, #8
   2b542:	d002      	beq.n	2b54a <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b544:	68a3      	ldr	r3, [r4, #8]
   2b546:	b103      	cbz	r3, 2b54a <bt_l2cap_security_changed+0x2c>
   2b548:	3b08      	subs	r3, #8
{
   2b54a:	4620      	mov	r0, r4
   2b54c:	461c      	mov	r4, r3
   2b54e:	e7f0      	b.n	2b532 <bt_l2cap_security_changed+0x14>
}
   2b550:	bd38      	pop	{r3, r4, r5, pc}

0002b552 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2b552:	3104      	adds	r1, #4
   2b554:	f7ed b840 	b.w	185d8 <bt_conn_create_pdu_timeout>

0002b558 <bt_l2cap_send_cb>:
{
   2b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b55c:	4614      	mov	r4, r2
   2b55e:	4605      	mov	r5, r0
   2b560:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2b562:	f102 0008 	add.w	r0, r2, #8
   2b566:	2104      	movs	r1, #4
   2b568:	461e      	mov	r6, r3
   2b56a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2b56e:	f7f2 fb6b 	bl	1dc48 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b572:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2b574:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b576:	3a04      	subs	r2, #4
   2b578:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2b57a:	4643      	mov	r3, r8
   2b57c:	4632      	mov	r2, r6
   2b57e:	4621      	mov	r1, r4
   2b580:	4628      	mov	r0, r5
}
   2b582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2b586:	f7ec be35 	b.w	181f4 <bt_conn_send_cb>

0002b58a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b58a:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2b58c:	b160      	cbz	r0, 2b5a8 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2b58e:	3808      	subs	r0, #8
   2b590:	b900      	cbnz	r0, 2b594 <bt_l2cap_le_lookup_tx_cid+0xa>
   2b592:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2b594:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2b598:	428b      	cmp	r3, r1
   2b59a:	d005      	beq.n	2b5a8 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b59c:	f110 0308 	adds.w	r3, r0, #8
   2b5a0:	d001      	beq.n	2b5a6 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b5a2:	6880      	ldr	r0, [r0, #8]
   2b5a4:	e7f2      	b.n	2b58c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2b5a6:	4618      	mov	r0, r3
}
   2b5a8:	4770      	bx	lr

0002b5aa <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b5aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2b5ac:	b160      	cbz	r0, 2b5c8 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2b5ae:	3808      	subs	r0, #8
   2b5b0:	b900      	cbnz	r0, 2b5b4 <bt_l2cap_le_lookup_rx_cid+0xa>
   2b5b2:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2b5b4:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2b5b8:	428b      	cmp	r3, r1
   2b5ba:	d005      	beq.n	2b5c8 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b5bc:	f110 0308 	adds.w	r3, r0, #8
   2b5c0:	d001      	beq.n	2b5c6 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b5c2:	6880      	ldr	r0, [r0, #8]
   2b5c4:	e7f2      	b.n	2b5ac <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2b5c6:	4618      	mov	r0, r3
}
   2b5c8:	4770      	bx	lr

0002b5ca <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2b5ca:	4770      	bx	lr

0002b5cc <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2b5cc:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2b5ce:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2b5d0:	b128      	cbz	r0, 2b5de <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b5d2:	6859      	ldr	r1, [r3, #4]
   2b5d4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2b5d6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b5d8:	4288      	cmp	r0, r1
	list->tail = node;
   2b5da:	bf08      	it	eq
   2b5dc:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2b5de:	4770      	bx	lr

0002b5e0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b5e0:	4603      	mov	r3, r0
   2b5e2:	6800      	ldr	r0, [r0, #0]
   2b5e4:	2200      	movs	r2, #0
   2b5e6:	b900      	cbnz	r0, 2b5ea <sys_slist_find_and_remove+0xa>
   2b5e8:	4770      	bx	lr
   2b5ea:	4288      	cmp	r0, r1
   2b5ec:	d110      	bne.n	2b610 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2b5ee:	6808      	ldr	r0, [r1, #0]
   2b5f0:	b942      	cbnz	r2, 2b604 <sys_slist_find_and_remove+0x24>
   2b5f2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2b5f4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b5f6:	4291      	cmp	r1, r2
   2b5f8:	d100      	bne.n	2b5fc <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2b5fa:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2b5fc:	2300      	movs	r3, #0
   2b5fe:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b600:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2b602:	4770      	bx	lr
	parent->next = child;
   2b604:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b606:	6858      	ldr	r0, [r3, #4]
   2b608:	4281      	cmp	r1, r0
	list->tail = node;
   2b60a:	bf08      	it	eq
   2b60c:	605a      	streq	r2, [r3, #4]
}
   2b60e:	e7f5      	b.n	2b5fc <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b610:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b612:	6800      	ldr	r0, [r0, #0]
   2b614:	e7e7      	b.n	2b5e6 <sys_slist_find_and_remove+0x6>

0002b616 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2b616:	4603      	mov	r3, r0
	size_t bytes = 0;
   2b618:	2000      	movs	r0, #0

	while (buf) {
   2b61a:	b903      	cbnz	r3, 2b61e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2b61c:	4770      	bx	lr
		bytes += buf->len;
   2b61e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2b620:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2b622:	4410      	add	r0, r2
		buf = buf->frags;
   2b624:	e7f9      	b.n	2b61a <net_buf_frags_len+0x4>

0002b626 <att_sent>:
	if (chan->ops->sent) {
   2b626:	684b      	ldr	r3, [r1, #4]
   2b628:	695b      	ldr	r3, [r3, #20]
{
   2b62a:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2b62c:	b103      	cbz	r3, 2b630 <att_sent+0xa>
		chan->ops->sent(chan);
   2b62e:	4718      	bx	r3
}
   2b630:	4770      	bx	lr

0002b632 <attr_read_type_cb>:
{
   2b632:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2b634:	68d4      	ldr	r4, [r2, #12]
   2b636:	7823      	ldrb	r3, [r4, #0]
   2b638:	3102      	adds	r1, #2
   2b63a:	b913      	cbnz	r3, 2b642 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2b63c:	7021      	strb	r1, [r4, #0]
	return true;
   2b63e:	2001      	movs	r0, #1
   2b640:	e006      	b.n	2b650 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2b642:	428b      	cmp	r3, r1
   2b644:	d0fb      	beq.n	2b63e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2b646:	8983      	ldrh	r3, [r0, #12]
   2b648:	3b02      	subs	r3, #2
   2b64a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2b64c:	2000      	movs	r0, #0
   2b64e:	6110      	str	r0, [r2, #16]
}
   2b650:	bd10      	pop	{r4, pc}

0002b652 <att_prepare_write_req>:
}
   2b652:	2006      	movs	r0, #6
   2b654:	4770      	bx	lr

0002b656 <att_op_get_type>:
	switch (op) {
   2b656:	281e      	cmp	r0, #30
   2b658:	d816      	bhi.n	2b688 <att_op_get_type+0x32>
   2b65a:	b308      	cbz	r0, 2b6a0 <att_op_get_type+0x4a>
   2b65c:	1e43      	subs	r3, r0, #1
   2b65e:	2b1d      	cmp	r3, #29
   2b660:	d81e      	bhi.n	2b6a0 <att_op_get_type+0x4a>
   2b662:	e8df f003 	tbb	[pc, r3]
   2b666:	2317      	.short	0x2317
   2b668:	23172317 	.word	0x23172317
   2b66c:	23172317 	.word	0x23172317
   2b670:	23172317 	.word	0x23172317
   2b674:	23172317 	.word	0x23172317
   2b678:	231d1d17 	.word	0x231d1d17
   2b67c:	1d172317 	.word	0x1d172317
   2b680:	0f1b1d19 	.word	0x0f1b1d19
   2b684:	2004      	movs	r0, #4
   2b686:	4770      	bx	lr
   2b688:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2b68c:	2b52      	cmp	r3, #82	; 0x52
   2b68e:	d107      	bne.n	2b6a0 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2b690:	2000      	movs	r0, #0
}
   2b692:	4770      	bx	lr
		return ATT_RESPONSE;
   2b694:	2002      	movs	r0, #2
   2b696:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2b698:	2003      	movs	r0, #3
   2b69a:	4770      	bx	lr
		return ATT_INDICATION;
   2b69c:	2005      	movs	r0, #5
   2b69e:	4770      	bx	lr
		return ATT_COMMAND;
   2b6a0:	f010 0f40 	tst.w	r0, #64	; 0x40
   2b6a4:	bf0c      	ite	eq
   2b6a6:	2006      	moveq	r0, #6
   2b6a8:	2000      	movne	r0, #0
   2b6aa:	4770      	bx	lr
		return ATT_REQUEST;
   2b6ac:	2001      	movs	r0, #1
   2b6ae:	4770      	bx	lr

0002b6b0 <chan_req_send>:
{
   2b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b6b2:	688f      	ldr	r7, [r1, #8]
{
   2b6b4:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b6b6:	4638      	mov	r0, r7
{
   2b6b8:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b6ba:	f7ff ffac 	bl	2b616 <net_buf_frags_len>
   2b6be:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2b6c2:	4283      	cmp	r3, r0
   2b6c4:	d30d      	bcc.n	2b6e2 <chan_req_send+0x32>
	req->buf = NULL;
   2b6c6:	2600      	movs	r6, #0
	chan->req = req;
   2b6c8:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   2b6cc:	4632      	mov	r2, r6
	req->buf = NULL;
   2b6ce:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2b6d0:	4620      	mov	r0, r4
   2b6d2:	4639      	mov	r1, r7
   2b6d4:	f7ed fd04 	bl	190e0 <chan_send>
	if (err) {
   2b6d8:	b110      	cbz	r0, 2b6e0 <chan_req_send+0x30>
		req->buf = buf;
   2b6da:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2b6dc:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
}
   2b6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2b6e2:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b6e6:	e7fb      	b.n	2b6e0 <chan_req_send+0x30>

0002b6e8 <process_queue>:
{
   2b6e8:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2b6ea:	2200      	movs	r2, #0
{
   2b6ec:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2b6ee:	2300      	movs	r3, #0
   2b6f0:	4608      	mov	r0, r1
{
   2b6f2:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2b6f4:	f7f2 f94a 	bl	1d98c <net_buf_get>
	if (buf) {
   2b6f8:	4605      	mov	r5, r0
   2b6fa:	b160      	cbz	r0, 2b716 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2b6fc:	4601      	mov	r1, r0
   2b6fe:	2200      	movs	r2, #0
   2b700:	4620      	mov	r0, r4
   2b702:	f7ed fced 	bl	190e0 <chan_send>
		if (err) {
   2b706:	4604      	mov	r4, r0
   2b708:	b118      	cbz	r0, 2b712 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2b70a:	4629      	mov	r1, r5
   2b70c:	4630      	mov	r0, r6
   2b70e:	f001 fdf6 	bl	2d2fe <k_queue_prepend>
}
   2b712:	4620      	mov	r0, r4
   2b714:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2b716:	f06f 0401 	mvn.w	r4, #1
   2b71a:	e7fa      	b.n	2b712 <process_queue+0x2a>

0002b71c <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2b71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2b71e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2b722:	2300      	movs	r3, #0
   2b724:	9300      	str	r3, [sp, #0]
   2b726:	461a      	mov	r2, r3
   2b728:	f7ef fac4 	bl	1acb4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2b72c:	b005      	add	sp, #20
   2b72e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b732 <att_chan_read>:
{
   2b732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b736:	4680      	mov	r8, r0
   2b738:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b73a:	4610      	mov	r0, r2
{
   2b73c:	4699      	mov	r9, r3
   2b73e:	468b      	mov	fp, r1
   2b740:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b742:	f7ff ff68 	bl	2b616 <net_buf_frags_len>
   2b746:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2b74a:	4283      	cmp	r3, r0
   2b74c:	d97a      	bls.n	2b844 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2b74e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2b752:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2b754:	4630      	mov	r0, r6
   2b756:	f7f2 fa0b 	bl	1db70 <net_buf_frag_last>
	size_t len, total = 0;
   2b75a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2b75e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b760:	4630      	mov	r0, r6
   2b762:	f7ff ff58 	bl	2b616 <net_buf_frags_len>
   2b766:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2b76a:	f105 0708 	add.w	r7, r5, #8
   2b76e:	1a24      	subs	r4, r4, r0
   2b770:	4638      	mov	r0, r7
   2b772:	f001 f925 	bl	2c9c0 <net_buf_simple_tailroom>
   2b776:	4284      	cmp	r4, r0
   2b778:	d211      	bcs.n	2b79e <att_chan_read+0x6c>
   2b77a:	4630      	mov	r0, r6
   2b77c:	f7ff ff4b 	bl	2b616 <net_buf_frags_len>
   2b780:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b784:	1a24      	subs	r4, r4, r0
		if (!len) {
   2b786:	bb34      	cbnz	r4, 2b7d6 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2b788:	79b0      	ldrb	r0, [r6, #6]
   2b78a:	f7f1 ff8f 	bl	1d6ac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2b78e:	2200      	movs	r2, #0
   2b790:	2300      	movs	r3, #0
   2b792:	f001 f904 	bl	2c99e <net_buf_alloc_fixed>
			if (!frag) {
   2b796:	4605      	mov	r5, r0
   2b798:	b930      	cbnz	r0, 2b7a8 <att_chan_read+0x76>
	return total;
   2b79a:	4657      	mov	r7, sl
   2b79c:	e02c      	b.n	2b7f8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2b79e:	4638      	mov	r0, r7
   2b7a0:	f001 f90e 	bl	2c9c0 <net_buf_simple_tailroom>
   2b7a4:	4604      	mov	r4, r0
   2b7a6:	e7ee      	b.n	2b786 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2b7a8:	4601      	mov	r1, r0
   2b7aa:	4630      	mov	r0, r6
   2b7ac:	f7f2 fa28 	bl	1dc00 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b7b0:	4630      	mov	r0, r6
   2b7b2:	f7ff ff30 	bl	2b616 <net_buf_frags_len>
   2b7b6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b7ba:	f105 0708 	add.w	r7, r5, #8
   2b7be:	1a24      	subs	r4, r4, r0
   2b7c0:	4638      	mov	r0, r7
   2b7c2:	f001 f8fd 	bl	2c9c0 <net_buf_simple_tailroom>
   2b7c6:	4284      	cmp	r4, r0
   2b7c8:	d21a      	bcs.n	2b800 <att_chan_read+0xce>
   2b7ca:	4630      	mov	r0, r6
   2b7cc:	f7ff ff23 	bl	2b616 <net_buf_frags_len>
   2b7d0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b7d4:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2b7d6:	68a9      	ldr	r1, [r5, #8]
   2b7d8:	89aa      	ldrh	r2, [r5, #12]
   2b7da:	f8db 7004 	ldr.w	r7, [fp, #4]
   2b7de:	9803      	ldr	r0, [sp, #12]
   2b7e0:	f8cd 9000 	str.w	r9, [sp]
   2b7e4:	440a      	add	r2, r1
   2b7e6:	b2a3      	uxth	r3, r4
   2b7e8:	4659      	mov	r1, fp
   2b7ea:	47b8      	blx	r7
		if (read < 0) {
   2b7ec:	1e07      	subs	r7, r0, #0
   2b7ee:	da0c      	bge.n	2b80a <att_chan_read+0xd8>
				return total;
   2b7f0:	f1ba 0f00 	cmp.w	sl, #0
   2b7f4:	bf18      	it	ne
   2b7f6:	4657      	movne	r7, sl
}
   2b7f8:	4638      	mov	r0, r7
   2b7fa:	b005      	add	sp, #20
   2b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b800:	4638      	mov	r0, r7
   2b802:	f001 f8dd 	bl	2c9c0 <net_buf_simple_tailroom>
   2b806:	4604      	mov	r4, r0
   2b808:	e7e5      	b.n	2b7d6 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2b80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b80c:	b993      	cbnz	r3, 2b834 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2b80e:	4639      	mov	r1, r7
   2b810:	f105 0008 	add.w	r0, r5, #8
   2b814:	f7f2 fa7c 	bl	1dd10 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b818:	4630      	mov	r0, r6
   2b81a:	f7ff fefc 	bl	2b616 <net_buf_frags_len>
   2b81e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2b822:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b824:	4283      	cmp	r3, r0
		total += read;
   2b826:	44ba      	add	sl, r7
		offset += read;
   2b828:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b82c:	d9b5      	bls.n	2b79a <att_chan_read+0x68>
   2b82e:	42a7      	cmp	r7, r4
   2b830:	d096      	beq.n	2b760 <att_chan_read+0x2e>
   2b832:	e7b2      	b.n	2b79a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2b834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b838:	4639      	mov	r1, r7
   2b83a:	4628      	mov	r0, r5
   2b83c:	4798      	blx	r3
   2b83e:	2800      	cmp	r0, #0
   2b840:	d1e5      	bne.n	2b80e <att_chan_read+0xdc>
   2b842:	e7aa      	b.n	2b79a <att_chan_read+0x68>
		return 0;
   2b844:	2700      	movs	r7, #0
   2b846:	e7d7      	b.n	2b7f8 <att_chan_read+0xc6>

0002b848 <find_info_cb>:
{
   2b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2b84a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2b84c:	6817      	ldr	r7, [r2, #0]
{
   2b84e:	4605      	mov	r5, r0
   2b850:	460e      	mov	r6, r1
   2b852:	4614      	mov	r4, r2
	if (!data->rsp) {
   2b854:	b963      	cbnz	r3, 2b870 <find_info_cb+0x28>
   2b856:	6850      	ldr	r0, [r2, #4]
   2b858:	2101      	movs	r1, #1
   2b85a:	3008      	adds	r0, #8
   2b85c:	f7f2 fa58 	bl	1dd10 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b860:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2b862:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b864:	781b      	ldrb	r3, [r3, #0]
   2b866:	2b00      	cmp	r3, #0
   2b868:	bf0c      	ite	eq
   2b86a:	2301      	moveq	r3, #1
   2b86c:	2302      	movne	r3, #2
   2b86e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2b870:	68a3      	ldr	r3, [r4, #8]
   2b872:	781b      	ldrb	r3, [r3, #0]
   2b874:	2b01      	cmp	r3, #1
   2b876:	d003      	beq.n	2b880 <find_info_cb+0x38>
   2b878:	2b02      	cmp	r3, #2
   2b87a:	d019      	beq.n	2b8b0 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2b87c:	2000      	movs	r0, #0
   2b87e:	e016      	b.n	2b8ae <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2b880:	682b      	ldr	r3, [r5, #0]
   2b882:	781b      	ldrb	r3, [r3, #0]
   2b884:	2b00      	cmp	r3, #0
   2b886:	d1f9      	bne.n	2b87c <find_info_cb+0x34>
   2b888:	6860      	ldr	r0, [r4, #4]
   2b88a:	2104      	movs	r1, #4
   2b88c:	3008      	adds	r0, #8
   2b88e:	f7f2 fa3f 	bl	1dd10 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b892:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2b894:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b896:	885b      	ldrh	r3, [r3, #2]
   2b898:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2b89a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2b89c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2b89e:	899b      	ldrh	r3, [r3, #12]
   2b8a0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2b8a4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2b8a6:	2804      	cmp	r0, #4
   2b8a8:	bf94      	ite	ls
   2b8aa:	2000      	movls	r0, #0
   2b8ac:	2001      	movhi	r0, #1
}
   2b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2b8b0:	682b      	ldr	r3, [r5, #0]
   2b8b2:	781b      	ldrb	r3, [r3, #0]
   2b8b4:	2b02      	cmp	r3, #2
   2b8b6:	d1e1      	bne.n	2b87c <find_info_cb+0x34>
   2b8b8:	6860      	ldr	r0, [r4, #4]
   2b8ba:	2112      	movs	r1, #18
   2b8bc:	3008      	adds	r0, #8
   2b8be:	f7f2 fa27 	bl	1dd10 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2b8c2:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2b8c4:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2b8c6:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2b8c8:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2b8cc:	3101      	adds	r1, #1
   2b8ce:	f7ff f8e4 	bl	2aa9a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2b8d2:	6863      	ldr	r3, [r4, #4]
   2b8d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   2b8d8:	899b      	ldrh	r3, [r3, #12]
   2b8da:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2b8dc:	2812      	cmp	r0, #18
   2b8de:	e7e3      	b.n	2b8a8 <find_info_cb+0x60>

0002b8e0 <att_chan_mtu_updated>:
{
   2b8e0:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2b8e2:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b8e4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   2b8e6:	b30a      	cbz	r2, 2b92c <att_chan_mtu_updated+0x4c>
   2b8e8:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   2b8ec:	d01d      	beq.n	2b92a <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b8ee:	6813      	ldr	r3, [r2, #0]
   2b8f0:	b10b      	cbz	r3, 2b8f6 <att_chan_mtu_updated+0x16>
   2b8f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2b8f6:	2200      	movs	r2, #0
   2b8f8:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2b8fa:	42a0      	cmp	r0, r4
   2b8fc:	d009      	beq.n	2b912 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b8fe:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b902:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b906:	42a9      	cmp	r1, r5
   2b908:	bf38      	it	cc
   2b90a:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b90c:	42a2      	cmp	r2, r4
   2b90e:	bf38      	it	cc
   2b910:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b912:	b163      	cbz	r3, 2b92e <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b914:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   2b918:	d004      	beq.n	2b924 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b91a:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   2b91e:	b10d      	cbz	r5, 2b924 <att_chan_mtu_updated+0x44>
   2b920:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   2b924:	461c      	mov	r4, r3
   2b926:	462b      	mov	r3, r5
   2b928:	e7e7      	b.n	2b8fa <att_chan_mtu_updated+0x1a>
   2b92a:	4622      	mov	r2, r4
   2b92c:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b92e:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2b932:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   2b936:	428b      	cmp	r3, r1
   2b938:	d801      	bhi.n	2b93e <att_chan_mtu_updated+0x5e>
   2b93a:	4290      	cmp	r0, r2
   2b93c:	d909      	bls.n	2b952 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b93e:	4282      	cmp	r2, r0
   2b940:	bf38      	it	cc
   2b942:	4602      	movcc	r2, r0
   2b944:	4299      	cmp	r1, r3
   2b946:	6830      	ldr	r0, [r6, #0]
   2b948:	bf38      	it	cc
   2b94a:	4619      	movcc	r1, r3
}
   2b94c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b94e:	f7ef bf99 	b.w	1b884 <bt_gatt_att_max_mtu_changed>
}
   2b952:	bc70      	pop	{r4, r5, r6}
   2b954:	4770      	bx	lr

0002b956 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2b956:	68d0      	ldr	r0, [r2, #12]
   2b958:	7803      	ldrb	r3, [r0, #0]
   2b95a:	3104      	adds	r1, #4
   2b95c:	b913      	cbnz	r3, 2b964 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2b95e:	7001      	strb	r1, [r0, #0]
	return true;
   2b960:	2001      	movs	r0, #1
}
   2b962:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2b964:	428b      	cmp	r3, r1
   2b966:	d0fb      	beq.n	2b960 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2b968:	6891      	ldr	r1, [r2, #8]
   2b96a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2b96c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2b96e:	3b04      	subs	r3, #4
   2b970:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2b972:	6110      	str	r0, [r2, #16]
		return false;
   2b974:	4770      	bx	lr

0002b976 <chan_req_sent>:
	if (chan->req) {
   2b976:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2b97a:	b133      	cbz	r3, 2b98a <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2b97c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b980:	2300      	movs	r3, #0
   2b982:	f500 7090 	add.w	r0, r0, #288	; 0x120
   2b986:	f7f7 bda3 	b.w	234d0 <k_work_reschedule>
}
   2b98a:	4770      	bx	lr

0002b98c <att_exec_write_req>:
   2b98c:	2006      	movs	r0, #6
   2b98e:	4770      	bx	lr

0002b990 <chan_rsp_sent>:
   2b990:	30f8      	adds	r0, #248	; 0xf8
   2b992:	f3bf 8f5b 	dmb	ish
   2b996:	e850 3f00 	ldrex	r3, [r0]
   2b99a:	f023 0301 	bic.w	r3, r3, #1
   2b99e:	e840 3200 	strex	r2, r3, [r0]
   2b9a2:	2a00      	cmp	r2, #0
   2b9a4:	d1f7      	bne.n	2b996 <chan_rsp_sent+0x6>
   2b9a6:	f3bf 8f5b 	dmb	ish
}
   2b9aa:	4770      	bx	lr

0002b9ac <chan_cfm_sent>:
   2b9ac:	30f8      	adds	r0, #248	; 0xf8
   2b9ae:	f3bf 8f5b 	dmb	ish
   2b9b2:	e850 3f00 	ldrex	r3, [r0]
   2b9b6:	f023 0302 	bic.w	r3, r3, #2
   2b9ba:	e840 3200 	strex	r2, r3, [r0]
   2b9be:	2a00      	cmp	r2, #0
   2b9c0:	d1f7      	bne.n	2b9b2 <chan_cfm_sent+0x6>
   2b9c2:	f3bf 8f5b 	dmb	ish
}
   2b9c6:	4770      	bx	lr

0002b9c8 <bt_att_status>:
{
   2b9c8:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b9ca:	f3bf 8f5b 	dmb	ish
   2b9ce:	680b      	ldr	r3, [r1, #0]
   2b9d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b9d4:	07db      	lsls	r3, r3, #31
{
   2b9d6:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b9d8:	d519      	bpl.n	2ba0e <bt_att_status+0x46>
	if (!chan->att) {
   2b9da:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2b9de:	b1b0      	cbz	r0, 2ba0e <bt_att_status+0x46>
	if (chan->req) {
   2b9e0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2b9e4:	b99b      	cbnz	r3, 2ba0e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2b9e6:	3004      	adds	r0, #4
   2b9e8:	f7ff fdf0 	bl	2b5cc <sys_slist_get>
	if (!node) {
   2b9ec:	4604      	mov	r4, r0
   2b9ee:	b170      	cbz	r0, 2ba0e <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b9f0:	4601      	mov	r1, r0
   2b9f2:	f1a5 0008 	sub.w	r0, r5, #8
   2b9f6:	f7ed fbe1 	bl	191bc <bt_att_chan_req_send>
   2b9fa:	2800      	cmp	r0, #0
   2b9fc:	da07      	bge.n	2ba0e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2b9fe:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2ba02:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2ba04:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ba06:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2ba08:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ba0a:	b902      	cbnz	r2, 2ba0e <bt_att_status+0x46>
	list->tail = node;
   2ba0c:	609c      	str	r4, [r3, #8]
}
   2ba0e:	bd38      	pop	{r3, r4, r5, pc}

0002ba10 <att_req_send_process>:
{
   2ba10:	b570      	push	{r4, r5, r6, lr}
   2ba12:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2ba14:	3004      	adds	r0, #4
   2ba16:	f7ff fdd9 	bl	2b5cc <sys_slist_get>
	if (!node) {
   2ba1a:	4606      	mov	r6, r0
   2ba1c:	b1c0      	cbz	r0, 2ba50 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ba1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2ba20:	b153      	cbz	r3, 2ba38 <att_req_send_process+0x28>
   2ba22:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   2ba26:	d007      	beq.n	2ba38 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ba28:	681c      	ldr	r4, [r3, #0]
   2ba2a:	b10c      	cbz	r4, 2ba30 <att_req_send_process+0x20>
   2ba2c:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   2ba30:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2ba34:	b13b      	cbz	r3, 2ba46 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ba36:	b964      	cbnz	r4, 2ba52 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   2ba38:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2ba3a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ba3c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2ba3e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ba40:	b933      	cbnz	r3, 2ba50 <att_req_send_process+0x40>
	list->tail = node;
   2ba42:	60ae      	str	r6, [r5, #8]
}
   2ba44:	e004      	b.n	2ba50 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ba46:	4631      	mov	r1, r6
   2ba48:	f7ed fbb8 	bl	191bc <bt_att_chan_req_send>
   2ba4c:	2800      	cmp	r0, #0
   2ba4e:	dbf2      	blt.n	2ba36 <att_req_send_process+0x26>
}
   2ba50:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ba52:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2ba56:	d004      	beq.n	2ba62 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ba58:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ba5c:	b10b      	cbz	r3, 2ba62 <att_req_send_process+0x52>
   2ba5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2ba62:	4620      	mov	r0, r4
   2ba64:	461c      	mov	r4, r3
   2ba66:	e7e3      	b.n	2ba30 <att_req_send_process+0x20>

0002ba68 <write_cb>:
{
   2ba68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ba6a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2ba6c:	4601      	mov	r1, r0
{
   2ba6e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2ba70:	222a      	movs	r2, #42	; 0x2a
   2ba72:	6820      	ldr	r0, [r4, #0]
   2ba74:	f000 fb69 	bl	2c14a <bt_gatt_check_perm>
   2ba78:	4605      	mov	r5, r0
   2ba7a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2ba7c:	bb20      	cbnz	r0, 2bac8 <write_cb+0x60>
	if (!data->req) {
   2ba7e:	7a23      	ldrb	r3, [r4, #8]
   2ba80:	b1ab      	cbz	r3, 2baae <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2ba82:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2ba84:	bf14      	ite	ne
   2ba86:	2300      	movne	r3, #0
   2ba88:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2ba8a:	9301      	str	r3, [sp, #4]
   2ba8c:	8a63      	ldrh	r3, [r4, #18]
   2ba8e:	9300      	str	r3, [sp, #0]
   2ba90:	68b7      	ldr	r7, [r6, #8]
   2ba92:	8a23      	ldrh	r3, [r4, #16]
   2ba94:	68e2      	ldr	r2, [r4, #12]
   2ba96:	6820      	ldr	r0, [r4, #0]
   2ba98:	4631      	mov	r1, r6
   2ba9a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2ba9c:	1e03      	subs	r3, r0, #0
   2ba9e:	db08      	blt.n	2bab2 <write_cb+0x4a>
   2baa0:	8a22      	ldrh	r2, [r4, #16]
   2baa2:	4293      	cmp	r3, r2
   2baa4:	d10e      	bne.n	2bac4 <write_cb+0x5c>
	data->err = 0U;
   2baa6:	2300      	movs	r3, #0
   2baa8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2baaa:	2501      	movs	r5, #1
   2baac:	e007      	b.n	2babe <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2baae:	2302      	movs	r3, #2
   2bab0:	e7eb      	b.n	2ba8a <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2bab2:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2bab6:	d305      	bcc.n	2bac4 <write_cb+0x5c>
		return -err;
   2bab8:	425b      	negs	r3, r3
   2baba:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2babc:	7523      	strb	r3, [r4, #20]
}
   2babe:	4628      	mov	r0, r5
   2bac0:	b003      	add	sp, #12
   2bac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2bac4:	230e      	movs	r3, #14
   2bac6:	e7f9      	b.n	2babc <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2bac8:	2500      	movs	r5, #0
   2baca:	e7f8      	b.n	2babe <write_cb+0x56>

0002bacc <bt_att_sent>:
{
   2bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2bace:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   2bad2:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2bad6:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2bad8:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2badc:	b10b      	cbz	r3, 2bae2 <bt_att_sent+0x16>
		chan->sent(chan);
   2bade:	4638      	mov	r0, r7
   2bae0:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bae2:	f3bf 8f5b 	dmb	ish
   2bae6:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   2baea:	e853 2f00 	ldrex	r2, [r3]
   2baee:	f022 0210 	bic.w	r2, r2, #16
   2baf2:	e843 2100 	strex	r1, r2, [r3]
   2baf6:	2900      	cmp	r1, #0
   2baf8:	d1f7      	bne.n	2baea <bt_att_sent+0x1e>
   2bafa:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2bafe:	b30c      	cbz	r4, 2bb44 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2bb00:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2bb04:	b98b      	cbnz	r3, 2bb2a <bt_att_sent+0x5e>
   2bb06:	6863      	ldr	r3, [r4, #4]
   2bb08:	b17b      	cbz	r3, 2bb2a <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2bb0a:	1d20      	adds	r0, r4, #4
   2bb0c:	f7ff fd5e 	bl	2b5cc <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bb10:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2bb12:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bb14:	4638      	mov	r0, r7
   2bb16:	f7ff fdcb 	bl	2b6b0 <chan_req_send>
   2bb1a:	2800      	cmp	r0, #0
   2bb1c:	da12      	bge.n	2bb44 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   2bb1e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2bb20:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2bb22:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2bb24:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2bb26:	b903      	cbnz	r3, 2bb2a <bt_att_sent+0x5e>
	list->tail = node;
   2bb28:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2bb2a:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   2bb2e:	4638      	mov	r0, r7
   2bb30:	f7ff fdda 	bl	2b6e8 <process_queue>
	if (!err) {
   2bb34:	b130      	cbz	r0, 2bb44 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2bb36:	f104 010c 	add.w	r1, r4, #12
   2bb3a:	4638      	mov	r0, r7
}
   2bb3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2bb40:	f7ff bdd2 	b.w	2b6e8 <process_queue>
}
   2bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002bb46 <read_cb>:
{
   2bb46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2bb4a:	f8d2 8000 	ldr.w	r8, [r2]
{
   2bb4e:	4606      	mov	r6, r0
	data->err = 0x00;
   2bb50:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2bb52:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2bb56:	7317      	strb	r7, [r2, #12]
{
   2bb58:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2bb5a:	4631      	mov	r1, r6
   2bb5c:	2215      	movs	r2, #21
   2bb5e:	f000 faf4 	bl	2c14a <bt_gatt_check_perm>
   2bb62:	4604      	mov	r4, r0
   2bb64:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2bb66:	b9a0      	cbnz	r0, 2bb92 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2bb68:	e9cd 0000 	strd	r0, r0, [sp]
   2bb6c:	88ab      	ldrh	r3, [r5, #4]
   2bb6e:	68aa      	ldr	r2, [r5, #8]
   2bb70:	4631      	mov	r1, r6
   2bb72:	4640      	mov	r0, r8
   2bb74:	f7ff fddd 	bl	2b732 <att_chan_read>
	if (ret < 0) {
   2bb78:	1e03      	subs	r3, r0, #0
   2bb7a:	da0c      	bge.n	2bb96 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2bb7c:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2bb80:	bf26      	itte	cs
   2bb82:	425b      	negcs	r3, r3
   2bb84:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2bb86:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2bb88:	732b      	strb	r3, [r5, #12]
}
   2bb8a:	4620      	mov	r0, r4
   2bb8c:	b002      	add	sp, #8
   2bb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2bb92:	463c      	mov	r4, r7
   2bb94:	e7f9      	b.n	2bb8a <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2bb96:	2401      	movs	r4, #1
   2bb98:	e7f7      	b.n	2bb8a <read_cb+0x44>

0002bb9a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2bb9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bb9e:	4688      	mov	r8, r1
   2bba0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2bba2:	2101      	movs	r1, #1
   2bba4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2bba6:	4605      	mov	r5, r0
   2bba8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2bbaa:	f7ed fdef 	bl	1978c <bt_att_chan_create_pdu>
	if (!buf) {
   2bbae:	4604      	mov	r4, r0
   2bbb0:	b170      	cbz	r0, 2bbd0 <send_err_rsp.part.0+0x36>
   2bbb2:	2104      	movs	r1, #4
   2bbb4:	3008      	adds	r0, #8
   2bbb6:	f7f2 f8ab 	bl	1dd10 <net_buf_simple_add>
	rsp->request = req;
   2bbba:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2bbbe:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2bbc0:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2bbc4:	4621      	mov	r1, r4
   2bbc6:	4628      	mov	r0, r5
}
   2bbc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2bbcc:	f7ed bcde 	b.w	1958c <bt_att_chan_send_rsp.constprop.0>
}
   2bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bbd4 <att_read_blob_req>:
{
   2bbd4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2bbd6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2bbd8:	8813      	ldrh	r3, [r2, #0]
   2bbda:	8852      	ldrh	r2, [r2, #2]
   2bbdc:	9200      	str	r2, [sp, #0]
   2bbde:	210c      	movs	r1, #12
   2bbe0:	220d      	movs	r2, #13
   2bbe2:	f7ee f829 	bl	19c38 <att_read_rsp>
}
   2bbe6:	b003      	add	sp, #12
   2bbe8:	f85d fb04 	ldr.w	pc, [sp], #4

0002bbec <att_read_req>:
{
   2bbec:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2bbee:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2bbf0:	2200      	movs	r2, #0
   2bbf2:	881b      	ldrh	r3, [r3, #0]
   2bbf4:	9200      	str	r2, [sp, #0]
   2bbf6:	210a      	movs	r1, #10
   2bbf8:	220b      	movs	r2, #11
   2bbfa:	f7ee f81d 	bl	19c38 <att_read_rsp>
}
   2bbfe:	b003      	add	sp, #12
   2bc00:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc04 <att_mtu_req>:
{
   2bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   2bc06:	6803      	ldr	r3, [r0, #0]
{
   2bc08:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2bc0a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bc0c:	f3bf 8f5b 	dmb	ish
   2bc10:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2bc14:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2bc18:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2bc1c:	071b      	lsls	r3, r3, #28
   2bc1e:	d420      	bmi.n	2bc62 <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2bc20:	688b      	ldr	r3, [r1, #8]
   2bc22:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2bc24:	2e16      	cmp	r6, #22
   2bc26:	d91e      	bls.n	2bc66 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2bc28:	2202      	movs	r2, #2
   2bc2a:	2103      	movs	r1, #3
   2bc2c:	f7ed ff00 	bl	19a30 <bt_att_create_pdu>
	if (!pdu) {
   2bc30:	4607      	mov	r7, r0
   2bc32:	b1d0      	cbz	r0, 2bc6a <att_mtu_req+0x66>
   2bc34:	2102      	movs	r1, #2
   2bc36:	3008      	adds	r0, #8
   2bc38:	f7f2 f86a 	bl	1dd10 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2bc3c:	2341      	movs	r3, #65	; 0x41
   2bc3e:	7003      	strb	r3, [r0, #0]
   2bc40:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   2bc42:	4639      	mov	r1, r7
   2bc44:	4620      	mov	r0, r4
   2bc46:	f7ed fca1 	bl	1958c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2bc4a:	2e41      	cmp	r6, #65	; 0x41
   2bc4c:	bf28      	it	cs
   2bc4e:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2bc50:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2bc52:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2bc56:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2bc5a:	f7ff fe41 	bl	2b8e0 <att_chan_mtu_updated>
	return 0;
   2bc5e:	4628      	mov	r0, r5
}
   2bc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2bc62:	2006      	movs	r0, #6
   2bc64:	e7fc      	b.n	2bc60 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   2bc66:	2004      	movs	r0, #4
   2bc68:	e7fa      	b.n	2bc60 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   2bc6a:	200e      	movs	r0, #14
   2bc6c:	e7f8      	b.n	2bc60 <att_mtu_req+0x5c>

0002bc6e <bt_att_init>:
	bt_gatt_init();
   2bc6e:	f7ee bf59 	b.w	1ab24 <bt_gatt_init>

0002bc72 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2bc72:	898a      	ldrh	r2, [r1, #12]
   2bc74:	6889      	ldr	r1, [r1, #8]
   2bc76:	2300      	movs	r3, #0
   2bc78:	f7ee b950 	b.w	19f1c <att_handle_rsp>

0002bc7c <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2bc7c:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   2bc80:	b570      	push	{r4, r5, r6, lr}
   2bc82:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2bc84:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2bc88:	2b00      	cmp	r3, #0
   2bc8a:	d037      	beq.n	2bcfc <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2bc8c:	b171      	cbz	r1, 2bcac <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2bc8e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2bc92:	2b00      	cmp	r3, #0
   2bc94:	d032      	beq.n	2bcfc <bt_att_encrypt_change+0x80>
   2bc96:	7c1b      	ldrb	r3, [r3, #16]
   2bc98:	07da      	lsls	r2, r3, #31
   2bc9a:	d52f      	bpl.n	2bcfc <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2bc9c:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2bc9e:	2200      	movs	r2, #0
   2bca0:	4630      	mov	r0, r6
   2bca2:	4611      	mov	r1, r2
}
   2bca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2bca8:	f7ee b938 	b.w	19f1c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2bcac:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2bcae:	4628      	mov	r0, r5
   2bcb0:	f7ef fdfe 	bl	1b8b0 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2bcb4:	7a6b      	ldrb	r3, [r5, #9]
   2bcb6:	2b01      	cmp	r3, #1
   2bcb8:	d020      	beq.n	2bcfc <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2bcba:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
   2bcbe:	b1ec      	cbz	r4, 2bcfc <bt_att_encrypt_change+0x80>
   2bcc0:	7c23      	ldrb	r3, [r4, #16]
   2bcc2:	07db      	lsls	r3, r3, #31
   2bcc4:	d51a      	bpl.n	2bcfc <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2bcc6:	68e3      	ldr	r3, [r4, #12]
   2bcc8:	2b00      	cmp	r3, #0
   2bcca:	d0e7      	beq.n	2bc9c <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2bccc:	6962      	ldr	r2, [r4, #20]
   2bcce:	7c61      	ldrb	r1, [r4, #17]
   2bcd0:	4630      	mov	r0, r6
   2bcd2:	f7ed fd5b 	bl	1978c <bt_att_chan_create_pdu>
	if (!buf) {
   2bcd6:	4605      	mov	r5, r0
   2bcd8:	b140      	cbz	r0, 2bcec <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2bcda:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2bcde:	68e3      	ldr	r3, [r4, #12]
   2bce0:	4798      	blx	r3
   2bce2:	4602      	mov	r2, r0
   2bce4:	b120      	cbz	r0, 2bcf0 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2bce6:	4628      	mov	r0, r5
   2bce8:	f7f1 fee2 	bl	1dab0 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2bcec:	230e      	movs	r3, #14
   2bcee:	e7d6      	b.n	2bc9e <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2bcf0:	4629      	mov	r1, r5
   2bcf2:	4630      	mov	r0, r6
   2bcf4:	f7ed f9f4 	bl	190e0 <chan_send>
   2bcf8:	2800      	cmp	r0, #0
   2bcfa:	d1f4      	bne.n	2bce6 <bt_att_encrypt_change+0x6a>
}
   2bcfc:	bd70      	pop	{r4, r5, r6, pc}

0002bcfe <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2bcfe:	6010      	str	r0, [r2, #0]
}
   2bd00:	2000      	movs	r0, #0
   2bd02:	4770      	bx	lr

0002bd04 <gatt_ccc_changed>:
{
   2bd04:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2bd06:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2bd08:	895a      	ldrh	r2, [r3, #10]
   2bd0a:	428a      	cmp	r2, r1
   2bd0c:	d003      	beq.n	2bd16 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2bd0e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2bd10:	68db      	ldr	r3, [r3, #12]
   2bd12:	b103      	cbz	r3, 2bd16 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2bd14:	4718      	bx	r3
}
   2bd16:	4770      	bx	lr

0002bd18 <gatt_indicate_rsp>:
{
   2bd18:	b510      	push	{r4, lr}
   2bd1a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2bd1c:	68a3      	ldr	r3, [r4, #8]
{
   2bd1e:	460a      	mov	r2, r1
	if (params->func) {
   2bd20:	b10b      	cbz	r3, 2bd26 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2bd22:	4621      	mov	r1, r4
   2bd24:	4798      	blx	r3
	params->_ref--;
   2bd26:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2bd28:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2bd2a:	3b01      	subs	r3, #1
   2bd2c:	b2db      	uxtb	r3, r3
   2bd2e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2bd30:	b122      	cbz	r2, 2bd3c <gatt_indicate_rsp+0x24>
   2bd32:	b91b      	cbnz	r3, 2bd3c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2bd34:	4620      	mov	r0, r4
}
   2bd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2bd3a:	4710      	bx	r2
}
   2bd3c:	bd10      	pop	{r4, pc}

0002bd3e <match_uuid>:
	data->attr = attr;
   2bd3e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2bd40:	8091      	strh	r1, [r2, #4]
}
   2bd42:	2000      	movs	r0, #0
   2bd44:	4770      	bx	lr

0002bd46 <ccc_set_cb>:
}
   2bd46:	2000      	movs	r0, #0
   2bd48:	4770      	bx	lr

0002bd4a <atomic_get>:
   2bd4a:	f3bf 8f5b 	dmb	ish
   2bd4e:	6800      	ldr	r0, [r0, #0]
   2bd50:	f3bf 8f5b 	dmb	ish
}
   2bd54:	4770      	bx	lr

0002bd56 <gen_hash_m>:
{
   2bd56:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2bd58:	6807      	ldr	r7, [r0, #0]
   2bd5a:	783d      	ldrb	r5, [r7, #0]
{
   2bd5c:	b089      	sub	sp, #36	; 0x24
   2bd5e:	4606      	mov	r6, r0
   2bd60:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2bd62:	b10d      	cbz	r5, 2bd68 <gen_hash_m+0x12>
	switch (u16->val) {
   2bd64:	2501      	movs	r5, #1
   2bd66:	e014      	b.n	2bd92 <gen_hash_m+0x3c>
   2bd68:	887b      	ldrh	r3, [r7, #2]
   2bd6a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2bd6e:	d004      	beq.n	2bd7a <gen_hash_m+0x24>
   2bd70:	d812      	bhi.n	2bd98 <gen_hash_m+0x42>
   2bd72:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2bd76:	2b03      	cmp	r3, #3
   2bd78:	d8f4      	bhi.n	2bd64 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2bd7a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bd7e:	2202      	movs	r2, #2
   2bd80:	f10d 010e 	add.w	r1, sp, #14
   2bd84:	4620      	mov	r0, r4
   2bd86:	f7fe fce3 	bl	2a750 <tc_cmac_update>
   2bd8a:	b9e0      	cbnz	r0, 2bdc6 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2bd8c:	f06f 0315 	mvn.w	r3, #21
   2bd90:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2bd92:	4628      	mov	r0, r5
   2bd94:	b009      	add	sp, #36	; 0x24
   2bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2bd98:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2bd9c:	33ff      	adds	r3, #255	; 0xff
   2bd9e:	b29b      	uxth	r3, r3
   2bda0:	2b04      	cmp	r3, #4
   2bda2:	d8df      	bhi.n	2bd64 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2bda4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bda8:	2202      	movs	r2, #2
   2bdaa:	f10d 010e 	add.w	r1, sp, #14
   2bdae:	4620      	mov	r0, r4
   2bdb0:	f7fe fcce 	bl	2a750 <tc_cmac_update>
   2bdb4:	2800      	cmp	r0, #0
   2bdb6:	d0e9      	beq.n	2bd8c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2bdb8:	887b      	ldrh	r3, [r7, #2]
   2bdba:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bdbe:	2202      	movs	r2, #2
   2bdc0:	f10d 010e 	add.w	r1, sp, #14
   2bdc4:	e017      	b.n	2bdf6 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2bdc6:	887b      	ldrh	r3, [r7, #2]
   2bdc8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bdcc:	2202      	movs	r2, #2
   2bdce:	f10d 010e 	add.w	r1, sp, #14
   2bdd2:	4620      	mov	r0, r4
   2bdd4:	f7fe fcbc 	bl	2a750 <tc_cmac_update>
   2bdd8:	2800      	cmp	r0, #0
   2bdda:	d0d7      	beq.n	2bd8c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2bddc:	2000      	movs	r0, #0
   2bdde:	2310      	movs	r3, #16
   2bde0:	eb0d 0203 	add.w	r2, sp, r3
   2bde4:	6877      	ldr	r7, [r6, #4]
   2bde6:	9000      	str	r0, [sp, #0]
   2bde8:	4631      	mov	r1, r6
   2bdea:	47b8      	blx	r7
		if (len < 0) {
   2bdec:	1e02      	subs	r2, r0, #0
   2bdee:	da01      	bge.n	2bdf4 <gen_hash_m+0x9e>
			state->err = len;
   2bdf0:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2bdf2:	e7ce      	b.n	2bd92 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2bdf4:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2bdf6:	4620      	mov	r0, r4
   2bdf8:	f7fe fcaa 	bl	2a750 <tc_cmac_update>
   2bdfc:	2800      	cmp	r0, #0
   2bdfe:	d1b1      	bne.n	2bd64 <gen_hash_m+0xe>
   2be00:	e7c4      	b.n	2bd8c <gen_hash_m+0x36>

0002be02 <atomic_or>:
{
   2be02:	4603      	mov	r3, r0
}
   2be04:	f3bf 8f5b 	dmb	ish
   2be08:	e853 0f00 	ldrex	r0, [r3]
   2be0c:	ea40 0201 	orr.w	r2, r0, r1
   2be10:	e843 2c00 	strex	ip, r2, [r3]
   2be14:	f1bc 0f00 	cmp.w	ip, #0
   2be18:	d1f6      	bne.n	2be08 <atomic_or+0x6>
   2be1a:	f3bf 8f5b 	dmb	ish
   2be1e:	4770      	bx	lr

0002be20 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2be20:	2207      	movs	r2, #7
   2be22:	f7fe be3a 	b.w	2aa9a <memcpy>

0002be26 <clear_ccc_cfg>:
{
   2be26:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2be28:	2500      	movs	r5, #0
{
   2be2a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2be2c:	4669      	mov	r1, sp
   2be2e:	3001      	adds	r0, #1
   2be30:	9500      	str	r5, [sp, #0]
   2be32:	f8cd 5003 	str.w	r5, [sp, #3]
   2be36:	f7ff fff3 	bl	2be20 <bt_addr_le_copy>
	cfg->id = 0U;
   2be3a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   2be3c:	8125      	strh	r5, [r4, #8]
}
   2be3e:	b003      	add	sp, #12
   2be40:	bd30      	pop	{r4, r5, pc}

0002be42 <atomic_and>:
{
   2be42:	4603      	mov	r3, r0
}
   2be44:	f3bf 8f5b 	dmb	ish
   2be48:	e853 0f00 	ldrex	r0, [r3]
   2be4c:	ea00 0201 	and.w	r2, r0, r1
   2be50:	e843 2c00 	strex	ip, r2, [r3]
   2be54:	f1bc 0f00 	cmp.w	ip, #0
   2be58:	d1f6      	bne.n	2be48 <atomic_and+0x6>
   2be5a:	f3bf 8f5b 	dmb	ish
   2be5e:	4770      	bx	lr

0002be60 <clear_cf_cfg>:
{
   2be60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2be62:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2be64:	2500      	movs	r5, #0
   2be66:	4669      	mov	r1, sp
   2be68:	3001      	adds	r0, #1
   2be6a:	9500      	str	r5, [sp, #0]
   2be6c:	f8cd 5003 	str.w	r5, [sp, #3]
   2be70:	f7ff ffd6 	bl	2be20 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2be74:	f104 0008 	add.w	r0, r4, #8
   2be78:	2201      	movs	r2, #1
   2be7a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2be7c:	340c      	adds	r4, #12
   2be7e:	f7fe fe17 	bl	2aab0 <memset>
   2be82:	f3bf 8f5b 	dmb	ish
   2be86:	e854 3f00 	ldrex	r3, [r4]
   2be8a:	e844 5200 	strex	r2, r5, [r4]
   2be8e:	2a00      	cmp	r2, #0
   2be90:	d1f9      	bne.n	2be86 <clear_cf_cfg+0x26>
   2be92:	f3bf 8f5b 	dmb	ish
}
   2be96:	b003      	add	sp, #12
   2be98:	bd30      	pop	{r4, r5, pc}

0002be9a <ccc_find_cfg>:
{
   2be9a:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2be9c:	7803      	ldrb	r3, [r0, #0]
   2be9e:	4293      	cmp	r3, r2
{
   2bea0:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2bea2:	d001      	beq.n	2bea8 <ccc_find_cfg+0xe>
	return NULL;
   2bea4:	2000      	movs	r0, #0
}
   2bea6:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   2bea8:	2207      	movs	r2, #7
   2beaa:	3001      	adds	r0, #1
   2beac:	f7fe fdce 	bl	2aa4c <memcmp>
		if (id == ccc->cfg[i].id &&
   2beb0:	2800      	cmp	r0, #0
   2beb2:	d1f7      	bne.n	2bea4 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2beb4:	4620      	mov	r0, r4
   2beb6:	e7f6      	b.n	2bea6 <ccc_find_cfg+0xc>

0002beb8 <find_ccc_cfg>:
{
   2beb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2beba:	460c      	mov	r4, r1
   2bebc:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2bebe:	b148      	cbz	r0, 2bed4 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2bec0:	7809      	ldrb	r1, [r1, #0]
   2bec2:	462a      	mov	r2, r5
   2bec4:	f7ff fa90 	bl	2b3e8 <bt_conn_is_peer_addr_le>
   2bec8:	2800      	cmp	r0, #0
	return NULL;
   2beca:	bf08      	it	eq
   2becc:	2400      	moveq	r4, #0
}
   2bece:	4620      	mov	r0, r4
   2bed0:	b003      	add	sp, #12
   2bed2:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2bed4:	9000      	str	r0, [sp, #0]
   2bed6:	2207      	movs	r2, #7
   2bed8:	f8cd 0003 	str.w	r0, [sp, #3]
   2bedc:	4669      	mov	r1, sp
   2bede:	4628      	mov	r0, r5
   2bee0:	f7fe fdb4 	bl	2aa4c <memcmp>
   2bee4:	2800      	cmp	r0, #0
	return NULL;
   2bee6:	bf18      	it	ne
   2bee8:	2400      	movne	r4, #0
   2beea:	e7f0      	b.n	2bece <find_ccc_cfg+0x16>

0002beec <sc_restore_rsp>:
{
   2beec:	b538      	push	{r3, r4, r5, lr}
   2beee:	4604      	mov	r4, r0
   2bef0:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2bef2:	f7ee fc1f 	bl	1a734 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2bef6:	b130      	cbz	r0, 2bf06 <sc_restore_rsp+0x1a>
   2bef8:	7a03      	ldrb	r3, [r0, #8]
   2befa:	07db      	lsls	r3, r3, #31
   2befc:	d503      	bpl.n	2bf06 <sc_restore_rsp+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2befe:	2101      	movs	r1, #1
   2bf00:	300c      	adds	r0, #12
   2bf02:	f7ff ff7e 	bl	2be02 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2bf06:	b985      	cbnz	r5, 2bf2a <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2bf08:	7a20      	ldrb	r0, [r4, #8]
   2bf0a:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2bf0e:	f7ee fafb 	bl	1a508 <find_sc_cfg>
		if (sc_cfg) {
   2bf12:	4604      	mov	r4, r0
   2bf14:	b148      	cbz	r0, 2bf2a <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2bf16:	4629      	mov	r1, r5
   2bf18:	2204      	movs	r2, #4
   2bf1a:	3008      	adds	r0, #8
   2bf1c:	f7fe fdc8 	bl	2aab0 <memset>
		sc_store(cfg);
   2bf20:	4620      	mov	r0, r4
}
   2bf22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2bf26:	f7ee b997 	b.w	1a258 <sc_store>
}
   2bf2a:	bd38      	pop	{r3, r4, r5, pc}

0002bf2c <read_appearance>:
{
   2bf2c:	b513      	push	{r0, r1, r4, lr}
   2bf2e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bf32:	4610      	mov	r0, r2
	if (offset > value_len) {
   2bf34:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2bf36:	f240 3241 	movw	r2, #833	; 0x341
   2bf3a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2bf3e:	d80d      	bhi.n	2bf5c <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2bf40:	f1c1 0402 	rsb	r4, r1, #2
   2bf44:	429c      	cmp	r4, r3
   2bf46:	bfa8      	it	ge
   2bf48:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2bf4a:	f10d 0306 	add.w	r3, sp, #6
   2bf4e:	4622      	mov	r2, r4
   2bf50:	4419      	add	r1, r3
   2bf52:	f7fe fda2 	bl	2aa9a <memcpy>
}
   2bf56:	4620      	mov	r0, r4
   2bf58:	b002      	add	sp, #8
   2bf5a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bf5c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2bf60:	e7f9      	b.n	2bf56 <read_appearance+0x2a>

0002bf62 <read_name>:
{
   2bf62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf66:	4698      	mov	r8, r3
   2bf68:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2bf6c:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2bf6e:	f7ea ff21 	bl	16db4 <bt_get_name>
   2bf72:	4607      	mov	r7, r0
				 strlen(name));
   2bf74:	f7fe fd36 	bl	2a9e4 <strlen>
	if (offset > value_len) {
   2bf78:	b283      	uxth	r3, r0
   2bf7a:	42b3      	cmp	r3, r6
   2bf7c:	d30c      	bcc.n	2bf98 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2bf7e:	1b9c      	subs	r4, r3, r6
   2bf80:	4544      	cmp	r4, r8
   2bf82:	bfa8      	it	ge
   2bf84:	4644      	movge	r4, r8
   2bf86:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2bf88:	4622      	mov	r2, r4
   2bf8a:	19b9      	adds	r1, r7, r6
   2bf8c:	4628      	mov	r0, r5
   2bf8e:	f7fe fd84 	bl	2aa9a <memcpy>
}
   2bf92:	4620      	mov	r0, r4
   2bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bf98:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2bf9c:	e7f9      	b.n	2bf92 <read_name+0x30>

0002bf9e <cf_read>:
{
   2bf9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bfa0:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2bfa2:	2300      	movs	r3, #0
{
   2bfa4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2bfa8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2bfac:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2bfae:	f7ee fbc1 	bl	1a734 <find_cf_cfg>
	if (cfg) {
   2bfb2:	b128      	cbz	r0, 2bfc0 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2bfb4:	f100 0108 	add.w	r1, r0, #8
   2bfb8:	2201      	movs	r2, #1
   2bfba:	a801      	add	r0, sp, #4
   2bfbc:	f7fe fd6d 	bl	2aa9a <memcpy>
	if (offset > value_len) {
   2bfc0:	2e01      	cmp	r6, #1
   2bfc2:	d80d      	bhi.n	2bfe0 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2bfc4:	f1c6 0401 	rsb	r4, r6, #1
   2bfc8:	42bc      	cmp	r4, r7
   2bfca:	bfa8      	it	ge
   2bfcc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2bfce:	ab01      	add	r3, sp, #4
   2bfd0:	4622      	mov	r2, r4
   2bfd2:	1999      	adds	r1, r3, r6
   2bfd4:	4628      	mov	r0, r5
   2bfd6:	f7fe fd60 	bl	2aa9a <memcpy>
}
   2bfda:	4620      	mov	r0, r4
   2bfdc:	b003      	add	sp, #12
   2bfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bfe0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2bfe4:	e7f9      	b.n	2bfda <cf_read+0x3c>

0002bfe6 <bt_gatt_attr_read_ccc>:
{
   2bfe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2bfe8:	68c9      	ldr	r1, [r1, #12]
{
   2bfea:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2bfee:	4615      	mov	r5, r2
   2bff0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2bff2:	f7ff ff61 	bl	2beb8 <find_ccc_cfg>
	if (cfg) {
   2bff6:	b100      	cbz	r0, 2bffa <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2bff8:	8900      	ldrh	r0, [r0, #8]
   2bffa:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2bffe:	2e02      	cmp	r6, #2
   2c000:	d80e      	bhi.n	2c020 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2c002:	f1c6 0402 	rsb	r4, r6, #2
   2c006:	42bc      	cmp	r4, r7
   2c008:	bfa8      	it	ge
   2c00a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2c00c:	f10d 0306 	add.w	r3, sp, #6
   2c010:	4622      	mov	r2, r4
   2c012:	1999      	adds	r1, r3, r6
   2c014:	4628      	mov	r0, r5
   2c016:	f7fe fd40 	bl	2aa9a <memcpy>
}
   2c01a:	4620      	mov	r0, r4
   2c01c:	b003      	add	sp, #12
   2c01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c020:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2c024:	e7f9      	b.n	2c01a <bt_gatt_attr_read_ccc+0x34>

0002c026 <bt_gatt_attr_read_service>:
{
   2c026:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   2c028:	68c9      	ldr	r1, [r1, #12]
{
   2c02a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2c02e:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2c030:	780b      	ldrb	r3, [r1, #0]
{
   2c032:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2c034:	b993      	cbnz	r3, 2c05c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2c036:	884b      	ldrh	r3, [r1, #2]
   2c038:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2c03c:	2d02      	cmp	r5, #2
   2c03e:	d819      	bhi.n	2c074 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2c040:	f1c5 0202 	rsb	r2, r5, #2
   2c044:	4294      	cmp	r4, r2
   2c046:	bfa8      	it	ge
   2c048:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2c04a:	f10d 0306 	add.w	r3, sp, #6
   2c04e:	4622      	mov	r2, r4
   2c050:	1959      	adds	r1, r3, r5
   2c052:	f7fe fd22 	bl	2aa9a <memcpy>
}
   2c056:	4620      	mov	r0, r4
   2c058:	b003      	add	sp, #12
   2c05a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2c05c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2c05e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2c062:	d807      	bhi.n	2c074 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2c064:	f1c5 0210 	rsb	r2, r5, #16
   2c068:	4294      	cmp	r4, r2
   2c06a:	bfa8      	it	ge
   2c06c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2c06e:	4622      	mov	r2, r4
   2c070:	4429      	add	r1, r5
   2c072:	e7ee      	b.n	2c052 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c074:	f06f 0406 	mvn.w	r4, #6
   2c078:	e7ed      	b.n	2c056 <bt_gatt_attr_read_service+0x30>

0002c07a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2c07a:	2a02      	cmp	r2, #2
{
   2c07c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2c07e:	d108      	bne.n	2c092 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2c080:	2300      	movs	r3, #0
   2c082:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c086:	461a      	mov	r2, r3
   2c088:	7a00      	ldrb	r0, [r0, #8]
   2c08a:	f7ee fa5f 	bl	1a54c <sc_save>
}
   2c08e:	2002      	movs	r0, #2
   2c090:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2c092:	f7ee fcd5 	bl	1aa40 <sc_clear>
   2c096:	e7fa      	b.n	2c08e <sc_ccc_cfg_write+0x14>

0002c098 <bt_gatt_attr_value_handle>:
{
   2c098:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2c09a:	4604      	mov	r4, r0
   2c09c:	b910      	cbnz	r0, 2c0a4 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2c09e:	2000      	movs	r0, #0
}
   2c0a0:	b002      	add	sp, #8
   2c0a2:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2c0a4:	2300      	movs	r3, #0
   2c0a6:	f88d 3004 	strb.w	r3, [sp, #4]
   2c0aa:	6800      	ldr	r0, [r0, #0]
   2c0ac:	f642 0303 	movw	r3, #10243	; 0x2803
   2c0b0:	a901      	add	r1, sp, #4
   2c0b2:	f8ad 3006 	strh.w	r3, [sp, #6]
   2c0b6:	f7fe fdbe 	bl	2ac36 <bt_uuid_cmp>
   2c0ba:	2800      	cmp	r0, #0
   2c0bc:	d1ef      	bne.n	2c09e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2c0be:	68e3      	ldr	r3, [r4, #12]
   2c0c0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2c0c2:	2800      	cmp	r0, #0
   2c0c4:	d1ec      	bne.n	2c0a0 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2c0c6:	4620      	mov	r0, r4
   2c0c8:	f7ee fda8 	bl	1ac1c <bt_gatt_attr_get_handle>
   2c0cc:	3001      	adds	r0, #1
   2c0ce:	b280      	uxth	r0, r0
	return handle;
   2c0d0:	e7e6      	b.n	2c0a0 <bt_gatt_attr_value_handle+0x8>

0002c0d2 <bt_gatt_attr_read_chrc>:
{
   2c0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2c0d4:	68cf      	ldr	r7, [r1, #12]
{
   2c0d6:	b087      	sub	sp, #28
   2c0d8:	4608      	mov	r0, r1
   2c0da:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2c0dc:	79bb      	ldrb	r3, [r7, #6]
   2c0de:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2c0e2:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2c0e6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2c0e8:	f7ff ffd6 	bl	2c098 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2c0ec:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2c0ee:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2c0f2:	780b      	ldrb	r3, [r1, #0]
   2c0f4:	b99b      	cbnz	r3, 2c11e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2c0f6:	884b      	ldrh	r3, [r1, #2]
   2c0f8:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2c0fc:	2105      	movs	r1, #5
	if (offset > value_len) {
   2c0fe:	42b1      	cmp	r1, r6
   2c100:	d315      	bcc.n	2c12e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2c102:	1b89      	subs	r1, r1, r6
   2c104:	42a1      	cmp	r1, r4
   2c106:	bfa8      	it	ge
   2c108:	4621      	movge	r1, r4
   2c10a:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2c10c:	ab01      	add	r3, sp, #4
   2c10e:	4622      	mov	r2, r4
   2c110:	1999      	adds	r1, r3, r6
   2c112:	4628      	mov	r0, r5
   2c114:	f7fe fcc1 	bl	2aa9a <memcpy>
}
   2c118:	4620      	mov	r0, r4
   2c11a:	b007      	add	sp, #28
   2c11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2c11e:	3101      	adds	r1, #1
   2c120:	2210      	movs	r2, #16
   2c122:	f10d 0007 	add.w	r0, sp, #7
   2c126:	f7fe fcb8 	bl	2aa9a <memcpy>
		value_len += 16U;
   2c12a:	2113      	movs	r1, #19
   2c12c:	e7e7      	b.n	2c0fe <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c12e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2c132:	e7f1      	b.n	2c118 <bt_gatt_attr_read_chrc+0x46>

0002c134 <bt_gatt_foreach_attr>:
{
   2c134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c136:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c13a:	2300      	movs	r3, #0
   2c13c:	9300      	str	r3, [sp, #0]
   2c13e:	461a      	mov	r2, r3
   2c140:	f7ee fdb8 	bl	1acb4 <bt_gatt_foreach_attr_type>
}
   2c144:	b005      	add	sp, #20
   2c146:	f85d fb04 	ldr.w	pc, [sp], #4

0002c14a <bt_gatt_check_perm>:
{
   2c14a:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2c14c:	07d4      	lsls	r4, r2, #31
{
   2c14e:	4605      	mov	r5, r0
   2c150:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2c152:	d504      	bpl.n	2c15e <bt_gatt_check_perm+0x14>
   2c154:	f010 0f15 	tst.w	r0, #21
   2c158:	d01e      	beq.n	2c198 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2c15a:	684b      	ldr	r3, [r1, #4]
   2c15c:	b1e3      	cbz	r3, 2c198 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2c15e:	0793      	lsls	r3, r2, #30
   2c160:	d504      	bpl.n	2c16c <bt_gatt_check_perm+0x22>
   2c162:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2c166:	d019      	beq.n	2c19c <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2c168:	688b      	ldr	r3, [r1, #8]
   2c16a:	b1bb      	cbz	r3, 2c19c <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2c16c:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2c170:	f014 0f30 	tst.w	r4, #48	; 0x30
   2c174:	d103      	bne.n	2c17e <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2c176:	f014 000c 	ands.w	r0, r4, #12
   2c17a:	d107      	bne.n	2c18c <bt_gatt_check_perm+0x42>
}
   2c17c:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2c17e:	4628      	mov	r0, r5
   2c180:	f7ff f930 	bl	2b3e4 <bt_conn_get_security>
   2c184:	2802      	cmp	r0, #2
   2c186:	d8f6      	bhi.n	2c176 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   2c188:	2005      	movs	r0, #5
   2c18a:	e7f7      	b.n	2c17c <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2c18c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2c18e:	2b00      	cmp	r3, #0
   2c190:	bf14      	ite	ne
   2c192:	2000      	movne	r0, #0
   2c194:	200f      	moveq	r0, #15
   2c196:	e7f1      	b.n	2c17c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2c198:	2002      	movs	r0, #2
   2c19a:	e7ef      	b.n	2c17c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2c19c:	2003      	movs	r0, #3
   2c19e:	e7ed      	b.n	2c17c <bt_gatt_check_perm+0x32>

0002c1a0 <bt_gatt_change_aware>:
{
   2c1a0:	b538      	push	{r3, r4, r5, lr}
   2c1a2:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   2c1a4:	f7ee fac6 	bl	1a734 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2c1a8:	b910      	cbnz	r0, 2c1b0 <bt_gatt_change_aware+0x10>
		return true;
   2c1aa:	2501      	movs	r5, #1
}
   2c1ac:	4628      	mov	r0, r5
   2c1ae:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2c1b0:	7a03      	ldrb	r3, [r0, #8]
   2c1b2:	07d9      	lsls	r1, r3, #31
   2c1b4:	d5f9      	bpl.n	2c1aa <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2c1b6:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c1ba:	4620      	mov	r0, r4
   2c1bc:	f7ff fdc5 	bl	2bd4a <atomic_get>
   2c1c0:	07c2      	lsls	r2, r0, #31
   2c1c2:	d4f2      	bmi.n	2c1aa <bt_gatt_change_aware+0xa>
	if (!req) {
   2c1c4:	2d00      	cmp	r5, #0
   2c1c6:	d0f1      	beq.n	2c1ac <bt_gatt_change_aware+0xc>
   2c1c8:	4620      	mov	r0, r4
   2c1ca:	f7ff fdbe 	bl	2bd4a <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2c1ce:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c1d0:	f3c0 0540 	ubfx	r5, r0, #1, #1
   2c1d4:	d509      	bpl.n	2c1ea <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c1d6:	f06f 0102 	mvn.w	r1, #2
   2c1da:	4620      	mov	r0, r4
   2c1dc:	f7ff fe31 	bl	2be42 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2c1e0:	2101      	movs	r1, #1
   2c1e2:	4620      	mov	r0, r4
   2c1e4:	f7ff fe0d 	bl	2be02 <atomic_or>
}
   2c1e8:	e7e0      	b.n	2c1ac <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2c1ea:	2102      	movs	r1, #2
   2c1ec:	e7f9      	b.n	2c1e2 <bt_gatt_change_aware+0x42>

0002c1ee <ccc_delayed_store>:
{
   2c1ee:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2c1f0:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2c1f4:	4605      	mov	r5, r0
		if (!conn) {
   2c1f6:	b194      	cbz	r4, 2c21e <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2c1f8:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2c1fc:	7a20      	ldrb	r0, [r4, #8]
   2c1fe:	4631      	mov	r1, r6
   2c200:	f7fe fe7e 	bl	2af00 <bt_addr_le_is_bonded>
   2c204:	b158      	cbz	r0, 2c21e <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   2c206:	2300      	movs	r3, #0
   2c208:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2c20c:	7a20      	ldrb	r0, [r4, #8]
   2c20e:	4631      	mov	r1, r6
   2c210:	f7ef fb8e 	bl	1b930 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2c214:	4620      	mov	r0, r4
}
   2c216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2c21a:	f7ec b88d 	b.w	18338 <bt_conn_unref>
}
   2c21e:	bd70      	pop	{r4, r5, r6, pc}

0002c220 <smp_pairing_rsp>:
}
   2c220:	2007      	movs	r0, #7
   2c222:	4770      	bx	lr

0002c224 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c224:	2301      	movs	r3, #1
   2c226:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c228:	f3bf 8f5b 	dmb	ish
   2c22c:	e850 2f00 	ldrex	r2, [r0]
   2c230:	431a      	orrs	r2, r3
   2c232:	e840 2100 	strex	r1, r2, [r0]
   2c236:	2900      	cmp	r1, #0
   2c238:	d1f8      	bne.n	2c22c <atomic_set_bit+0x8>
   2c23a:	f3bf 8f5b 	dmb	ish
}
   2c23e:	4770      	bx	lr

0002c240 <smp_keypress_notif>:
{
   2c240:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2c242:	210e      	movs	r1, #14
   2c244:	f7ff ffee 	bl	2c224 <atomic_set_bit>
}
   2c248:	2000      	movs	r0, #0
   2c24a:	bd08      	pop	{r3, pc}

0002c24c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c24c:	2301      	movs	r3, #1
   2c24e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c250:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c252:	f3bf 8f5b 	dmb	ish
   2c256:	e850 2f00 	ldrex	r2, [r0]
   2c25a:	401a      	ands	r2, r3
   2c25c:	e840 2100 	strex	r1, r2, [r0]
   2c260:	2900      	cmp	r1, #0
   2c262:	d1f8      	bne.n	2c256 <atomic_clear_bit+0xa>
   2c264:	f3bf 8f5b 	dmb	ish
}
   2c268:	4770      	bx	lr

0002c26a <bt_smp_aes_cmac>:
{
   2c26a:	b570      	push	{r4, r5, r6, lr}
   2c26c:	b0c2      	sub	sp, #264	; 0x108
   2c26e:	460d      	mov	r5, r1
   2c270:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2c272:	4601      	mov	r1, r0
   2c274:	aa16      	add	r2, sp, #88	; 0x58
   2c276:	4668      	mov	r0, sp
{
   2c278:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2c27a:	f7fe fa3e 	bl	2a6fa <tc_cmac_setup>
   2c27e:	b150      	cbz	r0, 2c296 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2c280:	4632      	mov	r2, r6
   2c282:	4629      	mov	r1, r5
   2c284:	4668      	mov	r0, sp
   2c286:	f7fe fa63 	bl	2a750 <tc_cmac_update>
   2c28a:	b120      	cbz	r0, 2c296 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2c28c:	4669      	mov	r1, sp
   2c28e:	4620      	mov	r0, r4
   2c290:	f7fe faca 	bl	2a828 <tc_cmac_final>
   2c294:	b918      	cbnz	r0, 2c29e <bt_smp_aes_cmac+0x34>
		return -EIO;
   2c296:	f06f 0004 	mvn.w	r0, #4
}
   2c29a:	b042      	add	sp, #264	; 0x108
   2c29c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2c29e:	2000      	movs	r0, #0
   2c2a0:	e7fb      	b.n	2c29a <bt_smp_aes_cmac+0x30>

0002c2a2 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c2a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c2a4:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c2a6:	2200      	movs	r2, #0
   2c2a8:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c2aa:	4604      	mov	r4, r0
   2c2ac:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c2ae:	460a      	mov	r2, r1
   2c2b0:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2c2b4:	2106      	movs	r1, #6
   2c2b6:	f7ff f94f 	bl	2b558 <bt_l2cap_send_cb>
   2c2ba:	b128      	cbz	r0, 2c2c8 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   2c2bc:	4628      	mov	r0, r5
}
   2c2be:	b003      	add	sp, #12
   2c2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2c2c4:	f7f1 bbf4 	b.w	1dab0 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c2c8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c2cc:	2300      	movs	r3, #0
   2c2ce:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
}
   2c2d2:	b003      	add	sp, #12
   2c2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c2d8:	f7f7 b8fa 	b.w	234d0 <k_work_reschedule>

0002c2dc <smp_security_request>:
   2c2dc:	2007      	movs	r0, #7
   2c2de:	4770      	bx	lr

0002c2e0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2c2e0:	b510      	push	{r4, lr}
   2c2e2:	1e43      	subs	r3, r0, #1
   2c2e4:	f100 0210 	add.w	r2, r0, #16
   2c2e8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2c2ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c2ee:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2c2f2:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2c2f4:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2c2f6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2c2f8:	d1f7      	bne.n	2c2ea <sys_mem_swap.constprop.0+0xa>
	}
}
   2c2fa:	bd10      	pop	{r4, pc}

0002c2fc <smp_f6>:
{
   2c2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2fe:	b097      	sub	sp, #92	; 0x5c
   2c300:	4605      	mov	r5, r0
   2c302:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2c304:	a805      	add	r0, sp, #20
   2c306:	2210      	movs	r2, #16
{
   2c308:	461c      	mov	r4, r3
   2c30a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2c30c:	f7ef fc10 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2c310:	2210      	movs	r2, #16
   2c312:	4631      	mov	r1, r6
   2c314:	a809      	add	r0, sp, #36	; 0x24
   2c316:	f7ef fc0b 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2c31a:	4621      	mov	r1, r4
   2c31c:	2210      	movs	r2, #16
   2c31e:	a80d      	add	r0, sp, #52	; 0x34
   2c320:	f7ef fc06 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2c324:	991c      	ldr	r1, [sp, #112]	; 0x70
   2c326:	2203      	movs	r2, #3
   2c328:	a811      	add	r0, sp, #68	; 0x44
   2c32a:	f7ef fc01 	bl	1bb30 <sys_memcpy_swap>
	m[51] = a1->type;
   2c32e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2c330:	f814 3b01 	ldrb.w	r3, [r4], #1
   2c334:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2c338:	4621      	mov	r1, r4
   2c33a:	2206      	movs	r2, #6
   2c33c:	a812      	add	r0, sp, #72	; 0x48
   2c33e:	f7fe fbac 	bl	2aa9a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2c342:	4621      	mov	r1, r4
   2c344:	2206      	movs	r2, #6
   2c346:	a812      	add	r0, sp, #72	; 0x48
   2c348:	f7ef fbf2 	bl	1bb30 <sys_memcpy_swap>
	m[58] = a2->type;
   2c34c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2c34e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2c352:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2c356:	4621      	mov	r1, r4
   2c358:	2206      	movs	r2, #6
   2c35a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2c35e:	f7fe fb9c 	bl	2aa9a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c362:	4621      	mov	r1, r4
   2c364:	2206      	movs	r2, #6
   2c366:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2c36a:	f7ef fbe1 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2c36e:	2210      	movs	r2, #16
   2c370:	4629      	mov	r1, r5
   2c372:	a801      	add	r0, sp, #4
   2c374:	f7ef fbdc 	bl	1bb30 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2c378:	463b      	mov	r3, r7
   2c37a:	2241      	movs	r2, #65	; 0x41
   2c37c:	a905      	add	r1, sp, #20
   2c37e:	a801      	add	r0, sp, #4
   2c380:	f7ff ff73 	bl	2c26a <bt_smp_aes_cmac>
	if (err) {
   2c384:	4604      	mov	r4, r0
   2c386:	b910      	cbnz	r0, 2c38e <smp_f6+0x92>
	sys_mem_swap(check, 16);
   2c388:	4638      	mov	r0, r7
   2c38a:	f7ff ffa9 	bl	2c2e0 <sys_mem_swap.constprop.0>
}
   2c38e:	4620      	mov	r0, r4
   2c390:	b017      	add	sp, #92	; 0x5c
   2c392:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c394 <smp_f4>:
{
   2c394:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c396:	b097      	sub	sp, #92	; 0x5c
   2c398:	4614      	mov	r4, r2
   2c39a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2c39c:	2220      	movs	r2, #32
   2c39e:	4601      	mov	r1, r0
   2c3a0:	a805      	add	r0, sp, #20
{
   2c3a2:	461d      	mov	r5, r3
   2c3a4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2c3a6:	f7ef fbc3 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2c3aa:	2220      	movs	r2, #32
   2c3ac:	4631      	mov	r1, r6
   2c3ae:	a80d      	add	r0, sp, #52	; 0x34
   2c3b0:	f7ef fbbe 	bl	1bb30 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2c3b4:	4621      	mov	r1, r4
   2c3b6:	2210      	movs	r2, #16
   2c3b8:	a801      	add	r0, sp, #4
	m[64] = z;
   2c3ba:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2c3be:	f7ef fbb7 	bl	1bb30 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2c3c2:	463b      	mov	r3, r7
   2c3c4:	2241      	movs	r2, #65	; 0x41
   2c3c6:	a905      	add	r1, sp, #20
   2c3c8:	a801      	add	r0, sp, #4
   2c3ca:	f7ff ff4e 	bl	2c26a <bt_smp_aes_cmac>
	if (err) {
   2c3ce:	4604      	mov	r4, r0
   2c3d0:	b910      	cbnz	r0, 2c3d8 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   2c3d2:	4638      	mov	r0, r7
   2c3d4:	f7ff ff84 	bl	2c2e0 <sys_mem_swap.constprop.0>
}
   2c3d8:	4620      	mov	r0, r4
   2c3da:	b017      	add	sp, #92	; 0x5c
   2c3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c3de <smp_signing_info>:
   2c3de:	2007      	movs	r0, #7
   2c3e0:	4770      	bx	lr

0002c3e2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c3e2:	f3bf 8f5b 	dmb	ish
   2c3e6:	6800      	ldr	r0, [r0, #0]
   2c3e8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c3ec:	4108      	asrs	r0, r1
}
   2c3ee:	f000 0001 	and.w	r0, r0, #1
   2c3f2:	4770      	bx	lr

0002c3f4 <update_keys_check>:
{
   2c3f4:	b510      	push	{r4, lr}
   2c3f6:	4603      	mov	r3, r0
	if (!keys ||
   2c3f8:	b1d9      	cbz	r1, 2c432 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2c3fa:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2c3fc:	f010 0f24 	tst.w	r0, #36	; 0x24
   2c400:	d017      	beq.n	2c432 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c402:	7d1a      	ldrb	r2, [r3, #20]
   2c404:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2c406:	7b09      	ldrb	r1, [r1, #12]
   2c408:	42a2      	cmp	r2, r4
   2c40a:	bf28      	it	cs
   2c40c:	4622      	movcs	r2, r4
   2c40e:	4291      	cmp	r1, r2
   2c410:	d901      	bls.n	2c416 <update_keys_check+0x22>
		return false;
   2c412:	2000      	movs	r0, #0
}
   2c414:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c416:	0682      	lsls	r2, r0, #26
   2c418:	d404      	bmi.n	2c424 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c41a:	7a18      	ldrb	r0, [r3, #8]
   2c41c:	3800      	subs	r0, #0
   2c41e:	bf18      	it	ne
   2c420:	2001      	movne	r0, #1
   2c422:	e7f7      	b.n	2c414 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c424:	2105      	movs	r1, #5
   2c426:	1d18      	adds	r0, r3, #4
   2c428:	f7ff ffdb 	bl	2c3e2 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c42c:	2800      	cmp	r0, #0
   2c42e:	d1f4      	bne.n	2c41a <update_keys_check+0x26>
   2c430:	e7ef      	b.n	2c412 <update_keys_check+0x1e>
		return true;
   2c432:	2001      	movs	r0, #1
   2c434:	e7ee      	b.n	2c414 <update_keys_check+0x20>

0002c436 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c436:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c438:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c43a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c43c:	4628      	mov	r0, r5
   2c43e:	2104      	movs	r1, #4
   2c440:	f7ff ffcf 	bl	2c3e2 <atomic_test_bit>
   2c444:	b168      	cbz	r0, 2c462 <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   2c446:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c448:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2c44a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c44c:	4608      	mov	r0, r1
   2c44e:	f7ff f880 	bl	2b552 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2c452:	4604      	mov	r4, r0
   2c454:	b940      	cbnz	r0, 2c468 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2c456:	2104      	movs	r1, #4
   2c458:	4628      	mov	r0, r5
   2c45a:	f7ff fee3 	bl	2c224 <atomic_set_bit>
}
   2c45e:	4620      	mov	r0, r4
   2c460:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2c462:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c466:	e7ef      	b.n	2c448 <smp_create_pdu.isra.0+0x12>
   2c468:	2101      	movs	r1, #1
   2c46a:	3008      	adds	r0, #8
   2c46c:	f7f1 fc50 	bl	1dd10 <net_buf_simple_add>
	hdr->code = op;
   2c470:	7006      	strb	r6, [r0, #0]
	return buf;
   2c472:	e7f4      	b.n	2c45e <smp_create_pdu.isra.0+0x28>

0002c474 <smp_send_pairing_random>:
{
   2c474:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c476:	2104      	movs	r1, #4
{
   2c478:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c47a:	f7ff ffdc 	bl	2c436 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2c47e:	4604      	mov	r4, r0
   2c480:	b178      	cbz	r0, 2c4a2 <smp_send_pairing_random+0x2e>
   2c482:	2110      	movs	r1, #16
   2c484:	3008      	adds	r0, #8
   2c486:	f7f1 fc43 	bl	1dd10 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2c48a:	2210      	movs	r2, #16
   2c48c:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2c490:	f7fe fb03 	bl	2aa9a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2c494:	4628      	mov	r0, r5
   2c496:	2200      	movs	r2, #0
   2c498:	4621      	mov	r1, r4
   2c49a:	f7ff ff02 	bl	2c2a2 <smp_send.isra.0>
	return 0;
   2c49e:	2000      	movs	r0, #0
}
   2c4a0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c4a2:	2008      	movs	r0, #8
   2c4a4:	e7fc      	b.n	2c4a0 <smp_send_pairing_random+0x2c>

0002c4a6 <send_pairing_rsp>:
{
   2c4a6:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2c4a8:	2102      	movs	r1, #2
{
   2c4aa:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2c4ac:	f7ff ffc3 	bl	2c436 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2c4b0:	4604      	mov	r4, r0
   2c4b2:	b178      	cbz	r0, 2c4d4 <send_pairing_rsp+0x2e>
   2c4b4:	2106      	movs	r1, #6
   2c4b6:	3008      	adds	r0, #8
   2c4b8:	f7f1 fc2a 	bl	1dd10 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2c4bc:	2206      	movs	r2, #6
   2c4be:	f105 0111 	add.w	r1, r5, #17
   2c4c2:	f7fe faea 	bl	2aa9a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2c4c6:	4628      	mov	r0, r5
   2c4c8:	2200      	movs	r2, #0
   2c4ca:	4621      	mov	r1, r4
   2c4cc:	f7ff fee9 	bl	2c2a2 <smp_send.isra.0>
	return 0;
   2c4d0:	2000      	movs	r0, #0
}
   2c4d2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c4d4:	2008      	movs	r0, #8
   2c4d6:	e7fc      	b.n	2c4d2 <send_pairing_rsp+0x2c>

0002c4d8 <smp_dhkey_check>:
{
   2c4d8:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2c4da:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2c4de:	78db      	ldrb	r3, [r3, #3]
   2c4e0:	2b01      	cmp	r3, #1
{
   2c4e2:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2c4e4:	d114      	bne.n	2c510 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2c4e6:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2c4e8:	1d05      	adds	r5, r0, #4
   2c4ea:	2110      	movs	r1, #16
   2c4ec:	4628      	mov	r0, r5
   2c4ee:	f7ff fead 	bl	2c24c <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   2c4f2:	4631      	mov	r1, r6
   2c4f4:	2210      	movs	r2, #16
   2c4f6:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2c4fa:	f7fe face 	bl	2aa9a <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2c4fe:	2107      	movs	r1, #7
   2c500:	4628      	mov	r0, r5
   2c502:	f7ff ff6e 	bl	2c3e2 <atomic_test_bit>
   2c506:	b128      	cbz	r0, 2c514 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c508:	2109      	movs	r1, #9
   2c50a:	4628      	mov	r0, r5
   2c50c:	f7ff fe8a 	bl	2c224 <atomic_set_bit>
}
   2c510:	2000      	movs	r0, #0
   2c512:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c514:	210a      	movs	r1, #10
   2c516:	4628      	mov	r0, r5
   2c518:	f7ff ff63 	bl	2c3e2 <atomic_test_bit>
   2c51c:	2800      	cmp	r0, #0
   2c51e:	d1f3      	bne.n	2c508 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2c520:	4620      	mov	r0, r4
}
   2c522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2c526:	f7ef bbdf 	b.w	1bce8 <compute_and_check_and_send_periph_dhcheck>

0002c52a <atomic_test_and_clear_bit>:
{
   2c52a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c52c:	2301      	movs	r3, #1
   2c52e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c532:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c534:	f3bf 8f5b 	dmb	ish
   2c538:	e850 3f00 	ldrex	r3, [r0]
   2c53c:	ea03 0c02 	and.w	ip, r3, r2
   2c540:	e840 ce00 	strex	lr, ip, [r0]
   2c544:	f1be 0f00 	cmp.w	lr, #0
   2c548:	d1f6      	bne.n	2c538 <atomic_test_and_clear_bit+0xe>
   2c54a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c54e:	420b      	tst	r3, r1
}
   2c550:	bf14      	ite	ne
   2c552:	2001      	movne	r0, #1
   2c554:	2000      	moveq	r0, #0
   2c556:	f85d fb04 	ldr.w	pc, [sp], #4

0002c55a <smp_reset>:
{
   2c55a:	b538      	push	{r3, r4, r5, lr}
   2c55c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c55e:	1d03      	adds	r3, r0, #4
   2c560:	2500      	movs	r5, #0
   2c562:	f3bf 8f5b 	dmb	ish
   2c566:	e853 2f00 	ldrex	r2, [r3]
   2c56a:	e843 5100 	strex	r1, r5, [r3]
   2c56e:	2900      	cmp	r1, #0
   2c570:	d1f9      	bne.n	2c566 <smp_reset+0xc>
   2c572:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2c576:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   2c57a:	f7f6 ffaf 	bl	234dc <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2c57e:	7225      	strb	r5, [r4, #8]
   2c580:	f3bf 8f5b 	dmb	ish
   2c584:	e854 3f00 	ldrex	r3, [r4]
   2c588:	e844 5200 	strex	r2, r5, [r4]
   2c58c:	2a00      	cmp	r2, #0
   2c58e:	d1f9      	bne.n	2c584 <smp_reset+0x2a>
   2c590:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c594:	4620      	mov	r0, r4
   2c596:	2101      	movs	r1, #1
}
   2c598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c59c:	f7ff be42 	b.w	2c224 <atomic_set_bit>

0002c5a0 <smp_c1>:
{
   2c5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c5a4:	b089      	sub	sp, #36	; 0x24
   2c5a6:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2c5aa:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2c5ac:	783b      	ldrb	r3, [r7, #0]
{
   2c5ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2c5b0:	f88d 3000 	strb.w	r3, [sp]
{
   2c5b4:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2c5b6:	f898 3000 	ldrb.w	r3, [r8]
   2c5ba:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2c5be:	4611      	mov	r1, r2
   2c5c0:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2c5c2:	2207      	movs	r2, #7
   2c5c4:	f10d 0002 	add.w	r0, sp, #2
   2c5c8:	f7fe fa67 	bl	2aa9a <memcpy>
	memcpy(p1 + 9, pres, 7);
   2c5cc:	2207      	movs	r2, #7
   2c5ce:	4649      	mov	r1, r9
   2c5d0:	f10d 0009 	add.w	r0, sp, #9
   2c5d4:	f7fe fa61 	bl	2aa9a <memcpy>
	while (len--) {
   2c5d8:	f104 0010 	add.w	r0, r4, #16
   2c5dc:	4629      	mov	r1, r5
   2c5de:	466a      	mov	r2, sp
   2c5e0:	4284      	cmp	r4, r0
   2c5e2:	d127      	bne.n	2c634 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2c5e4:	462a      	mov	r2, r5
   2c5e6:	4629      	mov	r1, r5
   2c5e8:	4630      	mov	r0, r6
   2c5ea:	f000 fd1e 	bl	2d02a <bt_encrypt_le>
	if (err) {
   2c5ee:	4604      	mov	r4, r0
   2c5f0:	b9e0      	cbnz	r0, 2c62c <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2c5f2:	2206      	movs	r2, #6
   2c5f4:	f108 0101 	add.w	r1, r8, #1
   2c5f8:	a804      	add	r0, sp, #16
   2c5fa:	f7fe fa4e 	bl	2aa9a <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2c5fe:	2206      	movs	r2, #6
   2c600:	1c79      	adds	r1, r7, #1
   2c602:	f10d 0016 	add.w	r0, sp, #22
   2c606:	f7fe fa48 	bl	2aa9a <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2c60a:	2204      	movs	r2, #4
   2c60c:	4621      	mov	r1, r4
   2c60e:	a807      	add	r0, sp, #28
   2c610:	f7fe fa4e 	bl	2aab0 <memset>
	while (len--) {
   2c614:	f105 0010 	add.w	r0, r5, #16
   2c618:	462a      	mov	r2, r5
   2c61a:	ab04      	add	r3, sp, #16
   2c61c:	4282      	cmp	r2, r0
   2c61e:	d112      	bne.n	2c646 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2c620:	462a      	mov	r2, r5
   2c622:	4629      	mov	r1, r5
   2c624:	4630      	mov	r0, r6
   2c626:	f000 fd00 	bl	2d02a <bt_encrypt_le>
   2c62a:	4604      	mov	r4, r0
}
   2c62c:	4620      	mov	r0, r4
   2c62e:	b009      	add	sp, #36	; 0x24
   2c630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2c634:	f814 3b01 	ldrb.w	r3, [r4], #1
   2c638:	f812 cb01 	ldrb.w	ip, [r2], #1
   2c63c:	ea83 030c 	eor.w	r3, r3, ip
   2c640:	f801 3b01 	strb.w	r3, [r1], #1
   2c644:	e7cc      	b.n	2c5e0 <smp_c1+0x40>
   2c646:	f812 1b01 	ldrb.w	r1, [r2], #1
   2c64a:	f813 4b01 	ldrb.w	r4, [r3], #1
   2c64e:	4061      	eors	r1, r4
   2c650:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c654:	e7e2      	b.n	2c61c <smp_c1+0x7c>

0002c656 <legacy_pairing_confirm>:
{
   2c656:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c658:	1d07      	adds	r7, r0, #4
{
   2c65a:	b085      	sub	sp, #20
   2c65c:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c65e:	210a      	movs	r1, #10
   2c660:	4638      	mov	r0, r7
   2c662:	f7ff febe 	bl	2c3e2 <atomic_test_bit>
   2c666:	bb88      	cbnz	r0, 2c6cc <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2c668:	2104      	movs	r1, #4
   2c66a:	4628      	mov	r0, r5
   2c66c:	f7ff fdda 	bl	2c224 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c670:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2c672:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c676:	f7ff fede 	bl	2c436 <smp_create_pdu.isra.0>
	if (!buf) {
   2c67a:	4606      	mov	r6, r0
   2c67c:	b1c0      	cbz	r0, 2c6b0 <legacy_pairing_confirm+0x5a>
   2c67e:	2110      	movs	r1, #16
   2c680:	3008      	adds	r0, #8
   2c682:	f7f1 fb45 	bl	1dd10 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2c686:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   2c68a:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2c68c:	9002      	str	r0, [sp, #8]
   2c68e:	9301      	str	r3, [sp, #4]
   2c690:	9400      	str	r4, [sp, #0]
   2c692:	f105 0310 	add.w	r3, r5, #16
   2c696:	f105 0209 	add.w	r2, r5, #9
   2c69a:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2c69e:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2c6a2:	f7ff ff7d 	bl	2c5a0 <smp_c1>
   2c6a6:	4604      	mov	r4, r0
   2c6a8:	b120      	cbz	r0, 2c6b4 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2c6aa:	4630      	mov	r0, r6
   2c6ac:	f7f1 fa00 	bl	1dab0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2c6b0:	2008      	movs	r0, #8
   2c6b2:	e009      	b.n	2c6c8 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   2c6b4:	4602      	mov	r2, r0
   2c6b6:	4631      	mov	r1, r6
   2c6b8:	4628      	mov	r0, r5
   2c6ba:	f7ff fdf2 	bl	2c2a2 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c6be:	4621      	mov	r1, r4
   2c6c0:	4638      	mov	r0, r7
   2c6c2:	f7ff fdc3 	bl	2c24c <atomic_clear_bit>
	return 0;
   2c6c6:	2000      	movs	r0, #0
}
   2c6c8:	b005      	add	sp, #20
   2c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c6cc:	2100      	movs	r1, #0
   2c6ce:	4638      	mov	r0, r7
   2c6d0:	f7ff fda8 	bl	2c224 <atomic_set_bit>
   2c6d4:	e7f7      	b.n	2c6c6 <legacy_pairing_confirm+0x70>

0002c6d6 <bt_smp_request_ltk>:
{
   2c6d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c6da:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2c6de:	e9cd 2300 	strd	r2, r3, [sp]
   2c6e2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2c6e4:	f7ef fa96 	bl	1bc14 <smp_chan_get>
	if (!smp) {
   2c6e8:	4605      	mov	r5, r0
   2c6ea:	2800      	cmp	r0, #0
   2c6ec:	f000 8090 	beq.w	2c810 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2c6f0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   2c6f4:	1d07      	adds	r7, r0, #4
   2c6f6:	f1b9 0f00 	cmp.w	r9, #0
   2c6fa:	d12a      	bne.n	2c752 <bt_smp_request_ltk+0x7c>
   2c6fc:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c700:	4313      	orrs	r3, r2
   2c702:	d126      	bne.n	2c752 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c704:	2103      	movs	r1, #3
   2c706:	4638      	mov	r0, r7
   2c708:	f7ff fe6b 	bl	2c3e2 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2c70c:	b308      	cbz	r0, 2c752 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2c70e:	2101      	movs	r1, #1
   2c710:	4638      	mov	r0, r7
   2c712:	f7ff fe66 	bl	2c3e2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c716:	4606      	mov	r6, r0
   2c718:	b1d8      	cbz	r0, 2c752 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c71a:	7d2c      	ldrb	r4, [r5, #20]
   2c71c:	7b6b      	ldrb	r3, [r5, #13]
   2c71e:	429c      	cmp	r4, r3
   2c720:	bf28      	it	cs
   2c722:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2c724:	4622      	mov	r2, r4
   2c726:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2c72a:	4640      	mov	r0, r8
   2c72c:	f7fe f9b5 	bl	2aa9a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c730:	2c0f      	cmp	r4, #15
   2c732:	d806      	bhi.n	2c742 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   2c734:	f1c4 0210 	rsb	r2, r4, #16
   2c738:	4649      	mov	r1, r9
   2c73a:	eb08 0004 	add.w	r0, r8, r4
   2c73e:	f7fe f9b7 	bl	2aab0 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c742:	2101      	movs	r1, #1
   2c744:	4638      	mov	r0, r7
   2c746:	f7ff fd6d 	bl	2c224 <atomic_set_bit>
}
   2c74a:	4630      	mov	r0, r6
   2c74c:	b003      	add	sp, #12
   2c74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2c752:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2c756:	b983      	cbnz	r3, 2c77a <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2c758:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2c75c:	7a21      	ldrb	r1, [r4, #8]
   2c75e:	4632      	mov	r2, r6
   2c760:	2020      	movs	r0, #32
   2c762:	f7f0 fe3b 	bl	1d3dc <bt_keys_find>
   2c766:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2c76a:	b930      	cbnz	r0, 2c77a <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2c76c:	7a21      	ldrb	r1, [r4, #8]
   2c76e:	4632      	mov	r2, r6
   2c770:	2001      	movs	r0, #1
   2c772:	f7f0 fe33 	bl	1d3dc <bt_keys_find>
   2c776:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2c77a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   2c77e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2c782:	b9ee      	cbnz	r6, 2c7c0 <bt_smp_request_ltk+0xea>
   2c784:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c788:	4313      	orrs	r3, r2
   2c78a:	d119      	bne.n	2c7c0 <bt_smp_request_ltk+0xea>
   2c78c:	b388      	cbz	r0, 2c7f2 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c78e:	89c3      	ldrh	r3, [r0, #14]
   2c790:	069a      	lsls	r2, r3, #26
   2c792:	d516      	bpl.n	2c7c2 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2c794:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2c796:	f100 011a 	add.w	r1, r0, #26
   2c79a:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2c79c:	4640      	mov	r0, r8
   2c79e:	f7fe f97c 	bl	2aa9a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c7a2:	2c0f      	cmp	r4, #15
   2c7a4:	d806      	bhi.n	2c7b4 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   2c7a6:	f1c4 0210 	rsb	r2, r4, #16
   2c7aa:	4631      	mov	r1, r6
   2c7ac:	eb08 0004 	add.w	r0, r8, r4
   2c7b0:	f7fe f97e 	bl	2aab0 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c7b4:	2101      	movs	r1, #1
   2c7b6:	4638      	mov	r0, r7
   2c7b8:	f7ff fd34 	bl	2c224 <atomic_set_bit>
		return true;
   2c7bc:	2601      	movs	r6, #1
   2c7be:	e7c4      	b.n	2c74a <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c7c0:	b1b8      	cbz	r0, 2c7f2 <bt_smp_request_ltk+0x11c>
   2c7c2:	89c3      	ldrh	r3, [r0, #14]
   2c7c4:	07db      	lsls	r3, r3, #31
   2c7c6:	d514      	bpl.n	2c7f2 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c7c8:	2208      	movs	r2, #8
   2c7ca:	4669      	mov	r1, sp
   2c7cc:	3040      	adds	r0, #64	; 0x40
   2c7ce:	f7fe f93d 	bl	2aa4c <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c7d2:	b970      	cbnz	r0, 2c7f2 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2c7d4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2c7d8:	2202      	movs	r2, #2
   2c7da:	a90a      	add	r1, sp, #40	; 0x28
   2c7dc:	3048      	adds	r0, #72	; 0x48
   2c7de:	f7fe f935 	bl	2aa4c <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c7e2:	4606      	mov	r6, r0
   2c7e4:	b928      	cbnz	r0, 2c7f2 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2c7e6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2c7ea:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2c7ec:	314a      	adds	r1, #74	; 0x4a
   2c7ee:	4622      	mov	r2, r4
   2c7f0:	e7d4      	b.n	2c79c <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c7f2:	210f      	movs	r1, #15
   2c7f4:	4638      	mov	r0, r7
   2c7f6:	f7ff fdf4 	bl	2c3e2 <atomic_test_bit>
   2c7fa:	b120      	cbz	r0, 2c806 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2c7fc:	2202      	movs	r2, #2
   2c7fe:	2106      	movs	r1, #6
   2c800:	4620      	mov	r0, r4
   2c802:	f7ec f831 	bl	18868 <bt_conn_security_changed>
	smp_reset(smp);
   2c806:	4628      	mov	r0, r5
   2c808:	f7ff fea7 	bl	2c55a <smp_reset>
	return false;
   2c80c:	2600      	movs	r6, #0
   2c80e:	e79c      	b.n	2c74a <bt_smp_request_ltk+0x74>
		return false;
   2c810:	4606      	mov	r6, r0
   2c812:	e79a      	b.n	2c74a <bt_smp_request_ltk+0x74>

0002c814 <bt_smp_sign>:
   2c814:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c818:	4770      	bx	lr

0002c81a <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c81a:	1d03      	adds	r3, r0, #4
{
   2c81c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c81e:	4605      	mov	r5, r0
   2c820:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c822:	4618      	mov	r0, r3
   2c824:	2103      	movs	r1, #3
   2c826:	f7ff fddc 	bl	2c3e2 <atomic_test_bit>
   2c82a:	b1f0      	cbz	r0, 2c86a <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2c82c:	4631      	mov	r1, r6
   2c82e:	4628      	mov	r0, r5
   2c830:	f7f0 f93c 	bl	1caac <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2c834:	2105      	movs	r1, #5
   2c836:	4628      	mov	r0, r5
   2c838:	f7ff fdfd 	bl	2c436 <smp_create_pdu.isra.0>
	if (!buf) {
   2c83c:	4604      	mov	r4, r0
   2c83e:	b308      	cbz	r0, 2c884 <smp_error+0x6a>
   2c840:	2101      	movs	r1, #1
   2c842:	3008      	adds	r0, #8
   2c844:	f7f1 fa64 	bl	1dd10 <net_buf_simple_add>
	rsp->reason = reason;
   2c848:	7006      	strb	r6, [r0, #0]
   2c84a:	2600      	movs	r6, #0
   2c84c:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2c850:	9600      	str	r6, [sp, #0]
   2c852:	4633      	mov	r3, r6
   2c854:	4622      	mov	r2, r4
   2c856:	2106      	movs	r1, #6
   2c858:	f7fe fe7e 	bl	2b558 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2c85c:	b118      	cbz	r0, 2c866 <smp_error+0x4c>
		net_buf_unref(buf);
   2c85e:	4620      	mov	r0, r4
   2c860:	f7f1 f926 	bl	1dab0 <net_buf_unref>
	return 0;
   2c864:	4630      	mov	r0, r6
}
   2c866:	b002      	add	sp, #8
   2c868:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c86a:	2101      	movs	r1, #1
   2c86c:	4618      	mov	r0, r3
   2c86e:	f7ff fdb8 	bl	2c3e2 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c872:	2800      	cmp	r0, #0
   2c874:	d1da      	bne.n	2c82c <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c876:	210f      	movs	r1, #15
   2c878:	4618      	mov	r0, r3
   2c87a:	f7ff fdb2 	bl	2c3e2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c87e:	2800      	cmp	r0, #0
   2c880:	d1d4      	bne.n	2c82c <smp_error+0x12>
   2c882:	e7d7      	b.n	2c834 <smp_error+0x1a>
		return -ENOBUFS;
   2c884:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c888:	e7ed      	b.n	2c866 <smp_error+0x4c>

0002c88a <bt_smp_dhkey_ready>:
{
   2c88a:	b570      	push	{r4, r5, r6, lr}
   2c88c:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2c88e:	2008      	movs	r0, #8
   2c890:	f7ef fa1c 	bl	1bccc <smp_find>
	if (smp) {
   2c894:	4604      	mov	r4, r0
   2c896:	b1b8      	cbz	r0, 2c8c8 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2c898:	1d05      	adds	r5, r0, #4
   2c89a:	2108      	movs	r1, #8
   2c89c:	4628      	mov	r0, r5
   2c89e:	f7ff fcd5 	bl	2c24c <atomic_clear_bit>
	if (!dhkey) {
   2c8a2:	b38e      	cbz	r6, 2c908 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2c8a4:	2107      	movs	r1, #7
   2c8a6:	f7ff fcd1 	bl	2c24c <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2c8aa:	4631      	mov	r1, r6
   2c8ac:	2220      	movs	r2, #32
   2c8ae:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2c8b2:	f7fe f8f2 	bl	2aa9a <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c8b6:	210a      	movs	r1, #10
   2c8b8:	4628      	mov	r0, r5
   2c8ba:	f7ff fd92 	bl	2c3e2 <atomic_test_bit>
   2c8be:	b168      	cbz	r0, 2c8dc <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c8c0:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c8c2:	4628      	mov	r0, r5
   2c8c4:	f7ff fcae 	bl	2c224 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2c8c8:	2007      	movs	r0, #7
   2c8ca:	f7ef f9ff 	bl	1bccc <smp_find>
		if (smp) {
   2c8ce:	4604      	mov	r4, r0
   2c8d0:	b118      	cbz	r0, 2c8da <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2c8d2:	f7ef f95b 	bl	1bb8c <smp_dhkey_generate>
			if (err) {
   2c8d6:	4601      	mov	r1, r0
   2c8d8:	b990      	cbnz	r0, 2c900 <bt_smp_dhkey_ready+0x76>
}
   2c8da:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c8dc:	2110      	movs	r1, #16
   2c8de:	4628      	mov	r0, r5
   2c8e0:	f7ff fd7f 	bl	2c3e2 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c8e4:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c8e6:	2800      	cmp	r0, #0
   2c8e8:	d1eb      	bne.n	2c8c2 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2c8ea:	4628      	mov	r0, r5
   2c8ec:	f7ff fd79 	bl	2c3e2 <atomic_test_bit>
   2c8f0:	2800      	cmp	r0, #0
   2c8f2:	d0e9      	beq.n	2c8c8 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2c8f4:	4620      	mov	r0, r4
   2c8f6:	f7ef f9f7 	bl	1bce8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2c8fa:	4601      	mov	r1, r0
   2c8fc:	2800      	cmp	r0, #0
   2c8fe:	d0e3      	beq.n	2c8c8 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2c900:	4620      	mov	r0, r4
   2c902:	f7ff ff8a 	bl	2c81a <smp_error>
   2c906:	e7df      	b.n	2c8c8 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2c908:	210b      	movs	r1, #11
   2c90a:	e7f9      	b.n	2c900 <bt_smp_dhkey_ready+0x76>

0002c90c <bt_smp_disconnected>:
{
   2c90c:	b570      	push	{r4, r5, r6, lr}
   2c90e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2c910:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2c914:	f850 3bf0 	ldr.w	r3, [r0], #240
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c918:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2c91a:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2c91e:	f7f6 fddd 	bl	234dc <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c922:	2103      	movs	r1, #3
   2c924:	4620      	mov	r0, r4
   2c926:	f7ff fd5c 	bl	2c3e2 <atomic_test_bit>
   2c92a:	b1a0      	cbz	r0, 2c956 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c92c:	2108      	movs	r1, #8
   2c92e:	4630      	mov	r0, r6
   2c930:	f7f0 f8bc 	bl	1caac <smp_pairing_complete>
	if (keys) {
   2c934:	b13d      	cbz	r5, 2c946 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2c936:	89eb      	ldrh	r3, [r5, #14]
   2c938:	b113      	cbz	r3, 2c940 <bt_smp_disconnected+0x34>
   2c93a:	7b6b      	ldrb	r3, [r5, #13]
   2c93c:	079b      	lsls	r3, r3, #30
   2c93e:	d502      	bpl.n	2c946 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2c940:	4628      	mov	r0, r5
   2c942:	f7f0 fdab 	bl	1d49c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2c946:	4630      	mov	r0, r6
   2c948:	f44f 7204 	mov.w	r2, #528	; 0x210
}
   2c94c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2c950:	2100      	movs	r1, #0
   2c952:	f7fe b8ad 	b.w	2aab0 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c956:	2101      	movs	r1, #1
   2c958:	4620      	mov	r0, r4
   2c95a:	f7ff fd42 	bl	2c3e2 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c95e:	2800      	cmp	r0, #0
   2c960:	d1e4      	bne.n	2c92c <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c962:	210f      	movs	r1, #15
   2c964:	4620      	mov	r0, r4
   2c966:	f7ff fd3c 	bl	2c3e2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c96a:	2800      	cmp	r0, #0
   2c96c:	d1de      	bne.n	2c92c <bt_smp_disconnected+0x20>
   2c96e:	e7e1      	b.n	2c934 <bt_smp_disconnected+0x28>

0002c970 <id_add>:
	bt_id_add(keys);
   2c970:	f7ea bac6 	b.w	16f00 <bt_id_add>

0002c974 <bt_keys_get_type>:
{
   2c974:	b570      	push	{r4, r5, r6, lr}
   2c976:	4604      	mov	r4, r0
   2c978:	460d      	mov	r5, r1
   2c97a:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2c97c:	f7f0 fd2e 	bl	1d3dc <bt_keys_find>
	if (keys) {
   2c980:	b938      	cbnz	r0, 2c992 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2c982:	4631      	mov	r1, r6
   2c984:	4628      	mov	r0, r5
   2c986:	f7f0 fce9 	bl	1d35c <bt_keys_get_addr>
	if (!keys) {
   2c98a:	b110      	cbz	r0, 2c992 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2c98c:	89c3      	ldrh	r3, [r0, #14]
   2c98e:	431c      	orrs	r4, r3
   2c990:	81c4      	strh	r4, [r0, #14]
}
   2c992:	bd70      	pop	{r4, r5, r6, pc}

0002c994 <bt_keys_add_type>:
	keys->keys |= type;
   2c994:	89c3      	ldrh	r3, [r0, #14]
   2c996:	4319      	orrs	r1, r3
   2c998:	81c1      	strh	r1, [r0, #14]
}
   2c99a:	4770      	bx	lr

0002c99c <fixed_data_unref>:
}
   2c99c:	4770      	bx	lr

0002c99e <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c99e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2c9a0:	6849      	ldr	r1, [r1, #4]
   2c9a2:	6809      	ldr	r1, [r1, #0]
   2c9a4:	f7f0 bedc 	b.w	1d760 <net_buf_alloc_len>

0002c9a8 <net_buf_simple_pull_le16>:
{
   2c9a8:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c9aa:	6803      	ldr	r3, [r0, #0]
   2c9ac:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c9ae:	2102      	movs	r1, #2
   2c9b0:	f7f1 f96c 	bl	1dc8c <net_buf_simple_pull>
}
   2c9b4:	4620      	mov	r0, r4
   2c9b6:	bd10      	pop	{r4, pc}

0002c9b8 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2c9b8:	6802      	ldr	r2, [r0, #0]
   2c9ba:	6880      	ldr	r0, [r0, #8]
}
   2c9bc:	1a10      	subs	r0, r2, r0
   2c9be:	4770      	bx	lr

0002c9c0 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2c9c0:	8883      	ldrh	r3, [r0, #4]
   2c9c2:	88c2      	ldrh	r2, [r0, #6]
   2c9c4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2c9c6:	6803      	ldr	r3, [r0, #0]
   2c9c8:	6880      	ldr	r0, [r0, #8]
   2c9ca:	1a18      	subs	r0, r3, r0
}
   2c9cc:	1a10      	subs	r0, r2, r0
   2c9ce:	4770      	bx	lr

0002c9d0 <net_buf_simple_add_mem>:
{
   2c9d0:	b538      	push	{r3, r4, r5, lr}
   2c9d2:	460d      	mov	r5, r1
   2c9d4:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2c9d6:	4611      	mov	r1, r2
   2c9d8:	f7f1 f99a 	bl	1dd10 <net_buf_simple_add>
   2c9dc:	4622      	mov	r2, r4
   2c9de:	4629      	mov	r1, r5
}
   2c9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2c9e4:	f7fe b859 	b.w	2aa9a <memcpy>

0002c9e8 <net_buf_simple_add_u8>:
{
   2c9e8:	b510      	push	{r4, lr}
   2c9ea:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2c9ec:	2101      	movs	r1, #1
   2c9ee:	f7f1 f98f 	bl	1dd10 <net_buf_simple_add>
	*u8 = val;
   2c9f2:	7004      	strb	r4, [r0, #0]
}
   2c9f4:	bd10      	pop	{r4, pc}

0002c9f6 <set_starting_state>:
{
   2c9f6:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c9f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c9fc:	f3ef 8211 	mrs	r2, BASEPRI
   2ca00:	f383 8812 	msr	BASEPRI_MAX, r3
   2ca04:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2ca08:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2ca0a:	f003 0407 	and.w	r4, r3, #7
   2ca0e:	2c01      	cmp	r4, #1
   2ca10:	d106      	bne.n	2ca20 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2ca12:	6001      	str	r1, [r0, #0]
	int err = 0;
   2ca14:	2000      	movs	r0, #0
	__asm__ volatile(
   2ca16:	f382 8811 	msr	BASEPRI, r2
   2ca1a:	f3bf 8f6f 	isb	sy
}
   2ca1e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2ca20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2ca24:	428b      	cmp	r3, r1
		err = -EALREADY;
   2ca26:	bf14      	ite	ne
   2ca28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2ca2c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2ca30:	e7f1      	b.n	2ca16 <set_starting_state+0x20>

0002ca32 <set_on_state>:
	__asm__ volatile(
   2ca32:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ca36:	f3ef 8211 	mrs	r2, BASEPRI
   2ca3a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ca3e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2ca42:	6803      	ldr	r3, [r0, #0]
   2ca44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2ca48:	f043 0302 	orr.w	r3, r3, #2
   2ca4c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2ca4e:	f382 8811 	msr	BASEPRI, r2
   2ca52:	f3bf 8f6f 	isb	sy
}
   2ca56:	4770      	bx	lr

0002ca58 <onoff_started_callback>:
	return &data->mgr[type];
   2ca58:	6900      	ldr	r0, [r0, #16]
   2ca5a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2ca5c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2ca60:	2100      	movs	r1, #0
   2ca62:	4710      	bx	r2

0002ca64 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2ca64:	2000      	movs	r0, #0
   2ca66:	f7f3 bf7f 	b.w	20968 <nrfx_clock_start>

0002ca6a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2ca6a:	2000      	movs	r0, #0
   2ca6c:	f7f3 bfa6 	b.w	209bc <nrfx_clock_stop>

0002ca70 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2ca70:	2280      	movs	r2, #128	; 0x80
   2ca72:	f7f1 b9b3 	b.w	1dddc <stop>

0002ca76 <blocking_start_callback>:
{
   2ca76:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2ca78:	f7f5 bfee 	b.w	22a58 <z_impl_k_sem_give>

0002ca7c <api_start>:
{
   2ca7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca80:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   2ca82:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2ca84:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   2ca86:	434c      	muls	r4, r1
{
   2ca88:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2ca8a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2ca8e:	2180      	movs	r1, #128	; 0x80
   2ca90:	4428      	add	r0, r5
{
   2ca92:	4690      	mov	r8, r2
   2ca94:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2ca96:	f7ff ffae 	bl	2c9f6 <set_starting_state>
	if (err < 0) {
   2ca9a:	2800      	cmp	r0, #0
   2ca9c:	db06      	blt.n	2caac <api_start+0x30>
	subdata->cb = cb;
   2ca9e:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2caa0:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2caa4:	6873      	ldr	r3, [r6, #4]
   2caa6:	591b      	ldr	r3, [r3, r4]
   2caa8:	4798      	blx	r3
	return 0;
   2caaa:	2000      	movs	r0, #0
}
   2caac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cab0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cab0:	6843      	ldr	r3, [r0, #4]
   2cab2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2cab4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2cab8:	600b      	str	r3, [r1, #0]
}
   2caba:	2000      	movs	r0, #0
   2cabc:	4770      	bx	lr

0002cabe <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cabe:	6843      	ldr	r3, [r0, #4]
   2cac0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2cac2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2cac6:	4042      	eors	r2, r0
   2cac8:	400a      	ands	r2, r1
   2caca:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2cacc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2cad0:	2000      	movs	r0, #0
   2cad2:	4770      	bx	lr

0002cad4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cad4:	6843      	ldr	r3, [r0, #4]
   2cad6:	685b      	ldr	r3, [r3, #4]
}
   2cad8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2cada:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2cade:	4770      	bx	lr

0002cae0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cae0:	6843      	ldr	r3, [r0, #4]
   2cae2:	685b      	ldr	r3, [r3, #4]
}
   2cae4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2cae6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2caea:	4770      	bx	lr

0002caec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2caec:	6843      	ldr	r3, [r0, #4]
   2caee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2caf0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2caf4:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2caf6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2cafa:	2000      	movs	r0, #0
   2cafc:	4770      	bx	lr

0002cafe <is_regular_addr_valid>:
{
   2cafe:	b538      	push	{r3, r4, r5, lr}
   2cb00:	4604      	mov	r4, r0
   2cb02:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2cb04:	f000 fb78 	bl	2d1f8 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2cb08:	4284      	cmp	r4, r0
   2cb0a:	d209      	bcs.n	2cb20 <is_regular_addr_valid+0x22>
   2cb0c:	2c00      	cmp	r4, #0
   2cb0e:	db07      	blt.n	2cb20 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2cb10:	42a8      	cmp	r0, r5
   2cb12:	d305      	bcc.n	2cb20 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2cb14:	442c      	add	r4, r5
	    len > flash_size ||
   2cb16:	4284      	cmp	r4, r0
   2cb18:	bf8c      	ite	hi
   2cb1a:	2000      	movhi	r0, #0
   2cb1c:	2001      	movls	r0, #1
}
   2cb1e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2cb20:	2000      	movs	r0, #0
   2cb22:	e7fc      	b.n	2cb1e <is_regular_addr_valid+0x20>

0002cb24 <nrf_power_pofcon_set.constprop.0>:
    uint32_t pofcon = p_reg->POFCON;
   2cb24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2cb28:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2cb2c:	f023 031f 	bic.w	r3, r3, #31
   2cb30:	4303      	orrs	r3, r0
    pofcon |=
   2cb32:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    p_reg->POFCON = pofcon;
   2cb36:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   2cb3a:	4770      	bx	lr

0002cb3c <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2cb3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2cb40:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   2cb42:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2cb44:	2500      	movs	r5, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   2cb46:	695b      	ldr	r3, [r3, #20]
	info->start_offset = 0;
   2cb48:	6025      	str	r5, [r4, #0]
{
   2cb4a:	460e      	mov	r6, r1
   2cb4c:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   2cb4e:	4669      	mov	r1, sp
	info->index = 0U;
   2cb50:	60a5      	str	r5, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   2cb52:	aa01      	add	r2, sp, #4
   2cb54:	4798      	blx	r3

	while (layout_size--) {
   2cb56:	e9dd 1c00 	ldrd	r1, ip, [sp]
   2cb5a:	4628      	mov	r0, r5
		info->size = layout->pages_size;
   2cb5c:	f101 0e04 	add.w	lr, r1, #4
	while (layout_size--) {
   2cb60:	4560      	cmp	r0, ip
   2cb62:	d104      	bne.n	2cb6e <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2cb64:	f06f 0015 	mvn.w	r0, #21
}
   2cb68:	b003      	add	sp, #12
   2cb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   2cb6e:	f85e 5030 	ldr.w	r5, [lr, r0, lsl #3]
   2cb72:	68a2      	ldr	r2, [r4, #8]
   2cb74:	f8d4 9000 	ldr.w	r9, [r4]
   2cb78:	6065      	str	r5, [r4, #4]
		if (offs == 0) {
   2cb7a:	b986      	cbnz	r6, 2cb9e <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   2cb7c:	1abb      	subs	r3, r7, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2cb7e:	f851 8030 	ldr.w	r8, [r1, r0, lsl #3]
   2cb82:	4543      	cmp	r3, r8
   2cb84:	bf28      	it	cs
   2cb86:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   2cb88:	fb03 9505 	mla	r5, r3, r5, r9
		info->index += index_jmp;
   2cb8c:	441a      	add	r2, r3
		if (index_jmp < layout->pages_count) {
   2cb8e:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   2cb90:	6025      	str	r5, [r4, #0]
		info->index += index_jmp;
   2cb92:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2cb94:	f100 0001 	add.w	r0, r0, #1
   2cb98:	d9e2      	bls.n	2cb60 <flash_get_page_info+0x24>
			return 0;
   2cb9a:	2000      	movs	r0, #0
   2cb9c:	e7e4      	b.n	2cb68 <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   2cb9e:	eba6 0309 	sub.w	r3, r6, r9
   2cba2:	fbb3 f3f5 	udiv	r3, r3, r5
   2cba6:	e7ea      	b.n	2cb7e <flash_get_page_info+0x42>

0002cba8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2cba8:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2cbaa:	2200      	movs	r2, #0
   2cbac:	f7ff bfc6 	b.w	2cb3c <flash_get_page_info>

0002cbb0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2cbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2cbb4:	6883      	ldr	r3, [r0, #8]
{
   2cbb6:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2cbb8:	695b      	ldr	r3, [r3, #20]
{
   2cbba:	4688      	mov	r8, r1
   2cbbc:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2cbbe:	a901      	add	r1, sp, #4
   2cbc0:	aa02      	add	r2, sp, #8
   2cbc2:	4798      	blx	r3
	off_t off = 0;
   2cbc4:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2cbc6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2cbc8:	4625      	mov	r5, r4
   2cbca:	9b02      	ldr	r3, [sp, #8]
   2cbcc:	42ab      	cmp	r3, r5
   2cbce:	d802      	bhi.n	2cbd6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2cbd0:	b006      	add	sp, #24
   2cbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2cbd6:	9f01      	ldr	r7, [sp, #4]
   2cbd8:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2cbdc:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2cbde:	687b      	ldr	r3, [r7, #4]
   2cbe0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2cbe2:	683a      	ldr	r2, [r7, #0]
   2cbe4:	42b2      	cmp	r2, r6
   2cbe6:	eb0a 0306 	add.w	r3, sl, r6
   2cbea:	d802      	bhi.n	2cbf2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2cbec:	3501      	adds	r5, #1
   2cbee:	469a      	mov	sl, r3
   2cbf0:	e7eb      	b.n	2cbca <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2cbf2:	4649      	mov	r1, r9
   2cbf4:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2cbf6:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2cbf8:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2cbfa:	47c0      	blx	r8
   2cbfc:	2800      	cmp	r0, #0
   2cbfe:	d0e7      	beq.n	2cbd0 <flash_page_foreach+0x20>
			off += page_info.size;
   2cc00:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2cc02:	3601      	adds	r6, #1
			off += page_info.size;
   2cc04:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2cc06:	e7ec      	b.n	2cbe2 <flash_page_foreach+0x32>

0002cc08 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2cc08:	6902      	ldr	r2, [r0, #16]
{
   2cc0a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2cc0c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2cc10:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2cc14:	2000      	movs	r0, #0
   2cc16:	4770      	bx	lr

0002cc18 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2cc18:	6843      	ldr	r3, [r0, #4]
   2cc1a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2cc1c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2cc20:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2cc24:	4770      	bx	lr

0002cc26 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2cc26:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2cc28:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2cc2a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2cc2e:	b940      	cbnz	r0, 2cc42 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2cc30:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2cc32:	0792      	lsls	r2, r2, #30
   2cc34:	d406      	bmi.n	2cc44 <is_tx_ready+0x1e>
   2cc36:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2cc3a:	3800      	subs	r0, #0
   2cc3c:	bf18      	it	ne
   2cc3e:	2001      	movne	r0, #1
   2cc40:	4770      	bx	lr
   2cc42:	2001      	movs	r0, #1
}
   2cc44:	4770      	bx	lr

0002cc46 <user_callback>:
	if (data->async->user_callback) {
   2cc46:	6903      	ldr	r3, [r0, #16]
   2cc48:	68da      	ldr	r2, [r3, #12]
   2cc4a:	6813      	ldr	r3, [r2, #0]
   2cc4c:	b10b      	cbz	r3, 2cc52 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2cc4e:	6852      	ldr	r2, [r2, #4]
   2cc50:	4718      	bx	r3
}
   2cc52:	4770      	bx	lr

0002cc54 <notify_uart_rx_rdy>:
{
   2cc54:	b570      	push	{r4, r5, r6, lr}
   2cc56:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2cc58:	6906      	ldr	r6, [r0, #16]
{
   2cc5a:	4604      	mov	r4, r0
   2cc5c:	460d      	mov	r5, r1
	struct uart_event evt = {
   2cc5e:	2214      	movs	r2, #20
   2cc60:	2100      	movs	r1, #0
   2cc62:	a801      	add	r0, sp, #4
   2cc64:	f7fd ff24 	bl	2aab0 <memset>
   2cc68:	2302      	movs	r3, #2
   2cc6a:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2cc6e:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2cc70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2cc72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2cc74:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2cc76:	a901      	add	r1, sp, #4
   2cc78:	4620      	mov	r0, r4
	struct uart_event evt = {
   2cc7a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   2cc7e:	f7ff ffe2 	bl	2cc46 <user_callback>
}
   2cc82:	b006      	add	sp, #24
   2cc84:	bd70      	pop	{r4, r5, r6, pc}

0002cc86 <notify_rx_buf_release>:
{
   2cc86:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (*buf) {
   2cc88:	680f      	ldr	r7, [r1, #0]
{
   2cc8a:	b087      	sub	sp, #28
   2cc8c:	4606      	mov	r6, r0
   2cc8e:	460c      	mov	r4, r1
   2cc90:	4615      	mov	r5, r2
	if (*buf) {
   2cc92:	b187      	cbz	r7, 2ccb6 <notify_rx_buf_release+0x30>
		struct uart_event evt = {
   2cc94:	2100      	movs	r1, #0
   2cc96:	2214      	movs	r2, #20
   2cc98:	a801      	add	r0, sp, #4
   2cc9a:	f7fd ff09 	bl	2aab0 <memset>
   2cc9e:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2cca0:	eb0d 0103 	add.w	r1, sp, r3
   2cca4:	4630      	mov	r0, r6
		struct uart_event evt = {
   2cca6:	f88d 3004 	strb.w	r3, [sp, #4]
   2ccaa:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   2ccac:	f7ff ffcb 	bl	2cc46 <user_callback>
		if (clear) {
   2ccb0:	b10d      	cbz	r5, 2ccb6 <notify_rx_buf_release+0x30>
			*buf = NULL;
   2ccb2:	2300      	movs	r3, #0
   2ccb4:	6023      	str	r3, [r4, #0]
}
   2ccb6:	b007      	add	sp, #28
   2ccb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ccba <notify_rx_disable>:
{
   2ccba:	b510      	push	{r4, lr}
   2ccbc:	b086      	sub	sp, #24
   2ccbe:	4604      	mov	r4, r0
	struct uart_event evt = {
   2ccc0:	2214      	movs	r2, #20
   2ccc2:	2100      	movs	r1, #0
   2ccc4:	a801      	add	r0, sp, #4
   2ccc6:	f7fd fef3 	bl	2aab0 <memset>
   2ccca:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2cccc:	a901      	add	r1, sp, #4
   2ccce:	4620      	mov	r0, r4
	struct uart_event evt = {
   2ccd0:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2ccd4:	f7ff ffb7 	bl	2cc46 <user_callback>
}
   2ccd8:	b006      	add	sp, #24
   2ccda:	bd10      	pop	{r4, pc}

0002ccdc <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   2ccdc:	6843      	ldr	r3, [r0, #4]
{
   2ccde:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   2cce0:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2cce2:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   2cce4:	f04f 0040 	mov.w	r0, #64	; 0x40
   2cce8:	f3ef 8511 	mrs	r5, BASEPRI
   2ccec:	f380 8812 	msr	BASEPRI_MAX, r0
   2ccf0:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2ccf4:	68e4      	ldr	r4, [r4, #12]
   2ccf6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   2ccf8:	b190      	cbz	r0, 2cd20 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   2ccfa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   2ccfc:	b998      	cbnz	r0, 2cd26 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   2ccfe:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2cd02:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2cd06:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2cd0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2cd0e:	f042 0220 	orr.w	r2, r2, #32
   2cd12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2cd16:	f385 8811 	msr	BASEPRI, r5
   2cd1a:	f3bf 8f6f 	isb	sy
}
   2cd1e:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   2cd20:	f06f 000c 	mvn.w	r0, #12
   2cd24:	e7f7      	b.n	2cd16 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   2cd26:	f06f 000f 	mvn.w	r0, #15
   2cd2a:	e7f4      	b.n	2cd16 <uarte_nrfx_rx_buf_rsp+0x3a>

0002cd2c <uarte_nrfx_callback_set>:
	if (!data->async) {
   2cd2c:	6903      	ldr	r3, [r0, #16]
   2cd2e:	68db      	ldr	r3, [r3, #12]
   2cd30:	b11b      	cbz	r3, 2cd3a <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   2cd32:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   2cd36:	2000      	movs	r0, #0
   2cd38:	4770      	bx	lr
		return -ENOTSUP;
   2cd3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2cd3e:	4770      	bx	lr

0002cd40 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2cd40:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2cd42:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2cd44:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2cd46:	681b      	ldr	r3, [r3, #0]
{
   2cd48:	b510      	push	{r4, lr}
	if (data->async) {
   2cd4a:	b958      	cbnz	r0, 2cd64 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2cd4c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2cd50:	b15c      	cbz	r4, 2cd6a <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   2cd52:	7d52      	ldrb	r2, [r2, #21]
   2cd54:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cd56:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2cd5a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cd5e:	2201      	movs	r2, #1
   2cd60:	601a      	str	r2, [r3, #0]
}
   2cd62:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2cd64:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2cd68:	e7fb      	b.n	2cd62 <uarte_nrfx_poll_in+0x22>
		return -1;
   2cd6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cd6e:	e7f8      	b.n	2cd62 <uarte_nrfx_poll_in+0x22>

0002cd70 <rx_timeout>:
{
   2cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   2cd72:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2cd74:	68f3      	ldr	r3, [r6, #12]
   2cd76:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
   2cd7a:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   2cd7e:	bb42      	cbnz	r2, 2cdd2 <rx_timeout+0x62>
	const struct device *dev = data->dev;
   2cd80:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   2cd82:	686a      	ldr	r2, [r5, #4]
   2cd84:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
   2cd86:	2110      	movs	r1, #16
   2cd88:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2cd8c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
   2cd90:	6f59      	ldr	r1, [r3, #116]	; 0x74
   2cd92:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2cd94:	bf1e      	ittt	ne
   2cd96:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   2cd98:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
   2cd9a:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
   2cd9e:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   2cda2:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2cda4:	bf48      	it	mi
   2cda6:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2cdaa:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
   2cdae:	bf48      	it	mi
   2cdb0:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2cdb2:	18a0      	adds	r0, r4, r2
   2cdb4:	4288      	cmp	r0, r1
   2cdb6:	d90d      	bls.n	2cdd4 <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2cdb8:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   2cdba:	2c00      	cmp	r4, #0
   2cdbc:	dd04      	ble.n	2cdc8 <rx_timeout+0x58>
		clipped = true;
   2cdbe:	2701      	movs	r7, #1
   2cdc0:	e00e      	b.n	2cde0 <rx_timeout+0x70>
			data->async->rx_timeout_left -=
   2cdc2:	1a52      	subs	r2, r2, r1
   2cdc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
   2cdc8:	686b      	ldr	r3, [r5, #4]
   2cdca:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2cdcc:	2210      	movs	r2, #16
   2cdce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2cdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   2cdd4:	2c00      	cmp	r4, #0
   2cdd6:	d0f7      	beq.n	2cdc8 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
   2cdd8:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
   2cddc:	428a      	cmp	r2, r1
   2cdde:	daf0      	bge.n	2cdc2 <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
   2cde0:	4621      	mov	r1, r4
   2cde2:	4628      	mov	r0, r5
   2cde4:	f7ff ff36 	bl	2cc54 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2cde8:	68f0      	ldr	r0, [r6, #12]
   2cdea:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   2cdec:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
   2cdee:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   2cdf0:	4421      	add	r1, r4
			data->async->rx_offset += len;
   2cdf2:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   2cdf4:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
   2cdf6:	2f00      	cmp	r7, #0
   2cdf8:	d0e6      	beq.n	2cdc8 <rx_timeout+0x58>
	z_impl_k_timer_stop(timer);
   2cdfa:	3088      	adds	r0, #136	; 0x88
   2cdfc:	f000 fb57 	bl	2d4ae <z_impl_k_timer_stop>
}
   2ce00:	e7e2      	b.n	2cdc8 <rx_timeout+0x58>

0002ce02 <rx_flush>:
	return config->uarte_regs;
   2ce02:	6843      	ldr	r3, [r0, #4]
{
   2ce04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   2ce06:	681d      	ldr	r5, [r3, #0]
{
   2ce08:	4616      	mov	r6, r2
    return p_reg->RXD.AMOUNT;
   2ce0a:	f8d5 753c 	ldr.w	r7, [r5, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   2ce0e:	460c      	mov	r4, r1
   2ce10:	bb31      	cbnz	r1, 2ce60 <rx_flush+0x5e>
   2ce12:	2605      	movs	r6, #5
		flush_buf = tmp_buf;
   2ce14:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2ce16:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ce1a:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   2ce1c:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ce20:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2ce24:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ce28:	2201      	movs	r2, #1
   2ce2a:	62ea      	str	r2, [r5, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ce2c:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ce30:	2a00      	cmp	r2, #0
   2ce32:	d0fb      	beq.n	2ce2c <rx_flush+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ce34:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2ce38:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2ce3c:	f8d5 053c 	ldr.w	r0, [r5, #1340]	; 0x53c
	if (!buf) {
   2ce40:	b914      	cbnz	r4, 2ce48 <rx_flush+0x46>
			return rx_amount;
   2ce42:	b2c0      	uxtb	r0, r0
}
   2ce44:	b003      	add	sp, #12
   2ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
   2ce48:	4287      	cmp	r7, r0
   2ce4a:	d1fa      	bne.n	2ce42 <rx_flush+0x40>
   2ce4c:	4426      	add	r6, r4
	for (int i = 0; i < flush_len; i++) {
   2ce4e:	42b4      	cmp	r4, r6
   2ce50:	d101      	bne.n	2ce56 <rx_flush+0x54>
	return 0;
   2ce52:	2000      	movs	r0, #0
   2ce54:	e7f6      	b.n	2ce44 <rx_flush+0x42>
		if (buf[i] != dirty) {
   2ce56:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ce5a:	2b00      	cmp	r3, #0
   2ce5c:	d0f7      	beq.n	2ce4e <rx_flush+0x4c>
   2ce5e:	e7f0      	b.n	2ce42 <rx_flush+0x40>
		memset(buf, dirty, len);
   2ce60:	2100      	movs	r1, #0
   2ce62:	4620      	mov	r0, r4
   2ce64:	f7fd fe24 	bl	2aab0 <memset>
		flush_len = len;
   2ce68:	4623      	mov	r3, r4
   2ce6a:	e7d4      	b.n	2ce16 <rx_flush+0x14>

0002ce6c <async_uart_release>:
{
   2ce6c:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ce6e:	6903      	ldr	r3, [r0, #16]
{
   2ce70:	4604      	mov	r4, r0
	__asm__ volatile(
   2ce72:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ce76:	f3ef 8611 	mrs	r6, BASEPRI
   2ce7a:	f382 8812 	msr	BASEPRI_MAX, r2
   2ce7e:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2ce82:	68dd      	ldr	r5, [r3, #12]
   2ce84:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   2ce88:	ea23 0301 	bic.w	r3, r3, r1
   2ce8c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
   2ce90:	b96b      	cbnz	r3, 2ceae <async_uart_release+0x42>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2ce92:	2902      	cmp	r1, #2
   2ce94:	d106      	bne.n	2cea4 <async_uart_release+0x38>
				rx_flush(dev, data->async->rx_flush_buffer,
   2ce96:	2205      	movs	r2, #5
   2ce98:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
   2ce9c:	f7ff ffb1 	bl	2ce02 <rx_flush>
			data->async->rx_flush_cnt =
   2cea0:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
   2cea4:	6863      	ldr	r3, [r4, #4]
   2cea6:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2cea8:	2200      	movs	r2, #0
   2ceaa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2ceae:	f386 8811 	msr	BASEPRI, r6
   2ceb2:	f3bf 8f6f 	isb	sy
}
   2ceb6:	bd70      	pop	{r4, r5, r6, pc}

0002ceb8 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2ceb8:	68c2      	ldr	r2, [r0, #12]
   2ceba:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
   2cebc:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
   2cebe:	b508      	push	{r3, lr}
   2cec0:	4603      	mov	r3, r0
	if (!remaining) {
   2cec2:	d00b      	beq.n	2cedc <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   2cec4:	2a08      	cmp	r2, #8
   2cec6:	bf28      	it	cs
   2cec8:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2ceca:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2cecc:	3018      	adds	r0, #24
   2cece:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2ced0:	689b      	ldr	r3, [r3, #8]
   2ced2:	4419      	add	r1, r3
   2ced4:	f7fd fde1 	bl	2aa9a <memcpy>
	return true;
   2ced8:	2001      	movs	r0, #1
}
   2ceda:	bd08      	pop	{r3, pc}
		return false;
   2cedc:	4610      	mov	r0, r2
   2cede:	e7fc      	b.n	2ceda <setup_tx_cache.isra.0+0x22>

0002cee0 <uarte_nrfx_tx_abort>:
{
   2cee0:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2cee2:	6843      	ldr	r3, [r0, #4]
   2cee4:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
   2cee6:	6903      	ldr	r3, [r0, #16]
   2cee8:	68d8      	ldr	r0, [r3, #12]
   2ceea:	6883      	ldr	r3, [r0, #8]
   2ceec:	b14b      	cbz	r3, 2cf02 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
   2ceee:	2400      	movs	r4, #0
   2cef0:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
   2cef4:	3028      	adds	r0, #40	; 0x28
   2cef6:	f000 fada 	bl	2d4ae <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cefa:	2301      	movs	r3, #1
   2cefc:	60eb      	str	r3, [r5, #12]
	return 0;
   2cefe:	4620      	mov	r0, r4
}
   2cf00:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2cf02:	f06f 000d 	mvn.w	r0, #13
   2cf06:	e7fb      	b.n	2cf00 <uarte_nrfx_tx_abort+0x20>

0002cf08 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2cf08:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2cf0a:	6818      	ldr	r0, [r3, #0]
   2cf0c:	f7ff bfe8 	b.w	2cee0 <uarte_nrfx_tx_abort>

0002cf10 <uarte_nrfx_rx_disable>:
{
   2cf10:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2cf12:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2cf14:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   2cf16:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
   2cf18:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2cf1a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2cf1c:	b1b3      	cbz	r3, 2cf4c <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   2cf1e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   2cf20:	b153      	cbz	r3, 2cf38 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2cf22:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2cf26:	f023 0320 	bic.w	r3, r3, #32
   2cf2a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cf2e:	2300      	movs	r3, #0
   2cf30:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2cf34:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   2cf38:	3088      	adds	r0, #136	; 0x88
   2cf3a:	f000 fab8 	bl	2d4ae <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2cf3e:	68eb      	ldr	r3, [r5, #12]
   2cf40:	2000      	movs	r0, #0
   2cf42:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cf46:	2301      	movs	r3, #1
   2cf48:	6063      	str	r3, [r4, #4]
}
   2cf4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2cf4c:	f06f 000d 	mvn.w	r0, #13
   2cf50:	e7fb      	b.n	2cf4a <uarte_nrfx_rx_disable+0x3a>

0002cf52 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2cf52:	b510      	push	{r4, lr}
   2cf54:	2200      	movs	r2, #0
   2cf56:	4604      	mov	r4, r0
   2cf58:	2101      	movs	r1, #1
   2cf5a:	2002      	movs	r0, #2
   2cf5c:	f7e7 fac4 	bl	144e8 <z_arm_irq_priority_set>
   2cf60:	2002      	movs	r0, #2
   2cf62:	f7e7 fa8f 	bl	14484 <arch_irq_enable>
   2cf66:	4620      	mov	r0, r4
   2cf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cf6c:	f7f1 be9e 	b.w	1ecac <uarte_instance_init.isra.0>

0002cf70 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2cf70:	b510      	push	{r4, lr}
   2cf72:	2200      	movs	r2, #0
   2cf74:	4604      	mov	r4, r0
   2cf76:	2101      	movs	r1, #1
   2cf78:	2028      	movs	r0, #40	; 0x28
   2cf7a:	f7e7 fab5 	bl	144e8 <z_arm_irq_priority_set>
   2cf7e:	2028      	movs	r0, #40	; 0x28
   2cf80:	f7e7 fa80 	bl	14484 <arch_irq_enable>
   2cf84:	4620      	mov	r0, r4
   2cf86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cf8a:	f7f1 be8f 	b.w	1ecac <uarte_instance_init.isra.0>

0002cf8e <tx_start>:
{
   2cf8e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2cf90:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2cf92:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2cf94:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2cf98:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cf9c:	2200      	movs	r2, #0
   2cf9e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2cfa2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2cfa6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2cfaa:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2cfae:	6862      	ldr	r2, [r4, #4]
   2cfb0:	06d2      	lsls	r2, r2, #27
   2cfb2:	d50f      	bpl.n	2cfd4 <tx_start+0x46>
	if (data->async) {
   2cfb4:	6902      	ldr	r2, [r0, #16]
   2cfb6:	68d2      	ldr	r2, [r2, #12]
   2cfb8:	b12a      	cbz	r2, 2cfc6 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2cfba:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
   2cfbe:	f041 0101 	orr.w	r1, r1, #1
   2cfc2:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2cfc6:	2208      	movs	r2, #8
   2cfc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2cfcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2cfd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2cfd4:	2201      	movs	r2, #1
   2cfd6:	609a      	str	r2, [r3, #8]
}
   2cfd8:	bd10      	pop	{r4, pc}

0002cfda <start_tx_locked.isra.0>:
static void start_tx_locked(const struct device *dev, struct uarte_nrfx_data *data)
   2cfda:	b510      	push	{r4, lr}
   2cfdc:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2cfde:	f7ff fe22 	bl	2cc26 <is_tx_ready>
   2cfe2:	680b      	ldr	r3, [r1, #0]
   2cfe4:	b918      	cbnz	r0, 2cfee <start_tx_locked.isra.0+0x14>
		data->async->pending_tx = true;
   2cfe6:	2201      	movs	r2, #1
   2cfe8:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
   2cfec:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2cfee:	2200      	movs	r2, #0
   2cff0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   2cff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cff8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2cffc:	4620      	mov	r0, r4
   2cffe:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   2d002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2d006:	f7ff bfc2 	b.w	2cf8e <tx_start>

0002d00a <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2d00a:	2200      	movs	r2, #0
{
   2d00c:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2d00e:	4611      	mov	r1, r2
   2d010:	4610      	mov	r0, r2
   2d012:	f7f8 fee7 	bl	25de4 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2d016:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   2d018:	bf18      	it	ne
   2d01a:	f06f 0015 	mvnne.w	r0, #21
   2d01e:	bd08      	pop	{r3, pc}

0002d020 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2d020:	4770      	bx	lr

0002d022 <sys_clock_cycle_get_32>:
{
   2d022:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2d024:	f7f2 fc2c 	bl	1f880 <z_nrf_rtc_timer_read>
}
   2d028:	bd08      	pop	{r3, pc}

0002d02a <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2d02a:	b530      	push	{r4, r5, lr}
   2d02c:	b08d      	sub	sp, #52	; 0x34
   2d02e:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	BT_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2d030:	4601      	mov	r1, r0
   2d032:	4668      	mov	r0, sp
{
   2d034:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2d036:	f7f3 fb85 	bl	20744 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2d03a:	4621      	mov	r1, r4
   2d03c:	a804      	add	r0, sp, #16
   2d03e:	f7f3 fb81 	bl	20744 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2d042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d046:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d04a:	f7f2 fdc5 	bl	1fbd8 <multithreading_lock_acquire>

	if (!errcode) {
   2d04e:	4604      	mov	r4, r0
   2d050:	b960      	cbnz	r0, 2d06c <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2d052:	aa08      	add	r2, sp, #32
   2d054:	a904      	add	r1, sp, #16
   2d056:	4668      	mov	r0, sp
   2d058:	f7df f8c0 	bl	c1dc <sdc_soc_ecb_block_encrypt>
   2d05c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2d05e:	f7f2 fdc3 	bl	1fbe8 <multithreading_lock_release>
	}

	if (!errcode) {
   2d062:	b91c      	cbnz	r4, 2d06c <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2d064:	a908      	add	r1, sp, #32
   2d066:	4628      	mov	r0, r5
   2d068:	f7f3 fb6c 	bl	20744 <sys_memcpy_swap.constprop.0>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2d06c:	4620      	mov	r0, r4
   2d06e:	b00d      	add	sp, #52	; 0x34
   2d070:	bd30      	pop	{r4, r5, pc}

0002d072 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2d072:	4668      	mov	r0, sp
   2d074:	f020 0107 	bic.w	r1, r0, #7
   2d078:	468d      	mov	sp, r1
   2d07a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2d07c:	f7d5 fc6a 	bl	2954 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2d080:	f7e7 fa6a 	bl	14558 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2d084:	f7e7 fb56 	bl	14734 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2d088:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2d08c:	4685      	mov	sp, r0
   2d08e:	4770      	bx	lr

0002d090 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2d090:	4668      	mov	r0, sp
   2d092:	f020 0107 	bic.w	r1, r0, #7
   2d096:	468d      	mov	sp, r1
   2d098:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2d09a:	f7d5 fbdd 	bl	2858 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2d09e:	f7e7 fa5b 	bl	14558 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2d0a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2d0a6:	4685      	mov	sp, r0
   2d0a8:	4770      	bx	lr

0002d0aa <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2d0aa:	4668      	mov	r0, sp
   2d0ac:	f020 0107 	bic.w	r1, r0, #7
   2d0b0:	468d      	mov	sp, r1
   2d0b2:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2d0b4:	f7de fdd8 	bl	bc68 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2d0b8:	f7e7 fa4e 	bl	14558 <_arch_isr_direct_pm>
   2d0bc:	f7e7 fb3a 	bl	14734 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2d0c0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2d0c4:	4685      	mov	sp, r0
   2d0c6:	4770      	bx	lr

0002d0c8 <nrfx_clock_enable>:
}
   2d0c8:	4770      	bx	lr

0002d0ca <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2d0ca:	f7d6 b893 	b.w	31f4 <MPSL_IRQ_CLOCK_Handler>

0002d0ce <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2d0ce:	f7d6 bc69 	b.w	39a4 <mpsl_is_initialized>

0002d0d2 <nrf_flash_sync_get_timestamp_begin>:
}
   2d0d2:	4770      	bx	lr

0002d0d4 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2d0d4:	f7f8 be2a 	b.w	25d2c <nrf_cc3xx_platform_init>

0002d0d8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2d0d8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2d0da:	f7e7 f8b3 	bl	14244 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2d0de:	f7e7 f965 	bl	143ac <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2d0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2d0e6:	f7f8 be21 	b.w	25d2c <nrf_cc3xx_platform_init>

0002d0ea <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2d0ea:	4700      	bx	r0

0002d0ec <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2d0ec:	f000 b9a6 	b.w	2d43c <z_impl_k_busy_wait>

0002d0f0 <nrf_gpio_pin_present_check>:
    switch (port)
   2d0f0:	0943      	lsrs	r3, r0, #5
   2d0f2:	d00b      	beq.n	2d10c <nrf_gpio_pin_present_check+0x1c>
   2d0f4:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   2d0f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2d0fa:	bf18      	it	ne
   2d0fc:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2d0fe:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2d102:	fa23 f000 	lsr.w	r0, r3, r0
}
   2d106:	f000 0001 	and.w	r0, r0, #1
   2d10a:	4770      	bx	lr
    switch (port)
   2d10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d110:	e7f5      	b.n	2d0fe <nrf_gpio_pin_present_check+0xe>

0002d112 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2d112:	0080      	lsls	r0, r0, #2
}
   2d114:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2d118:	4770      	bx	lr

0002d11a <nrf_gpio_reconfigure>:
{
   2d11a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d11e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d120:	a801      	add	r0, sp, #4
{
   2d122:	460e      	mov	r6, r1
   2d124:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2d128:	4690      	mov	r8, r2
   2d12a:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d12c:	f7f3 ffc4 	bl	210b8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2d130:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2d132:	f1b8 0f00 	cmp.w	r8, #0
   2d136:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2d13a:	bf14      	ite	ne
   2d13c:	2302      	movne	r3, #2
   2d13e:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2d140:	2e00      	cmp	r6, #0
   2d142:	bf18      	it	ne
   2d144:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2d148:	2d00      	cmp	r5, #0
   2d14a:	bf14      	ite	ne
   2d14c:	210c      	movne	r1, #12
   2d14e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2d150:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2d152:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2d156:	bf14      	ite	ne
   2d158:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2d15c:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2d15e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2d160:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2d164:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2d168:	bf14      	ite	ne
   2d16a:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2d16e:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2d170:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2d172:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2d176:	b106      	cbz	r6, 2d17a <nrf_gpio_reconfigure+0x60>
   2d178:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2d17a:	f1b8 0f00 	cmp.w	r8, #0
   2d17e:	d003      	beq.n	2d188 <nrf_gpio_reconfigure+0x6e>
   2d180:	f898 8000 	ldrb.w	r8, [r8]
   2d184:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2d188:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2d18a:	b10d      	cbz	r5, 2d190 <nrf_gpio_reconfigure+0x76>
   2d18c:	782d      	ldrb	r5, [r5, #0]
   2d18e:	00ad      	lsls	r5, r5, #2
   2d190:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2d194:	b10c      	cbz	r4, 2d19a <nrf_gpio_reconfigure+0x80>
   2d196:	7822      	ldrb	r2, [r4, #0]
   2d198:	0214      	lsls	r4, r2, #8
   2d19a:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2d19c:	b10f      	cbz	r7, 2d1a2 <nrf_gpio_reconfigure+0x88>
   2d19e:	783f      	ldrb	r7, [r7, #0]
   2d1a0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2d1a2:	432c      	orrs	r4, r5
   2d1a4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2d1a6:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2d1aa:	b002      	add	sp, #8
   2d1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d1b0 <nrf_gpio_cfg_sense_set>:
{
   2d1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2d1b2:	f10d 030f 	add.w	r3, sp, #15
   2d1b6:	9301      	str	r3, [sp, #4]
   2d1b8:	2300      	movs	r3, #0
{
   2d1ba:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2d1be:	9300      	str	r3, [sp, #0]
   2d1c0:	461a      	mov	r2, r3
   2d1c2:	4619      	mov	r1, r3
   2d1c4:	f7ff ffa9 	bl	2d11a <nrf_gpio_reconfigure>
}
   2d1c8:	b005      	add	sp, #20
   2d1ca:	f85d fb04 	ldr.w	pc, [sp], #4

0002d1ce <is_valid_address>:
{
   2d1ce:	4603      	mov	r3, r0
   2d1d0:	4608      	mov	r0, r1
   2d1d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2d1d6:	b510      	push	{r4, lr}
   2d1d8:	690c      	ldr	r4, [r1, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2d1da:	694a      	ldr	r2, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   2d1dc:	4362      	muls	r2, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2d1de:	4293      	cmp	r3, r2
   2d1e0:	d308      	bcc.n	2d1f4 <is_valid_address+0x26>
    if (uicr_allowed &&
   2d1e2:	b130      	cbz	r0, 2d1f2 <is_valid_address+0x24>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2d1e4:	f1a3 2010 	sub.w	r0, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   2d1e8:	f5b0 7f42 	cmp.w	r0, #776	; 0x308
   2d1ec:	bf2c      	ite	cs
   2d1ee:	2000      	movcs	r0, #0
   2d1f0:	2001      	movcc	r0, #1
}
   2d1f2:	bd10      	pop	{r4, pc}
        return true;
   2d1f4:	2001      	movs	r0, #1
   2d1f6:	e7fc      	b.n	2d1f2 <is_valid_address+0x24>

0002d1f8 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2d1f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d1fc:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2d1fe:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2d200:	4350      	muls	r0, r2
   2d202:	4770      	bx	lr

0002d204 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2d204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d208:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2d20a:	4770      	bx	lr

0002d20c <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2d20c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d210:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2d212:	4770      	bx	lr

0002d214 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2d214:	f7f4 bb12 	b.w	2183c <_DoInit>

0002d218 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2d218:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2d21a:	f7ff fffb 	bl	2d214 <SEGGER_RTT_Init>

	return 0;
}
   2d21e:	2000      	movs	r0, #0
   2d220:	bd08      	pop	{r3, pc}

0002d222 <z_device_state_init>:
}
   2d222:	4770      	bx	lr

0002d224 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2d224:	b138      	cbz	r0, 2d236 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2d226:	68c3      	ldr	r3, [r0, #12]
   2d228:	8818      	ldrh	r0, [r3, #0]
   2d22a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2d22e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2d232:	4258      	negs	r0, r3
   2d234:	4158      	adcs	r0, r3
}
   2d236:	4770      	bx	lr

0002d238 <k_heap_init>:
{
   2d238:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2d23a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2d23e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2d242:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2d244:	f7e4 bb04 	b.w	11850 <sys_heap_init>

0002d248 <k_mem_slab_init>:
{
   2d248:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2d24a:	2400      	movs	r4, #0
   2d24c:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2d24e:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2d250:	ea41 0402 	orr.w	r4, r1, r2
   2d254:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2d258:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   2d25c:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2d25e:	d10c      	bne.n	2d27a <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   2d260:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d262:	42a3      	cmp	r3, r4
   2d264:	d103      	bne.n	2d26e <k_mem_slab_init+0x26>
   2d266:	e9c0 0000 	strd	r0, r0, [r0]
}
   2d26a:	2000      	movs	r0, #0
}
   2d26c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2d26e:	6985      	ldr	r5, [r0, #24]
   2d270:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2d272:	3401      	adds	r4, #1
		slab->free_list = p;
   2d274:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   2d276:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2d278:	e7f3      	b.n	2d262 <k_mem_slab_init+0x1a>
		return -EINVAL;
   2d27a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2d27e:	e7f5      	b.n	2d26c <k_mem_slab_init+0x24>

0002d280 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2d280:	f3ef 8005 	mrs	r0, IPSR
}
   2d284:	3800      	subs	r0, #0
   2d286:	bf18      	it	ne
   2d288:	2001      	movne	r0, #1
   2d28a:	4770      	bx	lr

0002d28c <z_impl_k_thread_name_set>:
}
   2d28c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2d290:	4770      	bx	lr

0002d292 <k_thread_name_get>:
}
   2d292:	2000      	movs	r0, #0
   2d294:	4770      	bx	lr

0002d296 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2d296:	f7f6 bdc1 	b.w	23e1c <z_sched_start>

0002d29a <z_pm_save_idle_exit>:
{
   2d29a:	b508      	push	{r3, lr}
	pm_system_resume();
   2d29c:	f7e6 fd7c 	bl	13d98 <pm_system_resume>
}
   2d2a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2d2a4:	f7ff bebc 	b.w	2d020 <sys_clock_idle_exit>

0002d2a8 <z_impl_k_mutex_init>:
{
   2d2a8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2d2aa:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2d2ac:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2d2b0:	e9c3 3300 	strd	r3, r3, [r3]
}
   2d2b4:	4770      	bx	lr

0002d2b6 <z_queue_node_peek>:
{
   2d2b6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2d2b8:	4604      	mov	r4, r0
   2d2ba:	b130      	cbz	r0, 2d2ca <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d2bc:	6802      	ldr	r2, [r0, #0]
   2d2be:	0793      	lsls	r3, r2, #30
   2d2c0:	d003      	beq.n	2d2ca <z_queue_node_peek+0x14>
		ret = anode->data;
   2d2c2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2d2c4:	b109      	cbz	r1, 2d2ca <z_queue_node_peek+0x14>
			k_free(anode);
   2d2c6:	f000 f952 	bl	2d56e <k_free>
}
   2d2ca:	4620      	mov	r0, r4
   2d2cc:	bd10      	pop	{r4, pc}

0002d2ce <z_impl_k_queue_init>:
	list->head = NULL;
   2d2ce:	2300      	movs	r3, #0
	list->tail = NULL;
   2d2d0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2d2d4:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2d2d6:	f100 030c 	add.w	r3, r0, #12
   2d2da:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2d2de:	f100 0314 	add.w	r3, r0, #20
   2d2e2:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2d2e6:	4770      	bx	lr

0002d2e8 <k_queue_append>:
{
   2d2e8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2d2ea:	2301      	movs	r3, #1
   2d2ec:	9300      	str	r3, [sp, #0]
   2d2ee:	2300      	movs	r3, #0
{
   2d2f0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2d2f2:	4619      	mov	r1, r3
   2d2f4:	f7f5 fa4c 	bl	22790 <queue_insert>
}
   2d2f8:	b003      	add	sp, #12
   2d2fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002d2fe <k_queue_prepend>:
{
   2d2fe:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2d300:	2300      	movs	r3, #0
{
   2d302:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2d304:	9300      	str	r3, [sp, #0]
   2d306:	4619      	mov	r1, r3
   2d308:	f7f5 fa42 	bl	22790 <queue_insert>
}
   2d30c:	b003      	add	sp, #12
   2d30e:	f85d fb04 	ldr.w	pc, [sp], #4

0002d312 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2d312:	b15a      	cbz	r2, 2d32c <z_impl_k_sem_init+0x1a>
   2d314:	428a      	cmp	r2, r1
   2d316:	d309      	bcc.n	2d32c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2d318:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2d31c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2d320:	e9c0 0000 	strd	r0, r0, [r0]
   2d324:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2d328:	2000      	movs	r0, #0
   2d32a:	4770      	bx	lr
		return -EINVAL;
   2d32c:	f06f 0015 	mvn.w	r0, #21
}
   2d330:	4770      	bx	lr

0002d332 <notify_queue_locked>:
	if (queue != NULL) {
   2d332:	b120      	cbz	r0, 2d33e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2d334:	2200      	movs	r2, #0
   2d336:	4611      	mov	r1, r2
   2d338:	3088      	adds	r0, #136	; 0x88
   2d33a:	f7f7 bb87 	b.w	24a4c <z_sched_wake>
}
   2d33e:	4770      	bx	lr

0002d340 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   2d340:	68c3      	ldr	r3, [r0, #12]
{
   2d342:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   2d344:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   2d348:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d34c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2d34e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2d350:	d502      	bpl.n	2d358 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2d352:	3010      	adds	r0, #16
   2d354:	f7f7 fd22 	bl	24d9c <z_abort_timeout>
}
   2d358:	4620      	mov	r0, r4
   2d35a:	bd10      	pop	{r4, pc}

0002d35c <cancel_async_locked>:
{
   2d35c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d35e:	68c0      	ldr	r0, [r0, #12]
{
   2d360:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2d362:	0784      	lsls	r4, r0, #30
   2d364:	f3c0 0140 	ubfx	r1, r0, #1, #1
   2d368:	d416      	bmi.n	2d398 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   2d36a:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2d36e:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   2d370:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   2d372:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2d374:	d510      	bpl.n	2d398 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d376:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   2d37a:	b168      	cbz	r0, 2d398 <cancel_async_locked+0x3c>
   2d37c:	4283      	cmp	r3, r0
   2d37e:	d11d      	bne.n	2d3bc <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   2d380:	6818      	ldr	r0, [r3, #0]
   2d382:	b999      	cbnz	r1, 2d3ac <cancel_async_locked+0x50>
   2d384:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   2d388:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2d38c:	428b      	cmp	r3, r1
   2d38e:	d101      	bne.n	2d394 <cancel_async_locked+0x38>
	list->tail = node;
   2d390:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   2d394:	2200      	movs	r2, #0
   2d396:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   2d398:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2d39a:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   2d39e:	bf1e      	ittt	ne
   2d3a0:	f042 0202 	orrne.w	r2, r2, #2
   2d3a4:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2d3a6:	f002 000f 	andne.w	r0, r2, #15
}
   2d3aa:	bd10      	pop	{r4, pc}
   2d3ac:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d3ae:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   2d3b2:	4283      	cmp	r3, r0
	list->tail = node;
   2d3b4:	bf08      	it	eq
   2d3b6:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   2d3ba:	e7eb      	b.n	2d394 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2d3bc:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2d3be:	6800      	ldr	r0, [r0, #0]
   2d3c0:	e7db      	b.n	2d37a <cancel_async_locked+0x1e>

0002d3c2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2d3c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2d3c6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2d3ca:	4283      	cmp	r3, r0
		return b2 - b1;
   2d3cc:	bf14      	ite	ne
   2d3ce:	1ac0      	subne	r0, r0, r3
	return 0;
   2d3d0:	2000      	moveq	r0, #0
}
   2d3d2:	4770      	bx	lr

0002d3d4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d3d4:	4603      	mov	r3, r0
   2d3d6:	b920      	cbnz	r0, 2d3e2 <z_reschedule_irqlock+0xe>
   2d3d8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2d3dc:	b90a      	cbnz	r2, 2d3e2 <z_reschedule_irqlock+0xe>
   2d3de:	f7e7 b8e9 	b.w	145b4 <arch_swap>
   2d3e2:	f383 8811 	msr	BASEPRI, r3
   2d3e6:	f3bf 8f6f 	isb	sy
}
   2d3ea:	4770      	bx	lr

0002d3ec <z_reschedule_unlocked>:
	__asm__ volatile(
   2d3ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d3f0:	f3ef 8011 	mrs	r0, BASEPRI
   2d3f4:	f383 8812 	msr	BASEPRI_MAX, r3
   2d3f8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d3fc:	f7ff bfea 	b.w	2d3d4 <z_reschedule_irqlock>

0002d400 <z_priq_dumb_best>:
{
   2d400:	4603      	mov	r3, r0
	return list->head == list;
   2d402:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d404:	4283      	cmp	r3, r0
   2d406:	d003      	beq.n	2d410 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2d408:	2800      	cmp	r0, #0
   2d40a:	bf38      	it	cc
   2d40c:	2000      	movcc	r0, #0
   2d40e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2d410:	2000      	movs	r0, #0
}
   2d412:	4770      	bx	lr

0002d414 <z_unpend_all>:
{
   2d414:	b538      	push	{r3, r4, r5, lr}
   2d416:	4605      	mov	r5, r0
	int need_sched = 0;
   2d418:	2000      	movs	r0, #0
	return list->head == list;
   2d41a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d41c:	42a5      	cmp	r5, r4
   2d41e:	d000      	beq.n	2d422 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d420:	b904      	cbnz	r4, 2d424 <z_unpend_all+0x10>
}
   2d422:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2d424:	4620      	mov	r0, r4
   2d426:	f7f6 fb0d 	bl	23a44 <z_unpend_thread>
		z_ready_thread(thread);
   2d42a:	4620      	mov	r0, r4
   2d42c:	f7f6 fcae 	bl	23d8c <z_ready_thread>
		need_sched = 1;
   2d430:	2001      	movs	r0, #1
   2d432:	e7f2      	b.n	2d41a <z_unpend_all+0x6>

0002d434 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2d434:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2d436:	f7f7 fe63 	bl	25100 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2d43a:	bd08      	pop	{r3, pc}

0002d43c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2d43c:	b108      	cbz	r0, 2d442 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2d43e:	f7e7 be5b 	b.w	150f8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2d442:	4770      	bx	lr

0002d444 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2d444:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d446:	1c4b      	adds	r3, r1, #1
   2d448:	bf08      	it	eq
   2d44a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2d44e:	4604      	mov	r4, r0
   2d450:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d452:	d013      	beq.n	2d47c <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d454:	ea54 0105 	orrs.w	r1, r4, r5
   2d458:	d103      	bne.n	2d462 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2d45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2d45e:	f7f7 be4f 	b.w	25100 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2d462:	f06f 0101 	mvn.w	r1, #1
   2d466:	1a0a      	subs	r2, r1, r0
   2d468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d46c:	eb61 0305 	sbc.w	r3, r1, r5
   2d470:	2a00      	cmp	r2, #0
   2d472:	f173 0100 	sbcs.w	r1, r3, #0
   2d476:	db02      	blt.n	2d47e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2d478:	4610      	mov	r0, r2
   2d47a:	4619      	mov	r1, r3
}
   2d47c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2d47e:	f7f7 fe3f 	bl	25100 <sys_clock_tick_get>
   2d482:	2c01      	cmp	r4, #1
   2d484:	f175 0300 	sbcs.w	r3, r5, #0
   2d488:	bfbc      	itt	lt
   2d48a:	2401      	movlt	r4, #1
   2d48c:	2500      	movlt	r5, #0
   2d48e:	1820      	adds	r0, r4, r0
   2d490:	eb45 0101 	adc.w	r1, r5, r1
   2d494:	e7f2      	b.n	2d47c <sys_clock_timeout_end_calc+0x38>

0002d496 <k_timer_init>:
	timer->status = 0U;
   2d496:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2d498:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2d49c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2d4a0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2d4a4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2d4a8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2d4aa:	6343      	str	r3, [r0, #52]	; 0x34
}
   2d4ac:	4770      	bx	lr

0002d4ae <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2d4ae:	b510      	push	{r4, lr}
   2d4b0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2d4b2:	f7f7 fc73 	bl	24d9c <z_abort_timeout>

	if (inactive) {
   2d4b6:	b9b0      	cbnz	r0, 2d4e6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2d4b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d4ba:	b10b      	cbz	r3, 2d4c0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2d4bc:	4620      	mov	r0, r4
   2d4be:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2d4c0:	f104 0018 	add.w	r0, r4, #24
   2d4c4:	f7f6 ffc6 	bl	24454 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2d4c8:	b168      	cbz	r0, 2d4e6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2d4ca:	f7f6 fc5f 	bl	23d8c <z_ready_thread>
   2d4ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d4d2:	f3ef 8011 	mrs	r0, BASEPRI
   2d4d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2d4da:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2d4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d4e2:	f7ff bf77 	b.w	2d3d4 <z_reschedule_irqlock>
   2d4e6:	bd10      	pop	{r4, pc}

0002d4e8 <add_event>:
{
   2d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4ea:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2d4ec:	e9d0 2300 	ldrd	r2, r3, [r0]
   2d4f0:	4290      	cmp	r0, r2
   2d4f2:	4604      	mov	r4, r0
   2d4f4:	460d      	mov	r5, r1
   2d4f6:	d105      	bne.n	2d504 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2d4f8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2d4fa:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2d4fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2d500:	6065      	str	r5, [r4, #4]
}
   2d502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2d504:	2b00      	cmp	r3, #0
   2d506:	d0f7      	beq.n	2d4f8 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2d508:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2d50a:	b100      	cbz	r0, 2d50e <add_event+0x26>
   2d50c:	3860      	subs	r0, #96	; 0x60
   2d50e:	b107      	cbz	r7, 2d512 <add_event+0x2a>
   2d510:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2d512:	4639      	mov	r1, r7
   2d514:	f7ff ff55 	bl	2d3c2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2d518:	2800      	cmp	r0, #0
   2d51a:	dced      	bgt.n	2d4f8 <add_event+0x10>
	return list->head == list;
   2d51c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d51e:	42b4      	cmp	r4, r6
   2d520:	d0ea      	beq.n	2d4f8 <add_event+0x10>
   2d522:	2e00      	cmp	r6, #0
   2d524:	bf38      	it	cc
   2d526:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2d528:	2e00      	cmp	r6, #0
   2d52a:	d0e5      	beq.n	2d4f8 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2d52c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2d52e:	b101      	cbz	r1, 2d532 <add_event+0x4a>
   2d530:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2d532:	4638      	mov	r0, r7
   2d534:	f7ff ff45 	bl	2d3c2 <z_sched_prio_cmp>
   2d538:	2800      	cmp	r0, #0
   2d53a:	dd05      	ble.n	2d548 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2d53c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2d53e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2d542:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2d544:	6075      	str	r5, [r6, #4]
			return;
   2d546:	e7dc      	b.n	2d502 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2d548:	6863      	ldr	r3, [r4, #4]
   2d54a:	42b3      	cmp	r3, r6
   2d54c:	d0d4      	beq.n	2d4f8 <add_event+0x10>
   2d54e:	6836      	ldr	r6, [r6, #0]
   2d550:	e7ea      	b.n	2d528 <add_event+0x40>

0002d552 <z_handle_obj_poll_events>:
{
   2d552:	4603      	mov	r3, r0
	return list->head == list;
   2d554:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2d556:	4283      	cmp	r3, r0
   2d558:	d008      	beq.n	2d56c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2d55a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2d55e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d560:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d562:	2300      	movs	r3, #0
	node->prev = NULL;
   2d564:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2d568:	f7f8 b91e 	b.w	257a8 <signal_poll_event>
}
   2d56c:	4770      	bx	lr

0002d56e <k_free>:
	if (ptr != NULL) {
   2d56e:	b120      	cbz	r0, 2d57a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2d570:	1f01      	subs	r1, r0, #4
   2d572:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2d576:	f7f4 bc4f 	b.w	21e18 <k_heap_free>
}
   2d57a:	4770      	bx	lr

0002d57c <k_malloc>:
{
   2d57c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2d57e:	2004      	movs	r0, #4
   2d580:	f7f8 bb76 	b.w	25c70 <k_aligned_alloc>

0002d584 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2d584:	f7f3 bbe4 	b.w	20d50 <SystemInit>
